// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ../../coin-server/common/errmsg/error_code.go
package errmsg

import (
	"github.com/ywh147906/load-test/common/values/env"
)

var openStack bool

func init() {
	if env.GetString(env.ERROR_CODE_STACK) == "1" {
		openStack=true
	}
}


func NewErrAchievementNotFinished() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_achievement_not_finished"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrAchievementNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_achievement_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrAchievementAlreadyCollect() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_achievement_already_collect"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrAchievementMustGainInOrder() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_achievement_must_gain_in_order"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEventDoNotCollectAgain() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_event_do_not_collect_again"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEventHasEnd() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_event_has_end"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityGiftNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_gift_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityNeedPaid() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_need_paid"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPassesNotUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_passes_not_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityGiftEmpty() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_gift_empty"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityDrawNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_draw_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityNotReadyForCollection() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_not_ready_for_collection"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityNotReadyForBuy() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_not_ready_for_buy"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityPreGiftNotBuy() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_pre_gift_not_buy"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNeedRecharge() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_need_recharge"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityRankingIsOver() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_ranking_is_over"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityRankingNotRankingData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_ranking_not_ranking_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityRankingCreateConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_ranking_create_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityRankingSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_ranking_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityRankingJoin() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_ranking_join"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityRankingNotRanking() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_ranking_not_ranking"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityRankingCreate() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_ranking_create"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNoGift() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_no_gift"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNoStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_no_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyTimeOver() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_time_over"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyTimes() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_times"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNoReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_no_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyParam() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_param"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNotScore() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_not_score"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNotData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_not_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNoActivity() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_no_activity"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklySystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNotTimes() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_not_times"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNoExChange() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_no_ex_change"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNotComplete() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_not_complete"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyNotDay() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_not_day"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrActivityWeeklyScoreReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_activity_weekly_score_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaTicketPurchaseLimit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_ticket_purchase_limit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaChallengeTimes() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_challenge_times"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaRanking() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_ranking"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaChallengeStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_challenge_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaNotHeroes() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_not_heroes"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaChallengedRankingChange() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_challenged_ranking_change"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaRankingPos() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_ranking_pos"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaNotInRanking() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_not_in_ranking"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaChallengeLock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_challenge_lock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaHero() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_hero"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaRankingLoad() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_ranking_load"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaRankingIndex() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_ranking_index"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaTicketPurchaseNumber() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_ticket_purchase_number"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaChallengeRankingChange() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_challenge_ranking_change"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaRankingSendReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_ranking_send_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaNotFoundChallenge() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_not_found_challenge"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaRankingChallengePlayerId() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_ranking_challenge_player_id"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaChallengeTimeOut() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_challenge_time_out"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaNotInSameRanking() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_not_in_same_ranking"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaInit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_init"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaNotFoundPlayer() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_not_found_player"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrArenaType() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_arena_type"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrAtlasNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_atlas_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrAtlasAlreadyUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_atlas_already_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagChooseNotMatch() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_choose_not_match"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagMedicineCD() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_medicine_cd"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagItemNotEquip() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_item_not_equip"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagMaxCapacity() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_max_capacity"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagMedicineLevel() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_medicine_level"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagInvalidUse() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_invalid_use"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagNoSuchItem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_no_such_item"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagItemBelowZero() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_item_below_zero"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagMedicineMap() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_medicine_map"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagCanNotSynthesis() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_can_not_synthesis"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagItemHasExpired() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_item_has_expired"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagNeedUnlockLattice() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_need_unlock_lattice"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagRelicsEquipCantSub() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_relics_equip_cant_sub"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagMedicineNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_medicine_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagItemCantSell() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_item_cant_sell"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagNotExchange() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_not_exchange"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagRelicsNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_relics_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagCapLimit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_cap_limit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBagEquipNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_bag_equip_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNewBattleMapNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_new_battle_map_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrCanNotToggle() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_can_not_toggle"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBattleInvalidPos() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_battle_invalid_pos"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBattleInvalidPlayer() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_battle_invalid_player"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNoDefaultMap() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_no_default_map"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBattleMedicineCD() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_battle_medicine_cd"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBattleLineFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_battle_line_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBossHallDead() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_boss_hall_dead"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBossHallNotData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_boss_hall_not_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBossHallNotUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_boss_hall_not_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBossJoinTimesLimit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_boss_join_times_limit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBossKillTimesLimit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_boss_kill_times_limit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBossHallConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_boss_hall_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBossHallSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_boss_hall_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBossId() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_boss_id"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBossHallNotOpen() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_boss_hall_not_open"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrInvalidRequestParam() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_invalid_request_param"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSensitive() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_sensitive"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTaskChoiceNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_task_choice_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTaskCfgNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_task_cfg_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTaskInvalidType() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_task_invalid_type"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTaskNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_task_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTaskAlreadyFinish() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_task_already_finish"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTaskNotCompleted() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_task_not_completed"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrDiscordSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_discord_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrDiscordConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_discord_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrDiscordNotData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_discord_not_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrDiscordReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_discord_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEnergyBallNumLimit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_energy_ball_num_limit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTimesNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_times_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrItemNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_item_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEnergyBallNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_energy_ball_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRoomFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_room_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNotIn() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_not_in"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBeenInvited() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_been_invited"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOnlyCanJoinOneRoom() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_only_can_join_one_room"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOwnerCantLeave() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_owner_cant_leave"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrDungeonNotStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_dungeon_not_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOnlyOwnerCanStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_only_owner_can_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRoomNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_room_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOnlyOwnerCanInvite() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_only_owner_can_invite"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrDungeonAlreadyStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_dungeon_already_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrDungeonNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_dungeon_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTarNotInThisRoom() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tar_not_in_this_room"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNotOwner() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_not_owner"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEnchantMaterialNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_enchant_material_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEnchantMaterialNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_enchant_material_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEnchantNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_enchant_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEnchantMaterialAndHeroNotMatch() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_enchant_material_and_hero_not_match"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEnchantLastUnfinished() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_enchant_last_unfinished"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEnchantMaterialAndSlotNotMatch() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_enchant_material_and_slot_not_match"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEquipNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_equip_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrForgeInvalidSupplement() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_forge_invalid_supplement"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrForgeRecipeNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_forge_recipe_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrForgeLevelNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_forge_level_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrLimitConditionNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_limit_condition_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrExpeditionTaskFinish() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_expedition_task_finish"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrExpeditionTaskNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_expedition_task_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrExecutionNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_execution_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNoIdleTask() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_no_idle_task"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrExpeditionTaskNotStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_expedition_task_not_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrExpeditionTaskNotDone() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_expedition_task_not_done"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFormationInvalidIndex() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_formation_invalid_index"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFormationNotUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_formation_not_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFormationMax() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_formation_max"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFormationSetDefaultCD() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_formation_set_default_cd"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFormationEmpty() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_formation_empty"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFormationDiamondNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_formation_diamond_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFormationSwitchHeroCD() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_formation_switch_hero_cd"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFormationHeroDead() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_formation_hero_dead"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFormationHeroNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_formation_hero_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTarFriendFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tar_friend_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTarIllegal() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tar_illegal"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBlackNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_black_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFriendFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_friend_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRequestNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_request_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPointAlreadyRecv() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_point_already_recv"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFriendExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_friend_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrFriendNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_friend_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPointAlreadySent() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_point_already_sent"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRequestExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_request_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrCantHandleSelf() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_cant_handle_self"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBlackExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_black_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGachaWrongCount() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_gacha_wrong_count"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGachaReachLimit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_gacha_reach_limit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGachaNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_gacha_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGachaRefreshed() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_gacha_refreshed"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGenIsBegin() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_gen_is_begin"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGoogleQuestConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_google_quest_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGoogleQuestReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_google_quest_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGoogleQuestNotData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_google_quest_not_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGoogleQuestSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_google_quest_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrorGuildBossAlreadyRewards() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "error_guild_boss_already_rewards"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrorGuildBossMaxEnterPlayer() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "error_guild_boss_max_enter_player"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildClearApplyListFirst() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_clear_apply_list_first"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNoAvailableGuild() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_no_available_guild"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildIntroSensitive() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_intro_sensitive"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInviteListFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invite_list_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildApplyListFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_apply_list_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNameSensitive() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_name_sensitive"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildPositionNameTooLong() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_position_name_too_long"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNameTooLong() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_name_too_long"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildCombatValueNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_combat_value_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildDoNotRepeatBless() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_do_not_repeat_bless"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNameEmpty() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_name_empty"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildUserLevelNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_user_level_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInvalidFlag() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invalid_flag"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInviteExpired() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invite_expired"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildMaxPosition() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_max_position"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildBlessNotDone() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_bless_not_done"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInvalidInput() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invalid_input"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildBuildTimesNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_build_times_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildJoinedAnotherGuild() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_joined_another_guild"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNoticeRequired() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_notice_required"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildBossFighting() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_boss_fighting"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildPositionFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_position_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildPermissionDenied() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_permission_denied"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildApplyFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_apply_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNoticeTooLong() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_notice_too_long"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildOnlyLeader() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_only_leader"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildMemberFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_member_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildJoinCD() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_join_cd"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInviteTimesNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invite_times_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildRemoveMemberFirst() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_remove_member_first"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInvalidLang() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invalid_lang"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNameExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_name_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildUserNotInGuild() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_user_not_in_guild"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildIntroTooLong() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_intro_too_long"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNoGuild() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_no_guild"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildGreetingTooLong() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_greeting_too_long"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildApplyExpired() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_apply_expired"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInviteMsgTooLong() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invite_msg_too_long"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInvalidBless() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invalid_bless"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildLeaderNotAllowExit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_leader_not_allow_exit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildMinPosition() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_min_position"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInviteNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invite_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildNoticeSensitive() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_notice_sensitive"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildInvalidPosition() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_invalid_position"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildHasJoined() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_has_joined"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildMaxBlessStage() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_max_bless_stage"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGuildFilterInvalidInput() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_guild_filter_invalid_input"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMeltExpNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_melt_exp_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEquipEnchantNotUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_equip_enchant_not_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrHeroInvalidSlot() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_hero_invalid_slot"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrHeroMaxEquipStar() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_hero_max_equip_star"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEquippedOtherHero() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_equipped_other_hero"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBiographyNotUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_biography_not_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSoulContractConditionNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_soul_contract_condition_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEquipHeroNotMatch() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_equip_hero_not_match"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRoleLevelNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_role_level_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEquipNoResonanceToActivate() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_equip_no_resonance_to_activate"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEquipRefineNotUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_equip_refine_not_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEquipNotFound() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_equip_not_found"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEquipNoUpgradeable() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_equip_no_upgradeable"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrEquipSlotNotUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_equip_slot_not_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBiographyDoNotRepeatGetReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_biography_do_not_repeat_get_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBiographyNoReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_biography_no_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrHeroFashionNotActivated() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_hero_fashion_not_activated"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrHeroNotFound() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_hero_not_found"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrHeroNeedEquip() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_hero_need_equip"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrCanNotMeltEquipped() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_can_not_melt_equipped"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNeedSelectEquip() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_need_select_equip"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSoulContractMaxLevel() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_soul_contract_max_level"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBiographyNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_biography_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSlotHasNotEquip() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_slot_has_not_equip"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrCanNotEquippedThisSlot() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_can_not_equipped_this_slot"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMaxMeltLevel() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_max_melt_level"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGiftNotFound() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_gift_not_found"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrGiftDrawLimit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_gift_draw_limit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrJourneyFreeNotFlush() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_journey_free_not_flush"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrLoopTaskInvalidType() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_loop_task_invalid_type"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrLoopTaskAlreadyGet() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_loop_task_already_get"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrLoopTaskNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_loop_task_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrLoopTaskLock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_loop_task_lock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrLoopTaskAlreadyFinish() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_loop_task_already_finish"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrLoopTaskNotFinish() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_loop_task_not_finish"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrReadMailFirst() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_read_mail_first"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMailNotFound() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_mail_not_found"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMainTaskNotUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_main_task_not_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMainTaskUnfinished() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_main_task_unfinished"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMainTaskAccepted() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_main_task_accepted"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrChapterRewardCantGet() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_chapter_reward_cant_get"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMainTaskStatusIsNotUnAccepted() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_main_task_status_is_not_un_accepted"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMainTaskCantChoose() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_main_task_cant_choose"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMainTaskNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_main_task_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrAppointMapEventRepeat() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_appoint_map_event_repeat"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrAppointMapEventComplate() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_appoint_map_event_complate"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMapGameNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_map_game_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMapNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_map_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMapEventLock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_map_event_lock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMapEventAddFailed() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_map_event_add_failed"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMapEventNotFinish() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_map_event_not_finish"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMapStoryNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_map_story_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardNotPurchase() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_not_purchase"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardTimeOver() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_time_over"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardNoCard() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_no_card"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardPurchaseNumber() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_purchase_number"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardNoReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_no_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardNotComplete() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_not_complete"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardPurchaseType() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_purchase_type"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardNoStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_no_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMoonthlyCardNotData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_moonthly_card_not_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNoticeExpired() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_notice_expired"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNpcTaskUnfinished() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_npc_task_unfinished"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNpcTaskRefreshed() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_npc_task_refreshed"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNpcTaskNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_npc_task_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNpcTaskAlreadyFinish() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_npc_task_already_finish"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNpcTaskLevelLow() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_npc_task_level_low"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOptionalBoxCnf() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_optional_box_cnf"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOptionalBoxSelect() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_optional_box_select"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOptionalBoxNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_optional_box_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOptionalBoxExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_optional_box_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOptionalBoxType() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_optional_box_type"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOptionalBoxNoSelect() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_optional_box_no_select"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOptionalBoxNoSelectItem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_optional_box_no_select_item"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrOptionalBoxRandom() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_optional_box_random"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossAlreadyHelp() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_already_help"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossNotCompleted() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_not_completed"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossPointUpperLimit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_point_upper_limit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossHelpCountNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_help_count_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossBeHelpCountNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_be_help_count_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossHelpShareCd() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_help_share_cd"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossCompleted() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_completed"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossPointNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_point_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossHelpMsgExpired() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_help_msg_expired"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossHelpSelf() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_help_self"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPersonalBossAlreadyDrawPassReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_personal_boss_already_draw_pass_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPreDownloadSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_pre_download_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPreDownloadConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_pre_download_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPreDownloadNotData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_pre_download_not_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPreDownloadReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_pre_download_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrQuestRewardSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_quest_reward_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrQuestRewardReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_quest_reward_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrQuestRewardConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_quest_reward_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrQuestRewardNotData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_quest_reward_not_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRacingRankDidNotReachRanking() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_racing_rank_did_not_reach_ranking"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRacingRankHasOver() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_racing_rank_has_over"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRacingRankDoNotRepeatGetReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_racing_rank_do_not_repeat_get_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRacingRankDoNotRepeatEnroll() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_racing_rank_do_not_repeat_enroll"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRankIdNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rank_id_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRecommendNumTooLarge() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_recommend_num_too_large"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRecommendInvalidInput() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_recommend_invalid_input"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRelicsFragmentNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_relics_fragment_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRelicsStarMax() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_relics_star_max"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRelicsLevelMax() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_relics_level_max"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRelicsExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_relics_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrChaosRitualNotCompleted() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_chaos_ritual_not_completed"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrChaosRitualNotStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_chaos_ritual_not_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLNotChooseHero() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_not_choose_hero"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLNotIn() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_not_in"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRoguelikeNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_roguelike_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLRoomNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_room_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLAlreadyOwner() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_already_owner"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLDungeonNotToday() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_dungeon_not_today"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLDungeonNotOpen() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_dungeon_not_open"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLNotEnoughJoinCnt() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_not_enough_join_cnt"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLOnlyCanJoinOneRoom() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_only_can_join_one_room"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLRobotCantBeOwner() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_robot_cant_be_owner"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLOnlyOwnerCanInvite() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_only_owner_can_invite"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLTarNotInThisRoom() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_tar_not_in_this_room"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLNotAllReady() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_not_all_ready"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLBeenInvited() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_been_invited"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLNotEnoughPart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_not_enough_part"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLOnlyOwnerCanStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_only_owner_can_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLNotOwner() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_not_owner"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRoguelikeAlreadyStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_roguelike_already_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLRoomFull() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_room_full"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRLCombatNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_rl_combat_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrRoguelikeNotStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_roguelike_not_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSevenDaysNoReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_seven_days_no_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSevenDaysNotData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_seven_days_not_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSevenDaysTimeOver() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_seven_days_time_over"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSevenDaysConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_seven_days_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSevenDaysNotTime() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_seven_days_not_time"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSevenDaysNoActiviy() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_seven_days_no_activiy"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSevenDaysReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_seven_days_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSevenDaysSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_seven_days_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSevenDaysNoStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_seven_days_no_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrHaveNoRefreshCnt() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_have_no_refresh_cnt"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrItemAlreadySale() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_item_already_sale"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNoItemInShop() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_no_item_in_shop"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrShopAlreadyRefreshed() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_shop_already_refreshed"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrHaveNoFreeRefreshCnt() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_have_no_free_refresh_cnt"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrShopExcelWrong() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_shop_excel_wrong"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrStageNotUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_stage_not_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrStageExploreNotFinish() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_stage_explore_not_finish"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrStageIdNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_stage_id_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSystemLock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_system_lock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSkillStoneNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_skill_stone_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSkillStoneNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_skill_stone_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPlateNotInlay() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_plate_not_inlay"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSkillEquipNotActive() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_skill_equip_not_active"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTalentNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_talent_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPlateAlreadyInlay() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_plate_already_inlay"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrStoneNotInHole() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_stone_not_in_hole"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPointsNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_points_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPreTalentNotActive() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_pre_talent_not_active"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBuildIsNotChoose() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_build_is_not_choose"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBuildIsNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_build_is_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPlateUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_plate_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPlateNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_plate_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSkillStoneCantCompose() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_skill_stone_cant_compose"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrStoneInHole() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_stone_in_hole"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrComposeSketchWrong() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_compose_sketch_wrong"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrSkillStoneIsLock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_skill_stone_is_lock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPlateAlreadyUnlock() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_plate_already_unlock"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrHoleNotMatch() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_hole_not_match"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTalentNoLevel() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_talent_no_level"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTalentIllegal() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_talent_illegal"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTalentAlreadyActive() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_talent_already_active"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrBuildIsChoose() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_build_is_choose"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerChallengeTimesNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_challenge_times_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerLevelPassed() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_level_passed"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerNotLevelID() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_not_level_id"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerBattleStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_battle_start"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerBattleLevel() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_battle_level"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerNoData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_no_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerMeditationTimesNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_meditation_times_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerNoFindType() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_no_find_type"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrTowerIsMaxLevel() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_tower_is_max_level"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrUserIdLoginLimit() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_user_id_login_limit"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrPlayerNameExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_player_name_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrExpNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_exp_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMedicineHpMax() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_medicine_hp_max"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrCanNotAdvance() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_can_not_advance"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNotOwnedAvatar() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_not_owned_avatar"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrAdvanceNeedOpen() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_advance_need_open"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrCdKeyNotActive() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_cd_key_not_active"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNeedBeatBoss() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_need_beat_boss"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrExpSkipUseItemMax() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_exp_skip_use_item_max"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrClientVersionNotMatch() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_client_version_not_match"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrNotOwnedAvatarFrame() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_not_owned_avatar_frame"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMaxLevel() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_max_level"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrCdKeyIsUsed() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_cd_key_is_used"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrUserCannotDrawTitleReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_user_cannot_draw_title_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrUserNotFound() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_user_not_found"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrCdKeyIsNotExist() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_cd_key_is_not_exist"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMaterialNotEnough() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_material_not_enough"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrMedicineMpMax() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_medicine_mp_max"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrAdvanceBattleCD() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_advance_battle_cd"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrVirtualCombatNotHeroes() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_virtual_combat_not_heroes"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrVirtualCombatConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_virtual_combat_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrVirtualCombatSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_virtual_combat_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrVirtualCombatNotFoundPlayer() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_virtual_combat_not_found_player"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalNotData() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_not_data"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalSystem() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_system"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalScoreReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_score_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalTimeOver() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_time_over"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalNotDay() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_not_day"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalNotScore() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_not_score"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalReceived() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_received"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalNoReward() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_no_reward"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalConfig() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_config"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalNotComplete() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_not_complete"
	if openStack {
		e.WithStack()
	}
	return e
}


func NewErrXDayGoalNoStart() *ErrMsg {
	e := &ErrMsg{}
	e.ErrCode = 1
	e.ErrMsg = "err_x_day_goal_no_start"
	if openStack {
		e.WithStack()
	}
	return e
}


