// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/cppcopy/cpp_copy.proto

package cppcopy

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CPPCopy struct {
}

func (m *CPPCopy) Reset()      { *m = CPPCopy{} }
func (*CPPCopy) ProtoMessage() {}
func (*CPPCopy) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0}
}
func (m *CPPCopy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPCopy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPCopy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPCopy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPCopy.Merge(m, src)
}
func (m *CPPCopy) XXX_Size() int {
	return m.Size()
}
func (m *CPPCopy) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPCopy.DiscardUnknown(m)
}

var xxx_messageInfo_CPPCopy proto.InternalMessageInfo

func (*CPPCopy) XXX_MessageName() string {
	return "cppcopy.CPPCopy"
}

//创建动态副本
type CPPCopy_CreateCopyRequest struct {
	MapId  int64  `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	RoomId string `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *CPPCopy_CreateCopyRequest) Reset()      { *m = CPPCopy_CreateCopyRequest{} }
func (*CPPCopy_CreateCopyRequest) ProtoMessage() {}
func (*CPPCopy_CreateCopyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 0}
}
func (m *CPPCopy_CreateCopyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPCopy_CreateCopyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPCopy_CreateCopyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPCopy_CreateCopyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPCopy_CreateCopyRequest.Merge(m, src)
}
func (m *CPPCopy_CreateCopyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPCopy_CreateCopyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPCopy_CreateCopyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPCopy_CreateCopyRequest proto.InternalMessageInfo

func (m *CPPCopy_CreateCopyRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *CPPCopy_CreateCopyRequest) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (*CPPCopy_CreateCopyRequest) XXX_MessageName() string {
	return "cppcopy.CPPCopy.CreateCopyRequest"
}

type CPPCopy_CreateCopyResponse struct {
	MapId    int64  `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	RoomId   string `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BattleId int64  `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPCopy_CreateCopyResponse) Reset()      { *m = CPPCopy_CreateCopyResponse{} }
func (*CPPCopy_CreateCopyResponse) ProtoMessage() {}
func (*CPPCopy_CreateCopyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 1}
}
func (m *CPPCopy_CreateCopyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPCopy_CreateCopyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPCopy_CreateCopyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPCopy_CreateCopyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPCopy_CreateCopyResponse.Merge(m, src)
}
func (m *CPPCopy_CreateCopyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPCopy_CreateCopyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPCopy_CreateCopyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPCopy_CreateCopyResponse proto.InternalMessageInfo

func (m *CPPCopy_CreateCopyResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *CPPCopy_CreateCopyResponse) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *CPPCopy_CreateCopyResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPCopy_CreateCopyResponse) XXX_MessageName() string {
	return "cppcopy.CPPCopy.CreateCopyResponse"
}

//创建Roguelike副本
type CPPCopy_CreateRoguelikeRequest struct {
	MapId          int64            `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	RoomId         int64            `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Bots           []*models.Bot    `protobuf:"bytes,3,rep,name=bots,proto3" json:"bots,omitempty"`
	MonsterEffects []int64          `protobuf:"varint,4,rep,packed,name=monster_effects,json=monsterEffects,proto3" json:"monster_effects,omitempty"`
	BossEffects    []int64          `protobuf:"varint,5,rep,packed,name=boss_effects,json=bossEffects,proto3" json:"boss_effects,omitempty"`
	CardMap        map[string]int64 `protobuf:"bytes,6,rep,name=card_map,json=cardMap,proto3" json:"card_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *CPPCopy_CreateRoguelikeRequest) Reset()      { *m = CPPCopy_CreateRoguelikeRequest{} }
func (*CPPCopy_CreateRoguelikeRequest) ProtoMessage() {}
func (*CPPCopy_CreateRoguelikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 2}
}
func (m *CPPCopy_CreateRoguelikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPCopy_CreateRoguelikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPCopy_CreateRoguelikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPCopy_CreateRoguelikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPCopy_CreateRoguelikeRequest.Merge(m, src)
}
func (m *CPPCopy_CreateRoguelikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPCopy_CreateRoguelikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPCopy_CreateRoguelikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPCopy_CreateRoguelikeRequest proto.InternalMessageInfo

func (m *CPPCopy_CreateRoguelikeRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *CPPCopy_CreateRoguelikeRequest) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *CPPCopy_CreateRoguelikeRequest) GetBots() []*models.Bot {
	if m != nil {
		return m.Bots
	}
	return nil
}

func (m *CPPCopy_CreateRoguelikeRequest) GetMonsterEffects() []int64 {
	if m != nil {
		return m.MonsterEffects
	}
	return nil
}

func (m *CPPCopy_CreateRoguelikeRequest) GetBossEffects() []int64 {
	if m != nil {
		return m.BossEffects
	}
	return nil
}

func (m *CPPCopy_CreateRoguelikeRequest) GetCardMap() map[string]int64 {
	if m != nil {
		return m.CardMap
	}
	return nil
}

func (*CPPCopy_CreateRoguelikeRequest) XXX_MessageName() string {
	return "cppcopy.CPPCopy.CreateRoguelikeRequest"
}

type CPPCopy_CreateRoguelikeResponse struct {
	MapId    int64                  `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	RoomId   int64                  `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RlRooms  []*models.RlBattleRoom `protobuf:"bytes,3,rep,name=rl_rooms,json=rlRooms,proto3" json:"rl_rooms,omitempty"`
	BattleId int64                  `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPCopy_CreateRoguelikeResponse) Reset()      { *m = CPPCopy_CreateRoguelikeResponse{} }
func (*CPPCopy_CreateRoguelikeResponse) ProtoMessage() {}
func (*CPPCopy_CreateRoguelikeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 3}
}
func (m *CPPCopy_CreateRoguelikeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPCopy_CreateRoguelikeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPCopy_CreateRoguelikeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPCopy_CreateRoguelikeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPCopy_CreateRoguelikeResponse.Merge(m, src)
}
func (m *CPPCopy_CreateRoguelikeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPCopy_CreateRoguelikeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPCopy_CreateRoguelikeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPCopy_CreateRoguelikeResponse proto.InternalMessageInfo

func (m *CPPCopy_CreateRoguelikeResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *CPPCopy_CreateRoguelikeResponse) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *CPPCopy_CreateRoguelikeResponse) GetRlRooms() []*models.RlBattleRoom {
	if m != nil {
		return m.RlRooms
	}
	return nil
}

func (m *CPPCopy_CreateRoguelikeResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPCopy_CreateRoguelikeResponse) XXX_MessageName() string {
	return "cppcopy.CPPCopy.CreateRoguelikeResponse"
}

// 创建或者获取工会Boss战斗ID
type CPPCopy_CreateUnionBossRequest struct {
	UnionId      string           `protobuf:"bytes,1,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	UnionBossId  string           `protobuf:"bytes,2,opt,name=union_boss_id,json=unionBossId,proto3" json:"union_boss_id,omitempty"`
	TotalDamages int64            `protobuf:"varint,3,opt,name=total_damages,json=totalDamages,proto3" json:"total_damages,omitempty"`
	Damages      map[string]int64 `protobuf:"bytes,4,rep,name=damages,proto3" json:"damages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *CPPCopy_CreateUnionBossRequest) Reset()      { *m = CPPCopy_CreateUnionBossRequest{} }
func (*CPPCopy_CreateUnionBossRequest) ProtoMessage() {}
func (*CPPCopy_CreateUnionBossRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 4}
}
func (m *CPPCopy_CreateUnionBossRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPCopy_CreateUnionBossRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPCopy_CreateUnionBossRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPCopy_CreateUnionBossRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPCopy_CreateUnionBossRequest.Merge(m, src)
}
func (m *CPPCopy_CreateUnionBossRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPCopy_CreateUnionBossRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPCopy_CreateUnionBossRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPCopy_CreateUnionBossRequest proto.InternalMessageInfo

func (m *CPPCopy_CreateUnionBossRequest) GetUnionId() string {
	if m != nil {
		return m.UnionId
	}
	return ""
}

func (m *CPPCopy_CreateUnionBossRequest) GetUnionBossId() string {
	if m != nil {
		return m.UnionBossId
	}
	return ""
}

func (m *CPPCopy_CreateUnionBossRequest) GetTotalDamages() int64 {
	if m != nil {
		return m.TotalDamages
	}
	return 0
}

func (m *CPPCopy_CreateUnionBossRequest) GetDamages() map[string]int64 {
	if m != nil {
		return m.Damages
	}
	return nil
}

func (*CPPCopy_CreateUnionBossRequest) XXX_MessageName() string {
	return "cppcopy.CPPCopy.CreateUnionBossRequest"
}

type CPPCopy_CreateUnionBossResponse struct {
	BattleId int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPCopy_CreateUnionBossResponse) Reset()      { *m = CPPCopy_CreateUnionBossResponse{} }
func (*CPPCopy_CreateUnionBossResponse) ProtoMessage() {}
func (*CPPCopy_CreateUnionBossResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 5}
}
func (m *CPPCopy_CreateUnionBossResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPCopy_CreateUnionBossResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPCopy_CreateUnionBossResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPCopy_CreateUnionBossResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPCopy_CreateUnionBossResponse.Merge(m, src)
}
func (m *CPPCopy_CreateUnionBossResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPCopy_CreateUnionBossResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPCopy_CreateUnionBossResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPCopy_CreateUnionBossResponse proto.InternalMessageInfo

func (m *CPPCopy_CreateUnionBossResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPCopy_CreateUnionBossResponse) XXX_MessageName() string {
	return "cppcopy.CPPCopy.CreateUnionBossResponse"
}

type CPPCopy_UnionBossOnlineCountRequest struct {
	UnionId     string `protobuf:"bytes,1,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	UnionBossId string `protobuf:"bytes,2,opt,name=union_boss_id,json=unionBossId,proto3" json:"union_boss_id,omitempty"`
}

func (m *CPPCopy_UnionBossOnlineCountRequest) Reset()      { *m = CPPCopy_UnionBossOnlineCountRequest{} }
func (*CPPCopy_UnionBossOnlineCountRequest) ProtoMessage() {}
func (*CPPCopy_UnionBossOnlineCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 6}
}
func (m *CPPCopy_UnionBossOnlineCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPCopy_UnionBossOnlineCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPCopy_UnionBossOnlineCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPCopy_UnionBossOnlineCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPCopy_UnionBossOnlineCountRequest.Merge(m, src)
}
func (m *CPPCopy_UnionBossOnlineCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPCopy_UnionBossOnlineCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPCopy_UnionBossOnlineCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPCopy_UnionBossOnlineCountRequest proto.InternalMessageInfo

func (m *CPPCopy_UnionBossOnlineCountRequest) GetUnionId() string {
	if m != nil {
		return m.UnionId
	}
	return ""
}

func (m *CPPCopy_UnionBossOnlineCountRequest) GetUnionBossId() string {
	if m != nil {
		return m.UnionBossId
	}
	return ""
}

func (*CPPCopy_UnionBossOnlineCountRequest) XXX_MessageName() string {
	return "cppcopy.CPPCopy.UnionBossOnlineCountRequest"
}

type CPPCopy_UnionBossOnlineCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *CPPCopy_UnionBossOnlineCountResponse) Reset()      { *m = CPPCopy_UnionBossOnlineCountResponse{} }
func (*CPPCopy_UnionBossOnlineCountResponse) ProtoMessage() {}
func (*CPPCopy_UnionBossOnlineCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 7}
}
func (m *CPPCopy_UnionBossOnlineCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPCopy_UnionBossOnlineCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPCopy_UnionBossOnlineCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPCopy_UnionBossOnlineCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPCopy_UnionBossOnlineCountResponse.Merge(m, src)
}
func (m *CPPCopy_UnionBossOnlineCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPCopy_UnionBossOnlineCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPCopy_UnionBossOnlineCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPCopy_UnionBossOnlineCountResponse proto.InternalMessageInfo

func (m *CPPCopy_UnionBossOnlineCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*CPPCopy_UnionBossOnlineCountResponse) XXX_MessageName() string {
	return "cppcopy.CPPCopy.UnionBossOnlineCountResponse"
}
func init() {
	proto.RegisterType((*CPPCopy)(nil), "cppcopy.CPPCopy")
	proto.RegisterType((*CPPCopy_CreateCopyRequest)(nil), "cppcopy.CPPCopy.CreateCopyRequest")
	proto.RegisterType((*CPPCopy_CreateCopyResponse)(nil), "cppcopy.CPPCopy.CreateCopyResponse")
	proto.RegisterType((*CPPCopy_CreateRoguelikeRequest)(nil), "cppcopy.CPPCopy.CreateRoguelikeRequest")
	proto.RegisterMapType((map[string]int64)(nil), "cppcopy.CPPCopy.CreateRoguelikeRequest.CardMapEntry")
	proto.RegisterType((*CPPCopy_CreateRoguelikeResponse)(nil), "cppcopy.CPPCopy.CreateRoguelikeResponse")
	proto.RegisterType((*CPPCopy_CreateUnionBossRequest)(nil), "cppcopy.CPPCopy.CreateUnionBossRequest")
	proto.RegisterMapType((map[string]int64)(nil), "cppcopy.CPPCopy.CreateUnionBossRequest.DamagesEntry")
	proto.RegisterType((*CPPCopy_CreateUnionBossResponse)(nil), "cppcopy.CPPCopy.CreateUnionBossResponse")
	proto.RegisterType((*CPPCopy_UnionBossOnlineCountRequest)(nil), "cppcopy.CPPCopy.UnionBossOnlineCountRequest")
	proto.RegisterType((*CPPCopy_UnionBossOnlineCountResponse)(nil), "cppcopy.CPPCopy.UnionBossOnlineCountResponse")
}

func init() { proto.RegisterFile("proto/cppcopy/cpp_copy.proto", fileDescriptor_31aac1626bc27660) }

var fileDescriptor_31aac1626bc27660 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0xba, 0x89, 0x93, 0x49, 0xfa, 0x7d, 0xb0, 0x0a, 0x34, 0x75, 0x2b, 0x13, 0xca,
	0x81, 0x5c, 0x70, 0x24, 0xa8, 0x10, 0xea, 0x31, 0xa6, 0x87, 0x1c, 0x68, 0xab, 0x95, 0xb8, 0x20,
	0x24, 0x6b, 0x63, 0x6f, 0xab, 0xa8, 0xb6, 0xd7, 0x78, 0xd7, 0x95, 0xf2, 0x06, 0x1c, 0xb9, 0xf1,
	0x0a, 0x3c, 0x07, 0xa7, 0x1e, 0x7b, 0xec, 0x11, 0x9c, 0x03, 0x1c, 0x79, 0x04, 0xb4, 0xbb, 0x76,
	0x08, 0x50, 0x45, 0x8a, 0xc4, 0xc9, 0xfe, 0xff, 0x67, 0x3c, 0x33, 0x3b, 0xbf, 0x95, 0x61, 0x2f,
	0xcd, 0x98, 0x60, 0xc3, 0x20, 0x4d, 0x03, 0x96, 0xce, 0xe4, 0xd3, 0x97, 0x2f, 0xae, 0xb2, 0x91,
	0x55, 0xfa, 0xf6, 0x8e, 0x4e, 0x8b, 0x59, 0x48, 0x23, 0x3e, 0x9c, 0x10, 0x21, 0x22, 0xaa, 0x73,
	0xf6, 0xbf, 0x35, 0xc1, 0xf2, 0x4e, 0x4f, 0x3d, 0x99, 0xe6, 0xc1, 0x5d, 0x2f, 0xa3, 0x44, 0x50,
	0xa9, 0x30, 0x7d, 0x97, 0x53, 0x2e, 0xd0, 0x3d, 0x68, 0xc4, 0x24, 0xf5, 0xa7, 0x61, 0xcf, 0xe8,
	0x1b, 0x03, 0x13, 0xd7, 0x63, 0x92, 0x8e, 0x43, 0xb4, 0x0d, 0x56, 0xc6, 0x58, 0x2c, 0xfd, 0x8d,
	0xbe, 0x31, 0x68, 0xe1, 0x86, 0x94, 0xe3, 0xd0, 0x26, 0x80, 0x96, 0x8b, 0xf0, 0x94, 0x25, 0x9c,
	0xae, 0x5b, 0x05, 0xed, 0x42, 0x4b, 0x8f, 0x29, 0x43, 0xa1, 0xfa, 0xa4, 0xa9, 0x8d, 0x71, 0x68,
	0x7f, 0xde, 0x80, 0xfb, 0xba, 0x07, 0x66, 0xe7, 0x39, 0x8d, 0xa6, 0x17, 0x74, 0xbd, 0x69, 0xcd,
	0x45, 0x9f, 0x07, 0xb0, 0x39, 0x61, 0x82, 0xf7, 0xcc, 0xbe, 0x39, 0x68, 0x3f, 0x6d, 0xbb, 0x7a,
	0x45, 0xee, 0x88, 0x09, 0xac, 0x02, 0xe8, 0x31, 0xfc, 0x1f, 0xb3, 0x84, 0x0b, 0x9a, 0xf9, 0xf4,
	0xec, 0x8c, 0x06, 0x82, 0xf7, 0x36, 0xfb, 0xe6, 0xc0, 0xc4, 0xff, 0x95, 0xf6, 0x91, 0x76, 0xd1,
	0x43, 0xe8, 0x4c, 0x18, 0xe7, 0x8b, 0xac, 0xba, 0xca, 0x6a, 0x4b, 0xaf, 0x4a, 0x39, 0x81, 0x66,
	0x40, 0xb2, 0xd0, 0x8f, 0x49, 0xda, 0x6b, 0xa8, 0x86, 0x07, 0x6e, 0x89, 0xc8, 0x2d, 0x19, 0xb8,
	0xb7, 0x9f, 0xcb, 0xf5, 0x48, 0x16, 0xbe, 0x22, 0xe9, 0x51, 0x22, 0xb2, 0x19, 0xb6, 0x02, 0xad,
	0xec, 0x43, 0xe8, 0x2c, 0x07, 0xd0, 0x1d, 0x30, 0x2f, 0xe8, 0x4c, 0x1d, 0xbd, 0x85, 0xe5, 0x2b,
	0xea, 0x42, 0xfd, 0x92, 0x44, 0x39, 0x2d, 0x8f, 0xad, 0xc5, 0xe1, 0xc6, 0x0b, 0xc3, 0xfe, 0x68,
	0xc0, 0xf6, 0x5f, 0xcd, 0xd6, 0xa2, 0xf5, 0x6b, 0x8b, 0x43, 0x68, 0x66, 0x91, 0x2f, 0x45, 0xb5,
	0xc9, 0x6e, 0xb5, 0x49, 0x1c, 0x8d, 0x14, 0x36, 0xcc, 0x58, 0x8c, 0xad, 0x2c, 0x92, 0x4f, 0xbe,
	0x1a, 0xef, 0xfb, 0x05, 0xde, 0xd7, 0xc9, 0x94, 0x25, 0x23, 0xc6, 0x79, 0x85, 0x77, 0x07, 0x9a,
	0xb9, 0xf4, 0xaa, 0xd1, 0x5a, 0xd8, 0x52, 0x7a, 0x1c, 0xa2, 0x7d, 0xd8, 0xd2, 0x21, 0x45, 0x61,
	0x71, 0xa1, 0xda, 0x79, 0x55, 0x63, 0x1c, 0xa2, 0x47, 0xb0, 0x25, 0x98, 0x20, 0x91, 0x1f, 0x92,
	0x98, 0x9c, 0x53, 0x39, 0xac, 0x6c, 0xdd, 0x51, 0xe6, 0x4b, 0xed, 0xa1, 0x63, 0xb0, 0xaa, 0xf0,
	0xe6, 0x4a, 0x48, 0x7f, 0x4e, 0xe7, 0x96, 0x15, 0x4a, 0x48, 0x65, 0x11, 0x09, 0x69, 0x39, 0xb0,
	0x16, 0xa4, 0xe7, 0x15, 0xa3, 0xa5, 0x5e, 0x25, 0xa3, 0x95, 0x2b, 0x7c, 0x0b, 0xbb, 0x8b, 0x2f,
	0x4e, 0x92, 0x68, 0x9a, 0x50, 0x8f, 0xe5, 0x89, 0xf8, 0x37, 0x6b, 0xb4, 0x0f, 0x60, 0xef, 0xf6,
	0xea, 0xe5, 0x68, 0x5d, 0xa8, 0x07, 0xd2, 0xa8, 0x6e, 0x8f, 0x12, 0xa3, 0xe3, 0x9b, 0xaf, 0x4e,
	0xed, 0x53, 0xe1, 0x18, 0x57, 0x85, 0x63, 0x5c, 0x17, 0x8e, 0xf1, 0xa5, 0x70, 0x8c, 0xef, 0x85,
	0x53, 0xfb, 0x51, 0x38, 0xc6, 0x87, 0xb9, 0x53, 0xbb, 0x9a, 0x3b, 0xc6, 0xf5, 0xdc, 0xa9, 0xdd,
	0xcc, 0x9d, 0xda, 0x9b, 0x7e, 0xc0, 0xa6, 0xc9, 0x13, 0x4e, 0xb3, 0x4b, 0x9a, 0x0d, 0x03, 0x16,
	0xc7, 0x2c, 0x19, 0xfe, 0xf6, 0xb3, 0x9b, 0x34, 0x94, 0x7c, 0xf6, 0x33, 0x00, 0x00, 0xff, 0xff,
	0x1b, 0x92, 0x74, 0xee, 0x04, 0x05, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPCopy.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPCopy_CreateCopyRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPCopy_CreateCopyResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPCopy_CreateRoguelikeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPCopy_CreateRoguelikeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPCopy_CreateUnionBossRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPCopy_CreateUnionBossResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPCopy_UnionBossOnlineCountRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPCopy_UnionBossOnlineCountResponse.Get().(proto.Message)
	})
}

var poolCPPCopy = &sync.Pool{New: func() interface{} { return &CPPCopy{} }}

func (m *CPPCopy) ReleasePool() { m.Reset(); poolCPPCopy.Put(m); m = nil }

var poolCPPCopy_CreateCopyRequest = &sync.Pool{New: func() interface{} { return &CPPCopy_CreateCopyRequest{} }}

func (m *CPPCopy_CreateCopyRequest) ReleasePool() {
	m.Reset()
	poolCPPCopy_CreateCopyRequest.Put(m)
	m = nil
}

var poolCPPCopy_CreateCopyResponse = &sync.Pool{New: func() interface{} { return &CPPCopy_CreateCopyResponse{} }}

func (m *CPPCopy_CreateCopyResponse) ReleasePool() {
	m.Reset()
	poolCPPCopy_CreateCopyResponse.Put(m)
	m = nil
}

var poolCPPCopy_CreateRoguelikeRequest = &sync.Pool{New: func() interface{} { return &CPPCopy_CreateRoguelikeRequest{} }}

func (m *CPPCopy_CreateRoguelikeRequest) ReleasePool() {
	m.Reset()
	poolCPPCopy_CreateRoguelikeRequest.Put(m)
	m = nil
}

var poolCPPCopy_CreateRoguelikeResponse = &sync.Pool{New: func() interface{} { return &CPPCopy_CreateRoguelikeResponse{} }}

func (m *CPPCopy_CreateRoguelikeResponse) ReleasePool() {
	m.Reset()
	poolCPPCopy_CreateRoguelikeResponse.Put(m)
	m = nil
}

var poolCPPCopy_CreateUnionBossRequest = &sync.Pool{New: func() interface{} { return &CPPCopy_CreateUnionBossRequest{} }}

func (m *CPPCopy_CreateUnionBossRequest) ReleasePool() {
	m.Reset()
	poolCPPCopy_CreateUnionBossRequest.Put(m)
	m = nil
}

var poolCPPCopy_CreateUnionBossResponse = &sync.Pool{New: func() interface{} { return &CPPCopy_CreateUnionBossResponse{} }}

func (m *CPPCopy_CreateUnionBossResponse) ReleasePool() {
	m.Reset()
	poolCPPCopy_CreateUnionBossResponse.Put(m)
	m = nil
}

var poolCPPCopy_UnionBossOnlineCountRequest = &sync.Pool{New: func() interface{} { return &CPPCopy_UnionBossOnlineCountRequest{} }}

func (m *CPPCopy_UnionBossOnlineCountRequest) ReleasePool() {
	m.Reset()
	poolCPPCopy_UnionBossOnlineCountRequest.Put(m)
	m = nil
}

var poolCPPCopy_UnionBossOnlineCountResponse = &sync.Pool{New: func() interface{} { return &CPPCopy_UnionBossOnlineCountResponse{} }}

func (m *CPPCopy_UnionBossOnlineCountResponse) ReleasePool() {
	m.Reset()
	poolCPPCopy_UnionBossOnlineCountResponse.Put(m)
	m = nil
}
func (this *CPPCopy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPCopy)
	if !ok {
		that2, ok := that.(CPPCopy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPCopy_CreateCopyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPCopy_CreateCopyRequest)
	if !ok {
		that2, ok := that.(CPPCopy_CreateCopyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	return true
}
func (this *CPPCopy_CreateCopyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPCopy_CreateCopyResponse)
	if !ok {
		that2, ok := that.(CPPCopy_CreateCopyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPCopy_CreateRoguelikeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPCopy_CreateRoguelikeRequest)
	if !ok {
		that2, ok := that.(CPPCopy_CreateRoguelikeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if len(this.Bots) != len(that1.Bots) {
		return false
	}
	for i := range this.Bots {
		if !this.Bots[i].Equal(that1.Bots[i]) {
			return false
		}
	}
	if len(this.MonsterEffects) != len(that1.MonsterEffects) {
		return false
	}
	for i := range this.MonsterEffects {
		if this.MonsterEffects[i] != that1.MonsterEffects[i] {
			return false
		}
	}
	if len(this.BossEffects) != len(that1.BossEffects) {
		return false
	}
	for i := range this.BossEffects {
		if this.BossEffects[i] != that1.BossEffects[i] {
			return false
		}
	}
	if len(this.CardMap) != len(that1.CardMap) {
		return false
	}
	for i := range this.CardMap {
		if this.CardMap[i] != that1.CardMap[i] {
			return false
		}
	}
	return true
}
func (this *CPPCopy_CreateRoguelikeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPCopy_CreateRoguelikeResponse)
	if !ok {
		that2, ok := that.(CPPCopy_CreateRoguelikeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if len(this.RlRooms) != len(that1.RlRooms) {
		return false
	}
	for i := range this.RlRooms {
		if !this.RlRooms[i].Equal(that1.RlRooms[i]) {
			return false
		}
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPCopy_CreateUnionBossRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPCopy_CreateUnionBossRequest)
	if !ok {
		that2, ok := that.(CPPCopy_CreateUnionBossRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnionId != that1.UnionId {
		return false
	}
	if this.UnionBossId != that1.UnionBossId {
		return false
	}
	if this.TotalDamages != that1.TotalDamages {
		return false
	}
	if len(this.Damages) != len(that1.Damages) {
		return false
	}
	for i := range this.Damages {
		if this.Damages[i] != that1.Damages[i] {
			return false
		}
	}
	return true
}
func (this *CPPCopy_CreateUnionBossResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPCopy_CreateUnionBossResponse)
	if !ok {
		that2, ok := that.(CPPCopy_CreateUnionBossResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPCopy_UnionBossOnlineCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPCopy_UnionBossOnlineCountRequest)
	if !ok {
		that2, ok := that.(CPPCopy_UnionBossOnlineCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnionId != that1.UnionId {
		return false
	}
	if this.UnionBossId != that1.UnionBossId {
		return false
	}
	return true
}
func (this *CPPCopy_UnionBossOnlineCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPCopy_UnionBossOnlineCountResponse)
	if !ok {
		that2, ok := that.(CPPCopy_UnionBossOnlineCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (m *CPPCopy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPCopy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPCopy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPCopy_CreateCopyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPCopy_CreateCopyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPCopy_CreateCopyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoomId) > 0 {
		i -= len(m.RoomId)
		copy(dAtA[i:], m.RoomId)
		i = encodeVarintCppCopy(dAtA, i, uint64(len(m.RoomId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MapId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPCopy_CreateCopyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPCopy_CreateCopyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPCopy_CreateCopyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.RoomId) > 0 {
		i -= len(m.RoomId)
		copy(dAtA[i:], m.RoomId)
		i = encodeVarintCppCopy(dAtA, i, uint64(len(m.RoomId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MapId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPCopy_CreateRoguelikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPCopy_CreateRoguelikeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPCopy_CreateRoguelikeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardMap) > 0 {
		for k := range m.CardMap {
			v := m.CardMap[k]
			baseI := i
			i = encodeVarintCppCopy(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCppCopy(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCppCopy(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BossEffects) > 0 {
		dAtA2 := make([]byte, len(m.BossEffects)*10)
		var j1 int
		for _, num1 := range m.BossEffects {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCppCopy(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MonsterEffects) > 0 {
		dAtA4 := make([]byte, len(m.MonsterEffects)*10)
		var j3 int
		for _, num1 := range m.MonsterEffects {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintCppCopy(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Bots) > 0 {
		for iNdEx := len(m.Bots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppCopy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RoomId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPCopy_CreateRoguelikeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPCopy_CreateRoguelikeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPCopy_CreateRoguelikeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.RlRooms) > 0 {
		for iNdEx := len(m.RlRooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RlRooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppCopy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RoomId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPCopy_CreateUnionBossRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPCopy_CreateUnionBossRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPCopy_CreateUnionBossRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Damages) > 0 {
		for k := range m.Damages {
			v := m.Damages[k]
			baseI := i
			i = encodeVarintCppCopy(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCppCopy(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCppCopy(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TotalDamages != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.TotalDamages))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UnionBossId) > 0 {
		i -= len(m.UnionBossId)
		copy(dAtA[i:], m.UnionBossId)
		i = encodeVarintCppCopy(dAtA, i, uint64(len(m.UnionBossId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnionId) > 0 {
		i -= len(m.UnionId)
		copy(dAtA[i:], m.UnionId)
		i = encodeVarintCppCopy(dAtA, i, uint64(len(m.UnionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPCopy_CreateUnionBossResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPCopy_CreateUnionBossResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPCopy_CreateUnionBossResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	return len(dAtA) - i, nil
}

func (m *CPPCopy_UnionBossOnlineCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPCopy_UnionBossOnlineCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPCopy_UnionBossOnlineCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnionBossId) > 0 {
		i -= len(m.UnionBossId)
		copy(dAtA[i:], m.UnionBossId)
		i = encodeVarintCppCopy(dAtA, i, uint64(len(m.UnionBossId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnionId) > 0 {
		i -= len(m.UnionId)
		copy(dAtA[i:], m.UnionId)
		i = encodeVarintCppCopy(dAtA, i, uint64(len(m.UnionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPCopy_UnionBossOnlineCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPCopy_UnionBossOnlineCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPCopy_UnionBossOnlineCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCppCopy(dAtA []byte, offset int, v uint64) int {
	offset -= sovCppCopy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *CPPCopy) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPCopy_CreateCopyRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.RoomId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoomId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPCopy_CreateCopyResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.RoomId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoomId)
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPCopy_CreateRoguelikeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.RoomId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("bots")
	w.RawByte('"')
	w.RawByte(':')
	if m.Bots == nil {
		w.RawString("null")
	} else if len(m.Bots) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Bots {
			v.JsonBytes(w)
			if i != len(m.Bots)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("monster_effects")
	w.RawByte('"')
	w.RawByte(':')
	if m.MonsterEffects == nil {
		w.RawString("null")
	} else if len(m.MonsterEffects) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.MonsterEffects {
			w.Int64(int64(v))
			if i != len(m.MonsterEffects)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_effects")
	w.RawByte('"')
	w.RawByte(':')
	if m.BossEffects == nil {
		w.RawString("null")
	} else if len(m.BossEffects) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BossEffects {
			w.Int64(int64(v))
			if i != len(m.BossEffects)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("card_map")
	w.RawByte('"')
	w.RawByte(':')
	if m.CardMap == nil {
		w.RawString("null")
	} else if len(m.CardMap) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCardMap := len(m.CardMap)
		for k, v := range m.CardMap {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCardMap--
			if mlCardMap != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPCopy_CreateRoguelikeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.RoomId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rl_rooms")
	w.RawByte('"')
	w.RawByte(':')
	if m.RlRooms == nil {
		w.RawString("null")
	} else if len(m.RlRooms) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RlRooms {
			v.JsonBytes(w)
			if i != len(m.RlRooms)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPCopy_CreateUnionBossRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UnionId != "" {
		w.RawByte('"')
		w.RawString("union_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UnionId)
		needWriteComma = true
	}
	if m.UnionBossId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("union_boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UnionBossId)
		needWriteComma = true
	}
	if m.TotalDamages != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_damages")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDamages))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("damages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Damages == nil {
		w.RawString("null")
	} else if len(m.Damages) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDamages := len(m.Damages)
		for k, v := range m.Damages {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlDamages--
			if mlDamages != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPCopy_CreateUnionBossResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPCopy_UnionBossOnlineCountRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UnionId != "" {
		w.RawByte('"')
		w.RawString("union_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UnionId)
		needWriteComma = true
	}
	if m.UnionBossId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("union_boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UnionBossId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPCopy_UnionBossOnlineCountResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Count != 0 {
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPCopy) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPCopy) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPCopy) GoString() string {
	return m.String()
}

func (m *CPPCopy_CreateCopyRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPCopy_CreateCopyRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPCopy_CreateCopyRequest) GoString() string {
	return m.String()
}

func (m *CPPCopy_CreateCopyResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPCopy_CreateCopyResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPCopy_CreateCopyResponse) GoString() string {
	return m.String()
}

func (m *CPPCopy_CreateRoguelikeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPCopy_CreateRoguelikeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPCopy_CreateRoguelikeRequest) GoString() string {
	return m.String()
}

func (m *CPPCopy_CreateRoguelikeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPCopy_CreateRoguelikeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPCopy_CreateRoguelikeResponse) GoString() string {
	return m.String()
}

func (m *CPPCopy_CreateUnionBossRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPCopy_CreateUnionBossRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPCopy_CreateUnionBossRequest) GoString() string {
	return m.String()
}

func (m *CPPCopy_CreateUnionBossResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPCopy_CreateUnionBossResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPCopy_CreateUnionBossResponse) GoString() string {
	return m.String()
}

func (m *CPPCopy_UnionBossOnlineCountRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPCopy_UnionBossOnlineCountRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPCopy_UnionBossOnlineCountRequest) GoString() string {
	return m.String()
}

func (m *CPPCopy_UnionBossOnlineCountResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPCopy_UnionBossOnlineCountResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPCopy_UnionBossOnlineCountResponse) GoString() string {
	return m.String()
}

func (m *CPPCopy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPCopy_CreateCopyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCppCopy(uint64(m.MapId))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovCppCopy(uint64(l))
	}
	return n
}

func (m *CPPCopy_CreateCopyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCppCopy(uint64(m.MapId))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovCppCopy(uint64(l))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppCopy(uint64(m.BattleId))
	}
	return n
}

func (m *CPPCopy_CreateRoguelikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCppCopy(uint64(m.MapId))
	}
	if m.RoomId != 0 {
		n += 1 + sovCppCopy(uint64(m.RoomId))
	}
	if len(m.Bots) > 0 {
		for _, e := range m.Bots {
			l = e.Size()
			n += 1 + l + sovCppCopy(uint64(l))
		}
	}
	if len(m.MonsterEffects) > 0 {
		l = 0
		for _, e := range m.MonsterEffects {
			l += sovCppCopy(uint64(e))
		}
		n += 1 + sovCppCopy(uint64(l)) + l
	}
	if len(m.BossEffects) > 0 {
		l = 0
		for _, e := range m.BossEffects {
			l += sovCppCopy(uint64(e))
		}
		n += 1 + sovCppCopy(uint64(l)) + l
	}
	if len(m.CardMap) > 0 {
		for k, v := range m.CardMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCppCopy(uint64(len(k))) + 1 + sovCppCopy(uint64(v))
			n += mapEntrySize + 1 + sovCppCopy(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CPPCopy_CreateRoguelikeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCppCopy(uint64(m.MapId))
	}
	if m.RoomId != 0 {
		n += 1 + sovCppCopy(uint64(m.RoomId))
	}
	if len(m.RlRooms) > 0 {
		for _, e := range m.RlRooms {
			l = e.Size()
			n += 1 + l + sovCppCopy(uint64(l))
		}
	}
	if m.BattleId != 0 {
		n += 2 + sovCppCopy(uint64(m.BattleId))
	}
	return n
}

func (m *CPPCopy_CreateUnionBossRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UnionId)
	if l > 0 {
		n += 1 + l + sovCppCopy(uint64(l))
	}
	l = len(m.UnionBossId)
	if l > 0 {
		n += 1 + l + sovCppCopy(uint64(l))
	}
	if m.TotalDamages != 0 {
		n += 1 + sovCppCopy(uint64(m.TotalDamages))
	}
	if len(m.Damages) > 0 {
		for k, v := range m.Damages {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCppCopy(uint64(len(k))) + 1 + sovCppCopy(uint64(v))
			n += mapEntrySize + 1 + sovCppCopy(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CPPCopy_CreateUnionBossResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 2 + sovCppCopy(uint64(m.BattleId))
	}
	return n
}

func (m *CPPCopy_UnionBossOnlineCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UnionId)
	if l > 0 {
		n += 1 + l + sovCppCopy(uint64(l))
	}
	l = len(m.UnionBossId)
	if l > 0 {
		n += 1 + l + sovCppCopy(uint64(l))
	}
	return n
}

func (m *CPPCopy_UnionBossOnlineCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovCppCopy(uint64(m.Count))
	}
	return n
}

func sovCppCopy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCppCopy(x uint64) (n int) {
	return sovCppCopy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CPPCopy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPCopy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPCopy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPCopy_CreateCopyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCopyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCopyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPCopy_CreateCopyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCopyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCopyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPCopy_CreateRoguelikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoguelikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoguelikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bots = append(m.Bots, &models.Bot{})
			if err := m.Bots[len(m.Bots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppCopy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MonsterEffects = append(m.MonsterEffects, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppCopy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppCopy
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppCopy
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MonsterEffects) == 0 {
					m.MonsterEffects = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppCopy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MonsterEffects = append(m.MonsterEffects, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterEffects", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppCopy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BossEffects = append(m.BossEffects, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppCopy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppCopy
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppCopy
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BossEffects) == 0 {
					m.BossEffects = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppCopy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BossEffects = append(m.BossEffects, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BossEffects", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CardMap == nil {
				m.CardMap = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppCopy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppCopy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCppCopy
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCppCopy
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppCopy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppCopy(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppCopy
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CardMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPCopy_CreateRoguelikeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoguelikeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoguelikeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RlRooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RlRooms = append(m.RlRooms, &models.RlBattleRoom{})
			if err := m.RlRooms[len(m.RlRooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPCopy_CreateUnionBossRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUnionBossRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUnionBossRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionBossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionBossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamages", wireType)
			}
			m.TotalDamages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDamages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Damages == nil {
				m.Damages = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppCopy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppCopy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCppCopy
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCppCopy
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppCopy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppCopy(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppCopy
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Damages[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPCopy_CreateUnionBossResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUnionBossResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUnionBossResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPCopy_UnionBossOnlineCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnionBossOnlineCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnionBossOnlineCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionBossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppCopy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppCopy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionBossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPCopy_UnionBossOnlineCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnionBossOnlineCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnionBossOnlineCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCppCopy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCppCopy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCppCopy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCppCopy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCppCopy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCppCopy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCppCopy = fmt.Errorf("proto: unexpected end of group")
)
