// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/new-battle-service/new_battle.proto

package newbattle

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NewBattleErrorCode int32

const (
	NewBattleErrorCode_ErrBattleInvalidPos    NewBattleErrorCode = 0
	NewBattleErrorCode_ErrBattleInvalidPlayer NewBattleErrorCode = 1
	NewBattleErrorCode_ErrBattleMapNotExist   NewBattleErrorCode = 2
)

var NewBattleErrorCode_name = map[int32]string{
	0: "ErrBattleInvalidPos",
	1: "ErrBattleInvalidPlayer",
	2: "ErrBattleMapNotExist",
}

var NewBattleErrorCode_value = map[string]int32{
	"ErrBattleInvalidPos":    0,
	"ErrBattleInvalidPlayer": 1,
	"ErrBattleMapNotExist":   2,
}

func (NewBattleErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{0}
}

type Visual_ObjectType int32

const (
	Visual_Unknown Visual_ObjectType = 0
	Visual_Player  Visual_ObjectType = 1
	Visual_Monster Visual_ObjectType = 2
)

var Visual_ObjectType_name = map[int32]string{
	0: "Unknown",
	1: "Player",
	2: "Monster",
}

var Visual_ObjectType_value = map[string]int32{
	"Unknown": 0,
	"Player":  1,
	"Monster": 2,
}

func (Visual_ObjectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{1, 0}
}

type NewBattle_DamageType int32

const (
	NewBattle_DTNormal   NewBattle_DamageType = 0
	NewBattle_DTDodge    NewBattle_DamageType = 1
	NewBattle_DTCritical NewBattle_DamageType = 2
	NewBattle_DTParry    NewBattle_DamageType = 3
	NewBattle_DTWardOff  NewBattle_DamageType = 4
)

var NewBattle_DamageType_name = map[int32]string{
	0: "DTNormal",
	1: "DTDodge",
	2: "DTCritical",
	3: "DTParry",
	4: "DTWardOff",
}

var NewBattle_DamageType_value = map[string]int32{
	"DTNormal":   0,
	"DTDodge":    1,
	"DTCritical": 2,
	"DTParry":    3,
	"DTWardOff":  4,
}

func (NewBattle_DamageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 0}
}

type NewBattle_RenderType int32

const (
	NewBattle_RTUnknown NewBattle_RenderType = 0
	NewBattle_RT3D      NewBattle_RenderType = 1
	NewBattle_RT2D      NewBattle_RenderType = 2
)

var NewBattle_RenderType_name = map[int32]string{
	0: "RTUnknown",
	1: "RT3D",
	2: "RT2D",
}

var NewBattle_RenderType_value = map[string]int32{
	"RTUnknown": 0,
	"RT3D":      1,
	"RT2D":      2,
}

func (NewBattle_RenderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 1}
}

type NewBattle_L5MonsterLockPlayerPush_State int32

const (
	NewBattle_L5MonsterLockPlayerPush_Lock   NewBattle_L5MonsterLockPlayerPush_State = 0
	NewBattle_L5MonsterLockPlayerPush_Unlock NewBattle_L5MonsterLockPlayerPush_State = 1
)

var NewBattle_L5MonsterLockPlayerPush_State_name = map[int32]string{
	0: "Lock",
	1: "Unlock",
}

var NewBattle_L5MonsterLockPlayerPush_State_value = map[string]int32{
	"Lock":   0,
	"Unlock": 1,
}

func (NewBattle_L5MonsterLockPlayerPush_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 30, 0}
}

type Vector2 struct {
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Vector2) Reset()      { *m = Vector2{} }
func (*Vector2) ProtoMessage() {}
func (*Vector2) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{0}
}
func (m *Vector2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector2.Merge(m, src)
}
func (m *Vector2) XXX_Size() int {
	return m.Size()
}
func (m *Vector2) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector2.DiscardUnknown(m)
}

var xxx_messageInfo_Vector2 proto.InternalMessageInfo

func (m *Vector2) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector2) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (*Vector2) XXX_MessageName() string {
	return "newbattle.Vector2"
}

type Visual struct {
}

func (m *Visual) Reset()      { *m = Visual{} }
func (*Visual) ProtoMessage() {}
func (*Visual) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{1}
}
func (m *Visual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visual.Merge(m, src)
}
func (m *Visual) XXX_Size() int {
	return m.Size()
}
func (m *Visual) XXX_DiscardUnknown() {
	xxx_messageInfo_Visual.DiscardUnknown(m)
}

var xxx_messageInfo_Visual proto.InternalMessageInfo

func (*Visual) XXX_MessageName() string {
	return "newbattle.Visual"
}

type Visual_Enter struct {
	MapId string `protobuf:"bytes,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *Visual_Enter) Reset()      { *m = Visual_Enter{} }
func (*Visual_Enter) ProtoMessage() {}
func (*Visual_Enter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{1, 0}
}
func (m *Visual_Enter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visual_Enter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visual_Enter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visual_Enter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visual_Enter.Merge(m, src)
}
func (m *Visual_Enter) XXX_Size() int {
	return m.Size()
}
func (m *Visual_Enter) XXX_DiscardUnknown() {
	xxx_messageInfo_Visual_Enter.DiscardUnknown(m)
}

var xxx_messageInfo_Visual_Enter proto.InternalMessageInfo

func (m *Visual_Enter) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (*Visual_Enter) XXX_MessageName() string {
	return "newbattle.Visual.Enter"
}

type Visual_Leave struct {
}

func (m *Visual_Leave) Reset()      { *m = Visual_Leave{} }
func (*Visual_Leave) ProtoMessage() {}
func (*Visual_Leave) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{1, 1}
}
func (m *Visual_Leave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visual_Leave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visual_Leave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visual_Leave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visual_Leave.Merge(m, src)
}
func (m *Visual_Leave) XXX_Size() int {
	return m.Size()
}
func (m *Visual_Leave) XXX_DiscardUnknown() {
	xxx_messageInfo_Visual_Leave.DiscardUnknown(m)
}

var xxx_messageInfo_Visual_Leave proto.InternalMessageInfo

func (*Visual_Leave) XXX_MessageName() string {
	return "newbattle.Visual.Leave"
}

type Visual_CreateMap struct {
	MapSize  *Vector2        `protobuf:"bytes,1,opt,name=map_size,json=mapSize,proto3" json:"map_size,omitempty"`
	GridSize *Vector2        `protobuf:"bytes,2,opt,name=grid_size,json=gridSize,proto3" json:"grid_size,omitempty"`
	CanMove  map[int64]int64 `protobuf:"bytes,3,rep,name=can_move,json=canMove,proto3" json:"can_move,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
}

func (m *Visual_CreateMap) Reset()      { *m = Visual_CreateMap{} }
func (*Visual_CreateMap) ProtoMessage() {}
func (*Visual_CreateMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{1, 2}
}
func (m *Visual_CreateMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visual_CreateMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visual_CreateMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visual_CreateMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visual_CreateMap.Merge(m, src)
}
func (m *Visual_CreateMap) XXX_Size() int {
	return m.Size()
}
func (m *Visual_CreateMap) XXX_DiscardUnknown() {
	xxx_messageInfo_Visual_CreateMap.DiscardUnknown(m)
}

var xxx_messageInfo_Visual_CreateMap proto.InternalMessageInfo

func (m *Visual_CreateMap) GetMapSize() *Vector2 {
	if m != nil {
		return m.MapSize
	}
	return nil
}

func (m *Visual_CreateMap) GetGridSize() *Vector2 {
	if m != nil {
		return m.GridSize
	}
	return nil
}

func (m *Visual_CreateMap) GetCanMove() map[int64]int64 {
	if m != nil {
		return m.CanMove
	}
	return nil
}

func (*Visual_CreateMap) XXX_MessageName() string {
	return "newbattle.Visual.CreateMap"
}

type Visual_Move struct {
	Pos *Vector2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *Visual_Move) Reset()      { *m = Visual_Move{} }
func (*Visual_Move) ProtoMessage() {}
func (*Visual_Move) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{1, 3}
}
func (m *Visual_Move) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visual_Move) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visual_Move.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visual_Move) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visual_Move.Merge(m, src)
}
func (m *Visual_Move) XXX_Size() int {
	return m.Size()
}
func (m *Visual_Move) XXX_DiscardUnknown() {
	xxx_messageInfo_Visual_Move.DiscardUnknown(m)
}

var xxx_messageInfo_Visual_Move proto.InternalMessageInfo

func (m *Visual_Move) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (*Visual_Move) XXX_MessageName() string {
	return "newbattle.Visual.Move"
}

type Visual_Object struct {
	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConfigId   int64             `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	ConfigName string            `protobuf:"bytes,3,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	Name       string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Hp         int64             `protobuf:"varint,5,opt,name=hp,proto3" json:"hp,omitempty"`
	MaxHp      int64             `protobuf:"varint,6,opt,name=max_hp,json=maxHp,proto3" json:"max_hp,omitempty"`
	Mp         int64             `protobuf:"varint,7,opt,name=mp,proto3" json:"mp,omitempty"`
	MaxMp      int64             `protobuf:"varint,8,opt,name=max_mp,json=maxMp,proto3" json:"max_mp,omitempty"`
	Pos        *Vector2          `protobuf:"bytes,9,opt,name=pos,proto3" json:"pos,omitempty"`
	Type       Visual_ObjectType `protobuf:"varint,10,opt,name=type,proto3,enum=newbattle.Visual_ObjectType" json:"type,omitempty"`
}

func (m *Visual_Object) Reset()      { *m = Visual_Object{} }
func (*Visual_Object) ProtoMessage() {}
func (*Visual_Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{1, 4}
}
func (m *Visual_Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visual_Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visual_Object.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visual_Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visual_Object.Merge(m, src)
}
func (m *Visual_Object) XXX_Size() int {
	return m.Size()
}
func (m *Visual_Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Visual_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Visual_Object proto.InternalMessageInfo

func (m *Visual_Object) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Visual_Object) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Visual_Object) GetConfigName() string {
	if m != nil {
		return m.ConfigName
	}
	return ""
}

func (m *Visual_Object) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Visual_Object) GetHp() int64 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *Visual_Object) GetMaxHp() int64 {
	if m != nil {
		return m.MaxHp
	}
	return 0
}

func (m *Visual_Object) GetMp() int64 {
	if m != nil {
		return m.Mp
	}
	return 0
}

func (m *Visual_Object) GetMaxMp() int64 {
	if m != nil {
		return m.MaxMp
	}
	return 0
}

func (m *Visual_Object) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Visual_Object) GetType() Visual_ObjectType {
	if m != nil {
		return m.Type
	}
	return Visual_Unknown
}

func (*Visual_Object) XXX_MessageName() string {
	return "newbattle.Visual.Object"
}

type Visual_Objects struct {
	Objects []*Visual_Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (m *Visual_Objects) Reset()      { *m = Visual_Objects{} }
func (*Visual_Objects) ProtoMessage() {}
func (*Visual_Objects) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{1, 5}
}
func (m *Visual_Objects) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visual_Objects) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visual_Objects.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visual_Objects) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visual_Objects.Merge(m, src)
}
func (m *Visual_Objects) XXX_Size() int {
	return m.Size()
}
func (m *Visual_Objects) XXX_DiscardUnknown() {
	xxx_messageInfo_Visual_Objects.DiscardUnknown(m)
}

var xxx_messageInfo_Visual_Objects proto.InternalMessageInfo

func (m *Visual_Objects) GetObjects() []*Visual_Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (*Visual_Objects) XXX_MessageName() string {
	return "newbattle.Visual.Objects"
}

type NewBattle struct {
}

func (m *NewBattle) Reset()      { *m = NewBattle{} }
func (*NewBattle) ProtoMessage() {}
func (*NewBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2}
}
func (m *NewBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle.Merge(m, src)
}
func (m *NewBattle) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle proto.InternalMessageInfo

func (*NewBattle) XXX_MessageName() string {
	return "newbattle.NewBattle"
}

type NewBattle_L5TimePush struct {
	ServerTime float64 `protobuf:"fixed64,1,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *NewBattle_L5TimePush) Reset()      { *m = NewBattle_L5TimePush{} }
func (*NewBattle_L5TimePush) ProtoMessage() {}
func (*NewBattle_L5TimePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 0}
}
func (m *NewBattle_L5TimePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5TimePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5TimePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5TimePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5TimePush.Merge(m, src)
}
func (m *NewBattle_L5TimePush) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5TimePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5TimePush.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5TimePush proto.InternalMessageInfo

func (m *NewBattle_L5TimePush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*NewBattle_L5TimePush) XXX_MessageName() string {
	return "newbattle.NewBattle.L5TimePush"
}

type NewBattle_L5KeepAlive struct {
}

func (m *NewBattle_L5KeepAlive) Reset()      { *m = NewBattle_L5KeepAlive{} }
func (*NewBattle_L5KeepAlive) ProtoMessage() {}
func (*NewBattle_L5KeepAlive) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 1}
}
func (m *NewBattle_L5KeepAlive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5KeepAlive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5KeepAlive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5KeepAlive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5KeepAlive.Merge(m, src)
}
func (m *NewBattle_L5KeepAlive) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5KeepAlive) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5KeepAlive.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5KeepAlive proto.InternalMessageInfo

func (*NewBattle_L5KeepAlive) XXX_MessageName() string {
	return "newbattle.NewBattle.L5KeepAlive"
}

// 进入地图
type NewBattle_L5EnterMapRequest struct {
	Pos            *Vector2     `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId          int64        `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64        `protobuf:"varint,3,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	Role           *models.Role `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
}

func (m *NewBattle_L5EnterMapRequest) Reset()      { *m = NewBattle_L5EnterMapRequest{} }
func (*NewBattle_L5EnterMapRequest) ProtoMessage() {}
func (*NewBattle_L5EnterMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 2}
}
func (m *NewBattle_L5EnterMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5EnterMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5EnterMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5EnterMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5EnterMapRequest.Merge(m, src)
}
func (m *NewBattle_L5EnterMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5EnterMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5EnterMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5EnterMapRequest proto.InternalMessageInfo

func (m *NewBattle_L5EnterMapRequest) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5EnterMapRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewBattle_L5EnterMapRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NewBattle_L5EnterMapRequest) GetRole() *models.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (*NewBattle_L5EnterMapRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5EnterMapRequest"
}

type NewBattle_L5EnterMapResponse struct {
	Pos        *Vector2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId      int64    `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	ServerTime float64  `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *NewBattle_L5EnterMapResponse) Reset()      { *m = NewBattle_L5EnterMapResponse{} }
func (*NewBattle_L5EnterMapResponse) ProtoMessage() {}
func (*NewBattle_L5EnterMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 3}
}
func (m *NewBattle_L5EnterMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5EnterMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5EnterMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5EnterMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5EnterMapResponse.Merge(m, src)
}
func (m *NewBattle_L5EnterMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5EnterMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5EnterMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5EnterMapResponse proto.InternalMessageInfo

func (m *NewBattle_L5EnterMapResponse) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5EnterMapResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewBattle_L5EnterMapResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*NewBattle_L5EnterMapResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5EnterMapResponse"
}

// 创建or进入副本
type NewBattle_L5EnterPveMapRequest struct {
	Pos            *Vector2     `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	DungeonId      int64        `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	PveId          string       `protobuf:"bytes,3,opt,name=pve_id,json=pveId,proto3" json:"pve_id,omitempty"`
	BattleServerId int64        `protobuf:"varint,4,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	Role           *models.Role `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
}

func (m *NewBattle_L5EnterPveMapRequest) Reset()      { *m = NewBattle_L5EnterPveMapRequest{} }
func (*NewBattle_L5EnterPveMapRequest) ProtoMessage() {}
func (*NewBattle_L5EnterPveMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 4}
}
func (m *NewBattle_L5EnterPveMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5EnterPveMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5EnterPveMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5EnterPveMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5EnterPveMapRequest.Merge(m, src)
}
func (m *NewBattle_L5EnterPveMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5EnterPveMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5EnterPveMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5EnterPveMapRequest proto.InternalMessageInfo

func (m *NewBattle_L5EnterPveMapRequest) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5EnterPveMapRequest) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (m *NewBattle_L5EnterPveMapRequest) GetPveId() string {
	if m != nil {
		return m.PveId
	}
	return ""
}

func (m *NewBattle_L5EnterPveMapRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NewBattle_L5EnterPveMapRequest) GetRole() *models.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (*NewBattle_L5EnterPveMapRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5EnterPveMapRequest"
}

type NewBattle_L5EnterPveMapResponse struct {
	Pos        *Vector2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	DungeonId  int64    `protobuf:"varint,2,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	PveId      string   `protobuf:"bytes,3,opt,name=pve_id,json=pveId,proto3" json:"pve_id,omitempty"`
	ServerTime float64  `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *NewBattle_L5EnterPveMapResponse) Reset()      { *m = NewBattle_L5EnterPveMapResponse{} }
func (*NewBattle_L5EnterPveMapResponse) ProtoMessage() {}
func (*NewBattle_L5EnterPveMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 5}
}
func (m *NewBattle_L5EnterPveMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5EnterPveMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5EnterPveMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5EnterPveMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5EnterPveMapResponse.Merge(m, src)
}
func (m *NewBattle_L5EnterPveMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5EnterPveMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5EnterPveMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5EnterPveMapResponse proto.InternalMessageInfo

func (m *NewBattle_L5EnterPveMapResponse) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5EnterPveMapResponse) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (m *NewBattle_L5EnterPveMapResponse) GetPveId() string {
	if m != nil {
		return m.PveId
	}
	return ""
}

func (m *NewBattle_L5EnterPveMapResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*NewBattle_L5EnterPveMapResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5EnterPveMapResponse"
}

// 移动到目标位置
type NewBattle_L5MoveRequest struct {
	Pos     *Vector2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	CurrPos *Vector2 `protobuf:"bytes,2,opt,name=curr_pos,json=currPos,proto3" json:"curr_pos,omitempty"`
	ObjId   string   `protobuf:"bytes,3,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	IsPve   bool     `protobuf:"varint,4,opt,name=is_pve,json=isPve,proto3" json:"is_pve,omitempty"`
}

func (m *NewBattle_L5MoveRequest) Reset()      { *m = NewBattle_L5MoveRequest{} }
func (*NewBattle_L5MoveRequest) ProtoMessage() {}
func (*NewBattle_L5MoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 6}
}
func (m *NewBattle_L5MoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5MoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5MoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5MoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5MoveRequest.Merge(m, src)
}
func (m *NewBattle_L5MoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5MoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5MoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5MoveRequest proto.InternalMessageInfo

func (m *NewBattle_L5MoveRequest) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5MoveRequest) GetCurrPos() *Vector2 {
	if m != nil {
		return m.CurrPos
	}
	return nil
}

func (m *NewBattle_L5MoveRequest) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NewBattle_L5MoveRequest) GetIsPve() bool {
	if m != nil {
		return m.IsPve
	}
	return false
}

func (*NewBattle_L5MoveRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5MoveRequest"
}

type NewBattle_L5MoveResponse struct {
	Pos        *Vector2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	ServerTime float64  `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *NewBattle_L5MoveResponse) Reset()      { *m = NewBattle_L5MoveResponse{} }
func (*NewBattle_L5MoveResponse) ProtoMessage() {}
func (*NewBattle_L5MoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 7}
}
func (m *NewBattle_L5MoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5MoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5MoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5MoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5MoveResponse.Merge(m, src)
}
func (m *NewBattle_L5MoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5MoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5MoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5MoveResponse proto.InternalMessageInfo

func (m *NewBattle_L5MoveResponse) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5MoveResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*NewBattle_L5MoveResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5MoveResponse"
}

// 传送到目标位置
type NewBattle_L5TeleportRequest struct {
	MapId int64    `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Pos   *Vector2 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *NewBattle_L5TeleportRequest) Reset()      { *m = NewBattle_L5TeleportRequest{} }
func (*NewBattle_L5TeleportRequest) ProtoMessage() {}
func (*NewBattle_L5TeleportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 8}
}
func (m *NewBattle_L5TeleportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5TeleportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5TeleportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5TeleportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5TeleportRequest.Merge(m, src)
}
func (m *NewBattle_L5TeleportRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5TeleportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5TeleportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5TeleportRequest proto.InternalMessageInfo

func (m *NewBattle_L5TeleportRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewBattle_L5TeleportRequest) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (*NewBattle_L5TeleportRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5TeleportRequest"
}

type NewBattle_L5TeleportResponse struct {
	MapId      int64   `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	ServerTime float64 `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *NewBattle_L5TeleportResponse) Reset()      { *m = NewBattle_L5TeleportResponse{} }
func (*NewBattle_L5TeleportResponse) ProtoMessage() {}
func (*NewBattle_L5TeleportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 9}
}
func (m *NewBattle_L5TeleportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5TeleportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5TeleportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5TeleportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5TeleportResponse.Merge(m, src)
}
func (m *NewBattle_L5TeleportResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5TeleportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5TeleportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5TeleportResponse proto.InternalMessageInfo

func (m *NewBattle_L5TeleportResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewBattle_L5TeleportResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*NewBattle_L5TeleportResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5TeleportResponse"
}

// 停止移动
type NewBattle_L5StopMoveRequest struct {
	Pos   *Vector2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	ObjId string   `protobuf:"bytes,2,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	IsPve bool     `protobuf:"varint,3,opt,name=is_pve,json=isPve,proto3" json:"is_pve,omitempty"`
}

func (m *NewBattle_L5StopMoveRequest) Reset()      { *m = NewBattle_L5StopMoveRequest{} }
func (*NewBattle_L5StopMoveRequest) ProtoMessage() {}
func (*NewBattle_L5StopMoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 10}
}
func (m *NewBattle_L5StopMoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5StopMoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5StopMoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5StopMoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5StopMoveRequest.Merge(m, src)
}
func (m *NewBattle_L5StopMoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5StopMoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5StopMoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5StopMoveRequest proto.InternalMessageInfo

func (m *NewBattle_L5StopMoveRequest) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5StopMoveRequest) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NewBattle_L5StopMoveRequest) GetIsPve() bool {
	if m != nil {
		return m.IsPve
	}
	return false
}

func (*NewBattle_L5StopMoveRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5StopMoveRequest"
}

type NewBattle_L5StopMoveResponse struct {
	Pos        *Vector2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	ServerTime float64  `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *NewBattle_L5StopMoveResponse) Reset()      { *m = NewBattle_L5StopMoveResponse{} }
func (*NewBattle_L5StopMoveResponse) ProtoMessage() {}
func (*NewBattle_L5StopMoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 11}
}
func (m *NewBattle_L5StopMoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5StopMoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5StopMoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5StopMoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5StopMoveResponse.Merge(m, src)
}
func (m *NewBattle_L5StopMoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5StopMoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5StopMoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5StopMoveResponse proto.InternalMessageInfo

func (m *NewBattle_L5StopMoveResponse) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5StopMoveResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*NewBattle_L5StopMoveResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5StopMoveResponse"
}

// 离开
type NewBattle_L5LeaveRequest struct {
	IsPve bool `protobuf:"varint,1,opt,name=is_pve,json=isPve,proto3" json:"is_pve,omitempty"`
}

func (m *NewBattle_L5LeaveRequest) Reset()      { *m = NewBattle_L5LeaveRequest{} }
func (*NewBattle_L5LeaveRequest) ProtoMessage() {}
func (*NewBattle_L5LeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 12}
}
func (m *NewBattle_L5LeaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5LeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5LeaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5LeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5LeaveRequest.Merge(m, src)
}
func (m *NewBattle_L5LeaveRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5LeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5LeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5LeaveRequest proto.InternalMessageInfo

func (m *NewBattle_L5LeaveRequest) GetIsPve() bool {
	if m != nil {
		return m.IsPve
	}
	return false
}

func (*NewBattle_L5LeaveRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5LeaveRequest"
}

type NewBattle_L5LeaveResponse struct {
	ServerTime float64 `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *NewBattle_L5LeaveResponse) Reset()      { *m = NewBattle_L5LeaveResponse{} }
func (*NewBattle_L5LeaveResponse) ProtoMessage() {}
func (*NewBattle_L5LeaveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 13}
}
func (m *NewBattle_L5LeaveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5LeaveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5LeaveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5LeaveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5LeaveResponse.Merge(m, src)
}
func (m *NewBattle_L5LeaveResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5LeaveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5LeaveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5LeaveResponse proto.InternalMessageInfo

func (m *NewBattle_L5LeaveResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*NewBattle_L5LeaveResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5LeaveResponse"
}

// 攻击
type NewBattle_L5AttackRequest struct {
	FightInfo *NewBattle_L5NormalFightInfo `protobuf:"bytes,1,opt,name=fight_info,json=fightInfo,proto3" json:"fight_info,omitempty"`
	IsPve     bool                         `protobuf:"varint,2,opt,name=is_pve,json=isPve,proto3" json:"is_pve,omitempty"`
}

func (m *NewBattle_L5AttackRequest) Reset()      { *m = NewBattle_L5AttackRequest{} }
func (*NewBattle_L5AttackRequest) ProtoMessage() {}
func (*NewBattle_L5AttackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 14}
}
func (m *NewBattle_L5AttackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5AttackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5AttackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5AttackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5AttackRequest.Merge(m, src)
}
func (m *NewBattle_L5AttackRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5AttackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5AttackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5AttackRequest proto.InternalMessageInfo

func (m *NewBattle_L5AttackRequest) GetFightInfo() *NewBattle_L5NormalFightInfo {
	if m != nil {
		return m.FightInfo
	}
	return nil
}

func (m *NewBattle_L5AttackRequest) GetIsPve() bool {
	if m != nil {
		return m.IsPve
	}
	return false
}

func (*NewBattle_L5AttackRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5AttackRequest"
}

type NewBattle_L5AttackResponse struct {
	IsPass     bool    `protobuf:"varint,1,opt,name=is_pass,json=isPass,proto3" json:"is_pass,omitempty"`
	ServerTime float64 `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *NewBattle_L5AttackResponse) Reset()      { *m = NewBattle_L5AttackResponse{} }
func (*NewBattle_L5AttackResponse) ProtoMessage() {}
func (*NewBattle_L5AttackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 15}
}
func (m *NewBattle_L5AttackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5AttackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5AttackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5AttackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5AttackResponse.Merge(m, src)
}
func (m *NewBattle_L5AttackResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5AttackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5AttackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5AttackResponse proto.InternalMessageInfo

func (m *NewBattle_L5AttackResponse) GetIsPass() bool {
	if m != nil {
		return m.IsPass
	}
	return false
}

func (m *NewBattle_L5AttackResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*NewBattle_L5AttackResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5AttackResponse"
}

type NewBattle_L5DamageRequest struct {
	DamageInfo *NewBattle_L5NormalFightDamageInfo `protobuf:"bytes,1,opt,name=damage_info,json=damageInfo,proto3" json:"damage_info,omitempty"`
	IsPve      bool                               `protobuf:"varint,2,opt,name=is_pve,json=isPve,proto3" json:"is_pve,omitempty"`
}

func (m *NewBattle_L5DamageRequest) Reset()      { *m = NewBattle_L5DamageRequest{} }
func (*NewBattle_L5DamageRequest) ProtoMessage() {}
func (*NewBattle_L5DamageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 16}
}
func (m *NewBattle_L5DamageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5DamageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5DamageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5DamageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5DamageRequest.Merge(m, src)
}
func (m *NewBattle_L5DamageRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5DamageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5DamageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5DamageRequest proto.InternalMessageInfo

func (m *NewBattle_L5DamageRequest) GetDamageInfo() *NewBattle_L5NormalFightDamageInfo {
	if m != nil {
		return m.DamageInfo
	}
	return nil
}

func (m *NewBattle_L5DamageRequest) GetIsPve() bool {
	if m != nil {
		return m.IsPve
	}
	return false
}

func (*NewBattle_L5DamageRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5DamageRequest"
}

type NewBattle_L5DamageResponse struct {
	IsPass     bool    `protobuf:"varint,1,opt,name=is_pass,json=isPass,proto3" json:"is_pass,omitempty"`
	ServerTime float64 `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *NewBattle_L5DamageResponse) Reset()      { *m = NewBattle_L5DamageResponse{} }
func (*NewBattle_L5DamageResponse) ProtoMessage() {}
func (*NewBattle_L5DamageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 17}
}
func (m *NewBattle_L5DamageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5DamageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5DamageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5DamageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5DamageResponse.Merge(m, src)
}
func (m *NewBattle_L5DamageResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5DamageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5DamageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5DamageResponse proto.InternalMessageInfo

func (m *NewBattle_L5DamageResponse) GetIsPass() bool {
	if m != nil {
		return m.IsPass
	}
	return false
}

func (m *NewBattle_L5DamageResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*NewBattle_L5DamageResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5DamageResponse"
}

type NewBattle_L5ChangeRenderRequest struct {
	Typ NewBattle_RenderType `protobuf:"varint,1,opt,name=typ,proto3,enum=newbattle.NewBattle_RenderType" json:"typ,omitempty"`
}

func (m *NewBattle_L5ChangeRenderRequest) Reset()      { *m = NewBattle_L5ChangeRenderRequest{} }
func (*NewBattle_L5ChangeRenderRequest) ProtoMessage() {}
func (*NewBattle_L5ChangeRenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 18}
}
func (m *NewBattle_L5ChangeRenderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5ChangeRenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5ChangeRenderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5ChangeRenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5ChangeRenderRequest.Merge(m, src)
}
func (m *NewBattle_L5ChangeRenderRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5ChangeRenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5ChangeRenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5ChangeRenderRequest proto.InternalMessageInfo

func (m *NewBattle_L5ChangeRenderRequest) GetTyp() NewBattle_RenderType {
	if m != nil {
		return m.Typ
	}
	return NewBattle_RTUnknown
}

func (*NewBattle_L5ChangeRenderRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5ChangeRenderRequest"
}

type NewBattle_L5ChangeRenderResponse struct {
	Typ NewBattle_RenderType `protobuf:"varint,1,opt,name=typ,proto3,enum=newbattle.NewBattle_RenderType" json:"typ,omitempty"`
}

func (m *NewBattle_L5ChangeRenderResponse) Reset()      { *m = NewBattle_L5ChangeRenderResponse{} }
func (*NewBattle_L5ChangeRenderResponse) ProtoMessage() {}
func (*NewBattle_L5ChangeRenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 19}
}
func (m *NewBattle_L5ChangeRenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5ChangeRenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5ChangeRenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5ChangeRenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5ChangeRenderResponse.Merge(m, src)
}
func (m *NewBattle_L5ChangeRenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5ChangeRenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5ChangeRenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5ChangeRenderResponse proto.InternalMessageInfo

func (m *NewBattle_L5ChangeRenderResponse) GetTyp() NewBattle_RenderType {
	if m != nil {
		return m.Typ
	}
	return NewBattle_RTUnknown
}

func (*NewBattle_L5ChangeRenderResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5ChangeRenderResponse"
}

type NewBattle_L5AutoFightRequest struct {
	AutoFight bool `protobuf:"varint,1,opt,name=auto_fight,json=autoFight,proto3" json:"auto_fight,omitempty"`
}

func (m *NewBattle_L5AutoFightRequest) Reset()      { *m = NewBattle_L5AutoFightRequest{} }
func (*NewBattle_L5AutoFightRequest) ProtoMessage() {}
func (*NewBattle_L5AutoFightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 20}
}
func (m *NewBattle_L5AutoFightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5AutoFightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5AutoFightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5AutoFightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5AutoFightRequest.Merge(m, src)
}
func (m *NewBattle_L5AutoFightRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5AutoFightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5AutoFightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5AutoFightRequest proto.InternalMessageInfo

func (m *NewBattle_L5AutoFightRequest) GetAutoFight() bool {
	if m != nil {
		return m.AutoFight
	}
	return false
}

func (*NewBattle_L5AutoFightRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5AutoFightRequest"
}

type NewBattle_L5AutoFightResponse struct {
}

func (m *NewBattle_L5AutoFightResponse) Reset()      { *m = NewBattle_L5AutoFightResponse{} }
func (*NewBattle_L5AutoFightResponse) ProtoMessage() {}
func (*NewBattle_L5AutoFightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 21}
}
func (m *NewBattle_L5AutoFightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5AutoFightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5AutoFightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5AutoFightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5AutoFightResponse.Merge(m, src)
}
func (m *NewBattle_L5AutoFightResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5AutoFightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5AutoFightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5AutoFightResponse proto.InternalMessageInfo

func (*NewBattle_L5AutoFightResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5AutoFightResponse"
}

// 获取临时背包信息
type NewBattle_L5GetTempBagRequest struct {
}

func (m *NewBattle_L5GetTempBagRequest) Reset()      { *m = NewBattle_L5GetTempBagRequest{} }
func (*NewBattle_L5GetTempBagRequest) ProtoMessage() {}
func (*NewBattle_L5GetTempBagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 22}
}
func (m *NewBattle_L5GetTempBagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5GetTempBagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5GetTempBagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5GetTempBagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5GetTempBagRequest.Merge(m, src)
}
func (m *NewBattle_L5GetTempBagRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5GetTempBagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5GetTempBagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5GetTempBagRequest proto.InternalMessageInfo

func (*NewBattle_L5GetTempBagRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5GetTempBagRequest"
}

type NewBattle_L5GetTempBagResponse struct {
	Bag *NewBattle_L5TempBag `protobuf:"bytes,1,opt,name=bag,proto3" json:"bag,omitempty"`
}

func (m *NewBattle_L5GetTempBagResponse) Reset()      { *m = NewBattle_L5GetTempBagResponse{} }
func (*NewBattle_L5GetTempBagResponse) ProtoMessage() {}
func (*NewBattle_L5GetTempBagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 23}
}
func (m *NewBattle_L5GetTempBagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5GetTempBagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5GetTempBagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5GetTempBagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5GetTempBagResponse.Merge(m, src)
}
func (m *NewBattle_L5GetTempBagResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5GetTempBagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5GetTempBagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5GetTempBagResponse proto.InternalMessageInfo

func (m *NewBattle_L5GetTempBagResponse) GetBag() *NewBattle_L5TempBag {
	if m != nil {
		return m.Bag
	}
	return nil
}

func (*NewBattle_L5GetTempBagResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5GetTempBagResponse"
}

// 领取临时背包收益
type NewBattle_L5DrawTempBagRequest struct {
}

func (m *NewBattle_L5DrawTempBagRequest) Reset()      { *m = NewBattle_L5DrawTempBagRequest{} }
func (*NewBattle_L5DrawTempBagRequest) ProtoMessage() {}
func (*NewBattle_L5DrawTempBagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 24}
}
func (m *NewBattle_L5DrawTempBagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5DrawTempBagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5DrawTempBagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5DrawTempBagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5DrawTempBagRequest.Merge(m, src)
}
func (m *NewBattle_L5DrawTempBagRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5DrawTempBagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5DrawTempBagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5DrawTempBagRequest proto.InternalMessageInfo

func (*NewBattle_L5DrawTempBagRequest) XXX_MessageName() string {
	return "newbattle.NewBattle.L5DrawTempBagRequest"
}

type NewBattle_L5DrawTempBagResponse struct {
}

func (m *NewBattle_L5DrawTempBagResponse) Reset()      { *m = NewBattle_L5DrawTempBagResponse{} }
func (*NewBattle_L5DrawTempBagResponse) ProtoMessage() {}
func (*NewBattle_L5DrawTempBagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 25}
}
func (m *NewBattle_L5DrawTempBagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5DrawTempBagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5DrawTempBagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5DrawTempBagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5DrawTempBagResponse.Merge(m, src)
}
func (m *NewBattle_L5DrawTempBagResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5DrawTempBagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5DrawTempBagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5DrawTempBagResponse proto.InternalMessageInfo

func (*NewBattle_L5DrawTempBagResponse) XXX_MessageName() string {
	return "newbattle.NewBattle.L5DrawTempBagResponse"
}

// 移动广播
type NewBattle_L5MovePush struct {
	// 对象id
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 当前位置
	Cur *Vector2 `protobuf:"bytes,2,opt,name=cur,proto3" json:"cur,omitempty"`
	// 目标位置
	Target *Vector2 `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// 速度
	Speed      float64 `protobuf:"fixed64,4,opt,name=speed,proto3" json:"speed,omitempty"`
	ServerTime float64 `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64   `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *NewBattle_L5MovePush) Reset()      { *m = NewBattle_L5MovePush{} }
func (*NewBattle_L5MovePush) ProtoMessage() {}
func (*NewBattle_L5MovePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 26}
}
func (m *NewBattle_L5MovePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5MovePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5MovePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5MovePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5MovePush.Merge(m, src)
}
func (m *NewBattle_L5MovePush) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5MovePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5MovePush.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5MovePush proto.InternalMessageInfo

func (m *NewBattle_L5MovePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NewBattle_L5MovePush) GetCur() *Vector2 {
	if m != nil {
		return m.Cur
	}
	return nil
}

func (m *NewBattle_L5MovePush) GetTarget() *Vector2 {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *NewBattle_L5MovePush) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *NewBattle_L5MovePush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *NewBattle_L5MovePush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*NewBattle_L5MovePush) XXX_MessageName() string {
	return "newbattle.NewBattle.L5MovePush"
}

// 移动出了范围广播
type NewBattle_L5MoveOutPush struct {
	ObjId      []string `protobuf:"bytes,1,rep,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	ServerTime float64  `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64    `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *NewBattle_L5MoveOutPush) Reset()      { *m = NewBattle_L5MoveOutPush{} }
func (*NewBattle_L5MoveOutPush) ProtoMessage() {}
func (*NewBattle_L5MoveOutPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 27}
}
func (m *NewBattle_L5MoveOutPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5MoveOutPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5MoveOutPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5MoveOutPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5MoveOutPush.Merge(m, src)
}
func (m *NewBattle_L5MoveOutPush) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5MoveOutPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5MoveOutPush.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5MoveOutPush proto.InternalMessageInfo

func (m *NewBattle_L5MoveOutPush) GetObjId() []string {
	if m != nil {
		return m.ObjId
	}
	return nil
}

func (m *NewBattle_L5MoveOutPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *NewBattle_L5MoveOutPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*NewBattle_L5MoveOutPush) XXX_MessageName() string {
	return "newbattle.NewBattle.L5MoveOutPush"
}

type NewBattle_L5PlayerPush struct {
	// 实例id
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 公会名字
	SectName string `protobuf:"bytes,3,opt,name=sect_name,json=sectName,proto3" json:"sect_name,omitempty"`
	// 等级
	Level int64 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	// 当前血量
	CurHp int64 `protobuf:"varint,5,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	// 最大血量
	MaxHp int64 `protobuf:"varint,6,opt,name=max_hp,json=maxHp,proto3" json:"max_hp,omitempty"`
	// 当前魔法
	CurMp int64 `protobuf:"varint,7,opt,name=cur_mp,json=curMp,proto3" json:"cur_mp,omitempty"`
	// 最大魔法
	MaxMp int64 `protobuf:"varint,8,opt,name=max_mp,json=maxMp,proto3" json:"max_mp,omitempty"`
	// 当前位置
	Pos *Vector2 `protobuf:"bytes,9,opt,name=pos,proto3" json:"pos,omitempty"`
	// 身上所带buff
	BuffList   []*NewBattle_L5BuffInfo `protobuf:"bytes,10,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty"`
	ServerTime float64                 `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64                   `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *NewBattle_L5PlayerPush) Reset()      { *m = NewBattle_L5PlayerPush{} }
func (*NewBattle_L5PlayerPush) ProtoMessage() {}
func (*NewBattle_L5PlayerPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 28}
}
func (m *NewBattle_L5PlayerPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5PlayerPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5PlayerPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5PlayerPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5PlayerPush.Merge(m, src)
}
func (m *NewBattle_L5PlayerPush) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5PlayerPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5PlayerPush.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5PlayerPush proto.InternalMessageInfo

func (m *NewBattle_L5PlayerPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NewBattle_L5PlayerPush) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewBattle_L5PlayerPush) GetSectName() string {
	if m != nil {
		return m.SectName
	}
	return ""
}

func (m *NewBattle_L5PlayerPush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *NewBattle_L5PlayerPush) GetCurHp() int64 {
	if m != nil {
		return m.CurHp
	}
	return 0
}

func (m *NewBattle_L5PlayerPush) GetMaxHp() int64 {
	if m != nil {
		return m.MaxHp
	}
	return 0
}

func (m *NewBattle_L5PlayerPush) GetCurMp() int64 {
	if m != nil {
		return m.CurMp
	}
	return 0
}

func (m *NewBattle_L5PlayerPush) GetMaxMp() int64 {
	if m != nil {
		return m.MaxMp
	}
	return 0
}

func (m *NewBattle_L5PlayerPush) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5PlayerPush) GetBuffList() []*NewBattle_L5BuffInfo {
	if m != nil {
		return m.BuffList
	}
	return nil
}

func (m *NewBattle_L5PlayerPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *NewBattle_L5PlayerPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*NewBattle_L5PlayerPush) XXX_MessageName() string {
	return "newbattle.NewBattle.L5PlayerPush"
}

type NewBattle_L5MonsterPush struct {
	// 实例id
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 配置Id
	ConfigId int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// 当前血量
	CurHp int64 `protobuf:"varint,3,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	// 最大血量
	MaxHp int64 `protobuf:"varint,4,opt,name=max_hp,json=maxHp,proto3" json:"max_hp,omitempty"`
	// 当前魔法
	CurMp int64 `protobuf:"varint,5,opt,name=cur_mp,json=curMp,proto3" json:"cur_mp,omitempty"`
	// 最大魔法
	MaxMp int64 `protobuf:"varint,6,opt,name=max_mp,json=maxMp,proto3" json:"max_mp,omitempty"`
	// 当前位置
	Pos *Vector2 `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	// 身上所带buff
	BuffList []*NewBattle_L5BuffInfo `protobuf:"bytes,8,rep,name=buff_list,json=buffList,proto3" json:"buff_list,omitempty"`
	// 锁定玩家id
	LockPlayerId string  `protobuf:"bytes,9,opt,name=lock_player_id,json=lockPlayerId,proto3" json:"lock_player_id,omitempty"`
	ServerTime   float64 `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId     int64   `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *NewBattle_L5MonsterPush) Reset()      { *m = NewBattle_L5MonsterPush{} }
func (*NewBattle_L5MonsterPush) ProtoMessage() {}
func (*NewBattle_L5MonsterPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 29}
}
func (m *NewBattle_L5MonsterPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5MonsterPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5MonsterPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5MonsterPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5MonsterPush.Merge(m, src)
}
func (m *NewBattle_L5MonsterPush) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5MonsterPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5MonsterPush.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5MonsterPush proto.InternalMessageInfo

func (m *NewBattle_L5MonsterPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NewBattle_L5MonsterPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *NewBattle_L5MonsterPush) GetCurHp() int64 {
	if m != nil {
		return m.CurHp
	}
	return 0
}

func (m *NewBattle_L5MonsterPush) GetMaxHp() int64 {
	if m != nil {
		return m.MaxHp
	}
	return 0
}

func (m *NewBattle_L5MonsterPush) GetCurMp() int64 {
	if m != nil {
		return m.CurMp
	}
	return 0
}

func (m *NewBattle_L5MonsterPush) GetMaxMp() int64 {
	if m != nil {
		return m.MaxMp
	}
	return 0
}

func (m *NewBattle_L5MonsterPush) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *NewBattle_L5MonsterPush) GetBuffList() []*NewBattle_L5BuffInfo {
	if m != nil {
		return m.BuffList
	}
	return nil
}

func (m *NewBattle_L5MonsterPush) GetLockPlayerId() string {
	if m != nil {
		return m.LockPlayerId
	}
	return ""
}

func (m *NewBattle_L5MonsterPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *NewBattle_L5MonsterPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*NewBattle_L5MonsterPush) XXX_MessageName() string {
	return "newbattle.NewBattle.L5MonsterPush"
}

// 怪物索敌推送
type NewBattle_L5MonsterLockPlayerPush struct {
	// 怪物id
	MonsterId string `protobuf:"bytes,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	// 玩家Id
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// 锁定还是解除锁定
	State NewBattle_L5MonsterLockPlayerPush_State `protobuf:"varint,3,opt,name=state,proto3,enum=newbattle.NewBattle_L5MonsterLockPlayerPush_State" json:"state,omitempty"`
}

func (m *NewBattle_L5MonsterLockPlayerPush) Reset()      { *m = NewBattle_L5MonsterLockPlayerPush{} }
func (*NewBattle_L5MonsterLockPlayerPush) ProtoMessage() {}
func (*NewBattle_L5MonsterLockPlayerPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 30}
}
func (m *NewBattle_L5MonsterLockPlayerPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5MonsterLockPlayerPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5MonsterLockPlayerPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5MonsterLockPlayerPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5MonsterLockPlayerPush.Merge(m, src)
}
func (m *NewBattle_L5MonsterLockPlayerPush) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5MonsterLockPlayerPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5MonsterLockPlayerPush.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5MonsterLockPlayerPush proto.InternalMessageInfo

func (m *NewBattle_L5MonsterLockPlayerPush) GetMonsterId() string {
	if m != nil {
		return m.MonsterId
	}
	return ""
}

func (m *NewBattle_L5MonsterLockPlayerPush) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *NewBattle_L5MonsterLockPlayerPush) GetState() NewBattle_L5MonsterLockPlayerPush_State {
	if m != nil {
		return m.State
	}
	return NewBattle_L5MonsterLockPlayerPush_Lock
}

func (*NewBattle_L5MonsterLockPlayerPush) XXX_MessageName() string {
	return "newbattle.NewBattle.L5MonsterLockPlayerPush"
}

// 对象死亡推送
type NewBattle_L5DeadPush struct {
	ObjId      string          `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	AttackerId string          `protobuf:"bytes,2,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	SkillId    int64           `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	Items      map[int64]int64 `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Box        int64           `protobuf:"varint,5,opt,name=box,proto3" json:"box,omitempty"`
	ServerTime float64         `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64           `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *NewBattle_L5DeadPush) Reset()      { *m = NewBattle_L5DeadPush{} }
func (*NewBattle_L5DeadPush) ProtoMessage() {}
func (*NewBattle_L5DeadPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 31}
}
func (m *NewBattle_L5DeadPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5DeadPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5DeadPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5DeadPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5DeadPush.Merge(m, src)
}
func (m *NewBattle_L5DeadPush) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5DeadPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5DeadPush.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5DeadPush proto.InternalMessageInfo

func (m *NewBattle_L5DeadPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *NewBattle_L5DeadPush) GetAttackerId() string {
	if m != nil {
		return m.AttackerId
	}
	return ""
}

func (m *NewBattle_L5DeadPush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *NewBattle_L5DeadPush) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *NewBattle_L5DeadPush) GetBox() int64 {
	if m != nil {
		return m.Box
	}
	return 0
}

func (m *NewBattle_L5DeadPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *NewBattle_L5DeadPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*NewBattle_L5DeadPush) XXX_MessageName() string {
	return "newbattle.NewBattle.L5DeadPush"
}

// 普通战斗, 比如 我 祭出 玄冥符 对 哈喽.石魔 造成 51.6万伤害
type NewBattle_L5NormalFightInfoPush struct {
	FightInfo  *NewBattle_L5NormalFightInfo `protobuf:"bytes,1,opt,name=fight_info,json=fightInfo,proto3" json:"fight_info,omitempty"`
	ServerTime float64                      `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64                        `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *NewBattle_L5NormalFightInfoPush) Reset()      { *m = NewBattle_L5NormalFightInfoPush{} }
func (*NewBattle_L5NormalFightInfoPush) ProtoMessage() {}
func (*NewBattle_L5NormalFightInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 32}
}
func (m *NewBattle_L5NormalFightInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5NormalFightInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5NormalFightInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5NormalFightInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5NormalFightInfoPush.Merge(m, src)
}
func (m *NewBattle_L5NormalFightInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5NormalFightInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5NormalFightInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5NormalFightInfoPush proto.InternalMessageInfo

func (m *NewBattle_L5NormalFightInfoPush) GetFightInfo() *NewBattle_L5NormalFightInfo {
	if m != nil {
		return m.FightInfo
	}
	return nil
}

func (m *NewBattle_L5NormalFightInfoPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *NewBattle_L5NormalFightInfoPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*NewBattle_L5NormalFightInfoPush) XXX_MessageName() string {
	return "newbattle.NewBattle.L5NormalFightInfoPush"
}

type NewBattle_L5NormalFightDamageInfoPush struct {
	DamageInfo *NewBattle_L5NormalFightDamageInfo `protobuf:"bytes,1,opt,name=damage_info,json=damageInfo,proto3" json:"damage_info,omitempty"`
	ServerTime float64                            `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	UniqueId   int64                              `protobuf:"varint,100,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (m *NewBattle_L5NormalFightDamageInfoPush) Reset()      { *m = NewBattle_L5NormalFightDamageInfoPush{} }
func (*NewBattle_L5NormalFightDamageInfoPush) ProtoMessage() {}
func (*NewBattle_L5NormalFightDamageInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 33}
}
func (m *NewBattle_L5NormalFightDamageInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5NormalFightDamageInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5NormalFightDamageInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5NormalFightDamageInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5NormalFightDamageInfoPush.Merge(m, src)
}
func (m *NewBattle_L5NormalFightDamageInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5NormalFightDamageInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5NormalFightDamageInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5NormalFightDamageInfoPush proto.InternalMessageInfo

func (m *NewBattle_L5NormalFightDamageInfoPush) GetDamageInfo() *NewBattle_L5NormalFightDamageInfo {
	if m != nil {
		return m.DamageInfo
	}
	return nil
}

func (m *NewBattle_L5NormalFightDamageInfoPush) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *NewBattle_L5NormalFightDamageInfoPush) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (*NewBattle_L5NormalFightDamageInfoPush) XXX_MessageName() string {
	return "newbattle.NewBattle.L5NormalFightDamageInfoPush"
}

// 普通战斗信息, 比如 我 祭出 玄冥符 对 哈喽.石魔 造成 51.6万伤害
type NewBattle_L5NormalFightInfo struct {
	AttackingId    string   `protobuf:"bytes,1,opt,name=attacking_id,json=attackingId,proto3" json:"attacking_id,omitempty"`
	SkillId        int64    `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	AttackedTarget string   `protobuf:"bytes,5,opt,name=attacked_target,json=attackedTarget,proto3" json:"attacked_target,omitempty"`
	Pos            *Vector2 `protobuf:"bytes,6,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *NewBattle_L5NormalFightInfo) Reset()      { *m = NewBattle_L5NormalFightInfo{} }
func (*NewBattle_L5NormalFightInfo) ProtoMessage() {}
func (*NewBattle_L5NormalFightInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 34}
}
func (m *NewBattle_L5NormalFightInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5NormalFightInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5NormalFightInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5NormalFightInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5NormalFightInfo.Merge(m, src)
}
func (m *NewBattle_L5NormalFightInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5NormalFightInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5NormalFightInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5NormalFightInfo proto.InternalMessageInfo

func (m *NewBattle_L5NormalFightInfo) GetAttackingId() string {
	if m != nil {
		return m.AttackingId
	}
	return ""
}

func (m *NewBattle_L5NormalFightInfo) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *NewBattle_L5NormalFightInfo) GetAttackedTarget() string {
	if m != nil {
		return m.AttackedTarget
	}
	return ""
}

func (m *NewBattle_L5NormalFightInfo) GetPos() *Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (*NewBattle_L5NormalFightInfo) XXX_MessageName() string {
	return "newbattle.NewBattle.L5NormalFightInfo"
}

type NewBattle_L5NormalFightDamageInfo struct {
	AttackingId string                    `protobuf:"bytes,1,opt,name=attacking_id,json=attackingId,proto3" json:"attacking_id,omitempty"`
	SkillId     int64                     `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	Damages     []*NewBattle_L5DamageInfo `protobuf:"bytes,3,rep,name=damages,proto3" json:"damages,omitempty"`
	Buffs       []*NewBattle_L5BuffInfo   `protobuf:"bytes,4,rep,name=buffs,proto3" json:"buffs,omitempty"`
}

func (m *NewBattle_L5NormalFightDamageInfo) Reset()      { *m = NewBattle_L5NormalFightDamageInfo{} }
func (*NewBattle_L5NormalFightDamageInfo) ProtoMessage() {}
func (*NewBattle_L5NormalFightDamageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 35}
}
func (m *NewBattle_L5NormalFightDamageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5NormalFightDamageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5NormalFightDamageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5NormalFightDamageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5NormalFightDamageInfo.Merge(m, src)
}
func (m *NewBattle_L5NormalFightDamageInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5NormalFightDamageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5NormalFightDamageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5NormalFightDamageInfo proto.InternalMessageInfo

func (m *NewBattle_L5NormalFightDamageInfo) GetAttackingId() string {
	if m != nil {
		return m.AttackingId
	}
	return ""
}

func (m *NewBattle_L5NormalFightDamageInfo) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *NewBattle_L5NormalFightDamageInfo) GetDamages() []*NewBattle_L5DamageInfo {
	if m != nil {
		return m.Damages
	}
	return nil
}

func (m *NewBattle_L5NormalFightDamageInfo) GetBuffs() []*NewBattle_L5BuffInfo {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (*NewBattle_L5NormalFightDamageInfo) XXX_MessageName() string {
	return "newbattle.NewBattle.L5NormalFightDamageInfo"
}

type NewBattle_L5DamageInfo struct {
	AttackedId string               `protobuf:"bytes,1,opt,name=attacked_id,json=attackedId,proto3" json:"attacked_id,omitempty"`
	Dt         NewBattle_DamageType `protobuf:"varint,2,opt,name=dt,proto3,enum=newbattle.NewBattle_DamageType" json:"dt,omitempty"`
	Damage     int64                `protobuf:"varint,3,opt,name=damage,proto3" json:"damage,omitempty"`
	AttackedHp int64                `protobuf:"varint,4,opt,name=attacked_hp,json=attackedHp,proto3" json:"attacked_hp,omitempty"`
}

func (m *NewBattle_L5DamageInfo) Reset()      { *m = NewBattle_L5DamageInfo{} }
func (*NewBattle_L5DamageInfo) ProtoMessage() {}
func (*NewBattle_L5DamageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 36}
}
func (m *NewBattle_L5DamageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5DamageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5DamageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5DamageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5DamageInfo.Merge(m, src)
}
func (m *NewBattle_L5DamageInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5DamageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5DamageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5DamageInfo proto.InternalMessageInfo

func (m *NewBattle_L5DamageInfo) GetAttackedId() string {
	if m != nil {
		return m.AttackedId
	}
	return ""
}

func (m *NewBattle_L5DamageInfo) GetDt() NewBattle_DamageType {
	if m != nil {
		return m.Dt
	}
	return NewBattle_DTNormal
}

func (m *NewBattle_L5DamageInfo) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *NewBattle_L5DamageInfo) GetAttackedHp() int64 {
	if m != nil {
		return m.AttackedHp
	}
	return 0
}

func (*NewBattle_L5DamageInfo) XXX_MessageName() string {
	return "newbattle.NewBattle.L5DamageInfo"
}

type NewBattle_L5BuffInfo struct {
	BuffId    int64   `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	Continued float64 `protobuf:"fixed64,2,opt,name=continued,proto3" json:"continued,omitempty"`
}

func (m *NewBattle_L5BuffInfo) Reset()      { *m = NewBattle_L5BuffInfo{} }
func (*NewBattle_L5BuffInfo) ProtoMessage() {}
func (*NewBattle_L5BuffInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 37}
}
func (m *NewBattle_L5BuffInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5BuffInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5BuffInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5BuffInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5BuffInfo.Merge(m, src)
}
func (m *NewBattle_L5BuffInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5BuffInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5BuffInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5BuffInfo proto.InternalMessageInfo

func (m *NewBattle_L5BuffInfo) GetBuffId() int64 {
	if m != nil {
		return m.BuffId
	}
	return 0
}

func (m *NewBattle_L5BuffInfo) GetContinued() float64 {
	if m != nil {
		return m.Continued
	}
	return 0
}

func (*NewBattle_L5BuffInfo) XXX_MessageName() string {
	return "newbattle.NewBattle.L5BuffInfo"
}

// 挂机临时背包
type NewBattle_L5TempBag struct {
	StartTime   int64                `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	KillMonster int64                `protobuf:"varint,2,opt,name=kill_monster,json=killMonster,proto3" json:"kill_monster,omitempty"`
	KillBoss    int64                `protobuf:"varint,3,opt,name=kill_boss,json=killBoss,proto3" json:"kill_boss,omitempty"`
	KillPlayer  int64                `protobuf:"varint,4,opt,name=kill_player,json=killPlayer,proto3" json:"kill_player,omitempty"`
	DeadCount   int64                `protobuf:"varint,5,opt,name=dead_count,json=deadCount,proto3" json:"dead_count,omitempty"`
	Items       map[int64]int64      `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Equips      []*NewBattle_L5Equip `protobuf:"bytes,7,rep,name=equips,proto3" json:"equips,omitempty"`
	Cap         int64                `protobuf:"varint,8,opt,name=cap,proto3" json:"cap,omitempty"`
	Len         int64                `protobuf:"varint,9,opt,name=len,proto3" json:"len,omitempty"`
}

func (m *NewBattle_L5TempBag) Reset()      { *m = NewBattle_L5TempBag{} }
func (*NewBattle_L5TempBag) ProtoMessage() {}
func (*NewBattle_L5TempBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 38}
}
func (m *NewBattle_L5TempBag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5TempBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5TempBag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5TempBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5TempBag.Merge(m, src)
}
func (m *NewBattle_L5TempBag) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5TempBag) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5TempBag.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5TempBag proto.InternalMessageInfo

func (m *NewBattle_L5TempBag) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *NewBattle_L5TempBag) GetKillMonster() int64 {
	if m != nil {
		return m.KillMonster
	}
	return 0
}

func (m *NewBattle_L5TempBag) GetKillBoss() int64 {
	if m != nil {
		return m.KillBoss
	}
	return 0
}

func (m *NewBattle_L5TempBag) GetKillPlayer() int64 {
	if m != nil {
		return m.KillPlayer
	}
	return 0
}

func (m *NewBattle_L5TempBag) GetDeadCount() int64 {
	if m != nil {
		return m.DeadCount
	}
	return 0
}

func (m *NewBattle_L5TempBag) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *NewBattle_L5TempBag) GetEquips() []*NewBattle_L5Equip {
	if m != nil {
		return m.Equips
	}
	return nil
}

func (m *NewBattle_L5TempBag) GetCap() int64 {
	if m != nil {
		return m.Cap
	}
	return 0
}

func (m *NewBattle_L5TempBag) GetLen() int64 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (*NewBattle_L5TempBag) XXX_MessageName() string {
	return "newbattle.NewBattle.L5TempBag"
}

type NewBattle_L5Equip struct {
	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Source int64 `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *NewBattle_L5Equip) Reset()      { *m = NewBattle_L5Equip{} }
func (*NewBattle_L5Equip) ProtoMessage() {}
func (*NewBattle_L5Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_3100f0903bc21383, []int{2, 39}
}
func (m *NewBattle_L5Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewBattle_L5Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewBattle_L5Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewBattle_L5Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewBattle_L5Equip.Merge(m, src)
}
func (m *NewBattle_L5Equip) XXX_Size() int {
	return m.Size()
}
func (m *NewBattle_L5Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_NewBattle_L5Equip.DiscardUnknown(m)
}

var xxx_messageInfo_NewBattle_L5Equip proto.InternalMessageInfo

func (m *NewBattle_L5Equip) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NewBattle_L5Equip) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (*NewBattle_L5Equip) XXX_MessageName() string {
	return "newbattle.NewBattle.L5Equip"
}
func init() {
	proto.RegisterEnum("newbattle.NewBattleErrorCode", NewBattleErrorCode_name, NewBattleErrorCode_value)
	proto.RegisterEnum("newbattle.Visual_ObjectType", Visual_ObjectType_name, Visual_ObjectType_value)
	proto.RegisterEnum("newbattle.NewBattle_DamageType", NewBattle_DamageType_name, NewBattle_DamageType_value)
	proto.RegisterEnum("newbattle.NewBattle_RenderType", NewBattle_RenderType_name, NewBattle_RenderType_value)
	proto.RegisterEnum("newbattle.NewBattle_L5MonsterLockPlayerPush_State", NewBattle_L5MonsterLockPlayerPush_State_name, NewBattle_L5MonsterLockPlayerPush_State_value)
	proto.RegisterType((*Vector2)(nil), "newbattle.Vector2")
	proto.RegisterType((*Visual)(nil), "newbattle.Visual")
	proto.RegisterType((*Visual_Enter)(nil), "newbattle.Visual.Enter")
	proto.RegisterType((*Visual_Leave)(nil), "newbattle.Visual.Leave")
	proto.RegisterType((*Visual_CreateMap)(nil), "newbattle.Visual.CreateMap")
	proto.RegisterMapType((map[int64]int64)(nil), "newbattle.Visual.CreateMap.CanMoveEntry")
	proto.RegisterType((*Visual_Move)(nil), "newbattle.Visual.Move")
	proto.RegisterType((*Visual_Object)(nil), "newbattle.Visual.Object")
	proto.RegisterType((*Visual_Objects)(nil), "newbattle.Visual.Objects")
	proto.RegisterType((*NewBattle)(nil), "newbattle.NewBattle")
	proto.RegisterType((*NewBattle_L5TimePush)(nil), "newbattle.NewBattle.L5TimePush")
	proto.RegisterType((*NewBattle_L5KeepAlive)(nil), "newbattle.NewBattle.L5KeepAlive")
	proto.RegisterType((*NewBattle_L5EnterMapRequest)(nil), "newbattle.NewBattle.L5EnterMapRequest")
	proto.RegisterType((*NewBattle_L5EnterMapResponse)(nil), "newbattle.NewBattle.L5EnterMapResponse")
	proto.RegisterType((*NewBattle_L5EnterPveMapRequest)(nil), "newbattle.NewBattle.L5EnterPveMapRequest")
	proto.RegisterType((*NewBattle_L5EnterPveMapResponse)(nil), "newbattle.NewBattle.L5EnterPveMapResponse")
	proto.RegisterType((*NewBattle_L5MoveRequest)(nil), "newbattle.NewBattle.L5MoveRequest")
	proto.RegisterType((*NewBattle_L5MoveResponse)(nil), "newbattle.NewBattle.L5MoveResponse")
	proto.RegisterType((*NewBattle_L5TeleportRequest)(nil), "newbattle.NewBattle.L5TeleportRequest")
	proto.RegisterType((*NewBattle_L5TeleportResponse)(nil), "newbattle.NewBattle.L5TeleportResponse")
	proto.RegisterType((*NewBattle_L5StopMoveRequest)(nil), "newbattle.NewBattle.L5StopMoveRequest")
	proto.RegisterType((*NewBattle_L5StopMoveResponse)(nil), "newbattle.NewBattle.L5StopMoveResponse")
	proto.RegisterType((*NewBattle_L5LeaveRequest)(nil), "newbattle.NewBattle.L5LeaveRequest")
	proto.RegisterType((*NewBattle_L5LeaveResponse)(nil), "newbattle.NewBattle.L5LeaveResponse")
	proto.RegisterType((*NewBattle_L5AttackRequest)(nil), "newbattle.NewBattle.L5AttackRequest")
	proto.RegisterType((*NewBattle_L5AttackResponse)(nil), "newbattle.NewBattle.L5AttackResponse")
	proto.RegisterType((*NewBattle_L5DamageRequest)(nil), "newbattle.NewBattle.L5DamageRequest")
	proto.RegisterType((*NewBattle_L5DamageResponse)(nil), "newbattle.NewBattle.L5DamageResponse")
	proto.RegisterType((*NewBattle_L5ChangeRenderRequest)(nil), "newbattle.NewBattle.L5ChangeRenderRequest")
	proto.RegisterType((*NewBattle_L5ChangeRenderResponse)(nil), "newbattle.NewBattle.L5ChangeRenderResponse")
	proto.RegisterType((*NewBattle_L5AutoFightRequest)(nil), "newbattle.NewBattle.L5AutoFightRequest")
	proto.RegisterType((*NewBattle_L5AutoFightResponse)(nil), "newbattle.NewBattle.L5AutoFightResponse")
	proto.RegisterType((*NewBattle_L5GetTempBagRequest)(nil), "newbattle.NewBattle.L5GetTempBagRequest")
	proto.RegisterType((*NewBattle_L5GetTempBagResponse)(nil), "newbattle.NewBattle.L5GetTempBagResponse")
	proto.RegisterType((*NewBattle_L5DrawTempBagRequest)(nil), "newbattle.NewBattle.L5DrawTempBagRequest")
	proto.RegisterType((*NewBattle_L5DrawTempBagResponse)(nil), "newbattle.NewBattle.L5DrawTempBagResponse")
	proto.RegisterType((*NewBattle_L5MovePush)(nil), "newbattle.NewBattle.L5MovePush")
	proto.RegisterType((*NewBattle_L5MoveOutPush)(nil), "newbattle.NewBattle.L5MoveOutPush")
	proto.RegisterType((*NewBattle_L5PlayerPush)(nil), "newbattle.NewBattle.L5PlayerPush")
	proto.RegisterType((*NewBattle_L5MonsterPush)(nil), "newbattle.NewBattle.L5MonsterPush")
	proto.RegisterType((*NewBattle_L5MonsterLockPlayerPush)(nil), "newbattle.NewBattle.L5MonsterLockPlayerPush")
	proto.RegisterType((*NewBattle_L5DeadPush)(nil), "newbattle.NewBattle.L5DeadPush")
	proto.RegisterMapType((map[int64]int64)(nil), "newbattle.NewBattle.L5DeadPush.ItemsEntry")
	proto.RegisterType((*NewBattle_L5NormalFightInfoPush)(nil), "newbattle.NewBattle.L5NormalFightInfoPush")
	proto.RegisterType((*NewBattle_L5NormalFightDamageInfoPush)(nil), "newbattle.NewBattle.L5NormalFightDamageInfoPush")
	proto.RegisterType((*NewBattle_L5NormalFightInfo)(nil), "newbattle.NewBattle.L5NormalFightInfo")
	proto.RegisterType((*NewBattle_L5NormalFightDamageInfo)(nil), "newbattle.NewBattle.L5NormalFightDamageInfo")
	proto.RegisterType((*NewBattle_L5DamageInfo)(nil), "newbattle.NewBattle.L5DamageInfo")
	proto.RegisterType((*NewBattle_L5BuffInfo)(nil), "newbattle.NewBattle.L5BuffInfo")
	proto.RegisterType((*NewBattle_L5TempBag)(nil), "newbattle.NewBattle.L5TempBag")
	proto.RegisterMapType((map[int64]int64)(nil), "newbattle.NewBattle.L5TempBag.ItemsEntry")
	proto.RegisterType((*NewBattle_L5Equip)(nil), "newbattle.NewBattle.L5Equip")
}

func init() {
	proto.RegisterFile("proto/new-battle-service/new_battle.proto", fileDescriptor_3100f0903bc21383)
}

var fileDescriptor_3100f0903bc21383 = []byte{
	// 2212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x4d, 0x70, 0x1c, 0x47,
	0xf5, 0xd7, 0xcc, 0x7e, 0xbf, 0x95, 0xe5, 0x4d, 0xc7, 0x96, 0x37, 0x63, 0x7b, 0x6d, 0xeb, 0xef,
	0x3f, 0x71, 0x9c, 0x48, 0x4a, 0xd6, 0x08, 0x5c, 0x26, 0x14, 0xd8, 0x5a, 0x81, 0x97, 0xac, 0x6c,
	0xd5, 0x78, 0x93, 0x54, 0xc1, 0x61, 0xab, 0x77, 0xa6, 0x77, 0x35, 0xf6, 0xce, 0x87, 0xe7, 0x63,
	0xa5, 0xcd, 0x89, 0xf2, 0x05, 0xca, 0x55, 0xa4, 0x7c, 0x80, 0x2a, 0x28, 0x1c, 0xc8, 0x81, 0x83,
	0x21, 0x15, 0x8a, 0x2a, 0x4a, 0x14, 0xa7, 0x9c, 0x43, 0x71, 0xf1, 0x81, 0x83, 0x8f, 0x20, 0x23,
	0x07, 0x28, 0x0e, 0x9c, 0xb9, 0x40, 0xf5, 0xc7, 0x7c, 0x48, 0xde, 0x5d, 0x45, 0x5e, 0x73, 0x9b,
	0x7e, 0xfd, 0xba, 0xfb, 0xfd, 0x7e, 0xef, 0xf5, 0xeb, 0xd7, 0x3d, 0xf0, 0x8a, 0xe3, 0xda, 0xbe,
	0xbd, 0x68, 0x91, 0x8d, 0xf9, 0x36, 0xf6, 0xfd, 0x1e, 0x99, 0xf7, 0x88, 0xdb, 0x37, 0x34, 0x42,
	0x45, 0x2d, 0x2e, 0x5a, 0x60, 0x3a, 0xa8, 0x60, 0x91, 0x0d, 0x2e, 0x50, 0x8e, 0xf1, 0x51, 0xa6,
	0xad, 0x93, 0x9e, 0xb7, 0xd8, 0xc6, 0x9e, 0xd0, 0x51, 0x5e, 0xea, 0xda, 0x76, 0xb7, 0x47, 0x16,
	0x59, 0xab, 0x1d, 0x74, 0x16, 0xb1, 0x35, 0x10, 0x5d, 0xb3, 0x7b, 0xc6, 0x74, 0x85, 0x7c, 0xf7,
	0x5c, 0x81, 0x47, 0x5c, 0xde, 0x31, 0xf7, 0xff, 0x90, 0x7b, 0x87, 0x68, 0xbe, 0xed, 0x56, 0xd1,
	0x34, 0x48, 0x9b, 0x65, 0xe9, 0xb4, 0x74, 0x4e, 0x52, 0xa5, 0x4d, 0xda, 0x1a, 0x94, 0x65, 0xde,
	0x1a, 0xcc, 0xfd, 0x29, 0x03, 0xd9, 0x77, 0x0c, 0x2f, 0xc0, 0x3d, 0xa5, 0x02, 0x99, 0x15, 0xcb,
	0x27, 0x2e, 0x3a, 0x0a, 0x59, 0x13, 0x3b, 0x2d, 0x43, 0x67, 0x83, 0x0a, 0x6a, 0xc6, 0xc4, 0x4e,
	0x5d, 0x57, 0x72, 0x90, 0x69, 0x10, 0xdc, 0x27, 0xca, 0x3f, 0x25, 0x28, 0x2c, 0xbb, 0x04, 0xfb,
	0x64, 0x15, 0x3b, 0x68, 0x1e, 0xf2, 0x54, 0xdb, 0x33, 0xde, 0x23, 0x4c, 0xbf, 0x58, 0x45, 0x0b,
	0x11, 0xd6, 0x05, 0x61, 0x83, 0x9a, 0x33, 0xb1, 0x73, 0xc3, 0x78, 0x8f, 0xa0, 0x45, 0x28, 0x74,
	0x5d, 0x43, 0xe7, 0xfa, 0xf2, 0x48, 0xfd, 0x3c, 0x55, 0x62, 0x03, 0x96, 0x21, 0xaf, 0x61, 0xab,
	0x65, 0xda, 0x7d, 0x52, 0x4e, 0x9d, 0x4e, 0x9d, 0x2b, 0x56, 0xcf, 0x25, 0xf5, 0x99, 0xed, 0x0b,
	0x91, 0x39, 0x0b, 0xcb, 0xd8, 0x5a, 0xb5, 0xfb, 0x64, 0xc5, 0xf2, 0xdd, 0x81, 0x9a, 0xd3, 0x78,
	0x4b, 0xb9, 0x04, 0xd3, 0xc9, 0x0e, 0x54, 0x82, 0xd4, 0x2d, 0x32, 0x60, 0xf6, 0x22, 0x95, 0x7e,
	0xa2, 0x23, 0x90, 0xe9, 0xe3, 0x5e, 0xc0, 0x6d, 0x42, 0x2a, 0x6f, 0x5c, 0x92, 0x2f, 0x4a, 0xca,
	0x6b, 0x90, 0xa6, 0x03, 0xd1, 0x59, 0x48, 0x39, 0xb6, 0x37, 0x06, 0x23, 0xed, 0x56, 0xee, 0xc9,
	0x90, 0xbd, 0xde, 0xbe, 0x49, 0x34, 0x1f, 0xcd, 0x80, 0x1c, 0x71, 0x28, 0x1b, 0x3a, 0x3a, 0x0e,
	0x05, 0xcd, 0xb6, 0x3a, 0x46, 0x97, 0x52, 0x4b, 0x97, 0x49, 0xa9, 0x79, 0x2e, 0xa8, 0xeb, 0xe8,
	0x14, 0x14, 0x45, 0xa7, 0x85, 0x4d, 0x8a, 0x94, 0x8e, 0x02, 0x2e, 0xba, 0x86, 0x4d, 0x82, 0x10,
	0xa4, 0x59, 0x4f, 0x9a, 0xf5, 0xb0, 0x6f, 0xba, 0xc2, 0xba, 0x53, 0xce, 0xb0, 0xa9, 0xe4, 0x75,
	0x87, 0x7b, 0x6e, 0xb3, 0xb5, 0xee, 0x94, 0xb3, 0x4c, 0x96, 0x31, 0xf1, 0xe6, 0x55, 0x87, 0xaa,
	0x99, 0x4e, 0x39, 0xc7, 0xd5, 0xcc, 0x48, 0xcd, 0x74, 0xca, 0xf9, 0x48, 0x6d, 0xd5, 0x09, 0x01,
	0x16, 0xc6, 0x02, 0x44, 0xaf, 0x43, 0xda, 0x1f, 0x38, 0xa4, 0x0c, 0xa7, 0xa5, 0x73, 0x33, 0xd5,
	0x13, 0x4f, 0xfb, 0x82, 0xa3, 0x6f, 0x0e, 0x1c, 0xa2, 0x32, 0x4d, 0xe5, 0xab, 0x90, 0xe3, 0x32,
	0x0f, 0x55, 0x21, 0x67, 0xf3, 0xcf, 0xb2, 0xc4, 0x7c, 0x59, 0x1e, 0x35, 0x5e, 0x0d, 0x15, 0xe7,
	0xaa, 0x00, 0xf1, 0x94, 0xa8, 0x08, 0xb9, 0xb7, 0xad, 0x5b, 0x96, 0xbd, 0x61, 0x95, 0xa6, 0x10,
	0x40, 0x76, 0xad, 0x87, 0x07, 0xc4, 0x2d, 0x49, 0xb4, 0x63, 0xd5, 0xb6, 0x3c, 0x9f, 0xb8, 0x25,
	0x79, 0xee, 0xe7, 0xaf, 0x42, 0xe1, 0x1a, 0xd9, 0xb8, 0xc2, 0x37, 0xdc, 0x3c, 0x40, 0x63, 0xa9,
	0x69, 0x98, 0x64, 0x2d, 0xf0, 0xd6, 0x29, 0xd3, 0x74, 0x97, 0x12, 0xb7, 0xe5, 0x1b, 0x26, 0x11,
	0x1b, 0x03, 0xb8, 0x88, 0x2a, 0x29, 0x87, 0xa0, 0xd8, 0x58, 0x7a, 0x8b, 0x10, 0xe7, 0x72, 0xcf,
	0xe8, 0x13, 0xe5, 0x91, 0x04, 0x2f, 0x34, 0x96, 0xd8, 0xd6, 0x58, 0xc5, 0x8e, 0x4a, 0x6e, 0x07,
	0xc4, 0xf3, 0x3f, 0x5f, 0x34, 0x24, 0xb6, 0x92, 0x1c, 0x32, 0xed, 0xd4, 0x75, 0x74, 0x0e, 0x4a,
	0x5c, 0xbb, 0x25, 0x2c, 0x31, 0x74, 0xe6, 0xf1, 0x94, 0x3a, 0xc3, 0xe5, 0x37, 0x98, 0xb8, 0xae,
	0xa3, 0xd3, 0x90, 0x76, 0xed, 0x1e, 0xf7, 0x7a, 0xb1, 0x3a, 0xbd, 0xc0, 0x37, 0xfa, 0x82, 0x6a,
	0xf7, 0x88, 0xca, 0x7a, 0x2e, 0x5d, 0xba, 0xb3, 0x55, 0xfe, 0x12, 0xc4, 0xe9, 0x05, 0xbd, 0xb8,
	0xe2, 0xba, 0x1c, 0x78, 0xdd, 0xea, 0xe3, 0x9e, 0xa1, 0xaf, 0xd9, 0x1e, 0x3a, 0x12, 0x09, 0x57,
	0xb1, 0x73, 0xcd, 0xf6, 0x57, 0x36, 0x0d, 0xcf, 0x57, 0x5c, 0x40, 0x49, 0x64, 0x9e, 0x63, 0x5b,
	0x1e, 0x99, 0x0c, 0xda, 0x1e, 0x76, 0xb5, 0xa7, 0xd8, 0xfd, 0xb7, 0x04, 0x47, 0xc4, 0xa2, 0x6b,
	0x7d, 0x72, 0x60, 0x46, 0x4f, 0x02, 0xe8, 0x81, 0xd5, 0x25, 0xb6, 0x15, 0x2f, 0x5d, 0x10, 0x92,
	0xba, 0x4e, 0xad, 0x72, 0xfa, 0x24, 0xe4, 0xb3, 0xa0, 0x66, 0x9c, 0x3e, 0x19, 0x41, 0x78, 0x7a,
	0x2c, 0xe1, 0x99, 0xff, 0x09, 0xe1, 0x3f, 0x94, 0xe0, 0xe8, 0x1e, 0xf0, 0x07, 0x22, 0xfd, 0xd9,
	0xd0, 0xef, 0xeb, 0x93, 0x87, 0x12, 0x1c, 0x6a, 0x2c, 0xd1, 0x2c, 0x77, 0x30, 0x67, 0xcc, 0x43,
	0x5e, 0x0b, 0x5c, 0xb7, 0x45, 0x55, 0x47, 0xe7, 0xf2, 0x1c, 0xd5, 0x59, 0xe3, 0x21, 0x63, 0xb7,
	0x6f, 0x26, 0xcc, 0xb3, 0xdb, 0x37, 0xb9, 0xd5, 0x86, 0xd7, 0x72, 0xfa, 0x3c, 0xca, 0xf3, 0x6a,
	0xc6, 0xf0, 0xd6, 0xfa, 0xe4, 0xd2, 0x9b, 0x77, 0xb6, 0xca, 0x17, 0xf7, 0xe5, 0x79, 0xf6, 0x29,
	0x21, 0x4b, 0x08, 0xca, 0xbb, 0x30, 0x13, 0x22, 0x3a, 0x10, 0xc3, 0xfb, 0x72, 0xf5, 0x3e, 0x4b,
	0x07, 0x4d, 0xd2, 0x23, 0x8e, 0xed, 0xfa, 0x21, 0x5f, 0xbb, 0xcf, 0xcc, 0x68, 0x37, 0x88, 0x35,
	0xe5, 0xb1, 0x6b, 0x4e, 0x88, 0xb4, 0x41, 0x37, 0x71, 0x6c, 0x8f, 0x40, 0x3b, 0xc2, 0xa0, 0x7d,
	0xe1, 0xdd, 0x63, 0xf0, 0x6e, 0xf8, 0xb6, 0x73, 0xf0, 0x70, 0x88, 0xfd, 0x2b, 0x0f, 0xf7, 0x6f,
	0x2a, 0xe9, 0xdf, 0x97, 0xef, 0x6c, 0x95, 0xff, 0x2f, 0x89, 0x7a, 0x14, 0xc0, 0xef, 0x50, 0x80,
	0xb1, 0x45, 0xcf, 0xd7, 0x9d, 0x6b, 0x34, 0x4e, 0x58, 0x5d, 0x93, 0x70, 0xa5, 0x30, 0x57, 0x7a,
	0x26, 0x73, 0xab, 0x70, 0x38, 0x9a, 0x51, 0xd8, 0xba, 0xaf, 0x15, 0xdf, 0x95, 0xe8, 0xa0, 0xcb,
	0xbe, 0x8f, 0xb5, 0x5b, 0xa1, 0x1d, 0x2b, 0x00, 0x1d, 0xa3, 0xbb, 0xee, 0xb7, 0x0c, 0xab, 0x63,
	0x0b, 0x9c, 0x5f, 0x48, 0xe0, 0x8c, 0xce, 0xb7, 0x85, 0xc6, 0xd2, 0x35, 0xdb, 0x35, 0x71, 0xef,
	0x1b, 0x54, 0xbd, 0x6e, 0x75, 0x6c, 0xb5, 0xd0, 0x09, 0x3f, 0x13, 0x70, 0xe4, 0x24, 0x9c, 0xc3,
	0x77, 0xb6, 0xca, 0xc5, 0x04, 0x1c, 0xa5, 0x01, 0xa5, 0xd8, 0x02, 0x61, 0xf7, 0x31, 0xc8, 0xd1,
	0xb1, 0xd8, 0xf3, 0x04, 0x17, 0x59, 0xc3, 0x5b, 0xc3, 0xde, 0xe7, 0xa0, 0xf5, 0xfb, 0x0c, 0x50,
	0x0d, 0x9b, 0xb8, 0x1b, 0x11, 0xbb, 0x0a, 0x45, 0x9d, 0x09, 0x92, 0x88, 0x5e, 0xdb, 0x1f, 0x11,
	0x9f, 0x85, 0xe1, 0x02, 0x3d, 0xfa, 0x3e, 0x18, 0xb0, 0xd0, 0x92, 0x89, 0x81, 0x7d, 0x8b, 0x26,
	0xf0, 0xe5, 0x75, 0x6c, 0xd1, 0xd9, 0x2c, 0x9d, 0xb8, 0x21, 0xba, 0x37, 0x20, 0xe5, 0x0f, 0x1c,
	0x36, 0xdd, 0x4c, 0xf5, 0xd4, 0x50, 0x54, 0x7c, 0x00, 0xab, 0x8c, 0xa8, 0xae, 0xf2, 0x16, 0xcc,
	0xee, 0x9d, 0x4b, 0xd8, 0xf7, 0x0c, 0x93, 0x5d, 0xa0, 0xbb, 0xe4, 0x72, 0xe0, 0xdb, 0x8c, 0xb3,
	0xd0, 0xaa, 0x93, 0x00, 0x38, 0xf0, 0xed, 0x16, 0x8b, 0x07, 0x81, 0xb5, 0x80, 0x43, 0x2d, 0xe5,
	0x28, 0xbc, 0xb8, 0x6b, 0x10, 0x5f, 0x9e, 0x8b, 0xbf, 0x49, 0xfc, 0x26, 0x31, 0x9d, 0x2b, 0xb8,
	0x2b, 0x26, 0x53, 0xae, 0xd2, 0x93, 0x3b, 0x29, 0x16, 0xd6, 0xbe, 0x0e, 0xa9, 0x36, 0xee, 0x0a,
	0x87, 0x56, 0x46, 0x38, 0x34, 0x1c, 0x44, 0x55, 0x95, 0x59, 0x3a, 0x53, 0xcd, 0xc5, 0x1b, 0x7b,
	0x56, 0x38, 0x46, 0xd9, 0xdd, 0x25, 0x17, 0x16, 0xfd, 0x41, 0xa2, 0x35, 0x1c, 0x4d, 0x00, 0xac,
	0x86, 0x8b, 0x33, 0x8d, 0x94, 0xcc, 0x34, 0x67, 0x21, 0xa5, 0x05, 0xee, 0xb8, 0x74, 0xab, 0x05,
	0x2e, 0x3a, 0x0f, 0x59, 0x1f, 0xbb, 0x5d, 0xe2, 0xb3, 0x7c, 0x34, 0x5c, 0x51, 0x68, 0xd0, 0x6b,
	0x81, 0xe7, 0x10, 0xc2, 0xab, 0x05, 0x49, 0xe5, 0x8d, 0x7d, 0xa3, 0x84, 0x96, 0xfa, 0x81, 0x65,
	0xdc, 0x0e, 0xd8, 0x59, 0xac, 0xf3, 0x52, 0x9f, 0x0b, 0xea, 0xba, 0xa2, 0x87, 0x87, 0xed, 0xf5,
	0xc0, 0x7f, 0x0a, 0x4d, 0x2a, 0x46, 0x33, 0xd9, 0x2a, 0xff, 0x90, 0x61, 0xba, 0xb1, 0xc4, 0x73,
	0xd2, 0x38, 0xce, 0xc2, 0x7b, 0x85, 0x9c, 0xb8, 0x57, 0x1c, 0x87, 0x82, 0x47, 0x34, 0x3f, 0x79,
	0x15, 0xc9, 0x53, 0x01, 0xbb, 0x88, 0x1c, 0x81, 0x4c, 0x8f, 0xf4, 0x49, 0x4f, 0x14, 0x50, 0xbc,
	0x41, 0x67, 0xd7, 0x02, 0xb7, 0x15, 0x5d, 0x47, 0x32, 0x5a, 0xe0, 0x5e, 0x1d, 0x79, 0x23, 0x11,
	0xda, 0xd1, 0xad, 0x84, 0x6a, 0xaf, 0x4e, 0x78, 0x31, 0x79, 0x13, 0x0a, 0xed, 0xa0, 0xd3, 0x69,
	0xf5, 0x0c, 0xcf, 0x2f, 0x03, 0xbb, 0x5d, 0x9c, 0x1a, 0x11, 0x8b, 0x57, 0x82, 0x4e, 0x87, 0xe5,
	0x93, 0x3c, 0x1d, 0xd1, 0x30, 0x3c, 0x7f, 0x42, 0xb2, 0x3f, 0x93, 0xb9, 0x4f, 0xd9, 0xfd, 0x63,
	0x1c, 0xdb, 0x63, 0xef, 0x80, 0x31, 0x87, 0xa9, 0xe1, 0x1c, 0xa6, 0x87, 0x73, 0x98, 0x19, 0xce,
	0x61, 0x76, 0x08, 0x87, 0xb9, 0x03, 0x70, 0x98, 0x3f, 0x28, 0x87, 0x67, 0x61, 0xa6, 0x67, 0x6b,
	0xb7, 0x5a, 0x0e, 0x0b, 0x3a, 0x8a, 0xb0, 0xc0, 0xb0, 0x4f, 0x53, 0x29, 0x8f, 0xc4, 0x89, 0xc3,
	0xfa, 0x13, 0x09, 0x8e, 0x45, 0x4c, 0x37, 0xa2, 0x79, 0x19, 0xe7, 0x27, 0x01, 0x4c, 0xde, 0x11,
	0xf3, 0x5e, 0x10, 0x12, 0xce, 0x7d, 0x6c, 0x19, 0x0f, 0xf7, 0xbc, 0x13, 0x5a, 0x75, 0x15, 0x32,
	0x9e, 0x8f, 0x7d, 0x1e, 0xee, 0x33, 0xd5, 0xea, 0x08, 0xd4, 0x43, 0x17, 0x5e, 0xb8, 0x41, 0x47,
	0xaa, 0x7c, 0x82, 0xb9, 0x93, 0x90, 0x61, 0x6d, 0x94, 0x87, 0x34, 0xd5, 0xe3, 0xf7, 0xd4, 0xb7,
	0x2d, 0x4a, 0x42, 0x49, 0x52, 0x3e, 0x92, 0x69, 0x26, 0xab, 0x11, 0xac, 0x8f, 0x8b, 0x93, 0x53,
	0x50, 0xc4, 0xec, 0x2c, 0x4e, 0x5a, 0x0b, 0xa1, 0xa8, 0xae, 0xa3, 0x97, 0x20, 0xef, 0xdd, 0x32,
	0x7a, 0xbd, 0xf8, 0xea, 0x98, 0x63, 0xed, 0xba, 0x8e, 0xbe, 0x0e, 0x19, 0xc3, 0x27, 0xa6, 0x57,
	0x4e, 0x33, 0x07, 0x9e, 0x1f, 0x01, 0x25, 0x34, 0x61, 0xa1, 0x4e, 0x95, 0xf9, 0x83, 0x09, 0x1f,
	0x88, 0x4a, 0x90, 0x6a, 0xdb, 0x9b, 0x22, 0xae, 0xe8, 0xe7, 0x84, 0x4e, 0xbb, 0x08, 0x10, 0x2f,
	0x92, 0x7c, 0x7c, 0x49, 0x0d, 0x79, 0x7c, 0x49, 0x25, 0x1f, 0x5f, 0xee, 0xb3, 0x0b, 0xd3, 0x9e,
	0xf2, 0x86, 0x11, 0xf7, 0x9c, 0xca, 0xa3, 0xc9, 0x80, 0xfd, 0x4a, 0x82, 0xe3, 0x23, 0x6a, 0x15,
	0x66, 0xe4, 0x73, 0x2e, 0x79, 0x26, 0x33, 0xf6, 0x43, 0x56, 0xda, 0xef, 0xe1, 0x02, 0x9d, 0x81,
	0x69, 0x1e, 0x56, 0x86, 0xd5, 0x8d, 0xc3, 0xb0, 0x18, 0xc9, 0xf6, 0xc4, 0x9a, 0xbc, 0x3b, 0xd6,
	0x5e, 0x86, 0xc3, 0x22, 0x28, 0xf5, 0x96, 0x38, 0x54, 0x33, 0x6c, 0x82, 0x99, 0x50, 0xdc, 0xe4,
	0x07, 0xa9, 0xc8, 0x3f, 0xd9, 0xf1, 0xaf, 0x67, 0x7f, 0x64, 0xbb, 0x7b, 0x28, 0x11, 0x13, 0x1a,
	0xfa, 0x15, 0xc8, 0x71, 0x22, 0x3d, 0xf1, 0x8a, 0x78, 0x66, 0xd4, 0xb6, 0x88, 0xa9, 0x0f, 0x47,
	0xa0, 0x25, 0xc8, 0xd0, 0x24, 0x17, 0xee, 0xa8, 0x7d, 0x53, 0x22, 0xd7, 0x56, 0x7e, 0x22, 0xd1,
	0x23, 0xb8, 0xb6, 0xcb, 0x7f, 0x11, 0x5b, 0x11, 0x82, 0x70, 0x57, 0xeb, 0x75, 0x1d, 0x2d, 0x82,
	0xac, 0xfb, 0xcc, 0xf4, 0x51, 0x65, 0x1f, 0x9f, 0x8d, 0x95, 0x7d, 0xb2, 0xee, 0xa3, 0x59, 0xc8,
	0x72, 0x23, 0x45, 0x12, 0x10, 0xad, 0x5d, 0x2b, 0x45, 0x07, 0x47, 0xb4, 0xd2, 0x55, 0x47, 0x59,
	0xa6, 0x59, 0x28, 0x34, 0x98, 0xd6, 0xc3, 0x2c, 0xef, 0x47, 0xd7, 0xc5, 0x2c, 0x6d, 0xd6, 0x75,
	0x74, 0x82, 0x9d, 0x57, 0xbe, 0x61, 0x05, 0x44, 0x17, 0xaf, 0xc6, 0xb1, 0x40, 0xf9, 0x8f, 0x0c,
	0x85, 0xa8, 0xb2, 0xa3, 0xe9, 0xd7, 0xf3, 0xb1, 0xeb, 0xc7, 0xef, 0x6a, 0x29, 0xb5, 0xc0, 0x24,
	0x2c, 0x36, 0xcf, 0xc0, 0x34, 0xf3, 0x8d, 0x48, 0xc8, 0xc2, 0x41, 0x45, 0x2a, 0x13, 0x59, 0x95,
	0x86, 0x2f, 0x53, 0x69, 0xdb, 0x9e, 0x27, 0x00, 0xe5, 0xa9, 0xe0, 0x8a, 0xcd, 0x4b, 0x73, 0xd6,
	0xc9, 0x53, 0x76, 0x08, 0x89, 0x8a, 0x78, 0x26, 0x66, 0x8f, 0x23, 0x04, 0xeb, 0x2d, 0xcd, 0x0e,
	0x2c, 0x5f, 0x24, 0xaf, 0x02, 0x95, 0x2c, 0x53, 0x01, 0xfa, 0x5a, 0x98, 0x16, 0xb3, 0xcc, 0x89,
	0xaf, 0x8c, 0xaf, 0x53, 0x87, 0x64, 0xc5, 0x2f, 0x42, 0x96, 0xdc, 0x0e, 0x0c, 0x87, 0x9e, 0xa2,
	0x74, 0x86, 0x13, 0x23, 0x66, 0x58, 0xa1, 0x4a, 0xaa, 0xd0, 0xa5, 0xd9, 0x4e, 0xc3, 0x61, 0x41,
	0x43, 0x3f, 0xa9, 0xa4, 0x47, 0x2c, 0x76, 0x36, 0xa6, 0x54, 0xfa, 0x39, 0x41, 0x7e, 0x7c, 0x03,
	0x72, 0x62, 0xc1, 0xc4, 0x73, 0x73, 0x8a, 0x3d, 0x37, 0xcf, 0x42, 0xd6, 0xb3, 0x03, 0x57, 0x0b,
	0x47, 0x89, 0xd6, 0xdc, 0x0d, 0x80, 0x38, 0x88, 0xd0, 0x34, 0xe4, 0x6b, 0x4d, 0xbe, 0xe1, 0x4a,
	0x53, 0xa8, 0x08, 0xb9, 0x5a, 0xb3, 0x66, 0xeb, 0x5d, 0x52, 0x92, 0xd0, 0x0c, 0x40, 0xad, 0xb9,
	0xec, 0x1a, 0xbe, 0xa1, 0xe1, 0x5e, 0x49, 0xe6, 0x9d, 0x6b, 0xd8, 0x75, 0x07, 0xa5, 0x14, 0x3a,
	0x04, 0x85, 0x5a, 0xf3, 0x5d, 0xec, 0xea, 0xd7, 0x3b, 0x9d, 0x52, 0x7a, 0x6e, 0x11, 0x20, 0xbe,
	0x90, 0xd0, 0x4e, 0xb5, 0x19, 0x3f, 0xd3, 0xe6, 0x21, 0xad, 0x36, 0x2f, 0xd4, 0x4a, 0x12, 0xff,
	0xaa, 0xd6, 0x4a, 0xf2, 0xf9, 0x8f, 0x24, 0x40, 0x11, 0x69, 0x2b, 0xae, 0x6b, 0xbb, 0xcb, 0xb6,
	0x4e, 0xd0, 0xab, 0x30, 0xec, 0xed, 0xa3, 0x34, 0xa5, 0xa0, 0xbb, 0x5b, 0xe5, 0x19, 0x34, 0xfd,
	0xf7, 0x0f, 0x7e, 0xf6, 0xe4, 0xb7, 0x3f, 0xda, 0xf9, 0xe0, 0xde, 0x93, 0x0f, 0xbf, 0x87, 0xbe,
	0x0c, 0x23, 0xee, 0xe0, 0x25, 0x49, 0x39, 0x7e, 0x77, 0xab, 0x7c, 0x0c, 0x1d, 0xfd, 0xec, 0xfd,
	0x5f, 0xee, 0xfc, 0xfa, 0x77, 0x7f, 0xfd, 0xfd, 0x0f, 0x76, 0xee, 0x3f, 0x78, 0xf2, 0xf1, 0x2f,
	0x76, 0xee, 0xff, 0x66, 0xe7, 0xa7, 0x9f, 0xa0, 0x45, 0x18, 0xfa, 0x3c, 0x57, 0x92, 0x95, 0xa3,
	0x77, 0xb7, 0xca, 0x2f, 0xa0, 0xc3, 0x5c, 0x8f, 0x0e, 0xfb, 0xf8, 0xc7, 0x3b, 0xf7, 0x1f, 0x5c,
	0x59, 0x7b, 0xf4, 0x97, 0xca, 0xd4, 0x83, 0xed, 0x8a, 0xf4, 0xe9, 0x76, 0x45, 0x7a, 0xb8, 0x5d,
	0x91, 0xfe, 0xbc, 0x5d, 0x91, 0xfe, 0xb6, 0x5d, 0x99, 0xfa, 0xd7, 0x76, 0x45, 0xba, 0xf7, 0xb8,
	0x32, 0xf5, 0xe9, 0xe3, 0x8a, 0xf4, 0xf0, 0x71, 0x65, 0xea, 0xd1, 0xe3, 0xca, 0xd4, 0xb7, 0xe7,
	0x34, 0xdb, 0xb0, 0xe6, 0x79, 0x5a, 0x5e, 0xd4, 0x6c, 0xd3, 0xb4, 0xad, 0xc5, 0xe8, 0x4f, 0x11,
	0x0f, 0x98, 0x76, 0x96, 0x09, 0x2e, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x6c, 0x16, 0x76,
	0x43, 0x1a, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVector2.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVisual.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVisual_Enter.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVisual_Leave.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVisual_CreateMap.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVisual_Move.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVisual_Object.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVisual_Objects.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5TimePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5KeepAlive.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5EnterMapRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5EnterMapResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5EnterPveMapRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5EnterPveMapResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5MoveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5MoveResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5TeleportRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5TeleportResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5StopMoveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5StopMoveResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5LeaveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5LeaveResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5AttackRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5AttackResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5DamageRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5DamageResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5ChangeRenderRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5ChangeRenderResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5AutoFightRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5AutoFightResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5GetTempBagRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5GetTempBagResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5DrawTempBagRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5DrawTempBagResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5MovePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5MoveOutPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5PlayerPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5MonsterPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5MonsterLockPlayerPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5DeadPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5NormalFightInfoPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5NormalFightDamageInfoPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5NormalFightInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5NormalFightDamageInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5DamageInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5BuffInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5TempBag.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewBattle_L5Equip.Get().(proto.Message)
	})
}

var poolVector2 = &sync.Pool{New: func() interface{} { return &Vector2{} }}

func (m *Vector2) ReleasePool() { m.Reset(); poolVector2.Put(m); m = nil }

var poolVisual = &sync.Pool{New: func() interface{} { return &Visual{} }}

func (m *Visual) ReleasePool() { m.Reset(); poolVisual.Put(m); m = nil }

var poolVisual_Enter = &sync.Pool{New: func() interface{} { return &Visual_Enter{} }}

func (m *Visual_Enter) ReleasePool() { m.Reset(); poolVisual_Enter.Put(m); m = nil }

var poolVisual_Leave = &sync.Pool{New: func() interface{} { return &Visual_Leave{} }}

func (m *Visual_Leave) ReleasePool() { m.Reset(); poolVisual_Leave.Put(m); m = nil }

var poolVisual_CreateMap = &sync.Pool{New: func() interface{} { return &Visual_CreateMap{} }}

func (m *Visual_CreateMap) ReleasePool() { m.Reset(); poolVisual_CreateMap.Put(m); m = nil }

var poolVisual_Move = &sync.Pool{New: func() interface{} { return &Visual_Move{} }}

func (m *Visual_Move) ReleasePool() { m.Reset(); poolVisual_Move.Put(m); m = nil }

var poolVisual_Object = &sync.Pool{New: func() interface{} { return &Visual_Object{} }}

func (m *Visual_Object) ReleasePool() { m.Reset(); poolVisual_Object.Put(m); m = nil }

var poolVisual_Objects = &sync.Pool{New: func() interface{} { return &Visual_Objects{} }}

func (m *Visual_Objects) ReleasePool() { m.Reset(); poolVisual_Objects.Put(m); m = nil }

var poolNewBattle = &sync.Pool{New: func() interface{} { return &NewBattle{} }}

func (m *NewBattle) ReleasePool() { m.Reset(); poolNewBattle.Put(m); m = nil }

var poolNewBattle_L5TimePush = &sync.Pool{New: func() interface{} { return &NewBattle_L5TimePush{} }}

func (m *NewBattle_L5TimePush) ReleasePool() { m.Reset(); poolNewBattle_L5TimePush.Put(m); m = nil }

var poolNewBattle_L5KeepAlive = &sync.Pool{New: func() interface{} { return &NewBattle_L5KeepAlive{} }}

func (m *NewBattle_L5KeepAlive) ReleasePool() { m.Reset(); poolNewBattle_L5KeepAlive.Put(m); m = nil }

var poolNewBattle_L5EnterMapRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5EnterMapRequest{} }}

func (m *NewBattle_L5EnterMapRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5EnterMapRequest.Put(m)
	m = nil
}

var poolNewBattle_L5EnterMapResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5EnterMapResponse{} }}

func (m *NewBattle_L5EnterMapResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5EnterMapResponse.Put(m)
	m = nil
}

var poolNewBattle_L5EnterPveMapRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5EnterPveMapRequest{} }}

func (m *NewBattle_L5EnterPveMapRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5EnterPveMapRequest.Put(m)
	m = nil
}

var poolNewBattle_L5EnterPveMapResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5EnterPveMapResponse{} }}

func (m *NewBattle_L5EnterPveMapResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5EnterPveMapResponse.Put(m)
	m = nil
}

var poolNewBattle_L5MoveRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5MoveRequest{} }}

func (m *NewBattle_L5MoveRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5MoveRequest.Put(m)
	m = nil
}

var poolNewBattle_L5MoveResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5MoveResponse{} }}

func (m *NewBattle_L5MoveResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5MoveResponse.Put(m)
	m = nil
}

var poolNewBattle_L5TeleportRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5TeleportRequest{} }}

func (m *NewBattle_L5TeleportRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5TeleportRequest.Put(m)
	m = nil
}

var poolNewBattle_L5TeleportResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5TeleportResponse{} }}

func (m *NewBattle_L5TeleportResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5TeleportResponse.Put(m)
	m = nil
}

var poolNewBattle_L5StopMoveRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5StopMoveRequest{} }}

func (m *NewBattle_L5StopMoveRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5StopMoveRequest.Put(m)
	m = nil
}

var poolNewBattle_L5StopMoveResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5StopMoveResponse{} }}

func (m *NewBattle_L5StopMoveResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5StopMoveResponse.Put(m)
	m = nil
}

var poolNewBattle_L5LeaveRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5LeaveRequest{} }}

func (m *NewBattle_L5LeaveRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5LeaveRequest.Put(m)
	m = nil
}

var poolNewBattle_L5LeaveResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5LeaveResponse{} }}

func (m *NewBattle_L5LeaveResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5LeaveResponse.Put(m)
	m = nil
}

var poolNewBattle_L5AttackRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5AttackRequest{} }}

func (m *NewBattle_L5AttackRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5AttackRequest.Put(m)
	m = nil
}

var poolNewBattle_L5AttackResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5AttackResponse{} }}

func (m *NewBattle_L5AttackResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5AttackResponse.Put(m)
	m = nil
}

var poolNewBattle_L5DamageRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5DamageRequest{} }}

func (m *NewBattle_L5DamageRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5DamageRequest.Put(m)
	m = nil
}

var poolNewBattle_L5DamageResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5DamageResponse{} }}

func (m *NewBattle_L5DamageResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5DamageResponse.Put(m)
	m = nil
}

var poolNewBattle_L5ChangeRenderRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5ChangeRenderRequest{} }}

func (m *NewBattle_L5ChangeRenderRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5ChangeRenderRequest.Put(m)
	m = nil
}

var poolNewBattle_L5ChangeRenderResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5ChangeRenderResponse{} }}

func (m *NewBattle_L5ChangeRenderResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5ChangeRenderResponse.Put(m)
	m = nil
}

var poolNewBattle_L5AutoFightRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5AutoFightRequest{} }}

func (m *NewBattle_L5AutoFightRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5AutoFightRequest.Put(m)
	m = nil
}

var poolNewBattle_L5AutoFightResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5AutoFightResponse{} }}

func (m *NewBattle_L5AutoFightResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5AutoFightResponse.Put(m)
	m = nil
}

var poolNewBattle_L5GetTempBagRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5GetTempBagRequest{} }}

func (m *NewBattle_L5GetTempBagRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5GetTempBagRequest.Put(m)
	m = nil
}

var poolNewBattle_L5GetTempBagResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5GetTempBagResponse{} }}

func (m *NewBattle_L5GetTempBagResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5GetTempBagResponse.Put(m)
	m = nil
}

var poolNewBattle_L5DrawTempBagRequest = &sync.Pool{New: func() interface{} { return &NewBattle_L5DrawTempBagRequest{} }}

func (m *NewBattle_L5DrawTempBagRequest) ReleasePool() {
	m.Reset()
	poolNewBattle_L5DrawTempBagRequest.Put(m)
	m = nil
}

var poolNewBattle_L5DrawTempBagResponse = &sync.Pool{New: func() interface{} { return &NewBattle_L5DrawTempBagResponse{} }}

func (m *NewBattle_L5DrawTempBagResponse) ReleasePool() {
	m.Reset()
	poolNewBattle_L5DrawTempBagResponse.Put(m)
	m = nil
}

var poolNewBattle_L5MovePush = &sync.Pool{New: func() interface{} { return &NewBattle_L5MovePush{} }}

func (m *NewBattle_L5MovePush) ReleasePool() { m.Reset(); poolNewBattle_L5MovePush.Put(m); m = nil }

var poolNewBattle_L5MoveOutPush = &sync.Pool{New: func() interface{} { return &NewBattle_L5MoveOutPush{} }}

func (m *NewBattle_L5MoveOutPush) ReleasePool() {
	m.Reset()
	poolNewBattle_L5MoveOutPush.Put(m)
	m = nil
}

var poolNewBattle_L5PlayerPush = &sync.Pool{New: func() interface{} { return &NewBattle_L5PlayerPush{} }}

func (m *NewBattle_L5PlayerPush) ReleasePool() { m.Reset(); poolNewBattle_L5PlayerPush.Put(m); m = nil }

var poolNewBattle_L5MonsterPush = &sync.Pool{New: func() interface{} { return &NewBattle_L5MonsterPush{} }}

func (m *NewBattle_L5MonsterPush) ReleasePool() {
	m.Reset()
	poolNewBattle_L5MonsterPush.Put(m)
	m = nil
}

var poolNewBattle_L5MonsterLockPlayerPush = &sync.Pool{New: func() interface{} { return &NewBattle_L5MonsterLockPlayerPush{} }}

func (m *NewBattle_L5MonsterLockPlayerPush) ReleasePool() {
	m.Reset()
	poolNewBattle_L5MonsterLockPlayerPush.Put(m)
	m = nil
}

var poolNewBattle_L5DeadPush = &sync.Pool{New: func() interface{} { return &NewBattle_L5DeadPush{} }}

func (m *NewBattle_L5DeadPush) ReleasePool() { m.Reset(); poolNewBattle_L5DeadPush.Put(m); m = nil }

var poolNewBattle_L5NormalFightInfoPush = &sync.Pool{New: func() interface{} { return &NewBattle_L5NormalFightInfoPush{} }}

func (m *NewBattle_L5NormalFightInfoPush) ReleasePool() {
	m.Reset()
	poolNewBattle_L5NormalFightInfoPush.Put(m)
	m = nil
}

var poolNewBattle_L5NormalFightDamageInfoPush = &sync.Pool{New: func() interface{} { return &NewBattle_L5NormalFightDamageInfoPush{} }}

func (m *NewBattle_L5NormalFightDamageInfoPush) ReleasePool() {
	m.Reset()
	poolNewBattle_L5NormalFightDamageInfoPush.Put(m)
	m = nil
}

var poolNewBattle_L5NormalFightInfo = &sync.Pool{New: func() interface{} { return &NewBattle_L5NormalFightInfo{} }}

func (m *NewBattle_L5NormalFightInfo) ReleasePool() {
	m.Reset()
	poolNewBattle_L5NormalFightInfo.Put(m)
	m = nil
}

var poolNewBattle_L5NormalFightDamageInfo = &sync.Pool{New: func() interface{} { return &NewBattle_L5NormalFightDamageInfo{} }}

func (m *NewBattle_L5NormalFightDamageInfo) ReleasePool() {
	m.Reset()
	poolNewBattle_L5NormalFightDamageInfo.Put(m)
	m = nil
}

var poolNewBattle_L5DamageInfo = &sync.Pool{New: func() interface{} { return &NewBattle_L5DamageInfo{} }}

func (m *NewBattle_L5DamageInfo) ReleasePool() { m.Reset(); poolNewBattle_L5DamageInfo.Put(m); m = nil }

var poolNewBattle_L5BuffInfo = &sync.Pool{New: func() interface{} { return &NewBattle_L5BuffInfo{} }}

func (m *NewBattle_L5BuffInfo) ReleasePool() { m.Reset(); poolNewBattle_L5BuffInfo.Put(m); m = nil }

var poolNewBattle_L5TempBag = &sync.Pool{New: func() interface{} { return &NewBattle_L5TempBag{} }}

func (m *NewBattle_L5TempBag) ReleasePool() { m.Reset(); poolNewBattle_L5TempBag.Put(m); m = nil }

var poolNewBattle_L5Equip = &sync.Pool{New: func() interface{} { return &NewBattle_L5Equip{} }}

func (m *NewBattle_L5Equip) ReleasePool() { m.Reset(); poolNewBattle_L5Equip.Put(m); m = nil }
func (x NewBattleErrorCode) String() string {
	s, ok := NewBattleErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Visual_ObjectType) String() string {
	s, ok := Visual_ObjectType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NewBattle_DamageType) String() string {
	s, ok := NewBattle_DamageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NewBattle_RenderType) String() string {
	s, ok := NewBattle_RenderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NewBattle_L5MonsterLockPlayerPush_State) String() string {
	s, ok := NewBattle_L5MonsterLockPlayerPush_State_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Vector2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vector2)
	if !ok {
		that2, ok := that.(Vector2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *Visual) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Visual)
	if !ok {
		that2, ok := that.(Visual)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Visual_Enter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Visual_Enter)
	if !ok {
		that2, ok := that.(Visual_Enter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *Visual_Leave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Visual_Leave)
	if !ok {
		that2, ok := that.(Visual_Leave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Visual_CreateMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Visual_CreateMap)
	if !ok {
		that2, ok := that.(Visual_CreateMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MapSize.Equal(that1.MapSize) {
		return false
	}
	if !this.GridSize.Equal(that1.GridSize) {
		return false
	}
	if len(this.CanMove) != len(that1.CanMove) {
		return false
	}
	for i := range this.CanMove {
		if this.CanMove[i] != that1.CanMove[i] {
			return false
		}
	}
	return true
}
func (this *Visual_Move) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Visual_Move)
	if !ok {
		that2, ok := that.(Visual_Move)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	return true
}
func (this *Visual_Object) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Visual_Object)
	if !ok {
		that2, ok := that.(Visual_Object)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.ConfigName != that1.ConfigName {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Hp != that1.Hp {
		return false
	}
	if this.MaxHp != that1.MaxHp {
		return false
	}
	if this.Mp != that1.Mp {
		return false
	}
	if this.MaxMp != that1.MaxMp {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Visual_Objects) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Visual_Objects)
	if !ok {
		that2, ok := that.(Visual_Objects)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Objects) != len(that1.Objects) {
		return false
	}
	for i := range this.Objects {
		if !this.Objects[i].Equal(that1.Objects[i]) {
			return false
		}
	}
	return true
}
func (this *NewBattle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle)
	if !ok {
		that2, ok := that.(NewBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewBattle_L5TimePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5TimePush)
	if !ok {
		that2, ok := that.(NewBattle_L5TimePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *NewBattle_L5KeepAlive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5KeepAlive)
	if !ok {
		that2, ok := that.(NewBattle_L5KeepAlive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewBattle_L5EnterMapRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5EnterMapRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5EnterMapRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if !this.Role.Equal(that1.Role) {
		return false
	}
	return true
}
func (this *NewBattle_L5EnterMapResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5EnterMapResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5EnterMapResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *NewBattle_L5EnterPveMapRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5EnterPveMapRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5EnterPveMapRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	if this.PveId != that1.PveId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if !this.Role.Equal(that1.Role) {
		return false
	}
	return true
}
func (this *NewBattle_L5EnterPveMapResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5EnterPveMapResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5EnterPveMapResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	if this.PveId != that1.PveId {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *NewBattle_L5MoveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5MoveRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5MoveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.CurrPos.Equal(that1.CurrPos) {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.IsPve != that1.IsPve {
		return false
	}
	return true
}
func (this *NewBattle_L5MoveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5MoveResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5MoveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *NewBattle_L5TeleportRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5TeleportRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5TeleportRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	return true
}
func (this *NewBattle_L5TeleportResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5TeleportResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5TeleportResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *NewBattle_L5StopMoveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5StopMoveRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5StopMoveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.IsPve != that1.IsPve {
		return false
	}
	return true
}
func (this *NewBattle_L5StopMoveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5StopMoveResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5StopMoveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *NewBattle_L5LeaveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5LeaveRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5LeaveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsPve != that1.IsPve {
		return false
	}
	return true
}
func (this *NewBattle_L5LeaveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5LeaveResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5LeaveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *NewBattle_L5AttackRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5AttackRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5AttackRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FightInfo.Equal(that1.FightInfo) {
		return false
	}
	if this.IsPve != that1.IsPve {
		return false
	}
	return true
}
func (this *NewBattle_L5AttackResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5AttackResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5AttackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsPass != that1.IsPass {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *NewBattle_L5DamageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5DamageRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5DamageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DamageInfo.Equal(that1.DamageInfo) {
		return false
	}
	if this.IsPve != that1.IsPve {
		return false
	}
	return true
}
func (this *NewBattle_L5DamageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5DamageResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5DamageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsPass != that1.IsPass {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *NewBattle_L5ChangeRenderRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5ChangeRenderRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5ChangeRenderRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *NewBattle_L5ChangeRenderResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5ChangeRenderResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5ChangeRenderResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *NewBattle_L5AutoFightRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5AutoFightRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5AutoFightRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AutoFight != that1.AutoFight {
		return false
	}
	return true
}
func (this *NewBattle_L5AutoFightResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5AutoFightResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5AutoFightResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewBattle_L5GetTempBagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5GetTempBagRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5GetTempBagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewBattle_L5GetTempBagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5GetTempBagResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5GetTempBagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bag.Equal(that1.Bag) {
		return false
	}
	return true
}
func (this *NewBattle_L5DrawTempBagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5DrawTempBagRequest)
	if !ok {
		that2, ok := that.(NewBattle_L5DrawTempBagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewBattle_L5DrawTempBagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5DrawTempBagResponse)
	if !ok {
		that2, ok := that.(NewBattle_L5DrawTempBagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewBattle_L5MovePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5MovePush)
	if !ok {
		that2, ok := that.(NewBattle_L5MovePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Cur.Equal(that1.Cur) {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *NewBattle_L5MoveOutPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5MoveOutPush)
	if !ok {
		that2, ok := that.(NewBattle_L5MoveOutPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ObjId) != len(that1.ObjId) {
		return false
	}
	for i := range this.ObjId {
		if this.ObjId[i] != that1.ObjId[i] {
			return false
		}
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *NewBattle_L5PlayerPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5PlayerPush)
	if !ok {
		that2, ok := that.(NewBattle_L5PlayerPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.SectName != that1.SectName {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.CurHp != that1.CurHp {
		return false
	}
	if this.MaxHp != that1.MaxHp {
		return false
	}
	if this.CurMp != that1.CurMp {
		return false
	}
	if this.MaxMp != that1.MaxMp {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if len(this.BuffList) != len(that1.BuffList) {
		return false
	}
	for i := range this.BuffList {
		if !this.BuffList[i].Equal(that1.BuffList[i]) {
			return false
		}
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *NewBattle_L5MonsterPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5MonsterPush)
	if !ok {
		that2, ok := that.(NewBattle_L5MonsterPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.CurHp != that1.CurHp {
		return false
	}
	if this.MaxHp != that1.MaxHp {
		return false
	}
	if this.CurMp != that1.CurMp {
		return false
	}
	if this.MaxMp != that1.MaxMp {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if len(this.BuffList) != len(that1.BuffList) {
		return false
	}
	for i := range this.BuffList {
		if !this.BuffList[i].Equal(that1.BuffList[i]) {
			return false
		}
	}
	if this.LockPlayerId != that1.LockPlayerId {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *NewBattle_L5MonsterLockPlayerPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5MonsterLockPlayerPush)
	if !ok {
		that2, ok := that.(NewBattle_L5MonsterLockPlayerPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MonsterId != that1.MonsterId {
		return false
	}
	if this.PlayerId != that1.PlayerId {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *NewBattle_L5DeadPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5DeadPush)
	if !ok {
		that2, ok := that.(NewBattle_L5DeadPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.AttackerId != that1.AttackerId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	if this.Box != that1.Box {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *NewBattle_L5NormalFightInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5NormalFightInfoPush)
	if !ok {
		that2, ok := that.(NewBattle_L5NormalFightInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FightInfo.Equal(that1.FightInfo) {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *NewBattle_L5NormalFightDamageInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5NormalFightDamageInfoPush)
	if !ok {
		that2, ok := that.(NewBattle_L5NormalFightDamageInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DamageInfo.Equal(that1.DamageInfo) {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	return true
}
func (this *NewBattle_L5NormalFightInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5NormalFightInfo)
	if !ok {
		that2, ok := that.(NewBattle_L5NormalFightInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackingId != that1.AttackingId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.AttackedTarget != that1.AttackedTarget {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	return true
}
func (this *NewBattle_L5NormalFightDamageInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5NormalFightDamageInfo)
	if !ok {
		that2, ok := that.(NewBattle_L5NormalFightDamageInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackingId != that1.AttackingId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if len(this.Damages) != len(that1.Damages) {
		return false
	}
	for i := range this.Damages {
		if !this.Damages[i].Equal(that1.Damages[i]) {
			return false
		}
	}
	if len(this.Buffs) != len(that1.Buffs) {
		return false
	}
	for i := range this.Buffs {
		if !this.Buffs[i].Equal(that1.Buffs[i]) {
			return false
		}
	}
	return true
}
func (this *NewBattle_L5DamageInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5DamageInfo)
	if !ok {
		that2, ok := that.(NewBattle_L5DamageInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackedId != that1.AttackedId {
		return false
	}
	if this.Dt != that1.Dt {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if this.AttackedHp != that1.AttackedHp {
		return false
	}
	return true
}
func (this *NewBattle_L5BuffInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5BuffInfo)
	if !ok {
		that2, ok := that.(NewBattle_L5BuffInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BuffId != that1.BuffId {
		return false
	}
	if this.Continued != that1.Continued {
		return false
	}
	return true
}
func (this *NewBattle_L5TempBag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5TempBag)
	if !ok {
		that2, ok := that.(NewBattle_L5TempBag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.KillMonster != that1.KillMonster {
		return false
	}
	if this.KillBoss != that1.KillBoss {
		return false
	}
	if this.KillPlayer != that1.KillPlayer {
		return false
	}
	if this.DeadCount != that1.DeadCount {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	if len(this.Equips) != len(that1.Equips) {
		return false
	}
	for i := range this.Equips {
		if !this.Equips[i].Equal(that1.Equips[i]) {
			return false
		}
	}
	if this.Cap != that1.Cap {
		return false
	}
	if this.Len != that1.Len {
		return false
	}
	return true
}
func (this *NewBattle_L5Equip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewBattle_L5Equip)
	if !ok {
		that2, ok := that.(NewBattle_L5Equip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	return true
}
func (m *Vector2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i--
		dAtA[i] = 0x11
	}
	if m.X != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Visual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Visual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Visual_Enter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visual_Enter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Visual_Enter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Visual_Leave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visual_Leave) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Visual_Leave) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Visual_CreateMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visual_CreateMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Visual_CreateMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CanMove) > 0 {
		for k := range m.CanMove {
			v := m.CanMove[k]
			baseI := i
			i = encodeVarintNewBattle(dAtA, i, uint64((uint64(v)<<1)^uint64((v>>63))))
			i--
			dAtA[i] = 0x10
			i = encodeVarintNewBattle(dAtA, i, uint64((uint64(k)<<1)^uint64((k>>63))))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNewBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.GridSize != nil {
		{
			size, err := m.GridSize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MapSize != nil {
		{
			size, err := m.MapSize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Visual_Move) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visual_Move) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Visual_Move) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Visual_Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visual_Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Visual_Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x50
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.MaxMp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MaxMp))
		i--
		dAtA[i] = 0x40
	}
	if m.Mp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Mp))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxHp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MaxHp))
		i--
		dAtA[i] = 0x30
	}
	if m.Hp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Hp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConfigName) > 0 {
		i -= len(m.ConfigName)
		copy(dAtA[i:], m.ConfigName)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.ConfigName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ConfigId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Visual_Objects) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visual_Objects) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Visual_Objects) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for iNdEx := len(m.Objects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Objects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNewBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5TimePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5TimePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5TimePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5KeepAlive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5KeepAlive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5KeepAlive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5EnterMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5EnterMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5EnterMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BattleServerId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.MapId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5EnterMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5EnterMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5EnterMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.MapId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5EnterPveMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5EnterPveMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5EnterPveMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BattleServerId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PveId) > 0 {
		i -= len(m.PveId)
		copy(dAtA[i:], m.PveId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.PveId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DungeonId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5EnterPveMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5EnterPveMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5EnterPveMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if len(m.PveId) > 0 {
		i -= len(m.PveId)
		copy(dAtA[i:], m.PveId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.PveId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DungeonId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5MoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5MoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5MoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPve {
		i--
		if m.IsPve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrPos != nil {
		{
			size, err := m.CurrPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5MoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5MoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5MoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5TeleportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5TeleportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5TeleportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MapId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5TeleportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5TeleportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5TeleportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.MapId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5StopMoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5StopMoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5StopMoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPve {
		i--
		if m.IsPve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5StopMoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5StopMoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5StopMoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5LeaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5LeaveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5LeaveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPve {
		i--
		if m.IsPve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5LeaveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5LeaveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5LeaveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5AttackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5AttackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5AttackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPve {
		i--
		if m.IsPve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.FightInfo != nil {
		{
			size, err := m.FightInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5AttackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5AttackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5AttackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.IsPass {
		i--
		if m.IsPass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5DamageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5DamageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5DamageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPve {
		i--
		if m.IsPve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.DamageInfo != nil {
		{
			size, err := m.DamageInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5DamageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5DamageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5DamageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.IsPass {
		i--
		if m.IsPass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5ChangeRenderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5ChangeRenderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5ChangeRenderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5ChangeRenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5ChangeRenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5ChangeRenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5AutoFightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5AutoFightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5AutoFightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoFight {
		i--
		if m.AutoFight {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5AutoFightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5AutoFightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5AutoFightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5GetTempBagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5GetTempBagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5GetTempBagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5GetTempBagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5GetTempBagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5GetTempBagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bag != nil {
		{
			size, err := m.Bag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5DrawTempBagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5DrawTempBagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5DrawTempBagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5DrawTempBagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5DrawTempBagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5DrawTempBagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5MovePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5MovePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5MovePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.Speed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Speed))))
		i--
		dAtA[i] = 0x21
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cur != nil {
		{
			size, err := m.Cur.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5MoveOutPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5MoveOutPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5MoveOutPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if len(m.ObjId) > 0 {
		for iNdEx := len(m.ObjId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObjId[iNdEx])
			copy(dAtA[i:], m.ObjId[iNdEx])
			i = encodeVarintNewBattle(dAtA, i, uint64(len(m.ObjId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5PlayerPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5PlayerPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5PlayerPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if len(m.BuffList) > 0 {
		for iNdEx := len(m.BuffList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuffList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNewBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.MaxMp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MaxMp))
		i--
		dAtA[i] = 0x40
	}
	if m.CurMp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.CurMp))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxHp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MaxHp))
		i--
		dAtA[i] = 0x30
	}
	if m.CurHp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.CurHp))
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SectName) > 0 {
		i -= len(m.SectName)
		copy(dAtA[i:], m.SectName)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.SectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5MonsterPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5MonsterPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5MonsterPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if len(m.LockPlayerId) > 0 {
		i -= len(m.LockPlayerId)
		copy(dAtA[i:], m.LockPlayerId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.LockPlayerId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BuffList) > 0 {
		for iNdEx := len(m.BuffList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuffList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNewBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.MaxMp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MaxMp))
		i--
		dAtA[i] = 0x30
	}
	if m.CurMp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.CurMp))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxHp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.MaxHp))
		i--
		dAtA[i] = 0x20
	}
	if m.CurHp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.CurHp))
		i--
		dAtA[i] = 0x18
	}
	if m.ConfigId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5MonsterLockPlayerPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5MonsterLockPlayerPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5MonsterLockPlayerPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MonsterId) > 0 {
		i -= len(m.MonsterId)
		copy(dAtA[i:], m.MonsterId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.MonsterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5DeadPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5DeadPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5DeadPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.Box != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Box))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintNewBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintNewBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNewBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SkillId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AttackerId) > 0 {
		i -= len(m.AttackerId)
		copy(dAtA[i:], m.AttackerId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.AttackerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5NormalFightInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5NormalFightInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5NormalFightInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.FightInfo != nil {
		{
			size, err := m.FightInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5NormalFightDamageInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5NormalFightDamageInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5NormalFightDamageInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniqueId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.UniqueId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.DamageInfo != nil {
		{
			size, err := m.DamageInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5NormalFightInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5NormalFightInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5NormalFightInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNewBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.AttackedTarget) > 0 {
		i -= len(m.AttackedTarget)
		copy(dAtA[i:], m.AttackedTarget)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.AttackedTarget)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SkillId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttackingId) > 0 {
		i -= len(m.AttackingId)
		copy(dAtA[i:], m.AttackingId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.AttackingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5NormalFightDamageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5NormalFightDamageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5NormalFightDamageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buffs) > 0 {
		for iNdEx := len(m.Buffs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buffs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNewBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Damages) > 0 {
		for iNdEx := len(m.Damages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Damages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNewBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SkillId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttackingId) > 0 {
		i -= len(m.AttackingId)
		copy(dAtA[i:], m.AttackingId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.AttackingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5DamageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5DamageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5DamageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttackedHp != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.AttackedHp))
		i--
		dAtA[i] = 0x20
	}
	if m.Damage != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x18
	}
	if m.Dt != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Dt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttackedId) > 0 {
		i -= len(m.AttackedId)
		copy(dAtA[i:], m.AttackedId)
		i = encodeVarintNewBattle(dAtA, i, uint64(len(m.AttackedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5BuffInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5BuffInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5BuffInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Continued != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Continued))))
		i--
		dAtA[i] = 0x11
	}
	if m.BuffId != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.BuffId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5TempBag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5TempBag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5TempBag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Len != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x48
	}
	if m.Cap != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Cap))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Equips) > 0 {
		for iNdEx := len(m.Equips) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equips[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNewBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintNewBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintNewBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNewBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DeadCount != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.DeadCount))
		i--
		dAtA[i] = 0x28
	}
	if m.KillPlayer != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.KillPlayer))
		i--
		dAtA[i] = 0x20
	}
	if m.KillBoss != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.KillBoss))
		i--
		dAtA[i] = 0x18
	}
	if m.KillMonster != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.KillMonster))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewBattle_L5Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewBattle_L5Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewBattle_L5Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintNewBattle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNewBattle(dAtA []byte, offset int, v uint64) int {
	offset -= sovNewBattle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Vector2) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.X)) > 0.000001 {
		w.RawByte('"')
		w.RawString("x")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.X))
		needWriteComma = true
	}
	if math.Abs(float64(m.Y)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("y")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Y))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Visual) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Visual_Enter) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != "" {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.MapId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Visual_Leave) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Visual_CreateMap) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("map_size")
	w.RawByte('"')
	w.RawByte(':')
	m.MapSize.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("grid_size")
	w.RawByte('"')
	w.RawByte(':')
	m.GridSize.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("can_move")
	w.RawByte('"')
	w.RawByte(':')
	if m.CanMove == nil {
		w.RawString("null")
	} else if len(m.CanMove) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCanMove := len(m.CanMove)
		for k, v := range m.CanMove {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCanMove--
			if mlCanMove != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Visual_Move) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Visual_Object) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.ConfigName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ConfigName)
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.Hp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Hp))
		needWriteComma = true
	}
	if m.MaxHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxHp))
		needWriteComma = true
	}
	if m.Mp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("mp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Mp))
		needWriteComma = true
	}
	if m.MaxMp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_mp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxMp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Visual_Objects) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("objects")
	w.RawByte('"')
	w.RawByte(':')
	if m.Objects == nil {
		w.RawString("null")
	} else if len(m.Objects) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Objects {
			v.JsonBytes(w)
			if i != len(m.Objects)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NewBattle_L5TimePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5KeepAlive) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NewBattle_L5EnterMapRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	m.Role.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5EnterMapResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5EnterPveMapRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.DungeonId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	if m.PveId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pve_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.PveId)
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	m.Role.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5EnterPveMapResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.DungeonId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	if m.PveId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pve_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.PveId)
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5MoveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("curr_pos")
	w.RawByte('"')
	w.RawByte(':')
	m.CurrPos.JsonBytes(w)
	needWriteComma = true
	if m.ObjId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.IsPve {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_pve")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPve)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5MoveResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5TeleportRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5TeleportResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5StopMoveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.ObjId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.IsPve {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_pve")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPve)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5StopMoveResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5LeaveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsPve {
		w.RawByte('"')
		w.RawString("is_pve")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPve)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5LeaveResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5AttackRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("fight_info")
	w.RawByte('"')
	w.RawByte(':')
	m.FightInfo.JsonBytes(w)
	needWriteComma = true
	if m.IsPve {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_pve")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPve)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5AttackResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsPass {
		w.RawByte('"')
		w.RawString("is_pass")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPass)
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5DamageRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("damage_info")
	w.RawByte('"')
	w.RawByte(':')
	m.DamageInfo.JsonBytes(w)
	needWriteComma = true
	if m.IsPve {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_pve")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPve)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5DamageResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsPass {
		w.RawByte('"')
		w.RawString("is_pass")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPass)
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5ChangeRenderRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5ChangeRenderResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5AutoFightRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AutoFight {
		w.RawByte('"')
		w.RawString("auto_fight")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.AutoFight)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5AutoFightResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NewBattle_L5GetTempBagRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NewBattle_L5GetTempBagResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("bag")
	w.RawByte('"')
	w.RawByte(':')
	m.Bag.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5DrawTempBagRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NewBattle_L5DrawTempBagResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NewBattle_L5MovePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("cur")
	w.RawByte('"')
	w.RawByte(':')
	m.Cur.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("target")
	w.RawByte('"')
	w.RawByte(':')
	m.Target.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5MoveOutPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("obj_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.ObjId == nil {
		w.RawString("null")
	} else if len(m.ObjId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ObjId {
			w.String(v)
			if i != len(m.ObjId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5PlayerPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.SectName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sect_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SectName)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.CurHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurHp))
		needWriteComma = true
	}
	if m.MaxHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxHp))
		needWriteComma = true
	}
	if m.CurMp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_mp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurMp))
		needWriteComma = true
	}
	if m.MaxMp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_mp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxMp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffList == nil {
		w.RawString("null")
	} else if len(m.BuffList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BuffList {
			v.JsonBytes(w)
			if i != len(m.BuffList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5MonsterPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.CurHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurHp))
		needWriteComma = true
	}
	if m.MaxHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxHp))
		needWriteComma = true
	}
	if m.CurMp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_mp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurMp))
		needWriteComma = true
	}
	if m.MaxMp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_mp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxMp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffList == nil {
		w.RawString("null")
	} else if len(m.BuffList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BuffList {
			v.JsonBytes(w)
			if i != len(m.BuffList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.LockPlayerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lock_player_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.LockPlayerId)
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5MonsterLockPlayerPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MonsterId != "" {
		w.RawByte('"')
		w.RawString("monster_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.MonsterId)
		needWriteComma = true
	}
	if m.PlayerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("player_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.PlayerId)
		needWriteComma = true
	}
	if m.State != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("state")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.State))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5DeadPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.AttackerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Box != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("box")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Box))
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5NormalFightInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("fight_info")
	w.RawByte('"')
	w.RawByte(':')
	m.FightInfo.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5NormalFightDamageInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("damage_info")
	w.RawByte('"')
	w.RawByte(':')
	m.DamageInfo.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	if m.UniqueId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UniqueId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5NormalFightInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackingId != "" {
		w.RawByte('"')
		w.RawString("attacking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackingId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.AttackedTarget != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacked_target")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackedTarget)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5NormalFightDamageInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackingId != "" {
		w.RawByte('"')
		w.RawString("attacking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackingId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("damages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Damages == nil {
		w.RawString("null")
	} else if len(m.Damages) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Damages {
			v.JsonBytes(w)
			if i != len(m.Damages)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buffs")
	w.RawByte('"')
	w.RawByte(':')
	if m.Buffs == nil {
		w.RawString("null")
	} else if len(m.Buffs) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Buffs {
			v.JsonBytes(w)
			if i != len(m.Buffs)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5DamageInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackedId != "" {
		w.RawByte('"')
		w.RawString("attacked_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackedId)
		needWriteComma = true
	}
	if m.Dt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Dt))
		needWriteComma = true
	}
	if m.Damage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if m.AttackedHp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacked_hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackedHp))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5BuffInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BuffId != 0 {
		w.RawByte('"')
		w.RawString("buff_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuffId))
		needWriteComma = true
	}
	if math.Abs(float64(m.Continued)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("continued")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Continued))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5TempBag) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.StartTime != 0 {
		w.RawByte('"')
		w.RawString("start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartTime))
		needWriteComma = true
	}
	if m.KillMonster != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kill_monster")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.KillMonster))
		needWriteComma = true
	}
	if m.KillBoss != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kill_boss")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.KillBoss))
		needWriteComma = true
	}
	if m.KillPlayer != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kill_player")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.KillPlayer))
		needWriteComma = true
	}
	if m.DeadCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dead_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DeadCount))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equips")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equips == nil {
		w.RawString("null")
	} else if len(m.Equips) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Equips {
			v.JsonBytes(w)
			if i != len(m.Equips)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Cap != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cap")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cap))
		needWriteComma = true
	}
	if m.Len != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("len")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Len))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewBattle_L5Equip) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Source != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("source")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Source))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Vector2) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Vector2) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Vector2) GoString() string {
	return m.String()
}

func (m *Visual) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Visual) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Visual) GoString() string {
	return m.String()
}

func (m *Visual_Enter) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Visual_Enter) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Visual_Enter) GoString() string {
	return m.String()
}

func (m *Visual_Leave) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Visual_Leave) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Visual_Leave) GoString() string {
	return m.String()
}

func (m *Visual_CreateMap) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Visual_CreateMap) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Visual_CreateMap) GoString() string {
	return m.String()
}

func (m *Visual_Move) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Visual_Move) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Visual_Move) GoString() string {
	return m.String()
}

func (m *Visual_Object) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Visual_Object) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Visual_Object) GoString() string {
	return m.String()
}

func (m *Visual_Objects) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Visual_Objects) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Visual_Objects) GoString() string {
	return m.String()
}

func (m *NewBattle) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle) GoString() string {
	return m.String()
}

func (m *NewBattle_L5TimePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5TimePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5TimePush) GoString() string {
	return m.String()
}

func (m *NewBattle_L5KeepAlive) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5KeepAlive) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5KeepAlive) GoString() string {
	return m.String()
}

func (m *NewBattle_L5EnterMapRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5EnterMapRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5EnterMapRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5EnterMapResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5EnterMapResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5EnterMapResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5EnterPveMapRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5EnterPveMapRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5EnterPveMapRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5EnterPveMapResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5EnterPveMapResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5EnterPveMapResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5MoveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5MoveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5MoveRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5MoveResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5MoveResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5MoveResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5TeleportRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5TeleportRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5TeleportRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5TeleportResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5TeleportResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5TeleportResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5StopMoveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5StopMoveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5StopMoveRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5StopMoveResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5StopMoveResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5StopMoveResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5LeaveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5LeaveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5LeaveRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5LeaveResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5LeaveResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5LeaveResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5AttackRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5AttackRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5AttackRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5AttackResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5AttackResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5AttackResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5DamageRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5DamageRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5DamageRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5DamageResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5DamageResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5DamageResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5ChangeRenderRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5ChangeRenderRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5ChangeRenderRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5ChangeRenderResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5ChangeRenderResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5ChangeRenderResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5AutoFightRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5AutoFightRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5AutoFightRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5AutoFightResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5AutoFightResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5AutoFightResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5GetTempBagRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5GetTempBagRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5GetTempBagRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5GetTempBagResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5GetTempBagResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5GetTempBagResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5DrawTempBagRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5DrawTempBagRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5DrawTempBagRequest) GoString() string {
	return m.String()
}

func (m *NewBattle_L5DrawTempBagResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5DrawTempBagResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5DrawTempBagResponse) GoString() string {
	return m.String()
}

func (m *NewBattle_L5MovePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5MovePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5MovePush) GoString() string {
	return m.String()
}

func (m *NewBattle_L5MoveOutPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5MoveOutPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5MoveOutPush) GoString() string {
	return m.String()
}

func (m *NewBattle_L5PlayerPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5PlayerPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5PlayerPush) GoString() string {
	return m.String()
}

func (m *NewBattle_L5MonsterPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5MonsterPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5MonsterPush) GoString() string {
	return m.String()
}

func (m *NewBattle_L5MonsterLockPlayerPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5MonsterLockPlayerPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5MonsterLockPlayerPush) GoString() string {
	return m.String()
}

func (m *NewBattle_L5DeadPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5DeadPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5DeadPush) GoString() string {
	return m.String()
}

func (m *NewBattle_L5NormalFightInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5NormalFightInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5NormalFightInfoPush) GoString() string {
	return m.String()
}

func (m *NewBattle_L5NormalFightDamageInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5NormalFightDamageInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5NormalFightDamageInfoPush) GoString() string {
	return m.String()
}

func (m *NewBattle_L5NormalFightInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5NormalFightInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5NormalFightInfo) GoString() string {
	return m.String()
}

func (m *NewBattle_L5NormalFightDamageInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5NormalFightDamageInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5NormalFightDamageInfo) GoString() string {
	return m.String()
}

func (m *NewBattle_L5DamageInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5DamageInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5DamageInfo) GoString() string {
	return m.String()
}

func (m *NewBattle_L5BuffInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5BuffInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5BuffInfo) GoString() string {
	return m.String()
}

func (m *NewBattle_L5TempBag) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5TempBag) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5TempBag) GoString() string {
	return m.String()
}

func (m *NewBattle_L5Equip) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewBattle_L5Equip) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewBattle_L5Equip) GoString() string {
	return m.String()
}

func (m *Vector2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	return n
}

func (m *Visual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Visual_Enter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	return n
}

func (m *Visual_Leave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Visual_CreateMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapSize != nil {
		l = m.MapSize.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.GridSize != nil {
		l = m.GridSize.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if len(m.CanMove) > 0 {
		for k, v := range m.CanMove {
			_ = k
			_ = v
			mapEntrySize := 1 + sozNewBattle(uint64(k)) + 1 + sozNewBattle(uint64(v))
			n += mapEntrySize + 1 + sovNewBattle(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Visual_Move) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	return n
}

func (m *Visual_Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovNewBattle(uint64(m.ConfigId))
	}
	l = len(m.ConfigName)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.Hp != 0 {
		n += 1 + sovNewBattle(uint64(m.Hp))
	}
	if m.MaxHp != 0 {
		n += 1 + sovNewBattle(uint64(m.MaxHp))
	}
	if m.Mp != 0 {
		n += 1 + sovNewBattle(uint64(m.Mp))
	}
	if m.MaxMp != 0 {
		n += 1 + sovNewBattle(uint64(m.MaxMp))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNewBattle(uint64(m.Type))
	}
	return n
}

func (m *Visual_Objects) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Objects) > 0 {
		for _, e := range m.Objects {
			l = e.Size()
			n += 1 + l + sovNewBattle(uint64(l))
		}
	}
	return n
}

func (m *NewBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewBattle_L5TimePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerTime != 0 {
		n += 9
	}
	return n
}

func (m *NewBattle_L5KeepAlive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewBattle_L5EnterMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovNewBattle(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovNewBattle(uint64(m.BattleServerId))
	}
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	return n
}

func (m *NewBattle_L5EnterMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovNewBattle(uint64(m.MapId))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *NewBattle_L5EnterPveMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.DungeonId != 0 {
		n += 1 + sovNewBattle(uint64(m.DungeonId))
	}
	l = len(m.PveId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovNewBattle(uint64(m.BattleServerId))
	}
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	return n
}

func (m *NewBattle_L5EnterPveMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.DungeonId != 0 {
		n += 1 + sovNewBattle(uint64(m.DungeonId))
	}
	l = len(m.PveId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *NewBattle_L5MoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.CurrPos != nil {
		l = m.CurrPos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.IsPve {
		n += 2
	}
	return n
}

func (m *NewBattle_L5MoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *NewBattle_L5TeleportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovNewBattle(uint64(m.MapId))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	return n
}

func (m *NewBattle_L5TeleportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovNewBattle(uint64(m.MapId))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *NewBattle_L5StopMoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.IsPve {
		n += 2
	}
	return n
}

func (m *NewBattle_L5StopMoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *NewBattle_L5LeaveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPve {
		n += 2
	}
	return n
}

func (m *NewBattle_L5LeaveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *NewBattle_L5AttackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FightInfo != nil {
		l = m.FightInfo.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.IsPve {
		n += 2
	}
	return n
}

func (m *NewBattle_L5AttackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPass {
		n += 2
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *NewBattle_L5DamageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DamageInfo != nil {
		l = m.DamageInfo.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.IsPve {
		n += 2
	}
	return n
}

func (m *NewBattle_L5DamageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPass {
		n += 2
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *NewBattle_L5ChangeRenderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovNewBattle(uint64(m.Typ))
	}
	return n
}

func (m *NewBattle_L5ChangeRenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovNewBattle(uint64(m.Typ))
	}
	return n
}

func (m *NewBattle_L5AutoFightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoFight {
		n += 2
	}
	return n
}

func (m *NewBattle_L5AutoFightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewBattle_L5GetTempBagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewBattle_L5GetTempBagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bag != nil {
		l = m.Bag.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	return n
}

func (m *NewBattle_L5DrawTempBagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewBattle_L5DrawTempBagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewBattle_L5MovePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.Cur != nil {
		l = m.Cur.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.Speed != 0 {
		n += 9
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovNewBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *NewBattle_L5MoveOutPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ObjId) > 0 {
		for _, s := range m.ObjId {
			l = len(s)
			n += 1 + l + sovNewBattle(uint64(l))
		}
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovNewBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *NewBattle_L5PlayerPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	l = len(m.SectName)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovNewBattle(uint64(m.Level))
	}
	if m.CurHp != 0 {
		n += 1 + sovNewBattle(uint64(m.CurHp))
	}
	if m.MaxHp != 0 {
		n += 1 + sovNewBattle(uint64(m.MaxHp))
	}
	if m.CurMp != 0 {
		n += 1 + sovNewBattle(uint64(m.CurMp))
	}
	if m.MaxMp != 0 {
		n += 1 + sovNewBattle(uint64(m.MaxMp))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if len(m.BuffList) > 0 {
		for _, e := range m.BuffList {
			l = e.Size()
			n += 1 + l + sovNewBattle(uint64(l))
		}
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovNewBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *NewBattle_L5MonsterPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovNewBattle(uint64(m.ConfigId))
	}
	if m.CurHp != 0 {
		n += 1 + sovNewBattle(uint64(m.CurHp))
	}
	if m.MaxHp != 0 {
		n += 1 + sovNewBattle(uint64(m.MaxHp))
	}
	if m.CurMp != 0 {
		n += 1 + sovNewBattle(uint64(m.CurMp))
	}
	if m.MaxMp != 0 {
		n += 1 + sovNewBattle(uint64(m.MaxMp))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if len(m.BuffList) > 0 {
		for _, e := range m.BuffList {
			l = e.Size()
			n += 1 + l + sovNewBattle(uint64(l))
		}
	}
	l = len(m.LockPlayerId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovNewBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *NewBattle_L5MonsterLockPlayerPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MonsterId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovNewBattle(uint64(m.State))
	}
	return n
}

func (m *NewBattle_L5DeadPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovNewBattle(uint64(m.SkillId))
	}
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNewBattle(uint64(k)) + 1 + sovNewBattle(uint64(v))
			n += mapEntrySize + 1 + sovNewBattle(uint64(mapEntrySize))
		}
	}
	if m.Box != 0 {
		n += 1 + sovNewBattle(uint64(m.Box))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovNewBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *NewBattle_L5NormalFightInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FightInfo != nil {
		l = m.FightInfo.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovNewBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *NewBattle_L5NormalFightDamageInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DamageInfo != nil {
		l = m.DamageInfo.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	if m.UniqueId != 0 {
		n += 2 + sovNewBattle(uint64(m.UniqueId))
	}
	return n
}

func (m *NewBattle_L5NormalFightInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackingId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovNewBattle(uint64(m.SkillId))
	}
	l = len(m.AttackedTarget)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovNewBattle(uint64(l))
	}
	return n
}

func (m *NewBattle_L5NormalFightDamageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackingId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovNewBattle(uint64(m.SkillId))
	}
	if len(m.Damages) > 0 {
		for _, e := range m.Damages {
			l = e.Size()
			n += 1 + l + sovNewBattle(uint64(l))
		}
	}
	if len(m.Buffs) > 0 {
		for _, e := range m.Buffs {
			l = e.Size()
			n += 1 + l + sovNewBattle(uint64(l))
		}
	}
	return n
}

func (m *NewBattle_L5DamageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackedId)
	if l > 0 {
		n += 1 + l + sovNewBattle(uint64(l))
	}
	if m.Dt != 0 {
		n += 1 + sovNewBattle(uint64(m.Dt))
	}
	if m.Damage != 0 {
		n += 1 + sovNewBattle(uint64(m.Damage))
	}
	if m.AttackedHp != 0 {
		n += 1 + sovNewBattle(uint64(m.AttackedHp))
	}
	return n
}

func (m *NewBattle_L5BuffInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuffId != 0 {
		n += 1 + sovNewBattle(uint64(m.BuffId))
	}
	if m.Continued != 0 {
		n += 9
	}
	return n
}

func (m *NewBattle_L5TempBag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovNewBattle(uint64(m.StartTime))
	}
	if m.KillMonster != 0 {
		n += 1 + sovNewBattle(uint64(m.KillMonster))
	}
	if m.KillBoss != 0 {
		n += 1 + sovNewBattle(uint64(m.KillBoss))
	}
	if m.KillPlayer != 0 {
		n += 1 + sovNewBattle(uint64(m.KillPlayer))
	}
	if m.DeadCount != 0 {
		n += 1 + sovNewBattle(uint64(m.DeadCount))
	}
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNewBattle(uint64(k)) + 1 + sovNewBattle(uint64(v))
			n += mapEntrySize + 1 + sovNewBattle(uint64(mapEntrySize))
		}
	}
	if len(m.Equips) > 0 {
		for _, e := range m.Equips {
			l = e.Size()
			n += 1 + l + sovNewBattle(uint64(l))
		}
	}
	if m.Cap != 0 {
		n += 1 + sovNewBattle(uint64(m.Cap))
	}
	if m.Len != 0 {
		n += 1 + sovNewBattle(uint64(m.Len))
	}
	return n
}

func (m *NewBattle_L5Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNewBattle(uint64(m.Id))
	}
	if m.Source != 0 {
		n += 1 + sovNewBattle(uint64(m.Source))
	}
	return n
}

func sovNewBattle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNewBattle(x uint64) (n int) {
	return sovNewBattle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vector2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Visual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Visual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visual_Enter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Enter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Enter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visual_Leave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Leave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Leave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visual_CreateMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapSize == nil {
				m.MapSize = &Vector2{}
			}
			if err := m.MapSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GridSize == nil {
				m.GridSize = &Vector2{}
			}
			if err := m.GridSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanMove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CanMove == nil {
				m.CanMove = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNewBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var mapkeytemp uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNewBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkeytemp |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapkeytemp = (mapkeytemp >> 1) ^ uint64((int64(mapkeytemp&1)<<63)>>63)
					mapkey = int64(mapkeytemp)
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNewBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvaluetemp = (mapvaluetemp >> 1) ^ uint64((int64(mapvaluetemp&1)<<63)>>63)
					mapvalue = int64(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNewBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNewBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CanMove[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visual_Move) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Move: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Move: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visual_Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHp", wireType)
			}
			m.MaxHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mp", wireType)
			}
			m.Mp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMp", wireType)
			}
			m.MaxMp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Visual_ObjectType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visual_Objects) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Objects: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Objects: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objects = append(m.Objects, &Visual_Object{})
			if err := m.Objects[len(m.Objects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5TimePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5TimePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5TimePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5KeepAlive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5KeepAlive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5KeepAlive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5EnterMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5EnterMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5EnterMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &models.Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5EnterMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5EnterMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5EnterMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5EnterPveMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5EnterPveMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5EnterPveMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PveId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &models.Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5EnterPveMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5EnterPveMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5EnterPveMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PveId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5MoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5MoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5MoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrPos == nil {
				m.CurrPos = &Vector2{}
			}
			if err := m.CurrPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPve = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5MoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5MoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5MoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5TeleportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5TeleportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5TeleportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5TeleportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5TeleportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5TeleportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5StopMoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5StopMoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5StopMoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPve = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5StopMoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5StopMoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5StopMoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5LeaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5LeaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5LeaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPve = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5LeaveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5LeaveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5LeaveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5AttackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5AttackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5AttackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FightInfo == nil {
				m.FightInfo = &NewBattle_L5NormalFightInfo{}
			}
			if err := m.FightInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPve = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5AttackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5AttackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5AttackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPass = bool(v != 0)
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5DamageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5DamageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5DamageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DamageInfo == nil {
				m.DamageInfo = &NewBattle_L5NormalFightDamageInfo{}
			}
			if err := m.DamageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPve = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5DamageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5DamageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5DamageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPass = bool(v != 0)
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5ChangeRenderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5ChangeRenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5ChangeRenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= NewBattle_RenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5ChangeRenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5ChangeRenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5ChangeRenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= NewBattle_RenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5AutoFightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5AutoFightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5AutoFightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoFight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoFight = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5AutoFightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5AutoFightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5AutoFightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5GetTempBagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5GetTempBagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5GetTempBagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5GetTempBagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5GetTempBagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5GetTempBagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bag == nil {
				m.Bag = &NewBattle_L5TempBag{}
			}
			if err := m.Bag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5DrawTempBagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5DrawTempBagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5DrawTempBagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5DrawTempBagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5DrawTempBagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5DrawTempBagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5MovePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5MovePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5MovePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cur", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cur == nil {
				m.Cur = &Vector2{}
			}
			if err := m.Cur.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Vector2{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Speed = float64(math.Float64frombits(v))
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5MoveOutPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5MoveOutPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5MoveOutPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = append(m.ObjId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5PlayerPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5PlayerPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5PlayerPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurHp", wireType)
			}
			m.CurHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHp", wireType)
			}
			m.MaxHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurMp", wireType)
			}
			m.CurMp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurMp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMp", wireType)
			}
			m.MaxMp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuffList = append(m.BuffList, &NewBattle_L5BuffInfo{})
			if err := m.BuffList[len(m.BuffList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5MonsterPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5MonsterPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5MonsterPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurHp", wireType)
			}
			m.CurHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHp", wireType)
			}
			m.MaxHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurMp", wireType)
			}
			m.CurMp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurMp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMp", wireType)
			}
			m.MaxMp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuffList = append(m.BuffList, &NewBattle_L5BuffInfo{})
			if err := m.BuffList[len(m.BuffList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockPlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockPlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5MonsterLockPlayerPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5MonsterLockPlayerPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5MonsterLockPlayerPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonsterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= NewBattle_L5MonsterLockPlayerPush_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5DeadPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5DeadPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5DeadPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNewBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNewBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNewBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNewBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNewBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Box", wireType)
			}
			m.Box = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Box |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5NormalFightInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5NormalFightInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5NormalFightInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FightInfo == nil {
				m.FightInfo = &NewBattle_L5NormalFightInfo{}
			}
			if err := m.FightInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5NormalFightDamageInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5NormalFightDamageInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5NormalFightDamageInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DamageInfo == nil {
				m.DamageInfo = &NewBattle_L5NormalFightDamageInfo{}
			}
			if err := m.DamageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			m.UniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5NormalFightInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5NormalFightInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5NormalFightInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackedTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackedTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5NormalFightDamageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5NormalFightDamageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5NormalFightDamageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Damages = append(m.Damages, &NewBattle_L5DamageInfo{})
			if err := m.Damages[len(m.Damages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buffs = append(m.Buffs, &NewBattle_L5BuffInfo{})
			if err := m.Buffs[len(m.Buffs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5DamageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5DamageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5DamageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dt", wireType)
			}
			m.Dt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dt |= NewBattle_DamageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackedHp", wireType)
			}
			m.AttackedHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackedHp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5BuffInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5BuffInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5BuffInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
			m.BuffId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Continued", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Continued = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5TempBag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5TempBag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5TempBag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillMonster", wireType)
			}
			m.KillMonster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillMonster |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillBoss", wireType)
			}
			m.KillBoss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillBoss |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillPlayer", wireType)
			}
			m.KillPlayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillPlayer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadCount", wireType)
			}
			m.DeadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeadCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNewBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNewBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNewBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNewBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNewBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNewBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equips = append(m.Equips, &NewBattle_L5Equip{})
			if err := m.Equips[len(m.Equips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			m.Cap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cap |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewBattle_L5Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L5Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L5Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNewBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNewBattle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNewBattle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNewBattle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNewBattle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNewBattle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNewBattle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNewBattle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNewBattle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNewBattle = fmt.Errorf("proto: unexpected end of group")
)
