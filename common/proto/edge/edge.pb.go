// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/edge/edge.proto

package edge

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Edge struct {
}

func (m *Edge) Reset()      { *m = Edge{} }
func (*Edge) ProtoMessage() {}
func (*Edge) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0}
}
func (m *Edge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge.Merge(m, src)
}
func (m *Edge) XXX_Size() int {
	return m.Size()
}
func (m *Edge) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge.DiscardUnknown(m)
}

var xxx_messageInfo_Edge proto.InternalMessageInfo

func (*Edge) XXX_MessageName() string {
	return "edge.Edge"
}

type Edge_SetEdgeTypeRequest struct {
	Typ models.EdgeType `protobuf:"varint,1,opt,name=typ,proto3,enum=models.EdgeType" json:"typ,omitempty"`
}

func (m *Edge_SetEdgeTypeRequest) Reset()      { *m = Edge_SetEdgeTypeRequest{} }
func (*Edge_SetEdgeTypeRequest) ProtoMessage() {}
func (*Edge_SetEdgeTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 0}
}
func (m *Edge_SetEdgeTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_SetEdgeTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_SetEdgeTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_SetEdgeTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_SetEdgeTypeRequest.Merge(m, src)
}
func (m *Edge_SetEdgeTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *Edge_SetEdgeTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_SetEdgeTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_SetEdgeTypeRequest proto.InternalMessageInfo

func (m *Edge_SetEdgeTypeRequest) GetTyp() models.EdgeType {
	if m != nil {
		return m.Typ
	}
	return models.EdgeType_StatelessServer
}

func (*Edge_SetEdgeTypeRequest) XXX_MessageName() string {
	return "edge.Edge.SetEdgeTypeRequest"
}

type Edge_SetEdgeTypeResponse struct {
	Typ     models.EdgeType `protobuf:"varint,1,opt,name=typ,proto3,enum=models.EdgeType" json:"typ,omitempty"`
	Success bool            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *Edge_SetEdgeTypeResponse) Reset()      { *m = Edge_SetEdgeTypeResponse{} }
func (*Edge_SetEdgeTypeResponse) ProtoMessage() {}
func (*Edge_SetEdgeTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 1}
}
func (m *Edge_SetEdgeTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_SetEdgeTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_SetEdgeTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_SetEdgeTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_SetEdgeTypeResponse.Merge(m, src)
}
func (m *Edge_SetEdgeTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *Edge_SetEdgeTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_SetEdgeTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_SetEdgeTypeResponse proto.InternalMessageInfo

func (m *Edge_SetEdgeTypeResponse) GetTyp() models.EdgeType {
	if m != nil {
		return m.Typ
	}
	return models.EdgeType_StatelessServer
}

func (m *Edge_SetEdgeTypeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (*Edge_SetEdgeTypeResponse) XXX_MessageName() string {
	return "edge.Edge.SetEdgeTypeResponse"
}

type Edge_CreateServerRequest struct {
	BattleId   int64 `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapSceneId int64 `protobuf:"varint,2,opt,name=map_scene_id,json=mapSceneId,proto3" json:"map_scene_id,omitempty"`
	CpuWeight  int64 `protobuf:"varint,3,opt,name=cpu_weight,json=cpuWeight,proto3" json:"cpu_weight,omitempty"`
	// 如果是工会BOSS
	GuildId     string           `protobuf:"bytes,4,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildDayId  string           `protobuf:"bytes,5,opt,name=guild_day_id,json=guildDayId,proto3" json:"guild_day_id,omitempty"`
	TotalDamage int64            `protobuf:"varint,6,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	Damages     map[string]int64 `protobuf:"bytes,7,rep,name=damages,proto3" json:"damages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 如果是rougelike
	RoomId         int64            `protobuf:"varint,20,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Bots           []*models.Bot    `protobuf:"bytes,21,rep,name=bots,proto3" json:"bots,omitempty"`
	MonsterEffects []int64          `protobuf:"varint,22,rep,packed,name=monster_effects,json=monsterEffects,proto3" json:"monster_effects,omitempty"`
	BossEffects    []int64          `protobuf:"varint,23,rep,packed,name=boss_effects,json=bossEffects,proto3" json:"boss_effects,omitempty"`
	MatchServerId  int64            `protobuf:"varint,24,opt,name=match_server_id,json=matchServerId,proto3" json:"match_server_id,omitempty"`
	CardMap        map[string]int64 `protobuf:"bytes,25,rep,name=card_map,json=cardMap,proto3" json:"card_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// boss 大厅
	BossId int64           `protobuf:"varint,40,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	LineId int64           `protobuf:"varint,100,opt,name=line_id,json=lineId,proto3" json:"line_id,omitempty"`
	Typ    models.EdgeType `protobuf:"varint,1000,opt,name=typ,proto3,enum=models.EdgeType" json:"typ,omitempty"`
}

func (m *Edge_CreateServerRequest) Reset()      { *m = Edge_CreateServerRequest{} }
func (*Edge_CreateServerRequest) ProtoMessage() {}
func (*Edge_CreateServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 2}
}
func (m *Edge_CreateServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_CreateServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_CreateServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_CreateServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_CreateServerRequest.Merge(m, src)
}
func (m *Edge_CreateServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *Edge_CreateServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_CreateServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_CreateServerRequest proto.InternalMessageInfo

func (m *Edge_CreateServerRequest) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *Edge_CreateServerRequest) GetMapSceneId() int64 {
	if m != nil {
		return m.MapSceneId
	}
	return 0
}

func (m *Edge_CreateServerRequest) GetCpuWeight() int64 {
	if m != nil {
		return m.CpuWeight
	}
	return 0
}

func (m *Edge_CreateServerRequest) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *Edge_CreateServerRequest) GetGuildDayId() string {
	if m != nil {
		return m.GuildDayId
	}
	return ""
}

func (m *Edge_CreateServerRequest) GetTotalDamage() int64 {
	if m != nil {
		return m.TotalDamage
	}
	return 0
}

func (m *Edge_CreateServerRequest) GetDamages() map[string]int64 {
	if m != nil {
		return m.Damages
	}
	return nil
}

func (m *Edge_CreateServerRequest) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *Edge_CreateServerRequest) GetBots() []*models.Bot {
	if m != nil {
		return m.Bots
	}
	return nil
}

func (m *Edge_CreateServerRequest) GetMonsterEffects() []int64 {
	if m != nil {
		return m.MonsterEffects
	}
	return nil
}

func (m *Edge_CreateServerRequest) GetBossEffects() []int64 {
	if m != nil {
		return m.BossEffects
	}
	return nil
}

func (m *Edge_CreateServerRequest) GetMatchServerId() int64 {
	if m != nil {
		return m.MatchServerId
	}
	return 0
}

func (m *Edge_CreateServerRequest) GetCardMap() map[string]int64 {
	if m != nil {
		return m.CardMap
	}
	return nil
}

func (m *Edge_CreateServerRequest) GetBossId() int64 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (m *Edge_CreateServerRequest) GetLineId() int64 {
	if m != nil {
		return m.LineId
	}
	return 0
}

func (m *Edge_CreateServerRequest) GetTyp() models.EdgeType {
	if m != nil {
		return m.Typ
	}
	return models.EdgeType_StatelessServer
}

func (*Edge_CreateServerRequest) XXX_MessageName() string {
	return "edge.Edge.CreateServerRequest"
}

type Edge_CreateServerResponse struct {
	BattleId   int64  `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapSceneId int64  `protobuf:"varint,2,opt,name=map_scene_id,json=mapSceneId,proto3" json:"map_scene_id,omitempty"`
	Ip         string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port       int64  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *Edge_CreateServerResponse) Reset()      { *m = Edge_CreateServerResponse{} }
func (*Edge_CreateServerResponse) ProtoMessage() {}
func (*Edge_CreateServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 3}
}
func (m *Edge_CreateServerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_CreateServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_CreateServerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_CreateServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_CreateServerResponse.Merge(m, src)
}
func (m *Edge_CreateServerResponse) XXX_Size() int {
	return m.Size()
}
func (m *Edge_CreateServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_CreateServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_CreateServerResponse proto.InternalMessageInfo

func (m *Edge_CreateServerResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *Edge_CreateServerResponse) GetMapSceneId() int64 {
	if m != nil {
		return m.MapSceneId
	}
	return 0
}

func (m *Edge_CreateServerResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Edge_CreateServerResponse) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (*Edge_CreateServerResponse) XXX_MessageName() string {
	return "edge.Edge.CreateServerResponse"
}

type Edge_PlayerChange struct {
	BattleId int64    `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	Roles    []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	IsAdd    bool     `protobuf:"varint,3,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
}

func (m *Edge_PlayerChange) Reset()      { *m = Edge_PlayerChange{} }
func (*Edge_PlayerChange) ProtoMessage() {}
func (*Edge_PlayerChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 4}
}
func (m *Edge_PlayerChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_PlayerChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_PlayerChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_PlayerChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_PlayerChange.Merge(m, src)
}
func (m *Edge_PlayerChange) XXX_Size() int {
	return m.Size()
}
func (m *Edge_PlayerChange) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_PlayerChange.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_PlayerChange proto.InternalMessageInfo

func (m *Edge_PlayerChange) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *Edge_PlayerChange) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Edge_PlayerChange) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (*Edge_PlayerChange) XXX_MessageName() string {
	return "edge.Edge.PlayerChange"
}

type Edge_KillBattleRequest struct {
	BattleId int64 `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *Edge_KillBattleRequest) Reset()      { *m = Edge_KillBattleRequest{} }
func (*Edge_KillBattleRequest) ProtoMessage() {}
func (*Edge_KillBattleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 5}
}
func (m *Edge_KillBattleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_KillBattleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_KillBattleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_KillBattleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_KillBattleRequest.Merge(m, src)
}
func (m *Edge_KillBattleRequest) XXX_Size() int {
	return m.Size()
}
func (m *Edge_KillBattleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_KillBattleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_KillBattleRequest proto.InternalMessageInfo

func (m *Edge_KillBattleRequest) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*Edge_KillBattleRequest) XXX_MessageName() string {
	return "edge.Edge.KillBattleRequest"
}

type Edge_KillBattleResponse struct {
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *Edge_KillBattleResponse) Reset()      { *m = Edge_KillBattleResponse{} }
func (*Edge_KillBattleResponse) ProtoMessage() {}
func (*Edge_KillBattleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 6}
}
func (m *Edge_KillBattleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_KillBattleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_KillBattleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_KillBattleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_KillBattleResponse.Merge(m, src)
}
func (m *Edge_KillBattleResponse) XXX_Size() int {
	return m.Size()
}
func (m *Edge_KillBattleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_KillBattleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_KillBattleResponse proto.InternalMessageInfo

func (m *Edge_KillBattleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (*Edge_KillBattleResponse) XXX_MessageName() string {
	return "edge.Edge.KillBattleResponse"
}

type Edge_KillPlayers struct {
	Roles []string `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (m *Edge_KillPlayers) Reset()      { *m = Edge_KillPlayers{} }
func (*Edge_KillPlayers) ProtoMessage() {}
func (*Edge_KillPlayers) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 7}
}
func (m *Edge_KillPlayers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_KillPlayers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_KillPlayers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_KillPlayers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_KillPlayers.Merge(m, src)
}
func (m *Edge_KillPlayers) XXX_Size() int {
	return m.Size()
}
func (m *Edge_KillPlayers) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_KillPlayers.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_KillPlayers proto.InternalMessageInfo

func (m *Edge_KillPlayers) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (*Edge_KillPlayers) XXX_MessageName() string {
	return "edge.Edge.KillPlayers"
}

type Edge_KillPlayerRequest struct {
	Players map[int64]*Edge_KillPlayers `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Edge_KillPlayerRequest) Reset()      { *m = Edge_KillPlayerRequest{} }
func (*Edge_KillPlayerRequest) ProtoMessage() {}
func (*Edge_KillPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 8}
}
func (m *Edge_KillPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_KillPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_KillPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_KillPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_KillPlayerRequest.Merge(m, src)
}
func (m *Edge_KillPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *Edge_KillPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_KillPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_KillPlayerRequest proto.InternalMessageInfo

func (m *Edge_KillPlayerRequest) GetPlayers() map[int64]*Edge_KillPlayers {
	if m != nil {
		return m.Players
	}
	return nil
}

func (*Edge_KillPlayerRequest) XXX_MessageName() string {
	return "edge.Edge.KillPlayerRequest"
}

type Edge_KillPlayerResponse struct {
}

func (m *Edge_KillPlayerResponse) Reset()      { *m = Edge_KillPlayerResponse{} }
func (*Edge_KillPlayerResponse) ProtoMessage() {}
func (*Edge_KillPlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 9}
}
func (m *Edge_KillPlayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_KillPlayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_KillPlayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_KillPlayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_KillPlayerResponse.Merge(m, src)
}
func (m *Edge_KillPlayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *Edge_KillPlayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_KillPlayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_KillPlayerResponse proto.InternalMessageInfo

func (*Edge_KillPlayerResponse) XXX_MessageName() string {
	return "edge.Edge.KillPlayerResponse"
}

type Edge_NotifyEdgeKillSelfPush struct {
	BattleId int64 `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *Edge_NotifyEdgeKillSelfPush) Reset()      { *m = Edge_NotifyEdgeKillSelfPush{} }
func (*Edge_NotifyEdgeKillSelfPush) ProtoMessage() {}
func (*Edge_NotifyEdgeKillSelfPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 10}
}
func (m *Edge_NotifyEdgeKillSelfPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_NotifyEdgeKillSelfPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_NotifyEdgeKillSelfPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_NotifyEdgeKillSelfPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_NotifyEdgeKillSelfPush.Merge(m, src)
}
func (m *Edge_NotifyEdgeKillSelfPush) XXX_Size() int {
	return m.Size()
}
func (m *Edge_NotifyEdgeKillSelfPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_NotifyEdgeKillSelfPush.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_NotifyEdgeKillSelfPush proto.InternalMessageInfo

func (m *Edge_NotifyEdgeKillSelfPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*Edge_NotifyEdgeKillSelfPush) XXX_MessageName() string {
	return "edge.Edge.NotifyEdgeKillSelfPush"
}

type Edge_MonsterBossCreateInfo struct {
	BattleId        int64        `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MonsterConfigId int64        `protobuf:"varint,2,opt,name=monster_config_id,json=monsterConfigId,proto3" json:"monster_config_id,omitempty"`
	MapId           int64        `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	TransPort       *models.Vec2 `protobuf:"bytes,4,opt,name=trans_port,json=transPort,proto3" json:"trans_port,omitempty"`
}

func (m *Edge_MonsterBossCreateInfo) Reset()      { *m = Edge_MonsterBossCreateInfo{} }
func (*Edge_MonsterBossCreateInfo) ProtoMessage() {}
func (*Edge_MonsterBossCreateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 11}
}
func (m *Edge_MonsterBossCreateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_MonsterBossCreateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_MonsterBossCreateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_MonsterBossCreateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_MonsterBossCreateInfo.Merge(m, src)
}
func (m *Edge_MonsterBossCreateInfo) XXX_Size() int {
	return m.Size()
}
func (m *Edge_MonsterBossCreateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_MonsterBossCreateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_MonsterBossCreateInfo proto.InternalMessageInfo

func (m *Edge_MonsterBossCreateInfo) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *Edge_MonsterBossCreateInfo) GetMonsterConfigId() int64 {
	if m != nil {
		return m.MonsterConfigId
	}
	return 0
}

func (m *Edge_MonsterBossCreateInfo) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *Edge_MonsterBossCreateInfo) GetTransPort() *models.Vec2 {
	if m != nil {
		return m.TransPort
	}
	return nil
}

func (*Edge_MonsterBossCreateInfo) XXX_MessageName() string {
	return "edge.Edge.MonsterBossCreateInfo"
}

type Edge_MonsterBossDeadInfo struct {
	BattleId        int64  `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MonsterConfigId int64  `protobuf:"varint,2,opt,name=monster_config_id,json=monsterConfigId,proto3" json:"monster_config_id,omitempty"`
	MapId           int64  `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Killer          string `protobuf:"bytes,4,opt,name=killer,proto3" json:"killer,omitempty"`
	NextRefreshTime int64  `protobuf:"varint,5,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
}

func (m *Edge_MonsterBossDeadInfo) Reset()      { *m = Edge_MonsterBossDeadInfo{} }
func (*Edge_MonsterBossDeadInfo) ProtoMessage() {}
func (*Edge_MonsterBossDeadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 12}
}
func (m *Edge_MonsterBossDeadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_MonsterBossDeadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_MonsterBossDeadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_MonsterBossDeadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_MonsterBossDeadInfo.Merge(m, src)
}
func (m *Edge_MonsterBossDeadInfo) XXX_Size() int {
	return m.Size()
}
func (m *Edge_MonsterBossDeadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_MonsterBossDeadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_MonsterBossDeadInfo proto.InternalMessageInfo

func (m *Edge_MonsterBossDeadInfo) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *Edge_MonsterBossDeadInfo) GetMonsterConfigId() int64 {
	if m != nil {
		return m.MonsterConfigId
	}
	return 0
}

func (m *Edge_MonsterBossDeadInfo) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *Edge_MonsterBossDeadInfo) GetKiller() string {
	if m != nil {
		return m.Killer
	}
	return ""
}

func (m *Edge_MonsterBossDeadInfo) GetNextRefreshTime() int64 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (*Edge_MonsterBossDeadInfo) XXX_MessageName() string {
	return "edge.Edge.MonsterBossDeadInfo"
}

// 告诉EDGE ，当前恶魔秘境不再可进入
type Edge_NotCanEnterPush struct {
	BattleId int64 `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	BossId   int64 `protobuf:"varint,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
}

func (m *Edge_NotCanEnterPush) Reset()      { *m = Edge_NotCanEnterPush{} }
func (*Edge_NotCanEnterPush) ProtoMessage() {}
func (*Edge_NotCanEnterPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 13}
}
func (m *Edge_NotCanEnterPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_NotCanEnterPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_NotCanEnterPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_NotCanEnterPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_NotCanEnterPush.Merge(m, src)
}
func (m *Edge_NotCanEnterPush) XXX_Size() int {
	return m.Size()
}
func (m *Edge_NotCanEnterPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_NotCanEnterPush.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_NotCanEnterPush proto.InternalMessageInfo

func (m *Edge_NotCanEnterPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *Edge_NotCanEnterPush) GetBossId() int64 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (*Edge_NotCanEnterPush) XXX_MessageName() string {
	return "edge.Edge.NotCanEnterPush"
}

type Edge_BattleNotifyListenPush struct {
	BattleId int64 `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	Port     int64 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	MapId    int64 `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	OldPort  int64 `protobuf:"varint,4,opt,name=old_port,json=oldPort,proto3" json:"old_port,omitempty"`
}

func (m *Edge_BattleNotifyListenPush) Reset()      { *m = Edge_BattleNotifyListenPush{} }
func (*Edge_BattleNotifyListenPush) ProtoMessage() {}
func (*Edge_BattleNotifyListenPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3983248c4c16191, []int{0, 14}
}
func (m *Edge_BattleNotifyListenPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge_BattleNotifyListenPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge_BattleNotifyListenPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge_BattleNotifyListenPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge_BattleNotifyListenPush.Merge(m, src)
}
func (m *Edge_BattleNotifyListenPush) XXX_Size() int {
	return m.Size()
}
func (m *Edge_BattleNotifyListenPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge_BattleNotifyListenPush.DiscardUnknown(m)
}

var xxx_messageInfo_Edge_BattleNotifyListenPush proto.InternalMessageInfo

func (m *Edge_BattleNotifyListenPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *Edge_BattleNotifyListenPush) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Edge_BattleNotifyListenPush) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *Edge_BattleNotifyListenPush) GetOldPort() int64 {
	if m != nil {
		return m.OldPort
	}
	return 0
}

func (*Edge_BattleNotifyListenPush) XXX_MessageName() string {
	return "edge.Edge.BattleNotifyListenPush"
}
func init() {
	proto.RegisterType((*Edge)(nil), "edge.Edge")
	proto.RegisterType((*Edge_SetEdgeTypeRequest)(nil), "edge.Edge.SetEdgeTypeRequest")
	proto.RegisterType((*Edge_SetEdgeTypeResponse)(nil), "edge.Edge.SetEdgeTypeResponse")
	proto.RegisterType((*Edge_CreateServerRequest)(nil), "edge.Edge.CreateServerRequest")
	proto.RegisterMapType((map[string]int64)(nil), "edge.Edge.CreateServerRequest.CardMapEntry")
	proto.RegisterMapType((map[string]int64)(nil), "edge.Edge.CreateServerRequest.DamagesEntry")
	proto.RegisterType((*Edge_CreateServerResponse)(nil), "edge.Edge.CreateServerResponse")
	proto.RegisterType((*Edge_PlayerChange)(nil), "edge.Edge.PlayerChange")
	proto.RegisterType((*Edge_KillBattleRequest)(nil), "edge.Edge.KillBattleRequest")
	proto.RegisterType((*Edge_KillBattleResponse)(nil), "edge.Edge.KillBattleResponse")
	proto.RegisterType((*Edge_KillPlayers)(nil), "edge.Edge.KillPlayers")
	proto.RegisterType((*Edge_KillPlayerRequest)(nil), "edge.Edge.KillPlayerRequest")
	proto.RegisterMapType((map[int64]*Edge_KillPlayers)(nil), "edge.Edge.KillPlayerRequest.PlayersEntry")
	proto.RegisterType((*Edge_KillPlayerResponse)(nil), "edge.Edge.KillPlayerResponse")
	proto.RegisterType((*Edge_NotifyEdgeKillSelfPush)(nil), "edge.Edge.NotifyEdgeKillSelfPush")
	proto.RegisterType((*Edge_MonsterBossCreateInfo)(nil), "edge.Edge.MonsterBossCreateInfo")
	proto.RegisterType((*Edge_MonsterBossDeadInfo)(nil), "edge.Edge.MonsterBossDeadInfo")
	proto.RegisterType((*Edge_NotCanEnterPush)(nil), "edge.Edge.NotCanEnterPush")
	proto.RegisterType((*Edge_BattleNotifyListenPush)(nil), "edge.Edge.BattleNotifyListenPush")
}

func init() { proto.RegisterFile("proto/edge/edge.proto", fileDescriptor_e3983248c4c16191) }

var fileDescriptor_e3983248c4c16191 = []byte{
	// 965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x8e, 0x1b, 0xc5,
	0x13, 0xde, 0xf1, 0xf8, 0x6f, 0xd9, 0xbf, 0x75, 0xd2, 0xeb, 0xf5, 0xce, 0xce, 0x4f, 0x19, 0x4c,
	0x22, 0x81, 0x21, 0xe0, 0x45, 0x46, 0x48, 0x51, 0x6e, 0xac, 0xd7, 0xa0, 0x51, 0x48, 0xb4, 0x1a,
	0x47, 0x80, 0xb8, 0x8c, 0x7a, 0xa7, 0xdb, 0xf6, 0x28, 0x33, 0xd3, 0xc3, 0x74, 0x3b, 0x60, 0xf1,
	0x12, 0x3c, 0x04, 0x07, 0x0e, 0xbc, 0x00, 0x6f, 0x90, 0x63, 0x8e, 0xb9, 0x01, 0xde, 0x4b, 0x8e,
	0x1c, 0x39, 0xa2, 0xee, 0x9e, 0xd9, 0x9d, 0x55, 0x92, 0xdd, 0x45, 0x48, 0x5c, 0xac, 0xa9, 0xfa,
	0xaa, 0xba, 0xbf, 0xaa, 0xfa, 0xba, 0x64, 0xd8, 0x4d, 0x33, 0x26, 0xd8, 0x01, 0x25, 0x0b, 0xaa,
	0x7e, 0x46, 0xca, 0x46, 0x55, 0xf9, 0x6d, 0xef, 0x69, 0x30, 0x66, 0x84, 0x46, 0xbc, 0x04, 0xdb,
	0xfb, 0x17, 0x80, 0x13, 0x2c, 0x44, 0x94, 0x43, 0xb7, 0xff, 0xea, 0x42, 0x75, 0x2a, 0x93, 0xef,
	0x01, 0x9a, 0x51, 0x21, 0x3f, 0x1f, 0xaf, 0x53, 0xea, 0xd1, 0x6f, 0x57, 0x94, 0x0b, 0x74, 0x1b,
	0x4c, 0xb1, 0x4e, 0x2d, 0x63, 0x60, 0x0c, 0xb7, 0xc7, 0x37, 0x46, 0xfa, 0x84, 0xd1, 0x59, 0x94,
	0x04, 0xed, 0x19, 0xec, 0x5c, 0xc8, 0xe4, 0x29, 0x4b, 0x38, 0xbd, 0x4e, 0x2a, 0xb2, 0xa0, 0xc1,
	0x57, 0x41, 0x40, 0x39, 0xb7, 0x2a, 0x03, 0x63, 0xd8, 0xf4, 0x0a, 0xd3, 0xfe, 0xad, 0x06, 0x3b,
	0x93, 0x8c, 0x62, 0x41, 0x67, 0x34, 0x7b, 0x4a, 0xb3, 0x82, 0xd0, 0xff, 0xa1, 0xa5, 0xf9, 0xfb,
	0x21, 0x51, 0x67, 0x9b, 0x5e, 0x53, 0x3b, 0x5c, 0x82, 0x06, 0xd0, 0x89, 0x71, 0xea, 0xf3, 0x80,
	0x26, 0x0a, 0xaf, 0x28, 0x1c, 0x62, 0x9c, 0xce, 0xa4, 0xcb, 0x25, 0xe8, 0x16, 0x40, 0x90, 0xae,
	0xfc, 0xef, 0x68, 0xb8, 0x58, 0x0a, 0xcb, 0x54, 0x78, 0x2b, 0x48, 0x57, 0x5f, 0x29, 0x07, 0xda,
	0x87, 0xe6, 0x62, 0x15, 0x46, 0x44, 0x26, 0x57, 0x07, 0xc6, 0xb0, 0xe5, 0x35, 0x94, 0xad, 0xcf,
	0xd6, 0x10, 0xc1, 0x6b, 0x09, 0xd7, 0x14, 0x0c, 0xca, 0x77, 0x84, 0xd7, 0x2e, 0x41, 0x6f, 0x43,
	0x47, 0x30, 0x81, 0x23, 0x9f, 0xe0, 0x18, 0x2f, 0xa8, 0x55, 0x57, 0xa7, 0xb7, 0x95, 0xef, 0x48,
	0xb9, 0xd0, 0x14, 0x1a, 0x1a, 0xe4, 0x56, 0x63, 0x60, 0x0e, 0xdb, 0xe3, 0xbb, 0x23, 0x35, 0x26,
	0xd9, 0x95, 0xd1, 0x6b, 0xca, 0x1d, 0xe9, 0x3c, 0x3e, 0x4d, 0x44, 0xb6, 0xf6, 0x8a, 0x5c, 0xb4,
	0x07, 0x8d, 0x8c, 0xb1, 0x58, 0xd2, 0xe8, 0xa9, 0x4b, 0xea, 0xd2, 0x74, 0x09, 0x7a, 0x0b, 0xaa,
	0x27, 0x4c, 0x70, 0x6b, 0x57, 0x1d, 0xde, 0x2e, 0x9a, 0x7e, 0xc8, 0x84, 0xa7, 0x00, 0xf4, 0x2e,
	0x74, 0x63, 0x96, 0x70, 0x41, 0x33, 0x9f, 0xce, 0xe7, 0x34, 0x10, 0xdc, 0xea, 0x0f, 0xcc, 0xa1,
	0xe9, 0x6d, 0xe7, 0xee, 0xa9, 0xf6, 0xca, 0x62, 0x4e, 0x18, 0xe7, 0x67, 0x51, 0x7b, 0x2a, 0xaa,
	0x2d, 0x7d, 0x45, 0xc8, 0x3b, 0xd0, 0x8d, 0xb1, 0x08, 0x96, 0x3e, 0x57, 0x94, 0x25, 0x1b, 0x4b,
	0xb1, 0xf9, 0x9f, 0x72, 0xeb, 0x42, 0x5c, 0x82, 0x3e, 0x83, 0x66, 0x80, 0x33, 0xe2, 0xc7, 0x38,
	0xb5, 0xf6, 0xaf, 0x55, 0xf5, 0x04, 0x67, 0xe4, 0x21, 0x4e, 0xf3, 0xaa, 0x03, 0x6d, 0xc9, 0xaa,
	0x15, 0xa5, 0x90, 0x58, 0x43, 0x5d, 0xb5, 0x34, 0x5d, 0x22, 0x81, 0x28, 0xd4, 0x13, 0x27, 0x1a,
	0x90, 0xa6, 0x4b, 0xd0, 0x1d, 0x2d, 0xc1, 0x97, 0x8d, 0xcb, 0xe4, 0x7b, 0x1f, 0x3a, 0xe5, 0x2e,
	0xa3, 0x1b, 0x60, 0x3e, 0xa1, 0x6b, 0xa5, 0xad, 0x96, 0x27, 0x3f, 0x51, 0x0f, 0x6a, 0x4f, 0x71,
	0xb4, 0xa2, 0xb9, 0x9e, 0xb4, 0x71, 0xbf, 0x72, 0xcf, 0x90, 0xb9, 0x65, 0xae, 0xff, 0x28, 0x77,
	0x0d, 0xbd, 0x8b, 0xb5, 0xe7, 0xef, 0xe6, 0x5f, 0x2a, 0x7c, 0x1b, 0x2a, 0x61, 0xaa, 0x94, 0xdd,
	0xf2, 0x2a, 0x61, 0x8a, 0x10, 0x54, 0x53, 0x96, 0x09, 0x25, 0x67, 0xd3, 0x53, 0xdf, 0xf6, 0xd7,
	0xd0, 0x39, 0x8e, 0xf0, 0x9a, 0x66, 0x93, 0x25, 0x4e, 0x16, 0x57, 0x5c, 0xd9, 0x83, 0x5a, 0xc6,
	0x22, 0x2a, 0x5f, 0xa8, 0x39, 0x6c, 0x79, 0xda, 0x40, 0xbb, 0x50, 0x0f, 0xb9, 0x8f, 0x09, 0x51,
	0x57, 0x35, 0xbd, 0x5a, 0xc8, 0x3f, 0x25, 0xc4, 0xfe, 0x08, 0x6e, 0x3e, 0x08, 0xa3, 0xe8, 0x50,
	0x25, 0x5f, 0xe7, 0xcd, 0xda, 0x23, 0x40, 0xe5, 0x8c, 0xbc, 0x09, 0x6f, 0x5e, 0x0c, 0x77, 0xa0,
	0x2d, 0xe3, 0x35, 0x7f, 0x7e, 0xce, 0xce, 0x28, 0xb1, 0xb3, 0x7f, 0x31, 0x34, 0x0f, 0x1d, 0x55,
	0xf0, 0x98, 0x40, 0x23, 0xd5, 0x69, 0x2a, 0xba, 0x3d, 0x7e, 0xaf, 0xa4, 0xc3, 0x57, 0xc2, 0x47,
	0xf9, 0x15, 0xb9, 0x0a, 0xf3, 0x4c, 0xdb, 0x2b, 0x7a, 0xf7, 0xaa, 0x5c, 0x4c, 0x3d, 0xf2, 0x0f,
	0xca, 0x23, 0x6f, 0x8f, 0xfb, 0xaf, 0xbd, 0x84, 0x97, 0xa5, 0xd0, 0xd3, 0x3d, 0x28, 0xae, 0xd7,
	0x3d, 0xb0, 0x3f, 0x81, 0xfe, 0x23, 0x26, 0xc2, 0xf9, 0x5a, 0xa6, 0x4a, 0x7c, 0x46, 0xa3, 0xf9,
	0xf1, 0x8a, 0x2f, 0x2f, 0x6f, 0xe8, 0x4f, 0x06, 0xec, 0x3e, 0xd4, 0x8f, 0xf9, 0x90, 0x71, 0xae,
	0x35, 0xe6, 0x26, 0x73, 0x76, 0xf9, 0x98, 0xdf, 0x87, 0x9b, 0xc5, 0x66, 0x08, 0x58, 0x32, 0x0f,
	0x17, 0xe7, 0xf2, 0x2a, 0x56, 0xc6, 0x44, 0xf9, 0x5d, 0x22, 0x87, 0x2f, 0x55, 0x18, 0x92, 0x7c,
	0x83, 0xd6, 0x62, 0x9c, 0xba, 0x04, 0xdd, 0x05, 0x10, 0x19, 0x4e, 0xb8, 0x7f, 0x26, 0xb8, 0xf6,
	0xb8, 0x53, 0x3c, 0xba, 0x2f, 0x69, 0x30, 0xf6, 0x5a, 0x0a, 0x3f, 0x96, 0x1a, 0xfc, 0xd5, 0x80,
	0x9d, 0x12, 0xcd, 0x23, 0x8a, 0xc9, 0x7f, 0x42, 0xb2, 0x0f, 0xf5, 0x27, 0x61, 0x14, 0xd1, 0x2c,
	0x5f, 0xf0, 0xb9, 0x25, 0x8f, 0x4e, 0xe8, 0xf7, 0xc2, 0xcf, 0xe8, 0x3c, 0xa3, 0x7c, 0xe9, 0x8b,
	0x30, 0xa6, 0x6a, 0xc9, 0x9b, 0x5e, 0x57, 0x02, 0x9e, 0xf6, 0x3f, 0x0e, 0x63, 0x6a, 0x7f, 0x0e,
	0xdd, 0x47, 0x4c, 0x4c, 0x70, 0x32, 0x4d, 0x04, 0xcd, 0xae, 0x1c, 0x49, 0x79, 0x73, 0x55, 0xca,
	0x9b, 0xcb, 0xfe, 0x01, 0xfa, 0x5a, 0xf8, 0x7a, 0xd0, 0x5f, 0x84, 0x5c, 0xd0, 0xe4, 0xea, 0xf3,
	0x8a, 0x37, 0x5d, 0x39, 0x7f, 0xd3, 0x6f, 0x2a, 0x77, 0x1f, 0x9a, 0x2c, 0x22, 0x7e, 0x69, 0x05,
	0x34, 0x58, 0x44, 0xe4, 0x04, 0x0e, 0x1f, 0xbc, 0xf8, 0xc3, 0xd9, 0xfa, 0x79, 0xe3, 0x18, 0xcf,
	0x36, 0x8e, 0xf1, 0x7c, 0xe3, 0x18, 0xbf, 0x6f, 0x1c, 0xe3, 0xe5, 0xc6, 0xd9, 0xfa, 0x73, 0xe3,
	0x18, 0x3f, 0x9e, 0x3a, 0x5b, 0xcf, 0x4e, 0x1d, 0xe3, 0xf9, 0xa9, 0xb3, 0xf5, 0xe2, 0xd4, 0xd9,
	0xfa, 0xe6, 0x56, 0xc0, 0xc2, 0xe4, 0x43, 0xbd, 0xea, 0x0f, 0x02, 0x16, 0xc7, 0x2c, 0x39, 0x38,
	0xff, 0x33, 0x72, 0x52, 0x57, 0xdf, 0x1f, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x72, 0xf9, 0xf4,
	0xc9, 0xa1, 0x08, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_SetEdgeTypeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_SetEdgeTypeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_CreateServerRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_CreateServerResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_PlayerChange.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_KillBattleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_KillBattleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_KillPlayers.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_KillPlayerRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_KillPlayerResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_NotifyEdgeKillSelfPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_MonsterBossCreateInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_MonsterBossDeadInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_NotCanEnterPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEdge_BattleNotifyListenPush.Get().(proto.Message)
	})
}

var poolEdge = &sync.Pool{New: func() interface{} { return &Edge{} }}

func (m *Edge) ReleasePool() { m.Reset(); poolEdge.Put(m); m = nil }

var poolEdge_SetEdgeTypeRequest = &sync.Pool{New: func() interface{} { return &Edge_SetEdgeTypeRequest{} }}

func (m *Edge_SetEdgeTypeRequest) ReleasePool() {
	m.Reset()
	poolEdge_SetEdgeTypeRequest.Put(m)
	m = nil
}

var poolEdge_SetEdgeTypeResponse = &sync.Pool{New: func() interface{} { return &Edge_SetEdgeTypeResponse{} }}

func (m *Edge_SetEdgeTypeResponse) ReleasePool() {
	m.Reset()
	poolEdge_SetEdgeTypeResponse.Put(m)
	m = nil
}

var poolEdge_CreateServerRequest = &sync.Pool{New: func() interface{} { return &Edge_CreateServerRequest{} }}

func (m *Edge_CreateServerRequest) ReleasePool() {
	m.Reset()
	poolEdge_CreateServerRequest.Put(m)
	m = nil
}

var poolEdge_CreateServerResponse = &sync.Pool{New: func() interface{} { return &Edge_CreateServerResponse{} }}

func (m *Edge_CreateServerResponse) ReleasePool() {
	m.Reset()
	poolEdge_CreateServerResponse.Put(m)
	m = nil
}

var poolEdge_PlayerChange = &sync.Pool{New: func() interface{} { return &Edge_PlayerChange{} }}

func (m *Edge_PlayerChange) ReleasePool() { m.Reset(); poolEdge_PlayerChange.Put(m); m = nil }

var poolEdge_KillBattleRequest = &sync.Pool{New: func() interface{} { return &Edge_KillBattleRequest{} }}

func (m *Edge_KillBattleRequest) ReleasePool() { m.Reset(); poolEdge_KillBattleRequest.Put(m); m = nil }

var poolEdge_KillBattleResponse = &sync.Pool{New: func() interface{} { return &Edge_KillBattleResponse{} }}

func (m *Edge_KillBattleResponse) ReleasePool() {
	m.Reset()
	poolEdge_KillBattleResponse.Put(m)
	m = nil
}

var poolEdge_KillPlayers = &sync.Pool{New: func() interface{} { return &Edge_KillPlayers{} }}

func (m *Edge_KillPlayers) ReleasePool() { m.Reset(); poolEdge_KillPlayers.Put(m); m = nil }

var poolEdge_KillPlayerRequest = &sync.Pool{New: func() interface{} { return &Edge_KillPlayerRequest{} }}

func (m *Edge_KillPlayerRequest) ReleasePool() { m.Reset(); poolEdge_KillPlayerRequest.Put(m); m = nil }

var poolEdge_KillPlayerResponse = &sync.Pool{New: func() interface{} { return &Edge_KillPlayerResponse{} }}

func (m *Edge_KillPlayerResponse) ReleasePool() {
	m.Reset()
	poolEdge_KillPlayerResponse.Put(m)
	m = nil
}

var poolEdge_NotifyEdgeKillSelfPush = &sync.Pool{New: func() interface{} { return &Edge_NotifyEdgeKillSelfPush{} }}

func (m *Edge_NotifyEdgeKillSelfPush) ReleasePool() {
	m.Reset()
	poolEdge_NotifyEdgeKillSelfPush.Put(m)
	m = nil
}

var poolEdge_MonsterBossCreateInfo = &sync.Pool{New: func() interface{} { return &Edge_MonsterBossCreateInfo{} }}

func (m *Edge_MonsterBossCreateInfo) ReleasePool() {
	m.Reset()
	poolEdge_MonsterBossCreateInfo.Put(m)
	m = nil
}

var poolEdge_MonsterBossDeadInfo = &sync.Pool{New: func() interface{} { return &Edge_MonsterBossDeadInfo{} }}

func (m *Edge_MonsterBossDeadInfo) ReleasePool() {
	m.Reset()
	poolEdge_MonsterBossDeadInfo.Put(m)
	m = nil
}

var poolEdge_NotCanEnterPush = &sync.Pool{New: func() interface{} { return &Edge_NotCanEnterPush{} }}

func (m *Edge_NotCanEnterPush) ReleasePool() { m.Reset(); poolEdge_NotCanEnterPush.Put(m); m = nil }

var poolEdge_BattleNotifyListenPush = &sync.Pool{New: func() interface{} { return &Edge_BattleNotifyListenPush{} }}

func (m *Edge_BattleNotifyListenPush) ReleasePool() {
	m.Reset()
	poolEdge_BattleNotifyListenPush.Put(m)
	m = nil
}
func (this *Edge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge)
	if !ok {
		that2, ok := that.(Edge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Edge_SetEdgeTypeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_SetEdgeTypeRequest)
	if !ok {
		that2, ok := that.(Edge_SetEdgeTypeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *Edge_SetEdgeTypeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_SetEdgeTypeResponse)
	if !ok {
		that2, ok := that.(Edge_SetEdgeTypeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *Edge_CreateServerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_CreateServerRequest)
	if !ok {
		that2, ok := that.(Edge_CreateServerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapSceneId != that1.MapSceneId {
		return false
	}
	if this.CpuWeight != that1.CpuWeight {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.GuildDayId != that1.GuildDayId {
		return false
	}
	if this.TotalDamage != that1.TotalDamage {
		return false
	}
	if len(this.Damages) != len(that1.Damages) {
		return false
	}
	for i := range this.Damages {
		if this.Damages[i] != that1.Damages[i] {
			return false
		}
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if len(this.Bots) != len(that1.Bots) {
		return false
	}
	for i := range this.Bots {
		if !this.Bots[i].Equal(that1.Bots[i]) {
			return false
		}
	}
	if len(this.MonsterEffects) != len(that1.MonsterEffects) {
		return false
	}
	for i := range this.MonsterEffects {
		if this.MonsterEffects[i] != that1.MonsterEffects[i] {
			return false
		}
	}
	if len(this.BossEffects) != len(that1.BossEffects) {
		return false
	}
	for i := range this.BossEffects {
		if this.BossEffects[i] != that1.BossEffects[i] {
			return false
		}
	}
	if this.MatchServerId != that1.MatchServerId {
		return false
	}
	if len(this.CardMap) != len(that1.CardMap) {
		return false
	}
	for i := range this.CardMap {
		if this.CardMap[i] != that1.CardMap[i] {
			return false
		}
	}
	if this.BossId != that1.BossId {
		return false
	}
	if this.LineId != that1.LineId {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *Edge_CreateServerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_CreateServerResponse)
	if !ok {
		that2, ok := that.(Edge_CreateServerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapSceneId != that1.MapSceneId {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *Edge_PlayerChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_PlayerChange)
	if !ok {
		that2, ok := that.(Edge_PlayerChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if this.IsAdd != that1.IsAdd {
		return false
	}
	return true
}
func (this *Edge_KillBattleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_KillBattleRequest)
	if !ok {
		that2, ok := that.(Edge_KillBattleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *Edge_KillBattleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_KillBattleResponse)
	if !ok {
		that2, ok := that.(Edge_KillBattleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *Edge_KillPlayers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_KillPlayers)
	if !ok {
		that2, ok := that.(Edge_KillPlayers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	return true
}
func (this *Edge_KillPlayerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_KillPlayerRequest)
	if !ok {
		that2, ok := that.(Edge_KillPlayerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Players) != len(that1.Players) {
		return false
	}
	for i := range this.Players {
		if !this.Players[i].Equal(that1.Players[i]) {
			return false
		}
	}
	return true
}
func (this *Edge_KillPlayerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_KillPlayerResponse)
	if !ok {
		that2, ok := that.(Edge_KillPlayerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Edge_NotifyEdgeKillSelfPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_NotifyEdgeKillSelfPush)
	if !ok {
		that2, ok := that.(Edge_NotifyEdgeKillSelfPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *Edge_MonsterBossCreateInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_MonsterBossCreateInfo)
	if !ok {
		that2, ok := that.(Edge_MonsterBossCreateInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MonsterConfigId != that1.MonsterConfigId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if !this.TransPort.Equal(that1.TransPort) {
		return false
	}
	return true
}
func (this *Edge_MonsterBossDeadInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_MonsterBossDeadInfo)
	if !ok {
		that2, ok := that.(Edge_MonsterBossDeadInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MonsterConfigId != that1.MonsterConfigId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.Killer != that1.Killer {
		return false
	}
	if this.NextRefreshTime != that1.NextRefreshTime {
		return false
	}
	return true
}
func (this *Edge_NotCanEnterPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_NotCanEnterPush)
	if !ok {
		that2, ok := that.(Edge_NotCanEnterPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	return true
}
func (this *Edge_BattleNotifyListenPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Edge_BattleNotifyListenPush)
	if !ok {
		that2, ok := that.(Edge_BattleNotifyListenPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.OldPort != that1.OldPort {
		return false
	}
	return true
}
func (m *Edge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Edge_SetEdgeTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_SetEdgeTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_SetEdgeTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_SetEdgeTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_SetEdgeTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_SetEdgeTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Typ != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_CreateServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_CreateServerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_CreateServerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc0
	}
	if m.LineId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.LineId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.BossId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if len(m.CardMap) > 0 {
		for k := range m.CardMap {
			v := m.CardMap[k]
			baseI := i
			i = encodeVarintEdge(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEdge(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEdge(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.MatchServerId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.MatchServerId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.BossEffects) > 0 {
		dAtA2 := make([]byte, len(m.BossEffects)*10)
		var j1 int
		for _, num1 := range m.BossEffects {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEdge(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.MonsterEffects) > 0 {
		dAtA4 := make([]byte, len(m.MonsterEffects)*10)
		var j3 int
		for _, num1 := range m.MonsterEffects {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintEdge(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Bots) > 0 {
		for iNdEx := len(m.Bots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEdge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.RoomId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Damages) > 0 {
		for k := range m.Damages {
			v := m.Damages[k]
			baseI := i
			i = encodeVarintEdge(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintEdge(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintEdge(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TotalDamage != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.TotalDamage))
		i--
		dAtA[i] = 0x30
	}
	if len(m.GuildDayId) > 0 {
		i -= len(m.GuildDayId)
		copy(dAtA[i:], m.GuildDayId)
		i = encodeVarintEdge(dAtA, i, uint64(len(m.GuildDayId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintEdge(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x22
	}
	if m.CpuWeight != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.CpuWeight))
		i--
		dAtA[i] = 0x18
	}
	if m.MapSceneId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.MapSceneId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_CreateServerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_CreateServerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_CreateServerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintEdge(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MapSceneId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.MapSceneId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_PlayerChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_PlayerChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_PlayerChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAdd {
		i--
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintEdge(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BattleId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_KillBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_KillBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_KillBattleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_KillBattleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_KillBattleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_KillBattleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Edge_KillPlayers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_KillPlayers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_KillPlayers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintEdge(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Edge_KillPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_KillPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_KillPlayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Players) > 0 {
		for k := range m.Players {
			v := m.Players[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintEdge(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintEdge(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEdge(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Edge_KillPlayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_KillPlayerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_KillPlayerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Edge_NotifyEdgeKillSelfPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_NotifyEdgeKillSelfPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_NotifyEdgeKillSelfPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_MonsterBossCreateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_MonsterBossCreateInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_MonsterBossCreateInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransPort != nil {
		{
			size, err := m.TransPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MapId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if m.MonsterConfigId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.MonsterConfigId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_MonsterBossDeadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_MonsterBossDeadInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_MonsterBossDeadInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextRefreshTime != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.NextRefreshTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Killer) > 0 {
		i -= len(m.Killer)
		copy(dAtA[i:], m.Killer)
		i = encodeVarintEdge(dAtA, i, uint64(len(m.Killer)))
		i--
		dAtA[i] = 0x22
	}
	if m.MapId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if m.MonsterConfigId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.MonsterConfigId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_NotCanEnterPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_NotCanEnterPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_NotCanEnterPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BossId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edge_BattleNotifyListenPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge_BattleNotifyListenPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edge_BattleNotifyListenPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OldPort != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.OldPort))
		i--
		dAtA[i] = 0x20
	}
	if m.MapId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if m.Port != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEdge(dAtA []byte, offset int, v uint64) int {
	offset -= sovEdge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Edge) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Edge_SetEdgeTypeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_SetEdgeTypeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Success {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Success)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_CreateServerRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapSceneId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_scene_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapSceneId))
		needWriteComma = true
	}
	if m.CpuWeight != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cpu_weight")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CpuWeight))
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.GuildDayId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_day_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildDayId)
		needWriteComma = true
	}
	if m.TotalDamage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDamage))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("damages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Damages == nil {
		w.RawString("null")
	} else if len(m.Damages) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDamages := len(m.Damages)
		for k, v := range m.Damages {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlDamages--
			if mlDamages != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.RoomId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("bots")
	w.RawByte('"')
	w.RawByte(':')
	if m.Bots == nil {
		w.RawString("null")
	} else if len(m.Bots) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Bots {
			v.JsonBytes(w)
			if i != len(m.Bots)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("monster_effects")
	w.RawByte('"')
	w.RawByte(':')
	if m.MonsterEffects == nil {
		w.RawString("null")
	} else if len(m.MonsterEffects) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.MonsterEffects {
			w.Int64(int64(v))
			if i != len(m.MonsterEffects)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_effects")
	w.RawByte('"')
	w.RawByte(':')
	if m.BossEffects == nil {
		w.RawString("null")
	} else if len(m.BossEffects) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BossEffects {
			w.Int64(int64(v))
			if i != len(m.BossEffects)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.MatchServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("match_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MatchServerId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("card_map")
	w.RawByte('"')
	w.RawByte(':')
	if m.CardMap == nil {
		w.RawString("null")
	} else if len(m.CardMap) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCardMap := len(m.CardMap)
		for k, v := range m.CardMap {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCardMap--
			if mlCardMap != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.BossId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossId))
		needWriteComma = true
	}
	if m.LineId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("line_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LineId))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_CreateServerResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapSceneId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_scene_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapSceneId))
		needWriteComma = true
	}
	if m.Ip != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ip")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Ip)
		needWriteComma = true
	}
	if m.Port != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("port")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Port))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_PlayerChange) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			w.String(v)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsAdd {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_add")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAdd)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_KillBattleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_KillBattleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Success {
		w.RawByte('"')
		w.RawString("success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Success)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_KillPlayers) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			w.String(v)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_KillPlayerRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("players")
	w.RawByte('"')
	w.RawByte(':')
	if m.Players == nil {
		w.RawString("null")
	} else if len(m.Players) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlPlayers := len(m.Players)
		for k, v := range m.Players {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlPlayers--
			if mlPlayers != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_KillPlayerResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Edge_NotifyEdgeKillSelfPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_MonsterBossCreateInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MonsterConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("monster_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterConfigId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("trans_port")
	w.RawByte('"')
	w.RawByte(':')
	m.TransPort.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_MonsterBossDeadInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MonsterConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("monster_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterConfigId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.Killer != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("killer")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Killer)
		needWriteComma = true
	}
	if m.NextRefreshTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRefreshTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_NotCanEnterPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.BossId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge_BattleNotifyListenPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.Port != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("port")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Port))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.OldPort != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("old_port")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OldPort))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Edge) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge) GoString() string {
	return m.String()
}

func (m *Edge_SetEdgeTypeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_SetEdgeTypeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_SetEdgeTypeRequest) GoString() string {
	return m.String()
}

func (m *Edge_SetEdgeTypeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_SetEdgeTypeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_SetEdgeTypeResponse) GoString() string {
	return m.String()
}

func (m *Edge_CreateServerRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_CreateServerRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_CreateServerRequest) GoString() string {
	return m.String()
}

func (m *Edge_CreateServerResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_CreateServerResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_CreateServerResponse) GoString() string {
	return m.String()
}

func (m *Edge_PlayerChange) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_PlayerChange) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_PlayerChange) GoString() string {
	return m.String()
}

func (m *Edge_KillBattleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_KillBattleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_KillBattleRequest) GoString() string {
	return m.String()
}

func (m *Edge_KillBattleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_KillBattleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_KillBattleResponse) GoString() string {
	return m.String()
}

func (m *Edge_KillPlayers) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_KillPlayers) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_KillPlayers) GoString() string {
	return m.String()
}

func (m *Edge_KillPlayerRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_KillPlayerRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_KillPlayerRequest) GoString() string {
	return m.String()
}

func (m *Edge_KillPlayerResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_KillPlayerResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_KillPlayerResponse) GoString() string {
	return m.String()
}

func (m *Edge_NotifyEdgeKillSelfPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_NotifyEdgeKillSelfPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_NotifyEdgeKillSelfPush) GoString() string {
	return m.String()
}

func (m *Edge_MonsterBossCreateInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_MonsterBossCreateInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_MonsterBossCreateInfo) GoString() string {
	return m.String()
}

func (m *Edge_MonsterBossDeadInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_MonsterBossDeadInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_MonsterBossDeadInfo) GoString() string {
	return m.String()
}

func (m *Edge_NotCanEnterPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_NotCanEnterPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_NotCanEnterPush) GoString() string {
	return m.String()
}

func (m *Edge_BattleNotifyListenPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Edge_BattleNotifyListenPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Edge_BattleNotifyListenPush) GoString() string {
	return m.String()
}

func (m *Edge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Edge_SetEdgeTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovEdge(uint64(m.Typ))
	}
	return n
}

func (m *Edge_SetEdgeTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovEdge(uint64(m.Typ))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *Edge_CreateServerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovEdge(uint64(m.BattleId))
	}
	if m.MapSceneId != 0 {
		n += 1 + sovEdge(uint64(m.MapSceneId))
	}
	if m.CpuWeight != 0 {
		n += 1 + sovEdge(uint64(m.CpuWeight))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovEdge(uint64(l))
	}
	l = len(m.GuildDayId)
	if l > 0 {
		n += 1 + l + sovEdge(uint64(l))
	}
	if m.TotalDamage != 0 {
		n += 1 + sovEdge(uint64(m.TotalDamage))
	}
	if len(m.Damages) > 0 {
		for k, v := range m.Damages {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEdge(uint64(len(k))) + 1 + sovEdge(uint64(v))
			n += mapEntrySize + 1 + sovEdge(uint64(mapEntrySize))
		}
	}
	if m.RoomId != 0 {
		n += 2 + sovEdge(uint64(m.RoomId))
	}
	if len(m.Bots) > 0 {
		for _, e := range m.Bots {
			l = e.Size()
			n += 2 + l + sovEdge(uint64(l))
		}
	}
	if len(m.MonsterEffects) > 0 {
		l = 0
		for _, e := range m.MonsterEffects {
			l += sovEdge(uint64(e))
		}
		n += 2 + sovEdge(uint64(l)) + l
	}
	if len(m.BossEffects) > 0 {
		l = 0
		for _, e := range m.BossEffects {
			l += sovEdge(uint64(e))
		}
		n += 2 + sovEdge(uint64(l)) + l
	}
	if m.MatchServerId != 0 {
		n += 2 + sovEdge(uint64(m.MatchServerId))
	}
	if len(m.CardMap) > 0 {
		for k, v := range m.CardMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEdge(uint64(len(k))) + 1 + sovEdge(uint64(v))
			n += mapEntrySize + 2 + sovEdge(uint64(mapEntrySize))
		}
	}
	if m.BossId != 0 {
		n += 2 + sovEdge(uint64(m.BossId))
	}
	if m.LineId != 0 {
		n += 2 + sovEdge(uint64(m.LineId))
	}
	if m.Typ != 0 {
		n += 2 + sovEdge(uint64(m.Typ))
	}
	return n
}

func (m *Edge_CreateServerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovEdge(uint64(m.BattleId))
	}
	if m.MapSceneId != 0 {
		n += 1 + sovEdge(uint64(m.MapSceneId))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovEdge(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovEdge(uint64(m.Port))
	}
	return n
}

func (m *Edge_PlayerChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovEdge(uint64(m.BattleId))
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovEdge(uint64(l))
		}
	}
	if m.IsAdd {
		n += 2
	}
	return n
}

func (m *Edge_KillBattleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovEdge(uint64(m.BattleId))
	}
	return n
}

func (m *Edge_KillBattleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *Edge_KillPlayers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovEdge(uint64(l))
		}
	}
	return n
}

func (m *Edge_KillPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for k, v := range m.Players {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEdge(uint64(l))
			}
			mapEntrySize := 1 + sovEdge(uint64(k)) + l
			n += mapEntrySize + 1 + sovEdge(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Edge_KillPlayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Edge_NotifyEdgeKillSelfPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovEdge(uint64(m.BattleId))
	}
	return n
}

func (m *Edge_MonsterBossCreateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovEdge(uint64(m.BattleId))
	}
	if m.MonsterConfigId != 0 {
		n += 1 + sovEdge(uint64(m.MonsterConfigId))
	}
	if m.MapId != 0 {
		n += 1 + sovEdge(uint64(m.MapId))
	}
	if m.TransPort != nil {
		l = m.TransPort.Size()
		n += 1 + l + sovEdge(uint64(l))
	}
	return n
}

func (m *Edge_MonsterBossDeadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovEdge(uint64(m.BattleId))
	}
	if m.MonsterConfigId != 0 {
		n += 1 + sovEdge(uint64(m.MonsterConfigId))
	}
	if m.MapId != 0 {
		n += 1 + sovEdge(uint64(m.MapId))
	}
	l = len(m.Killer)
	if l > 0 {
		n += 1 + l + sovEdge(uint64(l))
	}
	if m.NextRefreshTime != 0 {
		n += 1 + sovEdge(uint64(m.NextRefreshTime))
	}
	return n
}

func (m *Edge_NotCanEnterPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovEdge(uint64(m.BattleId))
	}
	if m.BossId != 0 {
		n += 1 + sovEdge(uint64(m.BossId))
	}
	return n
}

func (m *Edge_BattleNotifyListenPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovEdge(uint64(m.BattleId))
	}
	if m.Port != 0 {
		n += 1 + sovEdge(uint64(m.Port))
	}
	if m.MapId != 0 {
		n += 1 + sovEdge(uint64(m.MapId))
	}
	if m.OldPort != 0 {
		n += 1 + sovEdge(uint64(m.OldPort))
	}
	return n
}

func sovEdge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEdge(x uint64) (n int) {
	return sovEdge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Edge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_SetEdgeTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetEdgeTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetEdgeTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.EdgeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_SetEdgeTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetEdgeTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetEdgeTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.EdgeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_CreateServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapSceneId", wireType)
			}
			m.MapSceneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapSceneId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuWeight", wireType)
			}
			m.CpuWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuWeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildDayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildDayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamage", wireType)
			}
			m.TotalDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Damages == nil {
				m.Damages = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEdge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEdge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEdge
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEdge
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEdge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEdge(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEdge
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Damages[mapkey] = mapvalue
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bots = append(m.Bots, &models.Bot{})
			if err := m.Bots[len(m.Bots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEdge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MonsterEffects = append(m.MonsterEffects, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEdge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEdge
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEdge
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MonsterEffects) == 0 {
					m.MonsterEffects = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEdge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MonsterEffects = append(m.MonsterEffects, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterEffects", wireType)
			}
		case 23:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEdge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BossEffects = append(m.BossEffects, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEdge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEdge
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEdge
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BossEffects) == 0 {
					m.BossEffects = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEdge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BossEffects = append(m.BossEffects, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BossEffects", wireType)
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchServerId", wireType)
			}
			m.MatchServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CardMap == nil {
				m.CardMap = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEdge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEdge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEdge
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEdge
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEdge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEdge(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEdge
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CardMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineId", wireType)
			}
			m.LineId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1000:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.EdgeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_CreateServerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapSceneId", wireType)
			}
			m.MapSceneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapSceneId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_PlayerChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_KillBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_KillBattleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillBattleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillBattleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_KillPlayers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillPlayers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillPlayers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_KillPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Players == nil {
				m.Players = make(map[int64]*Edge_KillPlayers)
			}
			var mapkey int64
			var mapvalue *Edge_KillPlayers
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEdge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEdge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEdge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEdge
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEdge
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Edge_KillPlayers{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEdge(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEdge
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Players[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_KillPlayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillPlayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillPlayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_NotifyEdgeKillSelfPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyEdgeKillSelfPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyEdgeKillSelfPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_MonsterBossCreateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterBossCreateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterBossCreateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterConfigId", wireType)
			}
			m.MonsterConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransPort == nil {
				m.TransPort = &models.Vec2{}
			}
			if err := m.TransPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_MonsterBossDeadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterBossDeadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterBossDeadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterConfigId", wireType)
			}
			m.MonsterConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Killer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_NotCanEnterPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotCanEnterPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotCanEnterPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge_BattleNotifyListenPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleNotifyListenPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleNotifyListenPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPort", wireType)
			}
			m.OldPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldPort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEdge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEdge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEdge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEdge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEdge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEdge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEdge = fmt.Errorf("proto: unexpected end of group")
)
