// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/recommend-service/recommend.proto

package recommend

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecommendErrorCode int32

const (
	RecommendErrorCode_ErrRecommendInvalidInput RecommendErrorCode = 0
	RecommendErrorCode_ErrRecommendNumTooLarge  RecommendErrorCode = 1
)

var RecommendErrorCode_name = map[int32]string{
	0: "ErrRecommendInvalidInput",
	1: "ErrRecommendNumTooLarge",
}

var RecommendErrorCode_value = map[string]int32{
	"ErrRecommendInvalidInput": 0,
	"ErrRecommendNumTooLarge":  1,
}

func (RecommendErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0}
}

type Recommend struct {
}

func (m *Recommend) Reset()      { *m = Recommend{} }
func (*Recommend) ProtoMessage() {}
func (*Recommend) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0}
}
func (m *Recommend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend.Merge(m, src)
}
func (m *Recommend) XXX_Size() int {
	return m.Size()
}
func (m *Recommend) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend proto.InternalMessageInfo

func (*Recommend) XXX_MessageName() string {
	return "recommend.Recommend"
}

// 推荐好友
type Recommend_RecommendRequest struct {
	Language int64 `protobuf:"varint,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (m *Recommend_RecommendRequest) Reset()      { *m = Recommend_RecommendRequest{} }
func (*Recommend_RecommendRequest) ProtoMessage() {}
func (*Recommend_RecommendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0, 0}
}
func (m *Recommend_RecommendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend_RecommendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend_RecommendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend_RecommendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend_RecommendRequest.Merge(m, src)
}
func (m *Recommend_RecommendRequest) XXX_Size() int {
	return m.Size()
}
func (m *Recommend_RecommendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend_RecommendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend_RecommendRequest proto.InternalMessageInfo

func (m *Recommend_RecommendRequest) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (*Recommend_RecommendRequest) XXX_MessageName() string {
	return "recommend.Recommend.RecommendRequest"
}

type Recommend_RecommendResponse struct {
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *Recommend_RecommendResponse) Reset()      { *m = Recommend_RecommendResponse{} }
func (*Recommend_RecommendResponse) ProtoMessage() {}
func (*Recommend_RecommendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0, 1}
}
func (m *Recommend_RecommendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend_RecommendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend_RecommendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend_RecommendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend_RecommendResponse.Merge(m, src)
}
func (m *Recommend_RecommendResponse) XXX_Size() int {
	return m.Size()
}
func (m *Recommend_RecommendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend_RecommendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend_RecommendResponse proto.InternalMessageInfo

func (m *Recommend_RecommendResponse) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (*Recommend_RecommendResponse) XXX_MessageName() string {
	return "recommend.Recommend.RecommendResponse"
}

// 获取各语言对应人数
type Recommend_GetUserCountRequest struct {
}

func (m *Recommend_GetUserCountRequest) Reset()      { *m = Recommend_GetUserCountRequest{} }
func (*Recommend_GetUserCountRequest) ProtoMessage() {}
func (*Recommend_GetUserCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0, 2}
}
func (m *Recommend_GetUserCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend_GetUserCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend_GetUserCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend_GetUserCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend_GetUserCountRequest.Merge(m, src)
}
func (m *Recommend_GetUserCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *Recommend_GetUserCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend_GetUserCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend_GetUserCountRequest proto.InternalMessageInfo

func (*Recommend_GetUserCountRequest) XXX_MessageName() string {
	return "recommend.Recommend.GetUserCountRequest"
}

type Recommend_GetUserCountResponse struct {
	Count map[int64]int64 `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Recommend_GetUserCountResponse) Reset()      { *m = Recommend_GetUserCountResponse{} }
func (*Recommend_GetUserCountResponse) ProtoMessage() {}
func (*Recommend_GetUserCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0, 3}
}
func (m *Recommend_GetUserCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend_GetUserCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend_GetUserCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend_GetUserCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend_GetUserCountResponse.Merge(m, src)
}
func (m *Recommend_GetUserCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *Recommend_GetUserCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend_GetUserCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend_GetUserCountResponse proto.InternalMessageInfo

func (m *Recommend_GetUserCountResponse) GetCount() map[int64]int64 {
	if m != nil {
		return m.Count
	}
	return nil
}

func (*Recommend_GetUserCountResponse) XXX_MessageName() string {
	return "recommend.Recommend.GetUserCountResponse"
}

// 获取单个语言当前下标后n个用户
type Recommend_GetUserIdsRequest struct {
	Language int64 `protobuf:"varint,1,opt,name=language,proto3" json:"language,omitempty"`
	Start    int64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End      int64 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *Recommend_GetUserIdsRequest) Reset()      { *m = Recommend_GetUserIdsRequest{} }
func (*Recommend_GetUserIdsRequest) ProtoMessage() {}
func (*Recommend_GetUserIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0, 4}
}
func (m *Recommend_GetUserIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend_GetUserIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend_GetUserIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend_GetUserIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend_GetUserIdsRequest.Merge(m, src)
}
func (m *Recommend_GetUserIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *Recommend_GetUserIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend_GetUserIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend_GetUserIdsRequest proto.InternalMessageInfo

func (m *Recommend_GetUserIdsRequest) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (m *Recommend_GetUserIdsRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Recommend_GetUserIdsRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (*Recommend_GetUserIdsRequest) XXX_MessageName() string {
	return "recommend.Recommend.GetUserIdsRequest"
}

type Recommend_GetUserIdsResponse struct {
	RoleIds []string `protobuf:"bytes,1,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (m *Recommend_GetUserIdsResponse) Reset()      { *m = Recommend_GetUserIdsResponse{} }
func (*Recommend_GetUserIdsResponse) ProtoMessage() {}
func (*Recommend_GetUserIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0, 5}
}
func (m *Recommend_GetUserIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend_GetUserIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend_GetUserIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend_GetUserIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend_GetUserIdsResponse.Merge(m, src)
}
func (m *Recommend_GetUserIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *Recommend_GetUserIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend_GetUserIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend_GetUserIdsResponse proto.InternalMessageInfo

func (m *Recommend_GetUserIdsResponse) GetRoleIds() []string {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

func (*Recommend_GetUserIdsResponse) XXX_MessageName() string {
	return "recommend.Recommend.GetUserIdsResponse"
}

// 新增角色
type Recommend_UserEnterEvent struct {
	Role *models.Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (m *Recommend_UserEnterEvent) Reset()      { *m = Recommend_UserEnterEvent{} }
func (*Recommend_UserEnterEvent) ProtoMessage() {}
func (*Recommend_UserEnterEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0, 6}
}
func (m *Recommend_UserEnterEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend_UserEnterEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend_UserEnterEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend_UserEnterEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend_UserEnterEvent.Merge(m, src)
}
func (m *Recommend_UserEnterEvent) XXX_Size() int {
	return m.Size()
}
func (m *Recommend_UserEnterEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend_UserEnterEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend_UserEnterEvent proto.InternalMessageInfo

func (m *Recommend_UserEnterEvent) GetRole() *models.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (*Recommend_UserEnterEvent) XXX_MessageName() string {
	return "recommend.Recommend.UserEnterEvent"
}

// 用户语言更改
type Recommend_UserLangChangeEvent struct {
	Language int64 `protobuf:"varint,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (m *Recommend_UserLangChangeEvent) Reset()      { *m = Recommend_UserLangChangeEvent{} }
func (*Recommend_UserLangChangeEvent) ProtoMessage() {}
func (*Recommend_UserLangChangeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e8ad674fe235f20, []int{0, 7}
}
func (m *Recommend_UserLangChangeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend_UserLangChangeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend_UserLangChangeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend_UserLangChangeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend_UserLangChangeEvent.Merge(m, src)
}
func (m *Recommend_UserLangChangeEvent) XXX_Size() int {
	return m.Size()
}
func (m *Recommend_UserLangChangeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend_UserLangChangeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend_UserLangChangeEvent proto.InternalMessageInfo

func (m *Recommend_UserLangChangeEvent) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (*Recommend_UserLangChangeEvent) XXX_MessageName() string {
	return "recommend.Recommend.UserLangChangeEvent"
}
func init() {
	proto.RegisterEnum("recommend.RecommendErrorCode", RecommendErrorCode_name, RecommendErrorCode_value)
	proto.RegisterType((*Recommend)(nil), "recommend.Recommend")
	proto.RegisterType((*Recommend_RecommendRequest)(nil), "recommend.Recommend.RecommendRequest")
	proto.RegisterType((*Recommend_RecommendResponse)(nil), "recommend.Recommend.RecommendResponse")
	proto.RegisterType((*Recommend_GetUserCountRequest)(nil), "recommend.Recommend.GetUserCountRequest")
	proto.RegisterType((*Recommend_GetUserCountResponse)(nil), "recommend.Recommend.GetUserCountResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "recommend.Recommend.GetUserCountResponse.CountEntry")
	proto.RegisterType((*Recommend_GetUserIdsRequest)(nil), "recommend.Recommend.GetUserIdsRequest")
	proto.RegisterType((*Recommend_GetUserIdsResponse)(nil), "recommend.Recommend.GetUserIdsResponse")
	proto.RegisterType((*Recommend_UserEnterEvent)(nil), "recommend.Recommend.UserEnterEvent")
	proto.RegisterType((*Recommend_UserLangChangeEvent)(nil), "recommend.Recommend.UserLangChangeEvent")
}

func init() {
	proto.RegisterFile("proto/recommend-service/recommend.proto", fileDescriptor_2e8ad674fe235f20)
}

var fileDescriptor_2e8ad674fe235f20 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6b, 0x13, 0x4f,
	0x18, 0xde, 0x49, 0xda, 0xdf, 0xaf, 0x7d, 0x2b, 0x35, 0x99, 0x36, 0x64, 0x5d, 0x61, 0x08, 0xf5,
	0x60, 0x11, 0xdc, 0x60, 0xea, 0x21, 0x78, 0x34, 0x04, 0x89, 0x14, 0x91, 0x45, 0x11, 0xbc, 0xc8,
	0x36, 0xfb, 0x12, 0x17, 0x37, 0x33, 0x71, 0x66, 0x37, 0xd0, 0xab, 0x1f, 0x44, 0x0a, 0xa2, 0x20,
	0x45, 0x10, 0x0f, 0x1e, 0x14, 0x3d, 0xf9, 0x71, 0x28, 0xde, 0xf4, 0xda, 0x63, 0x8f, 0x3d, 0xea,
	0x86, 0xc6, 0x78, 0xf3, 0x4f, 0x90, 0xfd, 0x70, 0x13, 0x8b, 0x88, 0xb7, 0x7d, 0x9e, 0xe7, 0x7d,
	0x9e, 0x67, 0xe6, 0x5d, 0x06, 0x4e, 0xf6, 0xa4, 0xf0, 0x45, 0x55, 0x62, 0x5b, 0x74, 0xbb, 0xc8,
	0x9d, 0xd3, 0x0a, 0x65, 0xdf, 0x6d, 0xe3, 0x84, 0x31, 0xe3, 0x09, 0x3a, 0x9f, 0x11, 0x46, 0x39,
	0xf1, 0x74, 0x85, 0x83, 0x9e, 0xaa, 0x6e, 0xd8, 0x0a, 0x93, 0x99, 0x43, 0x42, 0xa0, 0x50, 0x26,
	0xc2, 0xca, 0x60, 0x06, 0xe6, 0xad, 0xcc, 0x6f, 0x42, 0x21, 0x03, 0x16, 0xde, 0x0e, 0x50, 0xf9,
	0xd4, 0x80, 0x39, 0xcf, 0xe6, 0x9d, 0xc0, 0xee, 0xa0, 0x4e, 0x2a, 0x64, 0x35, 0x6f, 0x65, 0xd8,
	0x38, 0x01, 0xc5, 0xa9, 0x79, 0xd5, 0x13, 0x5c, 0x21, 0x5d, 0x84, 0x9c, 0xeb, 0xe8, 0xa4, 0x92,
	0x5f, 0x9d, 0xb7, 0x72, 0xae, 0x63, 0x94, 0x60, 0xe9, 0x02, 0xfa, 0x57, 0x15, 0xca, 0x86, 0x08,
	0xb8, 0x9f, 0xe6, 0x1a, 0xcf, 0x09, 0x2c, 0xff, 0xce, 0xa7, 0xfe, 0x8b, 0x30, 0xdb, 0x8e, 0x88,
	0x38, 0x62, 0xa1, 0x76, 0xd6, 0x9c, 0x5c, 0x38, 0x2b, 0x33, 0xff, 0xe4, 0x34, 0x63, 0xd4, 0xe4,
	0xbe, 0xdc, 0xb4, 0x92, 0x08, 0xa3, 0x0e, 0x30, 0x21, 0x69, 0x01, 0xf2, 0xb7, 0x70, 0x33, 0xbd,
	0x45, 0xf4, 0x49, 0x97, 0x61, 0xb6, 0x6f, 0x7b, 0x01, 0xea, 0xb9, 0x98, 0x4b, 0xc0, 0xb9, 0x5c,
	0x9d, 0x18, 0xd7, 0xa0, 0x98, 0x76, 0xb4, 0x1c, 0xf5, 0x0f, 0xbb, 0x88, 0xa2, 0x94, 0x6f, 0x4b,
	0xff, 0x57, 0x54, 0x0c, 0xa2, 0x4a, 0xe4, 0x8e, 0x9e, 0x4f, 0x2a, 0xa3, 0x1d, 0x57, 0x81, 0x4e,
	0x07, 0xa7, 0x97, 0x3e, 0x06, 0x73, 0x52, 0x78, 0x78, 0xc3, 0x75, 0x54, 0xba, 0xba, 0xff, 0x23,
	0xdc, 0x72, 0x94, 0x51, 0x83, 0xc5, 0x68, 0xba, 0xc9, 0x7d, 0x94, 0xcd, 0x3e, 0x72, 0x9f, 0x56,
	0x60, 0x26, 0x12, 0xe3, 0x23, 0x2c, 0xd4, 0x8e, 0x98, 0xc9, 0x6f, 0x35, 0x2d, 0xe1, 0xa1, 0x15,
	0x2b, 0xc6, 0x19, 0x58, 0x8a, 0x3c, 0xeb, 0x36, 0xef, 0x34, 0x6e, 0xda, 0xbc, 0x83, 0x89, 0xf1,
	0x2f, 0xe7, 0x3f, 0x75, 0x97, 0x00, 0xcd, 0xf6, 0xdb, 0x94, 0x52, 0xc8, 0x86, 0x70, 0x90, 0xae,
	0x81, 0xde, 0x94, 0x32, 0x13, 0x5a, 0xbc, 0x6f, 0x7b, 0xae, 0xd3, 0xe2, 0xbd, 0xc0, 0x2f, 0x68,
	0x46, 0x69, 0x6b, 0x47, 0x2f, 0xd2, 0xa3, 0xa3, 0xa7, 0x2f, 0x46, 0xdb, 0x0f, 0xbe, 0x3d, 0xbb,
	0x37, 0xfe, 0xf4, 0xe4, 0xe0, 0xfe, 0x2b, 0x5a, 0x87, 0xf2, 0xb4, 0xe9, 0x52, 0xd0, 0xbd, 0x22,
	0xc4, 0xba, 0x2d, 0x3b, 0x58, 0x20, 0xc6, 0xf1, 0xad, 0x1d, 0xbd, 0x4c, 0x4b, 0xe3, 0x77, 0x1f,
	0x47, 0x1f, 0xee, 0x8c, 0xb6, 0xdf, 0x8f, 0x1e, 0xbe, 0xfd, 0x3e, 0x78, 0x34, 0xfe, 0x3c, 0x38,
	0x78, 0xf9, 0xfa, 0xfc, 0xe5, 0xfd, 0xaf, 0x4c, 0x7b, 0x13, 0x32, 0xb2, 0x1b, 0x32, 0xb2, 0x17,
	0x32, 0xf2, 0x25, 0x64, 0x64, 0x1c, 0x32, 0xed, 0x47, 0xc8, 0xc8, 0xe3, 0x21, 0xd3, 0x76, 0x87,
	0x8c, 0xec, 0x0d, 0x99, 0xb6, 0x3f, 0x64, 0xda, 0xf5, 0x95, 0xb6, 0x70, 0x79, 0xfc, 0x30, 0x50,
	0x56, 0xa3, 0x32, 0xc1, 0xab, 0x87, 0x9e, 0xcd, 0xc6, 0x7f, 0x31, 0xb1, 0xf6, 0x33, 0x00, 0x00,
	0xff, 0xff, 0x3c, 0x2a, 0xa4, 0xb8, 0x50, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecommend.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecommend_RecommendRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecommend_RecommendResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecommend_GetUserCountRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecommend_GetUserCountResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecommend_GetUserIdsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecommend_GetUserIdsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecommend_UserEnterEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecommend_UserLangChangeEvent.Get().(proto.Message)
	})
}

var poolRecommend = &sync.Pool{New: func() interface{} { return &Recommend{} }}

func (m *Recommend) ReleasePool() { m.Reset(); poolRecommend.Put(m); m = nil }

var poolRecommend_RecommendRequest = &sync.Pool{New: func() interface{} { return &Recommend_RecommendRequest{} }}

func (m *Recommend_RecommendRequest) ReleasePool() {
	m.Reset()
	poolRecommend_RecommendRequest.Put(m)
	m = nil
}

var poolRecommend_RecommendResponse = &sync.Pool{New: func() interface{} { return &Recommend_RecommendResponse{} }}

func (m *Recommend_RecommendResponse) ReleasePool() {
	m.Reset()
	poolRecommend_RecommendResponse.Put(m)
	m = nil
}

var poolRecommend_GetUserCountRequest = &sync.Pool{New: func() interface{} { return &Recommend_GetUserCountRequest{} }}

func (m *Recommend_GetUserCountRequest) ReleasePool() {
	m.Reset()
	poolRecommend_GetUserCountRequest.Put(m)
	m = nil
}

var poolRecommend_GetUserCountResponse = &sync.Pool{New: func() interface{} { return &Recommend_GetUserCountResponse{} }}

func (m *Recommend_GetUserCountResponse) ReleasePool() {
	m.Reset()
	poolRecommend_GetUserCountResponse.Put(m)
	m = nil
}

var poolRecommend_GetUserIdsRequest = &sync.Pool{New: func() interface{} { return &Recommend_GetUserIdsRequest{} }}

func (m *Recommend_GetUserIdsRequest) ReleasePool() {
	m.Reset()
	poolRecommend_GetUserIdsRequest.Put(m)
	m = nil
}

var poolRecommend_GetUserIdsResponse = &sync.Pool{New: func() interface{} { return &Recommend_GetUserIdsResponse{} }}

func (m *Recommend_GetUserIdsResponse) ReleasePool() {
	m.Reset()
	poolRecommend_GetUserIdsResponse.Put(m)
	m = nil
}

var poolRecommend_UserEnterEvent = &sync.Pool{New: func() interface{} { return &Recommend_UserEnterEvent{} }}

func (m *Recommend_UserEnterEvent) ReleasePool() {
	m.Reset()
	poolRecommend_UserEnterEvent.Put(m)
	m = nil
}

var poolRecommend_UserLangChangeEvent = &sync.Pool{New: func() interface{} { return &Recommend_UserLangChangeEvent{} }}

func (m *Recommend_UserLangChangeEvent) ReleasePool() {
	m.Reset()
	poolRecommend_UserLangChangeEvent.Put(m)
	m = nil
}
func (x RecommendErrorCode) String() string {
	s, ok := RecommendErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Recommend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recommend)
	if !ok {
		that2, ok := that.(Recommend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Recommend_RecommendRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recommend_RecommendRequest)
	if !ok {
		that2, ok := that.(Recommend_RecommendRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	return true
}
func (this *Recommend_RecommendResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recommend_RecommendResponse)
	if !ok {
		that2, ok := that.(Recommend_RecommendResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Id) != len(that1.Id) {
		return false
	}
	for i := range this.Id {
		if this.Id[i] != that1.Id[i] {
			return false
		}
	}
	return true
}
func (this *Recommend_GetUserCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recommend_GetUserCountRequest)
	if !ok {
		that2, ok := that.(Recommend_GetUserCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Recommend_GetUserCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recommend_GetUserCountResponse)
	if !ok {
		that2, ok := that.(Recommend_GetUserCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Count) != len(that1.Count) {
		return false
	}
	for i := range this.Count {
		if this.Count[i] != that1.Count[i] {
			return false
		}
	}
	return true
}
func (this *Recommend_GetUserIdsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recommend_GetUserIdsRequest)
	if !ok {
		that2, ok := that.(Recommend_GetUserIdsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.End != that1.End {
		return false
	}
	return true
}
func (this *Recommend_GetUserIdsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recommend_GetUserIdsResponse)
	if !ok {
		that2, ok := that.(Recommend_GetUserIdsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoleIds) != len(that1.RoleIds) {
		return false
	}
	for i := range this.RoleIds {
		if this.RoleIds[i] != that1.RoleIds[i] {
			return false
		}
	}
	return true
}
func (this *Recommend_UserEnterEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recommend_UserEnterEvent)
	if !ok {
		that2, ok := that.(Recommend_UserEnterEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Role.Equal(that1.Role) {
		return false
	}
	return true
}
func (this *Recommend_UserLangChangeEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Recommend_UserLangChangeEvent)
	if !ok {
		that2, ok := that.(Recommend_UserLangChangeEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	return true
}
func (m *Recommend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Recommend_RecommendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend_RecommendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend_RecommendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Language != 0 {
		i = encodeVarintRecommend(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Recommend_RecommendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend_RecommendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend_RecommendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintRecommend(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Recommend_GetUserCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend_GetUserCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend_GetUserCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Recommend_GetUserCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend_GetUserCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend_GetUserCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Count) > 0 {
		for k := range m.Count {
			v := m.Count[k]
			baseI := i
			i = encodeVarintRecommend(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintRecommend(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRecommend(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Recommend_GetUserIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend_GetUserIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend_GetUserIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintRecommend(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x18
	}
	if m.Start != 0 {
		i = encodeVarintRecommend(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x10
	}
	if m.Language != 0 {
		i = encodeVarintRecommend(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Recommend_GetUserIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend_GetUserIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend_GetUserIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		for iNdEx := len(m.RoleIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleIds[iNdEx])
			copy(dAtA[i:], m.RoleIds[iNdEx])
			i = encodeVarintRecommend(dAtA, i, uint64(len(m.RoleIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Recommend_UserEnterEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend_UserEnterEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend_UserEnterEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecommend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Recommend_UserLangChangeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend_UserLangChangeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend_UserLangChangeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Language != 0 {
		i = encodeVarintRecommend(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecommend(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecommend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Recommend) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Recommend_RecommendRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Language != 0 {
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Recommend_RecommendResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("id")
	w.RawByte('"')
	w.RawByte(':')
	if m.Id == nil {
		w.RawString("null")
	} else if len(m.Id) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Id {
			w.String(v)
			if i != len(m.Id)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Recommend_GetUserCountRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Recommend_GetUserCountResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("count")
	w.RawByte('"')
	w.RawByte(':')
	if m.Count == nil {
		w.RawString("null")
	} else if len(m.Count) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCount := len(m.Count)
		for k, v := range m.Count {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCount--
			if mlCount != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Recommend_GetUserIdsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Language != 0 {
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	if m.Start != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Start))
		needWriteComma = true
	}
	if m.End != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.End))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Recommend_GetUserIdsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleIds == nil {
		w.RawString("null")
	} else if len(m.RoleIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleIds {
			w.String(v)
			if i != len(m.RoleIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Recommend_UserEnterEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	m.Role.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Recommend_UserLangChangeEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Language != 0 {
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Recommend) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Recommend) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Recommend) GoString() string {
	return m.String()
}

func (m *Recommend_RecommendRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Recommend_RecommendRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Recommend_RecommendRequest) GoString() string {
	return m.String()
}

func (m *Recommend_RecommendResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Recommend_RecommendResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Recommend_RecommendResponse) GoString() string {
	return m.String()
}

func (m *Recommend_GetUserCountRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Recommend_GetUserCountRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Recommend_GetUserCountRequest) GoString() string {
	return m.String()
}

func (m *Recommend_GetUserCountResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Recommend_GetUserCountResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Recommend_GetUserCountResponse) GoString() string {
	return m.String()
}

func (m *Recommend_GetUserIdsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Recommend_GetUserIdsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Recommend_GetUserIdsRequest) GoString() string {
	return m.String()
}

func (m *Recommend_GetUserIdsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Recommend_GetUserIdsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Recommend_GetUserIdsResponse) GoString() string {
	return m.String()
}

func (m *Recommend_UserEnterEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Recommend_UserEnterEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Recommend_UserEnterEvent) GoString() string {
	return m.String()
}

func (m *Recommend_UserLangChangeEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Recommend_UserLangChangeEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Recommend_UserLangChangeEvent) GoString() string {
	return m.String()
}

func (m *Recommend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Recommend_RecommendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Language != 0 {
		n += 1 + sovRecommend(uint64(m.Language))
	}
	return n
}

func (m *Recommend_RecommendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovRecommend(uint64(l))
		}
	}
	return n
}

func (m *Recommend_GetUserCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Recommend_GetUserCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Count) > 0 {
		for k, v := range m.Count {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRecommend(uint64(k)) + 1 + sovRecommend(uint64(v))
			n += mapEntrySize + 1 + sovRecommend(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Recommend_GetUserIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Language != 0 {
		n += 1 + sovRecommend(uint64(m.Language))
	}
	if m.Start != 0 {
		n += 1 + sovRecommend(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovRecommend(uint64(m.End))
	}
	return n
}

func (m *Recommend_GetUserIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		for _, s := range m.RoleIds {
			l = len(s)
			n += 1 + l + sovRecommend(uint64(l))
		}
	}
	return n
}

func (m *Recommend_UserEnterEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovRecommend(uint64(l))
	}
	return n
}

func (m *Recommend_UserLangChangeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Language != 0 {
		n += 1 + sovRecommend(uint64(m.Language))
	}
	return n
}

func sovRecommend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecommend(x uint64) (n int) {
	return sovRecommend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Recommend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recommend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recommend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend_RecommendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend_RecommendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecommend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend_GetUserCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend_GetUserCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecommend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecommend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Count == nil {
				m.Count = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRecommend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecommend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRecommend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRecommend(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRecommend
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Count[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend_GetUserIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend_GetUserIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecommend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIds = append(m.RoleIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend_UserEnterEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserEnterEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserEnterEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecommend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecommend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &models.Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend_UserLangChangeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLangChangeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLangChangeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecommend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecommend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecommend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecommend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecommend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecommend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecommend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecommend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecommend = fmt.Errorf("proto: unexpected end of group")
)
