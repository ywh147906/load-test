// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/gen-rank-server/gen.proto

package gen_rank

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	_ "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenRankErrorCode int32

const (
	GenRankErrorCode_ErrGenIsBegin GenRankErrorCode = 0
)

var GenRankErrorCode_name = map[int32]string{
	0: "ErrGenIsBegin",
}

var GenRankErrorCode_value = map[string]int32{
	"ErrGenIsBegin": 0,
}

func (GenRankErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e02f9adf7377546e, []int{0}
}

type GenRank struct {
}

func (m *GenRank) Reset()      { *m = GenRank{} }
func (*GenRank) ProtoMessage() {}
func (*GenRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02f9adf7377546e, []int{0}
}
func (m *GenRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenRank.Merge(m, src)
}
func (m *GenRank) XXX_Size() int {
	return m.Size()
}
func (m *GenRank) XXX_DiscardUnknown() {
	xxx_messageInfo_GenRank.DiscardUnknown(m)
}

var xxx_messageInfo_GenRank proto.InternalMessageInfo

func (*GenRank) XXX_MessageName() string {
	return "gen_rank.GenRank"
}

// 生成排名
type GenRank_GenRequest struct {
}

func (m *GenRank_GenRequest) Reset()      { *m = GenRank_GenRequest{} }
func (*GenRank_GenRequest) ProtoMessage() {}
func (*GenRank_GenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02f9adf7377546e, []int{0, 0}
}
func (m *GenRank_GenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenRank_GenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenRank_GenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenRank_GenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenRank_GenRequest.Merge(m, src)
}
func (m *GenRank_GenRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenRank_GenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenRank_GenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenRank_GenRequest proto.InternalMessageInfo

func (*GenRank_GenRequest) XXX_MessageName() string {
	return "gen_rank.GenRank.GenRequest"
}

type GenRank_GenResponse struct {
}

func (m *GenRank_GenResponse) Reset()      { *m = GenRank_GenResponse{} }
func (*GenRank_GenResponse) ProtoMessage() {}
func (*GenRank_GenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e02f9adf7377546e, []int{0, 1}
}
func (m *GenRank_GenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenRank_GenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenRank_GenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenRank_GenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenRank_GenResponse.Merge(m, src)
}
func (m *GenRank_GenResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenRank_GenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenRank_GenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenRank_GenResponse proto.InternalMessageInfo

func (*GenRank_GenResponse) XXX_MessageName() string {
	return "gen_rank.GenRank.GenResponse"
}
func init() {
	proto.RegisterEnum("gen_rank.GenRankErrorCode", GenRankErrorCode_name, GenRankErrorCode_value)
	proto.RegisterType((*GenRank)(nil), "gen_rank.GenRank")
	proto.RegisterType((*GenRank_GenRequest)(nil), "gen_rank.GenRank.GenRequest")
	proto.RegisterType((*GenRank_GenResponse)(nil), "gen_rank.GenRank.GenResponse")
}

func init() { proto.RegisterFile("proto/gen-rank-server/gen.proto", fileDescriptor_e02f9adf7377546e) }

var fileDescriptor_e02f9adf7377546e = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4f, 0xcd, 0xd3, 0x2d, 0x4a, 0xcc, 0xcb, 0xd6, 0x2d, 0x4e, 0x2d, 0x2a, 0x4b,
	0x2d, 0x02, 0xf1, 0xf5, 0xc0, 0x32, 0x42, 0x1c, 0xe9, 0xa9, 0x79, 0xf1, 0x20, 0x29, 0x29, 0x71,
	0x88, 0xd2, 0xdc, 0xfc, 0x94, 0xd4, 0x9c, 0x62, 0xfd, 0xa4, 0xc4, 0xe2, 0x54, 0x88, 0x12, 0x25,
	0x35, 0x2e, 0x76, 0xf7, 0xd4, 0xbc, 0x20, 0x90, 0x1a, 0x1e, 0x2e, 0x2e, 0x10, 0x33, 0xb5, 0xb0,
	0x34, 0xb5, 0xb8, 0x44, 0x8a, 0x97, 0x8b, 0x1b, 0xcc, 0x2b, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0xd5,
	0xb2, 0xe7, 0x12, 0x80, 0xaa, 0x73, 0x2d, 0x2a, 0xca, 0x2f, 0x72, 0xce, 0x4f, 0x49, 0x15, 0xd2,
	0xe6, 0xe2, 0x75, 0x2d, 0x2a, 0x72, 0x4f, 0xcd, 0xf3, 0x2c, 0x76, 0x4a, 0x4d, 0xcf, 0xcc, 0x13,
	0x60, 0x90, 0x92, 0xe8, 0xda, 0x2a, 0x21, 0x22, 0x24, 0xf4, 0x74, 0xfb, 0xa6, 0xe7, 0xbb, 0xfb,
	0x9f, 0xee, 0x69, 0x78, 0xba, 0xbc, 0xfb, 0xf9, 0x94, 0xf9, 0xcf, 0x3a, 0x26, 0x38, 0xf9, 0xdf,
	0x78, 0x28, 0xc7, 0xb0, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb,
	0x31, 0x9c, 0x78, 0x2c, 0xc7, 0x78, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x8a,
	0xc9, 0xf9, 0x99, 0x79, 0x30, 0x0f, 0x25, 0xe7, 0xe7, 0xe6, 0xe6, 0xe7, 0xe9, 0xc3, 0x7d, 0x0b,
	0xf6, 0x52, 0x12, 0x1b, 0x98, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xe7, 0x9a, 0x98,
	0x06, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGenRank.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGenRank_GenRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGenRank_GenResponse.Get().(proto.Message)
	})
}

var poolGenRank = &sync.Pool{New: func() interface{} { return &GenRank{} }}

func (m *GenRank) ReleasePool() { m.Reset(); poolGenRank.Put(m); m = nil }

var poolGenRank_GenRequest = &sync.Pool{New: func() interface{} { return &GenRank_GenRequest{} }}

func (m *GenRank_GenRequest) ReleasePool() { m.Reset(); poolGenRank_GenRequest.Put(m); m = nil }

var poolGenRank_GenResponse = &sync.Pool{New: func() interface{} { return &GenRank_GenResponse{} }}

func (m *GenRank_GenResponse) ReleasePool() { m.Reset(); poolGenRank_GenResponse.Put(m); m = nil }
func (x GenRankErrorCode) String() string {
	s, ok := GenRankErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GenRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenRank)
	if !ok {
		that2, ok := that.(GenRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GenRank_GenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenRank_GenRequest)
	if !ok {
		that2, ok := that.(GenRank_GenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GenRank_GenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenRank_GenResponse)
	if !ok {
		that2, ok := that.(GenRank_GenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *GenRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GenRank_GenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenRank_GenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenRank_GenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GenRank_GenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenRank_GenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenRank_GenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintGen(dAtA []byte, offset int, v uint64) int {
	offset -= sovGen(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *GenRank) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GenRank_GenRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GenRank_GenResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GenRank) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GenRank) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GenRank) GoString() string {
	return m.String()
}

func (m *GenRank_GenRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GenRank_GenRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GenRank_GenRequest) GoString() string {
	return m.String()
}

func (m *GenRank_GenResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GenRank_GenResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GenRank_GenResponse) GoString() string {
	return m.String()
}

func (m *GenRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenRank_GenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenRank_GenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovGen(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGen(x uint64) (n int) {
	return sovGen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenRank_GenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenRank_GenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGen
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGen
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGen
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGen        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGen          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGen = fmt.Errorf("proto: unexpected end of group")
)
