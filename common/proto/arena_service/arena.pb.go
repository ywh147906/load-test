// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/arena-service/arena.proto

package arena_service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ArenaRanking struct {
}

func (m *ArenaRanking) Reset()      { *m = ArenaRanking{} }
func (*ArenaRanking) ProtoMessage() {}
func (*ArenaRanking) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0}
}
func (m *ArenaRanking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking.Merge(m, src)
}
func (m *ArenaRanking) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking proto.InternalMessageInfo

func (*ArenaRanking) XXX_MessageName() string {
	return "arena_service.ArenaRanking"
}

type ArenaRanking_GetDatasRequest struct {
	Type         models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	StartIndex   int32            `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	Count        int32            `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	RankingIndex string           `protobuf:"bytes,4,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
}

func (m *ArenaRanking_GetDatasRequest) Reset()      { *m = ArenaRanking_GetDatasRequest{} }
func (*ArenaRanking_GetDatasRequest) ProtoMessage() {}
func (*ArenaRanking_GetDatasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 0}
}
func (m *ArenaRanking_GetDatasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_GetDatasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_GetDatasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_GetDatasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_GetDatasRequest.Merge(m, src)
}
func (m *ArenaRanking_GetDatasRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_GetDatasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_GetDatasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_GetDatasRequest proto.InternalMessageInfo

func (m *ArenaRanking_GetDatasRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRanking_GetDatasRequest) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *ArenaRanking_GetDatasRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ArenaRanking_GetDatasRequest) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (*ArenaRanking_GetDatasRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.GetDatasRequest"
}

type ArenaRanking_GetDatasResponse struct {
	Datas []*models.ArenaDataElement `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *ArenaRanking_GetDatasResponse) Reset()      { *m = ArenaRanking_GetDatasResponse{} }
func (*ArenaRanking_GetDatasResponse) ProtoMessage() {}
func (*ArenaRanking_GetDatasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 1}
}
func (m *ArenaRanking_GetDatasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_GetDatasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_GetDatasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_GetDatasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_GetDatasResponse.Merge(m, src)
}
func (m *ArenaRanking_GetDatasResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_GetDatasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_GetDatasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_GetDatasResponse proto.InternalMessageInfo

func (m *ArenaRanking_GetDatasResponse) GetDatas() []*models.ArenaDataElement {
	if m != nil {
		return m.Datas
	}
	return nil
}

func (*ArenaRanking_GetDatasResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.GetDatasResponse"
}

type ArenaRanking_GetSelfDataRequest struct {
	Type         models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RankingIndex string           `protobuf:"bytes,2,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
	RoleId       string           `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *ArenaRanking_GetSelfDataRequest) Reset()      { *m = ArenaRanking_GetSelfDataRequest{} }
func (*ArenaRanking_GetSelfDataRequest) ProtoMessage() {}
func (*ArenaRanking_GetSelfDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 2}
}
func (m *ArenaRanking_GetSelfDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_GetSelfDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_GetSelfDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_GetSelfDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_GetSelfDataRequest.Merge(m, src)
}
func (m *ArenaRanking_GetSelfDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_GetSelfDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_GetSelfDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_GetSelfDataRequest proto.InternalMessageInfo

func (m *ArenaRanking_GetSelfDataRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRanking_GetSelfDataRequest) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ArenaRanking_GetSelfDataRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*ArenaRanking_GetSelfDataRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.GetSelfDataRequest"
}

type ArenaRanking_GetSelfDataResponse struct {
	Element            *models.ArenaDataElement `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
	NextRefreshTime    int64                    `protobuf:"varint,2,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	SeasonOverTime     int64                    `protobuf:"varint,3,opt,name=season_over_time,json=seasonOverTime,proto3" json:"season_over_time,omitempty"`
	NextSettlementTime int64                    `protobuf:"varint,4,opt,name=next_settlement_time,json=nextSettlementTime,proto3" json:"next_settlement_time,omitempty"`
}

func (m *ArenaRanking_GetSelfDataResponse) Reset()      { *m = ArenaRanking_GetSelfDataResponse{} }
func (*ArenaRanking_GetSelfDataResponse) ProtoMessage() {}
func (*ArenaRanking_GetSelfDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 3}
}
func (m *ArenaRanking_GetSelfDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_GetSelfDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_GetSelfDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_GetSelfDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_GetSelfDataResponse.Merge(m, src)
}
func (m *ArenaRanking_GetSelfDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_GetSelfDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_GetSelfDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_GetSelfDataResponse proto.InternalMessageInfo

func (m *ArenaRanking_GetSelfDataResponse) GetElement() *models.ArenaDataElement {
	if m != nil {
		return m.Element
	}
	return nil
}

func (m *ArenaRanking_GetSelfDataResponse) GetNextRefreshTime() int64 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (m *ArenaRanking_GetSelfDataResponse) GetSeasonOverTime() int64 {
	if m != nil {
		return m.SeasonOverTime
	}
	return 0
}

func (m *ArenaRanking_GetSelfDataResponse) GetNextSettlementTime() int64 {
	if m != nil {
		return m.NextSettlementTime
	}
	return 0
}

func (*ArenaRanking_GetSelfDataResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.GetSelfDataResponse"
}

type ArenaRanking_JoinRankingRequest struct {
	Type       models.ArenaType          `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	PlayerInfo *models.ArenaRanking_Info `protobuf:"bytes,2,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
}

func (m *ArenaRanking_JoinRankingRequest) Reset()      { *m = ArenaRanking_JoinRankingRequest{} }
func (*ArenaRanking_JoinRankingRequest) ProtoMessage() {}
func (*ArenaRanking_JoinRankingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 4}
}
func (m *ArenaRanking_JoinRankingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_JoinRankingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_JoinRankingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_JoinRankingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_JoinRankingRequest.Merge(m, src)
}
func (m *ArenaRanking_JoinRankingRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_JoinRankingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_JoinRankingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_JoinRankingRequest proto.InternalMessageInfo

func (m *ArenaRanking_JoinRankingRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRanking_JoinRankingRequest) GetPlayerInfo() *models.ArenaRanking_Info {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (*ArenaRanking_JoinRankingRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.JoinRankingRequest"
}

type ArenaRanking_JoinRankingResponse struct {
	RankingIndex string `protobuf:"bytes,1,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
}

func (m *ArenaRanking_JoinRankingResponse) Reset()      { *m = ArenaRanking_JoinRankingResponse{} }
func (*ArenaRanking_JoinRankingResponse) ProtoMessage() {}
func (*ArenaRanking_JoinRankingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 5}
}
func (m *ArenaRanking_JoinRankingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_JoinRankingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_JoinRankingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_JoinRankingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_JoinRankingResponse.Merge(m, src)
}
func (m *ArenaRanking_JoinRankingResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_JoinRankingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_JoinRankingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_JoinRankingResponse proto.InternalMessageInfo

func (m *ArenaRanking_JoinRankingResponse) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (*ArenaRanking_JoinRankingResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.JoinRankingResponse"
}

type ArenaRanking_GetChallengeRangeRequest struct {
	Type         models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RankingIndex string           `protobuf:"bytes,2,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
	RoleId       string           `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *ArenaRanking_GetChallengeRangeRequest) Reset()      { *m = ArenaRanking_GetChallengeRangeRequest{} }
func (*ArenaRanking_GetChallengeRangeRequest) ProtoMessage() {}
func (*ArenaRanking_GetChallengeRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 6}
}
func (m *ArenaRanking_GetChallengeRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_GetChallengeRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_GetChallengeRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_GetChallengeRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_GetChallengeRangeRequest.Merge(m, src)
}
func (m *ArenaRanking_GetChallengeRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_GetChallengeRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_GetChallengeRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_GetChallengeRangeRequest proto.InternalMessageInfo

func (m *ArenaRanking_GetChallengeRangeRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRanking_GetChallengeRangeRequest) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ArenaRanking_GetChallengeRangeRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*ArenaRanking_GetChallengeRangeRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.GetChallengeRangeRequest"
}

type ArenaRanking_GetChallengeRangeResponse struct {
	Datas []*models.ArenaDataElement `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *ArenaRanking_GetChallengeRangeResponse) Reset() {
	*m = ArenaRanking_GetChallengeRangeResponse{}
}
func (*ArenaRanking_GetChallengeRangeResponse) ProtoMessage() {}
func (*ArenaRanking_GetChallengeRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 7}
}
func (m *ArenaRanking_GetChallengeRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_GetChallengeRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_GetChallengeRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_GetChallengeRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_GetChallengeRangeResponse.Merge(m, src)
}
func (m *ArenaRanking_GetChallengeRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_GetChallengeRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_GetChallengeRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_GetChallengeRangeResponse proto.InternalMessageInfo

func (m *ArenaRanking_GetChallengeRangeResponse) GetDatas() []*models.ArenaDataElement {
	if m != nil {
		return m.Datas
	}
	return nil
}

func (*ArenaRanking_GetChallengeRangeResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.GetChallengeRangeResponse"
}

type ArenaRanking_GetPlayerIsRobotRequest struct {
	Type         models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RankingIndex string           `protobuf:"bytes,2,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
	RoleId       string           `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *ArenaRanking_GetPlayerIsRobotRequest) Reset()      { *m = ArenaRanking_GetPlayerIsRobotRequest{} }
func (*ArenaRanking_GetPlayerIsRobotRequest) ProtoMessage() {}
func (*ArenaRanking_GetPlayerIsRobotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 8}
}
func (m *ArenaRanking_GetPlayerIsRobotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_GetPlayerIsRobotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_GetPlayerIsRobotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_GetPlayerIsRobotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_GetPlayerIsRobotRequest.Merge(m, src)
}
func (m *ArenaRanking_GetPlayerIsRobotRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_GetPlayerIsRobotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_GetPlayerIsRobotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_GetPlayerIsRobotRequest proto.InternalMessageInfo

func (m *ArenaRanking_GetPlayerIsRobotRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRanking_GetPlayerIsRobotRequest) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ArenaRanking_GetPlayerIsRobotRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*ArenaRanking_GetPlayerIsRobotRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.GetPlayerIsRobotRequest"
}

type ArenaRanking_GetPlayerIsRobotResponse struct {
	IsRobot  bool   `protobuf:"varint,1,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
}

func (m *ArenaRanking_GetPlayerIsRobotResponse) Reset()      { *m = ArenaRanking_GetPlayerIsRobotResponse{} }
func (*ArenaRanking_GetPlayerIsRobotResponse) ProtoMessage() {}
func (*ArenaRanking_GetPlayerIsRobotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 9}
}
func (m *ArenaRanking_GetPlayerIsRobotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_GetPlayerIsRobotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_GetPlayerIsRobotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_GetPlayerIsRobotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_GetPlayerIsRobotResponse.Merge(m, src)
}
func (m *ArenaRanking_GetPlayerIsRobotResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_GetPlayerIsRobotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_GetPlayerIsRobotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_GetPlayerIsRobotResponse proto.InternalMessageInfo

func (m *ArenaRanking_GetPlayerIsRobotResponse) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *ArenaRanking_GetPlayerIsRobotResponse) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (*ArenaRanking_GetPlayerIsRobotResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.GetPlayerIsRobotResponse"
}

type ArenaRanking_SwapRankingIdRequest struct {
	Type         models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RankingIndex string           `protobuf:"bytes,2,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
	RoleId_0     string           `protobuf:"bytes,3,opt,name=role_id_0,json=roleId0,proto3" json:"role_id_0,omitempty"`
	RoleId_1     string           `protobuf:"bytes,4,opt,name=role_id_1,json=roleId1,proto3" json:"role_id_1,omitempty"`
}

func (m *ArenaRanking_SwapRankingIdRequest) Reset()      { *m = ArenaRanking_SwapRankingIdRequest{} }
func (*ArenaRanking_SwapRankingIdRequest) ProtoMessage() {}
func (*ArenaRanking_SwapRankingIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 10}
}
func (m *ArenaRanking_SwapRankingIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_SwapRankingIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_SwapRankingIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_SwapRankingIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_SwapRankingIdRequest.Merge(m, src)
}
func (m *ArenaRanking_SwapRankingIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_SwapRankingIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_SwapRankingIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_SwapRankingIdRequest proto.InternalMessageInfo

func (m *ArenaRanking_SwapRankingIdRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRanking_SwapRankingIdRequest) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ArenaRanking_SwapRankingIdRequest) GetRoleId_0() string {
	if m != nil {
		return m.RoleId_0
	}
	return ""
}

func (m *ArenaRanking_SwapRankingIdRequest) GetRoleId_1() string {
	if m != nil {
		return m.RoleId_1
	}
	return ""
}

func (*ArenaRanking_SwapRankingIdRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.SwapRankingIdRequest"
}

type ArenaRanking_SwapRankingIdResponse struct {
	SwapInfo *models.RankingSwapInfo `protobuf:"bytes,1,opt,name=swap_info,json=swapInfo,proto3" json:"swap_info,omitempty"`
	IsRobot  bool                    `protobuf:"varint,2,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	NickName string                  `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
}

func (m *ArenaRanking_SwapRankingIdResponse) Reset()      { *m = ArenaRanking_SwapRankingIdResponse{} }
func (*ArenaRanking_SwapRankingIdResponse) ProtoMessage() {}
func (*ArenaRanking_SwapRankingIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 11}
}
func (m *ArenaRanking_SwapRankingIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_SwapRankingIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_SwapRankingIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_SwapRankingIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_SwapRankingIdResponse.Merge(m, src)
}
func (m *ArenaRanking_SwapRankingIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_SwapRankingIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_SwapRankingIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_SwapRankingIdResponse proto.InternalMessageInfo

func (m *ArenaRanking_SwapRankingIdResponse) GetSwapInfo() *models.RankingSwapInfo {
	if m != nil {
		return m.SwapInfo
	}
	return nil
}

func (m *ArenaRanking_SwapRankingIdResponse) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *ArenaRanking_SwapRankingIdResponse) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (*ArenaRanking_SwapRankingIdResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.SwapRankingIdResponse"
}

type ArenaRanking_SetFirstChallengeRequest struct {
	Type         models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RankingIndex string           `protobuf:"bytes,2,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
	RoleId       string           `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Flg          bool             `protobuf:"varint,4,opt,name=flg,proto3" json:"flg,omitempty"`
}

func (m *ArenaRanking_SetFirstChallengeRequest) Reset()      { *m = ArenaRanking_SetFirstChallengeRequest{} }
func (*ArenaRanking_SetFirstChallengeRequest) ProtoMessage() {}
func (*ArenaRanking_SetFirstChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 12}
}
func (m *ArenaRanking_SetFirstChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_SetFirstChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_SetFirstChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_SetFirstChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_SetFirstChallengeRequest.Merge(m, src)
}
func (m *ArenaRanking_SetFirstChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_SetFirstChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_SetFirstChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_SetFirstChallengeRequest proto.InternalMessageInfo

func (m *ArenaRanking_SetFirstChallengeRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRanking_SetFirstChallengeRequest) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ArenaRanking_SetFirstChallengeRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ArenaRanking_SetFirstChallengeRequest) GetFlg() bool {
	if m != nil {
		return m.Flg
	}
	return false
}

func (*ArenaRanking_SetFirstChallengeRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.SetFirstChallengeRequest"
}

type ArenaRanking_SetFirstChallengeResponse struct {
}

func (m *ArenaRanking_SetFirstChallengeResponse) Reset() {
	*m = ArenaRanking_SetFirstChallengeResponse{}
}
func (*ArenaRanking_SetFirstChallengeResponse) ProtoMessage() {}
func (*ArenaRanking_SetFirstChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 13}
}
func (m *ArenaRanking_SetFirstChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_SetFirstChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_SetFirstChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_SetFirstChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_SetFirstChallengeResponse.Merge(m, src)
}
func (m *ArenaRanking_SetFirstChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_SetFirstChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_SetFirstChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_SetFirstChallengeResponse proto.InternalMessageInfo

func (*ArenaRanking_SetFirstChallengeResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.SetFirstChallengeResponse"
}

type ArenaRanking_ArenaGetRewardTimeRequest struct {
}

func (m *ArenaRanking_ArenaGetRewardTimeRequest) Reset() {
	*m = ArenaRanking_ArenaGetRewardTimeRequest{}
}
func (*ArenaRanking_ArenaGetRewardTimeRequest) ProtoMessage() {}
func (*ArenaRanking_ArenaGetRewardTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 14}
}
func (m *ArenaRanking_ArenaGetRewardTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_ArenaGetRewardTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_ArenaGetRewardTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_ArenaGetRewardTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_ArenaGetRewardTimeRequest.Merge(m, src)
}
func (m *ArenaRanking_ArenaGetRewardTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_ArenaGetRewardTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_ArenaGetRewardTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_ArenaGetRewardTimeRequest proto.InternalMessageInfo

func (*ArenaRanking_ArenaGetRewardTimeRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.ArenaGetRewardTimeRequest"
}

type ArenaRanking_ArenaGetRewardTimeResponse struct {
	Times []*models.ArenaRewardTime `protobuf:"bytes,1,rep,name=times,proto3" json:"times,omitempty"`
}

func (m *ArenaRanking_ArenaGetRewardTimeResponse) Reset() {
	*m = ArenaRanking_ArenaGetRewardTimeResponse{}
}
func (*ArenaRanking_ArenaGetRewardTimeResponse) ProtoMessage() {}
func (*ArenaRanking_ArenaGetRewardTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 15}
}
func (m *ArenaRanking_ArenaGetRewardTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_ArenaGetRewardTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_ArenaGetRewardTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_ArenaGetRewardTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_ArenaGetRewardTimeResponse.Merge(m, src)
}
func (m *ArenaRanking_ArenaGetRewardTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_ArenaGetRewardTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_ArenaGetRewardTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_ArenaGetRewardTimeResponse proto.InternalMessageInfo

func (m *ArenaRanking_ArenaGetRewardTimeResponse) GetTimes() []*models.ArenaRewardTime {
	if m != nil {
		return m.Times
	}
	return nil
}

func (*ArenaRanking_ArenaGetRewardTimeResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.ArenaGetRewardTimeResponse"
}

type ArenaRanking_LockRoleRankingRequest struct {
	Type                models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	ChallengeRoleid     string           `protobuf:"bytes,2,opt,name=challenge_roleid,json=challengeRoleid,proto3" json:"challenge_roleid,omitempty"`
	ChallengedRoleid    string           `protobuf:"bytes,3,opt,name=challenged_roleid,json=challengedRoleid,proto3" json:"challenged_roleid,omitempty"`
	RankingIndex        string           `protobuf:"bytes,4,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
	ChallengedRankingId int32            `protobuf:"varint,5,opt,name=challenged_ranking_id,json=challengedRankingId,proto3" json:"challenged_ranking_id,omitempty"`
	ChallengeRankingId  int32            `protobuf:"varint,6,opt,name=challenge_ranking_id,json=challengeRankingId,proto3" json:"challenge_ranking_id,omitempty"`
}

func (m *ArenaRanking_LockRoleRankingRequest) Reset()      { *m = ArenaRanking_LockRoleRankingRequest{} }
func (*ArenaRanking_LockRoleRankingRequest) ProtoMessage() {}
func (*ArenaRanking_LockRoleRankingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 16}
}
func (m *ArenaRanking_LockRoleRankingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_LockRoleRankingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_LockRoleRankingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_LockRoleRankingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_LockRoleRankingRequest.Merge(m, src)
}
func (m *ArenaRanking_LockRoleRankingRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_LockRoleRankingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_LockRoleRankingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_LockRoleRankingRequest proto.InternalMessageInfo

func (m *ArenaRanking_LockRoleRankingRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRanking_LockRoleRankingRequest) GetChallengeRoleid() string {
	if m != nil {
		return m.ChallengeRoleid
	}
	return ""
}

func (m *ArenaRanking_LockRoleRankingRequest) GetChallengedRoleid() string {
	if m != nil {
		return m.ChallengedRoleid
	}
	return ""
}

func (m *ArenaRanking_LockRoleRankingRequest) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ArenaRanking_LockRoleRankingRequest) GetChallengedRankingId() int32 {
	if m != nil {
		return m.ChallengedRankingId
	}
	return 0
}

func (m *ArenaRanking_LockRoleRankingRequest) GetChallengeRankingId() int32 {
	if m != nil {
		return m.ChallengeRankingId
	}
	return 0
}

func (*ArenaRanking_LockRoleRankingRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.LockRoleRankingRequest"
}

type ArenaRanking_LockRoleRankingResponse struct {
}

func (m *ArenaRanking_LockRoleRankingResponse) Reset()      { *m = ArenaRanking_LockRoleRankingResponse{} }
func (*ArenaRanking_LockRoleRankingResponse) ProtoMessage() {}
func (*ArenaRanking_LockRoleRankingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 17}
}
func (m *ArenaRanking_LockRoleRankingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_LockRoleRankingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_LockRoleRankingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_LockRoleRankingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_LockRoleRankingResponse.Merge(m, src)
}
func (m *ArenaRanking_LockRoleRankingResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_LockRoleRankingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_LockRoleRankingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_LockRoleRankingResponse proto.InternalMessageInfo

func (*ArenaRanking_LockRoleRankingResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.LockRoleRankingResponse"
}

type ArenaRanking_UnLockRoleRankingRequest struct {
	Type         models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RoleId       string           `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RankingIndex string           `protobuf:"bytes,3,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
}

func (m *ArenaRanking_UnLockRoleRankingRequest) Reset()      { *m = ArenaRanking_UnLockRoleRankingRequest{} }
func (*ArenaRanking_UnLockRoleRankingRequest) ProtoMessage() {}
func (*ArenaRanking_UnLockRoleRankingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 18}
}
func (m *ArenaRanking_UnLockRoleRankingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_UnLockRoleRankingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_UnLockRoleRankingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_UnLockRoleRankingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_UnLockRoleRankingRequest.Merge(m, src)
}
func (m *ArenaRanking_UnLockRoleRankingRequest) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_UnLockRoleRankingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_UnLockRoleRankingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_UnLockRoleRankingRequest proto.InternalMessageInfo

func (m *ArenaRanking_UnLockRoleRankingRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRanking_UnLockRoleRankingRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ArenaRanking_UnLockRoleRankingRequest) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (*ArenaRanking_UnLockRoleRankingRequest) XXX_MessageName() string {
	return "arena_service.ArenaRanking.UnLockRoleRankingRequest"
}

type ArenaRanking_UnLockRoleRankingResponse struct {
}

func (m *ArenaRanking_UnLockRoleRankingResponse) Reset() {
	*m = ArenaRanking_UnLockRoleRankingResponse{}
}
func (*ArenaRanking_UnLockRoleRankingResponse) ProtoMessage() {}
func (*ArenaRanking_UnLockRoleRankingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf59f22126c40c95, []int{0, 19}
}
func (m *ArenaRanking_UnLockRoleRankingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_UnLockRoleRankingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_UnLockRoleRankingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_UnLockRoleRankingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_UnLockRoleRankingResponse.Merge(m, src)
}
func (m *ArenaRanking_UnLockRoleRankingResponse) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_UnLockRoleRankingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_UnLockRoleRankingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_UnLockRoleRankingResponse proto.InternalMessageInfo

func (*ArenaRanking_UnLockRoleRankingResponse) XXX_MessageName() string {
	return "arena_service.ArenaRanking.UnLockRoleRankingResponse"
}
func init() {
	proto.RegisterType((*ArenaRanking)(nil), "arena_service.ArenaRanking")
	proto.RegisterType((*ArenaRanking_GetDatasRequest)(nil), "arena_service.ArenaRanking.GetDatasRequest")
	proto.RegisterType((*ArenaRanking_GetDatasResponse)(nil), "arena_service.ArenaRanking.GetDatasResponse")
	proto.RegisterType((*ArenaRanking_GetSelfDataRequest)(nil), "arena_service.ArenaRanking.GetSelfDataRequest")
	proto.RegisterType((*ArenaRanking_GetSelfDataResponse)(nil), "arena_service.ArenaRanking.GetSelfDataResponse")
	proto.RegisterType((*ArenaRanking_JoinRankingRequest)(nil), "arena_service.ArenaRanking.JoinRankingRequest")
	proto.RegisterType((*ArenaRanking_JoinRankingResponse)(nil), "arena_service.ArenaRanking.JoinRankingResponse")
	proto.RegisterType((*ArenaRanking_GetChallengeRangeRequest)(nil), "arena_service.ArenaRanking.GetChallengeRangeRequest")
	proto.RegisterType((*ArenaRanking_GetChallengeRangeResponse)(nil), "arena_service.ArenaRanking.GetChallengeRangeResponse")
	proto.RegisterType((*ArenaRanking_GetPlayerIsRobotRequest)(nil), "arena_service.ArenaRanking.GetPlayerIsRobotRequest")
	proto.RegisterType((*ArenaRanking_GetPlayerIsRobotResponse)(nil), "arena_service.ArenaRanking.GetPlayerIsRobotResponse")
	proto.RegisterType((*ArenaRanking_SwapRankingIdRequest)(nil), "arena_service.ArenaRanking.SwapRankingIdRequest")
	proto.RegisterType((*ArenaRanking_SwapRankingIdResponse)(nil), "arena_service.ArenaRanking.SwapRankingIdResponse")
	proto.RegisterType((*ArenaRanking_SetFirstChallengeRequest)(nil), "arena_service.ArenaRanking.SetFirstChallengeRequest")
	proto.RegisterType((*ArenaRanking_SetFirstChallengeResponse)(nil), "arena_service.ArenaRanking.SetFirstChallengeResponse")
	proto.RegisterType((*ArenaRanking_ArenaGetRewardTimeRequest)(nil), "arena_service.ArenaRanking.ArenaGetRewardTimeRequest")
	proto.RegisterType((*ArenaRanking_ArenaGetRewardTimeResponse)(nil), "arena_service.ArenaRanking.ArenaGetRewardTimeResponse")
	proto.RegisterType((*ArenaRanking_LockRoleRankingRequest)(nil), "arena_service.ArenaRanking.LockRoleRankingRequest")
	proto.RegisterType((*ArenaRanking_LockRoleRankingResponse)(nil), "arena_service.ArenaRanking.LockRoleRankingResponse")
	proto.RegisterType((*ArenaRanking_UnLockRoleRankingRequest)(nil), "arena_service.ArenaRanking.UnLockRoleRankingRequest")
	proto.RegisterType((*ArenaRanking_UnLockRoleRankingResponse)(nil), "arena_service.ArenaRanking.UnLockRoleRankingResponse")
}

func init() { proto.RegisterFile("proto/arena-service/arena.proto", fileDescriptor_bf59f22126c40c95) }

var fileDescriptor_bf59f22126c40c95 = []byte{
	// 872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xd8, 0x71, 0x62, 0xbf, 0xb4, 0x4d, 0x32, 0x49, 0xf1, 0x7a, 0x23, 0x6d, 0x23, 0x10,
	0xc8, 0x80, 0x6a, 0xa7, 0x86, 0x53, 0x6f, 0x94, 0x1f, 0x56, 0x28, 0x02, 0x34, 0x09, 0x17, 0x2e,
	0xab, 0x89, 0xf7, 0xd9, 0x5d, 0x65, 0x3d, 0x63, 0x76, 0x26, 0x49, 0x7d, 0xa1, 0x27, 0xee, 0x20,
	0x71, 0xe2, 0xc8, 0x89, 0x0b, 0xff, 0x47, 0x8f, 0xe5, 0xd6, 0x23, 0x38, 0x17, 0x8e, 0xfc, 0x09,
	0x68, 0x7e, 0x38, 0x59, 0xc7, 0x56, 0x45, 0x8b, 0x9a, 0x8b, 0xb5, 0xf3, 0xde, 0xf7, 0xde, 0xfb,
	0xde, 0x37, 0xcf, 0x6f, 0x17, 0xee, 0x8c, 0x72, 0xa9, 0x65, 0x9b, 0xe7, 0x28, 0xf8, 0x5d, 0x85,
	0xf9, 0x69, 0xda, 0x43, 0x77, 0x6a, 0x59, 0x0f, 0xbd, 0x69, 0x0f, 0xb1, 0x77, 0x85, 0x75, 0x87,
	0x1f, 0xca, 0x04, 0x33, 0xd5, 0x3e, 0xe2, 0x0a, 0x1d, 0x2e, 0x6c, 0x0c, 0xa4, 0x1c, 0x64, 0xd8,
	0xb6, 0xa7, 0xa3, 0x93, 0x7e, 0x9b, 0x8b, 0xb1, 0x77, 0x05, 0x33, 0x31, 0x85, 0xe4, 0x6f, 0xfe,
	0xbe, 0x09, 0x37, 0x3e, 0x32, 0x67, 0xc6, 0xc5, 0x71, 0x2a, 0x06, 0xe1, 0xcf, 0x04, 0xd6, 0xbb,
	0xa8, 0x3f, 0xe1, 0x9a, 0x2b, 0x86, 0xdf, 0x9d, 0xa0, 0xd2, 0xf4, 0x6d, 0x58, 0xd6, 0xe3, 0x11,
	0x06, 0x64, 0x97, 0x34, 0x6f, 0x75, 0x36, 0x5b, 0x2e, 0x4f, 0xcb, 0xc6, 0x1d, 0x8e, 0x47, 0xc8,
	0xac, 0x9b, 0xde, 0x81, 0x35, 0xa5, 0x79, 0xae, 0xe3, 0x54, 0x24, 0xf8, 0x38, 0x28, 0xed, 0x92,
	0x66, 0x85, 0x81, 0x35, 0xed, 0x1b, 0x0b, 0xdd, 0x86, 0x4a, 0x4f, 0x9e, 0x08, 0x1d, 0x94, 0xad,
	0xcb, 0x1d, 0xe8, 0x5b, 0x70, 0x33, 0x77, 0xc5, 0x7d, 0xe0, 0xf2, 0x2e, 0x69, 0xd6, 0xd8, 0x0d,
	0x6f, 0xb4, 0xa1, 0xe1, 0x03, 0xd8, 0xb8, 0x64, 0xa5, 0x46, 0x52, 0x28, 0xa4, 0x2d, 0xa8, 0x24,
	0xc6, 0x10, 0x90, 0xdd, 0x72, 0x73, 0xad, 0x13, 0xcc, 0xf0, 0x32, 0xd0, 0x4f, 0x33, 0x1c, 0xa2,
	0xd0, 0xcc, 0xc1, 0xc2, 0x31, 0xd0, 0x2e, 0xea, 0x03, 0xcc, 0xfa, 0xc6, 0xf9, 0x92, 0xcd, 0xcd,
	0xb1, 0x2c, 0xcd, 0xb3, 0xa4, 0x75, 0x58, 0xcd, 0x65, 0x86, 0x71, 0x9a, 0xd8, 0x16, 0x6b, 0x6c,
	0xc5, 0x1c, 0xf7, 0x93, 0xf0, 0x0f, 0x02, 0x5b, 0x33, 0xb5, 0x7d, 0x0b, 0x1d, 0x58, 0x45, 0x47,
	0xd2, 0xd6, 0x7f, 0x51, 0x13, 0x53, 0x20, 0x7d, 0x0f, 0x36, 0x05, 0x3e, 0xd6, 0x71, 0x8e, 0xfd,
	0x1c, 0xd5, 0xa3, 0x58, 0xa7, 0x43, 0xb4, 0x6c, 0xca, 0x6c, 0xdd, 0x38, 0x98, 0xb3, 0x1f, 0xa6,
	0x43, 0xa4, 0x4d, 0xd8, 0x50, 0xc8, 0x95, 0x14, 0xb1, 0x3c, 0xc5, 0xdc, 0x41, 0xcb, 0x16, 0x7a,
	0xcb, 0xd9, 0xbf, 0x3a, 0xc5, 0xdc, 0x22, 0xf7, 0x60, 0xdb, 0x66, 0x55, 0xa8, 0xb5, 0x2b, 0xe4,
	0xd0, 0xcb, 0x16, 0x4d, 0x8d, 0xef, 0xe0, 0xc2, 0x65, 0x22, 0xc2, 0x33, 0xa0, 0x9f, 0xcb, 0x54,
	0xf8, 0xc1, 0x79, 0x49, 0x39, 0xef, 0xc3, 0xda, 0x28, 0xe3, 0x63, 0xcc, 0xe3, 0x54, 0xf4, 0xa5,
	0xa5, 0xbf, 0xd6, 0x69, 0xcc, 0xa0, 0x7d, 0xe2, 0xd6, 0xbe, 0xe8, 0x4b, 0x06, 0x0e, 0x6d, 0x9e,
	0xc3, 0xfb, 0xb0, 0x35, 0x53, 0xd8, 0x6b, 0x39, 0x77, 0x43, 0x64, 0xc1, 0x1c, 0x3d, 0x81, 0xa0,
	0x8b, 0xfa, 0xe3, 0x47, 0x3c, 0xcb, 0x50, 0x0c, 0x90, 0x71, 0xf3, 0x73, 0x9d, 0x93, 0xf0, 0x10,
	0x1a, 0x0b, 0x08, 0xbc, 0xe2, 0x44, 0x7f, 0x0f, 0xf5, 0x2e, 0xea, 0xaf, 0x9d, 0x34, 0x8a, 0xc9,
	0x23, 0xa9, 0xaf, 0xb5, 0x19, 0x66, 0xd5, 0xbc, 0x52, 0xdf, 0xf7, 0xd2, 0x80, 0x6a, 0xaa, 0xe2,
	0xdc, 0xd8, 0x2c, 0x89, 0x2a, 0x5b, 0x4d, 0x1d, 0x84, 0xee, 0x40, 0x4d, 0xa4, 0xbd, 0xe3, 0x58,
	0x70, 0x3f, 0xb9, 0x35, 0x56, 0x35, 0x86, 0x2f, 0xf9, 0x10, 0xc3, 0x5f, 0x08, 0x6c, 0x1f, 0x9c,
	0xf1, 0x91, 0xbf, 0xde, 0xfd, 0xe4, 0x75, 0x74, 0x14, 0x42, 0xcd, 0x77, 0x14, 0xef, 0xf9, 0x9e,
	0x56, 0x5d, 0x4f, 0x7b, 0x45, 0xdf, 0x3d, 0xbf, 0x8b, 0xbc, 0xef, 0x5e, 0xf8, 0x03, 0x81, 0xdb,
	0x57, 0xc8, 0xf9, 0x76, 0x3f, 0x84, 0x9a, 0x3a, 0xe3, 0x23, 0x37, 0xce, 0xee, 0xbf, 0x5c, 0x9f,
	0x52, 0xf4, 0x68, 0x13, 0x68, 0x87, 0xb9, 0xaa, 0xfc, 0xd3, 0x8c, 0x48, 0xa5, 0x17, 0x88, 0x54,
	0xbe, 0x22, 0xd2, 0x4f, 0x04, 0x82, 0x03, 0xd4, 0x9f, 0xa5, 0xb9, 0x2a, 0xcc, 0xd2, 0x35, 0x5e,
	0x3d, 0xdd, 0x80, 0x72, 0x3f, 0x1b, 0x58, 0x7d, 0xaa, 0xcc, 0x3c, 0x86, 0x3b, 0xd0, 0x58, 0x40,
	0xc9, 0xc9, 0x63, 0x9c, 0xb6, 0x7e, 0x17, 0x35, 0xc3, 0x33, 0x9e, 0x27, 0x66, 0x85, 0x78, 0xc2,
	0xe1, 0x43, 0x08, 0x17, 0x39, 0xbd, 0xb2, 0x77, 0xa1, 0x62, 0x36, 0xd1, 0xf4, 0x4f, 0x51, 0x9f,
	0x5d, 0x12, 0x97, 0x78, 0x87, 0x0a, 0x7f, 0x2d, 0xc1, 0x1b, 0x5f, 0xc8, 0xde, 0x31, 0x93, 0x19,
	0xbe, 0xda, 0x6e, 0x7a, 0x17, 0x36, 0x7a, 0xd3, 0x06, 0x62, 0xd3, 0x6e, 0x9a, 0x78, 0x6d, 0xd6,
	0x2f, 0xec, 0xcc, 0x9a, 0xe9, 0xfb, 0xb0, 0x79, 0x61, 0x4a, 0xa6, 0x58, 0x27, 0xd4, 0x65, 0x8e,
	0xc4, 0x83, 0xff, 0xcb, 0x8b, 0x8e, 0x76, 0xe0, 0x76, 0x31, 0xe3, 0x14, 0x9f, 0x04, 0x15, 0xfb,
	0xce, 0xdc, 0x2a, 0x64, 0x9d, 0xce, 0xa0, 0xd9, 0xdd, 0x05, 0xc2, 0x97, 0x21, 0x2b, 0x36, 0x84,
	0xf6, 0x0a, 0xcb, 0xc6, 0x45, 0x84, 0x0d, 0xa8, 0xcf, 0x69, 0xe4, 0x6f, 0xea, 0x09, 0x04, 0xdf,
	0x88, 0xff, 0x27, 0x60, 0x61, 0x68, 0x4a, 0x33, 0x43, 0x33, 0xa7, 0x40, 0x79, 0xc1, 0x8a, 0xde,
	0x81, 0xc6, 0x02, 0x02, 0x8e, 0xdd, 0x83, 0xc3, 0xe7, 0x7f, 0x45, 0x4b, 0xbf, 0x4d, 0x22, 0xf2,
	0x74, 0x12, 0x91, 0x67, 0x93, 0x88, 0xfc, 0x39, 0x89, 0xc8, 0xdf, 0x93, 0x68, 0xe9, 0x9f, 0x49,
	0x44, 0x7e, 0x3c, 0x8f, 0x96, 0x9e, 0x9e, 0x47, 0xe4, 0xd9, 0x79, 0xb4, 0xf4, 0xfc, 0x3c, 0x5a,
	0xfa, 0xf6, 0x9d, 0x9e, 0x4c, 0x85, 0xfd, 0xa8, 0xc2, 0xbc, 0xdd, 0x93, 0xc3, 0xa1, 0x14, 0xed,
	0xc2, 0xe7, 0xd6, 0xf4, 0x9b, 0xea, 0x68, 0xc5, 0x1a, 0x3f, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x7c, 0xc4, 0x74, 0x28, 0x8c, 0x09, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_GetDatasRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_GetDatasResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_GetSelfDataRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_GetSelfDataResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_JoinRankingRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_JoinRankingResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_GetChallengeRangeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_GetChallengeRangeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_GetPlayerIsRobotRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_GetPlayerIsRobotResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_SwapRankingIdRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_SwapRankingIdResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_SetFirstChallengeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_SetFirstChallengeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_ArenaGetRewardTimeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_ArenaGetRewardTimeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_LockRoleRankingRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_LockRoleRankingResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_UnLockRoleRankingRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_UnLockRoleRankingResponse.Get().(proto.Message)
	})
}

var poolArenaRanking = &sync.Pool{New: func() interface{} { return &ArenaRanking{} }}

func (m *ArenaRanking) ReleasePool() { m.Reset(); poolArenaRanking.Put(m); m = nil }

var poolArenaRanking_GetDatasRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_GetDatasRequest{} }}

func (m *ArenaRanking_GetDatasRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_GetDatasRequest.Put(m)
	m = nil
}

var poolArenaRanking_GetDatasResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_GetDatasResponse{} }}

func (m *ArenaRanking_GetDatasResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_GetDatasResponse.Put(m)
	m = nil
}

var poolArenaRanking_GetSelfDataRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_GetSelfDataRequest{} }}

func (m *ArenaRanking_GetSelfDataRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_GetSelfDataRequest.Put(m)
	m = nil
}

var poolArenaRanking_GetSelfDataResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_GetSelfDataResponse{} }}

func (m *ArenaRanking_GetSelfDataResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_GetSelfDataResponse.Put(m)
	m = nil
}

var poolArenaRanking_JoinRankingRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_JoinRankingRequest{} }}

func (m *ArenaRanking_JoinRankingRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_JoinRankingRequest.Put(m)
	m = nil
}

var poolArenaRanking_JoinRankingResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_JoinRankingResponse{} }}

func (m *ArenaRanking_JoinRankingResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_JoinRankingResponse.Put(m)
	m = nil
}

var poolArenaRanking_GetChallengeRangeRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_GetChallengeRangeRequest{} }}

func (m *ArenaRanking_GetChallengeRangeRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_GetChallengeRangeRequest.Put(m)
	m = nil
}

var poolArenaRanking_GetChallengeRangeResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_GetChallengeRangeResponse{} }}

func (m *ArenaRanking_GetChallengeRangeResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_GetChallengeRangeResponse.Put(m)
	m = nil
}

var poolArenaRanking_GetPlayerIsRobotRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_GetPlayerIsRobotRequest{} }}

func (m *ArenaRanking_GetPlayerIsRobotRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_GetPlayerIsRobotRequest.Put(m)
	m = nil
}

var poolArenaRanking_GetPlayerIsRobotResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_GetPlayerIsRobotResponse{} }}

func (m *ArenaRanking_GetPlayerIsRobotResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_GetPlayerIsRobotResponse.Put(m)
	m = nil
}

var poolArenaRanking_SwapRankingIdRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_SwapRankingIdRequest{} }}

func (m *ArenaRanking_SwapRankingIdRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_SwapRankingIdRequest.Put(m)
	m = nil
}

var poolArenaRanking_SwapRankingIdResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_SwapRankingIdResponse{} }}

func (m *ArenaRanking_SwapRankingIdResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_SwapRankingIdResponse.Put(m)
	m = nil
}

var poolArenaRanking_SetFirstChallengeRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_SetFirstChallengeRequest{} }}

func (m *ArenaRanking_SetFirstChallengeRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_SetFirstChallengeRequest.Put(m)
	m = nil
}

var poolArenaRanking_SetFirstChallengeResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_SetFirstChallengeResponse{} }}

func (m *ArenaRanking_SetFirstChallengeResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_SetFirstChallengeResponse.Put(m)
	m = nil
}

var poolArenaRanking_ArenaGetRewardTimeRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_ArenaGetRewardTimeRequest{} }}

func (m *ArenaRanking_ArenaGetRewardTimeRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_ArenaGetRewardTimeRequest.Put(m)
	m = nil
}

var poolArenaRanking_ArenaGetRewardTimeResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_ArenaGetRewardTimeResponse{} }}

func (m *ArenaRanking_ArenaGetRewardTimeResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_ArenaGetRewardTimeResponse.Put(m)
	m = nil
}

var poolArenaRanking_LockRoleRankingRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_LockRoleRankingRequest{} }}

func (m *ArenaRanking_LockRoleRankingRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_LockRoleRankingRequest.Put(m)
	m = nil
}

var poolArenaRanking_LockRoleRankingResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_LockRoleRankingResponse{} }}

func (m *ArenaRanking_LockRoleRankingResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_LockRoleRankingResponse.Put(m)
	m = nil
}

var poolArenaRanking_UnLockRoleRankingRequest = &sync.Pool{New: func() interface{} { return &ArenaRanking_UnLockRoleRankingRequest{} }}

func (m *ArenaRanking_UnLockRoleRankingRequest) ReleasePool() {
	m.Reset()
	poolArenaRanking_UnLockRoleRankingRequest.Put(m)
	m = nil
}

var poolArenaRanking_UnLockRoleRankingResponse = &sync.Pool{New: func() interface{} { return &ArenaRanking_UnLockRoleRankingResponse{} }}

func (m *ArenaRanking_UnLockRoleRankingResponse) ReleasePool() {
	m.Reset()
	poolArenaRanking_UnLockRoleRankingResponse.Put(m)
	m = nil
}
func (this *ArenaRanking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking)
	if !ok {
		that2, ok := that.(ArenaRanking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ArenaRanking_GetDatasRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_GetDatasRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_GetDatasRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.StartIndex != that1.StartIndex {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	return true
}
func (this *ArenaRanking_GetDatasResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_GetDatasResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_GetDatasResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Datas) != len(that1.Datas) {
		return false
	}
	for i := range this.Datas {
		if !this.Datas[i].Equal(that1.Datas[i]) {
			return false
		}
	}
	return true
}
func (this *ArenaRanking_GetSelfDataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_GetSelfDataRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_GetSelfDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *ArenaRanking_GetSelfDataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_GetSelfDataResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_GetSelfDataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Element.Equal(that1.Element) {
		return false
	}
	if this.NextRefreshTime != that1.NextRefreshTime {
		return false
	}
	if this.SeasonOverTime != that1.SeasonOverTime {
		return false
	}
	if this.NextSettlementTime != that1.NextSettlementTime {
		return false
	}
	return true
}
func (this *ArenaRanking_JoinRankingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_JoinRankingRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_JoinRankingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.PlayerInfo.Equal(that1.PlayerInfo) {
		return false
	}
	return true
}
func (this *ArenaRanking_JoinRankingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_JoinRankingResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_JoinRankingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	return true
}
func (this *ArenaRanking_GetChallengeRangeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_GetChallengeRangeRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_GetChallengeRangeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *ArenaRanking_GetChallengeRangeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_GetChallengeRangeResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_GetChallengeRangeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Datas) != len(that1.Datas) {
		return false
	}
	for i := range this.Datas {
		if !this.Datas[i].Equal(that1.Datas[i]) {
			return false
		}
	}
	return true
}
func (this *ArenaRanking_GetPlayerIsRobotRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_GetPlayerIsRobotRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_GetPlayerIsRobotRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *ArenaRanking_GetPlayerIsRobotResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_GetPlayerIsRobotResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_GetPlayerIsRobotResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsRobot != that1.IsRobot {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	return true
}
func (this *ArenaRanking_SwapRankingIdRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_SwapRankingIdRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_SwapRankingIdRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if this.RoleId_0 != that1.RoleId_0 {
		return false
	}
	if this.RoleId_1 != that1.RoleId_1 {
		return false
	}
	return true
}
func (this *ArenaRanking_SwapRankingIdResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_SwapRankingIdResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_SwapRankingIdResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SwapInfo.Equal(that1.SwapInfo) {
		return false
	}
	if this.IsRobot != that1.IsRobot {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	return true
}
func (this *ArenaRanking_SetFirstChallengeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_SetFirstChallengeRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_SetFirstChallengeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Flg != that1.Flg {
		return false
	}
	return true
}
func (this *ArenaRanking_SetFirstChallengeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_SetFirstChallengeResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_SetFirstChallengeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ArenaRanking_ArenaGetRewardTimeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_ArenaGetRewardTimeRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_ArenaGetRewardTimeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ArenaRanking_ArenaGetRewardTimeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_ArenaGetRewardTimeResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_ArenaGetRewardTimeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Times) != len(that1.Times) {
		return false
	}
	for i := range this.Times {
		if !this.Times[i].Equal(that1.Times[i]) {
			return false
		}
	}
	return true
}
func (this *ArenaRanking_LockRoleRankingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_LockRoleRankingRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_LockRoleRankingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ChallengeRoleid != that1.ChallengeRoleid {
		return false
	}
	if this.ChallengedRoleid != that1.ChallengedRoleid {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if this.ChallengedRankingId != that1.ChallengedRankingId {
		return false
	}
	if this.ChallengeRankingId != that1.ChallengeRankingId {
		return false
	}
	return true
}
func (this *ArenaRanking_LockRoleRankingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_LockRoleRankingResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_LockRoleRankingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ArenaRanking_UnLockRoleRankingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_UnLockRoleRankingRequest)
	if !ok {
		that2, ok := that.(ArenaRanking_UnLockRoleRankingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	return true
}
func (this *ArenaRanking_UnLockRoleRankingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_UnLockRoleRankingResponse)
	if !ok {
		that2, ok := that.(ArenaRanking_UnLockRoleRankingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *ArenaRanking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_GetDatasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_GetDatasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_GetDatasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0x22
	}
	if m.Count != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.StartIndex != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_GetDatasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_GetDatasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_GetDatasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_GetSelfDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_GetSelfDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_GetSelfDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_GetSelfDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_GetSelfDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_GetSelfDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextSettlementTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.NextSettlementTime))
		i--
		dAtA[i] = 0x20
	}
	if m.SeasonOverTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SeasonOverTime))
		i--
		dAtA[i] = 0x18
	}
	if m.NextRefreshTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.NextRefreshTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Element != nil {
		{
			size, err := m.Element.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_JoinRankingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_JoinRankingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_JoinRankingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerInfo != nil {
		{
			size, err := m.PlayerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_JoinRankingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_JoinRankingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_JoinRankingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_GetChallengeRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_GetChallengeRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_GetChallengeRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_GetChallengeRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_GetChallengeRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_GetChallengeRangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_GetPlayerIsRobotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_GetPlayerIsRobotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_GetPlayerIsRobotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_GetPlayerIsRobotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_GetPlayerIsRobotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_GetPlayerIsRobotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintArena(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_SwapRankingIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_SwapRankingIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_SwapRankingIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId_1) > 0 {
		i -= len(m.RoleId_1)
		copy(dAtA[i:], m.RoleId_1)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId_1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RoleId_0) > 0 {
		i -= len(m.RoleId_0)
		copy(dAtA[i:], m.RoleId_0)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId_0)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_SwapRankingIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_SwapRankingIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_SwapRankingIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintArena(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SwapInfo != nil {
		{
			size, err := m.SwapInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_SetFirstChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_SetFirstChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_SetFirstChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Flg {
		i--
		if m.Flg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_SetFirstChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_SetFirstChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_SetFirstChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_ArenaGetRewardTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_ArenaGetRewardTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_ArenaGetRewardTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_ArenaGetRewardTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_ArenaGetRewardTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_ArenaGetRewardTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Times) > 0 {
		for iNdEx := len(m.Times) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Times[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_LockRoleRankingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_LockRoleRankingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_LockRoleRankingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.ChallengeRankingId))
		i--
		dAtA[i] = 0x30
	}
	if m.ChallengedRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.ChallengedRankingId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChallengedRoleid) > 0 {
		i -= len(m.ChallengedRoleid)
		copy(dAtA[i:], m.ChallengedRoleid)
		i = encodeVarintArena(dAtA, i, uint64(len(m.ChallengedRoleid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChallengeRoleid) > 0 {
		i -= len(m.ChallengeRoleid)
		copy(dAtA[i:], m.ChallengeRoleid)
		i = encodeVarintArena(dAtA, i, uint64(len(m.ChallengeRoleid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_LockRoleRankingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_LockRoleRankingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_LockRoleRankingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_UnLockRoleRankingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_UnLockRoleRankingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_UnLockRoleRankingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_UnLockRoleRankingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_UnLockRoleRankingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_UnLockRoleRankingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintArena(dAtA []byte, offset int, v uint64) int {
	offset -= sovArena(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *ArenaRanking) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *ArenaRanking_GetDatasRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.StartIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartIndex))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.RankingIndex != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_GetDatasResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("datas")
	w.RawByte('"')
	w.RawByte(':')
	if m.Datas == nil {
		w.RawString("null")
	} else if len(m.Datas) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Datas {
			v.JsonBytes(w)
			if i != len(m.Datas)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_GetSelfDataRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RankingIndex != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_GetSelfDataResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("element")
	w.RawByte('"')
	w.RawByte(':')
	m.Element.JsonBytes(w)
	needWriteComma = true
	if m.NextRefreshTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRefreshTime))
		needWriteComma = true
	}
	if m.SeasonOverTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season_over_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SeasonOverTime))
		needWriteComma = true
	}
	if m.NextSettlementTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_settlement_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextSettlementTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_JoinRankingRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("player_info")
	w.RawByte('"')
	w.RawByte(':')
	m.PlayerInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_JoinRankingResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankingIndex != "" {
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_GetChallengeRangeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RankingIndex != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_GetChallengeRangeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("datas")
	w.RawByte('"')
	w.RawByte(':')
	if m.Datas == nil {
		w.RawString("null")
	} else if len(m.Datas) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Datas {
			v.JsonBytes(w)
			if i != len(m.Datas)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_GetPlayerIsRobotRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RankingIndex != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_GetPlayerIsRobotResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsRobot {
		w.RawByte('"')
		w.RawString("is_robot")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRobot)
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_SwapRankingIdRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RankingIndex != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if m.RoleId_0 != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id_0")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId_0)
		needWriteComma = true
	}
	if m.RoleId_1 != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id_1")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId_1)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_SwapRankingIdResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("swap_info")
	w.RawByte('"')
	w.RawByte(':')
	m.SwapInfo.JsonBytes(w)
	needWriteComma = true
	if m.IsRobot {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_robot")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRobot)
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_SetFirstChallengeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RankingIndex != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Flg {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("flg")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Flg)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_SetFirstChallengeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *ArenaRanking_ArenaGetRewardTimeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *ArenaRanking_ArenaGetRewardTimeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("times")
	w.RawByte('"')
	w.RawByte(':')
	if m.Times == nil {
		w.RawString("null")
	} else if len(m.Times) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Times {
			v.JsonBytes(w)
			if i != len(m.Times)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_LockRoleRankingRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.ChallengeRoleid != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("challenge_roleid")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ChallengeRoleid)
		needWriteComma = true
	}
	if m.ChallengedRoleid != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("challenged_roleid")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ChallengedRoleid)
		needWriteComma = true
	}
	if m.RankingIndex != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if m.ChallengedRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("challenged_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChallengedRankingId))
		needWriteComma = true
	}
	if m.ChallengeRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("challenge_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChallengeRankingId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_LockRoleRankingResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *ArenaRanking_UnLockRoleRankingRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.RankingIndex != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_UnLockRoleRankingResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *ArenaRanking) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking) GoString() string {
	return m.String()
}

func (m *ArenaRanking_GetDatasRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_GetDatasRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_GetDatasRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_GetDatasResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_GetDatasResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_GetDatasResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking_GetSelfDataRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_GetSelfDataRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_GetSelfDataRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_GetSelfDataResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_GetSelfDataResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_GetSelfDataResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking_JoinRankingRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_JoinRankingRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_JoinRankingRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_JoinRankingResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_JoinRankingResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_JoinRankingResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking_GetChallengeRangeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_GetChallengeRangeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_GetChallengeRangeRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_GetChallengeRangeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_GetChallengeRangeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_GetChallengeRangeResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking_GetPlayerIsRobotRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_GetPlayerIsRobotRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_GetPlayerIsRobotRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_GetPlayerIsRobotResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_GetPlayerIsRobotResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_GetPlayerIsRobotResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking_SwapRankingIdRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_SwapRankingIdRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_SwapRankingIdRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_SwapRankingIdResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_SwapRankingIdResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_SwapRankingIdResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking_SetFirstChallengeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_SetFirstChallengeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_SetFirstChallengeRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_SetFirstChallengeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_SetFirstChallengeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_SetFirstChallengeResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking_ArenaGetRewardTimeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_ArenaGetRewardTimeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_ArenaGetRewardTimeRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_ArenaGetRewardTimeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_ArenaGetRewardTimeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_ArenaGetRewardTimeResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking_LockRoleRankingRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_LockRoleRankingRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_LockRoleRankingRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_LockRoleRankingResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_LockRoleRankingResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_LockRoleRankingResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking_UnLockRoleRankingRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_UnLockRoleRankingRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_UnLockRoleRankingRequest) GoString() string {
	return m.String()
}

func (m *ArenaRanking_UnLockRoleRankingResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_UnLockRoleRankingResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_UnLockRoleRankingResponse) GoString() string {
	return m.String()
}

func (m *ArenaRanking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ArenaRanking_GetDatasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.StartIndex != 0 {
		n += 1 + sovArena(uint64(m.StartIndex))
	}
	if m.Count != 0 {
		n += 1 + sovArena(uint64(m.Count))
	}
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_GetDatasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *ArenaRanking_GetSelfDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_GetSelfDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Element != nil {
		l = m.Element.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	if m.NextRefreshTime != 0 {
		n += 1 + sovArena(uint64(m.NextRefreshTime))
	}
	if m.SeasonOverTime != 0 {
		n += 1 + sovArena(uint64(m.SeasonOverTime))
	}
	if m.NextSettlementTime != 0 {
		n += 1 + sovArena(uint64(m.NextSettlementTime))
	}
	return n
}

func (m *ArenaRanking_JoinRankingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.PlayerInfo != nil {
		l = m.PlayerInfo.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_JoinRankingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_GetChallengeRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_GetChallengeRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *ArenaRanking_GetPlayerIsRobotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_GetPlayerIsRobotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRobot {
		n += 2
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_SwapRankingIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.RoleId_0)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.RoleId_1)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_SwapRankingIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwapInfo != nil {
		l = m.SwapInfo.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	if m.IsRobot {
		n += 2
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_SetFirstChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.Flg {
		n += 2
	}
	return n
}

func (m *ArenaRanking_SetFirstChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ArenaRanking_ArenaGetRewardTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ArenaRanking_ArenaGetRewardTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Times) > 0 {
		for _, e := range m.Times {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *ArenaRanking_LockRoleRankingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.ChallengeRoleid)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.ChallengedRoleid)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.ChallengedRankingId != 0 {
		n += 1 + sovArena(uint64(m.ChallengedRankingId))
	}
	if m.ChallengeRankingId != 0 {
		n += 1 + sovArena(uint64(m.ChallengeRankingId))
	}
	return n
}

func (m *ArenaRanking_LockRoleRankingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ArenaRanking_UnLockRoleRankingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRanking_UnLockRoleRankingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovArena(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArena(x uint64) (n int) {
	return sovArena(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArenaRanking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRanking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRanking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_GetDatasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDatasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDatasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_GetDatasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDatasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDatasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &models.ArenaDataElement{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_GetSelfDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSelfDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSelfDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_GetSelfDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSelfDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSelfDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Element == nil {
				m.Element = &models.ArenaDataElement{}
			}
			if err := m.Element.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonOverTime", wireType)
			}
			m.SeasonOverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonOverTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSettlementTime", wireType)
			}
			m.NextSettlementTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSettlementTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_JoinRankingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRankingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRankingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerInfo == nil {
				m.PlayerInfo = &models.ArenaRanking_Info{}
			}
			if err := m.PlayerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_JoinRankingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRankingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRankingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_GetChallengeRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChallengeRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChallengeRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_GetChallengeRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChallengeRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChallengeRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &models.ArenaDataElement{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_GetPlayerIsRobotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerIsRobotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerIsRobotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_GetPlayerIsRobotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerIsRobotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerIsRobotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_SwapRankingIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapRankingIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapRankingIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId_0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId_0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_SwapRankingIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapRankingIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapRankingIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwapInfo == nil {
				m.SwapInfo = &models.RankingSwapInfo{}
			}
			if err := m.SwapInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_SetFirstChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetFirstChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetFirstChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flg = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_SetFirstChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetFirstChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetFirstChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_ArenaGetRewardTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaGetRewardTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaGetRewardTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_ArenaGetRewardTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaGetRewardTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaGetRewardTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Times = append(m.Times, &models.ArenaRewardTime{})
			if err := m.Times[len(m.Times)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_LockRoleRankingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockRoleRankingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockRoleRankingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeRoleid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeRoleid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengedRoleid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengedRoleid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengedRankingId", wireType)
			}
			m.ChallengedRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengedRankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeRankingId", wireType)
			}
			m.ChallengeRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeRankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_LockRoleRankingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockRoleRankingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockRoleRankingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_UnLockRoleRankingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnLockRoleRankingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnLockRoleRankingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_UnLockRoleRankingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnLockRoleRankingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnLockRoleRankingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArena(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArena
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArena
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArena
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArena
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArena        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArena          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArena = fmt.Errorf("proto: unexpected end of group")
)
