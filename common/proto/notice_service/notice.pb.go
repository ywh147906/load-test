// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/notice-server/notice.proto

package notice_service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//----------------------以下所有协议仅服务端自己调用----------------------//
type Notice struct {
}

func (m *Notice) Reset()      { *m = Notice{} }
func (*Notice) ProtoMessage() {}
func (*Notice) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947aef5ffad4cd0, []int{0}
}
func (m *Notice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice.Merge(m, src)
}
func (m *Notice) XXX_Size() int {
	return m.Size()
}
func (m *Notice) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice.DiscardUnknown(m)
}

var xxx_messageInfo_Notice proto.InternalMessageInfo

func (*Notice) XXX_MessageName() string {
	return "notice_service.Notice"
}

type Notice_NoticeListRequest struct {
}

func (m *Notice_NoticeListRequest) Reset()      { *m = Notice_NoticeListRequest{} }
func (*Notice_NoticeListRequest) ProtoMessage() {}
func (*Notice_NoticeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947aef5ffad4cd0, []int{0, 0}
}
func (m *Notice_NoticeListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice_NoticeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice_NoticeListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice_NoticeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice_NoticeListRequest.Merge(m, src)
}
func (m *Notice_NoticeListRequest) XXX_Size() int {
	return m.Size()
}
func (m *Notice_NoticeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice_NoticeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Notice_NoticeListRequest proto.InternalMessageInfo

func (*Notice_NoticeListRequest) XXX_MessageName() string {
	return "notice_service.Notice.NoticeListRequest"
}

type Notice_NoticeListResponse struct {
	List []*models.Notice `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *Notice_NoticeListResponse) Reset()      { *m = Notice_NoticeListResponse{} }
func (*Notice_NoticeListResponse) ProtoMessage() {}
func (*Notice_NoticeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947aef5ffad4cd0, []int{0, 1}
}
func (m *Notice_NoticeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice_NoticeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice_NoticeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice_NoticeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice_NoticeListResponse.Merge(m, src)
}
func (m *Notice_NoticeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *Notice_NoticeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice_NoticeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Notice_NoticeListResponse proto.InternalMessageInfo

func (m *Notice_NoticeListResponse) GetList() []*models.Notice {
	if m != nil {
		return m.List
	}
	return nil
}

func (*Notice_NoticeListResponse) XXX_MessageName() string {
	return "notice_service.Notice.NoticeListResponse"
}

type Notice_NoticeDetailsRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Notice_NoticeDetailsRequest) Reset()      { *m = Notice_NoticeDetailsRequest{} }
func (*Notice_NoticeDetailsRequest) ProtoMessage() {}
func (*Notice_NoticeDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947aef5ffad4cd0, []int{0, 2}
}
func (m *Notice_NoticeDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice_NoticeDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice_NoticeDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice_NoticeDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice_NoticeDetailsRequest.Merge(m, src)
}
func (m *Notice_NoticeDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *Notice_NoticeDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice_NoticeDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Notice_NoticeDetailsRequest proto.InternalMessageInfo

func (m *Notice_NoticeDetailsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*Notice_NoticeDetailsRequest) XXX_MessageName() string {
	return "notice_service.Notice.NoticeDetailsRequest"
}

type Notice_NoticeDetailsResponse struct {
	Content *models.NoticeContent `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Notice_NoticeDetailsResponse) Reset()      { *m = Notice_NoticeDetailsResponse{} }
func (*Notice_NoticeDetailsResponse) ProtoMessage() {}
func (*Notice_NoticeDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947aef5ffad4cd0, []int{0, 3}
}
func (m *Notice_NoticeDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice_NoticeDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice_NoticeDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice_NoticeDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice_NoticeDetailsResponse.Merge(m, src)
}
func (m *Notice_NoticeDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *Notice_NoticeDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice_NoticeDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Notice_NoticeDetailsResponse proto.InternalMessageInfo

func (m *Notice_NoticeDetailsResponse) GetContent() *models.NoticeContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (*Notice_NoticeDetailsResponse) XXX_MessageName() string {
	return "notice_service.Notice.NoticeDetailsResponse"
}

type Notice_NoticeUpdateRequest struct {
	Data    *models.Notice        `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Content *models.NoticeContent `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	BeginAt int64                 `protobuf:"varint,3,opt,name=begin_at,json=beginAt,proto3" json:"begin_at,omitempty"`
}

func (m *Notice_NoticeUpdateRequest) Reset()      { *m = Notice_NoticeUpdateRequest{} }
func (*Notice_NoticeUpdateRequest) ProtoMessage() {}
func (*Notice_NoticeUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947aef5ffad4cd0, []int{0, 4}
}
func (m *Notice_NoticeUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice_NoticeUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice_NoticeUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice_NoticeUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice_NoticeUpdateRequest.Merge(m, src)
}
func (m *Notice_NoticeUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *Notice_NoticeUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice_NoticeUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Notice_NoticeUpdateRequest proto.InternalMessageInfo

func (m *Notice_NoticeUpdateRequest) GetData() *models.Notice {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Notice_NoticeUpdateRequest) GetContent() *models.NoticeContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Notice_NoticeUpdateRequest) GetBeginAt() int64 {
	if m != nil {
		return m.BeginAt
	}
	return 0
}

func (*Notice_NoticeUpdateRequest) XXX_MessageName() string {
	return "notice_service.Notice.NoticeUpdateRequest"
}

type Notice_NoticeUpdateResponse struct {
}

func (m *Notice_NoticeUpdateResponse) Reset()      { *m = Notice_NoticeUpdateResponse{} }
func (*Notice_NoticeUpdateResponse) ProtoMessage() {}
func (*Notice_NoticeUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947aef5ffad4cd0, []int{0, 5}
}
func (m *Notice_NoticeUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice_NoticeUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice_NoticeUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice_NoticeUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice_NoticeUpdateResponse.Merge(m, src)
}
func (m *Notice_NoticeUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *Notice_NoticeUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice_NoticeUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Notice_NoticeUpdateResponse proto.InternalMessageInfo

func (*Notice_NoticeUpdateResponse) XXX_MessageName() string {
	return "notice_service.Notice.NoticeUpdateResponse"
}

type Notice_NoticeDeleteRequest struct {
	NoticeId string `protobuf:"bytes,1,opt,name=notice_id,json=noticeId,proto3" json:"notice_id,omitempty"`
}

func (m *Notice_NoticeDeleteRequest) Reset()      { *m = Notice_NoticeDeleteRequest{} }
func (*Notice_NoticeDeleteRequest) ProtoMessage() {}
func (*Notice_NoticeDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947aef5ffad4cd0, []int{0, 6}
}
func (m *Notice_NoticeDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice_NoticeDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice_NoticeDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice_NoticeDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice_NoticeDeleteRequest.Merge(m, src)
}
func (m *Notice_NoticeDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *Notice_NoticeDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice_NoticeDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Notice_NoticeDeleteRequest proto.InternalMessageInfo

func (m *Notice_NoticeDeleteRequest) GetNoticeId() string {
	if m != nil {
		return m.NoticeId
	}
	return ""
}

func (*Notice_NoticeDeleteRequest) XXX_MessageName() string {
	return "notice_service.Notice.NoticeDeleteRequest"
}

type Notice_NoticeDeleteResponse struct {
}

func (m *Notice_NoticeDeleteResponse) Reset()      { *m = Notice_NoticeDeleteResponse{} }
func (*Notice_NoticeDeleteResponse) ProtoMessage() {}
func (*Notice_NoticeDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2947aef5ffad4cd0, []int{0, 7}
}
func (m *Notice_NoticeDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice_NoticeDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice_NoticeDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice_NoticeDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice_NoticeDeleteResponse.Merge(m, src)
}
func (m *Notice_NoticeDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *Notice_NoticeDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice_NoticeDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Notice_NoticeDeleteResponse proto.InternalMessageInfo

func (*Notice_NoticeDeleteResponse) XXX_MessageName() string {
	return "notice_service.Notice.NoticeDeleteResponse"
}
func init() {
	proto.RegisterType((*Notice)(nil), "notice_service.Notice")
	proto.RegisterType((*Notice_NoticeListRequest)(nil), "notice_service.Notice.NoticeListRequest")
	proto.RegisterType((*Notice_NoticeListResponse)(nil), "notice_service.Notice.NoticeListResponse")
	proto.RegisterType((*Notice_NoticeDetailsRequest)(nil), "notice_service.Notice.NoticeDetailsRequest")
	proto.RegisterType((*Notice_NoticeDetailsResponse)(nil), "notice_service.Notice.NoticeDetailsResponse")
	proto.RegisterType((*Notice_NoticeUpdateRequest)(nil), "notice_service.Notice.NoticeUpdateRequest")
	proto.RegisterType((*Notice_NoticeUpdateResponse)(nil), "notice_service.Notice.NoticeUpdateResponse")
	proto.RegisterType((*Notice_NoticeDeleteRequest)(nil), "notice_service.Notice.NoticeDeleteRequest")
	proto.RegisterType((*Notice_NoticeDeleteResponse)(nil), "notice_service.Notice.NoticeDeleteResponse")
}

func init() { proto.RegisterFile("proto/notice-server/notice.proto", fileDescriptor_2947aef5ffad4cd0) }

var fileDescriptor_2947aef5ffad4cd0 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x4e, 0x32, 0x41,
	0x14, 0xc5, 0x77, 0x58, 0xc2, 0x9f, 0x4b, 0x42, 0xf2, 0x2d, 0x1f, 0x0a, 0x63, 0x32, 0xd9, 0x50,
	0x28, 0x8d, 0x90, 0x60, 0x63, 0xab, 0x52, 0x68, 0x62, 0x2c, 0x36, 0xa1, 0xb1, 0x21, 0xcb, 0xee,
	0x8d, 0x99, 0x64, 0xd9, 0x41, 0x66, 0xf4, 0x0d, 0xec, 0x7d, 0x0c, 0x5f, 0xc0, 0x77, 0xa0, 0xa4,
	0xa4, 0xd4, 0xdd, 0xc6, 0xd2, 0x47, 0x30, 0xec, 0xec, 0x08, 0x68, 0x63, 0xb7, 0xf7, 0xfe, 0xce,
	0x9c, 0x73, 0x67, 0xe7, 0x82, 0x3b, 0x9b, 0x0b, 0x25, 0xfa, 0xb1, 0x50, 0x3c, 0xc0, 0x63, 0x89,
	0xf3, 0x47, 0x9c, 0xe7, 0x55, 0x2f, 0x43, 0x4e, 0x5d, 0x57, 0xe3, 0x35, 0xe3, 0x01, 0xd2, 0xb6,
	0x3e, 0x31, 0x15, 0x21, 0x46, 0x72, 0x47, 0x4a, 0xf7, 0x77, 0xd0, 0xc4, 0x97, 0x39, 0xe8, 0xbc,
	0xda, 0x50, 0xba, 0xc9, 0x94, 0xb4, 0x01, 0xff, 0xf4, 0xd7, 0x35, 0x97, 0xca, 0xc3, 0xfb, 0x07,
	0x94, 0x8a, 0x9e, 0x82, 0xb3, 0xdd, 0x94, 0x33, 0x11, 0x4b, 0x74, 0x3a, 0x50, 0x8c, 0xb8, 0x54,
	0x2d, 0xe2, 0xda, 0xdd, 0xda, 0xa0, 0xde, 0xd3, 0xbe, 0x3d, 0xad, 0xf4, 0x32, 0x46, 0x0f, 0xe1,
	0xbf, 0xae, 0x87, 0xa8, 0x7c, 0x1e, 0xc9, 0xdc, 0xd1, 0xa9, 0x43, 0x81, 0x87, 0x2d, 0xe2, 0x92,
	0x6e, 0xd5, 0x2b, 0xf0, 0x90, 0x5e, 0x42, 0xf3, 0x87, 0x2e, 0x0f, 0xe9, 0x43, 0x39, 0x10, 0xb1,
	0xc2, 0x58, 0x65, 0xea, 0xda, 0xa0, 0xb9, 0x9b, 0x73, 0xa1, 0xa1, 0x67, 0x54, 0xf4, 0x89, 0x40,
	0x43, 0xa3, 0xd1, 0x2c, 0xf4, 0x15, 0x9a, 0xc4, 0x0e, 0x14, 0x43, 0x5f, 0xf9, 0xb9, 0xcb, 0xaf,
	0x69, 0xd7, 0x6c, 0x3b, 0xac, 0xf0, 0x97, 0x30, 0xa7, 0x0d, 0x95, 0x09, 0xde, 0xf1, 0x78, 0xec,
	0xab, 0x96, 0xed, 0x92, 0xae, 0xed, 0x95, 0xb3, 0xfa, 0x4c, 0xd1, 0x3d, 0x73, 0x73, 0x33, 0x86,
	0xbe, 0x10, 0x1d, 0x98, 0xf1, 0x86, 0x18, 0xe1, 0x66, 0xbc, 0x03, 0xa8, 0xe6, 0x0f, 0xf9, 0xfd,
	0x5f, 0x2a, 0xba, 0x71, 0x15, 0x6e, 0xbc, 0xcc, 0x19, 0xed, 0x75, 0x3e, 0x5a, 0xbd, 0x33, 0xeb,
	0x25, 0x61, 0x64, 0x91, 0x30, 0xb2, 0x4c, 0x18, 0x79, 0x4b, 0x18, 0xf9, 0x48, 0x98, 0xf5, 0x99,
	0x30, 0xf2, 0x9c, 0x32, 0x6b, 0x91, 0x32, 0xb2, 0x4c, 0x99, 0xb5, 0x4a, 0x99, 0x75, 0x7b, 0x14,
	0x08, 0x1e, 0x9b, 0x1d, 0x0a, 0xc4, 0x74, 0x2a, 0xe2, 0xfe, 0xf6, 0x7a, 0x99, 0x15, 0x9a, 0x94,
	0xb2, 0xee, 0xc9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x48, 0x5c, 0x3b, 0x28, 0x7d, 0x02, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice_NoticeListRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice_NoticeListResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice_NoticeDetailsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice_NoticeDetailsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice_NoticeUpdateRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice_NoticeUpdateResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice_NoticeDeleteRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice_NoticeDeleteResponse.Get().(proto.Message)
	})
}

var poolNotice = &sync.Pool{New: func() interface{} { return &Notice{} }}

func (m *Notice) ReleasePool() { m.Reset(); poolNotice.Put(m); m = nil }

var poolNotice_NoticeListRequest = &sync.Pool{New: func() interface{} { return &Notice_NoticeListRequest{} }}

func (m *Notice_NoticeListRequest) ReleasePool() {
	m.Reset()
	poolNotice_NoticeListRequest.Put(m)
	m = nil
}

var poolNotice_NoticeListResponse = &sync.Pool{New: func() interface{} { return &Notice_NoticeListResponse{} }}

func (m *Notice_NoticeListResponse) ReleasePool() {
	m.Reset()
	poolNotice_NoticeListResponse.Put(m)
	m = nil
}

var poolNotice_NoticeDetailsRequest = &sync.Pool{New: func() interface{} { return &Notice_NoticeDetailsRequest{} }}

func (m *Notice_NoticeDetailsRequest) ReleasePool() {
	m.Reset()
	poolNotice_NoticeDetailsRequest.Put(m)
	m = nil
}

var poolNotice_NoticeDetailsResponse = &sync.Pool{New: func() interface{} { return &Notice_NoticeDetailsResponse{} }}

func (m *Notice_NoticeDetailsResponse) ReleasePool() {
	m.Reset()
	poolNotice_NoticeDetailsResponse.Put(m)
	m = nil
}

var poolNotice_NoticeUpdateRequest = &sync.Pool{New: func() interface{} { return &Notice_NoticeUpdateRequest{} }}

func (m *Notice_NoticeUpdateRequest) ReleasePool() {
	m.Reset()
	poolNotice_NoticeUpdateRequest.Put(m)
	m = nil
}

var poolNotice_NoticeUpdateResponse = &sync.Pool{New: func() interface{} { return &Notice_NoticeUpdateResponse{} }}

func (m *Notice_NoticeUpdateResponse) ReleasePool() {
	m.Reset()
	poolNotice_NoticeUpdateResponse.Put(m)
	m = nil
}

var poolNotice_NoticeDeleteRequest = &sync.Pool{New: func() interface{} { return &Notice_NoticeDeleteRequest{} }}

func (m *Notice_NoticeDeleteRequest) ReleasePool() {
	m.Reset()
	poolNotice_NoticeDeleteRequest.Put(m)
	m = nil
}

var poolNotice_NoticeDeleteResponse = &sync.Pool{New: func() interface{} { return &Notice_NoticeDeleteResponse{} }}

func (m *Notice_NoticeDeleteResponse) ReleasePool() {
	m.Reset()
	poolNotice_NoticeDeleteResponse.Put(m)
	m = nil
}
func (this *Notice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice)
	if !ok {
		that2, ok := that.(Notice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Notice_NoticeListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice_NoticeListRequest)
	if !ok {
		that2, ok := that.(Notice_NoticeListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Notice_NoticeListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice_NoticeListResponse)
	if !ok {
		that2, ok := that.(Notice_NoticeListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *Notice_NoticeDetailsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice_NoticeDetailsRequest)
	if !ok {
		that2, ok := that.(Notice_NoticeDetailsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Notice_NoticeDetailsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice_NoticeDetailsResponse)
	if !ok {
		that2, ok := that.(Notice_NoticeDetailsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *Notice_NoticeUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice_NoticeUpdateRequest)
	if !ok {
		that2, ok := that.(Notice_NoticeUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if this.BeginAt != that1.BeginAt {
		return false
	}
	return true
}
func (this *Notice_NoticeUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice_NoticeUpdateResponse)
	if !ok {
		that2, ok := that.(Notice_NoticeUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Notice_NoticeDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice_NoticeDeleteRequest)
	if !ok {
		that2, ok := that.(Notice_NoticeDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NoticeId != that1.NoticeId {
		return false
	}
	return true
}
func (this *Notice_NoticeDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice_NoticeDeleteResponse)
	if !ok {
		that2, ok := that.(Notice_NoticeDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Notice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Notice_NoticeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice_NoticeListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice_NoticeListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Notice_NoticeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice_NoticeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice_NoticeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNotice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Notice_NoticeDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice_NoticeDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice_NoticeDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNotice(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Notice_NoticeDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice_NoticeDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice_NoticeDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Notice_NoticeUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice_NoticeUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice_NoticeUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BeginAt != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.BeginAt))
		i--
		dAtA[i] = 0x18
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Notice_NoticeUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice_NoticeUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice_NoticeUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Notice_NoticeDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice_NoticeDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice_NoticeDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NoticeId) > 0 {
		i -= len(m.NoticeId)
		copy(dAtA[i:], m.NoticeId)
		i = encodeVarintNotice(dAtA, i, uint64(len(m.NoticeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Notice_NoticeDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice_NoticeDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice_NoticeDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintNotice(dAtA []byte, offset int, v uint64) int {
	offset -= sovNotice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Notice) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Notice_NoticeListRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Notice_NoticeListResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("list")
	w.RawByte('"')
	w.RawByte(':')
	if m.List == nil {
		w.RawString("null")
	} else if len(m.List) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.List {
			v.JsonBytes(w)
			if i != len(m.List)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Notice_NoticeDetailsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Notice_NoticeDetailsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("content")
	w.RawByte('"')
	w.RawByte(':')
	m.Content.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Notice_NoticeUpdateRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	m.Data.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("content")
	w.RawByte('"')
	w.RawByte(':')
	m.Content.JsonBytes(w)
	needWriteComma = true
	if m.BeginAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("begin_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BeginAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Notice_NoticeUpdateResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Notice_NoticeDeleteRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.NoticeId != "" {
		w.RawByte('"')
		w.RawString("notice_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NoticeId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Notice_NoticeDeleteResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Notice) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice) GoString() string {
	return m.String()
}

func (m *Notice_NoticeListRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice_NoticeListRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice_NoticeListRequest) GoString() string {
	return m.String()
}

func (m *Notice_NoticeListResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice_NoticeListResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice_NoticeListResponse) GoString() string {
	return m.String()
}

func (m *Notice_NoticeDetailsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice_NoticeDetailsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice_NoticeDetailsRequest) GoString() string {
	return m.String()
}

func (m *Notice_NoticeDetailsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice_NoticeDetailsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice_NoticeDetailsResponse) GoString() string {
	return m.String()
}

func (m *Notice_NoticeUpdateRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice_NoticeUpdateRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice_NoticeUpdateRequest) GoString() string {
	return m.String()
}

func (m *Notice_NoticeUpdateResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice_NoticeUpdateResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice_NoticeUpdateResponse) GoString() string {
	return m.String()
}

func (m *Notice_NoticeDeleteRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice_NoticeDeleteRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice_NoticeDeleteRequest) GoString() string {
	return m.String()
}

func (m *Notice_NoticeDeleteResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice_NoticeDeleteResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice_NoticeDeleteResponse) GoString() string {
	return m.String()
}

func (m *Notice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Notice_NoticeListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Notice_NoticeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovNotice(uint64(l))
		}
	}
	return n
}

func (m *Notice_NoticeDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}

func (m *Notice_NoticeDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}

func (m *Notice_NoticeUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	if m.BeginAt != 0 {
		n += 1 + sovNotice(uint64(m.BeginAt))
	}
	return n
}

func (m *Notice_NoticeUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Notice_NoticeDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NoticeId)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}

func (m *Notice_NoticeDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovNotice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotice(x uint64) (n int) {
	return sovNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Notice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice_NoticeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice_NoticeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &models.Notice{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice_NoticeDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice_NoticeDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &models.NoticeContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice_NoticeUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &models.Notice{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &models.NoticeContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginAt", wireType)
			}
			m.BeginAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice_NoticeUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice_NoticeDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoticeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice_NoticeDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNotice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNotice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNotice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNotice = fmt.Errorf("proto: unexpected end of group")
)
