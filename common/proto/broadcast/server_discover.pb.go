// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/broadcast/server_discover.proto

package broadcast

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Stats struct {
}

func (m *Stats) Reset()      { *m = Stats{} }
func (*Stats) ProtoMessage() {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e471be2b9b4a06, []int{0}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (*Stats) XXX_MessageName() string {
	return "broadcast.Stats"
}

type Stats_ServerStats struct {
	UniqueId   string            `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	ServerType models.ServerType `protobuf:"varint,2,opt,name=server_type,json=serverType,proto3,enum=models.ServerType" json:"server_type,omitempty"`
	ServerId   int64             `protobuf:"varint,3,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	MaxCount   int64             `protobuf:"varint,4,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	CurrCount  int64             `protobuf:"varint,5,opt,name=curr_count,json=currCount,proto3" json:"curr_count,omitempty"`
	Timestamp  int64             `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Stats      *Stats_StatsInfo  `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (m *Stats_ServerStats) Reset()      { *m = Stats_ServerStats{} }
func (*Stats_ServerStats) ProtoMessage() {}
func (*Stats_ServerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e471be2b9b4a06, []int{0, 0}
}
func (m *Stats_ServerStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats_ServerStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats_ServerStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats_ServerStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats_ServerStats.Merge(m, src)
}
func (m *Stats_ServerStats) XXX_Size() int {
	return m.Size()
}
func (m *Stats_ServerStats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats_ServerStats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats_ServerStats proto.InternalMessageInfo

func (m *Stats_ServerStats) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *Stats_ServerStats) GetServerType() models.ServerType {
	if m != nil {
		return m.ServerType
	}
	return models.ServerType_Unknown
}

func (m *Stats_ServerStats) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *Stats_ServerStats) GetMaxCount() int64 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *Stats_ServerStats) GetCurrCount() int64 {
	if m != nil {
		return m.CurrCount
	}
	return 0
}

func (m *Stats_ServerStats) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Stats_ServerStats) GetStats() *Stats_StatsInfo {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (*Stats_ServerStats) XXX_MessageName() string {
	return "broadcast.Stats.ServerStats"
}

type Stats_NetworkIOInfo struct {
	BytesSent   uint64 `protobuf:"varint,1,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesRecv   uint64 `protobuf:"varint,2,opt,name=bytes_recv,json=bytesRecv,proto3" json:"bytes_recv,omitempty"`
	PacketsSent uint64 `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	PacketsRecv uint64 `protobuf:"varint,4,opt,name=packets_recv,json=packetsRecv,proto3" json:"packets_recv,omitempty"`
	ErrIn       uint64 `protobuf:"varint,5,opt,name=err_in,json=errIn,proto3" json:"err_in,omitempty"`
	ErrOut      uint64 `protobuf:"varint,6,opt,name=err_out,json=errOut,proto3" json:"err_out,omitempty"`
}

func (m *Stats_NetworkIOInfo) Reset()      { *m = Stats_NetworkIOInfo{} }
func (*Stats_NetworkIOInfo) ProtoMessage() {}
func (*Stats_NetworkIOInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e471be2b9b4a06, []int{0, 1}
}
func (m *Stats_NetworkIOInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats_NetworkIOInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats_NetworkIOInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats_NetworkIOInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats_NetworkIOInfo.Merge(m, src)
}
func (m *Stats_NetworkIOInfo) XXX_Size() int {
	return m.Size()
}
func (m *Stats_NetworkIOInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats_NetworkIOInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Stats_NetworkIOInfo proto.InternalMessageInfo

func (m *Stats_NetworkIOInfo) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *Stats_NetworkIOInfo) GetBytesRecv() uint64 {
	if m != nil {
		return m.BytesRecv
	}
	return 0
}

func (m *Stats_NetworkIOInfo) GetPacketsSent() uint64 {
	if m != nil {
		return m.PacketsSent
	}
	return 0
}

func (m *Stats_NetworkIOInfo) GetPacketsRecv() uint64 {
	if m != nil {
		return m.PacketsRecv
	}
	return 0
}

func (m *Stats_NetworkIOInfo) GetErrIn() uint64 {
	if m != nil {
		return m.ErrIn
	}
	return 0
}

func (m *Stats_NetworkIOInfo) GetErrOut() uint64 {
	if m != nil {
		return m.ErrOut
	}
	return 0
}

func (*Stats_NetworkIOInfo) XXX_MessageName() string {
	return "broadcast.Stats.NetworkIOInfo"
}

type Stats_DiskIoInfo struct {
	ReadCount      uint64 `protobuf:"varint,1,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`
	WriteCount     uint64 `protobuf:"varint,2,opt,name=write_count,json=writeCount,proto3" json:"write_count,omitempty"`
	ReadBytes      uint64 `protobuf:"varint,3,opt,name=read_bytes,json=readBytes,proto3" json:"read_bytes,omitempty"`
	WriteBytes     uint64 `protobuf:"varint,4,opt,name=write_bytes,json=writeBytes,proto3" json:"write_bytes,omitempty"`
	IopsInProgress uint64 `protobuf:"varint,5,opt,name=iops_in_progress,json=iopsInProgress,proto3" json:"iops_in_progress,omitempty"`
}

func (m *Stats_DiskIoInfo) Reset()      { *m = Stats_DiskIoInfo{} }
func (*Stats_DiskIoInfo) ProtoMessage() {}
func (*Stats_DiskIoInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e471be2b9b4a06, []int{0, 2}
}
func (m *Stats_DiskIoInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats_DiskIoInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats_DiskIoInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats_DiskIoInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats_DiskIoInfo.Merge(m, src)
}
func (m *Stats_DiskIoInfo) XXX_Size() int {
	return m.Size()
}
func (m *Stats_DiskIoInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats_DiskIoInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Stats_DiskIoInfo proto.InternalMessageInfo

func (m *Stats_DiskIoInfo) GetReadCount() uint64 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

func (m *Stats_DiskIoInfo) GetWriteCount() uint64 {
	if m != nil {
		return m.WriteCount
	}
	return 0
}

func (m *Stats_DiskIoInfo) GetReadBytes() uint64 {
	if m != nil {
		return m.ReadBytes
	}
	return 0
}

func (m *Stats_DiskIoInfo) GetWriteBytes() uint64 {
	if m != nil {
		return m.WriteBytes
	}
	return 0
}

func (m *Stats_DiskIoInfo) GetIopsInProgress() uint64 {
	if m != nil {
		return m.IopsInProgress
	}
	return 0
}

func (*Stats_DiskIoInfo) XXX_MessageName() string {
	return "broadcast.Stats.DiskIoInfo"
}

type Stats_StatsInfo struct {
	CpuPercent    float64                      `protobuf:"fixed64,1,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	MemPercent    float64                      `protobuf:"fixed64,2,opt,name=mem_percent,json=memPercent,proto3" json:"mem_percent,omitempty"`
	DiskPercent   map[string]float64           `protobuf:"bytes,3,rep,name=disk_percent,json=diskPercent,proto3" json:"disk_percent,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	NetworkIoInfo *Stats_NetworkIOInfo         `protobuf:"bytes,4,opt,name=network_io_info,json=networkIoInfo,proto3" json:"network_io_info,omitempty"`
	DiskIoInfos   map[string]*Stats_DiskIoInfo `protobuf:"bytes,5,rep,name=disk_io_infos,json=diskIoInfos,proto3" json:"disk_io_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Pi            *Stats_ProgressInfo          `protobuf:"bytes,6,opt,name=pi,proto3" json:"pi,omitempty"`
}

func (m *Stats_StatsInfo) Reset()      { *m = Stats_StatsInfo{} }
func (*Stats_StatsInfo) ProtoMessage() {}
func (*Stats_StatsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e471be2b9b4a06, []int{0, 3}
}
func (m *Stats_StatsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats_StatsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats_StatsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats_StatsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats_StatsInfo.Merge(m, src)
}
func (m *Stats_StatsInfo) XXX_Size() int {
	return m.Size()
}
func (m *Stats_StatsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats_StatsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Stats_StatsInfo proto.InternalMessageInfo

func (m *Stats_StatsInfo) GetCpuPercent() float64 {
	if m != nil {
		return m.CpuPercent
	}
	return 0
}

func (m *Stats_StatsInfo) GetMemPercent() float64 {
	if m != nil {
		return m.MemPercent
	}
	return 0
}

func (m *Stats_StatsInfo) GetDiskPercent() map[string]float64 {
	if m != nil {
		return m.DiskPercent
	}
	return nil
}

func (m *Stats_StatsInfo) GetNetworkIoInfo() *Stats_NetworkIOInfo {
	if m != nil {
		return m.NetworkIoInfo
	}
	return nil
}

func (m *Stats_StatsInfo) GetDiskIoInfos() map[string]*Stats_DiskIoInfo {
	if m != nil {
		return m.DiskIoInfos
	}
	return nil
}

func (m *Stats_StatsInfo) GetPi() *Stats_ProgressInfo {
	if m != nil {
		return m.Pi
	}
	return nil
}

func (*Stats_StatsInfo) XXX_MessageName() string {
	return "broadcast.Stats.StatsInfo"
}

type Stats_ProgressInfo struct {
	CpuPercent    float64 `protobuf:"fixed64,1,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	MemPercent    float64 `protobuf:"fixed64,2,opt,name=mem_percent,json=memPercent,proto3" json:"mem_percent,omitempty"`
	Name          string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status        string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	StartTime     int64   `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	NumThreads    int64   `protobuf:"varint,6,opt,name=num_threads,json=numThreads,proto3" json:"num_threads,omitempty"`
	NumFds        int64   `protobuf:"varint,7,opt,name=num_fds,json=numFds,proto3" json:"num_fds,omitempty"`
	Pid           int64   `protobuf:"varint,8,opt,name=pid,proto3" json:"pid,omitempty"`
	NumGoroutines int64   `protobuf:"varint,9,opt,name=num_goroutines,json=numGoroutines,proto3" json:"num_goroutines,omitempty"`
	Exe           string  `protobuf:"bytes,10,opt,name=exe,proto3" json:"exe,omitempty"`
}

func (m *Stats_ProgressInfo) Reset()      { *m = Stats_ProgressInfo{} }
func (*Stats_ProgressInfo) ProtoMessage() {}
func (*Stats_ProgressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e471be2b9b4a06, []int{0, 4}
}
func (m *Stats_ProgressInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats_ProgressInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats_ProgressInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats_ProgressInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats_ProgressInfo.Merge(m, src)
}
func (m *Stats_ProgressInfo) XXX_Size() int {
	return m.Size()
}
func (m *Stats_ProgressInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats_ProgressInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Stats_ProgressInfo proto.InternalMessageInfo

func (m *Stats_ProgressInfo) GetCpuPercent() float64 {
	if m != nil {
		return m.CpuPercent
	}
	return 0
}

func (m *Stats_ProgressInfo) GetMemPercent() float64 {
	if m != nil {
		return m.MemPercent
	}
	return 0
}

func (m *Stats_ProgressInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stats_ProgressInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Stats_ProgressInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Stats_ProgressInfo) GetNumThreads() int64 {
	if m != nil {
		return m.NumThreads
	}
	return 0
}

func (m *Stats_ProgressInfo) GetNumFds() int64 {
	if m != nil {
		return m.NumFds
	}
	return 0
}

func (m *Stats_ProgressInfo) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Stats_ProgressInfo) GetNumGoroutines() int64 {
	if m != nil {
		return m.NumGoroutines
	}
	return 0
}

func (m *Stats_ProgressInfo) GetExe() string {
	if m != nil {
		return m.Exe
	}
	return ""
}

func (*Stats_ProgressInfo) XXX_MessageName() string {
	return "broadcast.Stats.ProgressInfo"
}
func init() {
	proto.RegisterType((*Stats)(nil), "broadcast.Stats")
	proto.RegisterType((*Stats_ServerStats)(nil), "broadcast.Stats.ServerStats")
	proto.RegisterType((*Stats_NetworkIOInfo)(nil), "broadcast.Stats.NetworkIOInfo")
	proto.RegisterType((*Stats_DiskIoInfo)(nil), "broadcast.Stats.DiskIoInfo")
	proto.RegisterType((*Stats_StatsInfo)(nil), "broadcast.Stats.StatsInfo")
	proto.RegisterMapType((map[string]*Stats_DiskIoInfo)(nil), "broadcast.Stats.StatsInfo.DiskIoInfosEntry")
	proto.RegisterMapType((map[string]float64)(nil), "broadcast.Stats.StatsInfo.DiskPercentEntry")
	proto.RegisterType((*Stats_ProgressInfo)(nil), "broadcast.Stats.ProgressInfo")
}

func init() {
	proto.RegisterFile("proto/broadcast/server_discover.proto", fileDescriptor_d1e471be2b9b4a06)
}

var fileDescriptor_d1e471be2b9b4a06 = []byte{
	// 816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xbf, 0x8f, 0x1b, 0x45,
	0x14, 0xf6, 0xda, 0x6b, 0xe7, 0xf6, 0xed, 0xf9, 0x38, 0xad, 0xf8, 0xb1, 0x6c, 0xc8, 0x62, 0x22,
	0x45, 0xb2, 0x84, 0x62, 0x83, 0xd3, 0x20, 0x0a, 0x8a, 0x00, 0x41, 0x6e, 0x72, 0xa7, 0xbd, 0xab,
	0xa0, 0x58, 0xed, 0xed, 0xbe, 0x4b, 0x46, 0xce, 0xcc, 0x2c, 0x33, 0xb3, 0x8e, 0xdd, 0x52, 0x51,
	0xf2, 0x27, 0x50, 0xf2, 0x17, 0x20, 0x51, 0xd3, 0xa4, 0x4c, 0x99, 0x12, 0xec, 0x86, 0x92, 0x3f,
	0x01, 0xcd, 0x0f, 0xef, 0x39, 0x77, 0x20, 0x51, 0xa4, 0xb1, 0x66, 0xbe, 0xf7, 0x7d, 0x6f, 0xdf,
	0xfb, 0xe6, 0xcd, 0x18, 0xee, 0xd5, 0x82, 0x2b, 0x3e, 0xbd, 0x10, 0xbc, 0xa8, 0xca, 0x42, 0xaa,
	0xa9, 0x44, 0xb1, 0x44, 0x91, 0x57, 0x44, 0x96, 0x7c, 0x89, 0x62, 0x62, 0xe2, 0x51, 0xd0, 0x12,
	0x92, 0xf7, 0xad, 0x82, 0xf2, 0x0a, 0x9f, 0xc9, 0xe9, 0x53, 0x2c, 0xaa, 0x1d, 0xeb, 0xee, 0x6f,
	0x21, 0xf4, 0xcf, 0x54, 0xa1, 0x64, 0xf2, 0x63, 0x17, 0xc2, 0x33, 0x93, 0xc9, 0xec, 0xa3, 0xdb,
	0x10, 0x34, 0x8c, 0x7c, 0xdf, 0x60, 0x4e, 0xaa, 0xd8, 0x1b, 0x79, 0xe3, 0x20, 0x3b, 0xb0, 0xc0,
	0xbc, 0x8a, 0x1e, 0x40, 0xe8, 0xbe, 0xaa, 0xd6, 0x35, 0xc6, 0xdd, 0x91, 0x37, 0x3e, 0x9a, 0x45,
	0x13, 0xfb, 0x85, 0x89, 0x4d, 0x73, 0xbe, 0xae, 0x31, 0x03, 0xd9, 0xae, 0x75, 0x46, 0x27, 0x22,
	0x55, 0xdc, 0x1b, 0x79, 0xe3, 0x5e, 0x76, 0x60, 0x81, 0x79, 0xa5, 0x83, 0xb4, 0x58, 0xe5, 0x25,
	0x6f, 0x98, 0x8a, 0x7d, 0x1b, 0xa4, 0xc5, 0xea, 0x4b, 0xbd, 0x8f, 0xee, 0x00, 0x94, 0x8d, 0x10,
	0x2e, 0xda, 0x37, 0xd1, 0x40, 0x23, 0x36, 0xfc, 0x01, 0x04, 0x8a, 0x50, 0x94, 0xaa, 0xa0, 0x75,
	0x3c, 0xb0, 0xd1, 0x16, 0x88, 0x3e, 0x81, 0xbe, 0xd4, 0x1d, 0xc5, 0xb7, 0x46, 0xde, 0x38, 0x9c,
	0x25, 0x93, 0xd6, 0x98, 0x89, 0xe9, 0xd4, 0xfe, 0xce, 0xd9, 0x25, 0xcf, 0x2c, 0x31, 0xf9, 0xdd,
	0x83, 0xe1, 0x63, 0x54, 0xcf, 0xb9, 0x58, 0xcc, 0x4f, 0x74, 0x40, 0x17, 0x70, 0xb1, 0x56, 0x28,
	0x73, 0x89, 0x4c, 0x19, 0x37, 0xfc, 0x2c, 0x30, 0xc8, 0x19, 0xda, 0xfa, 0x6c, 0x58, 0x60, 0xb9,
	0x34, 0x6e, 0xec, 0xc2, 0x19, 0x96, 0xcb, 0xe8, 0x23, 0x38, 0xac, 0x8b, 0x72, 0x81, 0xca, 0xe9,
	0x7b, 0x86, 0x10, 0x3a, 0xcc, 0x64, 0xd8, 0xa3, 0x98, 0x1c, 0xfe, 0x6b, 0x14, 0x93, 0xe5, 0x1d,
	0x18, 0xa0, 0x10, 0x39, 0x61, 0xc6, 0x00, 0x3f, 0xeb, 0xa3, 0x10, 0x73, 0x16, 0xbd, 0x07, 0xb7,
	0x34, 0xcc, 0x1b, 0x65, 0x5a, 0xf7, 0x33, 0xcd, 0x3a, 0x69, 0x54, 0xf2, 0xab, 0x07, 0xf0, 0x15,
	0x91, 0x8b, 0x39, 0xdf, 0xb5, 0x20, 0xb0, 0xa8, 0x9c, 0x87, 0xae, 0x05, 0x8d, 0x58, 0x0f, 0x3f,
	0x84, 0xf0, 0xb9, 0x20, 0x0a, 0x5d, 0xdc, 0xf6, 0x00, 0x06, 0x6a, 0xcf, 0xc0, 0xe8, 0x4d, 0x5b,
	0xae, 0x05, 0xa3, 0x7f, 0xa8, 0x81, 0x2b, 0xbd, 0x8d, 0xfb, 0x7b, 0x7a, 0x4b, 0x18, 0xc3, 0x31,
	0xe1, 0xb5, 0xcc, 0x09, 0xcb, 0x6b, 0xc1, 0x9f, 0x08, 0x94, 0xd2, 0x35, 0x72, 0xa4, 0xf1, 0x39,
	0x3b, 0x75, 0x68, 0xf2, 0x83, 0x0f, 0x41, 0x7b, 0x26, 0x3a, 0x71, 0x59, 0x37, 0x79, 0x8d, 0xa2,
	0xdc, 0x79, 0xef, 0x65, 0x50, 0xd6, 0xcd, 0xa9, 0x45, 0x34, 0x81, 0x22, 0x6d, 0x09, 0x5d, 0x4b,
	0xa0, 0x48, 0x77, 0x84, 0xc7, 0x70, 0x58, 0x11, 0xb9, 0x68, 0x19, 0xbd, 0x51, 0x6f, 0x1c, 0xce,
	0x3e, 0xfe, 0xef, 0x39, 0x98, 0x68, 0xdb, 0x9c, 0xfa, 0x6b, 0xa6, 0xc4, 0x3a, 0x0b, 0xab, 0x2b,
	0x24, 0x7a, 0x04, 0x6f, 0x31, 0x3b, 0x1d, 0x39, 0xe1, 0x39, 0x61, 0x97, 0xdc, 0xb4, 0x1b, 0xce,
	0xd2, 0x1b, 0x29, 0x5f, 0x9b, 0xa2, 0x6c, 0xe8, 0x64, 0xee, 0x44, 0x4e, 0x60, 0x68, 0xea, 0x72,
	0x49, 0xb4, 0x1d, 0xff, 0xa7, 0x30, 0xab, 0x96, 0x7b, 0x85, 0x39, 0x24, 0xba, 0x0f, 0xdd, 0x9a,
	0x98, 0x29, 0x08, 0x67, 0x77, 0x6e, 0x64, 0xd9, 0xf9, 0x6b, 0x4a, 0xe9, 0xd6, 0x24, 0xf9, 0x02,
	0x8e, 0xaf, 0x37, 0x1a, 0x1d, 0x43, 0x6f, 0x81, 0x6b, 0x77, 0xdf, 0xf5, 0x32, 0x7a, 0x1b, 0xfa,
	0xcb, 0xe2, 0x59, 0x83, 0xce, 0x58, 0xbb, 0xf9, 0xbc, 0xfb, 0x99, 0x97, 0x7c, 0x67, 0xf5, 0xfb,
	0xf5, 0xfc, 0x8b, 0xfe, 0xd3, 0x7d, 0x7d, 0x38, 0xbb, 0x7d, 0xa3, 0xae, 0xab, 0x1c, 0xfb, 0xc9,
	0x7f, 0xee, 0xc2, 0xe1, 0x7e, 0xc5, 0x6f, 0x60, 0x0e, 0x22, 0xf0, 0x59, 0x41, 0xd1, 0xcc, 0x6e,
	0x90, 0x99, 0x75, 0xf4, 0x2e, 0x0c, 0xf4, 0x9d, 0x6f, 0xec, 0xc4, 0x06, 0x99, 0xdb, 0xe9, 0x69,
	0x97, 0xaa, 0x10, 0x2a, 0xd7, 0xef, 0xc8, 0xee, 0xc5, 0x31, 0xc8, 0x39, 0xa1, 0xa8, 0xbf, 0xc5,
	0x1a, 0x9a, 0xab, 0xa7, 0xfa, 0x02, 0x48, 0xf7, 0xe6, 0x00, 0x6b, 0xe8, 0xb9, 0x45, 0xf4, 0xad,
	0xd4, 0x84, 0xcb, 0xca, 0x3e, 0x3b, 0xbd, 0x6c, 0xc0, 0x1a, 0xfa, 0xa8, 0x92, 0xda, 0xa0, 0x9a,
	0x54, 0xf1, 0x81, 0x01, 0xf5, 0x32, 0xba, 0x07, 0x47, 0x9a, 0xfa, 0x84, 0x0b, 0xde, 0x28, 0xc2,
	0x50, 0xc6, 0x81, 0x09, 0x0e, 0x59, 0x43, 0xbf, 0x69, 0x41, 0x2d, 0xc4, 0x15, 0xc6, 0x60, 0x9d,
	0xc5, 0x15, 0x3e, 0x3c, 0x7d, 0xf5, 0x67, 0xda, 0xf9, 0x65, 0x93, 0x7a, 0x2f, 0x36, 0xa9, 0xf7,
	0x72, 0x93, 0x7a, 0x7f, 0x6c, 0x52, 0xef, 0xaf, 0x4d, 0xda, 0xf9, 0x7b, 0x93, 0x7a, 0x3f, 0x6d,
	0xd3, 0xce, 0x8b, 0x6d, 0xea, 0xbd, 0xdc, 0xa6, 0x9d, 0x57, 0xdb, 0xb4, 0xf3, 0xed, 0xdd, 0x92,
	0x13, 0x76, 0xdf, 0xbe, 0xb7, 0xd3, 0x92, 0x53, 0xca, 0xd9, 0xf4, 0xda, 0x3f, 0xc9, 0xc5, 0xc0,
	0x00, 0x0f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x91, 0x25, 0x67, 0xbb, 0x63, 0x06, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStats.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStats_ServerStats.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStats_NetworkIOInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStats_DiskIoInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStats_StatsInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStats_ProgressInfo.Get().(proto.Message)
	})
}

var poolStats = &sync.Pool{New: func() interface{} { return &Stats{} }}

func (m *Stats) ReleasePool() { m.Reset(); poolStats.Put(m); m = nil }

var poolStats_ServerStats = &sync.Pool{New: func() interface{} { return &Stats_ServerStats{} }}

func (m *Stats_ServerStats) ReleasePool() { m.Reset(); poolStats_ServerStats.Put(m); m = nil }

var poolStats_NetworkIOInfo = &sync.Pool{New: func() interface{} { return &Stats_NetworkIOInfo{} }}

func (m *Stats_NetworkIOInfo) ReleasePool() { m.Reset(); poolStats_NetworkIOInfo.Put(m); m = nil }

var poolStats_DiskIoInfo = &sync.Pool{New: func() interface{} { return &Stats_DiskIoInfo{} }}

func (m *Stats_DiskIoInfo) ReleasePool() { m.Reset(); poolStats_DiskIoInfo.Put(m); m = nil }

var poolStats_StatsInfo = &sync.Pool{New: func() interface{} { return &Stats_StatsInfo{} }}

func (m *Stats_StatsInfo) ReleasePool() { m.Reset(); poolStats_StatsInfo.Put(m); m = nil }

var poolStats_ProgressInfo = &sync.Pool{New: func() interface{} { return &Stats_ProgressInfo{} }}

func (m *Stats_ProgressInfo) ReleasePool() { m.Reset(); poolStats_ProgressInfo.Put(m); m = nil }
func (this *Stats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats)
	if !ok {
		that2, ok := that.(Stats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Stats_ServerStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats_ServerStats)
	if !ok {
		that2, ok := that.(Stats_ServerStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	if this.ServerType != that1.ServerType {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.MaxCount != that1.MaxCount {
		return false
	}
	if this.CurrCount != that1.CurrCount {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	return true
}
func (this *Stats_NetworkIOInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats_NetworkIOInfo)
	if !ok {
		that2, ok := that.(Stats_NetworkIOInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BytesSent != that1.BytesSent {
		return false
	}
	if this.BytesRecv != that1.BytesRecv {
		return false
	}
	if this.PacketsSent != that1.PacketsSent {
		return false
	}
	if this.PacketsRecv != that1.PacketsRecv {
		return false
	}
	if this.ErrIn != that1.ErrIn {
		return false
	}
	if this.ErrOut != that1.ErrOut {
		return false
	}
	return true
}
func (this *Stats_DiskIoInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats_DiskIoInfo)
	if !ok {
		that2, ok := that.(Stats_DiskIoInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReadCount != that1.ReadCount {
		return false
	}
	if this.WriteCount != that1.WriteCount {
		return false
	}
	if this.ReadBytes != that1.ReadBytes {
		return false
	}
	if this.WriteBytes != that1.WriteBytes {
		return false
	}
	if this.IopsInProgress != that1.IopsInProgress {
		return false
	}
	return true
}
func (this *Stats_StatsInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats_StatsInfo)
	if !ok {
		that2, ok := that.(Stats_StatsInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CpuPercent != that1.CpuPercent {
		return false
	}
	if this.MemPercent != that1.MemPercent {
		return false
	}
	if len(this.DiskPercent) != len(that1.DiskPercent) {
		return false
	}
	for i := range this.DiskPercent {
		if this.DiskPercent[i] != that1.DiskPercent[i] {
			return false
		}
	}
	if !this.NetworkIoInfo.Equal(that1.NetworkIoInfo) {
		return false
	}
	if len(this.DiskIoInfos) != len(that1.DiskIoInfos) {
		return false
	}
	for i := range this.DiskIoInfos {
		if !this.DiskIoInfos[i].Equal(that1.DiskIoInfos[i]) {
			return false
		}
	}
	if !this.Pi.Equal(that1.Pi) {
		return false
	}
	return true
}
func (this *Stats_ProgressInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stats_ProgressInfo)
	if !ok {
		that2, ok := that.(Stats_ProgressInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CpuPercent != that1.CpuPercent {
		return false
	}
	if this.MemPercent != that1.MemPercent {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.NumThreads != that1.NumThreads {
		return false
	}
	if this.NumFds != that1.NumFds {
		return false
	}
	if this.Pid != that1.Pid {
		return false
	}
	if this.NumGoroutines != that1.NumGoroutines {
		return false
	}
	if this.Exe != that1.Exe {
		return false
	}
	return true
}
func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Stats_ServerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats_ServerStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats_ServerStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServerDiscover(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Timestamp != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.CurrCount != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.CurrCount))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxCount != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.MaxCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ServerId != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerType != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.ServerType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintServerDiscover(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Stats_NetworkIOInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats_NetworkIOInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats_NetworkIOInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ErrOut != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.ErrOut))
		i--
		dAtA[i] = 0x30
	}
	if m.ErrIn != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.ErrIn))
		i--
		dAtA[i] = 0x28
	}
	if m.PacketsRecv != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.PacketsRecv))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketsSent != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.PacketsSent))
		i--
		dAtA[i] = 0x18
	}
	if m.BytesRecv != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.BytesRecv))
		i--
		dAtA[i] = 0x10
	}
	if m.BytesSent != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.BytesSent))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Stats_DiskIoInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats_DiskIoInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats_DiskIoInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IopsInProgress != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.IopsInProgress))
		i--
		dAtA[i] = 0x28
	}
	if m.WriteBytes != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.WriteBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.ReadBytes != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.ReadBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.WriteCount != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.WriteCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ReadCount != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.ReadCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Stats_StatsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats_StatsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats_StatsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pi != nil {
		{
			size, err := m.Pi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServerDiscover(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DiskIoInfos) > 0 {
		for k := range m.DiskIoInfos {
			v := m.DiskIoInfos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintServerDiscover(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServerDiscover(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServerDiscover(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NetworkIoInfo != nil {
		{
			size, err := m.NetworkIoInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServerDiscover(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DiskPercent) > 0 {
		for k := range m.DiskPercent {
			v := m.DiskPercent[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServerDiscover(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServerDiscover(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MemPercent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MemPercent))))
		i--
		dAtA[i] = 0x11
	}
	if m.CpuPercent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuPercent))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Stats_ProgressInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats_ProgressInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats_ProgressInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Exe) > 0 {
		i -= len(m.Exe)
		copy(dAtA[i:], m.Exe)
		i = encodeVarintServerDiscover(dAtA, i, uint64(len(m.Exe)))
		i--
		dAtA[i] = 0x52
	}
	if m.NumGoroutines != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.NumGoroutines))
		i--
		dAtA[i] = 0x48
	}
	if m.Pid != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x40
	}
	if m.NumFds != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.NumFds))
		i--
		dAtA[i] = 0x38
	}
	if m.NumThreads != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.NumThreads))
		i--
		dAtA[i] = 0x30
	}
	if m.StartTime != 0 {
		i = encodeVarintServerDiscover(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintServerDiscover(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintServerDiscover(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MemPercent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MemPercent))))
		i--
		dAtA[i] = 0x11
	}
	if m.CpuPercent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuPercent))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintServerDiscover(dAtA []byte, offset int, v uint64) int {
	offset -= sovServerDiscover(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Stats) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Stats_ServerStats) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UniqueId != "" {
		w.RawByte('"')
		w.RawString("unique_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UniqueId)
		needWriteComma = true
	}
	if m.ServerType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerType))
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.MaxCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxCount))
		needWriteComma = true
	}
	if m.CurrCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("curr_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurrCount))
		needWriteComma = true
	}
	if m.Timestamp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("timestamp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Timestamp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("stats")
	w.RawByte('"')
	w.RawByte(':')
	m.Stats.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Stats_NetworkIOInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BytesSent != 0 {
		w.RawByte('"')
		w.RawString("bytes_sent")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.BytesSent))
		needWriteComma = true
	}
	if m.BytesRecv != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("bytes_recv")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.BytesRecv))
		needWriteComma = true
	}
	if m.PacketsSent != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("packets_sent")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.PacketsSent))
		needWriteComma = true
	}
	if m.PacketsRecv != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("packets_recv")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.PacketsRecv))
		needWriteComma = true
	}
	if m.ErrIn != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("err_in")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.ErrIn))
		needWriteComma = true
	}
	if m.ErrOut != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("err_out")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.ErrOut))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Stats_DiskIoInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ReadCount != 0 {
		w.RawByte('"')
		w.RawString("read_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.ReadCount))
		needWriteComma = true
	}
	if m.WriteCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("write_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.WriteCount))
		needWriteComma = true
	}
	if m.ReadBytes != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("read_bytes")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.ReadBytes))
		needWriteComma = true
	}
	if m.WriteBytes != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("write_bytes")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.WriteBytes))
		needWriteComma = true
	}
	if m.IopsInProgress != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("iops_in_progress")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.IopsInProgress))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Stats_StatsInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.CpuPercent)) > 0.000001 {
		w.RawByte('"')
		w.RawString("cpu_percent")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.CpuPercent))
		needWriteComma = true
	}
	if math.Abs(float64(m.MemPercent)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("mem_percent")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.MemPercent))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("disk_percent")
	w.RawByte('"')
	w.RawByte(':')
	if m.DiskPercent == nil {
		w.RawString("null")
	} else if len(m.DiskPercent) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDiskPercent := len(m.DiskPercent)
		for k, v := range m.DiskPercent {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Float64(float64(v))
			mlDiskPercent--
			if mlDiskPercent != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("network_io_info")
	w.RawByte('"')
	w.RawByte(':')
	m.NetworkIoInfo.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("disk_io_infos")
	w.RawByte('"')
	w.RawByte(':')
	if m.DiskIoInfos == nil {
		w.RawString("null")
	} else if len(m.DiskIoInfos) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDiskIoInfos := len(m.DiskIoInfos)
		for k, v := range m.DiskIoInfos {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlDiskIoInfos--
			if mlDiskIoInfos != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pi")
	w.RawByte('"')
	w.RawByte(':')
	m.Pi.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Stats_ProgressInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.CpuPercent)) > 0.000001 {
		w.RawByte('"')
		w.RawString("cpu_percent")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.CpuPercent))
		needWriteComma = true
	}
	if math.Abs(float64(m.MemPercent)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("mem_percent")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.MemPercent))
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.Status != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Status)
		needWriteComma = true
	}
	if m.StartTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartTime))
		needWriteComma = true
	}
	if m.NumThreads != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("num_threads")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NumThreads))
		needWriteComma = true
	}
	if m.NumFds != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("num_fds")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NumFds))
		needWriteComma = true
	}
	if m.Pid != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pid")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Pid))
		needWriteComma = true
	}
	if m.NumGoroutines != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("num_goroutines")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NumGoroutines))
		needWriteComma = true
	}
	if m.Exe != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("exe")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Exe)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Stats) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Stats) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Stats) GoString() string {
	return m.String()
}

func (m *Stats_ServerStats) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Stats_ServerStats) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Stats_ServerStats) GoString() string {
	return m.String()
}

func (m *Stats_NetworkIOInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Stats_NetworkIOInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Stats_NetworkIOInfo) GoString() string {
	return m.String()
}

func (m *Stats_DiskIoInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Stats_DiskIoInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Stats_DiskIoInfo) GoString() string {
	return m.String()
}

func (m *Stats_StatsInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Stats_StatsInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Stats_StatsInfo) GoString() string {
	return m.String()
}

func (m *Stats_ProgressInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Stats_ProgressInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Stats_ProgressInfo) GoString() string {
	return m.String()
}

func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Stats_ServerStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovServerDiscover(uint64(l))
	}
	if m.ServerType != 0 {
		n += 1 + sovServerDiscover(uint64(m.ServerType))
	}
	if m.ServerId != 0 {
		n += 1 + sovServerDiscover(uint64(m.ServerId))
	}
	if m.MaxCount != 0 {
		n += 1 + sovServerDiscover(uint64(m.MaxCount))
	}
	if m.CurrCount != 0 {
		n += 1 + sovServerDiscover(uint64(m.CurrCount))
	}
	if m.Timestamp != 0 {
		n += 1 + sovServerDiscover(uint64(m.Timestamp))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovServerDiscover(uint64(l))
	}
	return n
}

func (m *Stats_NetworkIOInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BytesSent != 0 {
		n += 1 + sovServerDiscover(uint64(m.BytesSent))
	}
	if m.BytesRecv != 0 {
		n += 1 + sovServerDiscover(uint64(m.BytesRecv))
	}
	if m.PacketsSent != 0 {
		n += 1 + sovServerDiscover(uint64(m.PacketsSent))
	}
	if m.PacketsRecv != 0 {
		n += 1 + sovServerDiscover(uint64(m.PacketsRecv))
	}
	if m.ErrIn != 0 {
		n += 1 + sovServerDiscover(uint64(m.ErrIn))
	}
	if m.ErrOut != 0 {
		n += 1 + sovServerDiscover(uint64(m.ErrOut))
	}
	return n
}

func (m *Stats_DiskIoInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadCount != 0 {
		n += 1 + sovServerDiscover(uint64(m.ReadCount))
	}
	if m.WriteCount != 0 {
		n += 1 + sovServerDiscover(uint64(m.WriteCount))
	}
	if m.ReadBytes != 0 {
		n += 1 + sovServerDiscover(uint64(m.ReadBytes))
	}
	if m.WriteBytes != 0 {
		n += 1 + sovServerDiscover(uint64(m.WriteBytes))
	}
	if m.IopsInProgress != 0 {
		n += 1 + sovServerDiscover(uint64(m.IopsInProgress))
	}
	return n
}

func (m *Stats_StatsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuPercent != 0 {
		n += 9
	}
	if m.MemPercent != 0 {
		n += 9
	}
	if len(m.DiskPercent) > 0 {
		for k, v := range m.DiskPercent {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovServerDiscover(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovServerDiscover(uint64(mapEntrySize))
		}
	}
	if m.NetworkIoInfo != nil {
		l = m.NetworkIoInfo.Size()
		n += 1 + l + sovServerDiscover(uint64(l))
	}
	if len(m.DiskIoInfos) > 0 {
		for k, v := range m.DiskIoInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovServerDiscover(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovServerDiscover(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovServerDiscover(uint64(mapEntrySize))
		}
	}
	if m.Pi != nil {
		l = m.Pi.Size()
		n += 1 + l + sovServerDiscover(uint64(l))
	}
	return n
}

func (m *Stats_ProgressInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuPercent != 0 {
		n += 9
	}
	if m.MemPercent != 0 {
		n += 9
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServerDiscover(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovServerDiscover(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovServerDiscover(uint64(m.StartTime))
	}
	if m.NumThreads != 0 {
		n += 1 + sovServerDiscover(uint64(m.NumThreads))
	}
	if m.NumFds != 0 {
		n += 1 + sovServerDiscover(uint64(m.NumFds))
	}
	if m.Pid != 0 {
		n += 1 + sovServerDiscover(uint64(m.Pid))
	}
	if m.NumGoroutines != 0 {
		n += 1 + sovServerDiscover(uint64(m.NumGoroutines))
	}
	l = len(m.Exe)
	if l > 0 {
		n += 1 + l + sovServerDiscover(uint64(l))
	}
	return n
}

func sovServerDiscover(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServerDiscover(x uint64) (n int) {
	return sovServerDiscover(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDiscover
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerDiscover(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats_ServerStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDiscover
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDiscover
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			m.ServerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerType |= models.ServerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			m.MaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrCount", wireType)
			}
			m.CurrCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerDiscover
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &Stats_StatsInfo{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerDiscover(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats_NetworkIOInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDiscover
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkIOInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkIOInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSent", wireType)
			}
			m.BytesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRecv", wireType)
			}
			m.BytesRecv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRecv |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsSent", wireType)
			}
			m.PacketsSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsRecv", wireType)
			}
			m.PacketsRecv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsRecv |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrIn", wireType)
			}
			m.ErrIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrOut", wireType)
			}
			m.ErrOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrOut |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServerDiscover(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats_DiskIoInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDiscover
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiskIoInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiskIoInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadCount", wireType)
			}
			m.ReadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteCount", wireType)
			}
			m.WriteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadBytes", wireType)
			}
			m.ReadBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteBytes", wireType)
			}
			m.WriteBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IopsInProgress", wireType)
			}
			m.IopsInProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IopsInProgress |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServerDiscover(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats_StatsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDiscover
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuPercent = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MemPercent = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskPercent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerDiscover
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiskPercent == nil {
				m.DiskPercent = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerDiscover
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServerDiscover
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServerDiscover
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServerDiscover
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServerDiscover(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthServerDiscover
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DiskPercent[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkIoInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerDiscover
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkIoInfo == nil {
				m.NetworkIoInfo = &Stats_NetworkIOInfo{}
			}
			if err := m.NetworkIoInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskIoInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerDiscover
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiskIoInfos == nil {
				m.DiskIoInfos = make(map[string]*Stats_DiskIoInfo)
			}
			var mapkey string
			var mapvalue *Stats_DiskIoInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServerDiscover
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServerDiscover
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServerDiscover
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServerDiscover
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServerDiscover
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthServerDiscover
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthServerDiscover
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Stats_DiskIoInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServerDiscover(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthServerDiscover
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DiskIoInfos[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerDiscover
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pi == nil {
				m.Pi = &Stats_ProgressInfo{}
			}
			if err := m.Pi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerDiscover(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats_ProgressInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerDiscover
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgressInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgressInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuPercent = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MemPercent = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDiscover
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDiscover
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumThreads", wireType)
			}
			m.NumThreads = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumThreads |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFds", wireType)
			}
			m.NumFds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGoroutines", wireType)
			}
			m.NumGoroutines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumGoroutines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerDiscover
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerDiscover(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerDiscover
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServerDiscover(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServerDiscover
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerDiscover
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServerDiscover
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServerDiscover
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServerDiscover
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServerDiscover        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServerDiscover          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServerDiscover = fmt.Errorf("proto: unexpected end of group")
)
