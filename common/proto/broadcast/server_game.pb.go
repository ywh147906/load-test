// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/broadcast/server_game.proto

package broadcast

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GameServer struct {
}

func (m *GameServer) Reset()      { *m = GameServer{} }
func (*GameServer) ProtoMessage() {}
func (*GameServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0d21ebc9e42b0a2, []int{0}
}
func (m *GameServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameServer.Merge(m, src)
}
func (m *GameServer) XXX_Size() int {
	return m.Size()
}
func (m *GameServer) XXX_DiscardUnknown() {
	xxx_messageInfo_GameServer.DiscardUnknown(m)
}

var xxx_messageInfo_GameServer proto.InternalMessageInfo

func (*GameServer) XXX_MessageName() string {
	return "broadcast.GameServer"
}

type GameServer_UpdateRewardIndexPush struct {
	Type              models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	SeasonRewardIndex uint64           `protobuf:"varint,2,opt,name=season_reward_index,json=seasonRewardIndex,proto3" json:"season_reward_index,omitempty"`
	DayRewardIndex    uint64           `protobuf:"varint,3,opt,name=day_reward_index,json=dayRewardIndex,proto3" json:"day_reward_index,omitempty"`
	SeasonRewardTime  int64            `protobuf:"varint,4,opt,name=season_reward_time,json=seasonRewardTime,proto3" json:"season_reward_time,omitempty"`
	DayRewardTime     int64            `protobuf:"varint,5,opt,name=day_reward_time,json=dayRewardTime,proto3" json:"day_reward_time,omitempty"`
}

func (m *GameServer_UpdateRewardIndexPush) Reset()      { *m = GameServer_UpdateRewardIndexPush{} }
func (*GameServer_UpdateRewardIndexPush) ProtoMessage() {}
func (*GameServer_UpdateRewardIndexPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0d21ebc9e42b0a2, []int{0, 0}
}
func (m *GameServer_UpdateRewardIndexPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameServer_UpdateRewardIndexPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameServer_UpdateRewardIndexPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameServer_UpdateRewardIndexPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameServer_UpdateRewardIndexPush.Merge(m, src)
}
func (m *GameServer_UpdateRewardIndexPush) XXX_Size() int {
	return m.Size()
}
func (m *GameServer_UpdateRewardIndexPush) XXX_DiscardUnknown() {
	xxx_messageInfo_GameServer_UpdateRewardIndexPush.DiscardUnknown(m)
}

var xxx_messageInfo_GameServer_UpdateRewardIndexPush proto.InternalMessageInfo

func (m *GameServer_UpdateRewardIndexPush) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *GameServer_UpdateRewardIndexPush) GetSeasonRewardIndex() uint64 {
	if m != nil {
		return m.SeasonRewardIndex
	}
	return 0
}

func (m *GameServer_UpdateRewardIndexPush) GetDayRewardIndex() uint64 {
	if m != nil {
		return m.DayRewardIndex
	}
	return 0
}

func (m *GameServer_UpdateRewardIndexPush) GetSeasonRewardTime() int64 {
	if m != nil {
		return m.SeasonRewardTime
	}
	return 0
}

func (m *GameServer_UpdateRewardIndexPush) GetDayRewardTime() int64 {
	if m != nil {
		return m.DayRewardTime
	}
	return 0
}

func (*GameServer_UpdateRewardIndexPush) XXX_MessageName() string {
	return "broadcast.GameServer.UpdateRewardIndexPush"
}
func init() {
	proto.RegisterType((*GameServer)(nil), "broadcast.GameServer")
	proto.RegisterType((*GameServer_UpdateRewardIndexPush)(nil), "broadcast.GameServer.UpdateRewardIndexPush")
}

func init() { proto.RegisterFile("proto/broadcast/server_game.proto", fileDescriptor_e0d21ebc9e42b0a2) }

var fileDescriptor_e0d21ebc9e42b0a2 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd1, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc7, 0xf1, 0x9c, 0xdb, 0x5e, 0xc1, 0x01, 0x6b, 0x1b, 0x11, 0x62, 0x17, 0x43, 0x2d, 0x28,
	0x59, 0x68, 0x02, 0xfa, 0x04, 0xba, 0x11, 0x77, 0x25, 0xd6, 0x8d, 0x9b, 0x72, 0xda, 0x39, 0xd8,
	0x80, 0x93, 0x09, 0x93, 0xf8, 0x27, 0x6f, 0xe1, 0x63, 0xf8, 0x28, 0x5d, 0x76, 0xd9, 0xa5, 0x26,
	0x1b, 0x57, 0xe2, 0x0b, 0x08, 0xd2, 0x19, 0x28, 0x89, 0xdb, 0xf3, 0xfb, 0xf2, 0xd9, 0x1c, 0x76,
	0x98, 0x6a, 0x95, 0xab, 0x70, 0xaa, 0x15, 0x8a, 0x19, 0x66, 0x79, 0x98, 0x91, 0x7e, 0x22, 0x3d,
	0xb9, 0x47, 0x49, 0x81, 0xd9, 0xdc, 0xed, 0xcd, 0xd8, 0x3f, 0xb0, 0xb5, 0x54, 0x82, 0x1e, 0xb2,
	0x70, 0x4e, 0x28, 0x48, 0xdb, 0xaa, 0xef, 0x35, 0x26, 0xd4, 0x94, 0xa0, 0x5d, 0x86, 0x3f, 0xc0,
	0xd8, 0x15, 0x4a, 0xba, 0x31, 0x72, 0xff, 0x0b, 0xd8, 0xfe, 0x6d, 0x2a, 0x30, 0xa7, 0x88, 0x9e,
	0x51, 0x8b, 0xeb, 0x44, 0xd0, 0xcb, 0xe8, 0x31, 0x9b, 0xbb, 0x47, 0xac, 0x9d, 0x17, 0x29, 0x79,
	0x30, 0x00, 0xbf, 0x73, 0xd6, 0x0b, 0xac, 0x15, 0x5c, 0xac, 0xad, 0x71, 0x91, 0x52, 0x64, 0x66,
	0x37, 0x60, 0x7b, 0x19, 0x61, 0xa6, 0x92, 0x89, 0x36, 0xc0, 0x24, 0x5e, 0x0b, 0xde, 0xbf, 0x01,
	0xf8, 0xed, 0xa8, 0x67, 0xa7, 0x1a, 0xed, 0xfa, 0xac, 0x2b, 0xb0, 0x68, 0xc6, 0x2d, 0x13, 0x77,
	0x04, 0x16, 0xf5, 0xf2, 0x84, 0xb9, 0x4d, 0x39, 0x8f, 0x25, 0x79, 0xed, 0x01, 0xf8, 0xad, 0xa8,
	0x5b, 0x87, 0xc7, 0xb1, 0x24, 0xf7, 0x98, 0xed, 0xd6, 0x5c, 0x93, 0xfe, 0x37, 0xe9, 0xce, 0x86,
	0x5d, 0x77, 0x97, 0xa3, 0xd5, 0x07, 0x77, 0xde, 0x4a, 0x0e, 0x8b, 0x92, 0xc3, 0xb2, 0xe4, 0xf0,
	0x5e, 0x72, 0xf8, 0x2c, 0xb9, 0xf3, 0x5d, 0x72, 0x78, 0xad, 0xb8, 0xb3, 0xa8, 0x38, 0x2c, 0x2b,
	0xee, 0xac, 0x2a, 0xee, 0xdc, 0x0d, 0x67, 0x2a, 0x4e, 0x4e, 0xed, 0x17, 0xc2, 0x99, 0x92, 0x52,
	0x25, 0xe1, 0x9f, 0x1f, 0x4d, 0xb7, 0xcc, 0xe1, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x62, 0x07,
	0x48, 0x64, 0xbd, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameServer.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameServer_UpdateRewardIndexPush.Get().(proto.Message)
	})
}

var poolGameServer = &sync.Pool{New: func() interface{} { return &GameServer{} }}

func (m *GameServer) ReleasePool() { m.Reset(); poolGameServer.Put(m); m = nil }

var poolGameServer_UpdateRewardIndexPush = &sync.Pool{New: func() interface{} { return &GameServer_UpdateRewardIndexPush{} }}

func (m *GameServer_UpdateRewardIndexPush) ReleasePool() {
	m.Reset()
	poolGameServer_UpdateRewardIndexPush.Put(m)
	m = nil
}
func (this *GameServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameServer)
	if !ok {
		that2, ok := that.(GameServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GameServer_UpdateRewardIndexPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameServer_UpdateRewardIndexPush)
	if !ok {
		that2, ok := that.(GameServer_UpdateRewardIndexPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SeasonRewardIndex != that1.SeasonRewardIndex {
		return false
	}
	if this.DayRewardIndex != that1.DayRewardIndex {
		return false
	}
	if this.SeasonRewardTime != that1.SeasonRewardTime {
		return false
	}
	if this.DayRewardTime != that1.DayRewardTime {
		return false
	}
	return true
}
func (m *GameServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GameServer_UpdateRewardIndexPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameServer_UpdateRewardIndexPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameServer_UpdateRewardIndexPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DayRewardTime != 0 {
		i = encodeVarintServerGame(dAtA, i, uint64(m.DayRewardTime))
		i--
		dAtA[i] = 0x28
	}
	if m.SeasonRewardTime != 0 {
		i = encodeVarintServerGame(dAtA, i, uint64(m.SeasonRewardTime))
		i--
		dAtA[i] = 0x20
	}
	if m.DayRewardIndex != 0 {
		i = encodeVarintServerGame(dAtA, i, uint64(m.DayRewardIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.SeasonRewardIndex != 0 {
		i = encodeVarintServerGame(dAtA, i, uint64(m.SeasonRewardIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintServerGame(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintServerGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovServerGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *GameServer) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GameServer_UpdateRewardIndexPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.SeasonRewardIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season_reward_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.SeasonRewardIndex))
		needWriteComma = true
	}
	if m.DayRewardIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("day_reward_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.DayRewardIndex))
		needWriteComma = true
	}
	if m.SeasonRewardTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season_reward_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SeasonRewardTime))
		needWriteComma = true
	}
	if m.DayRewardTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("day_reward_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DayRewardTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameServer) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameServer) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameServer) GoString() string {
	return m.String()
}

func (m *GameServer_UpdateRewardIndexPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameServer_UpdateRewardIndexPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameServer_UpdateRewardIndexPush) GoString() string {
	return m.String()
}

func (m *GameServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GameServer_UpdateRewardIndexPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovServerGame(uint64(m.Type))
	}
	if m.SeasonRewardIndex != 0 {
		n += 1 + sovServerGame(uint64(m.SeasonRewardIndex))
	}
	if m.DayRewardIndex != 0 {
		n += 1 + sovServerGame(uint64(m.DayRewardIndex))
	}
	if m.SeasonRewardTime != 0 {
		n += 1 + sovServerGame(uint64(m.SeasonRewardTime))
	}
	if m.DayRewardTime != 0 {
		n += 1 + sovServerGame(uint64(m.DayRewardTime))
	}
	return n
}

func sovServerGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServerGame(x uint64) (n int) {
	return sovServerGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServerGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameServer_UpdateRewardIndexPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRewardIndexPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRewardIndexPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonRewardIndex", wireType)
			}
			m.SeasonRewardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonRewardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayRewardIndex", wireType)
			}
			m.DayRewardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayRewardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonRewardTime", wireType)
			}
			m.SeasonRewardTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonRewardTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayRewardTime", wireType)
			}
			m.DayRewardTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayRewardTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServerGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServerGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServerGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServerGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServerGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServerGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServerGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServerGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServerGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServerGame = fmt.Errorf("proto: unexpected end of group")
)
