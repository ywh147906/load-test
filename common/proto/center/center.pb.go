// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/center/center.proto

package center

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Center struct {
}

func (m *Center) Reset()      { *m = Center{} }
func (*Center) ProtoMessage() {}
func (*Center) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0}
}
func (m *Center) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center.Merge(m, src)
}
func (m *Center) XXX_Size() int {
	return m.Size()
}
func (m *Center) XXX_DiscardUnknown() {
	xxx_messageInfo_Center.DiscardUnknown(m)
}

var xxx_messageInfo_Center proto.InternalMessageInfo

func (*Center) XXX_MessageName() string {
	return "center.Center"
}

type Center_SelfAddrRequest struct {
}

func (m *Center_SelfAddrRequest) Reset()      { *m = Center_SelfAddrRequest{} }
func (*Center_SelfAddrRequest) ProtoMessage() {}
func (*Center_SelfAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 0}
}
func (m *Center_SelfAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_SelfAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_SelfAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_SelfAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_SelfAddrRequest.Merge(m, src)
}
func (m *Center_SelfAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *Center_SelfAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_SelfAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Center_SelfAddrRequest proto.InternalMessageInfo

func (*Center_SelfAddrRequest) XXX_MessageName() string {
	return "center.Center.SelfAddrRequest"
}

type Center_SelfAddrResponse struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *Center_SelfAddrResponse) Reset()      { *m = Center_SelfAddrResponse{} }
func (*Center_SelfAddrResponse) ProtoMessage() {}
func (*Center_SelfAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 1}
}
func (m *Center_SelfAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_SelfAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_SelfAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_SelfAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_SelfAddrResponse.Merge(m, src)
}
func (m *Center_SelfAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *Center_SelfAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_SelfAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Center_SelfAddrResponse proto.InternalMessageInfo

func (m *Center_SelfAddrResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (*Center_SelfAddrResponse) XXX_MessageName() string {
	return "center.Center.SelfAddrResponse"
}

type Center_AuthEdgeRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Now   int64  `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
}

func (m *Center_AuthEdgeRequest) Reset()      { *m = Center_AuthEdgeRequest{} }
func (*Center_AuthEdgeRequest) ProtoMessage() {}
func (*Center_AuthEdgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 2}
}
func (m *Center_AuthEdgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_AuthEdgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_AuthEdgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_AuthEdgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_AuthEdgeRequest.Merge(m, src)
}
func (m *Center_AuthEdgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *Center_AuthEdgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_AuthEdgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Center_AuthEdgeRequest proto.InternalMessageInfo

func (m *Center_AuthEdgeRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Center_AuthEdgeRequest) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (*Center_AuthEdgeRequest) XXX_MessageName() string {
	return "center.Center.AuthEdgeRequest"
}

type Center_AuthEdgeResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Now   int64  `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
}

func (m *Center_AuthEdgeResponse) Reset()      { *m = Center_AuthEdgeResponse{} }
func (*Center_AuthEdgeResponse) ProtoMessage() {}
func (*Center_AuthEdgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 3}
}
func (m *Center_AuthEdgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_AuthEdgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_AuthEdgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_AuthEdgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_AuthEdgeResponse.Merge(m, src)
}
func (m *Center_AuthEdgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *Center_AuthEdgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_AuthEdgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Center_AuthEdgeResponse proto.InternalMessageInfo

func (m *Center_AuthEdgeResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Center_AuthEdgeResponse) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (*Center_AuthEdgeResponse) XXX_MessageName() string {
	return "center.Center.AuthEdgeResponse"
}

type Center_FindValidServerRequest struct {
	BattleType models.BattleType `protobuf:"varint,1,opt,name=battle_type,json=battleType,proto3,enum=models.BattleType" json:"battle_type,omitempty"`
	ServerId   int64             `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	MapConfig  int64             `protobuf:"varint,3,opt,name=map_config,json=mapConfig,proto3" json:"map_config,omitempty"`
}

func (m *Center_FindValidServerRequest) Reset()      { *m = Center_FindValidServerRequest{} }
func (*Center_FindValidServerRequest) ProtoMessage() {}
func (*Center_FindValidServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 4}
}
func (m *Center_FindValidServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_FindValidServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_FindValidServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_FindValidServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_FindValidServerRequest.Merge(m, src)
}
func (m *Center_FindValidServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *Center_FindValidServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_FindValidServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Center_FindValidServerRequest proto.InternalMessageInfo

func (m *Center_FindValidServerRequest) GetBattleType() models.BattleType {
	if m != nil {
		return m.BattleType
	}
	return models.BattleType_Unknown_
}

func (m *Center_FindValidServerRequest) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *Center_FindValidServerRequest) GetMapConfig() int64 {
	if m != nil {
		return m.MapConfig
	}
	return 0
}

func (*Center_FindValidServerRequest) XXX_MessageName() string {
	return "center.Center.FindValidServerRequest"
}

type Center_FindValidServerResponse struct {
	ServerId int64 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (m *Center_FindValidServerResponse) Reset()      { *m = Center_FindValidServerResponse{} }
func (*Center_FindValidServerResponse) ProtoMessage() {}
func (*Center_FindValidServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 5}
}
func (m *Center_FindValidServerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_FindValidServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_FindValidServerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_FindValidServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_FindValidServerResponse.Merge(m, src)
}
func (m *Center_FindValidServerResponse) XXX_Size() int {
	return m.Size()
}
func (m *Center_FindValidServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_FindValidServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Center_FindValidServerResponse proto.InternalMessageInfo

func (m *Center_FindValidServerResponse) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (*Center_FindValidServerResponse) XXX_MessageName() string {
	return "center.Center.FindValidServerResponse"
}

// 获取地图所有分线
type Center_GetMapAllLinesRequest struct {
	MapId    int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	ServerId int64 `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (m *Center_GetMapAllLinesRequest) Reset()      { *m = Center_GetMapAllLinesRequest{} }
func (*Center_GetMapAllLinesRequest) ProtoMessage() {}
func (*Center_GetMapAllLinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 6}
}
func (m *Center_GetMapAllLinesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_GetMapAllLinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_GetMapAllLinesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_GetMapAllLinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_GetMapAllLinesRequest.Merge(m, src)
}
func (m *Center_GetMapAllLinesRequest) XXX_Size() int {
	return m.Size()
}
func (m *Center_GetMapAllLinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_GetMapAllLinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Center_GetMapAllLinesRequest proto.InternalMessageInfo

func (m *Center_GetMapAllLinesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *Center_GetMapAllLinesRequest) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (*Center_GetMapAllLinesRequest) XXX_MessageName() string {
	return "center.Center.GetMapAllLinesRequest"
}

type Center_GetMapAllLinesResponse struct {
	AllLineInfo *models.AllLineInfo `protobuf:"bytes,1,opt,name=all_line_info,json=allLineInfo,proto3" json:"all_line_info,omitempty"`
}

func (m *Center_GetMapAllLinesResponse) Reset()      { *m = Center_GetMapAllLinesResponse{} }
func (*Center_GetMapAllLinesResponse) ProtoMessage() {}
func (*Center_GetMapAllLinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 7}
}
func (m *Center_GetMapAllLinesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_GetMapAllLinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_GetMapAllLinesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_GetMapAllLinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_GetMapAllLinesResponse.Merge(m, src)
}
func (m *Center_GetMapAllLinesResponse) XXX_Size() int {
	return m.Size()
}
func (m *Center_GetMapAllLinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_GetMapAllLinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Center_GetMapAllLinesResponse proto.InternalMessageInfo

func (m *Center_GetMapAllLinesResponse) GetAllLineInfo() *models.AllLineInfo {
	if m != nil {
		return m.AllLineInfo
	}
	return nil
}

func (*Center_GetMapAllLinesResponse) XXX_MessageName() string {
	return "center.Center.GetMapAllLinesResponse"
}

// 获取具体分线信息
type Center_GetTargetLineRequest struct {
	MapId          int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64 `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	ServerId       int64 `protobuf:"varint,3,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (m *Center_GetTargetLineRequest) Reset()      { *m = Center_GetTargetLineRequest{} }
func (*Center_GetTargetLineRequest) ProtoMessage() {}
func (*Center_GetTargetLineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 8}
}
func (m *Center_GetTargetLineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_GetTargetLineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_GetTargetLineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_GetTargetLineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_GetTargetLineRequest.Merge(m, src)
}
func (m *Center_GetTargetLineRequest) XXX_Size() int {
	return m.Size()
}
func (m *Center_GetTargetLineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_GetTargetLineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Center_GetTargetLineRequest proto.InternalMessageInfo

func (m *Center_GetTargetLineRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *Center_GetTargetLineRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *Center_GetTargetLineRequest) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (*Center_GetTargetLineRequest) XXX_MessageName() string {
	return "center.Center.GetTargetLineRequest"
}

type Center_GetTargetLineResponse struct {
	LineInfo *models.LineInfo `protobuf:"bytes,1,opt,name=line_info,json=lineInfo,proto3" json:"line_info,omitempty"`
}

func (m *Center_GetTargetLineResponse) Reset()      { *m = Center_GetTargetLineResponse{} }
func (*Center_GetTargetLineResponse) ProtoMessage() {}
func (*Center_GetTargetLineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 9}
}
func (m *Center_GetTargetLineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_GetTargetLineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_GetTargetLineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_GetTargetLineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_GetTargetLineResponse.Merge(m, src)
}
func (m *Center_GetTargetLineResponse) XXX_Size() int {
	return m.Size()
}
func (m *Center_GetTargetLineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_GetTargetLineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Center_GetTargetLineResponse proto.InternalMessageInfo

func (m *Center_GetTargetLineResponse) GetLineInfo() *models.LineInfo {
	if m != nil {
		return m.LineInfo
	}
	return nil
}

func (*Center_GetTargetLineResponse) XXX_MessageName() string {
	return "center.Center.GetTargetLineResponse"
}

//各个战斗服务上报自己状态
type Center_MonitorInfoPush struct {
	Ip             string            `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port           int32             `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	BattleType     models.BattleType `protobuf:"varint,3,opt,name=battle_type,json=battleType,proto3,enum=models.BattleType" json:"battle_type,omitempty"`
	ServerId       int64             `protobuf:"varint,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	MapConfig      int64             `protobuf:"varint,5,opt,name=map_config,json=mapConfig,proto3" json:"map_config,omitempty"`
	CurCount       int64             `protobuf:"varint,6,opt,name=cur_count,json=curCount,proto3" json:"cur_count,omitempty"`
	MaxCount       int64             `protobuf:"varint,7,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	BattleServerId int64             `protobuf:"varint,8,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *Center_MonitorInfoPush) Reset()      { *m = Center_MonitorInfoPush{} }
func (*Center_MonitorInfoPush) ProtoMessage() {}
func (*Center_MonitorInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 10}
}
func (m *Center_MonitorInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_MonitorInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_MonitorInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_MonitorInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_MonitorInfoPush.Merge(m, src)
}
func (m *Center_MonitorInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *Center_MonitorInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_MonitorInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_Center_MonitorInfoPush proto.InternalMessageInfo

func (m *Center_MonitorInfoPush) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Center_MonitorInfoPush) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Center_MonitorInfoPush) GetBattleType() models.BattleType {
	if m != nil {
		return m.BattleType
	}
	return models.BattleType_Unknown_
}

func (m *Center_MonitorInfoPush) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *Center_MonitorInfoPush) GetMapConfig() int64 {
	if m != nil {
		return m.MapConfig
	}
	return 0
}

func (m *Center_MonitorInfoPush) GetCurCount() int64 {
	if m != nil {
		return m.CurCount
	}
	return 0
}

func (m *Center_MonitorInfoPush) GetMaxCount() int64 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *Center_MonitorInfoPush) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*Center_MonitorInfoPush) XXX_MessageName() string {
	return "center.Center.MonitorInfoPush"
}

type Center_EdgeInfo struct {
	BattleId int64    `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapId    int64    `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Roles    []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	IsAdd    bool     `protobuf:"varint,4,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	IsEnd    bool     `protobuf:"varint,5,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
}

func (m *Center_EdgeInfo) Reset()      { *m = Center_EdgeInfo{} }
func (*Center_EdgeInfo) ProtoMessage() {}
func (*Center_EdgeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 11}
}
func (m *Center_EdgeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_EdgeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_EdgeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_EdgeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_EdgeInfo.Merge(m, src)
}
func (m *Center_EdgeInfo) XXX_Size() int {
	return m.Size()
}
func (m *Center_EdgeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_EdgeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Center_EdgeInfo proto.InternalMessageInfo

func (m *Center_EdgeInfo) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *Center_EdgeInfo) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *Center_EdgeInfo) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Center_EdgeInfo) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (m *Center_EdgeInfo) GetIsEnd() bool {
	if m != nil {
		return m.IsEnd
	}
	return false
}

func (*Center_EdgeInfo) XXX_MessageName() string {
	return "center.Center.EdgeInfo"
}

type Center_SyncEdgeInfoPush struct {
	Edges           []*Center_EdgeInfo `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
	IsAll           bool               `protobuf:"varint,2,opt,name=is_all,json=isAll,proto3" json:"is_all,omitempty"`
	RemainCpuWeight int64              `protobuf:"varint,3,opt,name=remain_cpu_weight,json=remainCpuWeight,proto3" json:"remain_cpu_weight,omitempty"`
}

func (m *Center_SyncEdgeInfoPush) Reset()      { *m = Center_SyncEdgeInfoPush{} }
func (*Center_SyncEdgeInfoPush) ProtoMessage() {}
func (*Center_SyncEdgeInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 12}
}
func (m *Center_SyncEdgeInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_SyncEdgeInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_SyncEdgeInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_SyncEdgeInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_SyncEdgeInfoPush.Merge(m, src)
}
func (m *Center_SyncEdgeInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *Center_SyncEdgeInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_SyncEdgeInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_Center_SyncEdgeInfoPush proto.InternalMessageInfo

func (m *Center_SyncEdgeInfoPush) GetEdges() []*Center_EdgeInfo {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *Center_SyncEdgeInfoPush) GetIsAll() bool {
	if m != nil {
		return m.IsAll
	}
	return false
}

func (m *Center_SyncEdgeInfoPush) GetRemainCpuWeight() int64 {
	if m != nil {
		return m.RemainCpuWeight
	}
	return 0
}

func (*Center_SyncEdgeInfoPush) XXX_MessageName() string {
	return "center.Center.SyncEdgeInfoPush"
}

type Center_CurBattleInfoRequest struct {
	MapId          int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64 `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	HungUpServerId int64 `protobuf:"varint,3,opt,name=hung_up_server_id,json=hungUpServerId,proto3" json:"hung_up_server_id,omitempty"`
	HungUpMapId    int64 `protobuf:"varint,4,opt,name=hung_up_map_id,json=hungUpMapId,proto3" json:"hung_up_map_id,omitempty"`
}

func (m *Center_CurBattleInfoRequest) Reset()      { *m = Center_CurBattleInfoRequest{} }
func (*Center_CurBattleInfoRequest) ProtoMessage() {}
func (*Center_CurBattleInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 13}
}
func (m *Center_CurBattleInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_CurBattleInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_CurBattleInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_CurBattleInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_CurBattleInfoRequest.Merge(m, src)
}
func (m *Center_CurBattleInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *Center_CurBattleInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_CurBattleInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Center_CurBattleInfoRequest proto.InternalMessageInfo

func (m *Center_CurBattleInfoRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *Center_CurBattleInfoRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *Center_CurBattleInfoRequest) GetHungUpServerId() int64 {
	if m != nil {
		return m.HungUpServerId
	}
	return 0
}

func (m *Center_CurBattleInfoRequest) GetHungUpMapId() int64 {
	if m != nil {
		return m.HungUpMapId
	}
	return 0
}

func (*Center_CurBattleInfoRequest) XXX_MessageName() string {
	return "center.Center.CurBattleInfoRequest"
}

type Center_CurBattleInfoResponse struct {
	MapId          int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64 `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	HungUpServerId int64 `protobuf:"varint,3,opt,name=hung_up_server_id,json=hungUpServerId,proto3" json:"hung_up_server_id,omitempty"`
	HungUpMapId    int64 `protobuf:"varint,4,opt,name=hung_up_map_id,json=hungUpMapId,proto3" json:"hung_up_map_id,omitempty"`
}

func (m *Center_CurBattleInfoResponse) Reset()      { *m = Center_CurBattleInfoResponse{} }
func (*Center_CurBattleInfoResponse) ProtoMessage() {}
func (*Center_CurBattleInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee05e78f3a1f73f, []int{0, 14}
}
func (m *Center_CurBattleInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Center_CurBattleInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Center_CurBattleInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Center_CurBattleInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Center_CurBattleInfoResponse.Merge(m, src)
}
func (m *Center_CurBattleInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *Center_CurBattleInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Center_CurBattleInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Center_CurBattleInfoResponse proto.InternalMessageInfo

func (m *Center_CurBattleInfoResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *Center_CurBattleInfoResponse) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *Center_CurBattleInfoResponse) GetHungUpServerId() int64 {
	if m != nil {
		return m.HungUpServerId
	}
	return 0
}

func (m *Center_CurBattleInfoResponse) GetHungUpMapId() int64 {
	if m != nil {
		return m.HungUpMapId
	}
	return 0
}

func (*Center_CurBattleInfoResponse) XXX_MessageName() string {
	return "center.Center.CurBattleInfoResponse"
}
func init() {
	proto.RegisterType((*Center)(nil), "center.Center")
	proto.RegisterType((*Center_SelfAddrRequest)(nil), "center.Center.SelfAddrRequest")
	proto.RegisterType((*Center_SelfAddrResponse)(nil), "center.Center.SelfAddrResponse")
	proto.RegisterType((*Center_AuthEdgeRequest)(nil), "center.Center.AuthEdgeRequest")
	proto.RegisterType((*Center_AuthEdgeResponse)(nil), "center.Center.AuthEdgeResponse")
	proto.RegisterType((*Center_FindValidServerRequest)(nil), "center.Center.FindValidServerRequest")
	proto.RegisterType((*Center_FindValidServerResponse)(nil), "center.Center.FindValidServerResponse")
	proto.RegisterType((*Center_GetMapAllLinesRequest)(nil), "center.Center.GetMapAllLinesRequest")
	proto.RegisterType((*Center_GetMapAllLinesResponse)(nil), "center.Center.GetMapAllLinesResponse")
	proto.RegisterType((*Center_GetTargetLineRequest)(nil), "center.Center.GetTargetLineRequest")
	proto.RegisterType((*Center_GetTargetLineResponse)(nil), "center.Center.GetTargetLineResponse")
	proto.RegisterType((*Center_MonitorInfoPush)(nil), "center.Center.MonitorInfoPush")
	proto.RegisterType((*Center_EdgeInfo)(nil), "center.Center.EdgeInfo")
	proto.RegisterType((*Center_SyncEdgeInfoPush)(nil), "center.Center.SyncEdgeInfoPush")
	proto.RegisterType((*Center_CurBattleInfoRequest)(nil), "center.Center.CurBattleInfoRequest")
	proto.RegisterType((*Center_CurBattleInfoResponse)(nil), "center.Center.CurBattleInfoResponse")
}

func init() { proto.RegisterFile("proto/center/center.proto", fileDescriptor_8ee05e78f3a1f73f) }

var fileDescriptor_8ee05e78f3a1f73f = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xce, 0xc4, 0x4d, 0x48, 0xde, 0x40, 0x92, 0x9a, 0xb4, 0x4d, 0x8d, 0x30, 0x11, 0x48, 0x28,
	0x20, 0x35, 0x91, 0x5a, 0x09, 0x04, 0xb7, 0x34, 0x6a, 0xab, 0x08, 0x22, 0x81, 0x53, 0x40, 0xe2,
	0x62, 0xb9, 0x9e, 0x49, 0x62, 0x61, 0xcf, 0x18, 0x7b, 0x4c, 0xdb, 0x2b, 0xe2, 0x02, 0x27, 0xfe,
	0x05, 0xfd, 0x29, 0x15, 0xa7, 0x1e, 0x7b, 0x84, 0xe4, 0xc2, 0x91, 0x9f, 0xb0, 0xf2, 0xcc, 0x38,
	0x49, 0xbd, 0x55, 0x77, 0x57, 0xda, 0xc3, 0x9e, 0x32, 0xef, 0xf7, 0xf3, 0xbc, 0xf3, 0x8c, 0x03,
	0xfb, 0x61, 0xc4, 0x38, 0xeb, 0xbb, 0x84, 0x72, 0x12, 0xa9, 0x9f, 0x9e, 0xf0, 0xe9, 0x65, 0x69,
	0x19, 0x7b, 0x32, 0x25, 0x60, 0x98, 0xf8, 0x71, 0xff, 0xc2, 0x89, 0x89, 0x4c, 0x30, 0xf6, 0x73,
	0x01, 0xce, 0x7d, 0x15, 0xfa, 0xf0, 0xef, 0xb7, 0xa1, 0x3c, 0x94, 0xe5, 0xdb, 0xd0, 0x98, 0x10,
	0x7f, 0x3a, 0xc0, 0x38, 0xb2, 0xc8, 0xcf, 0x09, 0x89, 0xb9, 0xf1, 0x31, 0x34, 0xd7, 0xae, 0x38,
	0x64, 0x34, 0x26, 0xba, 0x0e, 0x5b, 0x0e, 0xc6, 0x51, 0x1b, 0x75, 0x50, 0xb7, 0x6a, 0x89, 0xb3,
	0xf1, 0x05, 0x34, 0x06, 0x09, 0x9f, 0x9f, 0xe0, 0x19, 0x51, 0xa5, 0x7a, 0x0b, 0x4a, 0x9c, 0xfd,
	0x44, 0xa8, 0xca, 0x93, 0x86, 0xde, 0x04, 0x8d, 0xb2, 0xcb, 0x76, 0xb1, 0x83, 0xba, 0x9a, 0x95,
	0x1e, 0x8d, 0x2f, 0xa1, 0xb9, 0x2e, 0x55, 0x23, 0x5e, 0xb6, 0xf6, 0x77, 0x04, 0xbb, 0xa7, 0x1e,
	0xc5, 0xdf, 0x3b, 0xbe, 0x87, 0x27, 0x24, 0xfa, 0x85, 0x64, 0xc8, 0xf5, 0x23, 0xa8, 0x49, 0x9e,
	0x36, 0xbf, 0x0e, 0x89, 0x68, 0x54, 0x3f, 0xd4, 0x7b, 0x72, 0x05, 0xbd, 0x63, 0x11, 0x3a, 0xbf,
	0x0e, 0x89, 0x05, 0x17, 0xab, 0xb3, 0xfe, 0x1e, 0x54, 0x63, 0xd1, 0xc5, 0xf6, 0xb0, 0x9a, 0x53,
	0x91, 0x8e, 0x11, 0xd6, 0xdf, 0x07, 0x08, 0x9c, 0xd0, 0x76, 0x19, 0x9d, 0x7a, 0xb3, 0xb6, 0x26,
	0xa2, 0xd5, 0xc0, 0x09, 0x87, 0xc2, 0x61, 0x7c, 0x06, 0x7b, 0xcf, 0x41, 0x51, 0x74, 0x1e, 0xb4,
	0x45, 0x0f, 0xdb, 0x1a, 0x5f, 0xc1, 0xce, 0x19, 0xe1, 0x63, 0x27, 0x1c, 0xf8, 0xfe, 0xd7, 0x1e,
	0x25, 0x71, 0xc6, 0x60, 0x07, 0xca, 0xe9, 0xbc, 0x55, 0x49, 0x29, 0x70, 0xc2, 0x11, 0x7e, 0x12,
	0xa3, 0xf1, 0x2d, 0xec, 0xe6, 0x9b, 0x29, 0x0c, 0x9f, 0xc3, 0x3b, 0x8e, 0xef, 0xdb, 0xbe, 0x47,
	0x89, 0xed, 0xd1, 0x29, 0x13, 0x4d, 0x6b, 0x87, 0xef, 0x66, 0x1b, 0x51, 0x05, 0x23, 0x3a, 0x65,
	0x56, 0xcd, 0x59, 0x1b, 0x06, 0x87, 0xd6, 0x19, 0xe1, 0xe7, 0x4e, 0x34, 0x23, 0x3c, 0x75, 0xbe,
	0x00, 0x5e, 0x17, 0x9a, 0x6a, 0xef, 0x79, 0x94, 0x75, 0xe9, 0x9f, 0x64, 0xfb, 0x7c, 0x40, 0x44,
	0xcb, 0x11, 0x39, 0x15, 0x5b, 0xd9, 0x9c, 0xaa, 0x78, 0x1c, 0x40, 0x35, 0xcf, 0xa1, 0x99, 0x71,
	0x58, 0x11, 0xa8, 0xf8, 0x19, 0xfa, 0x3f, 0x8a, 0xd0, 0x18, 0x33, 0xea, 0x71, 0x16, 0xa5, 0xf6,
	0x37, 0x49, 0x3c, 0xd7, 0xeb, 0x50, 0xf4, 0x42, 0x25, 0xad, 0xa2, 0x17, 0xa6, 0x82, 0x0e, 0x59,
	0xc4, 0x05, 0xcc, 0x92, 0x25, 0xce, 0x79, 0xf9, 0x68, 0xaf, 0x2e, 0x9f, 0xad, 0x27, 0xe5, 0x53,
	0xca, 0xc9, 0x27, 0xad, 0x75, 0x93, 0xc8, 0x76, 0x59, 0x42, 0x79, 0xbb, 0x2c, 0x6b, 0xdd, 0x24,
	0x1a, 0xa6, 0x76, 0x1a, 0x0c, 0x9c, 0x2b, 0x15, 0x7c, 0x4b, 0x06, 0x03, 0xe7, 0x4a, 0x06, 0x1f,
	0xdb, 0x78, 0xe5, 0xb1, 0x8d, 0x1b, 0xbf, 0x22, 0xa8, 0xa4, 0xef, 0x2c, 0xdd, 0x44, 0xda, 0x53,
	0x95, 0xad, 0x45, 0x29, 0x1d, 0x23, 0xbc, 0x71, 0xb9, 0xc5, 0xcd, 0xcb, 0x6d, 0x41, 0x29, 0x62,
	0x3e, 0x89, 0xdb, 0x5a, 0x47, 0x4b, 0xdf, 0xa5, 0x30, 0xd2, 0x64, 0x2f, 0xb6, 0x1d, 0x2c, 0x39,
	0x57, 0xac, 0x92, 0x17, 0x0f, 0x30, 0x56, 0x6e, 0x42, 0xb1, 0x20, 0x2b, 0xdc, 0x27, 0x14, 0x1b,
	0xbf, 0x21, 0x68, 0x4e, 0xae, 0xa9, 0x9b, 0x01, 0x11, 0x57, 0x72, 0x00, 0x25, 0x82, 0x67, 0x24,
	0x6e, 0xa3, 0x8e, 0xd6, 0xad, 0x1d, 0xee, 0xf5, 0xd4, 0xf7, 0x4d, 0x7e, 0x99, 0x7a, 0x59, 0xae,
	0x25, 0xb3, 0xb2, 0x89, 0xbe, 0x2f, 0xe0, 0xc9, 0x89, 0xbe, 0xaf, 0x7f, 0x0a, 0xdb, 0x11, 0x09,
	0x1c, 0x8f, 0xda, 0x6e, 0x98, 0xd8, 0x97, 0xc4, 0x9b, 0xcd, 0xb9, 0x52, 0x56, 0x43, 0x06, 0x86,
	0x61, 0xf2, 0x83, 0x70, 0x1b, 0x7f, 0x21, 0x68, 0x0d, 0x93, 0x48, 0xde, 0xa4, 0xe8, 0xfd, 0xba,
	0x74, 0xfd, 0x09, 0x6c, 0xcf, 0x13, 0x3a, 0xb3, 0x93, 0xd0, 0xce, 0xeb, 0xbb, 0x9e, 0x06, 0xbe,
	0x0b, 0x57, 0xa9, 0x1f, 0x41, 0x3d, 0x4b, 0x55, 0x33, 0xa5, 0x6a, 0x6a, 0x32, 0x6f, 0x9c, 0x4e,
	0x36, 0x6e, 0x10, 0xec, 0xe4, 0x90, 0xaa, 0xb7, 0xf0, 0xa6, 0x41, 0x3d, 0x1e, 0xdf, 0xff, 0x6b,
	0x16, 0x6e, 0x16, 0x26, 0xba, 0x5d, 0x98, 0xe8, 0x6e, 0x61, 0xa2, 0x7f, 0x16, 0x26, 0xfa, 0x6f,
	0x61, 0x16, 0xfe, 0x5f, 0x98, 0xe8, 0xcf, 0xa5, 0x59, 0xb8, 0x5d, 0x9a, 0xe8, 0x6e, 0x69, 0x16,
	0xee, 0x97, 0x66, 0xe1, 0xc7, 0x0f, 0x5c, 0xe6, 0xd1, 0x03, 0x39, 0xb8, 0xef, 0xb2, 0x20, 0x60,
	0xb4, 0xbf, 0xf9, 0x27, 0x77, 0x51, 0x16, 0xd6, 0xd1, 0xb3, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe9,
	0xae, 0xbc, 0x69, 0xfb, 0x06, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_SelfAddrRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_SelfAddrResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_AuthEdgeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_AuthEdgeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_FindValidServerRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_FindValidServerResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_GetMapAllLinesRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_GetMapAllLinesResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_GetTargetLineRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_GetTargetLineResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_MonitorInfoPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_EdgeInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_SyncEdgeInfoPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_CurBattleInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCenter_CurBattleInfoResponse.Get().(proto.Message)
	})
}

var poolCenter = &sync.Pool{New: func() interface{} { return &Center{} }}

func (m *Center) ReleasePool() { m.Reset(); poolCenter.Put(m); m = nil }

var poolCenter_SelfAddrRequest = &sync.Pool{New: func() interface{} { return &Center_SelfAddrRequest{} }}

func (m *Center_SelfAddrRequest) ReleasePool() { m.Reset(); poolCenter_SelfAddrRequest.Put(m); m = nil }

var poolCenter_SelfAddrResponse = &sync.Pool{New: func() interface{} { return &Center_SelfAddrResponse{} }}

func (m *Center_SelfAddrResponse) ReleasePool() {
	m.Reset()
	poolCenter_SelfAddrResponse.Put(m)
	m = nil
}

var poolCenter_AuthEdgeRequest = &sync.Pool{New: func() interface{} { return &Center_AuthEdgeRequest{} }}

func (m *Center_AuthEdgeRequest) ReleasePool() { m.Reset(); poolCenter_AuthEdgeRequest.Put(m); m = nil }

var poolCenter_AuthEdgeResponse = &sync.Pool{New: func() interface{} { return &Center_AuthEdgeResponse{} }}

func (m *Center_AuthEdgeResponse) ReleasePool() {
	m.Reset()
	poolCenter_AuthEdgeResponse.Put(m)
	m = nil
}

var poolCenter_FindValidServerRequest = &sync.Pool{New: func() interface{} { return &Center_FindValidServerRequest{} }}

func (m *Center_FindValidServerRequest) ReleasePool() {
	m.Reset()
	poolCenter_FindValidServerRequest.Put(m)
	m = nil
}

var poolCenter_FindValidServerResponse = &sync.Pool{New: func() interface{} { return &Center_FindValidServerResponse{} }}

func (m *Center_FindValidServerResponse) ReleasePool() {
	m.Reset()
	poolCenter_FindValidServerResponse.Put(m)
	m = nil
}

var poolCenter_GetMapAllLinesRequest = &sync.Pool{New: func() interface{} { return &Center_GetMapAllLinesRequest{} }}

func (m *Center_GetMapAllLinesRequest) ReleasePool() {
	m.Reset()
	poolCenter_GetMapAllLinesRequest.Put(m)
	m = nil
}

var poolCenter_GetMapAllLinesResponse = &sync.Pool{New: func() interface{} { return &Center_GetMapAllLinesResponse{} }}

func (m *Center_GetMapAllLinesResponse) ReleasePool() {
	m.Reset()
	poolCenter_GetMapAllLinesResponse.Put(m)
	m = nil
}

var poolCenter_GetTargetLineRequest = &sync.Pool{New: func() interface{} { return &Center_GetTargetLineRequest{} }}

func (m *Center_GetTargetLineRequest) ReleasePool() {
	m.Reset()
	poolCenter_GetTargetLineRequest.Put(m)
	m = nil
}

var poolCenter_GetTargetLineResponse = &sync.Pool{New: func() interface{} { return &Center_GetTargetLineResponse{} }}

func (m *Center_GetTargetLineResponse) ReleasePool() {
	m.Reset()
	poolCenter_GetTargetLineResponse.Put(m)
	m = nil
}

var poolCenter_MonitorInfoPush = &sync.Pool{New: func() interface{} { return &Center_MonitorInfoPush{} }}

func (m *Center_MonitorInfoPush) ReleasePool() { m.Reset(); poolCenter_MonitorInfoPush.Put(m); m = nil }

var poolCenter_EdgeInfo = &sync.Pool{New: func() interface{} { return &Center_EdgeInfo{} }}

func (m *Center_EdgeInfo) ReleasePool() { m.Reset(); poolCenter_EdgeInfo.Put(m); m = nil }

var poolCenter_SyncEdgeInfoPush = &sync.Pool{New: func() interface{} { return &Center_SyncEdgeInfoPush{} }}

func (m *Center_SyncEdgeInfoPush) ReleasePool() {
	m.Reset()
	poolCenter_SyncEdgeInfoPush.Put(m)
	m = nil
}

var poolCenter_CurBattleInfoRequest = &sync.Pool{New: func() interface{} { return &Center_CurBattleInfoRequest{} }}

func (m *Center_CurBattleInfoRequest) ReleasePool() {
	m.Reset()
	poolCenter_CurBattleInfoRequest.Put(m)
	m = nil
}

var poolCenter_CurBattleInfoResponse = &sync.Pool{New: func() interface{} { return &Center_CurBattleInfoResponse{} }}

func (m *Center_CurBattleInfoResponse) ReleasePool() {
	m.Reset()
	poolCenter_CurBattleInfoResponse.Put(m)
	m = nil
}
func (this *Center) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center)
	if !ok {
		that2, ok := that.(Center)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Center_SelfAddrRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_SelfAddrRequest)
	if !ok {
		that2, ok := that.(Center_SelfAddrRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Center_SelfAddrResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_SelfAddrResponse)
	if !ok {
		that2, ok := that.(Center_SelfAddrResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	return true
}
func (this *Center_AuthEdgeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_AuthEdgeRequest)
	if !ok {
		that2, ok := that.(Center_AuthEdgeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Now != that1.Now {
		return false
	}
	return true
}
func (this *Center_AuthEdgeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_AuthEdgeResponse)
	if !ok {
		that2, ok := that.(Center_AuthEdgeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Now != that1.Now {
		return false
	}
	return true
}
func (this *Center_FindValidServerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_FindValidServerRequest)
	if !ok {
		that2, ok := that.(Center_FindValidServerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.MapConfig != that1.MapConfig {
		return false
	}
	return true
}
func (this *Center_FindValidServerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_FindValidServerResponse)
	if !ok {
		that2, ok := that.(Center_FindValidServerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	return true
}
func (this *Center_GetMapAllLinesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_GetMapAllLinesRequest)
	if !ok {
		that2, ok := that.(Center_GetMapAllLinesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	return true
}
func (this *Center_GetMapAllLinesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_GetMapAllLinesResponse)
	if !ok {
		that2, ok := that.(Center_GetMapAllLinesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllLineInfo.Equal(that1.AllLineInfo) {
		return false
	}
	return true
}
func (this *Center_GetTargetLineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_GetTargetLineRequest)
	if !ok {
		that2, ok := that.(Center_GetTargetLineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	return true
}
func (this *Center_GetTargetLineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_GetTargetLineResponse)
	if !ok {
		that2, ok := that.(Center_GetTargetLineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LineInfo.Equal(that1.LineInfo) {
		return false
	}
	return true
}
func (this *Center_MonitorInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_MonitorInfoPush)
	if !ok {
		that2, ok := that.(Center_MonitorInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.MapConfig != that1.MapConfig {
		return false
	}
	if this.CurCount != that1.CurCount {
		return false
	}
	if this.MaxCount != that1.MaxCount {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *Center_EdgeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_EdgeInfo)
	if !ok {
		that2, ok := that.(Center_EdgeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if this.IsAdd != that1.IsAdd {
		return false
	}
	if this.IsEnd != that1.IsEnd {
		return false
	}
	return true
}
func (this *Center_SyncEdgeInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_SyncEdgeInfoPush)
	if !ok {
		that2, ok := that.(Center_SyncEdgeInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if this.IsAll != that1.IsAll {
		return false
	}
	if this.RemainCpuWeight != that1.RemainCpuWeight {
		return false
	}
	return true
}
func (this *Center_CurBattleInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_CurBattleInfoRequest)
	if !ok {
		that2, ok := that.(Center_CurBattleInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.HungUpServerId != that1.HungUpServerId {
		return false
	}
	if this.HungUpMapId != that1.HungUpMapId {
		return false
	}
	return true
}
func (this *Center_CurBattleInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Center_CurBattleInfoResponse)
	if !ok {
		that2, ok := that.(Center_CurBattleInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.HungUpServerId != that1.HungUpServerId {
		return false
	}
	if this.HungUpMapId != that1.HungUpMapId {
		return false
	}
	return true
}
func (m *Center) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Center_SelfAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_SelfAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_SelfAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Center_SelfAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_SelfAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_SelfAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Center_AuthEdgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_AuthEdgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_AuthEdgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Now != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.Now))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Center_AuthEdgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_AuthEdgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_AuthEdgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Now != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.Now))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Center_FindValidServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_FindValidServerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_FindValidServerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapConfig != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapConfig))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleType != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Center_FindValidServerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_FindValidServerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_FindValidServerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Center_GetMapAllLinesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_GetMapAllLinesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_GetMapAllLinesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Center_GetMapAllLinesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_GetMapAllLinesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_GetMapAllLinesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllLineInfo != nil {
		{
			size, err := m.AllLineInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Center_GetTargetLineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_GetTargetLineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_GetTargetLineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Center_GetTargetLineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_GetTargetLineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_GetTargetLineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LineInfo != nil {
		{
			size, err := m.LineInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Center_MonitorInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_MonitorInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_MonitorInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxCount != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MaxCount))
		i--
		dAtA[i] = 0x38
	}
	if m.CurCount != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.CurCount))
		i--
		dAtA[i] = 0x30
	}
	if m.MapConfig != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapConfig))
		i--
		dAtA[i] = 0x28
	}
	if m.ServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x20
	}
	if m.BattleType != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleType))
		i--
		dAtA[i] = 0x18
	}
	if m.Port != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Center_EdgeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_EdgeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_EdgeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnd {
		i--
		if m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsAdd {
		i--
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintCenter(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Center_SyncEdgeInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_SyncEdgeInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_SyncEdgeInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemainCpuWeight != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.RemainCpuWeight))
		i--
		dAtA[i] = 0x18
	}
	if m.IsAll {
		i--
		if m.IsAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Edges) > 0 {
		for iNdEx := len(m.Edges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Edges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Center_CurBattleInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_CurBattleInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_CurBattleInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HungUpMapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.HungUpMapId))
		i--
		dAtA[i] = 0x20
	}
	if m.HungUpServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.HungUpServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Center_CurBattleInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Center_CurBattleInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Center_CurBattleInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HungUpMapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.HungUpMapId))
		i--
		dAtA[i] = 0x20
	}
	if m.HungUpServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.HungUpServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCenter(dAtA []byte, offset int, v uint64) int {
	offset -= sovCenter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Center) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Center_SelfAddrRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Center_SelfAddrResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Addr != "" {
		w.RawByte('"')
		w.RawString("addr")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Addr)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_AuthEdgeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Token != "" {
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.Now != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("now")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Now))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_AuthEdgeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Token != "" {
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.Now != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("now")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Now))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_FindValidServerRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleType != 0 {
		w.RawByte('"')
		w.RawString("battle_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleType))
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.MapConfig != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_config")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapConfig))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_FindValidServerResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ServerId != 0 {
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_GetMapAllLinesRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_GetMapAllLinesResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("all_line_info")
	w.RawByte('"')
	w.RawByte(':')
	m.AllLineInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_GetTargetLineRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_GetTargetLineResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("line_info")
	w.RawByte('"')
	w.RawByte(':')
	m.LineInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_MonitorInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Ip != "" {
		w.RawByte('"')
		w.RawString("ip")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Ip)
		needWriteComma = true
	}
	if m.Port != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("port")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Port))
		needWriteComma = true
	}
	if m.BattleType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleType))
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.MapConfig != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_config")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapConfig))
		needWriteComma = true
	}
	if m.CurCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurCount))
		needWriteComma = true
	}
	if m.MaxCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxCount))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_EdgeInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			w.String(v)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsAdd {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_add")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAdd)
		needWriteComma = true
	}
	if m.IsEnd {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_end")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsEnd)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_SyncEdgeInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("edges")
	w.RawByte('"')
	w.RawByte(':')
	if m.Edges == nil {
		w.RawString("null")
	} else if len(m.Edges) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Edges {
			v.JsonBytes(w)
			if i != len(m.Edges)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsAll {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_all")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAll)
		needWriteComma = true
	}
	if m.RemainCpuWeight != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_cpu_weight")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainCpuWeight))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_CurBattleInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.HungUpServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hung_up_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HungUpServerId))
		needWriteComma = true
	}
	if m.HungUpMapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hung_up_map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HungUpMapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center_CurBattleInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.HungUpServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hung_up_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HungUpServerId))
		needWriteComma = true
	}
	if m.HungUpMapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hung_up_map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HungUpMapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Center) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center) GoString() string {
	return m.String()
}

func (m *Center_SelfAddrRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_SelfAddrRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_SelfAddrRequest) GoString() string {
	return m.String()
}

func (m *Center_SelfAddrResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_SelfAddrResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_SelfAddrResponse) GoString() string {
	return m.String()
}

func (m *Center_AuthEdgeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_AuthEdgeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_AuthEdgeRequest) GoString() string {
	return m.String()
}

func (m *Center_AuthEdgeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_AuthEdgeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_AuthEdgeResponse) GoString() string {
	return m.String()
}

func (m *Center_FindValidServerRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_FindValidServerRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_FindValidServerRequest) GoString() string {
	return m.String()
}

func (m *Center_FindValidServerResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_FindValidServerResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_FindValidServerResponse) GoString() string {
	return m.String()
}

func (m *Center_GetMapAllLinesRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_GetMapAllLinesRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_GetMapAllLinesRequest) GoString() string {
	return m.String()
}

func (m *Center_GetMapAllLinesResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_GetMapAllLinesResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_GetMapAllLinesResponse) GoString() string {
	return m.String()
}

func (m *Center_GetTargetLineRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_GetTargetLineRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_GetTargetLineRequest) GoString() string {
	return m.String()
}

func (m *Center_GetTargetLineResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_GetTargetLineResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_GetTargetLineResponse) GoString() string {
	return m.String()
}

func (m *Center_MonitorInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_MonitorInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_MonitorInfoPush) GoString() string {
	return m.String()
}

func (m *Center_EdgeInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_EdgeInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_EdgeInfo) GoString() string {
	return m.String()
}

func (m *Center_SyncEdgeInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_SyncEdgeInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_SyncEdgeInfoPush) GoString() string {
	return m.String()
}

func (m *Center_CurBattleInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_CurBattleInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_CurBattleInfoRequest) GoString() string {
	return m.String()
}

func (m *Center_CurBattleInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Center_CurBattleInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Center_CurBattleInfoResponse) GoString() string {
	return m.String()
}

func (m *Center) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Center_SelfAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Center_SelfAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	return n
}

func (m *Center_AuthEdgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.Now != 0 {
		n += 1 + sovCenter(uint64(m.Now))
	}
	return n
}

func (m *Center_AuthEdgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.Now != 0 {
		n += 1 + sovCenter(uint64(m.Now))
	}
	return n
}

func (m *Center_FindValidServerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleType != 0 {
		n += 1 + sovCenter(uint64(m.BattleType))
	}
	if m.ServerId != 0 {
		n += 1 + sovCenter(uint64(m.ServerId))
	}
	if m.MapConfig != 0 {
		n += 1 + sovCenter(uint64(m.MapConfig))
	}
	return n
}

func (m *Center_FindValidServerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerId != 0 {
		n += 1 + sovCenter(uint64(m.ServerId))
	}
	return n
}

func (m *Center_GetMapAllLinesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.ServerId != 0 {
		n += 1 + sovCenter(uint64(m.ServerId))
	}
	return n
}

func (m *Center_GetMapAllLinesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllLineInfo != nil {
		l = m.AllLineInfo.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	return n
}

func (m *Center_GetTargetLineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	if m.ServerId != 0 {
		n += 1 + sovCenter(uint64(m.ServerId))
	}
	return n
}

func (m *Center_GetTargetLineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LineInfo != nil {
		l = m.LineInfo.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	return n
}

func (m *Center_MonitorInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovCenter(uint64(m.Port))
	}
	if m.BattleType != 0 {
		n += 1 + sovCenter(uint64(m.BattleType))
	}
	if m.ServerId != 0 {
		n += 1 + sovCenter(uint64(m.ServerId))
	}
	if m.MapConfig != 0 {
		n += 1 + sovCenter(uint64(m.MapConfig))
	}
	if m.CurCount != 0 {
		n += 1 + sovCenter(uint64(m.CurCount))
	}
	if m.MaxCount != 0 {
		n += 1 + sovCenter(uint64(m.MaxCount))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	return n
}

func (m *Center_EdgeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovCenter(uint64(m.BattleId))
	}
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if m.IsAdd {
		n += 2
	}
	if m.IsEnd {
		n += 2
	}
	return n
}

func (m *Center_SyncEdgeInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if m.IsAll {
		n += 2
	}
	if m.RemainCpuWeight != 0 {
		n += 1 + sovCenter(uint64(m.RemainCpuWeight))
	}
	return n
}

func (m *Center_CurBattleInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	if m.HungUpServerId != 0 {
		n += 1 + sovCenter(uint64(m.HungUpServerId))
	}
	if m.HungUpMapId != 0 {
		n += 1 + sovCenter(uint64(m.HungUpMapId))
	}
	return n
}

func (m *Center_CurBattleInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	if m.HungUpServerId != 0 {
		n += 1 + sovCenter(uint64(m.HungUpServerId))
	}
	if m.HungUpMapId != 0 {
		n += 1 + sovCenter(uint64(m.HungUpMapId))
	}
	return n
}

func sovCenter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCenter(x uint64) (n int) {
	return sovCenter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Center) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Center: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Center: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_SelfAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelfAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelfAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_SelfAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelfAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelfAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_AuthEdgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthEdgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthEdgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_AuthEdgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthEdgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthEdgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_FindValidServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindValidServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindValidServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= models.BattleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapConfig", wireType)
			}
			m.MapConfig = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapConfig |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_FindValidServerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindValidServerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindValidServerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_GetMapAllLinesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapAllLinesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapAllLinesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_GetMapAllLinesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapAllLinesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapAllLinesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllLineInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllLineInfo == nil {
				m.AllLineInfo = &models.AllLineInfo{}
			}
			if err := m.AllLineInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_GetTargetLineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTargetLineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTargetLineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_GetTargetLineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTargetLineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTargetLineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LineInfo == nil {
				m.LineInfo = &models.LineInfo{}
			}
			if err := m.LineInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_MonitorInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitorInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitorInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= models.BattleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapConfig", wireType)
			}
			m.MapConfig = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapConfig |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurCount", wireType)
			}
			m.CurCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			m.MaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_EdgeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_SyncEdgeInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncEdgeInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncEdgeInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &Center_EdgeInfo{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAll = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainCpuWeight", wireType)
			}
			m.RemainCpuWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainCpuWeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_CurBattleInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurBattleInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurBattleInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HungUpServerId", wireType)
			}
			m.HungUpServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HungUpServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HungUpMapId", wireType)
			}
			m.HungUpMapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HungUpMapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Center_CurBattleInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurBattleInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurBattleInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HungUpServerId", wireType)
			}
			m.HungUpServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HungUpServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HungUpMapId", wireType)
			}
			m.HungUpMapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HungUpMapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCenter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCenter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCenter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCenter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCenter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCenter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCenter = fmt.Errorf("proto: unexpected end of group")
)
