// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/less-service/user.proto

package less_service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserErrorCode int32

const (
	UserErrorCode_ErrUserNotFound          UserErrorCode = 0
	UserErrorCode_ErrExpNotEnough          UserErrorCode = 1
	UserErrorCode_ErrMaterialNotEnough     UserErrorCode = 2
	UserErrorCode_ErrMaxLevel              UserErrorCode = 3
	UserErrorCode_ErrNeedBeatBoss          UserErrorCode = 4
	UserErrorCode_ErrCanNotAdvance         UserErrorCode = 5
	UserErrorCode_ErrAdvanceNeedOpen       UserErrorCode = 6
	UserErrorCode_ErrAdvanceBattleCD       UserErrorCode = 7
	UserErrorCode_ErrExpSkipUseItemMax     UserErrorCode = 8
	UserErrorCode_ErrClientVersionNotMatch UserErrorCode = 9
	UserErrorCode_ErrUserIdLoginLimit      UserErrorCode = 10
	UserErrorCode_ErrNotOwnedAvatar        UserErrorCode = 11
	UserErrorCode_ErrNotOwnedAvatarFrame   UserErrorCode = 12
)

var UserErrorCode_name = map[int32]string{
	0:  "ErrUserNotFound",
	1:  "ErrExpNotEnough",
	2:  "ErrMaterialNotEnough",
	3:  "ErrMaxLevel",
	4:  "ErrNeedBeatBoss",
	5:  "ErrCanNotAdvance",
	6:  "ErrAdvanceNeedOpen",
	7:  "ErrAdvanceBattleCD",
	8:  "ErrExpSkipUseItemMax",
	9:  "ErrClientVersionNotMatch",
	10: "ErrUserIdLoginLimit",
	11: "ErrNotOwnedAvatar",
	12: "ErrNotOwnedAvatarFrame",
}

var UserErrorCode_value = map[string]int32{
	"ErrUserNotFound":          0,
	"ErrExpNotEnough":          1,
	"ErrMaterialNotEnough":     2,
	"ErrMaxLevel":              3,
	"ErrNeedBeatBoss":          4,
	"ErrCanNotAdvance":         5,
	"ErrAdvanceNeedOpen":       6,
	"ErrAdvanceBattleCD":       7,
	"ErrExpSkipUseItemMax":     8,
	"ErrClientVersionNotMatch": 9,
	"ErrUserIdLoginLimit":      10,
	"ErrNotOwnedAvatar":        11,
	"ErrNotOwnedAvatarFrame":   12,
}

func (UserErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0}
}

type User struct {
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (*User) XXX_MessageName() string {
	return "less_service.User"
}

type User_RoleLoginRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ServerId      int64  `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	AppKey        string `protobuf:"bytes,3,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	Language      int64  `protobuf:"varint,4,opt,name=language,proto3" json:"language,omitempty"`
	RuleVersion   string `protobuf:"bytes,5,opt,name=rule_version,json=ruleVersion,proto3" json:"rule_version,omitempty"`
	Version       int64  `protobuf:"zigzag64,6,opt,name=version,proto3" json:"version,omitempty"`
	DeviceId      string `protobuf:"bytes,7,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	BattleId      int64  `protobuf:"varint,8,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	ClientVersion string `protobuf:"bytes,9,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	GameId        string `protobuf:"bytes,10,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	IggId         string `protobuf:"bytes,11,opt,name=igg_id,json=iggId,proto3" json:"igg_id,omitempty"`
}

func (m *User_RoleLoginRequest) Reset()      { *m = User_RoleLoginRequest{} }
func (*User_RoleLoginRequest) ProtoMessage() {}
func (*User_RoleLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 0}
}
func (m *User_RoleLoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_RoleLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_RoleLoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_RoleLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_RoleLoginRequest.Merge(m, src)
}
func (m *User_RoleLoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_RoleLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_RoleLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_RoleLoginRequest proto.InternalMessageInfo

func (m *User_RoleLoginRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User_RoleLoginRequest) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *User_RoleLoginRequest) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *User_RoleLoginRequest) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (m *User_RoleLoginRequest) GetRuleVersion() string {
	if m != nil {
		return m.RuleVersion
	}
	return ""
}

func (m *User_RoleLoginRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *User_RoleLoginRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *User_RoleLoginRequest) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *User_RoleLoginRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *User_RoleLoginRequest) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *User_RoleLoginRequest) GetIggId() string {
	if m != nil {
		return m.IggId
	}
	return ""
}

func (*User_RoleLoginRequest) XXX_MessageName() string {
	return "less_service.User.RoleLoginRequest"
}

type User_RoleLoginResponse struct {
	Status         models.Status  `protobuf:"varint,1,opt,name=status,proto3,enum=models.Status" json:"status,omitempty"`
	RoleId         string         `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	MapId          int64          `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64          `protobuf:"varint,4,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	Level          int64          `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId       int64          `protobuf:"varint,6,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame    int64          `protobuf:"varint,7,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power          int64          `protobuf:"varint,8,opt,name=power,proto3" json:"power,omitempty"`
	Title          int64          `protobuf:"varint,9,opt,name=title,proto3" json:"title,omitempty"`
	GuildId        string         `protobuf:"bytes,10,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildPosition  int64          `protobuf:"varint,11,opt,name=guild_position,json=guildPosition,proto3" json:"guild_position,omitempty"`
	LessServerId   int64          `protobuf:"varint,12,opt,name=less_server_id,json=lessServerId,proto3" json:"less_server_id,omitempty"`
	Nickname       string         `protobuf:"bytes,13,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Language       int64          `protobuf:"varint,14,opt,name=language,proto3" json:"language,omitempty"`
	Heroes         []*models.Hero `protobuf:"bytes,15,rep,name=heroes,proto3" json:"heroes,omitempty"`
	CreateTime     int64          `protobuf:"varint,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	LevelIndex     int64          `protobuf:"varint,17,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
	ImHttp         string         `protobuf:"bytes,18,opt,name=im_http,json=imHttp,proto3" json:"im_http,omitempty"`
	ImTcp          string         `protobuf:"bytes,19,opt,name=im_tcp,json=imTcp,proto3" json:"im_tcp,omitempty"`
	BattleSpeed    int64          `protobuf:"varint,20,opt,name=battle_speed,json=battleSpeed,proto3" json:"battle_speed,omitempty"`
	ServerId       int64          `protobuf:"varint,21,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Recharge       int64          `protobuf:"varint,22,opt,name=recharge,proto3" json:"recharge,omitempty"`
}

func (m *User_RoleLoginResponse) Reset()      { *m = User_RoleLoginResponse{} }
func (*User_RoleLoginResponse) ProtoMessage() {}
func (*User_RoleLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 1}
}
func (m *User_RoleLoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_RoleLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_RoleLoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_RoleLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_RoleLoginResponse.Merge(m, src)
}
func (m *User_RoleLoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_RoleLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_RoleLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_RoleLoginResponse proto.InternalMessageInfo

func (m *User_RoleLoginResponse) GetStatus() models.Status {
	if m != nil {
		return m.Status
	}
	return models.Status_SUCCESS
}

func (m *User_RoleLoginResponse) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *User_RoleLoginResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *User_RoleLoginResponse) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *User_RoleLoginResponse) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User_RoleLoginResponse) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *User_RoleLoginResponse) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *User_RoleLoginResponse) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *User_RoleLoginResponse) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *User_RoleLoginResponse) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *User_RoleLoginResponse) GetGuildPosition() int64 {
	if m != nil {
		return m.GuildPosition
	}
	return 0
}

func (m *User_RoleLoginResponse) GetLessServerId() int64 {
	if m != nil {
		return m.LessServerId
	}
	return 0
}

func (m *User_RoleLoginResponse) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *User_RoleLoginResponse) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (m *User_RoleLoginResponse) GetHeroes() []*models.Hero {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *User_RoleLoginResponse) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *User_RoleLoginResponse) GetLevelIndex() int64 {
	if m != nil {
		return m.LevelIndex
	}
	return 0
}

func (m *User_RoleLoginResponse) GetImHttp() string {
	if m != nil {
		return m.ImHttp
	}
	return ""
}

func (m *User_RoleLoginResponse) GetImTcp() string {
	if m != nil {
		return m.ImTcp
	}
	return ""
}

func (m *User_RoleLoginResponse) GetBattleSpeed() int64 {
	if m != nil {
		return m.BattleSpeed
	}
	return 0
}

func (m *User_RoleLoginResponse) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *User_RoleLoginResponse) GetRecharge() int64 {
	if m != nil {
		return m.Recharge
	}
	return 0
}

func (*User_RoleLoginResponse) XXX_MessageName() string {
	return "less_service.User.RoleLoginResponse"
}

type User_RoleLogoutPush struct {
	ClientVersion string `protobuf:"bytes,1,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (m *User_RoleLogoutPush) Reset()      { *m = User_RoleLogoutPush{} }
func (*User_RoleLogoutPush) ProtoMessage() {}
func (*User_RoleLogoutPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 2}
}
func (m *User_RoleLogoutPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_RoleLogoutPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_RoleLogoutPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_RoleLogoutPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_RoleLogoutPush.Merge(m, src)
}
func (m *User_RoleLogoutPush) XXX_Size() int {
	return m.Size()
}
func (m *User_RoleLogoutPush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_RoleLogoutPush.DiscardUnknown(m)
}

var xxx_messageInfo_User_RoleLogoutPush proto.InternalMessageInfo

func (m *User_RoleLogoutPush) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (*User_RoleLogoutPush) XXX_MessageName() string {
	return "less_service.User.RoleLogoutPush"
}

type User_GetRoleRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *User_GetRoleRequest) Reset()      { *m = User_GetRoleRequest{} }
func (*User_GetRoleRequest) ProtoMessage() {}
func (*User_GetRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 3}
}
func (m *User_GetRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetRoleRequest.Merge(m, src)
}
func (m *User_GetRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetRoleRequest proto.InternalMessageInfo

func (m *User_GetRoleRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*User_GetRoleRequest) XXX_MessageName() string {
	return "less_service.User.GetRoleRequest"
}

type User_GetRoleResponse struct {
	Role      *models.Role   `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Heroes    []*models.Hero `protobuf:"bytes,2,rep,name=heroes,proto3" json:"heroes,omitempty"`
	Formation []int64        `protobuf:"varint,3,rep,packed,name=formation,proto3" json:"formation,omitempty"`
}

func (m *User_GetRoleResponse) Reset()      { *m = User_GetRoleResponse{} }
func (*User_GetRoleResponse) ProtoMessage() {}
func (*User_GetRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 4}
}
func (m *User_GetRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetRoleResponse.Merge(m, src)
}
func (m *User_GetRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetRoleResponse proto.InternalMessageInfo

func (m *User_GetRoleResponse) GetRole() *models.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *User_GetRoleResponse) GetHeroes() []*models.Hero {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *User_GetRoleResponse) GetFormation() []int64 {
	if m != nil {
		return m.Formation
	}
	return nil
}

func (*User_GetRoleResponse) XXX_MessageName() string {
	return "less_service.User.GetRoleResponse"
}

type User_SearchRoleRequest struct {
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (m *User_SearchRoleRequest) Reset()      { *m = User_SearchRoleRequest{} }
func (*User_SearchRoleRequest) ProtoMessage() {}
func (*User_SearchRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 5}
}
func (m *User_SearchRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SearchRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SearchRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SearchRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SearchRoleRequest.Merge(m, src)
}
func (m *User_SearchRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_SearchRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SearchRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_SearchRoleRequest proto.InternalMessageInfo

func (m *User_SearchRoleRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (*User_SearchRoleRequest) XXX_MessageName() string {
	return "less_service.User.SearchRoleRequest"
}

type User_SearchRoleResponse struct {
	Role []*models.Role `protobuf:"bytes,1,rep,name=role,proto3" json:"role,omitempty"`
}

func (m *User_SearchRoleResponse) Reset()      { *m = User_SearchRoleResponse{} }
func (*User_SearchRoleResponse) ProtoMessage() {}
func (*User_SearchRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 6}
}
func (m *User_SearchRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SearchRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SearchRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SearchRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SearchRoleResponse.Merge(m, src)
}
func (m *User_SearchRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_SearchRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SearchRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_SearchRoleResponse proto.InternalMessageInfo

func (m *User_SearchRoleResponse) GetRole() []*models.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (*User_SearchRoleResponse) XXX_MessageName() string {
	return "less_service.User.SearchRoleResponse"
}

type User_SetAvatarRequest struct {
	AvatarId int64 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (m *User_SetAvatarRequest) Reset()      { *m = User_SetAvatarRequest{} }
func (*User_SetAvatarRequest) ProtoMessage() {}
func (*User_SetAvatarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 7}
}
func (m *User_SetAvatarRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetAvatarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetAvatarRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetAvatarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetAvatarRequest.Merge(m, src)
}
func (m *User_SetAvatarRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_SetAvatarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetAvatarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetAvatarRequest proto.InternalMessageInfo

func (m *User_SetAvatarRequest) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (*User_SetAvatarRequest) XXX_MessageName() string {
	return "less_service.User.SetAvatarRequest"
}

type User_SetAvatarResponse struct {
	AvatarId int64 `protobuf:"varint,1,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
}

func (m *User_SetAvatarResponse) Reset()      { *m = User_SetAvatarResponse{} }
func (*User_SetAvatarResponse) ProtoMessage() {}
func (*User_SetAvatarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 8}
}
func (m *User_SetAvatarResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetAvatarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetAvatarResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetAvatarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetAvatarResponse.Merge(m, src)
}
func (m *User_SetAvatarResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_SetAvatarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetAvatarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetAvatarResponse proto.InternalMessageInfo

func (m *User_SetAvatarResponse) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (*User_SetAvatarResponse) XXX_MessageName() string {
	return "less_service.User.SetAvatarResponse"
}

type User_SetAvatarFrameRequest struct {
	AvatarFrame int64 `protobuf:"varint,1,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
}

func (m *User_SetAvatarFrameRequest) Reset()      { *m = User_SetAvatarFrameRequest{} }
func (*User_SetAvatarFrameRequest) ProtoMessage() {}
func (*User_SetAvatarFrameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 9}
}
func (m *User_SetAvatarFrameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetAvatarFrameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetAvatarFrameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetAvatarFrameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetAvatarFrameRequest.Merge(m, src)
}
func (m *User_SetAvatarFrameRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_SetAvatarFrameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetAvatarFrameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetAvatarFrameRequest proto.InternalMessageInfo

func (m *User_SetAvatarFrameRequest) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (*User_SetAvatarFrameRequest) XXX_MessageName() string {
	return "less_service.User.SetAvatarFrameRequest"
}

type User_SetAvatarFrameResponse struct {
	AvatarFrame int64 `protobuf:"varint,1,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
}

func (m *User_SetAvatarFrameResponse) Reset()      { *m = User_SetAvatarFrameResponse{} }
func (*User_SetAvatarFrameResponse) ProtoMessage() {}
func (*User_SetAvatarFrameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 10}
}
func (m *User_SetAvatarFrameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetAvatarFrameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetAvatarFrameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetAvatarFrameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetAvatarFrameResponse.Merge(m, src)
}
func (m *User_SetAvatarFrameResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_SetAvatarFrameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetAvatarFrameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetAvatarFrameResponse proto.InternalMessageInfo

func (m *User_SetAvatarFrameResponse) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (*User_SetAvatarFrameResponse) XXX_MessageName() string {
	return "less_service.User.SetAvatarFrameResponse"
}

type User_ChangeNicknameRequest struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *User_ChangeNicknameRequest) Reset()      { *m = User_ChangeNicknameRequest{} }
func (*User_ChangeNicknameRequest) ProtoMessage() {}
func (*User_ChangeNicknameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 11}
}
func (m *User_ChangeNicknameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_ChangeNicknameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_ChangeNicknameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_ChangeNicknameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_ChangeNicknameRequest.Merge(m, src)
}
func (m *User_ChangeNicknameRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_ChangeNicknameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_ChangeNicknameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_ChangeNicknameRequest proto.InternalMessageInfo

func (m *User_ChangeNicknameRequest) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (*User_ChangeNicknameRequest) XXX_MessageName() string {
	return "less_service.User.ChangeNicknameRequest"
}

type User_ChangeNicknameResponse struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *User_ChangeNicknameResponse) Reset()      { *m = User_ChangeNicknameResponse{} }
func (*User_ChangeNicknameResponse) ProtoMessage() {}
func (*User_ChangeNicknameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 12}
}
func (m *User_ChangeNicknameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_ChangeNicknameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_ChangeNicknameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_ChangeNicknameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_ChangeNicknameResponse.Merge(m, src)
}
func (m *User_ChangeNicknameResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_ChangeNicknameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_ChangeNicknameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_ChangeNicknameResponse proto.InternalMessageInfo

func (m *User_ChangeNicknameResponse) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (*User_ChangeNicknameResponse) XXX_MessageName() string {
	return "less_service.User.ChangeNicknameResponse"
}

type User_GetOwnAvatarRequest struct {
}

func (m *User_GetOwnAvatarRequest) Reset()      { *m = User_GetOwnAvatarRequest{} }
func (*User_GetOwnAvatarRequest) ProtoMessage() {}
func (*User_GetOwnAvatarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 13}
}
func (m *User_GetOwnAvatarRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetOwnAvatarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetOwnAvatarRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetOwnAvatarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetOwnAvatarRequest.Merge(m, src)
}
func (m *User_GetOwnAvatarRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetOwnAvatarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetOwnAvatarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetOwnAvatarRequest proto.InternalMessageInfo

func (*User_GetOwnAvatarRequest) XXX_MessageName() string {
	return "less_service.User.GetOwnAvatarRequest"
}

type User_GetOwnAvatarResponse struct {
	OwnAvatar map[int64]*models.Avatar `protobuf:"bytes,1,rep,name=own_avatar,json=ownAvatar,proto3" json:"own_avatar,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurAvatar *models.CurAvatar        `protobuf:"bytes,2,opt,name=cur_avatar,json=curAvatar,proto3" json:"cur_avatar,omitempty"`
}

func (m *User_GetOwnAvatarResponse) Reset()      { *m = User_GetOwnAvatarResponse{} }
func (*User_GetOwnAvatarResponse) ProtoMessage() {}
func (*User_GetOwnAvatarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 14}
}
func (m *User_GetOwnAvatarResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetOwnAvatarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetOwnAvatarResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetOwnAvatarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetOwnAvatarResponse.Merge(m, src)
}
func (m *User_GetOwnAvatarResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetOwnAvatarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetOwnAvatarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetOwnAvatarResponse proto.InternalMessageInfo

func (m *User_GetOwnAvatarResponse) GetOwnAvatar() map[int64]*models.Avatar {
	if m != nil {
		return m.OwnAvatar
	}
	return nil
}

func (m *User_GetOwnAvatarResponse) GetCurAvatar() *models.CurAvatar {
	if m != nil {
		return m.CurAvatar
	}
	return nil
}

func (*User_GetOwnAvatarResponse) XXX_MessageName() string {
	return "less_service.User.GetOwnAvatarResponse"
}

type User_ChangeLanguageRequest struct {
	Language int64 `protobuf:"varint,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (m *User_ChangeLanguageRequest) Reset()      { *m = User_ChangeLanguageRequest{} }
func (*User_ChangeLanguageRequest) ProtoMessage() {}
func (*User_ChangeLanguageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 15}
}
func (m *User_ChangeLanguageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_ChangeLanguageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_ChangeLanguageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_ChangeLanguageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_ChangeLanguageRequest.Merge(m, src)
}
func (m *User_ChangeLanguageRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_ChangeLanguageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_ChangeLanguageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_ChangeLanguageRequest proto.InternalMessageInfo

func (m *User_ChangeLanguageRequest) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (*User_ChangeLanguageRequest) XXX_MessageName() string {
	return "less_service.User.ChangeLanguageRequest"
}

type User_ChangeLanguageResponse struct {
	Language int64 `protobuf:"varint,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (m *User_ChangeLanguageResponse) Reset()      { *m = User_ChangeLanguageResponse{} }
func (*User_ChangeLanguageResponse) ProtoMessage() {}
func (*User_ChangeLanguageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 16}
}
func (m *User_ChangeLanguageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_ChangeLanguageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_ChangeLanguageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_ChangeLanguageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_ChangeLanguageResponse.Merge(m, src)
}
func (m *User_ChangeLanguageResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_ChangeLanguageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_ChangeLanguageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_ChangeLanguageResponse proto.InternalMessageInfo

func (m *User_ChangeLanguageResponse) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (*User_ChangeLanguageResponse) XXX_MessageName() string {
	return "less_service.User.ChangeLanguageResponse"
}

type User_PowerChangePush struct {
	Power int64 `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *User_PowerChangePush) Reset()      { *m = User_PowerChangePush{} }
func (*User_PowerChangePush) ProtoMessage() {}
func (*User_PowerChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 17}
}
func (m *User_PowerChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_PowerChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_PowerChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_PowerChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_PowerChangePush.Merge(m, src)
}
func (m *User_PowerChangePush) XXX_Size() int {
	return m.Size()
}
func (m *User_PowerChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_PowerChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_User_PowerChangePush proto.InternalMessageInfo

func (m *User_PowerChangePush) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (*User_PowerChangePush) XXX_MessageName() string {
	return "less_service.User.PowerChangePush"
}

type User_ChangeBattleMapEvent struct {
	MapId          int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64 `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *User_ChangeBattleMapEvent) Reset()      { *m = User_ChangeBattleMapEvent{} }
func (*User_ChangeBattleMapEvent) ProtoMessage() {}
func (*User_ChangeBattleMapEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 18}
}
func (m *User_ChangeBattleMapEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_ChangeBattleMapEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_ChangeBattleMapEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_ChangeBattleMapEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_ChangeBattleMapEvent.Merge(m, src)
}
func (m *User_ChangeBattleMapEvent) XXX_Size() int {
	return m.Size()
}
func (m *User_ChangeBattleMapEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_User_ChangeBattleMapEvent.DiscardUnknown(m)
}

var xxx_messageInfo_User_ChangeBattleMapEvent proto.InternalMessageInfo

func (m *User_ChangeBattleMapEvent) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *User_ChangeBattleMapEvent) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*User_ChangeBattleMapEvent) XXX_MessageName() string {
	return "less_service.User.ChangeBattleMapEvent"
}

type User_GetRecentChatIdsRequest struct {
}

func (m *User_GetRecentChatIdsRequest) Reset()      { *m = User_GetRecentChatIdsRequest{} }
func (*User_GetRecentChatIdsRequest) ProtoMessage() {}
func (*User_GetRecentChatIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 19}
}
func (m *User_GetRecentChatIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetRecentChatIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetRecentChatIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetRecentChatIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetRecentChatIdsRequest.Merge(m, src)
}
func (m *User_GetRecentChatIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetRecentChatIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetRecentChatIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetRecentChatIdsRequest proto.InternalMessageInfo

func (*User_GetRecentChatIdsRequest) XXX_MessageName() string {
	return "less_service.User.GetRecentChatIdsRequest"
}

type User_GetRecentChatIdsResponse struct {
	RoleIds []string `protobuf:"bytes,1,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (m *User_GetRecentChatIdsResponse) Reset()      { *m = User_GetRecentChatIdsResponse{} }
func (*User_GetRecentChatIdsResponse) ProtoMessage() {}
func (*User_GetRecentChatIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 20}
}
func (m *User_GetRecentChatIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetRecentChatIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetRecentChatIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetRecentChatIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetRecentChatIdsResponse.Merge(m, src)
}
func (m *User_GetRecentChatIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetRecentChatIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetRecentChatIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetRecentChatIdsResponse proto.InternalMessageInfo

func (m *User_GetRecentChatIdsResponse) GetRoleIds() []string {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

func (*User_GetRecentChatIdsResponse) XXX_MessageName() string {
	return "less_service.User.GetRecentChatIdsResponse"
}

type User_AddRecentChatIdsRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *User_AddRecentChatIdsRequest) Reset()      { *m = User_AddRecentChatIdsRequest{} }
func (*User_AddRecentChatIdsRequest) ProtoMessage() {}
func (*User_AddRecentChatIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 21}
}
func (m *User_AddRecentChatIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AddRecentChatIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AddRecentChatIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AddRecentChatIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AddRecentChatIdsRequest.Merge(m, src)
}
func (m *User_AddRecentChatIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_AddRecentChatIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AddRecentChatIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_AddRecentChatIdsRequest proto.InternalMessageInfo

func (m *User_AddRecentChatIdsRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*User_AddRecentChatIdsRequest) XXX_MessageName() string {
	return "less_service.User.AddRecentChatIdsRequest"
}

type User_AddRecentChatIdsResponse struct {
}

func (m *User_AddRecentChatIdsResponse) Reset()      { *m = User_AddRecentChatIdsResponse{} }
func (*User_AddRecentChatIdsResponse) ProtoMessage() {}
func (*User_AddRecentChatIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 22}
}
func (m *User_AddRecentChatIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AddRecentChatIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AddRecentChatIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AddRecentChatIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AddRecentChatIdsResponse.Merge(m, src)
}
func (m *User_AddRecentChatIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_AddRecentChatIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AddRecentChatIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_AddRecentChatIdsResponse proto.InternalMessageInfo

func (*User_AddRecentChatIdsResponse) XXX_MessageName() string {
	return "less_service.User.AddRecentChatIdsResponse"
}

type User_DeleteRecentChatIdsRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *User_DeleteRecentChatIdsRequest) Reset()      { *m = User_DeleteRecentChatIdsRequest{} }
func (*User_DeleteRecentChatIdsRequest) ProtoMessage() {}
func (*User_DeleteRecentChatIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 23}
}
func (m *User_DeleteRecentChatIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_DeleteRecentChatIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_DeleteRecentChatIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_DeleteRecentChatIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_DeleteRecentChatIdsRequest.Merge(m, src)
}
func (m *User_DeleteRecentChatIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_DeleteRecentChatIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_DeleteRecentChatIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_DeleteRecentChatIdsRequest proto.InternalMessageInfo

func (m *User_DeleteRecentChatIdsRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*User_DeleteRecentChatIdsRequest) XXX_MessageName() string {
	return "less_service.User.DeleteRecentChatIdsRequest"
}

type User_DeleteRecentChatIdsResponse struct {
}

func (m *User_DeleteRecentChatIdsResponse) Reset()      { *m = User_DeleteRecentChatIdsResponse{} }
func (*User_DeleteRecentChatIdsResponse) ProtoMessage() {}
func (*User_DeleteRecentChatIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 24}
}
func (m *User_DeleteRecentChatIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_DeleteRecentChatIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_DeleteRecentChatIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_DeleteRecentChatIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_DeleteRecentChatIdsResponse.Merge(m, src)
}
func (m *User_DeleteRecentChatIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_DeleteRecentChatIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_DeleteRecentChatIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_DeleteRecentChatIdsResponse proto.InternalMessageInfo

func (*User_DeleteRecentChatIdsResponse) XXX_MessageName() string {
	return "less_service.User.DeleteRecentChatIdsResponse"
}

// 黑名单列表, 因为黑名单需要一开始就获取，所以从friend里移到这里，不用解锁就能获取
type User_GetBlackListRequest struct {
}

func (m *User_GetBlackListRequest) Reset()      { *m = User_GetBlackListRequest{} }
func (*User_GetBlackListRequest) ProtoMessage() {}
func (*User_GetBlackListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 25}
}
func (m *User_GetBlackListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetBlackListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetBlackListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetBlackListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetBlackListRequest.Merge(m, src)
}
func (m *User_GetBlackListRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetBlackListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetBlackListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetBlackListRequest proto.InternalMessageInfo

func (*User_GetBlackListRequest) XXX_MessageName() string {
	return "less_service.User.GetBlackListRequest"
}

type User_GetBlackListResponse struct {
	Blacklist []*models.BlackListInfo `protobuf:"bytes,1,rep,name=blacklist,proto3" json:"blacklist,omitempty"`
}

func (m *User_GetBlackListResponse) Reset()      { *m = User_GetBlackListResponse{} }
func (*User_GetBlackListResponse) ProtoMessage() {}
func (*User_GetBlackListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 26}
}
func (m *User_GetBlackListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetBlackListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetBlackListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetBlackListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetBlackListResponse.Merge(m, src)
}
func (m *User_GetBlackListResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetBlackListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetBlackListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetBlackListResponse proto.InternalMessageInfo

func (m *User_GetBlackListResponse) GetBlacklist() []*models.BlackListInfo {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

func (*User_GetBlackListResponse) XXX_MessageName() string {
	return "less_service.User.GetBlackListResponse"
}

// 升一级
type User_LevelUpgradeRequest struct {
}

func (m *User_LevelUpgradeRequest) Reset()      { *m = User_LevelUpgradeRequest{} }
func (*User_LevelUpgradeRequest) ProtoMessage() {}
func (*User_LevelUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 27}
}
func (m *User_LevelUpgradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_LevelUpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_LevelUpgradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_LevelUpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_LevelUpgradeRequest.Merge(m, src)
}
func (m *User_LevelUpgradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_LevelUpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_LevelUpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_LevelUpgradeRequest proto.InternalMessageInfo

func (*User_LevelUpgradeRequest) XXX_MessageName() string {
	return "less_service.User.LevelUpgradeRequest"
}

type User_LevelUpgradeResponse struct {
	Level      int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	LevelIndex int64 `protobuf:"varint,2,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
}

func (m *User_LevelUpgradeResponse) Reset()      { *m = User_LevelUpgradeResponse{} }
func (*User_LevelUpgradeResponse) ProtoMessage() {}
func (*User_LevelUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 28}
}
func (m *User_LevelUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_LevelUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_LevelUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_LevelUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_LevelUpgradeResponse.Merge(m, src)
}
func (m *User_LevelUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_LevelUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_LevelUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_LevelUpgradeResponse proto.InternalMessageInfo

func (m *User_LevelUpgradeResponse) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User_LevelUpgradeResponse) GetLevelIndex() int64 {
	if m != nil {
		return m.LevelIndex
	}
	return 0
}

func (*User_LevelUpgradeResponse) XXX_MessageName() string {
	return "less_service.User.LevelUpgradeResponse"
}

// 获取使用道具立即获得对应时间的挂机经验收益信息
type User_GetUseHangUpExpItemInfoRequest struct {
}

func (m *User_GetUseHangUpExpItemInfoRequest) Reset()      { *m = User_GetUseHangUpExpItemInfoRequest{} }
func (*User_GetUseHangUpExpItemInfoRequest) ProtoMessage() {}
func (*User_GetUseHangUpExpItemInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 29}
}
func (m *User_GetUseHangUpExpItemInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetUseHangUpExpItemInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetUseHangUpExpItemInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetUseHangUpExpItemInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetUseHangUpExpItemInfoRequest.Merge(m, src)
}
func (m *User_GetUseHangUpExpItemInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetUseHangUpExpItemInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetUseHangUpExpItemInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetUseHangUpExpItemInfoRequest proto.InternalMessageInfo

func (*User_GetUseHangUpExpItemInfoRequest) XXX_MessageName() string {
	return "less_service.User.GetUseHangUpExpItemInfoRequest"
}

type User_GetUseHangUpExpItemInfoResponse struct {
	TotalDuration int64           `protobuf:"varint,1,opt,name=total_duration,json=totalDuration,proto3" json:"total_duration,omitempty"`
	Rate          int64           `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
	RateDuration  map[int64]int64 `protobuf:"bytes,3,rep,name=rate_duration,json=rateDuration,proto3" json:"rate_duration,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UseCount      int64           `protobuf:"varint,4,opt,name=use_count,json=useCount,proto3" json:"use_count,omitempty"`
}

func (m *User_GetUseHangUpExpItemInfoResponse) Reset()      { *m = User_GetUseHangUpExpItemInfoResponse{} }
func (*User_GetUseHangUpExpItemInfoResponse) ProtoMessage() {}
func (*User_GetUseHangUpExpItemInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 30}
}
func (m *User_GetUseHangUpExpItemInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetUseHangUpExpItemInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetUseHangUpExpItemInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetUseHangUpExpItemInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetUseHangUpExpItemInfoResponse.Merge(m, src)
}
func (m *User_GetUseHangUpExpItemInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetUseHangUpExpItemInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetUseHangUpExpItemInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetUseHangUpExpItemInfoResponse proto.InternalMessageInfo

func (m *User_GetUseHangUpExpItemInfoResponse) GetTotalDuration() int64 {
	if m != nil {
		return m.TotalDuration
	}
	return 0
}

func (m *User_GetUseHangUpExpItemInfoResponse) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *User_GetUseHangUpExpItemInfoResponse) GetRateDuration() map[int64]int64 {
	if m != nil {
		return m.RateDuration
	}
	return nil
}

func (m *User_GetUseHangUpExpItemInfoResponse) GetUseCount() int64 {
	if m != nil {
		return m.UseCount
	}
	return 0
}

func (*User_GetUseHangUpExpItemInfoResponse) XXX_MessageName() string {
	return "less_service.User.GetUseHangUpExpItemInfoResponse"
}

// 使用道具立即获得对应时间的挂机经验收益
type User_UseHangUpExpItemRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (m *User_UseHangUpExpItemRequest) Reset()      { *m = User_UseHangUpExpItemRequest{} }
func (*User_UseHangUpExpItemRequest) ProtoMessage() {}
func (*User_UseHangUpExpItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 31}
}
func (m *User_UseHangUpExpItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UseHangUpExpItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UseHangUpExpItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UseHangUpExpItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UseHangUpExpItemRequest.Merge(m, src)
}
func (m *User_UseHangUpExpItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_UseHangUpExpItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UseHangUpExpItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_UseHangUpExpItemRequest proto.InternalMessageInfo

func (m *User_UseHangUpExpItemRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (*User_UseHangUpExpItemRequest) XXX_MessageName() string {
	return "less_service.User.UseHangUpExpItemRequest"
}

type User_UseHangUpExpItemResponse struct {
	TotalDuration int64           `protobuf:"varint,1,opt,name=total_duration,json=totalDuration,proto3" json:"total_duration,omitempty"`
	Rate          int64           `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
	RateDuration  map[int64]int64 `protobuf:"bytes,3,rep,name=rate_duration,json=rateDuration,proto3" json:"rate_duration,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UseCount      int64           `protobuf:"varint,4,opt,name=use_count,json=useCount,proto3" json:"use_count,omitempty"`
	Exp           map[int64]int64 `protobuf:"bytes,5,rep,name=exp,proto3" json:"exp,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *User_UseHangUpExpItemResponse) Reset()      { *m = User_UseHangUpExpItemResponse{} }
func (*User_UseHangUpExpItemResponse) ProtoMessage() {}
func (*User_UseHangUpExpItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 32}
}
func (m *User_UseHangUpExpItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UseHangUpExpItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UseHangUpExpItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UseHangUpExpItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UseHangUpExpItemResponse.Merge(m, src)
}
func (m *User_UseHangUpExpItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_UseHangUpExpItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UseHangUpExpItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_UseHangUpExpItemResponse proto.InternalMessageInfo

func (m *User_UseHangUpExpItemResponse) GetTotalDuration() int64 {
	if m != nil {
		return m.TotalDuration
	}
	return 0
}

func (m *User_UseHangUpExpItemResponse) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *User_UseHangUpExpItemResponse) GetRateDuration() map[int64]int64 {
	if m != nil {
		return m.RateDuration
	}
	return nil
}

func (m *User_UseHangUpExpItemResponse) GetUseCount() int64 {
	if m != nil {
		return m.UseCount
	}
	return 0
}

func (m *User_UseHangUpExpItemResponse) GetExp() map[int64]int64 {
	if m != nil {
		return m.Exp
	}
	return nil
}

func (*User_UseHangUpExpItemResponse) XXX_MessageName() string {
	return "less_service.User.UseHangUpExpItemResponse"
}

// 升多级（长按连续升级）
type User_LevelUpgradeManyRequest struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *User_LevelUpgradeManyRequest) Reset()      { *m = User_LevelUpgradeManyRequest{} }
func (*User_LevelUpgradeManyRequest) ProtoMessage() {}
func (*User_LevelUpgradeManyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 33}
}
func (m *User_LevelUpgradeManyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_LevelUpgradeManyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_LevelUpgradeManyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_LevelUpgradeManyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_LevelUpgradeManyRequest.Merge(m, src)
}
func (m *User_LevelUpgradeManyRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_LevelUpgradeManyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_LevelUpgradeManyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_LevelUpgradeManyRequest proto.InternalMessageInfo

func (m *User_LevelUpgradeManyRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*User_LevelUpgradeManyRequest) XXX_MessageName() string {
	return "less_service.User.LevelUpgradeManyRequest"
}

type User_LevelUpgradeManyResponse struct {
	Level      int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	LevelIndex int64 `protobuf:"varint,2,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
}

func (m *User_LevelUpgradeManyResponse) Reset()      { *m = User_LevelUpgradeManyResponse{} }
func (*User_LevelUpgradeManyResponse) ProtoMessage() {}
func (*User_LevelUpgradeManyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 34}
}
func (m *User_LevelUpgradeManyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_LevelUpgradeManyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_LevelUpgradeManyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_LevelUpgradeManyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_LevelUpgradeManyResponse.Merge(m, src)
}
func (m *User_LevelUpgradeManyResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_LevelUpgradeManyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_LevelUpgradeManyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_LevelUpgradeManyResponse proto.InternalMessageInfo

func (m *User_LevelUpgradeManyResponse) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User_LevelUpgradeManyResponse) GetLevelIndex() int64 {
	if m != nil {
		return m.LevelIndex
	}
	return 0
}

func (*User_LevelUpgradeManyResponse) XXX_MessageName() string {
	return "less_service.User.LevelUpgradeManyResponse"
}

// 获取主角突破信息
type User_AdvanceInfoRequest struct {
}

func (m *User_AdvanceInfoRequest) Reset()      { *m = User_AdvanceInfoRequest{} }
func (*User_AdvanceInfoRequest) ProtoMessage() {}
func (*User_AdvanceInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 35}
}
func (m *User_AdvanceInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceInfoRequest.Merge(m, src)
}
func (m *User_AdvanceInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceInfoRequest proto.InternalMessageInfo

func (*User_AdvanceInfoRequest) XXX_MessageName() string {
	return "less_service.User.AdvanceInfoRequest"
}

type User_AdvanceInfoResponse struct {
	IsOpen        bool    `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	BuffId        []int64 `protobuf:"varint,2,rep,packed,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	Overlay       int64   `protobuf:"varint,3,opt,name=overlay,proto3" json:"overlay,omitempty"`
	ChallengeTime int64   `protobuf:"varint,4,opt,name=challenge_time,json=challengeTime,proto3" json:"challenge_time,omitempty"`
	// 下面这2个参数暂时为了兼容客户端，等客户端修改后删除
	CanAdvance    bool `protobuf:"varint,5,opt,name=can_advance,json=canAdvance,proto3" json:"can_advance,omitempty"`
	ChallengeCost bool `protobuf:"varint,6,opt,name=challenge_cost,json=challengeCost,proto3" json:"challenge_cost,omitempty"`
}

func (m *User_AdvanceInfoResponse) Reset()      { *m = User_AdvanceInfoResponse{} }
func (*User_AdvanceInfoResponse) ProtoMessage() {}
func (*User_AdvanceInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 36}
}
func (m *User_AdvanceInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceInfoResponse.Merge(m, src)
}
func (m *User_AdvanceInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceInfoResponse proto.InternalMessageInfo

func (m *User_AdvanceInfoResponse) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (m *User_AdvanceInfoResponse) GetBuffId() []int64 {
	if m != nil {
		return m.BuffId
	}
	return nil
}

func (m *User_AdvanceInfoResponse) GetOverlay() int64 {
	if m != nil {
		return m.Overlay
	}
	return 0
}

func (m *User_AdvanceInfoResponse) GetChallengeTime() int64 {
	if m != nil {
		return m.ChallengeTime
	}
	return 0
}

func (m *User_AdvanceInfoResponse) GetCanAdvance() bool {
	if m != nil {
		return m.CanAdvance
	}
	return false
}

func (m *User_AdvanceInfoResponse) GetChallengeCost() bool {
	if m != nil {
		return m.ChallengeCost
	}
	return false
}

func (*User_AdvanceInfoResponse) XXX_MessageName() string {
	return "less_service.User.AdvanceInfoResponse"
}

// 开启突破战（扣除突破消耗进入可以挑战boss按钮的界面）
type User_AdvanceOpenRequest struct {
}

func (m *User_AdvanceOpenRequest) Reset()      { *m = User_AdvanceOpenRequest{} }
func (*User_AdvanceOpenRequest) ProtoMessage() {}
func (*User_AdvanceOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 37}
}
func (m *User_AdvanceOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceOpenRequest.Merge(m, src)
}
func (m *User_AdvanceOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceOpenRequest proto.InternalMessageInfo

func (*User_AdvanceOpenRequest) XXX_MessageName() string {
	return "less_service.User.AdvanceOpenRequest"
}

type User_AdvanceOpenResponse struct {
}

func (m *User_AdvanceOpenResponse) Reset()      { *m = User_AdvanceOpenResponse{} }
func (*User_AdvanceOpenResponse) ProtoMessage() {}
func (*User_AdvanceOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 38}
}
func (m *User_AdvanceOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceOpenResponse.Merge(m, src)
}
func (m *User_AdvanceOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceOpenResponse proto.InternalMessageInfo

func (*User_AdvanceOpenResponse) XXX_MessageName() string {
	return "less_service.User.AdvanceOpenResponse"
}

// 突破boss战开始
type User_AdvanceBattleStartRequest struct {
}

func (m *User_AdvanceBattleStartRequest) Reset()      { *m = User_AdvanceBattleStartRequest{} }
func (*User_AdvanceBattleStartRequest) ProtoMessage() {}
func (*User_AdvanceBattleStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 39}
}
func (m *User_AdvanceBattleStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceBattleStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceBattleStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceBattleStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceBattleStartRequest.Merge(m, src)
}
func (m *User_AdvanceBattleStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceBattleStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceBattleStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceBattleStartRequest proto.InternalMessageInfo

func (*User_AdvanceBattleStartRequest) XXX_MessageName() string {
	return "less_service.User.AdvanceBattleStartRequest"
}

type User_AdvanceBattleStartResponse struct {
	MapId    int64                     `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Token    string                    `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	BattleId int64                     `protobuf:"varint,3,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	Sbp      *models.SingleBattleParam `protobuf:"bytes,4,opt,name=sbp,proto3" json:"sbp,omitempty"`
}

func (m *User_AdvanceBattleStartResponse) Reset()      { *m = User_AdvanceBattleStartResponse{} }
func (*User_AdvanceBattleStartResponse) ProtoMessage() {}
func (*User_AdvanceBattleStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 40}
}
func (m *User_AdvanceBattleStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceBattleStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceBattleStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceBattleStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceBattleStartResponse.Merge(m, src)
}
func (m *User_AdvanceBattleStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceBattleStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceBattleStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceBattleStartResponse proto.InternalMessageInfo

func (m *User_AdvanceBattleStartResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *User_AdvanceBattleStartResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *User_AdvanceBattleStartResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *User_AdvanceBattleStartResponse) GetSbp() *models.SingleBattleParam {
	if m != nil {
		return m.Sbp
	}
	return nil
}

func (*User_AdvanceBattleStartResponse) XXX_MessageName() string {
	return "less_service.User.AdvanceBattleStartResponse"
}

// 突破boss胜利
type User_AdvanceBattleVictoryRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *User_AdvanceBattleVictoryRequest) Reset()      { *m = User_AdvanceBattleVictoryRequest{} }
func (*User_AdvanceBattleVictoryRequest) ProtoMessage() {}
func (*User_AdvanceBattleVictoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 41}
}
func (m *User_AdvanceBattleVictoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceBattleVictoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceBattleVictoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceBattleVictoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceBattleVictoryRequest.Merge(m, src)
}
func (m *User_AdvanceBattleVictoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceBattleVictoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceBattleVictoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceBattleVictoryRequest proto.InternalMessageInfo

func (m *User_AdvanceBattleVictoryRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (*User_AdvanceBattleVictoryRequest) XXX_MessageName() string {
	return "less_service.User.AdvanceBattleVictoryRequest"
}

type User_AdvanceBattleVictoryResponse struct {
}

func (m *User_AdvanceBattleVictoryResponse) Reset()      { *m = User_AdvanceBattleVictoryResponse{} }
func (*User_AdvanceBattleVictoryResponse) ProtoMessage() {}
func (*User_AdvanceBattleVictoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 42}
}
func (m *User_AdvanceBattleVictoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceBattleVictoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceBattleVictoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceBattleVictoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceBattleVictoryResponse.Merge(m, src)
}
func (m *User_AdvanceBattleVictoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceBattleVictoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceBattleVictoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceBattleVictoryResponse proto.InternalMessageInfo

func (*User_AdvanceBattleVictoryResponse) XXX_MessageName() string {
	return "less_service.User.AdvanceBattleVictoryResponse"
}

// 突破boss战斗结束
type User_AdvanceBattleFinishRequest struct {
	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Victory bool   `protobuf:"varint,2,opt,name=victory,proto3" json:"victory,omitempty"`
}

func (m *User_AdvanceBattleFinishRequest) Reset()      { *m = User_AdvanceBattleFinishRequest{} }
func (*User_AdvanceBattleFinishRequest) ProtoMessage() {}
func (*User_AdvanceBattleFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 43}
}
func (m *User_AdvanceBattleFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceBattleFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceBattleFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceBattleFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceBattleFinishRequest.Merge(m, src)
}
func (m *User_AdvanceBattleFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceBattleFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceBattleFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceBattleFinishRequest proto.InternalMessageInfo

func (m *User_AdvanceBattleFinishRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *User_AdvanceBattleFinishRequest) GetVictory() bool {
	if m != nil {
		return m.Victory
	}
	return false
}

func (*User_AdvanceBattleFinishRequest) XXX_MessageName() string {
	return "less_service.User.AdvanceBattleFinishRequest"
}

type User_AdvanceBattleFinishResponse struct {
}

func (m *User_AdvanceBattleFinishResponse) Reset()      { *m = User_AdvanceBattleFinishResponse{} }
func (*User_AdvanceBattleFinishResponse) ProtoMessage() {}
func (*User_AdvanceBattleFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 44}
}
func (m *User_AdvanceBattleFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceBattleFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceBattleFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceBattleFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceBattleFinishResponse.Merge(m, src)
}
func (m *User_AdvanceBattleFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceBattleFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceBattleFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceBattleFinishResponse proto.InternalMessageInfo

func (*User_AdvanceBattleFinishResponse) XXX_MessageName() string {
	return "less_service.User.AdvanceBattleFinishResponse"
}

// 使用道具削减挑战boss cd
type User_AdvanceUseItemRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (m *User_AdvanceUseItemRequest) Reset()      { *m = User_AdvanceUseItemRequest{} }
func (*User_AdvanceUseItemRequest) ProtoMessage() {}
func (*User_AdvanceUseItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 45}
}
func (m *User_AdvanceUseItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceUseItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceUseItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceUseItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceUseItemRequest.Merge(m, src)
}
func (m *User_AdvanceUseItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceUseItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceUseItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceUseItemRequest proto.InternalMessageInfo

func (m *User_AdvanceUseItemRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (*User_AdvanceUseItemRequest) XXX_MessageName() string {
	return "less_service.User.AdvanceUseItemRequest"
}

type User_AdvanceUseItemResponse struct {
	ChallengeTime int64 `protobuf:"varint,4,opt,name=challenge_time,json=challengeTime,proto3" json:"challenge_time,omitempty"`
}

func (m *User_AdvanceUseItemResponse) Reset()      { *m = User_AdvanceUseItemResponse{} }
func (*User_AdvanceUseItemResponse) ProtoMessage() {}
func (*User_AdvanceUseItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 46}
}
func (m *User_AdvanceUseItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceUseItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceUseItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceUseItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceUseItemResponse.Merge(m, src)
}
func (m *User_AdvanceUseItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceUseItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceUseItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceUseItemResponse proto.InternalMessageInfo

func (m *User_AdvanceUseItemResponse) GetChallengeTime() int64 {
	if m != nil {
		return m.ChallengeTime
	}
	return 0
}

func (*User_AdvanceUseItemResponse) XXX_MessageName() string {
	return "less_service.User.AdvanceUseItemResponse"
}

// 获得推荐好友
type User_RecommendFriendRequest struct {
	Language int64 `protobuf:"varint,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (m *User_RecommendFriendRequest) Reset()      { *m = User_RecommendFriendRequest{} }
func (*User_RecommendFriendRequest) ProtoMessage() {}
func (*User_RecommendFriendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 47}
}
func (m *User_RecommendFriendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_RecommendFriendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_RecommendFriendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_RecommendFriendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_RecommendFriendRequest.Merge(m, src)
}
func (m *User_RecommendFriendRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_RecommendFriendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_RecommendFriendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_RecommendFriendRequest proto.InternalMessageInfo

func (m *User_RecommendFriendRequest) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (*User_RecommendFriendRequest) XXX_MessageName() string {
	return "less_service.User.RecommendFriendRequest"
}

type User_RecommendFriendResponse struct {
	Roles []*models.Role `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (m *User_RecommendFriendResponse) Reset()      { *m = User_RecommendFriendResponse{} }
func (*User_RecommendFriendResponse) ProtoMessage() {}
func (*User_RecommendFriendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 48}
}
func (m *User_RecommendFriendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_RecommendFriendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_RecommendFriendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_RecommendFriendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_RecommendFriendResponse.Merge(m, src)
}
func (m *User_RecommendFriendResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_RecommendFriendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_RecommendFriendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_RecommendFriendResponse proto.InternalMessageInfo

func (m *User_RecommendFriendResponse) GetRoles() []*models.Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (*User_RecommendFriendResponse) XXX_MessageName() string {
	return "less_service.User.RecommendFriendResponse"
}

// 获取红点
type User_GetReadPointRequest struct {
}

func (m *User_GetReadPointRequest) Reset()      { *m = User_GetReadPointRequest{} }
func (*User_GetReadPointRequest) ProtoMessage() {}
func (*User_GetReadPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 49}
}
func (m *User_GetReadPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetReadPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetReadPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetReadPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetReadPointRequest.Merge(m, src)
}
func (m *User_GetReadPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetReadPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetReadPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetReadPointRequest proto.InternalMessageInfo

func (*User_GetReadPointRequest) XXX_MessageName() string {
	return "less_service.User.GetReadPointRequest"
}

type User_GetReadPointResponse struct {
	RedPoints map[string]int64 `protobuf:"bytes,1,rep,name=red_points,json=redPoints,proto3" json:"red_points,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *User_GetReadPointResponse) Reset()      { *m = User_GetReadPointResponse{} }
func (*User_GetReadPointResponse) ProtoMessage() {}
func (*User_GetReadPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 50}
}
func (m *User_GetReadPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetReadPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetReadPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetReadPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetReadPointResponse.Merge(m, src)
}
func (m *User_GetReadPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetReadPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetReadPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetReadPointResponse proto.InternalMessageInfo

func (m *User_GetReadPointResponse) GetRedPoints() map[string]int64 {
	if m != nil {
		return m.RedPoints
	}
	return nil
}

func (*User_GetReadPointResponse) XXX_MessageName() string {
	return "less_service.User.GetReadPointResponse"
}

// 红点增加数量
type User_AddReadPointRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Cnt int64  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (m *User_AddReadPointRequest) Reset()      { *m = User_AddReadPointRequest{} }
func (*User_AddReadPointRequest) ProtoMessage() {}
func (*User_AddReadPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 51}
}
func (m *User_AddReadPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AddReadPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AddReadPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AddReadPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AddReadPointRequest.Merge(m, src)
}
func (m *User_AddReadPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_AddReadPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AddReadPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_AddReadPointRequest proto.InternalMessageInfo

func (m *User_AddReadPointRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *User_AddReadPointRequest) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (*User_AddReadPointRequest) XXX_MessageName() string {
	return "less_service.User.AddReadPointRequest"
}

type User_AddReadPointResponse struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Cnt int64  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (m *User_AddReadPointResponse) Reset()      { *m = User_AddReadPointResponse{} }
func (*User_AddReadPointResponse) ProtoMessage() {}
func (*User_AddReadPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 52}
}
func (m *User_AddReadPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AddReadPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AddReadPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AddReadPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AddReadPointResponse.Merge(m, src)
}
func (m *User_AddReadPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_AddReadPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AddReadPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_AddReadPointResponse proto.InternalMessageInfo

func (m *User_AddReadPointResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *User_AddReadPointResponse) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (*User_AddReadPointResponse) XXX_MessageName() string {
	return "less_service.User.AddReadPointResponse"
}

// 红点设置数量
type User_SetReadPointRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Cnt int64  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (m *User_SetReadPointRequest) Reset()      { *m = User_SetReadPointRequest{} }
func (*User_SetReadPointRequest) ProtoMessage() {}
func (*User_SetReadPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 53}
}
func (m *User_SetReadPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetReadPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetReadPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetReadPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetReadPointRequest.Merge(m, src)
}
func (m *User_SetReadPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_SetReadPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetReadPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetReadPointRequest proto.InternalMessageInfo

func (m *User_SetReadPointRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *User_SetReadPointRequest) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (*User_SetReadPointRequest) XXX_MessageName() string {
	return "less_service.User.SetReadPointRequest"
}

type User_SetReadPointResponse struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Cnt int64  `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (m *User_SetReadPointResponse) Reset()      { *m = User_SetReadPointResponse{} }
func (*User_SetReadPointResponse) ProtoMessage() {}
func (*User_SetReadPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 54}
}
func (m *User_SetReadPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetReadPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetReadPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetReadPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetReadPointResponse.Merge(m, src)
}
func (m *User_SetReadPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_SetReadPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetReadPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetReadPointResponse proto.InternalMessageInfo

func (m *User_SetReadPointResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *User_SetReadPointResponse) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (*User_SetReadPointResponse) XXX_MessageName() string {
	return "less_service.User.SetReadPointResponse"
}

type User_GetSimpleRolesRequest struct {
	RoleIds []string `protobuf:"bytes,1,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (m *User_GetSimpleRolesRequest) Reset()      { *m = User_GetSimpleRolesRequest{} }
func (*User_GetSimpleRolesRequest) ProtoMessage() {}
func (*User_GetSimpleRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 55}
}
func (m *User_GetSimpleRolesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetSimpleRolesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetSimpleRolesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetSimpleRolesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetSimpleRolesRequest.Merge(m, src)
}
func (m *User_GetSimpleRolesRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetSimpleRolesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetSimpleRolesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetSimpleRolesRequest proto.InternalMessageInfo

func (m *User_GetSimpleRolesRequest) GetRoleIds() []string {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

func (*User_GetSimpleRolesRequest) XXX_MessageName() string {
	return "less_service.User.GetSimpleRolesRequest"
}

type User_GetSimpleRolesResponse struct {
	Roles []*models.RoleSimple `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (m *User_GetSimpleRolesResponse) Reset()      { *m = User_GetSimpleRolesResponse{} }
func (*User_GetSimpleRolesResponse) ProtoMessage() {}
func (*User_GetSimpleRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 56}
}
func (m *User_GetSimpleRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetSimpleRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetSimpleRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetSimpleRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetSimpleRolesResponse.Merge(m, src)
}
func (m *User_GetSimpleRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetSimpleRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetSimpleRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetSimpleRolesResponse proto.InternalMessageInfo

func (m *User_GetSimpleRolesResponse) GetRoles() []*models.RoleSimple {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (*User_GetSimpleRolesResponse) XXX_MessageName() string {
	return "less_service.User.GetSimpleRolesResponse"
}

type User_GetUserSimpleInfoRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *User_GetUserSimpleInfoRequest) Reset()      { *m = User_GetUserSimpleInfoRequest{} }
func (*User_GetUserSimpleInfoRequest) ProtoMessage() {}
func (*User_GetUserSimpleInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 57}
}
func (m *User_GetUserSimpleInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetUserSimpleInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetUserSimpleInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetUserSimpleInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetUserSimpleInfoRequest.Merge(m, src)
}
func (m *User_GetUserSimpleInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetUserSimpleInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetUserSimpleInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetUserSimpleInfoRequest proto.InternalMessageInfo

func (m *User_GetUserSimpleInfoRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*User_GetUserSimpleInfoRequest) XXX_MessageName() string {
	return "less_service.User.GetUserSimpleInfoRequest"
}

type User_GetUserSimpleInfoResponse struct {
	Info *models.UserSimpleInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *User_GetUserSimpleInfoResponse) Reset()      { *m = User_GetUserSimpleInfoResponse{} }
func (*User_GetUserSimpleInfoResponse) ProtoMessage() {}
func (*User_GetUserSimpleInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 58}
}
func (m *User_GetUserSimpleInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetUserSimpleInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetUserSimpleInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetUserSimpleInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetUserSimpleInfoResponse.Merge(m, src)
}
func (m *User_GetUserSimpleInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetUserSimpleInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetUserSimpleInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetUserSimpleInfoResponse proto.InternalMessageInfo

func (m *User_GetUserSimpleInfoResponse) GetInfo() *models.UserSimpleInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*User_GetUserSimpleInfoResponse) XXX_MessageName() string {
	return "less_service.User.GetUserSimpleInfoResponse"
}

// 获取玩家战力详情（用于战力对比）返回自己和目标玩家的数据
type User_GetUserCombatValueDetailsRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *User_GetUserCombatValueDetailsRequest) Reset()      { *m = User_GetUserCombatValueDetailsRequest{} }
func (*User_GetUserCombatValueDetailsRequest) ProtoMessage() {}
func (*User_GetUserCombatValueDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 59}
}
func (m *User_GetUserCombatValueDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetUserCombatValueDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetUserCombatValueDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetUserCombatValueDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetUserCombatValueDetailsRequest.Merge(m, src)
}
func (m *User_GetUserCombatValueDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetUserCombatValueDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetUserCombatValueDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetUserCombatValueDetailsRequest proto.InternalMessageInfo

func (m *User_GetUserCombatValueDetailsRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*User_GetUserCombatValueDetailsRequest) XXX_MessageName() string {
	return "less_service.User.GetUserCombatValueDetailsRequest"
}

type User_GetUserCombatValueDetailsResponse struct {
	Self   map[int64]int64 `protobuf:"bytes,1,rep,name=self,proto3" json:"self,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Target map[int64]int64 `protobuf:"bytes,2,rep,name=target,proto3" json:"target,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *User_GetUserCombatValueDetailsResponse) Reset() {
	*m = User_GetUserCombatValueDetailsResponse{}
}
func (*User_GetUserCombatValueDetailsResponse) ProtoMessage() {}
func (*User_GetUserCombatValueDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 60}
}
func (m *User_GetUserCombatValueDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetUserCombatValueDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetUserCombatValueDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetUserCombatValueDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetUserCombatValueDetailsResponse.Merge(m, src)
}
func (m *User_GetUserCombatValueDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetUserCombatValueDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetUserCombatValueDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetUserCombatValueDetailsResponse proto.InternalMessageInfo

func (m *User_GetUserCombatValueDetailsResponse) GetSelf() map[int64]int64 {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *User_GetUserCombatValueDetailsResponse) GetTarget() map[int64]int64 {
	if m != nil {
		return m.Target
	}
	return nil
}

func (*User_GetUserCombatValueDetailsResponse) XXX_MessageName() string {
	return "less_service.User.GetUserCombatValueDetailsResponse"
}

// 设置单机战斗的速度
type User_SetBattleSpeedRequest struct {
	Speed int64 `protobuf:"varint,1,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (m *User_SetBattleSpeedRequest) Reset()      { *m = User_SetBattleSpeedRequest{} }
func (*User_SetBattleSpeedRequest) ProtoMessage() {}
func (*User_SetBattleSpeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 61}
}
func (m *User_SetBattleSpeedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetBattleSpeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetBattleSpeedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetBattleSpeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetBattleSpeedRequest.Merge(m, src)
}
func (m *User_SetBattleSpeedRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_SetBattleSpeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetBattleSpeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetBattleSpeedRequest proto.InternalMessageInfo

func (m *User_SetBattleSpeedRequest) GetSpeed() int64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (*User_SetBattleSpeedRequest) XXX_MessageName() string {
	return "less_service.User.SetBattleSpeedRequest"
}

type User_SetBattleSpeedResponse struct {
}

func (m *User_SetBattleSpeedResponse) Reset()      { *m = User_SetBattleSpeedResponse{} }
func (*User_SetBattleSpeedResponse) ProtoMessage() {}
func (*User_SetBattleSpeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 62}
}
func (m *User_SetBattleSpeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetBattleSpeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetBattleSpeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetBattleSpeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetBattleSpeedResponse.Merge(m, src)
}
func (m *User_SetBattleSpeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_SetBattleSpeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetBattleSpeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetBattleSpeedResponse proto.InternalMessageInfo

func (*User_SetBattleSpeedResponse) XXX_MessageName() string {
	return "less_service.User.SetBattleSpeedResponse"
}

// 红点变化推送
type User_ReadPointChangePush struct {
	RedPoints map[string]int64 `protobuf:"bytes,1,rep,name=red_points,json=redPoints,proto3" json:"red_points,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *User_ReadPointChangePush) Reset()      { *m = User_ReadPointChangePush{} }
func (*User_ReadPointChangePush) ProtoMessage() {}
func (*User_ReadPointChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 63}
}
func (m *User_ReadPointChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_ReadPointChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_ReadPointChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_ReadPointChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_ReadPointChangePush.Merge(m, src)
}
func (m *User_ReadPointChangePush) XXX_Size() int {
	return m.Size()
}
func (m *User_ReadPointChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_ReadPointChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_User_ReadPointChangePush proto.InternalMessageInfo

func (m *User_ReadPointChangePush) GetRedPoints() map[string]int64 {
	if m != nil {
		return m.RedPoints
	}
	return nil
}

func (*User_ReadPointChangePush) XXX_MessageName() string {
	return "less_service.User.ReadPointChangePush"
}

type User_UserLevelChangePush struct {
	Level          int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	LevelIndex     int64 `protobuf:"varint,2,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
	LevelIncr      int64 `protobuf:"varint,3,opt,name=level_incr,json=levelIncr,proto3" json:"level_incr,omitempty"`
	LevelIndexIncr int64 `protobuf:"varint,4,opt,name=level_index_incr,json=levelIndexIncr,proto3" json:"level_index_incr,omitempty"`
}

func (m *User_UserLevelChangePush) Reset()      { *m = User_UserLevelChangePush{} }
func (*User_UserLevelChangePush) ProtoMessage() {}
func (*User_UserLevelChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 64}
}
func (m *User_UserLevelChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UserLevelChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UserLevelChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UserLevelChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UserLevelChangePush.Merge(m, src)
}
func (m *User_UserLevelChangePush) XXX_Size() int {
	return m.Size()
}
func (m *User_UserLevelChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UserLevelChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_User_UserLevelChangePush proto.InternalMessageInfo

func (m *User_UserLevelChangePush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User_UserLevelChangePush) GetLevelIndex() int64 {
	if m != nil {
		return m.LevelIndex
	}
	return 0
}

func (m *User_UserLevelChangePush) GetLevelIncr() int64 {
	if m != nil {
		return m.LevelIncr
	}
	return 0
}

func (m *User_UserLevelChangePush) GetLevelIndexIncr() int64 {
	if m != nil {
		return m.LevelIndexIncr
	}
	return 0
}

func (*User_UserLevelChangePush) XXX_MessageName() string {
	return "less_service.User.UserLevelChangePush"
}

// 是否可以通过挂机获得经验
type User_UserCanGetExpFromHangPush struct {
	Can bool `protobuf:"varint,1,opt,name=can,proto3" json:"can,omitempty"`
}

func (m *User_UserCanGetExpFromHangPush) Reset()      { *m = User_UserCanGetExpFromHangPush{} }
func (*User_UserCanGetExpFromHangPush) ProtoMessage() {}
func (*User_UserCanGetExpFromHangPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 65}
}
func (m *User_UserCanGetExpFromHangPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UserCanGetExpFromHangPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UserCanGetExpFromHangPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UserCanGetExpFromHangPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UserCanGetExpFromHangPush.Merge(m, src)
}
func (m *User_UserCanGetExpFromHangPush) XXX_Size() int {
	return m.Size()
}
func (m *User_UserCanGetExpFromHangPush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UserCanGetExpFromHangPush.DiscardUnknown(m)
}

var xxx_messageInfo_User_UserCanGetExpFromHangPush proto.InternalMessageInfo

func (m *User_UserCanGetExpFromHangPush) GetCan() bool {
	if m != nil {
		return m.Can
	}
	return false
}

func (*User_UserCanGetExpFromHangPush) XXX_MessageName() string {
	return "less_service.User.UserCanGetExpFromHangPush"
}

// 获得 头像&头像框 推送
type User_GotAvatarPush struct {
	Avatar *models.Avatar `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
	ItemId int64          `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (m *User_GotAvatarPush) Reset()      { *m = User_GotAvatarPush{} }
func (*User_GotAvatarPush) ProtoMessage() {}
func (*User_GotAvatarPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 66}
}
func (m *User_GotAvatarPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GotAvatarPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GotAvatarPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GotAvatarPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GotAvatarPush.Merge(m, src)
}
func (m *User_GotAvatarPush) XXX_Size() int {
	return m.Size()
}
func (m *User_GotAvatarPush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GotAvatarPush.DiscardUnknown(m)
}

var xxx_messageInfo_User_GotAvatarPush proto.InternalMessageInfo

func (m *User_GotAvatarPush) GetAvatar() *models.Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *User_GotAvatarPush) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (*User_GotAvatarPush) XXX_MessageName() string {
	return "less_service.User.GotAvatarPush"
}

// 不同用户统计计数推送
type User_UpdateTargetPush struct {
	Typ     int64 `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	Id      int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Count   int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Replace bool  `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (m *User_UpdateTargetPush) Reset()      { *m = User_UpdateTargetPush{} }
func (*User_UpdateTargetPush) ProtoMessage() {}
func (*User_UpdateTargetPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 67}
}
func (m *User_UpdateTargetPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UpdateTargetPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UpdateTargetPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UpdateTargetPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UpdateTargetPush.Merge(m, src)
}
func (m *User_UpdateTargetPush) XXX_Size() int {
	return m.Size()
}
func (m *User_UpdateTargetPush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UpdateTargetPush.DiscardUnknown(m)
}

var xxx_messageInfo_User_UpdateTargetPush proto.InternalMessageInfo

func (m *User_UpdateTargetPush) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *User_UpdateTargetPush) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User_UpdateTargetPush) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *User_UpdateTargetPush) GetReplace() bool {
	if m != nil {
		return m.Replace
	}
	return false
}

func (*User_UpdateTargetPush) XXX_MessageName() string {
	return "less_service.User.UpdateTargetPush"
}

type User_CheatGetRolesRequest struct {
}

func (m *User_CheatGetRolesRequest) Reset()      { *m = User_CheatGetRolesRequest{} }
func (*User_CheatGetRolesRequest) ProtoMessage() {}
func (*User_CheatGetRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 68}
}
func (m *User_CheatGetRolesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatGetRolesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatGetRolesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatGetRolesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatGetRolesRequest.Merge(m, src)
}
func (m *User_CheatGetRolesRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatGetRolesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatGetRolesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatGetRolesRequest proto.InternalMessageInfo

func (*User_CheatGetRolesRequest) XXX_MessageName() string {
	return "less_service.User.CheatGetRolesRequest"
}

type User_CheatGetRolesResponse struct {
	Roles []*models.Role `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (m *User_CheatGetRolesResponse) Reset()      { *m = User_CheatGetRolesResponse{} }
func (*User_CheatGetRolesResponse) ProtoMessage() {}
func (*User_CheatGetRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 69}
}
func (m *User_CheatGetRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatGetRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatGetRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatGetRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatGetRolesResponse.Merge(m, src)
}
func (m *User_CheatGetRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatGetRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatGetRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatGetRolesResponse proto.InternalMessageInfo

func (m *User_CheatGetRolesResponse) GetRoles() []*models.Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (*User_CheatGetRolesResponse) XXX_MessageName() string {
	return "less_service.User.CheatGetRolesResponse"
}

type User_CheatSetLevelRequest struct {
	Level int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *User_CheatSetLevelRequest) Reset()      { *m = User_CheatSetLevelRequest{} }
func (*User_CheatSetLevelRequest) ProtoMessage() {}
func (*User_CheatSetLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 70}
}
func (m *User_CheatSetLevelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatSetLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatSetLevelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatSetLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatSetLevelRequest.Merge(m, src)
}
func (m *User_CheatSetLevelRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatSetLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatSetLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatSetLevelRequest proto.InternalMessageInfo

func (m *User_CheatSetLevelRequest) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (*User_CheatSetLevelRequest) XXX_MessageName() string {
	return "less_service.User.CheatSetLevelRequest"
}

type User_CheatSetLevelResponse struct {
	Level      int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	LevelIndex int64 `protobuf:"varint,2,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
}

func (m *User_CheatSetLevelResponse) Reset()      { *m = User_CheatSetLevelResponse{} }
func (*User_CheatSetLevelResponse) ProtoMessage() {}
func (*User_CheatSetLevelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 71}
}
func (m *User_CheatSetLevelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatSetLevelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatSetLevelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatSetLevelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatSetLevelResponse.Merge(m, src)
}
func (m *User_CheatSetLevelResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatSetLevelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatSetLevelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatSetLevelResponse proto.InternalMessageInfo

func (m *User_CheatSetLevelResponse) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User_CheatSetLevelResponse) GetLevelIndex() int64 {
	if m != nil {
		return m.LevelIndex
	}
	return 0
}

func (*User_CheatSetLevelResponse) XXX_MessageName() string {
	return "less_service.User.CheatSetLevelResponse"
}

// 融魂相关信息重置
type User_CheatResetExpSkipRequest struct {
}

func (m *User_CheatResetExpSkipRequest) Reset()      { *m = User_CheatResetExpSkipRequest{} }
func (*User_CheatResetExpSkipRequest) ProtoMessage() {}
func (*User_CheatResetExpSkipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 72}
}
func (m *User_CheatResetExpSkipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatResetExpSkipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatResetExpSkipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatResetExpSkipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatResetExpSkipRequest.Merge(m, src)
}
func (m *User_CheatResetExpSkipRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatResetExpSkipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatResetExpSkipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatResetExpSkipRequest proto.InternalMessageInfo

func (*User_CheatResetExpSkipRequest) XXX_MessageName() string {
	return "less_service.User.CheatResetExpSkipRequest"
}

type User_CheatResetExpSkipResponse struct {
	TotalDuration int64           `protobuf:"varint,1,opt,name=total_duration,json=totalDuration,proto3" json:"total_duration,omitempty"`
	Rate          int64           `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
	RateDuration  map[int64]int64 `protobuf:"bytes,3,rep,name=rate_duration,json=rateDuration,proto3" json:"rate_duration,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UseCount      int64           `protobuf:"varint,4,opt,name=use_count,json=useCount,proto3" json:"use_count,omitempty"`
}

func (m *User_CheatResetExpSkipResponse) Reset()      { *m = User_CheatResetExpSkipResponse{} }
func (*User_CheatResetExpSkipResponse) ProtoMessage() {}
func (*User_CheatResetExpSkipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 73}
}
func (m *User_CheatResetExpSkipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatResetExpSkipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatResetExpSkipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatResetExpSkipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatResetExpSkipResponse.Merge(m, src)
}
func (m *User_CheatResetExpSkipResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatResetExpSkipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatResetExpSkipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatResetExpSkipResponse proto.InternalMessageInfo

func (m *User_CheatResetExpSkipResponse) GetTotalDuration() int64 {
	if m != nil {
		return m.TotalDuration
	}
	return 0
}

func (m *User_CheatResetExpSkipResponse) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *User_CheatResetExpSkipResponse) GetRateDuration() map[int64]int64 {
	if m != nil {
		return m.RateDuration
	}
	return nil
}

func (m *User_CheatResetExpSkipResponse) GetUseCount() int64 {
	if m != nil {
		return m.UseCount
	}
	return 0
}

func (*User_CheatResetExpSkipResponse) XXX_MessageName() string {
	return "less_service.User.CheatResetExpSkipResponse"
}

// 作弊推送消息到手机
type User_CheatPushToMobileRequest struct {
	IggId   string `protobuf:"bytes,1,opt,name=igg_id,json=iggId,proto3" json:"igg_id,omitempty"`
	GameId  int64  `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Context string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *User_CheatPushToMobileRequest) Reset()      { *m = User_CheatPushToMobileRequest{} }
func (*User_CheatPushToMobileRequest) ProtoMessage() {}
func (*User_CheatPushToMobileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 74}
}
func (m *User_CheatPushToMobileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatPushToMobileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatPushToMobileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatPushToMobileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatPushToMobileRequest.Merge(m, src)
}
func (m *User_CheatPushToMobileRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatPushToMobileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatPushToMobileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatPushToMobileRequest proto.InternalMessageInfo

func (m *User_CheatPushToMobileRequest) GetIggId() string {
	if m != nil {
		return m.IggId
	}
	return ""
}

func (m *User_CheatPushToMobileRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *User_CheatPushToMobileRequest) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (*User_CheatPushToMobileRequest) XXX_MessageName() string {
	return "less_service.User.CheatPushToMobileRequest"
}

type User_CheatPushToMobileResponse struct {
}

func (m *User_CheatPushToMobileResponse) Reset()      { *m = User_CheatPushToMobileResponse{} }
func (*User_CheatPushToMobileResponse) ProtoMessage() {}
func (*User_CheatPushToMobileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 75}
}
func (m *User_CheatPushToMobileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatPushToMobileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatPushToMobileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatPushToMobileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatPushToMobileResponse.Merge(m, src)
}
func (m *User_CheatPushToMobileResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatPushToMobileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatPushToMobileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatPushToMobileResponse proto.InternalMessageInfo

func (*User_CheatPushToMobileResponse) XXX_MessageName() string {
	return "less_service.User.CheatPushToMobileResponse"
}

// 向前修改玩家注册天数
type User_CheatAheadRegisterDayRequest struct {
	Day int64 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *User_CheatAheadRegisterDayRequest) Reset()      { *m = User_CheatAheadRegisterDayRequest{} }
func (*User_CheatAheadRegisterDayRequest) ProtoMessage() {}
func (*User_CheatAheadRegisterDayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 76}
}
func (m *User_CheatAheadRegisterDayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatAheadRegisterDayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatAheadRegisterDayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatAheadRegisterDayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatAheadRegisterDayRequest.Merge(m, src)
}
func (m *User_CheatAheadRegisterDayRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatAheadRegisterDayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatAheadRegisterDayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatAheadRegisterDayRequest proto.InternalMessageInfo

func (m *User_CheatAheadRegisterDayRequest) GetDay() int64 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (*User_CheatAheadRegisterDayRequest) XXX_MessageName() string {
	return "less_service.User.CheatAheadRegisterDayRequest"
}

type User_CheatAheadRegisterDayResponse struct {
}

func (m *User_CheatAheadRegisterDayResponse) Reset()      { *m = User_CheatAheadRegisterDayResponse{} }
func (*User_CheatAheadRegisterDayResponse) ProtoMessage() {}
func (*User_CheatAheadRegisterDayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90c0c1d3cfb95274, []int{0, 77}
}
func (m *User_CheatAheadRegisterDayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatAheadRegisterDayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatAheadRegisterDayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatAheadRegisterDayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatAheadRegisterDayResponse.Merge(m, src)
}
func (m *User_CheatAheadRegisterDayResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatAheadRegisterDayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatAheadRegisterDayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatAheadRegisterDayResponse proto.InternalMessageInfo

func (*User_CheatAheadRegisterDayResponse) XXX_MessageName() string {
	return "less_service.User.CheatAheadRegisterDayResponse"
}
func init() {
	proto.RegisterEnum("less_service.UserErrorCode", UserErrorCode_name, UserErrorCode_value)
	proto.RegisterType((*User)(nil), "less_service.User")
	proto.RegisterType((*User_RoleLoginRequest)(nil), "less_service.User.RoleLoginRequest")
	proto.RegisterType((*User_RoleLoginResponse)(nil), "less_service.User.RoleLoginResponse")
	proto.RegisterType((*User_RoleLogoutPush)(nil), "less_service.User.RoleLogoutPush")
	proto.RegisterType((*User_GetRoleRequest)(nil), "less_service.User.GetRoleRequest")
	proto.RegisterType((*User_GetRoleResponse)(nil), "less_service.User.GetRoleResponse")
	proto.RegisterType((*User_SearchRoleRequest)(nil), "less_service.User.SearchRoleRequest")
	proto.RegisterType((*User_SearchRoleResponse)(nil), "less_service.User.SearchRoleResponse")
	proto.RegisterType((*User_SetAvatarRequest)(nil), "less_service.User.SetAvatarRequest")
	proto.RegisterType((*User_SetAvatarResponse)(nil), "less_service.User.SetAvatarResponse")
	proto.RegisterType((*User_SetAvatarFrameRequest)(nil), "less_service.User.SetAvatarFrameRequest")
	proto.RegisterType((*User_SetAvatarFrameResponse)(nil), "less_service.User.SetAvatarFrameResponse")
	proto.RegisterType((*User_ChangeNicknameRequest)(nil), "less_service.User.ChangeNicknameRequest")
	proto.RegisterType((*User_ChangeNicknameResponse)(nil), "less_service.User.ChangeNicknameResponse")
	proto.RegisterType((*User_GetOwnAvatarRequest)(nil), "less_service.User.GetOwnAvatarRequest")
	proto.RegisterType((*User_GetOwnAvatarResponse)(nil), "less_service.User.GetOwnAvatarResponse")
	proto.RegisterMapType((map[int64]*models.Avatar)(nil), "less_service.User.GetOwnAvatarResponse.OwnAvatarEntry")
	proto.RegisterType((*User_ChangeLanguageRequest)(nil), "less_service.User.ChangeLanguageRequest")
	proto.RegisterType((*User_ChangeLanguageResponse)(nil), "less_service.User.ChangeLanguageResponse")
	proto.RegisterType((*User_PowerChangePush)(nil), "less_service.User.PowerChangePush")
	proto.RegisterType((*User_ChangeBattleMapEvent)(nil), "less_service.User.ChangeBattleMapEvent")
	proto.RegisterType((*User_GetRecentChatIdsRequest)(nil), "less_service.User.GetRecentChatIdsRequest")
	proto.RegisterType((*User_GetRecentChatIdsResponse)(nil), "less_service.User.GetRecentChatIdsResponse")
	proto.RegisterType((*User_AddRecentChatIdsRequest)(nil), "less_service.User.AddRecentChatIdsRequest")
	proto.RegisterType((*User_AddRecentChatIdsResponse)(nil), "less_service.User.AddRecentChatIdsResponse")
	proto.RegisterType((*User_DeleteRecentChatIdsRequest)(nil), "less_service.User.DeleteRecentChatIdsRequest")
	proto.RegisterType((*User_DeleteRecentChatIdsResponse)(nil), "less_service.User.DeleteRecentChatIdsResponse")
	proto.RegisterType((*User_GetBlackListRequest)(nil), "less_service.User.GetBlackListRequest")
	proto.RegisterType((*User_GetBlackListResponse)(nil), "less_service.User.GetBlackListResponse")
	proto.RegisterType((*User_LevelUpgradeRequest)(nil), "less_service.User.LevelUpgradeRequest")
	proto.RegisterType((*User_LevelUpgradeResponse)(nil), "less_service.User.LevelUpgradeResponse")
	proto.RegisterType((*User_GetUseHangUpExpItemInfoRequest)(nil), "less_service.User.GetUseHangUpExpItemInfoRequest")
	proto.RegisterType((*User_GetUseHangUpExpItemInfoResponse)(nil), "less_service.User.GetUseHangUpExpItemInfoResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "less_service.User.GetUseHangUpExpItemInfoResponse.RateDurationEntry")
	proto.RegisterType((*User_UseHangUpExpItemRequest)(nil), "less_service.User.UseHangUpExpItemRequest")
	proto.RegisterType((*User_UseHangUpExpItemResponse)(nil), "less_service.User.UseHangUpExpItemResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "less_service.User.UseHangUpExpItemResponse.ExpEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "less_service.User.UseHangUpExpItemResponse.RateDurationEntry")
	proto.RegisterType((*User_LevelUpgradeManyRequest)(nil), "less_service.User.LevelUpgradeManyRequest")
	proto.RegisterType((*User_LevelUpgradeManyResponse)(nil), "less_service.User.LevelUpgradeManyResponse")
	proto.RegisterType((*User_AdvanceInfoRequest)(nil), "less_service.User.AdvanceInfoRequest")
	proto.RegisterType((*User_AdvanceInfoResponse)(nil), "less_service.User.AdvanceInfoResponse")
	proto.RegisterType((*User_AdvanceOpenRequest)(nil), "less_service.User.AdvanceOpenRequest")
	proto.RegisterType((*User_AdvanceOpenResponse)(nil), "less_service.User.AdvanceOpenResponse")
	proto.RegisterType((*User_AdvanceBattleStartRequest)(nil), "less_service.User.AdvanceBattleStartRequest")
	proto.RegisterType((*User_AdvanceBattleStartResponse)(nil), "less_service.User.AdvanceBattleStartResponse")
	proto.RegisterType((*User_AdvanceBattleVictoryRequest)(nil), "less_service.User.AdvanceBattleVictoryRequest")
	proto.RegisterType((*User_AdvanceBattleVictoryResponse)(nil), "less_service.User.AdvanceBattleVictoryResponse")
	proto.RegisterType((*User_AdvanceBattleFinishRequest)(nil), "less_service.User.AdvanceBattleFinishRequest")
	proto.RegisterType((*User_AdvanceBattleFinishResponse)(nil), "less_service.User.AdvanceBattleFinishResponse")
	proto.RegisterType((*User_AdvanceUseItemRequest)(nil), "less_service.User.AdvanceUseItemRequest")
	proto.RegisterType((*User_AdvanceUseItemResponse)(nil), "less_service.User.AdvanceUseItemResponse")
	proto.RegisterType((*User_RecommendFriendRequest)(nil), "less_service.User.RecommendFriendRequest")
	proto.RegisterType((*User_RecommendFriendResponse)(nil), "less_service.User.RecommendFriendResponse")
	proto.RegisterType((*User_GetReadPointRequest)(nil), "less_service.User.GetReadPointRequest")
	proto.RegisterType((*User_GetReadPointResponse)(nil), "less_service.User.GetReadPointResponse")
	proto.RegisterMapType((map[string]int64)(nil), "less_service.User.GetReadPointResponse.RedPointsEntry")
	proto.RegisterType((*User_AddReadPointRequest)(nil), "less_service.User.AddReadPointRequest")
	proto.RegisterType((*User_AddReadPointResponse)(nil), "less_service.User.AddReadPointResponse")
	proto.RegisterType((*User_SetReadPointRequest)(nil), "less_service.User.SetReadPointRequest")
	proto.RegisterType((*User_SetReadPointResponse)(nil), "less_service.User.SetReadPointResponse")
	proto.RegisterType((*User_GetSimpleRolesRequest)(nil), "less_service.User.GetSimpleRolesRequest")
	proto.RegisterType((*User_GetSimpleRolesResponse)(nil), "less_service.User.GetSimpleRolesResponse")
	proto.RegisterType((*User_GetUserSimpleInfoRequest)(nil), "less_service.User.GetUserSimpleInfoRequest")
	proto.RegisterType((*User_GetUserSimpleInfoResponse)(nil), "less_service.User.GetUserSimpleInfoResponse")
	proto.RegisterType((*User_GetUserCombatValueDetailsRequest)(nil), "less_service.User.GetUserCombatValueDetailsRequest")
	proto.RegisterType((*User_GetUserCombatValueDetailsResponse)(nil), "less_service.User.GetUserCombatValueDetailsResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "less_service.User.GetUserCombatValueDetailsResponse.SelfEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "less_service.User.GetUserCombatValueDetailsResponse.TargetEntry")
	proto.RegisterType((*User_SetBattleSpeedRequest)(nil), "less_service.User.SetBattleSpeedRequest")
	proto.RegisterType((*User_SetBattleSpeedResponse)(nil), "less_service.User.SetBattleSpeedResponse")
	proto.RegisterType((*User_ReadPointChangePush)(nil), "less_service.User.ReadPointChangePush")
	proto.RegisterMapType((map[string]int64)(nil), "less_service.User.ReadPointChangePush.RedPointsEntry")
	proto.RegisterType((*User_UserLevelChangePush)(nil), "less_service.User.UserLevelChangePush")
	proto.RegisterType((*User_UserCanGetExpFromHangPush)(nil), "less_service.User.UserCanGetExpFromHangPush")
	proto.RegisterType((*User_GotAvatarPush)(nil), "less_service.User.GotAvatarPush")
	proto.RegisterType((*User_UpdateTargetPush)(nil), "less_service.User.UpdateTargetPush")
	proto.RegisterType((*User_CheatGetRolesRequest)(nil), "less_service.User.CheatGetRolesRequest")
	proto.RegisterType((*User_CheatGetRolesResponse)(nil), "less_service.User.CheatGetRolesResponse")
	proto.RegisterType((*User_CheatSetLevelRequest)(nil), "less_service.User.CheatSetLevelRequest")
	proto.RegisterType((*User_CheatSetLevelResponse)(nil), "less_service.User.CheatSetLevelResponse")
	proto.RegisterType((*User_CheatResetExpSkipRequest)(nil), "less_service.User.CheatResetExpSkipRequest")
	proto.RegisterType((*User_CheatResetExpSkipResponse)(nil), "less_service.User.CheatResetExpSkipResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "less_service.User.CheatResetExpSkipResponse.RateDurationEntry")
	proto.RegisterType((*User_CheatPushToMobileRequest)(nil), "less_service.User.CheatPushToMobileRequest")
	proto.RegisterType((*User_CheatPushToMobileResponse)(nil), "less_service.User.CheatPushToMobileResponse")
	proto.RegisterType((*User_CheatAheadRegisterDayRequest)(nil), "less_service.User.CheatAheadRegisterDayRequest")
	proto.RegisterType((*User_CheatAheadRegisterDayResponse)(nil), "less_service.User.CheatAheadRegisterDayResponse")
}

func init() { proto.RegisterFile("proto/less-service/user.proto", fileDescriptor_90c0c1d3cfb95274) }

var fileDescriptor_90c0c1d3cfb95274 = []byte{
	// 2844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x39, 0xdb, 0x6f, 0x1c, 0xd5,
	0xf9, 0x99, 0x5d, 0x5f, 0xd6, 0x9f, 0x2f, 0x59, 0x8f, 0x6f, 0xe3, 0x13, 0xb2, 0x18, 0x14, 0xf8,
	0x99, 0x4b, 0x1c, 0xe4, 0x40, 0xf8, 0x71, 0x2b, 0x8d, 0x2f, 0x31, 0x2b, 0x6c, 0xc7, 0xdd, 0x8d,
	0xa1, 0xea, 0x8b, 0x75, 0x3c, 0x73, 0xbc, 0x1e, 0x65, 0x77, 0x66, 0x3a, 0x73, 0xd6, 0xb1, 0xdf,
	0x42, 0x29, 0xd4, 0xb8, 0x20, 0x52, 0x51, 0x0a, 0xa9, 0x82, 0x54, 0x10, 0x01, 0x4a, 0xa0, 0xa0,
	0x36, 0x26, 0x69, 0x03, 0xf4, 0xa9, 0x12, 0x52, 0x5f, 0x78, 0xe4, 0xb1, 0x75, 0xb2, 0x6b, 0xfb,
	0xa1, 0x52, 0xff, 0x84, 0xea, 0x5c, 0x66, 0x76, 0x76, 0x77, 0xec, 0x38, 0x44, 0x55, 0x9f, 0x76,
	0xcf, 0x77, 0xbe, 0xdb, 0xf9, 0xee, 0xe7, 0x0c, 0x1c, 0x74, 0x5c, 0x9b, 0xda, 0x47, 0xf2, 0xc4,
	0xf3, 0x0e, 0x7b, 0xc4, 0x5d, 0x32, 0x75, 0x72, 0xa4, 0xe8, 0x11, 0x77, 0x88, 0xc3, 0xd5, 0x36,
	0xb6, 0x31, 0x27, 0x37, 0x50, 0x9f, 0x40, 0x2e, 0xd8, 0x06, 0xc9, 0x7b, 0x21, 0xb4, 0x9a, 0x8d,
	0x79, 0xec, 0x91, 0xc8, 0x8d, 0x45, 0xe2, 0xda, 0x72, 0xa3, 0xbf, 0x86, 0x82, 0xd2, 0xbc, 0x4f,
	0xa3, 0x55, 0x6d, 0x11, 0xab, 0x58, 0xf0, 0x22, 0x89, 0x16, 0x5c, 0x93, 0x58, 0x86, 0xd8, 0xba,
	0x7b, 0xe3, 0x18, 0x34, 0xcc, 0x7a, 0xc4, 0x45, 0x7f, 0x8f, 0x41, 0x32, 0x63, 0xe7, 0xc9, 0xa4,
	0x9d, 0x33, 0xad, 0x0c, 0xf9, 0x69, 0x91, 0x78, 0x54, 0xed, 0x83, 0x66, 0xa6, 0xed, 0x9c, 0x69,
	0x68, 0xca, 0x80, 0x32, 0xd8, 0x92, 0x69, 0x62, 0xcb, 0xb4, 0xa1, 0x1e, 0x80, 0x16, 0x76, 0x38,
	0xb1, 0x15, 0x1b, 0x50, 0x06, 0xe3, 0x99, 0x84, 0x00, 0xa4, 0x0d, 0x46, 0x85, 0x1d, 0x67, 0xee,
	0x34, 0x59, 0xd1, 0xe2, 0x82, 0x0a, 0x3b, 0xce, 0xb3, 0x64, 0x45, 0x45, 0x90, 0xc8, 0x63, 0x2b,
	0x57, 0xc4, 0x39, 0xa2, 0x35, 0x08, 0x22, 0x7f, 0xad, 0xde, 0x05, 0x6d, 0x6e, 0x31, 0x4f, 0xe6,
	0x96, 0x88, 0xeb, 0x99, 0xb6, 0xa5, 0x35, 0x72, 0xca, 0x56, 0x06, 0x7b, 0x4e, 0x80, 0x54, 0x0d,
	0x9a, 0xfd, 0xdd, 0xa6, 0x01, 0x65, 0x50, 0xcd, 0xf8, 0x4b, 0xa6, 0x8e, 0x41, 0x98, 0xa9, 0x99,
	0x3a, 0xcd, 0x9c, 0x32, 0x21, 0x00, 0x42, 0x57, 0x61, 0x27, 0xb6, 0x99, 0x10, 0x62, 0x05, 0x20,
	0x6d, 0xa8, 0xf7, 0x40, 0x87, 0x9e, 0x37, 0x89, 0x45, 0x03, 0xc1, 0x2d, 0x9c, 0xbc, 0x5d, 0x40,
	0x7d, 0xd1, 0x7d, 0xd0, 0x9c, 0xc3, 0x05, 0xce, 0x01, 0xc4, 0x91, 0xd8, 0x32, 0x6d, 0xa8, 0x3d,
	0xd0, 0x64, 0xe6, 0x72, 0x0c, 0xde, 0xca, 0xe1, 0x8d, 0x66, 0x2e, 0x97, 0x36, 0xd0, 0xa5, 0x46,
	0xe8, 0x0c, 0x59, 0xd3, 0x73, 0x6c, 0xcb, 0x23, 0xea, 0xbd, 0xd0, 0xe4, 0x51, 0x4c, 0x8b, 0x1e,
	0xb7, 0x66, 0xc7, 0x70, 0xc7, 0x90, 0x70, 0xc9, 0x50, 0x96, 0x43, 0x33, 0x72, 0x97, 0x49, 0x73,
	0x6d, 0xa1, 0x6f, 0x4c, 0x48, 0x63, 0x4b, 0x21, 0xad, 0x80, 0x1d, 0x06, 0x8f, 0xf3, 0x73, 0x34,
	0x16, 0xb0, 0x93, 0x36, 0xd4, 0x41, 0x48, 0xca, 0x13, 0x56, 0x9c, 0x22, 0xec, 0xdb, 0x21, 0xe0,
	0x59, 0xdf, 0x35, 0xdd, 0xd0, 0x98, 0x27, 0x4b, 0x24, 0xcf, 0xcd, 0x1b, 0xcf, 0x88, 0x05, 0xb3,
	0x10, 0x5e, 0xc2, 0x14, 0x73, 0xc2, 0x26, 0x61, 0x21, 0x01, 0x48, 0x1b, 0xcc, 0x31, 0x72, 0x73,
	0xc1, 0xc5, 0x05, 0xc2, 0xcd, 0x1b, 0xcf, 0xb4, 0x0a, 0xd8, 0x09, 0x06, 0x62, 0x5c, 0x1d, 0xfb,
	0x0c, 0x71, 0xa5, 0x75, 0xc5, 0x82, 0x41, 0xa9, 0x49, 0xf3, 0x84, 0x5b, 0x34, 0x9e, 0x11, 0x0b,
	0xb5, 0x1f, 0x12, 0xb9, 0xa2, 0x99, 0x37, 0x2a, 0xa6, 0x6c, 0xe6, 0x6b, 0xe1, 0x0b, 0xb1, 0xe5,
	0xd8, 0x9e, 0x49, 0x99, 0x2f, 0x5a, 0x39, 0x65, 0x3b, 0x87, 0xce, 0x48, 0xa0, 0x7a, 0x08, 0x3a,
	0x82, 0xec, 0x12, 0x67, 0x6d, 0xe3, 0x68, 0x3c, 0xe7, 0x82, 0x93, 0x22, 0x48, 0x58, 0xa6, 0x7e,
	0xda, 0x62, 0x2a, 0xb7, 0x8b, 0x88, 0xf0, 0xd7, 0x55, 0x71, 0xd8, 0x51, 0x13, 0x87, 0x87, 0xa0,
	0x89, 0xa5, 0x1b, 0xf1, 0xb4, 0xfd, 0x03, 0xf1, 0xc1, 0xd6, 0xe1, 0x36, 0xdf, 0x47, 0xcf, 0x10,
	0xd7, 0xce, 0xc8, 0x3d, 0xf5, 0x4e, 0x68, 0xd5, 0x5d, 0x82, 0x29, 0x99, 0xa3, 0x66, 0x81, 0x68,
	0x49, 0xce, 0x04, 0x04, 0xe8, 0x94, 0x59, 0x20, 0x0c, 0x81, 0xdb, 0x76, 0xce, 0xb4, 0x0c, 0xb2,
	0xac, 0x75, 0x0a, 0x04, 0x0e, 0x4a, 0x33, 0x08, 0xf3, 0xb1, 0x59, 0x98, 0x5b, 0xa4, 0xd4, 0xd1,
	0x54, 0xe1, 0x63, 0xb3, 0xf0, 0x0c, 0xa5, 0x0e, 0x8f, 0xa8, 0xc2, 0x1c, 0xd5, 0x1d, 0xad, 0x4b,
	0x46, 0x54, 0xe1, 0x94, 0xee, 0x30, 0x37, 0xf8, 0x3e, 0x76, 0x08, 0x31, 0xb4, 0x6e, 0xe1, 0x06,
	0xe9, 0x5f, 0x06, 0xaa, 0x4e, 0xca, 0x9e, 0x9a, 0xa4, 0x44, 0x90, 0x70, 0x89, 0xbe, 0x88, 0xdd,
	0x1c, 0xd1, 0x7a, 0xc5, 0x9e, 0xbf, 0x46, 0x8f, 0x42, 0x87, 0x0c, 0x56, 0xbb, 0x48, 0x67, 0x8a,
	0xde, 0x62, 0x44, 0x5a, 0x28, 0x11, 0x69, 0x81, 0xee, 0x83, 0x8e, 0x09, 0x42, 0x19, 0x6d, 0xa8,
	0x62, 0xf8, 0xa1, 0xab, 0x84, 0x43, 0x17, 0x9d, 0x81, 0xfd, 0x01, 0xaa, 0x4c, 0x87, 0x01, 0x68,
	0x60, 0x9b, 0x1c, 0x31, 0x64, 0x68, 0x8e, 0xc3, 0x77, 0x42, 0xce, 0x88, 0xed, 0xe2, 0x8c, 0x3b,
	0xa0, 0x65, 0xc1, 0x76, 0x0b, 0x98, 0x87, 0x4c, 0x7c, 0x20, 0x3e, 0x18, 0xcf, 0x54, 0x00, 0xe8,
	0x3e, 0xe8, 0xcc, 0x12, 0xec, 0xea, 0x8b, 0x61, 0x35, 0xbb, 0xa1, 0xd1, 0xb4, 0x9c, 0x22, 0x95,
	0x4a, 0x8a, 0x05, 0x3a, 0x06, 0x6a, 0x18, 0xb5, 0x4e, 0xcd, 0x78, 0xb4, 0x9a, 0x68, 0x12, 0x92,
	0x59, 0x42, 0x8f, 0xf3, 0x8c, 0xf0, 0x25, 0x54, 0xe5, 0x94, 0x52, 0x9d, 0x53, 0x8f, 0x1f, 0xf8,
	0xd9, 0xba, 0xd6, 0x07, 0x0d, 0xac, 0x98, 0xaa, 0xfb, 0xc7, 0x5d, 0x97, 0x55, 0xe0, 0x69, 0x9b,
	0x9e, 0xb0, 0x8b, 0x96, 0x81, 0x1e, 0x62, 0x0a, 0x07, 0xdc, 0xa4, 0x12, 0xbb, 0xb1, 0x43, 0xcf,
	0x43, 0x4f, 0x40, 0xc1, 0x33, 0xd2, 0x57, 0xa2, 0x36, 0x77, 0x95, 0xba, 0xdc, 0xdd, 0x5d, 0x95,
	0x27, 0xa0, 0xb7, 0x96, 0xb1, 0xd4, 0xe7, 0xe6, 0x9c, 0xd1, 0x0c, 0xf4, 0x8c, 0x2e, 0x62, 0x2b,
	0x47, 0xa6, 0x65, 0xde, 0xf9, 0x5a, 0x85, 0x53, 0x53, 0xa9, 0x4e, 0xcd, 0xdd, 0xd5, 0x79, 0x18,
	0x7a, 0x6b, 0x39, 0x4a, 0x75, 0x76, 0x61, 0x89, 0x86, 0xa1, 0x6b, 0x82, 0xd0, 0x93, 0x67, 0xac,
	0x2a, 0x07, 0xed, 0x2e, 0xe9, 0x5f, 0x0a, 0x74, 0x57, 0x13, 0x49, 0x41, 0xb3, 0x00, 0xf6, 0x19,
	0x6b, 0x4e, 0x9c, 0x53, 0x86, 0xc4, 0xb1, 0xa1, 0x70, 0xb7, 0x1f, 0x62, 0x8c, 0x86, 0xa2, 0x88,
	0x87, 0x02, 0xc8, 0xb8, 0x45, 0xdd, 0x95, 0x4c, 0x8b, 0xed, 0xaf, 0xd5, 0x87, 0x00, 0xf4, 0xa2,
	0xeb, 0xb3, 0x8d, 0xf1, 0x84, 0xe8, 0xf4, 0x23, 0x6d, 0xb4, 0xe8, 0x4a, 0x46, 0x2d, 0xba, 0xff,
	0x17, 0x4d, 0x42, 0x47, 0x35, 0x3b, 0x35, 0x09, 0x71, 0xd6, 0x72, 0x85, 0x27, 0xd8, 0x5f, 0xf5,
	0x10, 0x34, 0x2e, 0xe1, 0x7c, 0x91, 0x48, 0x86, 0x41, 0xbb, 0x91, 0xdc, 0xc4, 0xe6, 0xe3, 0xb1,
	0xff, 0x57, 0x2a, 0xbe, 0x9a, 0x94, 0x75, 0x30, 0xe4, 0xab, 0xa0, 0x54, 0x2a, 0xd5, 0xa5, 0x72,
	0x8f, 0xbe, 0xaa, 0x70, 0xac, 0xf8, 0x6a, 0x27, 0x96, 0xe8, 0xff, 0x60, 0xff, 0x0c, 0x6b, 0x1e,
	0x82, 0x94, 0x97, 0xa2, 0xa0, 0xb9, 0x28, 0xa1, 0xe6, 0x82, 0x9e, 0x87, 0x6e, 0x81, 0x33, 0xc2,
	0x0b, 0xe0, 0x14, 0x76, 0xc6, 0x97, 0x88, 0x45, 0x43, 0x1d, 0x52, 0xb9, 0x59, 0x87, 0x8c, 0x45,
	0x75, 0x48, 0xd4, 0x0f, 0x7d, 0xac, 0x4e, 0x11, 0x9d, 0x58, 0x74, 0x74, 0x11, 0xd3, 0xb4, 0xe1,
	0x49, 0x5b, 0xa0, 0x47, 0x40, 0xab, 0xdf, 0x92, 0x87, 0xea, 0x87, 0x84, 0xac, 0x7b, 0x1e, 0x8f,
	0x8a, 0x96, 0x4c, 0xb3, 0x28, 0x7c, 0x1e, 0x1a, 0x86, 0xbe, 0xe3, 0x86, 0x11, 0xc5, 0x71, 0xe7,
	0x6a, 0x89, 0x40, 0xab, 0xa7, 0x11, 0xa2, 0xd0, 0x23, 0x80, 0xc6, 0x48, 0x9e, 0x50, 0x72, 0x6b,
	0x2c, 0x0f, 0xc2, 0x81, 0x48, 0x32, 0xc9, 0xb5, 0x87, 0x67, 0xc9, 0x48, 0x1e, 0xeb, 0xa7, 0x27,
	0x4d, 0x8f, 0xfa, 0x67, 0x7e, 0x96, 0xe7, 0x41, 0x08, 0x2c, 0xcf, 0x7b, 0x14, 0x5a, 0xe6, 0x19,
	0x30, 0x6f, 0x7a, 0x54, 0xa6, 0x41, 0x8f, 0x1f, 0x5e, 0x01, 0x76, 0xda, 0x5a, 0xb0, 0x33, 0x15,
	0x3c, 0x26, 0x63, 0x92, 0x75, 0xc0, 0x59, 0x27, 0xe7, 0x62, 0xc3, 0x8f, 0x31, 0x34, 0x05, 0xdd,
	0xd5, 0x60, 0x29, 0x23, 0x18, 0x56, 0x94, 0xf0, 0xb0, 0x52, 0xd3, 0x59, 0x63, 0xb5, 0x9d, 0x15,
	0x0d, 0x40, 0x6a, 0x82, 0xd0, 0x59, 0x8f, 0x3c, 0x83, 0xad, 0xdc, 0xac, 0x33, 0xbe, 0xec, 0xa4,
	0x29, 0x29, 0x70, 0x5d, 0xa4, 0xc0, 0x8b, 0x31, 0xb8, 0x73, 0x47, 0x14, 0x29, 0xfc, 0x1e, 0xe8,
	0xa0, 0x36, 0xc5, 0xf9, 0x39, 0xa3, 0xe8, 0x8a, 0xce, 0x22, 0xb4, 0x68, 0xe7, 0xd0, 0x31, 0x09,
	0x54, 0x55, 0x68, 0x70, 0x31, 0x25, 0x52, 0x0d, 0xfe, 0x5f, 0x35, 0xa1, 0x9d, 0xfd, 0x56, 0x28,
	0xe3, 0xdc, 0x3e, 0x63, 0xd1, 0x65, 0x62, 0x37, 0x2d, 0x86, 0x32, 0x98, 0x12, 0x5f, 0x96, 0x28,
	0x1a, 0x6d, 0x6e, 0x08, 0xc4, 0xda, 0x42, 0xd1, 0x23, 0x73, 0xba, 0x5d, 0xb4, 0xa8, 0x3f, 0x52,
	0x17, 0x3d, 0x32, 0xca, 0xd6, 0xe8, 0x69, 0xe8, 0xac, 0xa3, 0x8f, 0xa8, 0x12, 0xdd, 0xe1, 0x2a,
	0x11, 0x0f, 0x57, 0x85, 0x61, 0xe8, 0xab, 0xd5, 0x2e, 0x14, 0x66, 0x26, 0x25, 0x85, 0x4a, 0xa2,
	0x35, 0xb1, 0x65, 0xda, 0x40, 0x6f, 0xc5, 0x41, 0xab, 0x27, 0xba, 0x7d, 0xa3, 0xce, 0x47, 0x1b,
	0xf5, 0xa9, 0x08, 0xa3, 0xee, 0x24, 0xfe, 0xb6, 0xac, 0xa9, 0x9e, 0x80, 0x38, 0x59, 0x76, 0xb4,
	0x46, 0x2e, 0xf6, 0xe1, 0x5b, 0x11, 0x3b, 0xbe, 0xec, 0x08, 0x69, 0x8c, 0xc1, 0xed, 0x7b, 0xe5,
	0x18, 0x24, 0x7c, 0x8e, 0xb7, 0x44, 0x77, 0x04, 0xfa, 0xc2, 0x69, 0x36, 0x85, 0xad, 0x95, 0xd0,
	0x38, 0x24, 0x0e, 0x2d, 0x33, 0x8d, 0x2f, 0xd0, 0x8f, 0x40, 0xab, 0x27, 0xb8, 0xbd, 0xdc, 0xec,
	0x06, 0xf5, 0xb8, 0xb1, 0x84, 0x2d, 0x9d, 0x84, 0xf3, 0xf1, 0x5b, 0x05, 0xba, 0xaa, 0xc0, 0x52,
	0x08, 0x0b, 0x32, 0x6f, 0xce, 0x76, 0x88, 0x88, 0x93, 0x44, 0xa6, 0xc9, 0xf4, 0x4e, 0x3a, 0x84,
	0x5f, 0xc7, 0xe6, 0x8b, 0x0b, 0x0b, 0xa2, 0x8a, 0xb3, 0x79, 0xaf, 0x89, 0x2d, 0xd3, 0x06, 0xbb,
	0x22, 0xda, 0x4b, 0xc4, 0xcd, 0xe3, 0x15, 0x79, 0x43, 0xf2, 0x97, 0x7c, 0xa2, 0x5d, 0xc4, 0xf9,
	0x3c, 0xb1, 0x72, 0x72, 0x68, 0x17, 0x0e, 0x6e, 0x0f, 0xa0, 0xfe, 0xdc, 0xae, 0x63, 0x6b, 0x0e,
	0x0b, 0x6d, 0xf8, 0x35, 0x29, 0x91, 0x01, 0x1d, 0x5b, 0x52, 0xbf, 0x6a, 0x3e, 0xba, 0xed, 0x51,
	0x7e, 0x61, 0x4a, 0x84, 0xf8, 0x8c, 0xda, 0x1e, 0x0d, 0x1d, 0x94, 0x29, 0xec, 0x1f, 0xb4, 0x27,
	0x38, 0xa7, 0x80, 0xca, 0xda, 0x7b, 0x00, 0xfa, 0x25, 0x58, 0x74, 0xb3, 0x2c, 0xc5, 0x6e, 0x50,
	0x81, 0xdf, 0x50, 0x00, 0x45, 0xed, 0x4a, 0x1b, 0xed, 0xd0, 0xf0, 0xd8, 0xe5, 0xcb, 0x3e, 0x4d,
	0x2c, 0x79, 0x81, 0x14, 0x8b, 0xea, 0xab, 0x70, 0xbc, 0xe6, 0x2a, 0xfc, 0x00, 0xc4, 0xbd, 0x79,
	0x87, 0x9b, 0xa5, 0x75, 0xb8, 0x3f, 0xb8, 0x9a, 0x9a, 0x56, 0x2e, 0x2f, 0x25, 0xcf, 0x60, 0x17,
	0x17, 0x32, 0x0c, 0x0b, 0x1d, 0x85, 0x03, 0x55, 0x4a, 0x3d, 0x67, 0xea, 0xd4, 0x76, 0xc3, 0x01,
	0x25, 0xc4, 0x2b, 0x21, 0xf1, 0x28, 0x05, 0x77, 0x44, 0x13, 0x49, 0x3b, 0x4c, 0xd6, 0x9c, 0xf4,
	0x84, 0x69, 0x99, 0xde, 0xe2, 0xae, 0x3c, 0xf9, 0xa3, 0x80, 0x60, 0xc3, 0x8f, 0x9a, 0xc8, 0xf8,
	0x4b, 0xd6, 0xf0, 0x22, 0xb9, 0x49, 0x61, 0x0f, 0x41, 0x8f, 0xdc, 0x9e, 0xf5, 0xc8, 0x9e, 0x4a,
	0xdb, 0xd3, 0xd0, 0x5b, 0x4b, 0x51, 0xa9, 0x6b, 0x7b, 0x08, 0x2e, 0x36, 0x13, 0x65, 0x88, 0x6e,
	0x17, 0x0a, 0xc4, 0x32, 0x4e, 0xf0, 0x57, 0x98, 0x3d, 0x8c, 0x59, 0xe8, 0x29, 0xe8, 0xab, 0xa3,
	0x92, 0x72, 0xef, 0x86, 0x46, 0xd6, 0xdd, 0xbd, 0xc8, 0xbb, 0x89, 0xd8, 0x92, 0x8d, 0x3d, 0x43,
	0xb0, 0x31, 0x63, 0x9b, 0x56, 0x10, 0x56, 0x97, 0xc4, 0x84, 0x1b, 0x82, 0x57, 0x26, 0x5c, 0x97,
	0xb0, 0x3b, 0xb8, 0x69, 0x51, 0x6f, 0xf7, 0x09, 0xb7, 0x8e, 0x78, 0x28, 0x43, 0x04, 0xc0, 0x93,
	0x13, 0xae, 0xeb, 0xaf, 0xd1, 0x93, 0xd0, 0x51, 0xbd, 0x19, 0xae, 0x5d, 0x2d, 0x37, 0xab, 0x5d,
	0x8f, 0xb1, 0xc4, 0x31, 0x6a, 0x0f, 0x11, 0xc1, 0x22, 0x09, 0x71, 0xdd, 0xa2, 0x92, 0x01, 0xfb,
	0x8b, 0x1e, 0x87, 0xee, 0x6a, 0x52, 0x79, 0xce, 0xbd, 0xd0, 0x3e, 0x06, 0x5d, 0xd9, 0x7a, 0xdb,
	0xed, 0x55, 0x6c, 0x36, 0xca, 0xbc, 0x7b, 0xa1, 0x1d, 0x86, 0x9e, 0x09, 0x42, 0xb3, 0x66, 0xc1,
	0xc9, 0x13, 0xe6, 0xca, 0x60, 0xb8, 0xdb, 0x65, 0xca, 0x1c, 0x81, 0xde, 0x5a, 0x1a, 0x29, 0x71,
	0xd0, 0x0f, 0x12, 0x71, 0x87, 0x56, 0xc3, 0x41, 0x22, 0xf1, 0x65, 0xa8, 0x1c, 0xe5, 0x03, 0x2e,
	0xf3, 0xae, 0x80, 0x87, 0x6a, 0xf4, 0xce, 0x73, 0xe5, 0x04, 0xf4, 0x47, 0x10, 0x49, 0xd9, 0xf7,
	0x43, 0x83, 0x69, 0x2d, 0xd8, 0xf2, 0x8a, 0xdf, 0xeb, 0x8b, 0xae, 0xc1, 0xe6, 0x38, 0xe8, 0x09,
	0x18, 0x90, 0x8c, 0x46, 0xed, 0xc2, 0x3c, 0xa6, 0xcf, 0x31, 0xef, 0x8f, 0x11, 0x8a, 0xcd, 0xfc,
	0xcd, 0xa7, 0xdb, 0xbf, 0xc5, 0xe0, 0xae, 0x5d, 0xa8, 0xa5, 0x3a, 0x19, 0x68, 0xf0, 0x48, 0x7e,
	0x41, 0x46, 0xf5, 0x0f, 0x76, 0x1c, 0xc8, 0x76, 0xe1, 0x31, 0x94, 0x25, 0xf9, 0x05, 0x11, 0xdd,
	0x9c, 0x97, 0xfa, 0x63, 0x68, 0xa2, 0xd8, 0xcd, 0x11, 0x2a, 0xed, 0xfb, 0xc3, 0xef, 0xc5, 0xf5,
	0x14, 0x67, 0x21, 0xf8, 0x4a, 0x7e, 0xe8, 0x51, 0x68, 0x09, 0x84, 0xdd, 0x52, 0xa7, 0x7f, 0x0c,
	0x5a, 0x43, 0xfc, 0x6e, 0x89, 0xf4, 0x30, 0x7f, 0x4a, 0x18, 0xa9, 0xbc, 0x2a, 0x85, 0xaa, 0xaf,
	0x78, 0x78, 0x92, 0x6d, 0x86, 0x2f, 0x90, 0xc6, 0x1f, 0x08, 0xaa, 0xd0, 0x65, 0x79, 0xfd, 0xbd,
	0x02, 0x5d, 0x41, 0xf4, 0x87, 0xae, 0x73, 0xa7, 0x22, 0xca, 0xcb, 0x23, 0x11, 0x26, 0x8b, 0xa0,
	0xfd, 0xaf, 0x55, 0x97, 0x37, 0x15, 0xe8, 0x62, 0x42, 0xf9, 0xb4, 0x53, 0x7d, 0xf5, 0xfc, 0x1e,
	0x43, 0x8e, 0x7a, 0x10, 0xc0, 0x47, 0xd0, 0x5d, 0xd9, 0x66, 0x5b, 0xe4, 0xbe, 0xee, 0xb2, 0xbb,
	0x68, 0x88, 0x5e, 0x20, 0xc9, 0xd7, 0xda, 0x0a, 0x13, 0x86, 0x89, 0x0e, 0x43, 0x3f, 0x0f, 0x1b,
	0x6c, 0x4d, 0x10, 0x3a, 0xbe, 0xec, 0x9c, 0x70, 0xed, 0x02, 0x1b, 0x31, 0xb9, 0x72, 0xac, 0x6c,
	0x60, 0x7f, 0x30, 0x62, 0x7f, 0xd1, 0x0c, 0xb4, 0x4f, 0xd8, 0xf2, 0xb5, 0x86, 0xa3, 0xdc, 0x0b,
	0x4d, 0xc1, 0x43, 0x45, 0xd4, 0x03, 0x80, 0xdc, 0x0d, 0x77, 0xbc, 0x58, 0x55, 0xc7, 0x33, 0x20,
	0x39, 0xeb, 0x18, 0x98, 0x12, 0x11, 0x4e, 0xbe, 0x5c, 0xba, 0xe2, 0xf8, 0xd1, 0x44, 0x57, 0x1c,
	0xb5, 0x03, 0x62, 0x01, 0x65, 0xcc, 0x34, 0x2a, 0xd3, 0x64, 0x3c, 0x34, 0x4d, 0xb2, 0x46, 0xed,
	0x12, 0x27, 0x8f, 0x75, 0xd1, 0x1c, 0x13, 0x19, 0x7f, 0x89, 0x7a, 0xd9, 0x5d, 0x9e, 0x60, 0x2a,
	0xdf, 0x07, 0x83, 0xfb, 0xf6, 0x13, 0xd0, 0x53, 0x03, 0xbf, 0x85, 0xb6, 0xf7, 0xa0, 0x64, 0x9a,
	0x25, 0x94, 0xbb, 0x35, 0x14, 0xc7, 0xf5, 0x3e, 0x45, 0xd3, 0x52, 0x54, 0x05, 0xfb, 0xf6, 0xe6,
	0x5c, 0x04, 0x1a, 0xe7, 0x97, 0x21, 0x1e, 0xf7, 0x5c, 0xf6, 0xb4, 0xe9, 0xf8, 0xc7, 0x3a, 0x1f,
	0x83, 0xfe, 0x88, 0xcd, 0xdb, 0xbf, 0x22, 0xe9, 0xd1, 0x57, 0xa4, 0xa8, 0x32, 0xb7, 0xa3, 0xfc,
	0xff, 0xf1, 0x8d, 0xd3, 0x90, 0x76, 0x63, 0x91, 0x76, 0xca, 0x9e, 0xb2, 0xe7, 0xcd, 0xca, 0x9b,
	0x6d, 0xe5, 0x53, 0x8b, 0x12, 0xfa, 0xd4, 0x12, 0xfe, 0x34, 0x23, 0x83, 0x57, 0x7e, 0x9a, 0xd1,
	0xa0, 0x59, 0xb7, 0x2d, 0x4a, 0x96, 0xa9, 0xfc, 0x0c, 0xe5, 0x2f, 0xd9, 0xbc, 0x1d, 0x21, 0x25,
	0x98, 0x0b, 0xef, 0xe0, 0x9b, 0xc7, 0x17, 0x09, 0x36, 0x32, 0x24, 0x67, 0x7a, 0x94, 0xb8, 0x63,
	0x78, 0x25, 0xd4, 0xfc, 0x0d, 0x1c, 0x1c, 0xc7, 0xc0, 0x2b, 0xe8, 0x4e, 0x38, 0xb8, 0x03, 0x85,
	0x60, 0x79, 0xff, 0x3b, 0x8d, 0xd0, 0xce, 0xcc, 0x3e, 0xee, 0xba, 0xb6, 0x3b, 0x6a, 0x1b, 0xac,
	0x2f, 0xd6, 0x3e, 0x98, 0x25, 0xf7, 0xa1, 0x9e, 0xb5, 0x75, 0xad, 0x53, 0xdd, 0xbf, 0xf9, 0xeb,
	0x8f, 0xca, 0xab, 0x57, 0x6e, 0x5c, 0x7d, 0xad, 0xf4, 0xe9, 0xdb, 0xa5, 0x0b, 0x1f, 0x49, 0xdc,
	0xf1, 0x65, 0x67, 0xda, 0xa6, 0xe3, 0x96, 0x5d, 0xcc, 0x2d, 0x26, 0x95, 0x00, 0xf7, 0xda, 0xeb,
	0xdb, 0x1f, 0xbf, 0x5a, 0x3a, 0xfb, 0xe5, 0x8d, 0xab, 0xaf, 0x6d, 0x7d, 0xf1, 0x27, 0xf5, 0x41,
	0xe8, 0x1e, 0x77, 0xdd, 0x29, 0x4c, 0x89, 0x6b, 0xe2, 0x7c, 0x85, 0x20, 0x86, 0xd4, 0xb5, 0x75,
	0xad, 0x43, 0x6d, 0x2b, 0xbf, 0x73, 0xae, 0xfc, 0x9b, 0xf3, 0x01, 0x76, 0x2b, 0xc7, 0x5e, 0xe6,
	0x31, 0x9f, 0x8c, 0xa3, 0x03, 0x6b, 0xeb, 0x5a, 0x9f, 0xda, 0x53, 0xba, 0xf2, 0xc7, 0xad, 0xaf,
	0xbf, 0x2e, 0xad, 0x7e, 0x5e, 0xbe, 0x70, 0xb6, 0xf4, 0xfe, 0x87, 0x9b, 0x9f, 0xbe, 0xb2, 0xf9,
	0x97, 0x0f, 0xd5, 0x07, 0xb8, 0x1e, 0xd3, 0x84, 0x18, 0x23, 0x04, 0xd3, 0x11, 0xdb, 0xf3, 0x92,
	0x0d, 0xa8, 0x77, 0x6d, 0x5d, 0x53, 0xd5, 0xe4, 0xf6, 0x85, 0xb3, 0x5b, 0x1f, 0xbc, 0x50, 0xfa,
	0xc5, 0xb5, 0xad, 0xcb, 0x17, 0x47, 0x4e, 0x66, 0xb3, 0xac, 0xc8, 0x8d, 0xbb, 0xac, 0x72, 0x4d,
	0xdb, 0x54, 0x0e, 0xcd, 0xc9, 0x46, 0x5f, 0x09, 0x26, 0xfe, 0xc5, 0xaf, 0x36, 0x3f, 0x7e, 0x61,
	0xf3, 0x77, 0x97, 0xd5, 0x21, 0x50, 0xc7, 0x5d, 0x57, 0xe2, 0x30, 0xee, 0xec, 0x6a, 0x94, 0x6c,
	0xf2, 0x39, 0x6f, 0x7d, 0x76, 0xa5, 0xf4, 0xd2, 0x6a, 0xe9, 0xcb, 0xb3, 0xa5, 0x73, 0x9f, 0xcd,
	0xdb, 0x9e, 0xa7, 0x1e, 0x0e, 0xe3, 0x8b, 0xce, 0x33, 0x3a, 0x96, 0x6c, 0xf6, 0x2d, 0xc2, 0x70,
	0xca, 0xaf, 0xfe, 0xaa, 0xbc, 0xfa, 0xf6, 0xe8, 0xd8, 0x8d, 0xab, 0x9f, 0xaa, 0x63, 0xdc, 0x22,
	0x32, 0xca, 0xe5, 0xdc, 0x3e, 0x85, 0x97, 0x93, 0x09, 0x74, 0xff, 0xda, 0xba, 0x76, 0xaf, 0x7a,
	0xe8, 0xc6, 0xb5, 0xb5, 0xf2, 0x5b, 0x17, 0xb7, 0x5f, 0x78, 0xa3, 0xf4, 0xd2, 0x95, 0x1b, 0x5f,
	0xfd, 0x95, 0x59, 0xff, 0x93, 0x77, 0xcb, 0x6f, 0x7e, 0x2e, 0x8c, 0x70, 0xe3, 0xea, 0xda, 0xf6,
	0xf9, 0x73, 0xea, 0x93, 0xa0, 0xb1, 0xe3, 0x84, 0x3f, 0x7e, 0x4c, 0xdb, 0x74, 0x0a, 0x53, 0x7d,
	0x31, 0xd9, 0x82, 0x52, 0x6b, 0xeb, 0x1a, 0x52, 0xb5, 0xd2, 0x1f, 0xde, 0x2b, 0xaf, 0x5e, 0xd9,
	0xbc, 0xf4, 0xd9, 0xe6, 0x2b, 0xab, 0xe5, 0x0b, 0x9f, 0x30, 0x0f, 0xbe, 0xfa, 0xe7, 0xed, 0x97,
	0x5e, 0x53, 0x1f, 0x86, 0x2e, 0xe9, 0xed, 0xb4, 0xc1, 0xbf, 0x08, 0x4e, 0x9a, 0x05, 0x93, 0x26,
	0xc1, 0xb7, 0xf7, 0xd6, 0xe5, 0x0f, 0x4a, 0xaf, 0x5f, 0xd9, 0x3c, 0x7f, 0x6d, 0xfb, 0xfc, 0xcb,
	0x5b, 0xef, 0x5d, 0xda, 0x3e, 0x7f, 0xae, 0xb4, 0xfa, 0x85, 0x7a, 0x04, 0x3a, 0x99, 0xbd, 0x6d,
	0x7a, 0xf2, 0x8c, 0x45, 0x0c, 0x51, 0xb2, 0x93, 0xad, 0x48, 0x5b, 0x5b, 0xd7, 0xba, 0x55, 0xb5,
	0x7c, 0xe1, 0xe3, 0xf2, 0x2f, 0x2f, 0x96, 0x2f, 0xbc, 0xb2, 0xf9, 0xdb, 0x9f, 0x97, 0xde, 0xbf,
	0x5c, 0x7a, 0xf1, 0x75, 0xf5, 0x51, 0xe8, 0xad, 0x23, 0xe0, 0x4f, 0xf1, 0xc9, 0x36, 0x5f, 0x52,
	0x3d, 0x55, 0xf9, 0xdd, 0x97, 0x47, 0xb2, 0xdf, 0xfd, 0x33, 0xb5, 0xef, 0xa3, 0x8d, 0x94, 0xf2,
	0xcd, 0x46, 0x4a, 0xf9, 0x76, 0x23, 0xa5, 0xfc, 0x63, 0x23, 0xa5, 0x6c, 0x6d, 0xa4, 0xf6, 0xfd,
	0x7b, 0x23, 0xa5, 0x9c, 0xbb, 0x9e, 0xda, 0xf7, 0xcd, 0xf5, 0x94, 0xf2, 0xed, 0xf5, 0xd4, 0xbe,
	0xef, 0xae, 0xa7, 0xf6, 0xfd, 0xe4, 0x1e, 0xdd, 0x36, 0xad, 0xc3, 0xe2, 0x1d, 0xf5, 0x08, 0xbb,
	0x97, 0xd8, 0xd6, 0x91, 0xca, 0xd7, 0x70, 0xbf, 0xce, 0xcc, 0x37, 0x71, 0xd8, 0xd1, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xcb, 0xd4, 0x29, 0x5f, 0x2a, 0x1f, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_RoleLoginRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_RoleLoginResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_RoleLogoutPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetRoleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetRoleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SearchRoleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SearchRoleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetAvatarRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetAvatarResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetAvatarFrameRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetAvatarFrameResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_ChangeNicknameRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_ChangeNicknameResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetOwnAvatarRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetOwnAvatarResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_ChangeLanguageRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_ChangeLanguageResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_PowerChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_ChangeBattleMapEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetRecentChatIdsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetRecentChatIdsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AddRecentChatIdsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AddRecentChatIdsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_DeleteRecentChatIdsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_DeleteRecentChatIdsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetBlackListRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetBlackListResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_LevelUpgradeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_LevelUpgradeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetUseHangUpExpItemInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetUseHangUpExpItemInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UseHangUpExpItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UseHangUpExpItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_LevelUpgradeManyRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_LevelUpgradeManyResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceOpenRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceOpenResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceBattleStartRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceBattleStartResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceBattleVictoryRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceBattleVictoryResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceBattleFinishRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceBattleFinishResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceUseItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceUseItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_RecommendFriendRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_RecommendFriendResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetReadPointRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetReadPointResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AddReadPointRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AddReadPointResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetReadPointRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetReadPointResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetSimpleRolesRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetSimpleRolesResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetUserSimpleInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetUserSimpleInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetUserCombatValueDetailsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetUserCombatValueDetailsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetBattleSpeedRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetBattleSpeedResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_ReadPointChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UserLevelChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UserCanGetExpFromHangPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GotAvatarPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UpdateTargetPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatGetRolesRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatGetRolesResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatSetLevelRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatSetLevelResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatResetExpSkipRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatResetExpSkipResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatPushToMobileRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatPushToMobileResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatAheadRegisterDayRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatAheadRegisterDayResponse.Get().(proto.Message)
	})
}

var poolUser = &sync.Pool{New: func() interface{} { return &User{} }}

func (m *User) ReleasePool() { m.Reset(); poolUser.Put(m); m = nil }

var poolUser_RoleLoginRequest = &sync.Pool{New: func() interface{} { return &User_RoleLoginRequest{} }}

func (m *User_RoleLoginRequest) ReleasePool() { m.Reset(); poolUser_RoleLoginRequest.Put(m); m = nil }

var poolUser_RoleLoginResponse = &sync.Pool{New: func() interface{} { return &User_RoleLoginResponse{} }}

func (m *User_RoleLoginResponse) ReleasePool() { m.Reset(); poolUser_RoleLoginResponse.Put(m); m = nil }

var poolUser_RoleLogoutPush = &sync.Pool{New: func() interface{} { return &User_RoleLogoutPush{} }}

func (m *User_RoleLogoutPush) ReleasePool() { m.Reset(); poolUser_RoleLogoutPush.Put(m); m = nil }

var poolUser_GetRoleRequest = &sync.Pool{New: func() interface{} { return &User_GetRoleRequest{} }}

func (m *User_GetRoleRequest) ReleasePool() { m.Reset(); poolUser_GetRoleRequest.Put(m); m = nil }

var poolUser_GetRoleResponse = &sync.Pool{New: func() interface{} { return &User_GetRoleResponse{} }}

func (m *User_GetRoleResponse) ReleasePool() { m.Reset(); poolUser_GetRoleResponse.Put(m); m = nil }

var poolUser_SearchRoleRequest = &sync.Pool{New: func() interface{} { return &User_SearchRoleRequest{} }}

func (m *User_SearchRoleRequest) ReleasePool() { m.Reset(); poolUser_SearchRoleRequest.Put(m); m = nil }

var poolUser_SearchRoleResponse = &sync.Pool{New: func() interface{} { return &User_SearchRoleResponse{} }}

func (m *User_SearchRoleResponse) ReleasePool() {
	m.Reset()
	poolUser_SearchRoleResponse.Put(m)
	m = nil
}

var poolUser_SetAvatarRequest = &sync.Pool{New: func() interface{} { return &User_SetAvatarRequest{} }}

func (m *User_SetAvatarRequest) ReleasePool() { m.Reset(); poolUser_SetAvatarRequest.Put(m); m = nil }

var poolUser_SetAvatarResponse = &sync.Pool{New: func() interface{} { return &User_SetAvatarResponse{} }}

func (m *User_SetAvatarResponse) ReleasePool() { m.Reset(); poolUser_SetAvatarResponse.Put(m); m = nil }

var poolUser_SetAvatarFrameRequest = &sync.Pool{New: func() interface{} { return &User_SetAvatarFrameRequest{} }}

func (m *User_SetAvatarFrameRequest) ReleasePool() {
	m.Reset()
	poolUser_SetAvatarFrameRequest.Put(m)
	m = nil
}

var poolUser_SetAvatarFrameResponse = &sync.Pool{New: func() interface{} { return &User_SetAvatarFrameResponse{} }}

func (m *User_SetAvatarFrameResponse) ReleasePool() {
	m.Reset()
	poolUser_SetAvatarFrameResponse.Put(m)
	m = nil
}

var poolUser_ChangeNicknameRequest = &sync.Pool{New: func() interface{} { return &User_ChangeNicknameRequest{} }}

func (m *User_ChangeNicknameRequest) ReleasePool() {
	m.Reset()
	poolUser_ChangeNicknameRequest.Put(m)
	m = nil
}

var poolUser_ChangeNicknameResponse = &sync.Pool{New: func() interface{} { return &User_ChangeNicknameResponse{} }}

func (m *User_ChangeNicknameResponse) ReleasePool() {
	m.Reset()
	poolUser_ChangeNicknameResponse.Put(m)
	m = nil
}

var poolUser_GetOwnAvatarRequest = &sync.Pool{New: func() interface{} { return &User_GetOwnAvatarRequest{} }}

func (m *User_GetOwnAvatarRequest) ReleasePool() {
	m.Reset()
	poolUser_GetOwnAvatarRequest.Put(m)
	m = nil
}

var poolUser_GetOwnAvatarResponse = &sync.Pool{New: func() interface{} { return &User_GetOwnAvatarResponse{} }}

func (m *User_GetOwnAvatarResponse) ReleasePool() {
	m.Reset()
	poolUser_GetOwnAvatarResponse.Put(m)
	m = nil
}

var poolUser_ChangeLanguageRequest = &sync.Pool{New: func() interface{} { return &User_ChangeLanguageRequest{} }}

func (m *User_ChangeLanguageRequest) ReleasePool() {
	m.Reset()
	poolUser_ChangeLanguageRequest.Put(m)
	m = nil
}

var poolUser_ChangeLanguageResponse = &sync.Pool{New: func() interface{} { return &User_ChangeLanguageResponse{} }}

func (m *User_ChangeLanguageResponse) ReleasePool() {
	m.Reset()
	poolUser_ChangeLanguageResponse.Put(m)
	m = nil
}

var poolUser_PowerChangePush = &sync.Pool{New: func() interface{} { return &User_PowerChangePush{} }}

func (m *User_PowerChangePush) ReleasePool() { m.Reset(); poolUser_PowerChangePush.Put(m); m = nil }

var poolUser_ChangeBattleMapEvent = &sync.Pool{New: func() interface{} { return &User_ChangeBattleMapEvent{} }}

func (m *User_ChangeBattleMapEvent) ReleasePool() {
	m.Reset()
	poolUser_ChangeBattleMapEvent.Put(m)
	m = nil
}

var poolUser_GetRecentChatIdsRequest = &sync.Pool{New: func() interface{} { return &User_GetRecentChatIdsRequest{} }}

func (m *User_GetRecentChatIdsRequest) ReleasePool() {
	m.Reset()
	poolUser_GetRecentChatIdsRequest.Put(m)
	m = nil
}

var poolUser_GetRecentChatIdsResponse = &sync.Pool{New: func() interface{} { return &User_GetRecentChatIdsResponse{} }}

func (m *User_GetRecentChatIdsResponse) ReleasePool() {
	m.Reset()
	poolUser_GetRecentChatIdsResponse.Put(m)
	m = nil
}

var poolUser_AddRecentChatIdsRequest = &sync.Pool{New: func() interface{} { return &User_AddRecentChatIdsRequest{} }}

func (m *User_AddRecentChatIdsRequest) ReleasePool() {
	m.Reset()
	poolUser_AddRecentChatIdsRequest.Put(m)
	m = nil
}

var poolUser_AddRecentChatIdsResponse = &sync.Pool{New: func() interface{} { return &User_AddRecentChatIdsResponse{} }}

func (m *User_AddRecentChatIdsResponse) ReleasePool() {
	m.Reset()
	poolUser_AddRecentChatIdsResponse.Put(m)
	m = nil
}

var poolUser_DeleteRecentChatIdsRequest = &sync.Pool{New: func() interface{} { return &User_DeleteRecentChatIdsRequest{} }}

func (m *User_DeleteRecentChatIdsRequest) ReleasePool() {
	m.Reset()
	poolUser_DeleteRecentChatIdsRequest.Put(m)
	m = nil
}

var poolUser_DeleteRecentChatIdsResponse = &sync.Pool{New: func() interface{} { return &User_DeleteRecentChatIdsResponse{} }}

func (m *User_DeleteRecentChatIdsResponse) ReleasePool() {
	m.Reset()
	poolUser_DeleteRecentChatIdsResponse.Put(m)
	m = nil
}

var poolUser_GetBlackListRequest = &sync.Pool{New: func() interface{} { return &User_GetBlackListRequest{} }}

func (m *User_GetBlackListRequest) ReleasePool() {
	m.Reset()
	poolUser_GetBlackListRequest.Put(m)
	m = nil
}

var poolUser_GetBlackListResponse = &sync.Pool{New: func() interface{} { return &User_GetBlackListResponse{} }}

func (m *User_GetBlackListResponse) ReleasePool() {
	m.Reset()
	poolUser_GetBlackListResponse.Put(m)
	m = nil
}

var poolUser_LevelUpgradeRequest = &sync.Pool{New: func() interface{} { return &User_LevelUpgradeRequest{} }}

func (m *User_LevelUpgradeRequest) ReleasePool() {
	m.Reset()
	poolUser_LevelUpgradeRequest.Put(m)
	m = nil
}

var poolUser_LevelUpgradeResponse = &sync.Pool{New: func() interface{} { return &User_LevelUpgradeResponse{} }}

func (m *User_LevelUpgradeResponse) ReleasePool() {
	m.Reset()
	poolUser_LevelUpgradeResponse.Put(m)
	m = nil
}

var poolUser_GetUseHangUpExpItemInfoRequest = &sync.Pool{New: func() interface{} { return &User_GetUseHangUpExpItemInfoRequest{} }}

func (m *User_GetUseHangUpExpItemInfoRequest) ReleasePool() {
	m.Reset()
	poolUser_GetUseHangUpExpItemInfoRequest.Put(m)
	m = nil
}

var poolUser_GetUseHangUpExpItemInfoResponse = &sync.Pool{New: func() interface{} { return &User_GetUseHangUpExpItemInfoResponse{} }}

func (m *User_GetUseHangUpExpItemInfoResponse) ReleasePool() {
	m.Reset()
	poolUser_GetUseHangUpExpItemInfoResponse.Put(m)
	m = nil
}

var poolUser_UseHangUpExpItemRequest = &sync.Pool{New: func() interface{} { return &User_UseHangUpExpItemRequest{} }}

func (m *User_UseHangUpExpItemRequest) ReleasePool() {
	m.Reset()
	poolUser_UseHangUpExpItemRequest.Put(m)
	m = nil
}

var poolUser_UseHangUpExpItemResponse = &sync.Pool{New: func() interface{} { return &User_UseHangUpExpItemResponse{} }}

func (m *User_UseHangUpExpItemResponse) ReleasePool() {
	m.Reset()
	poolUser_UseHangUpExpItemResponse.Put(m)
	m = nil
}

var poolUser_LevelUpgradeManyRequest = &sync.Pool{New: func() interface{} { return &User_LevelUpgradeManyRequest{} }}

func (m *User_LevelUpgradeManyRequest) ReleasePool() {
	m.Reset()
	poolUser_LevelUpgradeManyRequest.Put(m)
	m = nil
}

var poolUser_LevelUpgradeManyResponse = &sync.Pool{New: func() interface{} { return &User_LevelUpgradeManyResponse{} }}

func (m *User_LevelUpgradeManyResponse) ReleasePool() {
	m.Reset()
	poolUser_LevelUpgradeManyResponse.Put(m)
	m = nil
}

var poolUser_AdvanceInfoRequest = &sync.Pool{New: func() interface{} { return &User_AdvanceInfoRequest{} }}

func (m *User_AdvanceInfoRequest) ReleasePool() {
	m.Reset()
	poolUser_AdvanceInfoRequest.Put(m)
	m = nil
}

var poolUser_AdvanceInfoResponse = &sync.Pool{New: func() interface{} { return &User_AdvanceInfoResponse{} }}

func (m *User_AdvanceInfoResponse) ReleasePool() {
	m.Reset()
	poolUser_AdvanceInfoResponse.Put(m)
	m = nil
}

var poolUser_AdvanceOpenRequest = &sync.Pool{New: func() interface{} { return &User_AdvanceOpenRequest{} }}

func (m *User_AdvanceOpenRequest) ReleasePool() {
	m.Reset()
	poolUser_AdvanceOpenRequest.Put(m)
	m = nil
}

var poolUser_AdvanceOpenResponse = &sync.Pool{New: func() interface{} { return &User_AdvanceOpenResponse{} }}

func (m *User_AdvanceOpenResponse) ReleasePool() {
	m.Reset()
	poolUser_AdvanceOpenResponse.Put(m)
	m = nil
}

var poolUser_AdvanceBattleStartRequest = &sync.Pool{New: func() interface{} { return &User_AdvanceBattleStartRequest{} }}

func (m *User_AdvanceBattleStartRequest) ReleasePool() {
	m.Reset()
	poolUser_AdvanceBattleStartRequest.Put(m)
	m = nil
}

var poolUser_AdvanceBattleStartResponse = &sync.Pool{New: func() interface{} { return &User_AdvanceBattleStartResponse{} }}

func (m *User_AdvanceBattleStartResponse) ReleasePool() {
	m.Reset()
	poolUser_AdvanceBattleStartResponse.Put(m)
	m = nil
}

var poolUser_AdvanceBattleVictoryRequest = &sync.Pool{New: func() interface{} { return &User_AdvanceBattleVictoryRequest{} }}

func (m *User_AdvanceBattleVictoryRequest) ReleasePool() {
	m.Reset()
	poolUser_AdvanceBattleVictoryRequest.Put(m)
	m = nil
}

var poolUser_AdvanceBattleVictoryResponse = &sync.Pool{New: func() interface{} { return &User_AdvanceBattleVictoryResponse{} }}

func (m *User_AdvanceBattleVictoryResponse) ReleasePool() {
	m.Reset()
	poolUser_AdvanceBattleVictoryResponse.Put(m)
	m = nil
}

var poolUser_AdvanceBattleFinishRequest = &sync.Pool{New: func() interface{} { return &User_AdvanceBattleFinishRequest{} }}

func (m *User_AdvanceBattleFinishRequest) ReleasePool() {
	m.Reset()
	poolUser_AdvanceBattleFinishRequest.Put(m)
	m = nil
}

var poolUser_AdvanceBattleFinishResponse = &sync.Pool{New: func() interface{} { return &User_AdvanceBattleFinishResponse{} }}

func (m *User_AdvanceBattleFinishResponse) ReleasePool() {
	m.Reset()
	poolUser_AdvanceBattleFinishResponse.Put(m)
	m = nil
}

var poolUser_AdvanceUseItemRequest = &sync.Pool{New: func() interface{} { return &User_AdvanceUseItemRequest{} }}

func (m *User_AdvanceUseItemRequest) ReleasePool() {
	m.Reset()
	poolUser_AdvanceUseItemRequest.Put(m)
	m = nil
}

var poolUser_AdvanceUseItemResponse = &sync.Pool{New: func() interface{} { return &User_AdvanceUseItemResponse{} }}

func (m *User_AdvanceUseItemResponse) ReleasePool() {
	m.Reset()
	poolUser_AdvanceUseItemResponse.Put(m)
	m = nil
}

var poolUser_RecommendFriendRequest = &sync.Pool{New: func() interface{} { return &User_RecommendFriendRequest{} }}

func (m *User_RecommendFriendRequest) ReleasePool() {
	m.Reset()
	poolUser_RecommendFriendRequest.Put(m)
	m = nil
}

var poolUser_RecommendFriendResponse = &sync.Pool{New: func() interface{} { return &User_RecommendFriendResponse{} }}

func (m *User_RecommendFriendResponse) ReleasePool() {
	m.Reset()
	poolUser_RecommendFriendResponse.Put(m)
	m = nil
}

var poolUser_GetReadPointRequest = &sync.Pool{New: func() interface{} { return &User_GetReadPointRequest{} }}

func (m *User_GetReadPointRequest) ReleasePool() {
	m.Reset()
	poolUser_GetReadPointRequest.Put(m)
	m = nil
}

var poolUser_GetReadPointResponse = &sync.Pool{New: func() interface{} { return &User_GetReadPointResponse{} }}

func (m *User_GetReadPointResponse) ReleasePool() {
	m.Reset()
	poolUser_GetReadPointResponse.Put(m)
	m = nil
}

var poolUser_AddReadPointRequest = &sync.Pool{New: func() interface{} { return &User_AddReadPointRequest{} }}

func (m *User_AddReadPointRequest) ReleasePool() {
	m.Reset()
	poolUser_AddReadPointRequest.Put(m)
	m = nil
}

var poolUser_AddReadPointResponse = &sync.Pool{New: func() interface{} { return &User_AddReadPointResponse{} }}

func (m *User_AddReadPointResponse) ReleasePool() {
	m.Reset()
	poolUser_AddReadPointResponse.Put(m)
	m = nil
}

var poolUser_SetReadPointRequest = &sync.Pool{New: func() interface{} { return &User_SetReadPointRequest{} }}

func (m *User_SetReadPointRequest) ReleasePool() {
	m.Reset()
	poolUser_SetReadPointRequest.Put(m)
	m = nil
}

var poolUser_SetReadPointResponse = &sync.Pool{New: func() interface{} { return &User_SetReadPointResponse{} }}

func (m *User_SetReadPointResponse) ReleasePool() {
	m.Reset()
	poolUser_SetReadPointResponse.Put(m)
	m = nil
}

var poolUser_GetSimpleRolesRequest = &sync.Pool{New: func() interface{} { return &User_GetSimpleRolesRequest{} }}

func (m *User_GetSimpleRolesRequest) ReleasePool() {
	m.Reset()
	poolUser_GetSimpleRolesRequest.Put(m)
	m = nil
}

var poolUser_GetSimpleRolesResponse = &sync.Pool{New: func() interface{} { return &User_GetSimpleRolesResponse{} }}

func (m *User_GetSimpleRolesResponse) ReleasePool() {
	m.Reset()
	poolUser_GetSimpleRolesResponse.Put(m)
	m = nil
}

var poolUser_GetUserSimpleInfoRequest = &sync.Pool{New: func() interface{} { return &User_GetUserSimpleInfoRequest{} }}

func (m *User_GetUserSimpleInfoRequest) ReleasePool() {
	m.Reset()
	poolUser_GetUserSimpleInfoRequest.Put(m)
	m = nil
}

var poolUser_GetUserSimpleInfoResponse = &sync.Pool{New: func() interface{} { return &User_GetUserSimpleInfoResponse{} }}

func (m *User_GetUserSimpleInfoResponse) ReleasePool() {
	m.Reset()
	poolUser_GetUserSimpleInfoResponse.Put(m)
	m = nil
}

var poolUser_GetUserCombatValueDetailsRequest = &sync.Pool{New: func() interface{} { return &User_GetUserCombatValueDetailsRequest{} }}

func (m *User_GetUserCombatValueDetailsRequest) ReleasePool() {
	m.Reset()
	poolUser_GetUserCombatValueDetailsRequest.Put(m)
	m = nil
}

var poolUser_GetUserCombatValueDetailsResponse = &sync.Pool{New: func() interface{} { return &User_GetUserCombatValueDetailsResponse{} }}

func (m *User_GetUserCombatValueDetailsResponse) ReleasePool() {
	m.Reset()
	poolUser_GetUserCombatValueDetailsResponse.Put(m)
	m = nil
}

var poolUser_SetBattleSpeedRequest = &sync.Pool{New: func() interface{} { return &User_SetBattleSpeedRequest{} }}

func (m *User_SetBattleSpeedRequest) ReleasePool() {
	m.Reset()
	poolUser_SetBattleSpeedRequest.Put(m)
	m = nil
}

var poolUser_SetBattleSpeedResponse = &sync.Pool{New: func() interface{} { return &User_SetBattleSpeedResponse{} }}

func (m *User_SetBattleSpeedResponse) ReleasePool() {
	m.Reset()
	poolUser_SetBattleSpeedResponse.Put(m)
	m = nil
}

var poolUser_ReadPointChangePush = &sync.Pool{New: func() interface{} { return &User_ReadPointChangePush{} }}

func (m *User_ReadPointChangePush) ReleasePool() {
	m.Reset()
	poolUser_ReadPointChangePush.Put(m)
	m = nil
}

var poolUser_UserLevelChangePush = &sync.Pool{New: func() interface{} { return &User_UserLevelChangePush{} }}

func (m *User_UserLevelChangePush) ReleasePool() {
	m.Reset()
	poolUser_UserLevelChangePush.Put(m)
	m = nil
}

var poolUser_UserCanGetExpFromHangPush = &sync.Pool{New: func() interface{} { return &User_UserCanGetExpFromHangPush{} }}

func (m *User_UserCanGetExpFromHangPush) ReleasePool() {
	m.Reset()
	poolUser_UserCanGetExpFromHangPush.Put(m)
	m = nil
}

var poolUser_GotAvatarPush = &sync.Pool{New: func() interface{} { return &User_GotAvatarPush{} }}

func (m *User_GotAvatarPush) ReleasePool() { m.Reset(); poolUser_GotAvatarPush.Put(m); m = nil }

var poolUser_UpdateTargetPush = &sync.Pool{New: func() interface{} { return &User_UpdateTargetPush{} }}

func (m *User_UpdateTargetPush) ReleasePool() { m.Reset(); poolUser_UpdateTargetPush.Put(m); m = nil }

var poolUser_CheatGetRolesRequest = &sync.Pool{New: func() interface{} { return &User_CheatGetRolesRequest{} }}

func (m *User_CheatGetRolesRequest) ReleasePool() {
	m.Reset()
	poolUser_CheatGetRolesRequest.Put(m)
	m = nil
}

var poolUser_CheatGetRolesResponse = &sync.Pool{New: func() interface{} { return &User_CheatGetRolesResponse{} }}

func (m *User_CheatGetRolesResponse) ReleasePool() {
	m.Reset()
	poolUser_CheatGetRolesResponse.Put(m)
	m = nil
}

var poolUser_CheatSetLevelRequest = &sync.Pool{New: func() interface{} { return &User_CheatSetLevelRequest{} }}

func (m *User_CheatSetLevelRequest) ReleasePool() {
	m.Reset()
	poolUser_CheatSetLevelRequest.Put(m)
	m = nil
}

var poolUser_CheatSetLevelResponse = &sync.Pool{New: func() interface{} { return &User_CheatSetLevelResponse{} }}

func (m *User_CheatSetLevelResponse) ReleasePool() {
	m.Reset()
	poolUser_CheatSetLevelResponse.Put(m)
	m = nil
}

var poolUser_CheatResetExpSkipRequest = &sync.Pool{New: func() interface{} { return &User_CheatResetExpSkipRequest{} }}

func (m *User_CheatResetExpSkipRequest) ReleasePool() {
	m.Reset()
	poolUser_CheatResetExpSkipRequest.Put(m)
	m = nil
}

var poolUser_CheatResetExpSkipResponse = &sync.Pool{New: func() interface{} { return &User_CheatResetExpSkipResponse{} }}

func (m *User_CheatResetExpSkipResponse) ReleasePool() {
	m.Reset()
	poolUser_CheatResetExpSkipResponse.Put(m)
	m = nil
}

var poolUser_CheatPushToMobileRequest = &sync.Pool{New: func() interface{} { return &User_CheatPushToMobileRequest{} }}

func (m *User_CheatPushToMobileRequest) ReleasePool() {
	m.Reset()
	poolUser_CheatPushToMobileRequest.Put(m)
	m = nil
}

var poolUser_CheatPushToMobileResponse = &sync.Pool{New: func() interface{} { return &User_CheatPushToMobileResponse{} }}

func (m *User_CheatPushToMobileResponse) ReleasePool() {
	m.Reset()
	poolUser_CheatPushToMobileResponse.Put(m)
	m = nil
}

var poolUser_CheatAheadRegisterDayRequest = &sync.Pool{New: func() interface{} { return &User_CheatAheadRegisterDayRequest{} }}

func (m *User_CheatAheadRegisterDayRequest) ReleasePool() {
	m.Reset()
	poolUser_CheatAheadRegisterDayRequest.Put(m)
	m = nil
}

var poolUser_CheatAheadRegisterDayResponse = &sync.Pool{New: func() interface{} { return &User_CheatAheadRegisterDayResponse{} }}

func (m *User_CheatAheadRegisterDayResponse) ReleasePool() {
	m.Reset()
	poolUser_CheatAheadRegisterDayResponse.Put(m)
	m = nil
}
func (x UserErrorCode) String() string {
	s, ok := UserErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_RoleLoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_RoleLoginRequest)
	if !ok {
		that2, ok := that.(User_RoleLoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.AppKey != that1.AppKey {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	if this.RuleVersion != that1.RuleVersion {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.ClientVersion != that1.ClientVersion {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.IggId != that1.IggId {
		return false
	}
	return true
}
func (this *User_RoleLoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_RoleLoginResponse)
	if !ok {
		that2, ok := that.(User_RoleLoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.GuildPosition != that1.GuildPosition {
		return false
	}
	if this.LessServerId != that1.LessServerId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.CreateTime != that1.CreateTime {
		return false
	}
	if this.LevelIndex != that1.LevelIndex {
		return false
	}
	if this.ImHttp != that1.ImHttp {
		return false
	}
	if this.ImTcp != that1.ImTcp {
		return false
	}
	if this.BattleSpeed != that1.BattleSpeed {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.Recharge != that1.Recharge {
		return false
	}
	return true
}
func (this *User_RoleLogoutPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_RoleLogoutPush)
	if !ok {
		that2, ok := that.(User_RoleLogoutPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientVersion != that1.ClientVersion {
		return false
	}
	return true
}
func (this *User_GetRoleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetRoleRequest)
	if !ok {
		that2, ok := that.(User_GetRoleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *User_GetRoleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetRoleResponse)
	if !ok {
		that2, ok := that.(User_GetRoleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Role.Equal(that1.Role) {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if len(this.Formation) != len(that1.Formation) {
		return false
	}
	for i := range this.Formation {
		if this.Formation[i] != that1.Formation[i] {
			return false
		}
	}
	return true
}
func (this *User_SearchRoleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SearchRoleRequest)
	if !ok {
		that2, ok := that.(User_SearchRoleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Input != that1.Input {
		return false
	}
	return true
}
func (this *User_SearchRoleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SearchRoleResponse)
	if !ok {
		that2, ok := that.(User_SearchRoleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Role) != len(that1.Role) {
		return false
	}
	for i := range this.Role {
		if !this.Role[i].Equal(that1.Role[i]) {
			return false
		}
	}
	return true
}
func (this *User_SetAvatarRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetAvatarRequest)
	if !ok {
		that2, ok := that.(User_SetAvatarRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	return true
}
func (this *User_SetAvatarResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetAvatarResponse)
	if !ok {
		that2, ok := that.(User_SetAvatarResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	return true
}
func (this *User_SetAvatarFrameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetAvatarFrameRequest)
	if !ok {
		that2, ok := that.(User_SetAvatarFrameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	return true
}
func (this *User_SetAvatarFrameResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetAvatarFrameResponse)
	if !ok {
		that2, ok := that.(User_SetAvatarFrameResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	return true
}
func (this *User_ChangeNicknameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_ChangeNicknameRequest)
	if !ok {
		that2, ok := that.(User_ChangeNicknameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *User_ChangeNicknameResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_ChangeNicknameResponse)
	if !ok {
		that2, ok := that.(User_ChangeNicknameResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *User_GetOwnAvatarRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetOwnAvatarRequest)
	if !ok {
		that2, ok := that.(User_GetOwnAvatarRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetOwnAvatarResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetOwnAvatarResponse)
	if !ok {
		that2, ok := that.(User_GetOwnAvatarResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OwnAvatar) != len(that1.OwnAvatar) {
		return false
	}
	for i := range this.OwnAvatar {
		if !this.OwnAvatar[i].Equal(that1.OwnAvatar[i]) {
			return false
		}
	}
	if !this.CurAvatar.Equal(that1.CurAvatar) {
		return false
	}
	return true
}
func (this *User_ChangeLanguageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_ChangeLanguageRequest)
	if !ok {
		that2, ok := that.(User_ChangeLanguageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	return true
}
func (this *User_ChangeLanguageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_ChangeLanguageResponse)
	if !ok {
		that2, ok := that.(User_ChangeLanguageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	return true
}
func (this *User_PowerChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_PowerChangePush)
	if !ok {
		that2, ok := that.(User_PowerChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	return true
}
func (this *User_ChangeBattleMapEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_ChangeBattleMapEvent)
	if !ok {
		that2, ok := that.(User_ChangeBattleMapEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *User_GetRecentChatIdsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetRecentChatIdsRequest)
	if !ok {
		that2, ok := that.(User_GetRecentChatIdsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetRecentChatIdsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetRecentChatIdsResponse)
	if !ok {
		that2, ok := that.(User_GetRecentChatIdsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoleIds) != len(that1.RoleIds) {
		return false
	}
	for i := range this.RoleIds {
		if this.RoleIds[i] != that1.RoleIds[i] {
			return false
		}
	}
	return true
}
func (this *User_AddRecentChatIdsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AddRecentChatIdsRequest)
	if !ok {
		that2, ok := that.(User_AddRecentChatIdsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *User_AddRecentChatIdsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AddRecentChatIdsResponse)
	if !ok {
		that2, ok := that.(User_AddRecentChatIdsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_DeleteRecentChatIdsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_DeleteRecentChatIdsRequest)
	if !ok {
		that2, ok := that.(User_DeleteRecentChatIdsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *User_DeleteRecentChatIdsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_DeleteRecentChatIdsResponse)
	if !ok {
		that2, ok := that.(User_DeleteRecentChatIdsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetBlackListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetBlackListRequest)
	if !ok {
		that2, ok := that.(User_GetBlackListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetBlackListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetBlackListResponse)
	if !ok {
		that2, ok := that.(User_GetBlackListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Blacklist) != len(that1.Blacklist) {
		return false
	}
	for i := range this.Blacklist {
		if !this.Blacklist[i].Equal(that1.Blacklist[i]) {
			return false
		}
	}
	return true
}
func (this *User_LevelUpgradeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_LevelUpgradeRequest)
	if !ok {
		that2, ok := that.(User_LevelUpgradeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_LevelUpgradeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_LevelUpgradeResponse)
	if !ok {
		that2, ok := that.(User_LevelUpgradeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.LevelIndex != that1.LevelIndex {
		return false
	}
	return true
}
func (this *User_GetUseHangUpExpItemInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetUseHangUpExpItemInfoRequest)
	if !ok {
		that2, ok := that.(User_GetUseHangUpExpItemInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetUseHangUpExpItemInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetUseHangUpExpItemInfoResponse)
	if !ok {
		that2, ok := that.(User_GetUseHangUpExpItemInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalDuration != that1.TotalDuration {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if len(this.RateDuration) != len(that1.RateDuration) {
		return false
	}
	for i := range this.RateDuration {
		if this.RateDuration[i] != that1.RateDuration[i] {
			return false
		}
	}
	if this.UseCount != that1.UseCount {
		return false
	}
	return true
}
func (this *User_UseHangUpExpItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UseHangUpExpItemRequest)
	if !ok {
		that2, ok := that.(User_UseHangUpExpItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	return true
}
func (this *User_UseHangUpExpItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UseHangUpExpItemResponse)
	if !ok {
		that2, ok := that.(User_UseHangUpExpItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalDuration != that1.TotalDuration {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if len(this.RateDuration) != len(that1.RateDuration) {
		return false
	}
	for i := range this.RateDuration {
		if this.RateDuration[i] != that1.RateDuration[i] {
			return false
		}
	}
	if this.UseCount != that1.UseCount {
		return false
	}
	if len(this.Exp) != len(that1.Exp) {
		return false
	}
	for i := range this.Exp {
		if this.Exp[i] != that1.Exp[i] {
			return false
		}
	}
	return true
}
func (this *User_LevelUpgradeManyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_LevelUpgradeManyRequest)
	if !ok {
		that2, ok := that.(User_LevelUpgradeManyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *User_LevelUpgradeManyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_LevelUpgradeManyResponse)
	if !ok {
		that2, ok := that.(User_LevelUpgradeManyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.LevelIndex != that1.LevelIndex {
		return false
	}
	return true
}
func (this *User_AdvanceInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceInfoRequest)
	if !ok {
		that2, ok := that.(User_AdvanceInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_AdvanceInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceInfoResponse)
	if !ok {
		that2, ok := that.(User_AdvanceInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsOpen != that1.IsOpen {
		return false
	}
	if len(this.BuffId) != len(that1.BuffId) {
		return false
	}
	for i := range this.BuffId {
		if this.BuffId[i] != that1.BuffId[i] {
			return false
		}
	}
	if this.Overlay != that1.Overlay {
		return false
	}
	if this.ChallengeTime != that1.ChallengeTime {
		return false
	}
	if this.CanAdvance != that1.CanAdvance {
		return false
	}
	if this.ChallengeCost != that1.ChallengeCost {
		return false
	}
	return true
}
func (this *User_AdvanceOpenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceOpenRequest)
	if !ok {
		that2, ok := that.(User_AdvanceOpenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_AdvanceOpenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceOpenResponse)
	if !ok {
		that2, ok := that.(User_AdvanceOpenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_AdvanceBattleStartRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceBattleStartRequest)
	if !ok {
		that2, ok := that.(User_AdvanceBattleStartRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_AdvanceBattleStartResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceBattleStartResponse)
	if !ok {
		that2, ok := that.(User_AdvanceBattleStartResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if !this.Sbp.Equal(that1.Sbp) {
		return false
	}
	return true
}
func (this *User_AdvanceBattleVictoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceBattleVictoryRequest)
	if !ok {
		that2, ok := that.(User_AdvanceBattleVictoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *User_AdvanceBattleVictoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceBattleVictoryResponse)
	if !ok {
		that2, ok := that.(User_AdvanceBattleVictoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_AdvanceBattleFinishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceBattleFinishRequest)
	if !ok {
		that2, ok := that.(User_AdvanceBattleFinishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Victory != that1.Victory {
		return false
	}
	return true
}
func (this *User_AdvanceBattleFinishResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceBattleFinishResponse)
	if !ok {
		that2, ok := that.(User_AdvanceBattleFinishResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_AdvanceUseItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceUseItemRequest)
	if !ok {
		that2, ok := that.(User_AdvanceUseItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	return true
}
func (this *User_AdvanceUseItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceUseItemResponse)
	if !ok {
		that2, ok := that.(User_AdvanceUseItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChallengeTime != that1.ChallengeTime {
		return false
	}
	return true
}
func (this *User_RecommendFriendRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_RecommendFriendRequest)
	if !ok {
		that2, ok := that.(User_RecommendFriendRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	return true
}
func (this *User_RecommendFriendResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_RecommendFriendResponse)
	if !ok {
		that2, ok := that.(User_RecommendFriendResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if !this.Roles[i].Equal(that1.Roles[i]) {
			return false
		}
	}
	return true
}
func (this *User_GetReadPointRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetReadPointRequest)
	if !ok {
		that2, ok := that.(User_GetReadPointRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetReadPointResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetReadPointResponse)
	if !ok {
		that2, ok := that.(User_GetReadPointResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RedPoints) != len(that1.RedPoints) {
		return false
	}
	for i := range this.RedPoints {
		if this.RedPoints[i] != that1.RedPoints[i] {
			return false
		}
	}
	return true
}
func (this *User_AddReadPointRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AddReadPointRequest)
	if !ok {
		that2, ok := that.(User_AddReadPointRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Cnt != that1.Cnt {
		return false
	}
	return true
}
func (this *User_AddReadPointResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AddReadPointResponse)
	if !ok {
		that2, ok := that.(User_AddReadPointResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Cnt != that1.Cnt {
		return false
	}
	return true
}
func (this *User_SetReadPointRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetReadPointRequest)
	if !ok {
		that2, ok := that.(User_SetReadPointRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Cnt != that1.Cnt {
		return false
	}
	return true
}
func (this *User_SetReadPointResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetReadPointResponse)
	if !ok {
		that2, ok := that.(User_SetReadPointResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Cnt != that1.Cnt {
		return false
	}
	return true
}
func (this *User_GetSimpleRolesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetSimpleRolesRequest)
	if !ok {
		that2, ok := that.(User_GetSimpleRolesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoleIds) != len(that1.RoleIds) {
		return false
	}
	for i := range this.RoleIds {
		if this.RoleIds[i] != that1.RoleIds[i] {
			return false
		}
	}
	return true
}
func (this *User_GetSimpleRolesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetSimpleRolesResponse)
	if !ok {
		that2, ok := that.(User_GetSimpleRolesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if !this.Roles[i].Equal(that1.Roles[i]) {
			return false
		}
	}
	return true
}
func (this *User_GetUserSimpleInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetUserSimpleInfoRequest)
	if !ok {
		that2, ok := that.(User_GetUserSimpleInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *User_GetUserSimpleInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetUserSimpleInfoResponse)
	if !ok {
		that2, ok := that.(User_GetUserSimpleInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *User_GetUserCombatValueDetailsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetUserCombatValueDetailsRequest)
	if !ok {
		that2, ok := that.(User_GetUserCombatValueDetailsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *User_GetUserCombatValueDetailsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetUserCombatValueDetailsResponse)
	if !ok {
		that2, ok := that.(User_GetUserCombatValueDetailsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Self) != len(that1.Self) {
		return false
	}
	for i := range this.Self {
		if this.Self[i] != that1.Self[i] {
			return false
		}
	}
	if len(this.Target) != len(that1.Target) {
		return false
	}
	for i := range this.Target {
		if this.Target[i] != that1.Target[i] {
			return false
		}
	}
	return true
}
func (this *User_SetBattleSpeedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetBattleSpeedRequest)
	if !ok {
		that2, ok := that.(User_SetBattleSpeedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	return true
}
func (this *User_SetBattleSpeedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetBattleSpeedResponse)
	if !ok {
		that2, ok := that.(User_SetBattleSpeedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_ReadPointChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_ReadPointChangePush)
	if !ok {
		that2, ok := that.(User_ReadPointChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RedPoints) != len(that1.RedPoints) {
		return false
	}
	for i := range this.RedPoints {
		if this.RedPoints[i] != that1.RedPoints[i] {
			return false
		}
	}
	return true
}
func (this *User_UserLevelChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UserLevelChangePush)
	if !ok {
		that2, ok := that.(User_UserLevelChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.LevelIndex != that1.LevelIndex {
		return false
	}
	if this.LevelIncr != that1.LevelIncr {
		return false
	}
	if this.LevelIndexIncr != that1.LevelIndexIncr {
		return false
	}
	return true
}
func (this *User_UserCanGetExpFromHangPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UserCanGetExpFromHangPush)
	if !ok {
		that2, ok := that.(User_UserCanGetExpFromHangPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Can != that1.Can {
		return false
	}
	return true
}
func (this *User_GotAvatarPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GotAvatarPush)
	if !ok {
		that2, ok := that.(User_GotAvatarPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	return true
}
func (this *User_UpdateTargetPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UpdateTargetPush)
	if !ok {
		that2, ok := that.(User_UpdateTargetPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Replace != that1.Replace {
		return false
	}
	return true
}
func (this *User_CheatGetRolesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatGetRolesRequest)
	if !ok {
		that2, ok := that.(User_CheatGetRolesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_CheatGetRolesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatGetRolesResponse)
	if !ok {
		that2, ok := that.(User_CheatGetRolesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if !this.Roles[i].Equal(that1.Roles[i]) {
			return false
		}
	}
	return true
}
func (this *User_CheatSetLevelRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatSetLevelRequest)
	if !ok {
		that2, ok := that.(User_CheatSetLevelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *User_CheatSetLevelResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatSetLevelResponse)
	if !ok {
		that2, ok := that.(User_CheatSetLevelResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.LevelIndex != that1.LevelIndex {
		return false
	}
	return true
}
func (this *User_CheatResetExpSkipRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatResetExpSkipRequest)
	if !ok {
		that2, ok := that.(User_CheatResetExpSkipRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_CheatResetExpSkipResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatResetExpSkipResponse)
	if !ok {
		that2, ok := that.(User_CheatResetExpSkipResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalDuration != that1.TotalDuration {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if len(this.RateDuration) != len(that1.RateDuration) {
		return false
	}
	for i := range this.RateDuration {
		if this.RateDuration[i] != that1.RateDuration[i] {
			return false
		}
	}
	if this.UseCount != that1.UseCount {
		return false
	}
	return true
}
func (this *User_CheatPushToMobileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatPushToMobileRequest)
	if !ok {
		that2, ok := that.(User_CheatPushToMobileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IggId != that1.IggId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.Context != that1.Context {
		return false
	}
	return true
}
func (this *User_CheatPushToMobileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatPushToMobileResponse)
	if !ok {
		that2, ok := that.(User_CheatPushToMobileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_CheatAheadRegisterDayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatAheadRegisterDayRequest)
	if !ok {
		that2, ok := that.(User_CheatAheadRegisterDayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	return true
}
func (this *User_CheatAheadRegisterDayResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatAheadRegisterDayResponse)
	if !ok {
		that2, ok := that.(User_CheatAheadRegisterDayResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_RoleLoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_RoleLoginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_RoleLoginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IggId) > 0 {
		i -= len(m.IggId)
		copy(dAtA[i:], m.IggId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.IggId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.GameId) > 0 {
		i -= len(m.GameId)
		copy(dAtA[i:], m.GameId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.GameId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintUser(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BattleId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Version != 0 {
		i = encodeVarintUser(dAtA, i, uint64((uint64(m.Version)<<1)^uint64((m.Version>>63))))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RuleVersion) > 0 {
		i -= len(m.RuleVersion)
		copy(dAtA[i:], m.RuleVersion)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RuleVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Language != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintUser(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ServerId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_RoleLoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_RoleLoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_RoleLoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Recharge != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Recharge))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.ServerId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.BattleSpeed != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BattleSpeed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ImTcp) > 0 {
		i -= len(m.ImTcp)
		copy(dAtA[i:], m.ImTcp)
		i = encodeVarintUser(dAtA, i, uint64(len(m.ImTcp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ImHttp) > 0 {
		i -= len(m.ImHttp)
		copy(dAtA[i:], m.ImHttp)
		i = encodeVarintUser(dAtA, i, uint64(len(m.ImHttp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.LevelIndex != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LevelIndex))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CreateTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.Language != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LessServerId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LessServerId))
		i--
		dAtA[i] = 0x60
	}
	if m.GuildPosition != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GuildPosition))
		i--
		dAtA[i] = 0x58
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x52
	}
	if m.Title != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x48
	}
	if m.Power != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x40
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x38
	}
	if m.AvatarId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x30
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x28
	}
	if m.BattleServerId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x20
	}
	if m.MapId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_RoleLogoutPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_RoleLogoutPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_RoleLogoutPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintUser(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_GetRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_GetRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Formation) > 0 {
		dAtA2 := make([]byte, len(m.Formation)*10)
		var j1 int
		for _, num1 := range m.Formation {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintUser(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_SearchRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SearchRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SearchRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_SearchRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SearchRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SearchRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Role) > 0 {
		for iNdEx := len(m.Role) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Role[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_SetAvatarRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetAvatarRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetAvatarRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_SetAvatarResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetAvatarResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetAvatarResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_SetAvatarFrameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetAvatarFrameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetAvatarFrameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarFrame != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_SetAvatarFrameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetAvatarFrameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetAvatarFrameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarFrame != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_ChangeNicknameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_ChangeNicknameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_ChangeNicknameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_ChangeNicknameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_ChangeNicknameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_ChangeNicknameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_GetOwnAvatarRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetOwnAvatarRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetOwnAvatarRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetOwnAvatarResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetOwnAvatarResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetOwnAvatarResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurAvatar != nil {
		{
			size, err := m.CurAvatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnAvatar) > 0 {
		for k := range m.OwnAvatar {
			v := m.OwnAvatar[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintUser(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_ChangeLanguageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_ChangeLanguageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_ChangeLanguageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Language != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_ChangeLanguageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_ChangeLanguageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_ChangeLanguageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Language != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_PowerChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_PowerChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_PowerChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_ChangeBattleMapEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_ChangeBattleMapEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_ChangeBattleMapEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_GetRecentChatIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetRecentChatIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetRecentChatIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetRecentChatIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetRecentChatIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetRecentChatIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		for iNdEx := len(m.RoleIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleIds[iNdEx])
			copy(dAtA[i:], m.RoleIds[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.RoleIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_AddRecentChatIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AddRecentChatIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AddRecentChatIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_AddRecentChatIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AddRecentChatIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AddRecentChatIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_DeleteRecentChatIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_DeleteRecentChatIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_DeleteRecentChatIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_DeleteRecentChatIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_DeleteRecentChatIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_DeleteRecentChatIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetBlackListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetBlackListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetBlackListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetBlackListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetBlackListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetBlackListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blacklist) > 0 {
		for iNdEx := len(m.Blacklist) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blacklist[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_LevelUpgradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_LevelUpgradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_LevelUpgradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_LevelUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_LevelUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_LevelUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LevelIndex != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LevelIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_GetUseHangUpExpItemInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetUseHangUpExpItemInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetUseHangUpExpItemInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetUseHangUpExpItemInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetUseHangUpExpItemInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetUseHangUpExpItemInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseCount != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UseCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RateDuration) > 0 {
		for k := range m.RateDuration {
			v := m.RateDuration[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Rate != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalDuration != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TotalDuration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_UseHangUpExpItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UseHangUpExpItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UseHangUpExpItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_UseHangUpExpItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UseHangUpExpItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UseHangUpExpItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Exp) > 0 {
		for k := range m.Exp {
			v := m.Exp[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.UseCount != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UseCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RateDuration) > 0 {
		for k := range m.RateDuration {
			v := m.RateDuration[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Rate != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalDuration != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TotalDuration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_LevelUpgradeManyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_LevelUpgradeManyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_LevelUpgradeManyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_LevelUpgradeManyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_LevelUpgradeManyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_LevelUpgradeManyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LevelIndex != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LevelIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_AdvanceInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_AdvanceInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeCost {
		i--
		if m.ChallengeCost {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CanAdvance {
		i--
		if m.CanAdvance {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ChallengeTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ChallengeTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Overlay != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Overlay))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BuffId) > 0 {
		dAtA7 := make([]byte, len(m.BuffId)*10)
		var j6 int
		for _, num1 := range m.BuffId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintUser(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_AdvanceOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_AdvanceOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_AdvanceBattleStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceBattleStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceBattleStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_AdvanceBattleStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceBattleStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceBattleStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sbp != nil {
		{
			size, err := m.Sbp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BattleId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.MapId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_AdvanceBattleVictoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceBattleVictoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceBattleVictoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_AdvanceBattleVictoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceBattleVictoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceBattleVictoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_AdvanceBattleFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceBattleFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceBattleFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Victory {
		i--
		if m.Victory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_AdvanceBattleFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceBattleFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceBattleFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_AdvanceUseItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceUseItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceUseItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_AdvanceUseItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceUseItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceUseItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ChallengeTime))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *User_RecommendFriendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_RecommendFriendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_RecommendFriendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Language != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_RecommendFriendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_RecommendFriendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_RecommendFriendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_GetReadPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetReadPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetReadPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetReadPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetReadPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetReadPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedPoints) > 0 {
		for k := range m.RedPoints {
			v := m.RedPoints[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUser(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_AddReadPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AddReadPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AddReadPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cnt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Cnt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_AddReadPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AddReadPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AddReadPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cnt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Cnt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_SetReadPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetReadPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetReadPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cnt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Cnt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_SetReadPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetReadPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetReadPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cnt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Cnt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_GetSimpleRolesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetSimpleRolesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetSimpleRolesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		for iNdEx := len(m.RoleIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleIds[iNdEx])
			copy(dAtA[i:], m.RoleIds[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.RoleIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_GetSimpleRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetSimpleRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetSimpleRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_GetUserSimpleInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetUserSimpleInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetUserSimpleInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_GetUserSimpleInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetUserSimpleInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetUserSimpleInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_GetUserCombatValueDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetUserCombatValueDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetUserCombatValueDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_GetUserCombatValueDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetUserCombatValueDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetUserCombatValueDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		for k := range m.Target {
			v := m.Target[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Self) > 0 {
		for k := range m.Self {
			v := m.Self[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_SetBattleSpeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetBattleSpeedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetBattleSpeedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Speed != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Speed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_SetBattleSpeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetBattleSpeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetBattleSpeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_ReadPointChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_ReadPointChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_ReadPointChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedPoints) > 0 {
		for k := range m.RedPoints {
			v := m.RedPoints[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUser(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_UserLevelChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UserLevelChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UserLevelChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LevelIndexIncr != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LevelIndexIncr))
		i--
		dAtA[i] = 0x20
	}
	if m.LevelIncr != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LevelIncr))
		i--
		dAtA[i] = 0x18
	}
	if m.LevelIndex != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LevelIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_UserCanGetExpFromHangPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UserCanGetExpFromHangPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UserCanGetExpFromHangPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Can {
		i--
		if m.Can {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_GotAvatarPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GotAvatarPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GotAvatarPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x10
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_UpdateTargetPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UpdateTargetPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UpdateTargetPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Replace {
		i--
		if m.Replace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Typ != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatGetRolesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatGetRolesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatGetRolesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_CheatGetRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatGetRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatGetRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatSetLevelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatSetLevelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatSetLevelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatSetLevelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatSetLevelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatSetLevelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LevelIndex != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LevelIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatResetExpSkipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatResetExpSkipRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatResetExpSkipRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_CheatResetExpSkipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatResetExpSkipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatResetExpSkipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseCount != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UseCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RateDuration) > 0 {
		for k := range m.RateDuration {
			v := m.RateDuration[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Rate != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Rate))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalDuration != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TotalDuration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatPushToMobileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatPushToMobileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatPushToMobileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GameId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IggId) > 0 {
		i -= len(m.IggId)
		copy(dAtA[i:], m.IggId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.IggId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatPushToMobileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatPushToMobileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatPushToMobileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_CheatAheadRegisterDayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatAheadRegisterDayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatAheadRegisterDayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Day != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Day))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatAheadRegisterDayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatAheadRegisterDayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatAheadRegisterDayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *User) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_RoleLoginRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UserId != "" {
		w.RawByte('"')
		w.RawString("user_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UserId)
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.AppKey != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("app_key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AppKey)
		needWriteComma = true
	}
	if m.Language != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	if m.RuleVersion != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rule_version")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RuleVersion)
		needWriteComma = true
	}
	if m.Version != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("version")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Version))
		needWriteComma = true
	}
	if m.DeviceId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("device_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DeviceId)
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.ClientVersion != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("client_version")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ClientVersion)
		needWriteComma = true
	}
	if m.GameId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GameId)
		needWriteComma = true
	}
	if m.IggId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("igg_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.IggId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_RoleLoginResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Status != 0 {
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.GuildPosition != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_position")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GuildPosition))
		needWriteComma = true
	}
	if m.LessServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("less_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LessServerId))
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Language != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.CreateTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("create_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreateTime))
		needWriteComma = true
	}
	if m.LevelIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LevelIndex))
		needWriteComma = true
	}
	if m.ImHttp != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("im_http")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ImHttp)
		needWriteComma = true
	}
	if m.ImTcp != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("im_tcp")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ImTcp)
		needWriteComma = true
	}
	if m.BattleSpeed != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleSpeed))
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.Recharge != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("recharge")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Recharge))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_RoleLogoutPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ClientVersion != "" {
		w.RawByte('"')
		w.RawString("client_version")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ClientVersion)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetRoleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetRoleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	m.Role.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("formation")
	w.RawByte('"')
	w.RawByte(':')
	if m.Formation == nil {
		w.RawString("null")
	} else if len(m.Formation) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Formation {
			w.Int64(int64(v))
			if i != len(m.Formation)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SearchRoleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Input != "" {
		w.RawByte('"')
		w.RawString("input")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Input)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SearchRoleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	if m.Role == nil {
		w.RawString("null")
	} else if len(m.Role) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Role {
			v.JsonBytes(w)
			if i != len(m.Role)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetAvatarRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AvatarId != 0 {
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetAvatarResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AvatarId != 0 {
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetAvatarFrameRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AvatarFrame != 0 {
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetAvatarFrameResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AvatarFrame != 0 {
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_ChangeNicknameRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Nickname != "" {
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_ChangeNicknameResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Nickname != "" {
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetOwnAvatarRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetOwnAvatarResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("own_avatar")
	w.RawByte('"')
	w.RawByte(':')
	if m.OwnAvatar == nil {
		w.RawString("null")
	} else if len(m.OwnAvatar) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlOwnAvatar := len(m.OwnAvatar)
		for k, v := range m.OwnAvatar {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlOwnAvatar--
			if mlOwnAvatar != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("cur_avatar")
	w.RawByte('"')
	w.RawByte(':')
	m.CurAvatar.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_ChangeLanguageRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Language != 0 {
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_ChangeLanguageResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Language != 0 {
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_PowerChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Power != 0 {
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_ChangeBattleMapEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetRecentChatIdsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetRecentChatIdsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleIds == nil {
		w.RawString("null")
	} else if len(m.RoleIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleIds {
			w.String(v)
			if i != len(m.RoleIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AddRecentChatIdsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AddRecentChatIdsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_DeleteRecentChatIdsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_DeleteRecentChatIdsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetBlackListRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetBlackListResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("blacklist")
	w.RawByte('"')
	w.RawByte(':')
	if m.Blacklist == nil {
		w.RawString("null")
	} else if len(m.Blacklist) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Blacklist {
			v.JsonBytes(w)
			if i != len(m.Blacklist)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_LevelUpgradeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_LevelUpgradeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Level != 0 {
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.LevelIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LevelIndex))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetUseHangUpExpItemInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetUseHangUpExpItemInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TotalDuration != 0 {
		w.RawByte('"')
		w.RawString("total_duration")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDuration))
		needWriteComma = true
	}
	if m.Rate != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rate")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rate))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rate_duration")
	w.RawByte('"')
	w.RawByte(':')
	if m.RateDuration == nil {
		w.RawString("null")
	} else if len(m.RateDuration) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRateDuration := len(m.RateDuration)
		for k, v := range m.RateDuration {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRateDuration--
			if mlRateDuration != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.UseCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("use_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UseCount))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UseHangUpExpItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UseHangUpExpItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TotalDuration != 0 {
		w.RawByte('"')
		w.RawString("total_duration")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDuration))
		needWriteComma = true
	}
	if m.Rate != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rate")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rate))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rate_duration")
	w.RawByte('"')
	w.RawByte(':')
	if m.RateDuration == nil {
		w.RawString("null")
	} else if len(m.RateDuration) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRateDuration := len(m.RateDuration)
		for k, v := range m.RateDuration {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRateDuration--
			if mlRateDuration != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.UseCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("use_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UseCount))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("exp")
	w.RawByte('"')
	w.RawByte(':')
	if m.Exp == nil {
		w.RawString("null")
	} else if len(m.Exp) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlExp := len(m.Exp)
		for k, v := range m.Exp {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlExp--
			if mlExp != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_LevelUpgradeManyRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Count != 0 {
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_LevelUpgradeManyResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Level != 0 {
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.LevelIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LevelIndex))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AdvanceInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_AdvanceInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsOpen {
		w.RawByte('"')
		w.RawString("is_open")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsOpen)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuffId == nil {
		w.RawString("null")
	} else if len(m.BuffId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BuffId {
			w.Int64(int64(v))
			if i != len(m.BuffId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Overlay != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("overlay")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Overlay))
		needWriteComma = true
	}
	if m.ChallengeTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("challenge_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChallengeTime))
		needWriteComma = true
	}
	if m.CanAdvance {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("can_advance")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.CanAdvance)
		needWriteComma = true
	}
	if m.ChallengeCost {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("challenge_cost")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.ChallengeCost)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AdvanceOpenRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_AdvanceOpenResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_AdvanceBattleStartRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_AdvanceBattleStartResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.Token != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("sbp")
	w.RawByte('"')
	w.RawByte(':')
	m.Sbp.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AdvanceBattleVictoryRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Token != "" {
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AdvanceBattleVictoryResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_AdvanceBattleFinishRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Token != "" {
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.Victory {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("victory")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Victory)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AdvanceBattleFinishResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_AdvanceUseItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AdvanceUseItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ChallengeTime != 0 {
		w.RawByte('"')
		w.RawString("challenge_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChallengeTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_RecommendFriendRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Language != 0 {
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_RecommendFriendResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			v.JsonBytes(w)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetReadPointRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetReadPointResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("red_points")
	w.RawByte('"')
	w.RawByte(':')
	if m.RedPoints == nil {
		w.RawString("null")
	} else if len(m.RedPoints) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRedPoints := len(m.RedPoints)
		for k, v := range m.RedPoints {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRedPoints--
			if mlRedPoints != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AddReadPointRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Key != "" {
		w.RawByte('"')
		w.RawString("key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Key)
		needWriteComma = true
	}
	if m.Cnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cnt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_AddReadPointResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Key != "" {
		w.RawByte('"')
		w.RawString("key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Key)
		needWriteComma = true
	}
	if m.Cnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cnt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetReadPointRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Key != "" {
		w.RawByte('"')
		w.RawString("key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Key)
		needWriteComma = true
	}
	if m.Cnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cnt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetReadPointResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Key != "" {
		w.RawByte('"')
		w.RawString("key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Key)
		needWriteComma = true
	}
	if m.Cnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cnt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetSimpleRolesRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleIds == nil {
		w.RawString("null")
	} else if len(m.RoleIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleIds {
			w.String(v)
			if i != len(m.RoleIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetSimpleRolesResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			v.JsonBytes(w)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetUserSimpleInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetUserSimpleInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetUserCombatValueDetailsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetUserCombatValueDetailsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("self")
	w.RawByte('"')
	w.RawByte(':')
	if m.Self == nil {
		w.RawString("null")
	} else if len(m.Self) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlSelf := len(m.Self)
		for k, v := range m.Self {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlSelf--
			if mlSelf != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("target")
	w.RawByte('"')
	w.RawByte(':')
	if m.Target == nil {
		w.RawString("null")
	} else if len(m.Target) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlTarget := len(m.Target)
		for k, v := range m.Target {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlTarget--
			if mlTarget != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetBattleSpeedRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Speed != 0 {
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Speed))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetBattleSpeedResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_ReadPointChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("red_points")
	w.RawByte('"')
	w.RawByte(':')
	if m.RedPoints == nil {
		w.RawString("null")
	} else if len(m.RedPoints) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRedPoints := len(m.RedPoints)
		for k, v := range m.RedPoints {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRedPoints--
			if mlRedPoints != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UserLevelChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Level != 0 {
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.LevelIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LevelIndex))
		needWriteComma = true
	}
	if m.LevelIncr != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level_incr")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LevelIncr))
		needWriteComma = true
	}
	if m.LevelIndexIncr != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level_index_incr")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LevelIndexIncr))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UserCanGetExpFromHangPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Can {
		w.RawByte('"')
		w.RawString("can")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Can)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GotAvatarPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("avatar")
	w.RawByte('"')
	w.RawByte(':')
	m.Avatar.JsonBytes(w)
	needWriteComma = true
	if m.ItemId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UpdateTargetPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Id != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.Replace {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("replace")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Replace)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatGetRolesRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_CheatGetRolesResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			v.JsonBytes(w)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatSetLevelRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Level != 0 {
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatSetLevelResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Level != 0 {
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.LevelIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LevelIndex))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatResetExpSkipRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_CheatResetExpSkipResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TotalDuration != 0 {
		w.RawByte('"')
		w.RawString("total_duration")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDuration))
		needWriteComma = true
	}
	if m.Rate != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rate")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rate))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rate_duration")
	w.RawByte('"')
	w.RawByte(':')
	if m.RateDuration == nil {
		w.RawString("null")
	} else if len(m.RateDuration) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRateDuration := len(m.RateDuration)
		for k, v := range m.RateDuration {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRateDuration--
			if mlRateDuration != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.UseCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("use_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UseCount))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatPushToMobileRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IggId != "" {
		w.RawByte('"')
		w.RawString("igg_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.IggId)
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	if m.Context != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("context")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Context)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatPushToMobileResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_CheatAheadRegisterDayRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Day != 0 {
		w.RawByte('"')
		w.RawString("day")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Day))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatAheadRegisterDayResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User) GoString() string {
	return m.String()
}

func (m *User_RoleLoginRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_RoleLoginRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_RoleLoginRequest) GoString() string {
	return m.String()
}

func (m *User_RoleLoginResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_RoleLoginResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_RoleLoginResponse) GoString() string {
	return m.String()
}

func (m *User_RoleLogoutPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_RoleLogoutPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_RoleLogoutPush) GoString() string {
	return m.String()
}

func (m *User_GetRoleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetRoleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetRoleRequest) GoString() string {
	return m.String()
}

func (m *User_GetRoleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetRoleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetRoleResponse) GoString() string {
	return m.String()
}

func (m *User_SearchRoleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SearchRoleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SearchRoleRequest) GoString() string {
	return m.String()
}

func (m *User_SearchRoleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SearchRoleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SearchRoleResponse) GoString() string {
	return m.String()
}

func (m *User_SetAvatarRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetAvatarRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetAvatarRequest) GoString() string {
	return m.String()
}

func (m *User_SetAvatarResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetAvatarResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetAvatarResponse) GoString() string {
	return m.String()
}

func (m *User_SetAvatarFrameRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetAvatarFrameRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetAvatarFrameRequest) GoString() string {
	return m.String()
}

func (m *User_SetAvatarFrameResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetAvatarFrameResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetAvatarFrameResponse) GoString() string {
	return m.String()
}

func (m *User_ChangeNicknameRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_ChangeNicknameRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_ChangeNicknameRequest) GoString() string {
	return m.String()
}

func (m *User_ChangeNicknameResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_ChangeNicknameResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_ChangeNicknameResponse) GoString() string {
	return m.String()
}

func (m *User_GetOwnAvatarRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetOwnAvatarRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetOwnAvatarRequest) GoString() string {
	return m.String()
}

func (m *User_GetOwnAvatarResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetOwnAvatarResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetOwnAvatarResponse) GoString() string {
	return m.String()
}

func (m *User_ChangeLanguageRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_ChangeLanguageRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_ChangeLanguageRequest) GoString() string {
	return m.String()
}

func (m *User_ChangeLanguageResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_ChangeLanguageResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_ChangeLanguageResponse) GoString() string {
	return m.String()
}

func (m *User_PowerChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_PowerChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_PowerChangePush) GoString() string {
	return m.String()
}

func (m *User_ChangeBattleMapEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_ChangeBattleMapEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_ChangeBattleMapEvent) GoString() string {
	return m.String()
}

func (m *User_GetRecentChatIdsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetRecentChatIdsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetRecentChatIdsRequest) GoString() string {
	return m.String()
}

func (m *User_GetRecentChatIdsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetRecentChatIdsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetRecentChatIdsResponse) GoString() string {
	return m.String()
}

func (m *User_AddRecentChatIdsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AddRecentChatIdsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AddRecentChatIdsRequest) GoString() string {
	return m.String()
}

func (m *User_AddRecentChatIdsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AddRecentChatIdsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AddRecentChatIdsResponse) GoString() string {
	return m.String()
}

func (m *User_DeleteRecentChatIdsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_DeleteRecentChatIdsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_DeleteRecentChatIdsRequest) GoString() string {
	return m.String()
}

func (m *User_DeleteRecentChatIdsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_DeleteRecentChatIdsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_DeleteRecentChatIdsResponse) GoString() string {
	return m.String()
}

func (m *User_GetBlackListRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetBlackListRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetBlackListRequest) GoString() string {
	return m.String()
}

func (m *User_GetBlackListResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetBlackListResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetBlackListResponse) GoString() string {
	return m.String()
}

func (m *User_LevelUpgradeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_LevelUpgradeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_LevelUpgradeRequest) GoString() string {
	return m.String()
}

func (m *User_LevelUpgradeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_LevelUpgradeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_LevelUpgradeResponse) GoString() string {
	return m.String()
}

func (m *User_GetUseHangUpExpItemInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetUseHangUpExpItemInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetUseHangUpExpItemInfoRequest) GoString() string {
	return m.String()
}

func (m *User_GetUseHangUpExpItemInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetUseHangUpExpItemInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetUseHangUpExpItemInfoResponse) GoString() string {
	return m.String()
}

func (m *User_UseHangUpExpItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UseHangUpExpItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UseHangUpExpItemRequest) GoString() string {
	return m.String()
}

func (m *User_UseHangUpExpItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UseHangUpExpItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UseHangUpExpItemResponse) GoString() string {
	return m.String()
}

func (m *User_LevelUpgradeManyRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_LevelUpgradeManyRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_LevelUpgradeManyRequest) GoString() string {
	return m.String()
}

func (m *User_LevelUpgradeManyResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_LevelUpgradeManyResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_LevelUpgradeManyResponse) GoString() string {
	return m.String()
}

func (m *User_AdvanceInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceInfoRequest) GoString() string {
	return m.String()
}

func (m *User_AdvanceInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceInfoResponse) GoString() string {
	return m.String()
}

func (m *User_AdvanceOpenRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceOpenRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceOpenRequest) GoString() string {
	return m.String()
}

func (m *User_AdvanceOpenResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceOpenResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceOpenResponse) GoString() string {
	return m.String()
}

func (m *User_AdvanceBattleStartRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceBattleStartRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceBattleStartRequest) GoString() string {
	return m.String()
}

func (m *User_AdvanceBattleStartResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceBattleStartResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceBattleStartResponse) GoString() string {
	return m.String()
}

func (m *User_AdvanceBattleVictoryRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceBattleVictoryRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceBattleVictoryRequest) GoString() string {
	return m.String()
}

func (m *User_AdvanceBattleVictoryResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceBattleVictoryResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceBattleVictoryResponse) GoString() string {
	return m.String()
}

func (m *User_AdvanceBattleFinishRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceBattleFinishRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceBattleFinishRequest) GoString() string {
	return m.String()
}

func (m *User_AdvanceBattleFinishResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceBattleFinishResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceBattleFinishResponse) GoString() string {
	return m.String()
}

func (m *User_AdvanceUseItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceUseItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceUseItemRequest) GoString() string {
	return m.String()
}

func (m *User_AdvanceUseItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceUseItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceUseItemResponse) GoString() string {
	return m.String()
}

func (m *User_RecommendFriendRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_RecommendFriendRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_RecommendFriendRequest) GoString() string {
	return m.String()
}

func (m *User_RecommendFriendResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_RecommendFriendResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_RecommendFriendResponse) GoString() string {
	return m.String()
}

func (m *User_GetReadPointRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetReadPointRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetReadPointRequest) GoString() string {
	return m.String()
}

func (m *User_GetReadPointResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetReadPointResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetReadPointResponse) GoString() string {
	return m.String()
}

func (m *User_AddReadPointRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AddReadPointRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AddReadPointRequest) GoString() string {
	return m.String()
}

func (m *User_AddReadPointResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AddReadPointResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AddReadPointResponse) GoString() string {
	return m.String()
}

func (m *User_SetReadPointRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetReadPointRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetReadPointRequest) GoString() string {
	return m.String()
}

func (m *User_SetReadPointResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetReadPointResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetReadPointResponse) GoString() string {
	return m.String()
}

func (m *User_GetSimpleRolesRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetSimpleRolesRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetSimpleRolesRequest) GoString() string {
	return m.String()
}

func (m *User_GetSimpleRolesResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetSimpleRolesResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetSimpleRolesResponse) GoString() string {
	return m.String()
}

func (m *User_GetUserSimpleInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetUserSimpleInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetUserSimpleInfoRequest) GoString() string {
	return m.String()
}

func (m *User_GetUserSimpleInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetUserSimpleInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetUserSimpleInfoResponse) GoString() string {
	return m.String()
}

func (m *User_GetUserCombatValueDetailsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetUserCombatValueDetailsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetUserCombatValueDetailsRequest) GoString() string {
	return m.String()
}

func (m *User_GetUserCombatValueDetailsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetUserCombatValueDetailsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetUserCombatValueDetailsResponse) GoString() string {
	return m.String()
}

func (m *User_SetBattleSpeedRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetBattleSpeedRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetBattleSpeedRequest) GoString() string {
	return m.String()
}

func (m *User_SetBattleSpeedResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetBattleSpeedResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetBattleSpeedResponse) GoString() string {
	return m.String()
}

func (m *User_ReadPointChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_ReadPointChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_ReadPointChangePush) GoString() string {
	return m.String()
}

func (m *User_UserLevelChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UserLevelChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UserLevelChangePush) GoString() string {
	return m.String()
}

func (m *User_UserCanGetExpFromHangPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UserCanGetExpFromHangPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UserCanGetExpFromHangPush) GoString() string {
	return m.String()
}

func (m *User_GotAvatarPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GotAvatarPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GotAvatarPush) GoString() string {
	return m.String()
}

func (m *User_UpdateTargetPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UpdateTargetPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UpdateTargetPush) GoString() string {
	return m.String()
}

func (m *User_CheatGetRolesRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatGetRolesRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatGetRolesRequest) GoString() string {
	return m.String()
}

func (m *User_CheatGetRolesResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatGetRolesResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatGetRolesResponse) GoString() string {
	return m.String()
}

func (m *User_CheatSetLevelRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatSetLevelRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatSetLevelRequest) GoString() string {
	return m.String()
}

func (m *User_CheatSetLevelResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatSetLevelResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatSetLevelResponse) GoString() string {
	return m.String()
}

func (m *User_CheatResetExpSkipRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatResetExpSkipRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatResetExpSkipRequest) GoString() string {
	return m.String()
}

func (m *User_CheatResetExpSkipResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatResetExpSkipResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatResetExpSkipResponse) GoString() string {
	return m.String()
}

func (m *User_CheatPushToMobileRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatPushToMobileRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatPushToMobileRequest) GoString() string {
	return m.String()
}

func (m *User_CheatPushToMobileResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatPushToMobileResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatPushToMobileResponse) GoString() string {
	return m.String()
}

func (m *User_CheatAheadRegisterDayRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatAheadRegisterDayRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatAheadRegisterDayRequest) GoString() string {
	return m.String()
}

func (m *User_CheatAheadRegisterDayResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatAheadRegisterDayResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatAheadRegisterDayResponse) GoString() string {
	return m.String()
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_RoleLoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovUser(uint64(m.ServerId))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Language != 0 {
		n += 1 + sovUser(uint64(m.Language))
	}
	l = len(m.RuleVersion)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sozUser(uint64(m.Version))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.BattleId != 0 {
		n += 1 + sovUser(uint64(m.BattleId))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.IggId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_RoleLoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovUser(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovUser(uint64(m.BattleServerId))
	}
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovUser(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovUser(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovUser(uint64(m.Power))
	}
	if m.Title != 0 {
		n += 1 + sovUser(uint64(m.Title))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.GuildPosition != 0 {
		n += 1 + sovUser(uint64(m.GuildPosition))
	}
	if m.LessServerId != 0 {
		n += 1 + sovUser(uint64(m.LessServerId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Language != 0 {
		n += 1 + sovUser(uint64(m.Language))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.CreateTime != 0 {
		n += 2 + sovUser(uint64(m.CreateTime))
	}
	if m.LevelIndex != 0 {
		n += 2 + sovUser(uint64(m.LevelIndex))
	}
	l = len(m.ImHttp)
	if l > 0 {
		n += 2 + l + sovUser(uint64(l))
	}
	l = len(m.ImTcp)
	if l > 0 {
		n += 2 + l + sovUser(uint64(l))
	}
	if m.BattleSpeed != 0 {
		n += 2 + sovUser(uint64(m.BattleSpeed))
	}
	if m.ServerId != 0 {
		n += 2 + sovUser(uint64(m.ServerId))
	}
	if m.Recharge != 0 {
		n += 2 + sovUser(uint64(m.Recharge))
	}
	return n
}

func (m *User_RoleLogoutPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_GetRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_GetRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.Formation) > 0 {
		l = 0
		for _, e := range m.Formation {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	return n
}

func (m *User_SearchRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_SearchRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Role) > 0 {
		for _, e := range m.Role {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *User_SetAvatarRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvatarId != 0 {
		n += 1 + sovUser(uint64(m.AvatarId))
	}
	return n
}

func (m *User_SetAvatarResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvatarId != 0 {
		n += 1 + sovUser(uint64(m.AvatarId))
	}
	return n
}

func (m *User_SetAvatarFrameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvatarFrame != 0 {
		n += 1 + sovUser(uint64(m.AvatarFrame))
	}
	return n
}

func (m *User_SetAvatarFrameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvatarFrame != 0 {
		n += 1 + sovUser(uint64(m.AvatarFrame))
	}
	return n
}

func (m *User_ChangeNicknameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_ChangeNicknameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_GetOwnAvatarRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetOwnAvatarResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OwnAvatar) > 0 {
		for k, v := range m.OwnAvatar {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUser(uint64(l))
			}
			mapEntrySize := 1 + sovUser(uint64(k)) + l
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	if m.CurAvatar != nil {
		l = m.CurAvatar.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_ChangeLanguageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Language != 0 {
		n += 1 + sovUser(uint64(m.Language))
	}
	return n
}

func (m *User_ChangeLanguageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Language != 0 {
		n += 1 + sovUser(uint64(m.Language))
	}
	return n
}

func (m *User_PowerChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Power != 0 {
		n += 1 + sovUser(uint64(m.Power))
	}
	return n
}

func (m *User_ChangeBattleMapEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovUser(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovUser(uint64(m.BattleServerId))
	}
	return n
}

func (m *User_GetRecentChatIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetRecentChatIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		for _, s := range m.RoleIds {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *User_AddRecentChatIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_AddRecentChatIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_DeleteRecentChatIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_DeleteRecentChatIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetBlackListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetBlackListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blacklist) > 0 {
		for _, e := range m.Blacklist {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *User_LevelUpgradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_LevelUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.LevelIndex != 0 {
		n += 1 + sovUser(uint64(m.LevelIndex))
	}
	return n
}

func (m *User_GetUseHangUpExpItemInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetUseHangUpExpItemInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDuration != 0 {
		n += 1 + sovUser(uint64(m.TotalDuration))
	}
	if m.Rate != 0 {
		n += 1 + sovUser(uint64(m.Rate))
	}
	if len(m.RateDuration) > 0 {
		for k, v := range m.RateDuration {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	if m.UseCount != 0 {
		n += 1 + sovUser(uint64(m.UseCount))
	}
	return n
}

func (m *User_UseHangUpExpItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovUser(uint64(m.ItemId))
	}
	return n
}

func (m *User_UseHangUpExpItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDuration != 0 {
		n += 1 + sovUser(uint64(m.TotalDuration))
	}
	if m.Rate != 0 {
		n += 1 + sovUser(uint64(m.Rate))
	}
	if len(m.RateDuration) > 0 {
		for k, v := range m.RateDuration {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	if m.UseCount != 0 {
		n += 1 + sovUser(uint64(m.UseCount))
	}
	if len(m.Exp) > 0 {
		for k, v := range m.Exp {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *User_LevelUpgradeManyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovUser(uint64(m.Count))
	}
	return n
}

func (m *User_LevelUpgradeManyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.LevelIndex != 0 {
		n += 1 + sovUser(uint64(m.LevelIndex))
	}
	return n
}

func (m *User_AdvanceInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_AdvanceInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOpen {
		n += 2
	}
	if len(m.BuffId) > 0 {
		l = 0
		for _, e := range m.BuffId {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.Overlay != 0 {
		n += 1 + sovUser(uint64(m.Overlay))
	}
	if m.ChallengeTime != 0 {
		n += 1 + sovUser(uint64(m.ChallengeTime))
	}
	if m.CanAdvance {
		n += 2
	}
	if m.ChallengeCost {
		n += 2
	}
	return n
}

func (m *User_AdvanceOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_AdvanceOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_AdvanceBattleStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_AdvanceBattleStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovUser(uint64(m.MapId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.BattleId != 0 {
		n += 1 + sovUser(uint64(m.BattleId))
	}
	if m.Sbp != nil {
		l = m.Sbp.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_AdvanceBattleVictoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_AdvanceBattleVictoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_AdvanceBattleFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Victory {
		n += 2
	}
	return n
}

func (m *User_AdvanceBattleFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_AdvanceUseItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovUser(uint64(m.ItemId))
	}
	return n
}

func (m *User_AdvanceUseItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeTime != 0 {
		n += 1 + sovUser(uint64(m.ChallengeTime))
	}
	return n
}

func (m *User_RecommendFriendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Language != 0 {
		n += 1 + sovUser(uint64(m.Language))
	}
	return n
}

func (m *User_RecommendFriendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *User_GetReadPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetReadPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedPoints) > 0 {
		for k, v := range m.RedPoints {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUser(uint64(len(k))) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *User_AddReadPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Cnt != 0 {
		n += 1 + sovUser(uint64(m.Cnt))
	}
	return n
}

func (m *User_AddReadPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Cnt != 0 {
		n += 1 + sovUser(uint64(m.Cnt))
	}
	return n
}

func (m *User_SetReadPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Cnt != 0 {
		n += 1 + sovUser(uint64(m.Cnt))
	}
	return n
}

func (m *User_SetReadPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Cnt != 0 {
		n += 1 + sovUser(uint64(m.Cnt))
	}
	return n
}

func (m *User_GetSimpleRolesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		for _, s := range m.RoleIds {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *User_GetSimpleRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *User_GetUserSimpleInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_GetUserSimpleInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_GetUserCombatValueDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_GetUserCombatValueDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Self) > 0 {
		for k, v := range m.Self {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	if len(m.Target) > 0 {
		for k, v := range m.Target {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *User_SetBattleSpeedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Speed != 0 {
		n += 1 + sovUser(uint64(m.Speed))
	}
	return n
}

func (m *User_SetBattleSpeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_ReadPointChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedPoints) > 0 {
		for k, v := range m.RedPoints {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUser(uint64(len(k))) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *User_UserLevelChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.LevelIndex != 0 {
		n += 1 + sovUser(uint64(m.LevelIndex))
	}
	if m.LevelIncr != 0 {
		n += 1 + sovUser(uint64(m.LevelIncr))
	}
	if m.LevelIndexIncr != 0 {
		n += 1 + sovUser(uint64(m.LevelIndexIncr))
	}
	return n
}

func (m *User_UserCanGetExpFromHangPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Can {
		n += 2
	}
	return n
}

func (m *User_GotAvatarPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.ItemId != 0 {
		n += 1 + sovUser(uint64(m.ItemId))
	}
	return n
}

func (m *User_UpdateTargetPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovUser(uint64(m.Typ))
	}
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovUser(uint64(m.Count))
	}
	if m.Replace {
		n += 2
	}
	return n
}

func (m *User_CheatGetRolesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_CheatGetRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *User_CheatSetLevelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	return n
}

func (m *User_CheatSetLevelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.LevelIndex != 0 {
		n += 1 + sovUser(uint64(m.LevelIndex))
	}
	return n
}

func (m *User_CheatResetExpSkipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_CheatResetExpSkipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDuration != 0 {
		n += 1 + sovUser(uint64(m.TotalDuration))
	}
	if m.Rate != 0 {
		n += 1 + sovUser(uint64(m.Rate))
	}
	if len(m.RateDuration) > 0 {
		for k, v := range m.RateDuration {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	if m.UseCount != 0 {
		n += 1 + sovUser(uint64(m.UseCount))
	}
	return n
}

func (m *User_CheatPushToMobileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IggId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovUser(uint64(m.GameId))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_CheatPushToMobileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_CheatAheadRegisterDayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Day != 0 {
		n += 1 + sovUser(uint64(m.Day))
	}
	return n
}

func (m *User_CheatAheadRegisterDayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_RoleLoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Version = int64(v)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IggId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IggId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_RoleLoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleLoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleLoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= models.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildPosition", wireType)
			}
			m.GuildPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildPosition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessServerId", wireType)
			}
			m.LessServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LessServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.Hero{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelIndex", wireType)
			}
			m.LevelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImHttp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImHttp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImTcp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImTcp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleSpeed", wireType)
			}
			m.BattleSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleSpeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recharge", wireType)
			}
			m.Recharge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recharge |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_RoleLogoutPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleLogoutPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleLogoutPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &models.Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.Hero{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Formation = append(m.Formation, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Formation) == 0 {
					m.Formation = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Formation = append(m.Formation, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Formation", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SearchRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SearchRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = append(m.Role, &models.Role{})
			if err := m.Role[len(m.Role)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetAvatarRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAvatarRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAvatarRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetAvatarResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAvatarResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAvatarResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetAvatarFrameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAvatarFrameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAvatarFrameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetAvatarFrameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAvatarFrameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAvatarFrameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_ChangeNicknameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeNicknameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeNicknameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_ChangeNicknameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeNicknameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeNicknameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetOwnAvatarRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnAvatarRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnAvatarRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetOwnAvatarResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOwnAvatarResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOwnAvatarResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnAvatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnAvatar == nil {
				m.OwnAvatar = make(map[int64]*models.Avatar)
			}
			var mapkey int64
			var mapvalue *models.Avatar
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUser
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUser
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.Avatar{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OwnAvatar[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurAvatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurAvatar == nil {
				m.CurAvatar = &models.CurAvatar{}
			}
			if err := m.CurAvatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_ChangeLanguageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeLanguageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeLanguageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_ChangeLanguageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeLanguageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeLanguageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_PowerChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowerChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowerChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_ChangeBattleMapEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeBattleMapEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeBattleMapEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetRecentChatIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecentChatIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecentChatIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetRecentChatIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRecentChatIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRecentChatIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIds = append(m.RoleIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AddRecentChatIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRecentChatIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRecentChatIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AddRecentChatIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRecentChatIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRecentChatIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_DeleteRecentChatIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRecentChatIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRecentChatIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_DeleteRecentChatIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRecentChatIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRecentChatIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetBlackListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlackListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlackListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetBlackListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlackListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlackListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blacklist = append(m.Blacklist, &models.BlackListInfo{})
			if err := m.Blacklist[len(m.Blacklist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_LevelUpgradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelUpgradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelUpgradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_LevelUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelIndex", wireType)
			}
			m.LevelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetUseHangUpExpItemInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUseHangUpExpItemInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUseHangUpExpItemInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetUseHangUpExpItemInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUseHangUpExpItemInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUseHangUpExpItemInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDuration", wireType)
			}
			m.TotalDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateDuration == nil {
				m.RateDuration = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RateDuration[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCount", wireType)
			}
			m.UseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UseHangUpExpItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseHangUpExpItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseHangUpExpItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UseHangUpExpItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseHangUpExpItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseHangUpExpItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDuration", wireType)
			}
			m.TotalDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateDuration == nil {
				m.RateDuration = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RateDuration[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCount", wireType)
			}
			m.UseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exp == nil {
				m.Exp = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Exp[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_LevelUpgradeManyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelUpgradeManyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelUpgradeManyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_LevelUpgradeManyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelUpgradeManyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelUpgradeManyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelIndex", wireType)
			}
			m.LevelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BuffId = append(m.BuffId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BuffId) == 0 {
					m.BuffId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BuffId = append(m.BuffId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overlay", wireType)
			}
			m.Overlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Overlay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTime", wireType)
			}
			m.ChallengeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanAdvance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanAdvance = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeCost", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeCost = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceOpenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceOpenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceBattleStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceBattleStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceBattleStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceBattleStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceBattleStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceBattleStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sbp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sbp == nil {
				m.Sbp = &models.SingleBattleParam{}
			}
			if err := m.Sbp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceBattleVictoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceBattleVictoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceBattleVictoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceBattleVictoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceBattleVictoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceBattleVictoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceBattleFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceBattleFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceBattleFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Victory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Victory = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceBattleFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceBattleFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceBattleFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceUseItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceUseItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceUseItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceUseItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceUseItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceUseItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTime", wireType)
			}
			m.ChallengeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_RecommendFriendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendFriendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendFriendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_RecommendFriendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendFriendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendFriendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &models.Role{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetReadPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReadPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReadPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetReadPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReadPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReadPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedPoints == nil {
				m.RedPoints = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUser
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUser
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RedPoints[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AddReadPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReadPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReadPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AddReadPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReadPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReadPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetReadPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReadPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReadPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetReadPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReadPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReadPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetSimpleRolesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSimpleRolesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSimpleRolesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIds = append(m.RoleIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetSimpleRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSimpleRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSimpleRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &models.RoleSimple{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetUserSimpleInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserSimpleInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserSimpleInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetUserSimpleInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserSimpleInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserSimpleInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.UserSimpleInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetUserCombatValueDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCombatValueDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCombatValueDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetUserCombatValueDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserCombatValueDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserCombatValueDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Self[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Target[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetBattleSpeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBattleSpeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBattleSpeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetBattleSpeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBattleSpeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBattleSpeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_ReadPointChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadPointChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadPointChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedPoints == nil {
				m.RedPoints = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUser
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUser
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RedPoints[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UserLevelChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLevelChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLevelChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelIndex", wireType)
			}
			m.LevelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelIncr", wireType)
			}
			m.LevelIncr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelIncr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelIndexIncr", wireType)
			}
			m.LevelIndexIncr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelIndexIncr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UserCanGetExpFromHangPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCanGetExpFromHangPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCanGetExpFromHangPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Can", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Can = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GotAvatarPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GotAvatarPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GotAvatarPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &models.Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UpdateTargetPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTargetPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTargetPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replace = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatGetRolesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatGetRolesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatGetRolesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatGetRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatGetRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatGetRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &models.Role{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatSetLevelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSetLevelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSetLevelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatSetLevelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSetLevelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSetLevelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelIndex", wireType)
			}
			m.LevelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatResetExpSkipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatResetExpSkipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatResetExpSkipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatResetExpSkipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatResetExpSkipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatResetExpSkipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDuration", wireType)
			}
			m.TotalDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			m.Rate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateDuration == nil {
				m.RateDuration = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RateDuration[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCount", wireType)
			}
			m.UseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatPushToMobileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatPushToMobileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatPushToMobileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IggId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IggId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatPushToMobileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatPushToMobileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatPushToMobileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatAheadRegisterDayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAheadRegisterDayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAheadRegisterDayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatAheadRegisterDayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAheadRegisterDayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAheadRegisterDayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
