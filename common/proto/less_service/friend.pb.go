// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/less-service/friend.proto

package less_service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FriendErrorCode int32

const (
	FriendErrorCode_ErrFriendExist      FriendErrorCode = 0
	FriendErrorCode_ErrRequestExist     FriendErrorCode = 1
	FriendErrorCode_ErrBlackExist       FriendErrorCode = 2
	FriendErrorCode_ErrFriendNotExist   FriendErrorCode = 3
	FriendErrorCode_ErrRequestNotExist  FriendErrorCode = 4
	FriendErrorCode_ErrBlackNotExist    FriendErrorCode = 5
	FriendErrorCode_ErrFriendFull       FriendErrorCode = 6
	FriendErrorCode_ErrPointAlreadySent FriendErrorCode = 7
	FriendErrorCode_ErrPointAlreadyRecv FriendErrorCode = 8
	FriendErrorCode_ErrCantHandleSelf   FriendErrorCode = 9
	FriendErrorCode_ErrTarIllegal       FriendErrorCode = 10
	FriendErrorCode_ErrTarFriendFull    FriendErrorCode = 11
)

var FriendErrorCode_name = map[int32]string{
	0:  "ErrFriendExist",
	1:  "ErrRequestExist",
	2:  "ErrBlackExist",
	3:  "ErrFriendNotExist",
	4:  "ErrRequestNotExist",
	5:  "ErrBlackNotExist",
	6:  "ErrFriendFull",
	7:  "ErrPointAlreadySent",
	8:  "ErrPointAlreadyRecv",
	9:  "ErrCantHandleSelf",
	10: "ErrTarIllegal",
	11: "ErrTarFriendFull",
}

var FriendErrorCode_value = map[string]int32{
	"ErrFriendExist":      0,
	"ErrRequestExist":     1,
	"ErrBlackExist":       2,
	"ErrFriendNotExist":   3,
	"ErrRequestNotExist":  4,
	"ErrBlackNotExist":    5,
	"ErrFriendFull":       6,
	"ErrPointAlreadySent": 7,
	"ErrPointAlreadyRecv": 8,
	"ErrCantHandleSelf":   9,
	"ErrTarIllegal":       10,
	"ErrTarFriendFull":    11,
}

func (FriendErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0}
}

type Friend struct {
}

func (m *Friend) Reset()      { *m = Friend{} }
func (*Friend) ProtoMessage() {}
func (*Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0}
}
func (m *Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend.Merge(m, src)
}
func (m *Friend) XXX_Size() int {
	return m.Size()
}
func (m *Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_Friend proto.InternalMessageInfo

func (*Friend) XXX_MessageName() string {
	return "less_service.Friend"
}

// 好友列表
type Friend_GetFriendListRequest struct {
}

func (m *Friend_GetFriendListRequest) Reset()      { *m = Friend_GetFriendListRequest{} }
func (*Friend_GetFriendListRequest) ProtoMessage() {}
func (*Friend_GetFriendListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 0}
}
func (m *Friend_GetFriendListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_GetFriendListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_GetFriendListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_GetFriendListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_GetFriendListRequest.Merge(m, src)
}
func (m *Friend_GetFriendListRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_GetFriendListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_GetFriendListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_GetFriendListRequest proto.InternalMessageInfo

func (*Friend_GetFriendListRequest) XXX_MessageName() string {
	return "less_service.Friend.GetFriendListRequest"
}

type Friend_GetFriendListResponse struct {
	FriendList []*models.FriendInfo `protobuf:"bytes,1,rep,name=friend_list,json=friendList,proto3" json:"friend_list,omitempty"`
	// 今天发送
	TodaySend int64 `protobuf:"zigzag64,2,opt,name=today_send,json=todaySend,proto3" json:"today_send,omitempty"`
	// 今天收取
	TodayRecv int64 `protobuf:"zigzag64,3,opt,name=today_recv,json=todayRecv,proto3" json:"today_recv,omitempty"`
}

func (m *Friend_GetFriendListResponse) Reset()      { *m = Friend_GetFriendListResponse{} }
func (*Friend_GetFriendListResponse) ProtoMessage() {}
func (*Friend_GetFriendListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 1}
}
func (m *Friend_GetFriendListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_GetFriendListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_GetFriendListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_GetFriendListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_GetFriendListResponse.Merge(m, src)
}
func (m *Friend_GetFriendListResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_GetFriendListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_GetFriendListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_GetFriendListResponse proto.InternalMessageInfo

func (m *Friend_GetFriendListResponse) GetFriendList() []*models.FriendInfo {
	if m != nil {
		return m.FriendList
	}
	return nil
}

func (m *Friend_GetFriendListResponse) GetTodaySend() int64 {
	if m != nil {
		return m.TodaySend
	}
	return 0
}

func (m *Friend_GetFriendListResponse) GetTodayRecv() int64 {
	if m != nil {
		return m.TodayRecv
	}
	return 0
}

func (*Friend_GetFriendListResponse) XXX_MessageName() string {
	return "less_service.Friend.GetFriendListResponse"
}

// 好友邀请列表
type Friend_GetRequestListRequest struct {
}

func (m *Friend_GetRequestListRequest) Reset()      { *m = Friend_GetRequestListRequest{} }
func (*Friend_GetRequestListRequest) ProtoMessage() {}
func (*Friend_GetRequestListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 2}
}
func (m *Friend_GetRequestListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_GetRequestListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_GetRequestListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_GetRequestListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_GetRequestListRequest.Merge(m, src)
}
func (m *Friend_GetRequestListRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_GetRequestListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_GetRequestListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_GetRequestListRequest proto.InternalMessageInfo

func (*Friend_GetRequestListRequest) XXX_MessageName() string {
	return "less_service.Friend.GetRequestListRequest"
}

type Friend_GetRequestListResponse struct {
	RequestList []*models.RequestInfo `protobuf:"bytes,1,rep,name=request_list,json=requestList,proto3" json:"request_list,omitempty"`
}

func (m *Friend_GetRequestListResponse) Reset()      { *m = Friend_GetRequestListResponse{} }
func (*Friend_GetRequestListResponse) ProtoMessage() {}
func (*Friend_GetRequestListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 3}
}
func (m *Friend_GetRequestListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_GetRequestListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_GetRequestListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_GetRequestListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_GetRequestListResponse.Merge(m, src)
}
func (m *Friend_GetRequestListResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_GetRequestListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_GetRequestListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_GetRequestListResponse proto.InternalMessageInfo

func (m *Friend_GetRequestListResponse) GetRequestList() []*models.RequestInfo {
	if m != nil {
		return m.RequestList
	}
	return nil
}

func (*Friend_GetRequestListResponse) XXX_MessageName() string {
	return "less_service.Friend.GetRequestListResponse"
}

// 添加好友邀请
type Friend_AddRequestRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *Friend_AddRequestRequest) Reset()      { *m = Friend_AddRequestRequest{} }
func (*Friend_AddRequestRequest) ProtoMessage() {}
func (*Friend_AddRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 4}
}
func (m *Friend_AddRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_AddRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_AddRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_AddRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_AddRequestRequest.Merge(m, src)
}
func (m *Friend_AddRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_AddRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_AddRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_AddRequestRequest proto.InternalMessageInfo

func (m *Friend_AddRequestRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*Friend_AddRequestRequest) XXX_MessageName() string {
	return "less_service.Friend.AddRequestRequest"
}

type Friend_AddRequestResponse struct {
}

func (m *Friend_AddRequestResponse) Reset()      { *m = Friend_AddRequestResponse{} }
func (*Friend_AddRequestResponse) ProtoMessage() {}
func (*Friend_AddRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 5}
}
func (m *Friend_AddRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_AddRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_AddRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_AddRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_AddRequestResponse.Merge(m, src)
}
func (m *Friend_AddRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_AddRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_AddRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_AddRequestResponse proto.InternalMessageInfo

func (*Friend_AddRequestResponse) XXX_MessageName() string {
	return "less_service.Friend.AddRequestResponse"
}

// 确认添加好友
type Friend_ConfirmRequestRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// 是否添加
	IsConform bool `protobuf:"varint,2,opt,name=is_conform,json=isConform,proto3" json:"is_conform,omitempty"`
}

func (m *Friend_ConfirmRequestRequest) Reset()      { *m = Friend_ConfirmRequestRequest{} }
func (*Friend_ConfirmRequestRequest) ProtoMessage() {}
func (*Friend_ConfirmRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 6}
}
func (m *Friend_ConfirmRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_ConfirmRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_ConfirmRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_ConfirmRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_ConfirmRequestRequest.Merge(m, src)
}
func (m *Friend_ConfirmRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_ConfirmRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_ConfirmRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_ConfirmRequestRequest proto.InternalMessageInfo

func (m *Friend_ConfirmRequestRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Friend_ConfirmRequestRequest) GetIsConform() bool {
	if m != nil {
		return m.IsConform
	}
	return false
}

func (*Friend_ConfirmRequestRequest) XXX_MessageName() string {
	return "less_service.Friend.ConfirmRequestRequest"
}

type Friend_ConfirmRequestResponse struct {
	ErrCode string `protobuf:"bytes,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
}

func (m *Friend_ConfirmRequestResponse) Reset()      { *m = Friend_ConfirmRequestResponse{} }
func (*Friend_ConfirmRequestResponse) ProtoMessage() {}
func (*Friend_ConfirmRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 7}
}
func (m *Friend_ConfirmRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_ConfirmRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_ConfirmRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_ConfirmRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_ConfirmRequestResponse.Merge(m, src)
}
func (m *Friend_ConfirmRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_ConfirmRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_ConfirmRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_ConfirmRequestResponse proto.InternalMessageInfo

func (m *Friend_ConfirmRequestResponse) GetErrCode() string {
	if m != nil {
		return m.ErrCode
	}
	return ""
}

func (*Friend_ConfirmRequestResponse) XXX_MessageName() string {
	return "less_service.Friend.ConfirmRequestResponse"
}

// 删除好友
type Friend_DeleteRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *Friend_DeleteRequest) Reset()      { *m = Friend_DeleteRequest{} }
func (*Friend_DeleteRequest) ProtoMessage() {}
func (*Friend_DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 8}
}
func (m *Friend_DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_DeleteRequest.Merge(m, src)
}
func (m *Friend_DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_DeleteRequest proto.InternalMessageInfo

func (m *Friend_DeleteRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*Friend_DeleteRequest) XXX_MessageName() string {
	return "less_service.Friend.DeleteRequest"
}

type Friend_DeleteResponse struct {
}

func (m *Friend_DeleteResponse) Reset()      { *m = Friend_DeleteResponse{} }
func (*Friend_DeleteResponse) ProtoMessage() {}
func (*Friend_DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 9}
}
func (m *Friend_DeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_DeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_DeleteResponse.Merge(m, src)
}
func (m *Friend_DeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_DeleteResponse proto.InternalMessageInfo

func (*Friend_DeleteResponse) XXX_MessageName() string {
	return "less_service.Friend.DeleteResponse"
}

// 添加黑名单
type Friend_AddBlackRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *Friend_AddBlackRequest) Reset()      { *m = Friend_AddBlackRequest{} }
func (*Friend_AddBlackRequest) ProtoMessage() {}
func (*Friend_AddBlackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 10}
}
func (m *Friend_AddBlackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_AddBlackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_AddBlackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_AddBlackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_AddBlackRequest.Merge(m, src)
}
func (m *Friend_AddBlackRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_AddBlackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_AddBlackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_AddBlackRequest proto.InternalMessageInfo

func (m *Friend_AddBlackRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*Friend_AddBlackRequest) XXX_MessageName() string {
	return "less_service.Friend.AddBlackRequest"
}

type Friend_AddBlackResponse struct {
}

func (m *Friend_AddBlackResponse) Reset()      { *m = Friend_AddBlackResponse{} }
func (*Friend_AddBlackResponse) ProtoMessage() {}
func (*Friend_AddBlackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 11}
}
func (m *Friend_AddBlackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_AddBlackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_AddBlackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_AddBlackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_AddBlackResponse.Merge(m, src)
}
func (m *Friend_AddBlackResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_AddBlackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_AddBlackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_AddBlackResponse proto.InternalMessageInfo

func (*Friend_AddBlackResponse) XXX_MessageName() string {
	return "less_service.Friend.AddBlackResponse"
}

// 移除黑名单
type Friend_RemoveBlackRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *Friend_RemoveBlackRequest) Reset()      { *m = Friend_RemoveBlackRequest{} }
func (*Friend_RemoveBlackRequest) ProtoMessage() {}
func (*Friend_RemoveBlackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 12}
}
func (m *Friend_RemoveBlackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_RemoveBlackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_RemoveBlackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_RemoveBlackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_RemoveBlackRequest.Merge(m, src)
}
func (m *Friend_RemoveBlackRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_RemoveBlackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_RemoveBlackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_RemoveBlackRequest proto.InternalMessageInfo

func (m *Friend_RemoveBlackRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*Friend_RemoveBlackRequest) XXX_MessageName() string {
	return "less_service.Friend.RemoveBlackRequest"
}

type Friend_RemoveBlackResponse struct {
}

func (m *Friend_RemoveBlackResponse) Reset()      { *m = Friend_RemoveBlackResponse{} }
func (*Friend_RemoveBlackResponse) ProtoMessage() {}
func (*Friend_RemoveBlackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 13}
}
func (m *Friend_RemoveBlackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_RemoveBlackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_RemoveBlackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_RemoveBlackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_RemoveBlackResponse.Merge(m, src)
}
func (m *Friend_RemoveBlackResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_RemoveBlackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_RemoveBlackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_RemoveBlackResponse proto.InternalMessageInfo

func (*Friend_RemoveBlackResponse) XXX_MessageName() string {
	return "less_service.Friend.RemoveBlackResponse"
}

// 赠送友情点
type Friend_SendPointRequest struct {
	RoleIds string `protobuf:"bytes,1,opt,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (m *Friend_SendPointRequest) Reset()      { *m = Friend_SendPointRequest{} }
func (*Friend_SendPointRequest) ProtoMessage() {}
func (*Friend_SendPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 14}
}
func (m *Friend_SendPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_SendPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_SendPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_SendPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_SendPointRequest.Merge(m, src)
}
func (m *Friend_SendPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_SendPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_SendPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_SendPointRequest proto.InternalMessageInfo

func (m *Friend_SendPointRequest) GetRoleIds() string {
	if m != nil {
		return m.RoleIds
	}
	return ""
}

func (*Friend_SendPointRequest) XXX_MessageName() string {
	return "less_service.Friend.SendPointRequest"
}

type Friend_SendPointResponse struct {
	IsSend bool `protobuf:"varint,1,opt,name=is_send,json=isSend,proto3" json:"is_send,omitempty"`
}

func (m *Friend_SendPointResponse) Reset()      { *m = Friend_SendPointResponse{} }
func (*Friend_SendPointResponse) ProtoMessage() {}
func (*Friend_SendPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 15}
}
func (m *Friend_SendPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_SendPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_SendPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_SendPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_SendPointResponse.Merge(m, src)
}
func (m *Friend_SendPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_SendPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_SendPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_SendPointResponse proto.InternalMessageInfo

func (m *Friend_SendPointResponse) GetIsSend() bool {
	if m != nil {
		return m.IsSend
	}
	return false
}

func (*Friend_SendPointResponse) XXX_MessageName() string {
	return "less_service.Friend.SendPointResponse"
}

// 收取友情点
type Friend_RecvPointRequest struct {
	RoleIds string `protobuf:"bytes,1,opt,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (m *Friend_RecvPointRequest) Reset()      { *m = Friend_RecvPointRequest{} }
func (*Friend_RecvPointRequest) ProtoMessage() {}
func (*Friend_RecvPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 16}
}
func (m *Friend_RecvPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_RecvPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_RecvPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_RecvPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_RecvPointRequest.Merge(m, src)
}
func (m *Friend_RecvPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_RecvPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_RecvPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_RecvPointRequest proto.InternalMessageInfo

func (m *Friend_RecvPointRequest) GetRoleIds() string {
	if m != nil {
		return m.RoleIds
	}
	return ""
}

func (*Friend_RecvPointRequest) XXX_MessageName() string {
	return "less_service.Friend.RecvPointRequest"
}

type Friend_RecvPointResponse struct {
	IsRecv bool `protobuf:"varint,1,opt,name=is_recv,json=isRecv,proto3" json:"is_recv,omitempty"`
}

func (m *Friend_RecvPointResponse) Reset()      { *m = Friend_RecvPointResponse{} }
func (*Friend_RecvPointResponse) ProtoMessage() {}
func (*Friend_RecvPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 17}
}
func (m *Friend_RecvPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_RecvPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_RecvPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_RecvPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_RecvPointResponse.Merge(m, src)
}
func (m *Friend_RecvPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_RecvPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_RecvPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_RecvPointResponse proto.InternalMessageInfo

func (m *Friend_RecvPointResponse) GetIsRecv() bool {
	if m != nil {
		return m.IsRecv
	}
	return false
}

func (*Friend_RecvPointResponse) XXX_MessageName() string {
	return "less_service.Friend.RecvPointResponse"
}

// 赠送并收取友情点
type Friend_SendAndRecvRequest struct {
}

func (m *Friend_SendAndRecvRequest) Reset()      { *m = Friend_SendAndRecvRequest{} }
func (*Friend_SendAndRecvRequest) ProtoMessage() {}
func (*Friend_SendAndRecvRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 18}
}
func (m *Friend_SendAndRecvRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_SendAndRecvRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_SendAndRecvRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_SendAndRecvRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_SendAndRecvRequest.Merge(m, src)
}
func (m *Friend_SendAndRecvRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_SendAndRecvRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_SendAndRecvRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_SendAndRecvRequest proto.InternalMessageInfo

func (*Friend_SendAndRecvRequest) XXX_MessageName() string {
	return "less_service.Friend.SendAndRecvRequest"
}

type Friend_SendAndRecvResponse struct {
	IsSend bool `protobuf:"varint,1,opt,name=is_send,json=isSend,proto3" json:"is_send,omitempty"`
	IsRecv bool `protobuf:"varint,2,opt,name=is_recv,json=isRecv,proto3" json:"is_recv,omitempty"`
}

func (m *Friend_SendAndRecvResponse) Reset()      { *m = Friend_SendAndRecvResponse{} }
func (*Friend_SendAndRecvResponse) ProtoMessage() {}
func (*Friend_SendAndRecvResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 19}
}
func (m *Friend_SendAndRecvResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_SendAndRecvResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_SendAndRecvResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_SendAndRecvResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_SendAndRecvResponse.Merge(m, src)
}
func (m *Friend_SendAndRecvResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_SendAndRecvResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_SendAndRecvResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_SendAndRecvResponse proto.InternalMessageInfo

func (m *Friend_SendAndRecvResponse) GetIsSend() bool {
	if m != nil {
		return m.IsSend
	}
	return false
}

func (m *Friend_SendAndRecvResponse) GetIsRecv() bool {
	if m != nil {
		return m.IsRecv
	}
	return false
}

func (*Friend_SendAndRecvResponse) XXX_MessageName() string {
	return "less_service.Friend.SendAndRecvResponse"
}

//----------------------cheat----------------------//
// 作弊器清除发送和收到的友情点
type Friend_CheatClearSendAndRecvRequest struct {
}

func (m *Friend_CheatClearSendAndRecvRequest) Reset()      { *m = Friend_CheatClearSendAndRecvRequest{} }
func (*Friend_CheatClearSendAndRecvRequest) ProtoMessage() {}
func (*Friend_CheatClearSendAndRecvRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 20}
}
func (m *Friend_CheatClearSendAndRecvRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_CheatClearSendAndRecvRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_CheatClearSendAndRecvRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_CheatClearSendAndRecvRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_CheatClearSendAndRecvRequest.Merge(m, src)
}
func (m *Friend_CheatClearSendAndRecvRequest) XXX_Size() int {
	return m.Size()
}
func (m *Friend_CheatClearSendAndRecvRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_CheatClearSendAndRecvRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_CheatClearSendAndRecvRequest proto.InternalMessageInfo

func (*Friend_CheatClearSendAndRecvRequest) XXX_MessageName() string {
	return "less_service.Friend.CheatClearSendAndRecvRequest"
}

type Friend_CheatClearSendAndRecvResponse struct {
}

func (m *Friend_CheatClearSendAndRecvResponse) Reset()      { *m = Friend_CheatClearSendAndRecvResponse{} }
func (*Friend_CheatClearSendAndRecvResponse) ProtoMessage() {}
func (*Friend_CheatClearSendAndRecvResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 21}
}
func (m *Friend_CheatClearSendAndRecvResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_CheatClearSendAndRecvResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_CheatClearSendAndRecvResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_CheatClearSendAndRecvResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_CheatClearSendAndRecvResponse.Merge(m, src)
}
func (m *Friend_CheatClearSendAndRecvResponse) XXX_Size() int {
	return m.Size()
}
func (m *Friend_CheatClearSendAndRecvResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_CheatClearSendAndRecvResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_CheatClearSendAndRecvResponse proto.InternalMessageInfo

func (*Friend_CheatClearSendAndRecvResponse) XXX_MessageName() string {
	return "less_service.Friend.CheatClearSendAndRecvResponse"
}

//----------------------push----------------------//
// 好友列表改变通知
type Friend_FriendListUpdatePush struct {
}

func (m *Friend_FriendListUpdatePush) Reset()      { *m = Friend_FriendListUpdatePush{} }
func (*Friend_FriendListUpdatePush) ProtoMessage() {}
func (*Friend_FriendListUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 22}
}
func (m *Friend_FriendListUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_FriendListUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_FriendListUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_FriendListUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_FriendListUpdatePush.Merge(m, src)
}
func (m *Friend_FriendListUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *Friend_FriendListUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_FriendListUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_FriendListUpdatePush proto.InternalMessageInfo

func (*Friend_FriendListUpdatePush) XXX_MessageName() string {
	return "less_service.Friend.FriendListUpdatePush"
}

// 请求列表改变通知
type Friend_RequestListUpdatePush struct {
}

func (m *Friend_RequestListUpdatePush) Reset()      { *m = Friend_RequestListUpdatePush{} }
func (*Friend_RequestListUpdatePush) ProtoMessage() {}
func (*Friend_RequestListUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 23}
}
func (m *Friend_RequestListUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_RequestListUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_RequestListUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_RequestListUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_RequestListUpdatePush.Merge(m, src)
}
func (m *Friend_RequestListUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *Friend_RequestListUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_RequestListUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_RequestListUpdatePush proto.InternalMessageInfo

func (*Friend_RequestListUpdatePush) XXX_MessageName() string {
	return "less_service.Friend.RequestListUpdatePush"
}

// !!!!!服务器内部使用!!!!!，发送友情点
type Friend_ServerSendPointPush struct {
	SendRole string `protobuf:"bytes,1,opt,name=send_role,json=sendRole,proto3" json:"send_role,omitempty"`
}

func (m *Friend_ServerSendPointPush) Reset()      { *m = Friend_ServerSendPointPush{} }
func (*Friend_ServerSendPointPush) ProtoMessage() {}
func (*Friend_ServerSendPointPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d2b7fac928b37c, []int{0, 24}
}
func (m *Friend_ServerSendPointPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend_ServerSendPointPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend_ServerSendPointPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend_ServerSendPointPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend_ServerSendPointPush.Merge(m, src)
}
func (m *Friend_ServerSendPointPush) XXX_Size() int {
	return m.Size()
}
func (m *Friend_ServerSendPointPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend_ServerSendPointPush.DiscardUnknown(m)
}

var xxx_messageInfo_Friend_ServerSendPointPush proto.InternalMessageInfo

func (m *Friend_ServerSendPointPush) GetSendRole() string {
	if m != nil {
		return m.SendRole
	}
	return ""
}

func (*Friend_ServerSendPointPush) XXX_MessageName() string {
	return "less_service.Friend.ServerSendPointPush"
}
func init() {
	proto.RegisterEnum("less_service.FriendErrorCode", FriendErrorCode_name, FriendErrorCode_value)
	proto.RegisterType((*Friend)(nil), "less_service.Friend")
	proto.RegisterType((*Friend_GetFriendListRequest)(nil), "less_service.Friend.GetFriendListRequest")
	proto.RegisterType((*Friend_GetFriendListResponse)(nil), "less_service.Friend.GetFriendListResponse")
	proto.RegisterType((*Friend_GetRequestListRequest)(nil), "less_service.Friend.GetRequestListRequest")
	proto.RegisterType((*Friend_GetRequestListResponse)(nil), "less_service.Friend.GetRequestListResponse")
	proto.RegisterType((*Friend_AddRequestRequest)(nil), "less_service.Friend.AddRequestRequest")
	proto.RegisterType((*Friend_AddRequestResponse)(nil), "less_service.Friend.AddRequestResponse")
	proto.RegisterType((*Friend_ConfirmRequestRequest)(nil), "less_service.Friend.ConfirmRequestRequest")
	proto.RegisterType((*Friend_ConfirmRequestResponse)(nil), "less_service.Friend.ConfirmRequestResponse")
	proto.RegisterType((*Friend_DeleteRequest)(nil), "less_service.Friend.DeleteRequest")
	proto.RegisterType((*Friend_DeleteResponse)(nil), "less_service.Friend.DeleteResponse")
	proto.RegisterType((*Friend_AddBlackRequest)(nil), "less_service.Friend.AddBlackRequest")
	proto.RegisterType((*Friend_AddBlackResponse)(nil), "less_service.Friend.AddBlackResponse")
	proto.RegisterType((*Friend_RemoveBlackRequest)(nil), "less_service.Friend.RemoveBlackRequest")
	proto.RegisterType((*Friend_RemoveBlackResponse)(nil), "less_service.Friend.RemoveBlackResponse")
	proto.RegisterType((*Friend_SendPointRequest)(nil), "less_service.Friend.SendPointRequest")
	proto.RegisterType((*Friend_SendPointResponse)(nil), "less_service.Friend.SendPointResponse")
	proto.RegisterType((*Friend_RecvPointRequest)(nil), "less_service.Friend.RecvPointRequest")
	proto.RegisterType((*Friend_RecvPointResponse)(nil), "less_service.Friend.RecvPointResponse")
	proto.RegisterType((*Friend_SendAndRecvRequest)(nil), "less_service.Friend.SendAndRecvRequest")
	proto.RegisterType((*Friend_SendAndRecvResponse)(nil), "less_service.Friend.SendAndRecvResponse")
	proto.RegisterType((*Friend_CheatClearSendAndRecvRequest)(nil), "less_service.Friend.CheatClearSendAndRecvRequest")
	proto.RegisterType((*Friend_CheatClearSendAndRecvResponse)(nil), "less_service.Friend.CheatClearSendAndRecvResponse")
	proto.RegisterType((*Friend_FriendListUpdatePush)(nil), "less_service.Friend.FriendListUpdatePush")
	proto.RegisterType((*Friend_RequestListUpdatePush)(nil), "less_service.Friend.RequestListUpdatePush")
	proto.RegisterType((*Friend_ServerSendPointPush)(nil), "less_service.Friend.ServerSendPointPush")
}

func init() { proto.RegisterFile("proto/less-service/friend.proto", fileDescriptor_37d2b7fac928b37c) }

var fileDescriptor_37d2b7fac928b37c = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xc1, 0x6f, 0xdb, 0x64,
	0x14, 0x8f, 0xdb, 0x91, 0x26, 0xaf, 0x5d, 0xeb, 0x7e, 0x4d, 0x9a, 0xd4, 0x63, 0x5e, 0x85, 0x34,
	0xa9, 0x94, 0xb5, 0x15, 0xad, 0xc4, 0xbd, 0x0b, 0xd9, 0xa8, 0x84, 0xa0, 0x4a, 0xc7, 0x85, 0x4b,
	0xe4, 0xc5, 0x2f, 0xcc, 0xc2, 0xf1, 0x57, 0xbe, 0xcf, 0x8d, 0xe0, 0x36, 0x34, 0x21, 0xa4, 0x4c,
	0xa1, 0x43, 0x30, 0xe0, 0x30, 0x10, 0x3b, 0x4c, 0x9a, 0x90, 0x50, 0xb5, 0x4d, 0x51, 0x57, 0x46,
	0xef, 0x3b, 0xee, 0xb8, 0x23, 0x24, 0x75, 0x48, 0x6f, 0xfc, 0x09, 0xe8, 0xb3, 0xbf, 0xd8, 0x4e,
	0x29, 0x6a, 0x39, 0x55, 0x7e, 0xbf, 0xdf, 0xfb, 0xbd, 0xdf, 0xfb, 0xf5, 0x39, 0x86, 0x0b, 0x9b,
	0x8c, 0xba, 0x74, 0xc9, 0x46, 0xce, 0x17, 0x38, 0xb2, 0xba, 0x55, 0xc1, 0xa5, 0x2a, 0xb3, 0xd0,
	0x31, 0x17, 0x7d, 0x84, 0x8c, 0x09, 0xa8, 0x2c, 0x21, 0x6d, 0x26, 0xa0, 0xd7, 0xa8, 0x89, 0x36,
	0x1f, 0x20, 0x6a, 0xb9, 0x01, 0xe8, 0xba, 0xc1, 0x31, 0x00, 0x5e, 0xeb, 0xa4, 0x20, 0x79, 0xc5,
	0x67, 0x6a, 0xd3, 0x90, 0xb9, 0x8a, 0x6e, 0xf0, 0xf0, 0xae, 0xc5, 0xdd, 0x12, 0x7e, 0xb2, 0x85,
	0xdc, 0xd5, 0x1a, 0x0a, 0x64, 0x8f, 0x00, 0x7c, 0x93, 0x3a, 0x1c, 0xc9, 0x0a, 0x8c, 0x06, 0x53,
	0xca, 0xb6, 0xc5, 0xdd, 0xbc, 0x32, 0x3b, 0x3c, 0x37, 0xba, 0x4c, 0x16, 0x83, 0x29, 0x8b, 0x41,
	0xc3, 0x9a, 0x53, 0xa5, 0x25, 0xa8, 0x86, 0xcd, 0xe4, 0x3c, 0x80, 0x4b, 0x4d, 0xe3, 0xb3, 0x32,
	0x47, 0xc7, 0xcc, 0x0f, 0xcd, 0x2a, 0x73, 0xa4, 0x94, 0xf6, 0x2b, 0x1b, 0xe8, 0x98, 0x11, 0xcc,
	0xb0, 0x52, 0xcf, 0x0f, 0xc7, 0xe0, 0x12, 0x56, 0xea, 0x5a, 0xce, 0xf7, 0x22, 0xad, 0xc5, 0x5d,
	0xae, 0xc3, 0xf4, 0x51, 0x40, 0xba, 0x7c, 0x0b, 0xc6, 0x58, 0x50, 0x8e, 0xdb, 0x9c, 0xea, 0xdb,
	0x94, 0x2d, 0xbe, 0xcf, 0x51, 0x16, 0xf5, 0x6b, 0x97, 0x60, 0x72, 0xd5, 0x34, 0x25, 0x2c, 0xff,
	0x90, 0x1c, 0x8c, 0x30, 0x6a, 0x63, 0xd9, 0x32, 0xf3, 0xca, 0xac, 0x32, 0x97, 0x2e, 0x25, 0xc5,
	0xe3, 0x9a, 0xa9, 0x65, 0x80, 0xc4, 0xd9, 0xc1, 0x6c, 0xed, 0x7d, 0xc8, 0x16, 0xa8, 0x53, 0xb5,
	0x58, 0xed, 0x94, 0x3a, 0x62, 0x7f, 0x8b, 0x97, 0x2b, 0xd4, 0xa9, 0x52, 0x56, 0xf3, 0xe3, 0x49,
	0x95, 0xd2, 0x16, 0x2f, 0x04, 0x05, 0x6d, 0x05, 0xa6, 0x8f, 0x0a, 0xca, 0x35, 0x67, 0x20, 0x85,
	0x8c, 0x95, 0x2b, 0xd4, 0x44, 0x29, 0x39, 0x82, 0x8c, 0x15, 0xa8, 0x89, 0xda, 0x1c, 0x9c, 0x7d,
	0x1b, 0x6d, 0x74, 0xf1, 0xc4, 0x2d, 0x54, 0x18, 0xef, 0x33, 0xe5, 0x06, 0xf3, 0x30, 0xb1, 0x6a,
	0x9a, 0x97, 0x6d, 0xa3, 0xf2, 0xf1, 0x89, 0xdd, 0x04, 0xd4, 0x88, 0x2b, 0xfb, 0x17, 0x80, 0x94,
	0xb0, 0x46, 0xeb, 0x78, 0x3a, 0x89, 0x2c, 0x4c, 0x0d, 0xd0, 0x43, 0x15, 0x55, 0x5c, 0xc7, 0x3a,
	0xb5, 0x9c, 0x30, 0xc2, 0x19, 0x48, 0x49, 0x0d, 0xde, 0x5f, 0x38, 0x10, 0xe1, 0xe2, 0x5f, 0x17,
	0xa3, 0xcb, 0x80, 0x72, 0x30, 0x62, 0xf1, 0xe0, 0xea, 0x14, 0x3f, 0xd6, 0xa4, 0xc5, 0x05, 0x4b,
	0x88, 0x8b, 0xdb, 0xfa, 0x1f, 0xe2, 0x31, 0xfa, 0x80, 0xb8, 0x7f, 0xb3, 0xa1, 0xb8, 0x7f, 0xb0,
	0x19, 0x20, 0x62, 0xc8, 0xaa, 0x63, 0x8a, 0xc7, 0xfe, 0xb5, 0x5e, 0x85, 0xa9, 0x81, 0xea, 0x09,
	0x16, 0xe3, 0xf2, 0x43, 0x03, 0xf2, 0x3a, 0xbc, 0x5a, 0xb8, 0x81, 0x86, 0x5b, 0xb0, 0xd1, 0x60,
	0xc7, 0x0c, 0xba, 0x00, 0xe7, 0xff, 0x03, 0x97, 0xc9, 0x4e, 0x43, 0x26, 0x7a, 0xb3, 0x3f, 0xd8,
	0x34, 0x0d, 0x17, 0xd7, 0xb7, 0xf8, 0x0d, 0xf1, 0xa2, 0xc5, 0x5e, 0xa6, 0x18, 0xb0, 0x2c, 0xac,
	0xb3, 0x3a, 0xb2, 0x30, 0x61, 0x51, 0x26, 0xe7, 0x20, 0x2d, 0x7c, 0x97, 0x45, 0x4a, 0x32, 0xb1,
	0x94, 0x28, 0x94, 0xa8, 0x8d, 0xf3, 0xbf, 0x9d, 0x81, 0x89, 0x60, 0x4a, 0x91, 0x31, 0xea, 0x1f,
	0x25, 0x79, 0x1d, 0xc6, 0x8b, 0x8c, 0xc9, 0xea, 0xa7, 0x16, 0x77, 0xd5, 0x84, 0x96, 0x6d, 0xb4,
	0xf2, 0x93, 0x64, 0xc2, 0x7b, 0xb0, 0xef, 0x6d, 0xdf, 0xf6, 0x76, 0x1f, 0x7b, 0xbf, 0xfe, 0xe0,
	0xdd, 0x7b, 0x48, 0xe6, 0x61, 0xa2, 0xc8, 0x98, 0xb4, 0x13, 0x70, 0x95, 0x3e, 0xf7, 0xaf, 0x6f,
	0x9f, 0xf4, 0x76, 0x76, 0x23, 0xee, 0x1b, 0x70, 0xb6, 0xc8, 0x98, 0x7f, 0x3d, 0x01, 0x73, 0x48,
	0xcb, 0x37, 0x5a, 0xf9, 0x0c, 0x21, 0x87, 0xcf, 0xbe, 0xf6, 0xee, 0x34, 0xbd, 0xe6, 0xdd, 0x88,
	0x7c, 0x09, 0x26, 0x43, 0x0f, 0xef, 0x51, 0x29, 0x3d, 0x3c, 0x68, 0xe3, 0xe0, 0x69, 0x53, 0xb2,
	0x17, 0x80, 0x44, 0x36, 0x42, 0xfa, 0x99, 0x41, 0x27, 0x11, 0x7d, 0x11, 0xd4, 0xbe, 0x93, 0x90,
	0xfc, 0xca, 0xbf, 0xcc, 0x44, 0xfc, 0x8b, 0xbe, 0xf3, 0xc0, 0xcc, 0x95, 0x2d, 0xdb, 0x56, 0x93,
	0x1a, 0x69, 0xb4, 0xf2, 0xe3, 0x64, 0x2c, 0xcc, 0xa3, 0xfb, 0xec, 0x3e, 0x79, 0x13, 0xa6, 0x8a,
	0x8c, 0xf9, 0xc1, 0xaf, 0xda, 0x0c, 0x0d, 0x53, 0xfc, 0x6e, 0xba, 0xea, 0x48, 0x5f, 0xd9, 0xdb,
	0xbe, 0xdd, 0xbd, 0xf5, 0x85, 0x77, 0xf3, 0x77, 0x6f, 0xf7, 0x71, 0xaf, 0xf5, 0xf3, 0xe1, 0xcd,
	0xcf, 0x8f, 0x69, 0x11, 0x27, 0xa0, 0xa6, 0x8e, 0x6b, 0xe9, 0x7e, 0xf5, 0xc0, 0xdb, 0xfe, 0x9e,
	0x2c, 0xfb, 0xc9, 0x14, 0x0c, 0xc7, 0x7d, 0xc7, 0x70, 0x4c, 0x1b, 0x37, 0xd0, 0xae, 0xaa, 0x69,
	0xed, 0x5c, 0xa3, 0x95, 0xcf, 0x91, 0xec, 0xc1, 0xd3, 0x66, 0xef, 0xd6, 0xbe, 0xb7, 0xb3, 0xd7,
	0xfb, 0xf2, 0x17, 0x6f, 0xf7, 0x51, 0xf7, 0x9b, 0xe6, 0xc1, 0xfe, 0x3d, 0xb9, 0xc0, 0x35, 0x83,
	0xad, 0xd9, 0x36, 0x7e, 0x64, 0xd8, 0x2a, 0x84, 0x0b, 0xec, 0xec, 0xf5, 0x1e, 0xdd, 0x3f, 0xfc,
	0xf1, 0xa7, 0xee, 0x93, 0xbb, 0x32, 0x97, 0x6b, 0x46, 0x7c, 0xd5, 0xd1, 0xd0, 0xca, 0xce, 0x5e,
	0xf7, 0xbb, 0xbd, 0xf8, 0xc2, 0x97, 0x37, 0x5e, 0xfe, 0xa9, 0x27, 0x1e, 0xb6, 0x75, 0xe5, 0x79,
	0x5b, 0x57, 0x5e, 0xb4, 0x75, 0xe5, 0x8f, 0xb6, 0xae, 0xf4, 0xda, 0x7a, 0xe2, 0xef, 0xb6, 0xae,
	0xdc, 0xe9, 0xe8, 0x89, 0xe7, 0x1d, 0x5d, 0x79, 0xd1, 0xd1, 0x13, 0x2f, 0x3b, 0x7a, 0xe2, 0xc3,
	0x8b, 0x15, 0x6a, 0x39, 0xfe, 0xd7, 0x12, 0xd9, 0x52, 0x85, 0xd6, 0x6a, 0xd4, 0x59, 0x8a, 0x3e,
	0xa3, 0xfd, 0x6f, 0xe5, 0xf5, 0xa4, 0x5f, 0x5b, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xe8,
	0xe8, 0x99, 0x63, 0x07, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_GetFriendListRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_GetFriendListResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_GetRequestListRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_GetRequestListResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_AddRequestRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_AddRequestResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_ConfirmRequestRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_ConfirmRequestResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_DeleteRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_DeleteResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_AddBlackRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_AddBlackResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_RemoveBlackRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_RemoveBlackResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_SendPointRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_SendPointResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_RecvPointRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_RecvPointResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_SendAndRecvRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_SendAndRecvResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_CheatClearSendAndRecvRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_CheatClearSendAndRecvResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_FriendListUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_RequestListUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend_ServerSendPointPush.Get().(proto.Message)
	})
}

var poolFriend = &sync.Pool{New: func() interface{} { return &Friend{} }}

func (m *Friend) ReleasePool() { m.Reset(); poolFriend.Put(m); m = nil }

var poolFriend_GetFriendListRequest = &sync.Pool{New: func() interface{} { return &Friend_GetFriendListRequest{} }}

func (m *Friend_GetFriendListRequest) ReleasePool() {
	m.Reset()
	poolFriend_GetFriendListRequest.Put(m)
	m = nil
}

var poolFriend_GetFriendListResponse = &sync.Pool{New: func() interface{} { return &Friend_GetFriendListResponse{} }}

func (m *Friend_GetFriendListResponse) ReleasePool() {
	m.Reset()
	poolFriend_GetFriendListResponse.Put(m)
	m = nil
}

var poolFriend_GetRequestListRequest = &sync.Pool{New: func() interface{} { return &Friend_GetRequestListRequest{} }}

func (m *Friend_GetRequestListRequest) ReleasePool() {
	m.Reset()
	poolFriend_GetRequestListRequest.Put(m)
	m = nil
}

var poolFriend_GetRequestListResponse = &sync.Pool{New: func() interface{} { return &Friend_GetRequestListResponse{} }}

func (m *Friend_GetRequestListResponse) ReleasePool() {
	m.Reset()
	poolFriend_GetRequestListResponse.Put(m)
	m = nil
}

var poolFriend_AddRequestRequest = &sync.Pool{New: func() interface{} { return &Friend_AddRequestRequest{} }}

func (m *Friend_AddRequestRequest) ReleasePool() {
	m.Reset()
	poolFriend_AddRequestRequest.Put(m)
	m = nil
}

var poolFriend_AddRequestResponse = &sync.Pool{New: func() interface{} { return &Friend_AddRequestResponse{} }}

func (m *Friend_AddRequestResponse) ReleasePool() {
	m.Reset()
	poolFriend_AddRequestResponse.Put(m)
	m = nil
}

var poolFriend_ConfirmRequestRequest = &sync.Pool{New: func() interface{} { return &Friend_ConfirmRequestRequest{} }}

func (m *Friend_ConfirmRequestRequest) ReleasePool() {
	m.Reset()
	poolFriend_ConfirmRequestRequest.Put(m)
	m = nil
}

var poolFriend_ConfirmRequestResponse = &sync.Pool{New: func() interface{} { return &Friend_ConfirmRequestResponse{} }}

func (m *Friend_ConfirmRequestResponse) ReleasePool() {
	m.Reset()
	poolFriend_ConfirmRequestResponse.Put(m)
	m = nil
}

var poolFriend_DeleteRequest = &sync.Pool{New: func() interface{} { return &Friend_DeleteRequest{} }}

func (m *Friend_DeleteRequest) ReleasePool() { m.Reset(); poolFriend_DeleteRequest.Put(m); m = nil }

var poolFriend_DeleteResponse = &sync.Pool{New: func() interface{} { return &Friend_DeleteResponse{} }}

func (m *Friend_DeleteResponse) ReleasePool() { m.Reset(); poolFriend_DeleteResponse.Put(m); m = nil }

var poolFriend_AddBlackRequest = &sync.Pool{New: func() interface{} { return &Friend_AddBlackRequest{} }}

func (m *Friend_AddBlackRequest) ReleasePool() { m.Reset(); poolFriend_AddBlackRequest.Put(m); m = nil }

var poolFriend_AddBlackResponse = &sync.Pool{New: func() interface{} { return &Friend_AddBlackResponse{} }}

func (m *Friend_AddBlackResponse) ReleasePool() {
	m.Reset()
	poolFriend_AddBlackResponse.Put(m)
	m = nil
}

var poolFriend_RemoveBlackRequest = &sync.Pool{New: func() interface{} { return &Friend_RemoveBlackRequest{} }}

func (m *Friend_RemoveBlackRequest) ReleasePool() {
	m.Reset()
	poolFriend_RemoveBlackRequest.Put(m)
	m = nil
}

var poolFriend_RemoveBlackResponse = &sync.Pool{New: func() interface{} { return &Friend_RemoveBlackResponse{} }}

func (m *Friend_RemoveBlackResponse) ReleasePool() {
	m.Reset()
	poolFriend_RemoveBlackResponse.Put(m)
	m = nil
}

var poolFriend_SendPointRequest = &sync.Pool{New: func() interface{} { return &Friend_SendPointRequest{} }}

func (m *Friend_SendPointRequest) ReleasePool() {
	m.Reset()
	poolFriend_SendPointRequest.Put(m)
	m = nil
}

var poolFriend_SendPointResponse = &sync.Pool{New: func() interface{} { return &Friend_SendPointResponse{} }}

func (m *Friend_SendPointResponse) ReleasePool() {
	m.Reset()
	poolFriend_SendPointResponse.Put(m)
	m = nil
}

var poolFriend_RecvPointRequest = &sync.Pool{New: func() interface{} { return &Friend_RecvPointRequest{} }}

func (m *Friend_RecvPointRequest) ReleasePool() {
	m.Reset()
	poolFriend_RecvPointRequest.Put(m)
	m = nil
}

var poolFriend_RecvPointResponse = &sync.Pool{New: func() interface{} { return &Friend_RecvPointResponse{} }}

func (m *Friend_RecvPointResponse) ReleasePool() {
	m.Reset()
	poolFriend_RecvPointResponse.Put(m)
	m = nil
}

var poolFriend_SendAndRecvRequest = &sync.Pool{New: func() interface{} { return &Friend_SendAndRecvRequest{} }}

func (m *Friend_SendAndRecvRequest) ReleasePool() {
	m.Reset()
	poolFriend_SendAndRecvRequest.Put(m)
	m = nil
}

var poolFriend_SendAndRecvResponse = &sync.Pool{New: func() interface{} { return &Friend_SendAndRecvResponse{} }}

func (m *Friend_SendAndRecvResponse) ReleasePool() {
	m.Reset()
	poolFriend_SendAndRecvResponse.Put(m)
	m = nil
}

var poolFriend_CheatClearSendAndRecvRequest = &sync.Pool{New: func() interface{} { return &Friend_CheatClearSendAndRecvRequest{} }}

func (m *Friend_CheatClearSendAndRecvRequest) ReleasePool() {
	m.Reset()
	poolFriend_CheatClearSendAndRecvRequest.Put(m)
	m = nil
}

var poolFriend_CheatClearSendAndRecvResponse = &sync.Pool{New: func() interface{} { return &Friend_CheatClearSendAndRecvResponse{} }}

func (m *Friend_CheatClearSendAndRecvResponse) ReleasePool() {
	m.Reset()
	poolFriend_CheatClearSendAndRecvResponse.Put(m)
	m = nil
}

var poolFriend_FriendListUpdatePush = &sync.Pool{New: func() interface{} { return &Friend_FriendListUpdatePush{} }}

func (m *Friend_FriendListUpdatePush) ReleasePool() {
	m.Reset()
	poolFriend_FriendListUpdatePush.Put(m)
	m = nil
}

var poolFriend_RequestListUpdatePush = &sync.Pool{New: func() interface{} { return &Friend_RequestListUpdatePush{} }}

func (m *Friend_RequestListUpdatePush) ReleasePool() {
	m.Reset()
	poolFriend_RequestListUpdatePush.Put(m)
	m = nil
}

var poolFriend_ServerSendPointPush = &sync.Pool{New: func() interface{} { return &Friend_ServerSendPointPush{} }}

func (m *Friend_ServerSendPointPush) ReleasePool() {
	m.Reset()
	poolFriend_ServerSendPointPush.Put(m)
	m = nil
}
func (x FriendErrorCode) String() string {
	s, ok := FriendErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Friend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend)
	if !ok {
		that2, ok := that.(Friend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_GetFriendListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_GetFriendListRequest)
	if !ok {
		that2, ok := that.(Friend_GetFriendListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_GetFriendListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_GetFriendListResponse)
	if !ok {
		that2, ok := that.(Friend_GetFriendListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FriendList) != len(that1.FriendList) {
		return false
	}
	for i := range this.FriendList {
		if !this.FriendList[i].Equal(that1.FriendList[i]) {
			return false
		}
	}
	if this.TodaySend != that1.TodaySend {
		return false
	}
	if this.TodayRecv != that1.TodayRecv {
		return false
	}
	return true
}
func (this *Friend_GetRequestListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_GetRequestListRequest)
	if !ok {
		that2, ok := that.(Friend_GetRequestListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_GetRequestListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_GetRequestListResponse)
	if !ok {
		that2, ok := that.(Friend_GetRequestListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestList) != len(that1.RequestList) {
		return false
	}
	for i := range this.RequestList {
		if !this.RequestList[i].Equal(that1.RequestList[i]) {
			return false
		}
	}
	return true
}
func (this *Friend_AddRequestRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_AddRequestRequest)
	if !ok {
		that2, ok := that.(Friend_AddRequestRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *Friend_AddRequestResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_AddRequestResponse)
	if !ok {
		that2, ok := that.(Friend_AddRequestResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_ConfirmRequestRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_ConfirmRequestRequest)
	if !ok {
		that2, ok := that.(Friend_ConfirmRequestRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.IsConform != that1.IsConform {
		return false
	}
	return true
}
func (this *Friend_ConfirmRequestResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_ConfirmRequestResponse)
	if !ok {
		that2, ok := that.(Friend_ConfirmRequestResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *Friend_DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_DeleteRequest)
	if !ok {
		that2, ok := that.(Friend_DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *Friend_DeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_DeleteResponse)
	if !ok {
		that2, ok := that.(Friend_DeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_AddBlackRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_AddBlackRequest)
	if !ok {
		that2, ok := that.(Friend_AddBlackRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *Friend_AddBlackResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_AddBlackResponse)
	if !ok {
		that2, ok := that.(Friend_AddBlackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_RemoveBlackRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_RemoveBlackRequest)
	if !ok {
		that2, ok := that.(Friend_RemoveBlackRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *Friend_RemoveBlackResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_RemoveBlackResponse)
	if !ok {
		that2, ok := that.(Friend_RemoveBlackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_SendPointRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_SendPointRequest)
	if !ok {
		that2, ok := that.(Friend_SendPointRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleIds != that1.RoleIds {
		return false
	}
	return true
}
func (this *Friend_SendPointResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_SendPointResponse)
	if !ok {
		that2, ok := that.(Friend_SendPointResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSend != that1.IsSend {
		return false
	}
	return true
}
func (this *Friend_RecvPointRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_RecvPointRequest)
	if !ok {
		that2, ok := that.(Friend_RecvPointRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleIds != that1.RoleIds {
		return false
	}
	return true
}
func (this *Friend_RecvPointResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_RecvPointResponse)
	if !ok {
		that2, ok := that.(Friend_RecvPointResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsRecv != that1.IsRecv {
		return false
	}
	return true
}
func (this *Friend_SendAndRecvRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_SendAndRecvRequest)
	if !ok {
		that2, ok := that.(Friend_SendAndRecvRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_SendAndRecvResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_SendAndRecvResponse)
	if !ok {
		that2, ok := that.(Friend_SendAndRecvResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSend != that1.IsSend {
		return false
	}
	if this.IsRecv != that1.IsRecv {
		return false
	}
	return true
}
func (this *Friend_CheatClearSendAndRecvRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_CheatClearSendAndRecvRequest)
	if !ok {
		that2, ok := that.(Friend_CheatClearSendAndRecvRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_CheatClearSendAndRecvResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_CheatClearSendAndRecvResponse)
	if !ok {
		that2, ok := that.(Friend_CheatClearSendAndRecvResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_FriendListUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_FriendListUpdatePush)
	if !ok {
		that2, ok := that.(Friend_FriendListUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_RequestListUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_RequestListUpdatePush)
	if !ok {
		that2, ok := that.(Friend_RequestListUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Friend_ServerSendPointPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend_ServerSendPointPush)
	if !ok {
		that2, ok := that.(Friend_ServerSendPointPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SendRole != that1.SendRole {
		return false
	}
	return true
}
func (m *Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_GetFriendListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_GetFriendListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_GetFriendListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_GetFriendListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_GetFriendListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_GetFriendListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TodayRecv != 0 {
		i = encodeVarintFriend(dAtA, i, uint64((uint64(m.TodayRecv)<<1)^uint64((m.TodayRecv>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.TodaySend != 0 {
		i = encodeVarintFriend(dAtA, i, uint64((uint64(m.TodaySend)<<1)^uint64((m.TodaySend>>63))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FriendList) > 0 {
		for iNdEx := len(m.FriendList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FriendList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFriend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Friend_GetRequestListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_GetRequestListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_GetRequestListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_GetRequestListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_GetRequestListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_GetRequestListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestList) > 0 {
		for iNdEx := len(m.RequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFriend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Friend_AddRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_AddRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_AddRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Friend_AddRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_AddRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_AddRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_ConfirmRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_ConfirmRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_ConfirmRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsConform {
		i--
		if m.IsConform {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Friend_ConfirmRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_ConfirmRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_ConfirmRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrCode) > 0 {
		i -= len(m.ErrCode)
		copy(dAtA[i:], m.ErrCode)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.ErrCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Friend_DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Friend_DeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_DeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_DeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_AddBlackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_AddBlackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_AddBlackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Friend_AddBlackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_AddBlackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_AddBlackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_RemoveBlackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_RemoveBlackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_RemoveBlackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Friend_RemoveBlackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_RemoveBlackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_RemoveBlackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_SendPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_SendPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_SendPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		i -= len(m.RoleIds)
		copy(dAtA[i:], m.RoleIds)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleIds)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Friend_SendPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_SendPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_SendPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSend {
		i--
		if m.IsSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Friend_RecvPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_RecvPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_RecvPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		i -= len(m.RoleIds)
		copy(dAtA[i:], m.RoleIds)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleIds)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Friend_RecvPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_RecvPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_RecvPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRecv {
		i--
		if m.IsRecv {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Friend_SendAndRecvRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_SendAndRecvRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_SendAndRecvRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_SendAndRecvResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_SendAndRecvResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_SendAndRecvResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRecv {
		i--
		if m.IsRecv {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsSend {
		i--
		if m.IsSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Friend_CheatClearSendAndRecvRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_CheatClearSendAndRecvRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_CheatClearSendAndRecvRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_CheatClearSendAndRecvResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_CheatClearSendAndRecvResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_CheatClearSendAndRecvResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_FriendListUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_FriendListUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_FriendListUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_RequestListUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_RequestListUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_RequestListUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Friend_ServerSendPointPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend_ServerSendPointPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend_ServerSendPointPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SendRole) > 0 {
		i -= len(m.SendRole)
		copy(dAtA[i:], m.SendRole)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.SendRole)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFriend(dAtA []byte, offset int, v uint64) int {
	offset -= sovFriend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Friend) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_GetFriendListRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_GetFriendListResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("friend_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.FriendList == nil {
		w.RawString("null")
	} else if len(m.FriendList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.FriendList {
			v.JsonBytes(w)
			if i != len(m.FriendList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.TodaySend != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("today_send")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TodaySend))
		needWriteComma = true
	}
	if m.TodayRecv != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("today_recv")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TodayRecv))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_GetRequestListRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_GetRequestListResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("request_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.RequestList == nil {
		w.RawString("null")
	} else if len(m.RequestList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RequestList {
			v.JsonBytes(w)
			if i != len(m.RequestList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_AddRequestRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_AddRequestResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_ConfirmRequestRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.IsConform {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_conform")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsConform)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_ConfirmRequestResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ErrCode != "" {
		w.RawByte('"')
		w.RawString("err_code")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ErrCode)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_DeleteRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_DeleteResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_AddBlackRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_AddBlackResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_RemoveBlackRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_RemoveBlackResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_SendPointRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleIds != "" {
		w.RawByte('"')
		w.RawString("role_ids")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleIds)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_SendPointResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsSend {
		w.RawByte('"')
		w.RawString("is_send")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSend)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_RecvPointRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleIds != "" {
		w.RawByte('"')
		w.RawString("role_ids")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleIds)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_RecvPointResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsRecv {
		w.RawByte('"')
		w.RawString("is_recv")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRecv)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_SendAndRecvRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_SendAndRecvResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsSend {
		w.RawByte('"')
		w.RawString("is_send")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSend)
		needWriteComma = true
	}
	if m.IsRecv {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_recv")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRecv)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend_CheatClearSendAndRecvRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_CheatClearSendAndRecvResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_FriendListUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_RequestListUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Friend_ServerSendPointPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SendRole != "" {
		w.RawByte('"')
		w.RawString("send_role")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SendRole)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend) GoString() string {
	return m.String()
}

func (m *Friend_GetFriendListRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_GetFriendListRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_GetFriendListRequest) GoString() string {
	return m.String()
}

func (m *Friend_GetFriendListResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_GetFriendListResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_GetFriendListResponse) GoString() string {
	return m.String()
}

func (m *Friend_GetRequestListRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_GetRequestListRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_GetRequestListRequest) GoString() string {
	return m.String()
}

func (m *Friend_GetRequestListResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_GetRequestListResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_GetRequestListResponse) GoString() string {
	return m.String()
}

func (m *Friend_AddRequestRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_AddRequestRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_AddRequestRequest) GoString() string {
	return m.String()
}

func (m *Friend_AddRequestResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_AddRequestResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_AddRequestResponse) GoString() string {
	return m.String()
}

func (m *Friend_ConfirmRequestRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_ConfirmRequestRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_ConfirmRequestRequest) GoString() string {
	return m.String()
}

func (m *Friend_ConfirmRequestResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_ConfirmRequestResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_ConfirmRequestResponse) GoString() string {
	return m.String()
}

func (m *Friend_DeleteRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_DeleteRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_DeleteRequest) GoString() string {
	return m.String()
}

func (m *Friend_DeleteResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_DeleteResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_DeleteResponse) GoString() string {
	return m.String()
}

func (m *Friend_AddBlackRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_AddBlackRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_AddBlackRequest) GoString() string {
	return m.String()
}

func (m *Friend_AddBlackResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_AddBlackResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_AddBlackResponse) GoString() string {
	return m.String()
}

func (m *Friend_RemoveBlackRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_RemoveBlackRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_RemoveBlackRequest) GoString() string {
	return m.String()
}

func (m *Friend_RemoveBlackResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_RemoveBlackResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_RemoveBlackResponse) GoString() string {
	return m.String()
}

func (m *Friend_SendPointRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_SendPointRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_SendPointRequest) GoString() string {
	return m.String()
}

func (m *Friend_SendPointResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_SendPointResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_SendPointResponse) GoString() string {
	return m.String()
}

func (m *Friend_RecvPointRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_RecvPointRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_RecvPointRequest) GoString() string {
	return m.String()
}

func (m *Friend_RecvPointResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_RecvPointResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_RecvPointResponse) GoString() string {
	return m.String()
}

func (m *Friend_SendAndRecvRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_SendAndRecvRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_SendAndRecvRequest) GoString() string {
	return m.String()
}

func (m *Friend_SendAndRecvResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_SendAndRecvResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_SendAndRecvResponse) GoString() string {
	return m.String()
}

func (m *Friend_CheatClearSendAndRecvRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_CheatClearSendAndRecvRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_CheatClearSendAndRecvRequest) GoString() string {
	return m.String()
}

func (m *Friend_CheatClearSendAndRecvResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_CheatClearSendAndRecvResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_CheatClearSendAndRecvResponse) GoString() string {
	return m.String()
}

func (m *Friend_FriendListUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_FriendListUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_FriendListUpdatePush) GoString() string {
	return m.String()
}

func (m *Friend_RequestListUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_RequestListUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_RequestListUpdatePush) GoString() string {
	return m.String()
}

func (m *Friend_ServerSendPointPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend_ServerSendPointPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend_ServerSendPointPush) GoString() string {
	return m.String()
}

func (m *Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_GetFriendListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_GetFriendListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FriendList) > 0 {
		for _, e := range m.FriendList {
			l = e.Size()
			n += 1 + l + sovFriend(uint64(l))
		}
	}
	if m.TodaySend != 0 {
		n += 1 + sozFriend(uint64(m.TodaySend))
	}
	if m.TodayRecv != 0 {
		n += 1 + sozFriend(uint64(m.TodayRecv))
	}
	return n
}

func (m *Friend_GetRequestListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_GetRequestListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestList) > 0 {
		for _, e := range m.RequestList {
			l = e.Size()
			n += 1 + l + sovFriend(uint64(l))
		}
	}
	return n
}

func (m *Friend_AddRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func (m *Friend_AddRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_ConfirmRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	if m.IsConform {
		n += 2
	}
	return n
}

func (m *Friend_ConfirmRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrCode)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func (m *Friend_DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func (m *Friend_DeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_AddBlackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func (m *Friend_AddBlackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_RemoveBlackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func (m *Friend_RemoveBlackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_SendPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleIds)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func (m *Friend_SendPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSend {
		n += 2
	}
	return n
}

func (m *Friend_RecvPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleIds)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func (m *Friend_RecvPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRecv {
		n += 2
	}
	return n
}

func (m *Friend_SendAndRecvRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_SendAndRecvResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSend {
		n += 2
	}
	if m.IsRecv {
		n += 2
	}
	return n
}

func (m *Friend_CheatClearSendAndRecvRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_CheatClearSendAndRecvResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_FriendListUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_RequestListUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Friend_ServerSendPointPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SendRole)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func sovFriend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFriend(x uint64) (n int) {
	return sovFriend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_GetFriendListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFriendListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFriendListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_GetFriendListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFriendListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFriendListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendList = append(m.FriendList, &models.FriendInfo{})
			if err := m.FriendList[len(m.FriendList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodaySend", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.TodaySend = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayRecv", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.TodayRecv = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_GetRequestListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequestListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequestListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_GetRequestListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequestListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequestListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestList = append(m.RequestList, &models.RequestInfo{})
			if err := m.RequestList[len(m.RequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_AddRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_AddRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_ConfirmRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConform", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConform = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_ConfirmRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_DeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_AddBlackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBlackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBlackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_AddBlackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBlackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBlackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_RemoveBlackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBlackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBlackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_RemoveBlackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBlackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBlackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_SendPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_SendPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSend = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_RecvPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_RecvPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecv", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRecv = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_SendAndRecvRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendAndRecvRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendAndRecvRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_SendAndRecvResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendAndRecvResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendAndRecvResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSend = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecv", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRecv = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_CheatClearSendAndRecvRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatClearSendAndRecvRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatClearSendAndRecvRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_CheatClearSendAndRecvResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatClearSendAndRecvResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatClearSendAndRecvResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_FriendListUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendListUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendListUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_RequestListUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestListUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestListUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend_ServerSendPointPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerSendPointPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerSendPointPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFriend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFriend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFriend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFriend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFriend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFriend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFriend = fmt.Errorf("proto: unexpected end of group")
)
