// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/cppcopy/cpp_copy.proto

package cppbattlecopy

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CPPBattleCopy struct {
}

func (m *CPPBattleCopy) Reset()      { *m = CPPBattleCopy{} }
func (*CPPBattleCopy) ProtoMessage() {}
func (*CPPBattleCopy) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0}
}
func (m *CPPBattleCopy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattleCopy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattleCopy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattleCopy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattleCopy.Merge(m, src)
}
func (m *CPPBattleCopy) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattleCopy) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattleCopy.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattleCopy proto.InternalMessageInfo

func (*CPPBattleCopy) XXX_MessageName() string {
	return "cppbattlecopy.CPPBattleCopy"
}

//创建动态副本
type CPPBattleCopy_CreateCopyRequest struct {
	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *CPPBattleCopy_CreateCopyRequest) Reset()      { *m = CPPBattleCopy_CreateCopyRequest{} }
func (*CPPBattleCopy_CreateCopyRequest) ProtoMessage() {}
func (*CPPBattleCopy_CreateCopyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 0}
}
func (m *CPPBattleCopy_CreateCopyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattleCopy_CreateCopyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattleCopy_CreateCopyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattleCopy_CreateCopyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattleCopy_CreateCopyRequest.Merge(m, src)
}
func (m *CPPBattleCopy_CreateCopyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattleCopy_CreateCopyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattleCopy_CreateCopyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattleCopy_CreateCopyRequest proto.InternalMessageInfo

func (m *CPPBattleCopy_CreateCopyRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (*CPPBattleCopy_CreateCopyRequest) XXX_MessageName() string {
	return "cppbattlecopy.CPPBattleCopy.CreateCopyRequest"
}

type CPPBattleCopy_CreateCopyResponse struct {
	MapId    int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleId int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattleCopy_CreateCopyResponse) Reset()      { *m = CPPBattleCopy_CreateCopyResponse{} }
func (*CPPBattleCopy_CreateCopyResponse) ProtoMessage() {}
func (*CPPBattleCopy_CreateCopyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31aac1626bc27660, []int{0, 1}
}
func (m *CPPBattleCopy_CreateCopyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattleCopy_CreateCopyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattleCopy_CreateCopyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattleCopy_CreateCopyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattleCopy_CreateCopyResponse.Merge(m, src)
}
func (m *CPPBattleCopy_CreateCopyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattleCopy_CreateCopyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattleCopy_CreateCopyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattleCopy_CreateCopyResponse proto.InternalMessageInfo

func (m *CPPBattleCopy_CreateCopyResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *CPPBattleCopy_CreateCopyResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattleCopy_CreateCopyResponse) XXX_MessageName() string {
	return "cppbattlecopy.CPPBattleCopy.CreateCopyResponse"
}
func init() {
	proto.RegisterType((*CPPBattleCopy)(nil), "cppbattlecopy.CPPBattleCopy")
	proto.RegisterType((*CPPBattleCopy_CreateCopyRequest)(nil), "cppbattlecopy.CPPBattleCopy.CreateCopyRequest")
	proto.RegisterType((*CPPBattleCopy_CreateCopyResponse)(nil), "cppbattlecopy.CPPBattleCopy.CreateCopyResponse")
}

func init() { proto.RegisterFile("proto/cppcopy/cpp_copy.proto", fileDescriptor_31aac1626bc27660) }

var fileDescriptor_31aac1626bc27660 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x2e, 0x28, 0x48, 0xce, 0x2f, 0xa8, 0x04, 0xd1, 0xf1, 0x20, 0x86, 0x1e, 0x58,
	0x58, 0x88, 0x37, 0xb9, 0xa0, 0x20, 0x29, 0xb1, 0xa4, 0x24, 0x27, 0x15, 0x24, 0xa8, 0xd4, 0xca,
	0xc8, 0xc5, 0xeb, 0x1c, 0x10, 0xe0, 0x04, 0x16, 0x71, 0xce, 0x2f, 0xa8, 0x94, 0xd2, 0xe2, 0x12,
	0x74, 0x2e, 0x4a, 0x4d, 0x2c, 0x01, 0xf3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44,
	0xb9, 0xd8, 0x72, 0x13, 0x0b, 0xe2, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x58,
	0x73, 0x13, 0x0b, 0x3c, 0x53, 0xa4, 0x3c, 0xb8, 0x84, 0x90, 0xd5, 0x16, 0x17, 0xe4, 0xe7, 0x15,
	0xa7, 0xe2, 0x50, 0x2c, 0x24, 0xcd, 0xc5, 0x09, 0xb1, 0x18, 0x24, 0x93, 0x02, 0x96, 0xe1, 0x80,
	0x08, 0x78, 0xa6, 0x38, 0x85, 0xdc, 0x78, 0x28, 0xc7, 0xb0, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x9c, 0x78, 0x2c, 0xc7, 0x78, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x6a, 0xc9, 0xf9, 0x99, 0x79, 0xba, 0xc5, 0xa9, 0x45, 0x65, 0xa9,
	0x45, 0xfa, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9, 0x79, 0xfa, 0x70, 0x5f, 0x23, 0x7c, 0x97, 0xc4, 0x06,
	0x16, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x72, 0xd6, 0x4c, 0xd7, 0x13, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattleCopy.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattleCopy_CreateCopyRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattleCopy_CreateCopyResponse.Get().(proto.Message)
	})
}

var poolCPPBattleCopy = &sync.Pool{New: func() interface{} { return &CPPBattleCopy{} }}

func (m *CPPBattleCopy) ReleasePool() { m.Reset(); poolCPPBattleCopy.Put(m); m = nil }

var poolCPPBattleCopy_CreateCopyRequest = &sync.Pool{New: func() interface{} { return &CPPBattleCopy_CreateCopyRequest{} }}

func (m *CPPBattleCopy_CreateCopyRequest) ReleasePool() {
	m.Reset()
	poolCPPBattleCopy_CreateCopyRequest.Put(m)
	m = nil
}

var poolCPPBattleCopy_CreateCopyResponse = &sync.Pool{New: func() interface{} { return &CPPBattleCopy_CreateCopyResponse{} }}

func (m *CPPBattleCopy_CreateCopyResponse) ReleasePool() {
	m.Reset()
	poolCPPBattleCopy_CreateCopyResponse.Put(m)
	m = nil
}
func (this *CPPBattleCopy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattleCopy)
	if !ok {
		that2, ok := that.(CPPBattleCopy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattleCopy_CreateCopyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattleCopy_CreateCopyRequest)
	if !ok {
		that2, ok := that.(CPPBattleCopy_CreateCopyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *CPPBattleCopy_CreateCopyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattleCopy_CreateCopyResponse)
	if !ok {
		that2, ok := that.(CPPBattleCopy_CreateCopyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (m *CPPBattleCopy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattleCopy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattleCopy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattleCopy_CreateCopyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattleCopy_CreateCopyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattleCopy_CreateCopyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattleCopy_CreateCopyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattleCopy_CreateCopyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattleCopy_CreateCopyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.MapId != 0 {
		i = encodeVarintCppCopy(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCppCopy(dAtA []byte, offset int, v uint64) int {
	offset -= sovCppCopy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *CPPBattleCopy) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattleCopy_CreateCopyRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattleCopy_CreateCopyResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattleCopy) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.Buffer.Buf, nil
}
func (m *CPPBattleCopy) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattleCopy) GoString() string {
	return m.String()
}

func (m *CPPBattleCopy_CreateCopyRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.Buffer.Buf, nil
}
func (m *CPPBattleCopy_CreateCopyRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattleCopy_CreateCopyRequest) GoString() string {
	return m.String()
}

func (m *CPPBattleCopy_CreateCopyResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.Buffer.Buf, nil
}
func (m *CPPBattleCopy_CreateCopyResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattleCopy_CreateCopyResponse) GoString() string {
	return m.String()
}

func (m *CPPBattleCopy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattleCopy_CreateCopyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCppCopy(uint64(m.MapId))
	}
	return n
}

func (m *CPPBattleCopy_CreateCopyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCppCopy(uint64(m.MapId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppCopy(uint64(m.BattleId))
	}
	return n
}

func sovCppCopy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCppCopy(x uint64) (n int) {
	return sovCppCopy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CPPBattleCopy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPBattleCopy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPBattleCopy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattleCopy_CreateCopyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCopyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCopyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattleCopy_CreateCopyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCopyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCopyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppCopy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppCopy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCppCopy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCppCopy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCppCopy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCppCopy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCppCopy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCppCopy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCppCopy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCppCopy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCppCopy = fmt.Errorf("proto: unexpected end of group")
)
