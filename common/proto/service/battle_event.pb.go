// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/battle_event.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BattleEvent struct {
}

func (m *BattleEvent) Reset()      { *m = BattleEvent{} }
func (*BattleEvent) ProtoMessage() {}
func (*BattleEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f5a1e1ab132ec9, []int{0}
}
func (m *BattleEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleEvent.Merge(m, src)
}
func (m *BattleEvent) XXX_Size() int {
	return m.Size()
}
func (m *BattleEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BattleEvent proto.InternalMessageInfo

func (*BattleEvent) XXX_MessageName() string {
	return "service.BattleEvent"
}

type BattleEvent_KillMonsterPush struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (m *BattleEvent_KillMonsterPush) Reset()      { *m = BattleEvent_KillMonsterPush{} }
func (*BattleEvent_KillMonsterPush) ProtoMessage() {}
func (*BattleEvent_KillMonsterPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f5a1e1ab132ec9, []int{0, 0}
}
func (m *BattleEvent_KillMonsterPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleEvent_KillMonsterPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleEvent_KillMonsterPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleEvent_KillMonsterPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleEvent_KillMonsterPush.Merge(m, src)
}
func (m *BattleEvent_KillMonsterPush) XXX_Size() int {
	return m.Size()
}
func (m *BattleEvent_KillMonsterPush) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleEvent_KillMonsterPush.DiscardUnknown(m)
}

var xxx_messageInfo_BattleEvent_KillMonsterPush proto.InternalMessageInfo

func (m *BattleEvent_KillMonsterPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (*BattleEvent_KillMonsterPush) XXX_MessageName() string {
	return "service.BattleEvent.KillMonsterPush"
}

type BattleEvent_AddItemsEvent struct {
	Items map[int64]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *BattleEvent_AddItemsEvent) Reset()      { *m = BattleEvent_AddItemsEvent{} }
func (*BattleEvent_AddItemsEvent) ProtoMessage() {}
func (*BattleEvent_AddItemsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f5a1e1ab132ec9, []int{0, 1}
}
func (m *BattleEvent_AddItemsEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleEvent_AddItemsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleEvent_AddItemsEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleEvent_AddItemsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleEvent_AddItemsEvent.Merge(m, src)
}
func (m *BattleEvent_AddItemsEvent) XXX_Size() int {
	return m.Size()
}
func (m *BattleEvent_AddItemsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleEvent_AddItemsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BattleEvent_AddItemsEvent proto.InternalMessageInfo

func (m *BattleEvent_AddItemsEvent) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*BattleEvent_AddItemsEvent) XXX_MessageName() string {
	return "service.BattleEvent.AddItemsEvent"
}

type BattleEvent_MonsterBossJoinKill struct {
	MonsterConfigId int64        `protobuf:"varint,1,opt,name=monster_config_id,json=monsterConfigId,proto3" json:"monster_config_id,omitempty"`
	RoleId          string       `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	IsKill          bool         `protobuf:"varint,3,opt,name=is_kill,json=isKill,proto3" json:"is_kill,omitempty"`
	IsJoin          bool         `protobuf:"varint,4,opt,name=is_join,json=isJoin,proto3" json:"is_join,omitempty"`
	BossId          string       `protobuf:"bytes,5,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	BossPos         *models.Vec2 `protobuf:"bytes,6,opt,name=boss_pos,json=bossPos,proto3" json:"boss_pos,omitempty"`
}

func (m *BattleEvent_MonsterBossJoinKill) Reset()      { *m = BattleEvent_MonsterBossJoinKill{} }
func (*BattleEvent_MonsterBossJoinKill) ProtoMessage() {}
func (*BattleEvent_MonsterBossJoinKill) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f5a1e1ab132ec9, []int{0, 2}
}
func (m *BattleEvent_MonsterBossJoinKill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleEvent_MonsterBossJoinKill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleEvent_MonsterBossJoinKill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleEvent_MonsterBossJoinKill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleEvent_MonsterBossJoinKill.Merge(m, src)
}
func (m *BattleEvent_MonsterBossJoinKill) XXX_Size() int {
	return m.Size()
}
func (m *BattleEvent_MonsterBossJoinKill) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleEvent_MonsterBossJoinKill.DiscardUnknown(m)
}

var xxx_messageInfo_BattleEvent_MonsterBossJoinKill proto.InternalMessageInfo

func (m *BattleEvent_MonsterBossJoinKill) GetMonsterConfigId() int64 {
	if m != nil {
		return m.MonsterConfigId
	}
	return 0
}

func (m *BattleEvent_MonsterBossJoinKill) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *BattleEvent_MonsterBossJoinKill) GetIsKill() bool {
	if m != nil {
		return m.IsKill
	}
	return false
}

func (m *BattleEvent_MonsterBossJoinKill) GetIsJoin() bool {
	if m != nil {
		return m.IsJoin
	}
	return false
}

func (m *BattleEvent_MonsterBossJoinKill) GetBossId() string {
	if m != nil {
		return m.BossId
	}
	return ""
}

func (m *BattleEvent_MonsterBossJoinKill) GetBossPos() *models.Vec2 {
	if m != nil {
		return m.BossPos
	}
	return nil
}

func (*BattleEvent_MonsterBossJoinKill) XXX_MessageName() string {
	return "service.BattleEvent.MonsterBossJoinKill"
}

type BattleEvent_MonsterBossKill struct {
	BossId          string          `protobuf:"bytes,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	BossPos         *models.Vec2    `protobuf:"bytes,2,opt,name=boss_pos,json=bossPos,proto3" json:"boss_pos,omitempty"`
	Items           map[int64]int64 `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MonsterConfigId int64           `protobuf:"varint,4,opt,name=monster_config_id,json=monsterConfigId,proto3" json:"monster_config_id,omitempty"`
	KillerId        string          `protobuf:"bytes,5,opt,name=killer_id,json=killerId,proto3" json:"killer_id,omitempty"`
}

func (m *BattleEvent_MonsterBossKill) Reset()      { *m = BattleEvent_MonsterBossKill{} }
func (*BattleEvent_MonsterBossKill) ProtoMessage() {}
func (*BattleEvent_MonsterBossKill) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f5a1e1ab132ec9, []int{0, 3}
}
func (m *BattleEvent_MonsterBossKill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleEvent_MonsterBossKill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleEvent_MonsterBossKill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleEvent_MonsterBossKill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleEvent_MonsterBossKill.Merge(m, src)
}
func (m *BattleEvent_MonsterBossKill) XXX_Size() int {
	return m.Size()
}
func (m *BattleEvent_MonsterBossKill) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleEvent_MonsterBossKill.DiscardUnknown(m)
}

var xxx_messageInfo_BattleEvent_MonsterBossKill proto.InternalMessageInfo

func (m *BattleEvent_MonsterBossKill) GetBossId() string {
	if m != nil {
		return m.BossId
	}
	return ""
}

func (m *BattleEvent_MonsterBossKill) GetBossPos() *models.Vec2 {
	if m != nil {
		return m.BossPos
	}
	return nil
}

func (m *BattleEvent_MonsterBossKill) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *BattleEvent_MonsterBossKill) GetMonsterConfigId() int64 {
	if m != nil {
		return m.MonsterConfigId
	}
	return 0
}

func (m *BattleEvent_MonsterBossKill) GetKillerId() string {
	if m != nil {
		return m.KillerId
	}
	return ""
}

func (*BattleEvent_MonsterBossKill) XXX_MessageName() string {
	return "service.BattleEvent.MonsterBossKill"
}

type BattleEvent_TempBagSyncEvent struct {
	TempBags []*models.RoleTempBag `protobuf:"bytes,1,rep,name=temp_bags,json=tempBags,proto3" json:"temp_bags,omitempty"`
}

func (m *BattleEvent_TempBagSyncEvent) Reset()      { *m = BattleEvent_TempBagSyncEvent{} }
func (*BattleEvent_TempBagSyncEvent) ProtoMessage() {}
func (*BattleEvent_TempBagSyncEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f5a1e1ab132ec9, []int{0, 4}
}
func (m *BattleEvent_TempBagSyncEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleEvent_TempBagSyncEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleEvent_TempBagSyncEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleEvent_TempBagSyncEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleEvent_TempBagSyncEvent.Merge(m, src)
}
func (m *BattleEvent_TempBagSyncEvent) XXX_Size() int {
	return m.Size()
}
func (m *BattleEvent_TempBagSyncEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleEvent_TempBagSyncEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BattleEvent_TempBagSyncEvent proto.InternalMessageInfo

func (m *BattleEvent_TempBagSyncEvent) GetTempBags() []*models.RoleTempBag {
	if m != nil {
		return m.TempBags
	}
	return nil
}

func (*BattleEvent_TempBagSyncEvent) XXX_MessageName() string {
	return "service.BattleEvent.TempBagSyncEvent"
}

type BattleEvent_SyncTempBagEvent struct {
	TempBag *models.RoleTempBag `protobuf:"bytes,1,opt,name=temp_bag,json=tempBag,proto3" json:"temp_bag,omitempty"`
}

func (m *BattleEvent_SyncTempBagEvent) Reset()      { *m = BattleEvent_SyncTempBagEvent{} }
func (*BattleEvent_SyncTempBagEvent) ProtoMessage() {}
func (*BattleEvent_SyncTempBagEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_85f5a1e1ab132ec9, []int{0, 5}
}
func (m *BattleEvent_SyncTempBagEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleEvent_SyncTempBagEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleEvent_SyncTempBagEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleEvent_SyncTempBagEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleEvent_SyncTempBagEvent.Merge(m, src)
}
func (m *BattleEvent_SyncTempBagEvent) XXX_Size() int {
	return m.Size()
}
func (m *BattleEvent_SyncTempBagEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleEvent_SyncTempBagEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BattleEvent_SyncTempBagEvent proto.InternalMessageInfo

func (m *BattleEvent_SyncTempBagEvent) GetTempBag() *models.RoleTempBag {
	if m != nil {
		return m.TempBag
	}
	return nil
}

func (*BattleEvent_SyncTempBagEvent) XXX_MessageName() string {
	return "service.BattleEvent.SyncTempBagEvent"
}
func init() {
	proto.RegisterType((*BattleEvent)(nil), "service.BattleEvent")
	proto.RegisterType((*BattleEvent_KillMonsterPush)(nil), "service.BattleEvent.KillMonsterPush")
	proto.RegisterType((*BattleEvent_AddItemsEvent)(nil), "service.BattleEvent.AddItemsEvent")
	proto.RegisterMapType((map[int64]int64)(nil), "service.BattleEvent.AddItemsEvent.ItemsEntry")
	proto.RegisterType((*BattleEvent_MonsterBossJoinKill)(nil), "service.BattleEvent.MonsterBossJoinKill")
	proto.RegisterType((*BattleEvent_MonsterBossKill)(nil), "service.BattleEvent.MonsterBossKill")
	proto.RegisterMapType((map[int64]int64)(nil), "service.BattleEvent.MonsterBossKill.ItemsEntry")
	proto.RegisterType((*BattleEvent_TempBagSyncEvent)(nil), "service.BattleEvent.TempBagSyncEvent")
	proto.RegisterType((*BattleEvent_SyncTempBagEvent)(nil), "service.BattleEvent.SyncTempBagEvent")
}

func init() { proto.RegisterFile("proto/service/battle_event.proto", fileDescriptor_85f5a1e1ab132ec9) }

var fileDescriptor_85f5a1e1ab132ec9 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xbd, 0x6e, 0xd3, 0x50,
	0x14, 0xc7, 0x73, 0xe3, 0xc6, 0x71, 0x4e, 0x40, 0x09, 0x2e, 0x12, 0xc6, 0x95, 0xae, 0x2c, 0x16,
	0x22, 0xa4, 0xda, 0x28, 0x2c, 0x15, 0x1b, 0x2e, 0x1d, 0x02, 0x02, 0x55, 0x06, 0x31, 0xb0, 0x58,
	0x89, 0x7d, 0x09, 0x97, 0xda, 0xbe, 0x91, 0xaf, 0x1b, 0x29, 0x2f, 0x81, 0x78, 0x01, 0x76, 0x1e,
	0xa5, 0x2c, 0xa8, 0x63, 0x47, 0x70, 0x16, 0x46, 0x1e, 0x01, 0xdd, 0x0f, 0xab, 0x1f, 0xa4, 0x2c,
	0xdd, 0xee, 0x39, 0xff, 0x73, 0x7e, 0xe7, 0xcb, 0x06, 0x6f, 0x51, 0xb2, 0x8a, 0x05, 0x9c, 0x94,
	0x4b, 0x9a, 0x90, 0x60, 0x36, 0xad, 0xaa, 0x8c, 0xc4, 0x64, 0x49, 0x8a, 0xca, 0x97, 0x92, 0xdd,
	0xd5, 0x9a, 0x7b, 0x5f, 0x85, 0xe6, 0x2c, 0x25, 0x19, 0xd7, 0x91, 0x2a, 0xe6, 0xc1, 0x77, 0x13,
	0xfa, 0xa1, 0x74, 0x1c, 0x88, 0x4c, 0xd7, 0x87, 0xc1, 0x4b, 0x9a, 0x65, 0xaf, 0x58, 0xc1, 0x2b,
	0x52, 0x1e, 0x1e, 0xf3, 0x8f, 0xf6, 0x0e, 0xf4, 0x12, 0x56, 0x7c, 0xa0, 0xf3, 0x98, 0xa6, 0x0e,
	0xf2, 0xd0, 0xc8, 0x88, 0x2c, 0xe5, 0x98, 0xa4, 0xee, 0x67, 0x04, 0xb7, 0x9f, 0xa5, 0xe9, 0xa4,
	0x22, 0x39, 0x97, 0x04, 0x7b, 0x1f, 0x3a, 0x54, 0x58, 0x0e, 0xf2, 0x8c, 0x51, 0x7f, 0xbc, 0xeb,
	0xeb, 0x2e, 0xfc, 0x0b, 0x65, 0xfc, 0x4b, 0x29, 0xbe, 0x7a, 0x16, 0x55, 0xb9, 0x8a, 0x54, 0xae,
	0xbb, 0x07, 0x70, 0xee, 0xb4, 0x87, 0x60, 0x1c, 0x91, 0x95, 0xae, 0x2d, 0x9e, 0xf6, 0x5d, 0xe8,
	0x2c, 0xa7, 0xd9, 0x31, 0x71, 0xda, 0xd2, 0xa7, 0x8c, 0xa7, 0xed, 0x3d, 0xe4, 0xfe, 0x40, 0xb0,
	0xad, 0xbb, 0x0f, 0x19, 0xe7, 0x2f, 0x18, 0x2d, 0xc4, 0x40, 0xf6, 0x23, 0xb8, 0x93, 0x2b, 0x77,
	0x7c, 0x75, 0x9a, 0x81, 0x16, 0xf6, 0xf5, 0x50, 0xf6, 0x3d, 0xe8, 0x96, 0x2c, 0x23, 0x22, 0x42,
	0xf0, 0x7b, 0x91, 0x29, 0x4c, 0x25, 0x50, 0x1e, 0x1f, 0xd1, 0x2c, 0x73, 0x0c, 0x0f, 0x8d, 0xac,
	0xc8, 0xa4, 0x5c, 0xd2, 0x95, 0xf0, 0x89, 0xd1, 0xc2, 0xd9, 0x6a, 0x04, 0x51, 0x5a, 0x08, 0x33,
	0xc6, 0xb9, 0x40, 0x75, 0x14, 0x4a, 0x98, 0x93, 0xd4, 0x7e, 0x08, 0x96, 0x14, 0x16, 0x8c, 0x3b,
	0xa6, 0x87, 0x46, 0xfd, 0xf1, 0x2d, 0x5f, 0x1d, 0xc8, 0x7f, 0x47, 0x92, 0x71, 0x24, 0xd3, 0x0e,
	0x19, 0x77, 0xbf, 0xb6, 0x61, 0x70, 0x61, 0xa0, 0xa6, 0x5c, 0x43, 0x45, 0xd7, 0x52, 0xdb, 0xff,
	0xa1, 0xda, 0x07, 0xcd, 0x95, 0x0c, 0x79, 0xa5, 0x60, 0xe3, 0x95, 0xae, 0x94, 0xfd, 0xf7, 0x4e,
	0x9b, 0xb7, 0xba, 0xb5, 0x79, 0xab, 0x3b, 0xd0, 0x13, 0x9b, 0x23, 0xe5, 0xf9, 0x32, 0x2c, 0xe5,
	0x98, 0xa4, 0x37, 0x38, 0xf8, 0x73, 0x18, 0xbe, 0x25, 0xf9, 0x22, 0x9c, 0xce, 0xdf, 0xac, 0x8a,
	0x44, 0x7d, 0x83, 0x8f, 0xa1, 0x57, 0x91, 0x7c, 0x11, 0xcf, 0xa6, 0xf3, 0xe6, 0x3b, 0xdc, 0x6e,
	0xf6, 0x10, 0xb1, 0x8c, 0xe8, 0x84, 0xc8, 0xaa, 0xd4, 0x83, 0xbb, 0x21, 0x0c, 0x45, 0xba, 0x16,
	0x14, 0xc5, 0x07, 0xab, 0xa1, 0xc8, 0x56, 0xae, 0x81, 0x74, 0x35, 0x24, 0x7c, 0x7d, 0xf6, 0x0b,
	0xb7, 0xbe, 0xd5, 0x18, 0x9d, 0xd4, 0x18, 0x9d, 0xd6, 0x18, 0xfd, 0xac, 0x31, 0xfa, 0x5d, 0xe3,
	0xd6, 0x9f, 0x1a, 0xa3, 0x2f, 0x6b, 0xdc, 0x3a, 0x59, 0x63, 0x74, 0xba, 0xc6, 0xad, 0xb3, 0x35,
	0x6e, 0xbd, 0xf7, 0x12, 0x46, 0x8b, 0x5d, 0xb1, 0x76, 0x52, 0x06, 0x09, 0xcb, 0x73, 0x56, 0x04,
	0x97, 0x7e, 0xe9, 0x99, 0x29, 0xcd, 0x27, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xb1, 0x55,
	0x7a, 0xea, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattleEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattleEvent_KillMonsterPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattleEvent_AddItemsEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattleEvent_MonsterBossJoinKill.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattleEvent_MonsterBossKill.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattleEvent_TempBagSyncEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattleEvent_SyncTempBagEvent.Get().(proto.Message)
	})
}

var poolBattleEvent = &sync.Pool{New: func() interface{} { return &BattleEvent{} }}

func (m *BattleEvent) ReleasePool() { m.Reset(); poolBattleEvent.Put(m); m = nil }

var poolBattleEvent_KillMonsterPush = &sync.Pool{New: func() interface{} { return &BattleEvent_KillMonsterPush{} }}

func (m *BattleEvent_KillMonsterPush) ReleasePool() {
	m.Reset()
	poolBattleEvent_KillMonsterPush.Put(m)
	m = nil
}

var poolBattleEvent_AddItemsEvent = &sync.Pool{New: func() interface{} { return &BattleEvent_AddItemsEvent{} }}

func (m *BattleEvent_AddItemsEvent) ReleasePool() {
	m.Reset()
	poolBattleEvent_AddItemsEvent.Put(m)
	m = nil
}

var poolBattleEvent_MonsterBossJoinKill = &sync.Pool{New: func() interface{} { return &BattleEvent_MonsterBossJoinKill{} }}

func (m *BattleEvent_MonsterBossJoinKill) ReleasePool() {
	m.Reset()
	poolBattleEvent_MonsterBossJoinKill.Put(m)
	m = nil
}

var poolBattleEvent_MonsterBossKill = &sync.Pool{New: func() interface{} { return &BattleEvent_MonsterBossKill{} }}

func (m *BattleEvent_MonsterBossKill) ReleasePool() {
	m.Reset()
	poolBattleEvent_MonsterBossKill.Put(m)
	m = nil
}

var poolBattleEvent_TempBagSyncEvent = &sync.Pool{New: func() interface{} { return &BattleEvent_TempBagSyncEvent{} }}

func (m *BattleEvent_TempBagSyncEvent) ReleasePool() {
	m.Reset()
	poolBattleEvent_TempBagSyncEvent.Put(m)
	m = nil
}

var poolBattleEvent_SyncTempBagEvent = &sync.Pool{New: func() interface{} { return &BattleEvent_SyncTempBagEvent{} }}

func (m *BattleEvent_SyncTempBagEvent) ReleasePool() {
	m.Reset()
	poolBattleEvent_SyncTempBagEvent.Put(m)
	m = nil
}
func (this *BattleEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleEvent)
	if !ok {
		that2, ok := that.(BattleEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BattleEvent_KillMonsterPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleEvent_KillMonsterPush)
	if !ok {
		that2, ok := that.(BattleEvent_KillMonsterPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	return true
}
func (this *BattleEvent_AddItemsEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleEvent_AddItemsEvent)
	if !ok {
		that2, ok := that.(BattleEvent_AddItemsEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	return true
}
func (this *BattleEvent_MonsterBossJoinKill) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleEvent_MonsterBossJoinKill)
	if !ok {
		that2, ok := that.(BattleEvent_MonsterBossJoinKill)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MonsterConfigId != that1.MonsterConfigId {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.IsKill != that1.IsKill {
		return false
	}
	if this.IsJoin != that1.IsJoin {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	if !this.BossPos.Equal(that1.BossPos) {
		return false
	}
	return true
}
func (this *BattleEvent_MonsterBossKill) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleEvent_MonsterBossKill)
	if !ok {
		that2, ok := that.(BattleEvent_MonsterBossKill)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	if !this.BossPos.Equal(that1.BossPos) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	if this.MonsterConfigId != that1.MonsterConfigId {
		return false
	}
	if this.KillerId != that1.KillerId {
		return false
	}
	return true
}
func (this *BattleEvent_TempBagSyncEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleEvent_TempBagSyncEvent)
	if !ok {
		that2, ok := that.(BattleEvent_TempBagSyncEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TempBags) != len(that1.TempBags) {
		return false
	}
	for i := range this.TempBags {
		if !this.TempBags[i].Equal(that1.TempBags[i]) {
			return false
		}
	}
	return true
}
func (this *BattleEvent_SyncTempBagEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleEvent_SyncTempBagEvent)
	if !ok {
		that2, ok := that.(BattleEvent_SyncTempBagEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TempBag.Equal(that1.TempBag) {
		return false
	}
	return true
}
func (m *BattleEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BattleEvent_KillMonsterPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEvent_KillMonsterPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleEvent_KillMonsterPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigId != 0 {
		i = encodeVarintBattleEvent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleEvent_AddItemsEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEvent_AddItemsEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleEvent_AddItemsEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintBattleEvent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBattleEvent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBattleEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BattleEvent_MonsterBossJoinKill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEvent_MonsterBossJoinKill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleEvent_MonsterBossJoinKill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BossPos != nil {
		{
			size, err := m.BossPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattleEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.BossId) > 0 {
		i -= len(m.BossId)
		copy(dAtA[i:], m.BossId)
		i = encodeVarintBattleEvent(dAtA, i, uint64(len(m.BossId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsJoin {
		i--
		if m.IsJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsKill {
		i--
		if m.IsKill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintBattleEvent(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MonsterConfigId != 0 {
		i = encodeVarintBattleEvent(dAtA, i, uint64(m.MonsterConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleEvent_MonsterBossKill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEvent_MonsterBossKill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleEvent_MonsterBossKill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KillerId) > 0 {
		i -= len(m.KillerId)
		copy(dAtA[i:], m.KillerId)
		i = encodeVarintBattleEvent(dAtA, i, uint64(len(m.KillerId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MonsterConfigId != 0 {
		i = encodeVarintBattleEvent(dAtA, i, uint64(m.MonsterConfigId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintBattleEvent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBattleEvent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBattleEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BossPos != nil {
		{
			size, err := m.BossPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattleEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BossId) > 0 {
		i -= len(m.BossId)
		copy(dAtA[i:], m.BossId)
		i = encodeVarintBattleEvent(dAtA, i, uint64(len(m.BossId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BattleEvent_TempBagSyncEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEvent_TempBagSyncEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleEvent_TempBagSyncEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TempBags) > 0 {
		for iNdEx := len(m.TempBags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TempBags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBattleEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BattleEvent_SyncTempBagEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEvent_SyncTempBagEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleEvent_SyncTempBagEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TempBag != nil {
		{
			size, err := m.TempBag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattleEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBattleEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovBattleEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *BattleEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *BattleEvent_KillMonsterPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BattleEvent_AddItemsEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BattleEvent_MonsterBossJoinKill) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MonsterConfigId != 0 {
		w.RawByte('"')
		w.RawString("monster_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterConfigId))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.IsKill {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_kill")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsKill)
		needWriteComma = true
	}
	if m.IsJoin {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_join")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsJoin)
		needWriteComma = true
	}
	if m.BossId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.BossId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_pos")
	w.RawByte('"')
	w.RawByte(':')
	m.BossPos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BattleEvent_MonsterBossKill) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BossId != "" {
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.BossId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_pos")
	w.RawByte('"')
	w.RawByte(':')
	m.BossPos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.MonsterConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("monster_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterConfigId))
		needWriteComma = true
	}
	if m.KillerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("killer_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.KillerId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BattleEvent_TempBagSyncEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("temp_bags")
	w.RawByte('"')
	w.RawByte(':')
	if m.TempBags == nil {
		w.RawString("null")
	} else if len(m.TempBags) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.TempBags {
			v.JsonBytes(w)
			if i != len(m.TempBags)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BattleEvent_SyncTempBagEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("temp_bag")
	w.RawByte('"')
	w.RawByte(':')
	m.TempBag.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BattleEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BattleEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BattleEvent) GoString() string {
	return m.String()
}

func (m *BattleEvent_KillMonsterPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BattleEvent_KillMonsterPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BattleEvent_KillMonsterPush) GoString() string {
	return m.String()
}

func (m *BattleEvent_AddItemsEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BattleEvent_AddItemsEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BattleEvent_AddItemsEvent) GoString() string {
	return m.String()
}

func (m *BattleEvent_MonsterBossJoinKill) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BattleEvent_MonsterBossJoinKill) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BattleEvent_MonsterBossJoinKill) GoString() string {
	return m.String()
}

func (m *BattleEvent_MonsterBossKill) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BattleEvent_MonsterBossKill) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BattleEvent_MonsterBossKill) GoString() string {
	return m.String()
}

func (m *BattleEvent_TempBagSyncEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BattleEvent_TempBagSyncEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BattleEvent_TempBagSyncEvent) GoString() string {
	return m.String()
}

func (m *BattleEvent_SyncTempBagEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BattleEvent_SyncTempBagEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BattleEvent_SyncTempBagEvent) GoString() string {
	return m.String()
}

func (m *BattleEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BattleEvent_KillMonsterPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovBattleEvent(uint64(m.ConfigId))
	}
	return n
}

func (m *BattleEvent_AddItemsEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBattleEvent(uint64(k)) + 1 + sovBattleEvent(uint64(v))
			n += mapEntrySize + 1 + sovBattleEvent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BattleEvent_MonsterBossJoinKill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonsterConfigId != 0 {
		n += 1 + sovBattleEvent(uint64(m.MonsterConfigId))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovBattleEvent(uint64(l))
	}
	if m.IsKill {
		n += 2
	}
	if m.IsJoin {
		n += 2
	}
	l = len(m.BossId)
	if l > 0 {
		n += 1 + l + sovBattleEvent(uint64(l))
	}
	if m.BossPos != nil {
		l = m.BossPos.Size()
		n += 1 + l + sovBattleEvent(uint64(l))
	}
	return n
}

func (m *BattleEvent_MonsterBossKill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BossId)
	if l > 0 {
		n += 1 + l + sovBattleEvent(uint64(l))
	}
	if m.BossPos != nil {
		l = m.BossPos.Size()
		n += 1 + l + sovBattleEvent(uint64(l))
	}
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBattleEvent(uint64(k)) + 1 + sovBattleEvent(uint64(v))
			n += mapEntrySize + 1 + sovBattleEvent(uint64(mapEntrySize))
		}
	}
	if m.MonsterConfigId != 0 {
		n += 1 + sovBattleEvent(uint64(m.MonsterConfigId))
	}
	l = len(m.KillerId)
	if l > 0 {
		n += 1 + l + sovBattleEvent(uint64(l))
	}
	return n
}

func (m *BattleEvent_TempBagSyncEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TempBags) > 0 {
		for _, e := range m.TempBags {
			l = e.Size()
			n += 1 + l + sovBattleEvent(uint64(l))
		}
	}
	return n
}

func (m *BattleEvent_SyncTempBagEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TempBag != nil {
		l = m.TempBag.Size()
		n += 1 + l + sovBattleEvent(uint64(l))
	}
	return n
}

func sovBattleEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBattleEvent(x uint64) (n int) {
	return sovBattleEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BattleEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattleEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattleEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEvent_KillMonsterPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattleEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattleEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEvent_AddItemsEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattleEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddItemsEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddItemsEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBattleEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattleEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattleEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBattleEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBattleEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattleEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEvent_MonsterBossJoinKill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattleEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterBossJoinKill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterBossJoinKill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterConfigId", wireType)
			}
			m.MonsterConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKill = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsJoin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossPos == nil {
				m.BossPos = &models.Vec2{}
			}
			if err := m.BossPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattleEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEvent_MonsterBossKill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattleEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterBossKill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterBossKill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossPos == nil {
				m.BossPos = &models.Vec2{}
			}
			if err := m.BossPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBattleEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattleEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattleEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBattleEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBattleEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterConfigId", wireType)
			}
			m.MonsterConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattleEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEvent_TempBagSyncEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattleEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TempBagSyncEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TempBagSyncEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempBags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TempBags = append(m.TempBags, &models.RoleTempBag{})
			if err := m.TempBags[len(m.TempBags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattleEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEvent_SyncTempBagEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattleEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncTempBagEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncTempBagEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempBag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattleEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TempBag == nil {
				m.TempBag = &models.RoleTempBag{}
			}
			if err := m.TempBag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattleEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattleEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBattleEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBattleEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBattleEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBattleEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBattleEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBattleEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBattleEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBattleEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBattleEvent = fmt.Errorf("proto: unexpected end of group")
)
