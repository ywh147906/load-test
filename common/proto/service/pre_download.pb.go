// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/pre_download.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PreDownloadErrorCode int32

const (
	PreDownloadErrorCode_ErrPreDownloadSystem   PreDownloadErrorCode = 0
	PreDownloadErrorCode_ErrPreDownloadNotData  PreDownloadErrorCode = 1
	PreDownloadErrorCode_ErrPreDownloadConfig   PreDownloadErrorCode = 2
	PreDownloadErrorCode_ErrPreDownloadReceived PreDownloadErrorCode = 3
)

var PreDownloadErrorCode_name = map[int32]string{
	0: "ErrPreDownloadSystem",
	1: "ErrPreDownloadNotData",
	2: "ErrPreDownloadConfig",
	3: "ErrPreDownloadReceived",
}

var PreDownloadErrorCode_value = map[string]int32{
	"ErrPreDownloadSystem":   0,
	"ErrPreDownloadNotData":  1,
	"ErrPreDownloadConfig":   2,
	"ErrPreDownloadReceived": 3,
}

func (PreDownloadErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bef80f3dc5788bb0, []int{0}
}

type PreDownload struct {
}

func (m *PreDownload) Reset()      { *m = PreDownload{} }
func (*PreDownload) ProtoMessage() {}
func (*PreDownload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bef80f3dc5788bb0, []int{0}
}
func (m *PreDownload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreDownload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreDownload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreDownload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreDownload.Merge(m, src)
}
func (m *PreDownload) XXX_Size() int {
	return m.Size()
}
func (m *PreDownload) XXX_DiscardUnknown() {
	xxx_messageInfo_PreDownload.DiscardUnknown(m)
}

var xxx_messageInfo_PreDownload proto.InternalMessageInfo

func (*PreDownload) XXX_MessageName() string {
	return "service.PreDownload"
}

// 查询情况
type PreDownload_PreDownloadInfoRequest struct {
}

func (m *PreDownload_PreDownloadInfoRequest) Reset()      { *m = PreDownload_PreDownloadInfoRequest{} }
func (*PreDownload_PreDownloadInfoRequest) ProtoMessage() {}
func (*PreDownload_PreDownloadInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bef80f3dc5788bb0, []int{0, 0}
}
func (m *PreDownload_PreDownloadInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreDownload_PreDownloadInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreDownload_PreDownloadInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreDownload_PreDownloadInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreDownload_PreDownloadInfoRequest.Merge(m, src)
}
func (m *PreDownload_PreDownloadInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *PreDownload_PreDownloadInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreDownload_PreDownloadInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreDownload_PreDownloadInfoRequest proto.InternalMessageInfo

func (*PreDownload_PreDownloadInfoRequest) XXX_MessageName() string {
	return "service.PreDownload.PreDownloadInfoRequest"
}

type PreDownload_PreDownloadInfoResponse struct {
	IsReceived bool `protobuf:"varint,1,opt,name=is_received,json=isReceived,proto3" json:"is_received,omitempty"`
}

func (m *PreDownload_PreDownloadInfoResponse) Reset()      { *m = PreDownload_PreDownloadInfoResponse{} }
func (*PreDownload_PreDownloadInfoResponse) ProtoMessage() {}
func (*PreDownload_PreDownloadInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bef80f3dc5788bb0, []int{0, 1}
}
func (m *PreDownload_PreDownloadInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreDownload_PreDownloadInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreDownload_PreDownloadInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreDownload_PreDownloadInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreDownload_PreDownloadInfoResponse.Merge(m, src)
}
func (m *PreDownload_PreDownloadInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *PreDownload_PreDownloadInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PreDownload_PreDownloadInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PreDownload_PreDownloadInfoResponse proto.InternalMessageInfo

func (m *PreDownload_PreDownloadInfoResponse) GetIsReceived() bool {
	if m != nil {
		return m.IsReceived
	}
	return false
}

func (*PreDownload_PreDownloadInfoResponse) XXX_MessageName() string {
	return "service.PreDownload.PreDownloadInfoResponse"
}

type PreDownload_PreDownloadReceiveRewardRequest struct {
}

func (m *PreDownload_PreDownloadReceiveRewardRequest) Reset() {
	*m = PreDownload_PreDownloadReceiveRewardRequest{}
}
func (*PreDownload_PreDownloadReceiveRewardRequest) ProtoMessage() {}
func (*PreDownload_PreDownloadReceiveRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bef80f3dc5788bb0, []int{0, 2}
}
func (m *PreDownload_PreDownloadReceiveRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreDownload_PreDownloadReceiveRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreDownload_PreDownloadReceiveRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreDownload_PreDownloadReceiveRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreDownload_PreDownloadReceiveRewardRequest.Merge(m, src)
}
func (m *PreDownload_PreDownloadReceiveRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *PreDownload_PreDownloadReceiveRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreDownload_PreDownloadReceiveRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreDownload_PreDownloadReceiveRewardRequest proto.InternalMessageInfo

func (*PreDownload_PreDownloadReceiveRewardRequest) XXX_MessageName() string {
	return "service.PreDownload.PreDownloadReceiveRewardRequest"
}

type PreDownload_PreDownloadReceiveRewardResponse struct {
	Rewards []*models.Item `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (m *PreDownload_PreDownloadReceiveRewardResponse) Reset() {
	*m = PreDownload_PreDownloadReceiveRewardResponse{}
}
func (*PreDownload_PreDownloadReceiveRewardResponse) ProtoMessage() {}
func (*PreDownload_PreDownloadReceiveRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bef80f3dc5788bb0, []int{0, 3}
}
func (m *PreDownload_PreDownloadReceiveRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreDownload_PreDownloadReceiveRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreDownload_PreDownloadReceiveRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreDownload_PreDownloadReceiveRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreDownload_PreDownloadReceiveRewardResponse.Merge(m, src)
}
func (m *PreDownload_PreDownloadReceiveRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *PreDownload_PreDownloadReceiveRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PreDownload_PreDownloadReceiveRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PreDownload_PreDownloadReceiveRewardResponse proto.InternalMessageInfo

func (m *PreDownload_PreDownloadReceiveRewardResponse) GetRewards() []*models.Item {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*PreDownload_PreDownloadReceiveRewardResponse) XXX_MessageName() string {
	return "service.PreDownload.PreDownloadReceiveRewardResponse"
}
func init() {
	proto.RegisterEnum("service.PreDownloadErrorCode", PreDownloadErrorCode_name, PreDownloadErrorCode_value)
	proto.RegisterType((*PreDownload)(nil), "service.PreDownload")
	proto.RegisterType((*PreDownload_PreDownloadInfoRequest)(nil), "service.PreDownload.PreDownloadInfoRequest")
	proto.RegisterType((*PreDownload_PreDownloadInfoResponse)(nil), "service.PreDownload.PreDownloadInfoResponse")
	proto.RegisterType((*PreDownload_PreDownloadReceiveRewardRequest)(nil), "service.PreDownload.PreDownloadReceiveRewardRequest")
	proto.RegisterType((*PreDownload_PreDownloadReceiveRewardResponse)(nil), "service.PreDownload.PreDownloadReceiveRewardResponse")
}

func init() { proto.RegisterFile("proto/service/pre_download.proto", fileDescriptor_bef80f3dc5788bb0) }

var fileDescriptor_bef80f3dc5788bb0 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2f, 0x28, 0x4a, 0x8d, 0x4f, 0xc9,
	0x2f, 0xcf, 0xcb, 0xc9, 0x4f, 0x4c, 0xd1, 0x03, 0x4b, 0x09, 0xb1, 0x43, 0xe5, 0xa4, 0xc4, 0x20,
	0x4a, 0x73, 0xf3, 0x53, 0x52, 0x73, 0x8a, 0xf5, 0x93, 0x12, 0xd3, 0x21, 0x0a, 0xa4, 0xc4, 0xd1,
	0xc4, 0x8b, 0x53, 0x21, 0x12, 0x4a, 0x97, 0x18, 0xb9, 0xb8, 0x03, 0x8a, 0x52, 0x5d, 0xa0, 0xe6,
	0x49, 0x49, 0x70, 0x89, 0x21, 0x71, 0x3d, 0xf3, 0xd2, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0xa4, 0xac, 0xb8, 0xc4, 0x31, 0x64, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xe4, 0xb9,
	0xb8, 0x33, 0x8b, 0xe3, 0x8b, 0x52, 0x93, 0x53, 0x33, 0xcb, 0x52, 0x53, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x82, 0xb8, 0x32, 0x8b, 0x83, 0xa0, 0x22, 0x52, 0x8a, 0x5c, 0xf2, 0x48, 0x7a, 0xa1,
	0xc2, 0x41, 0xa9, 0xe5, 0x89, 0x45, 0x29, 0x30, 0xe3, 0xbd, 0xb8, 0x14, 0x70, 0x2b, 0x81, 0xda,
	0xa3, 0xc6, 0xc5, 0x5e, 0x04, 0x16, 0x29, 0x96, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0xe2, 0xd1,
	0x83, 0xf8, 0x48, 0xcf, 0xb3, 0x24, 0x35, 0x37, 0x08, 0x26, 0xa9, 0x75, 0x8e, 0x91, 0x4b, 0x04,
	0xc9, 0x30, 0xd7, 0xa2, 0xa2, 0xfc, 0x22, 0xe7, 0xfc, 0x94, 0x54, 0x21, 0x1d, 0x2e, 0x11, 0xd7,
	0xa2, 0x22, 0x24, 0xa9, 0xe0, 0xca, 0xe2, 0x92, 0xd4, 0x5c, 0x01, 0x06, 0x29, 0xa1, 0xae, 0xad,
	0x12, 0x7c, 0x42, 0x3c, 0xcf, 0x37, 0xef, 0x7e, 0xbe, 0x7b, 0xfe, 0xcb, 0x29, 0x33, 0x5f, 0xac,
	0x5f, 0x2f, 0xa4, 0xcb, 0x25, 0x8a, 0xaa, 0xda, 0x2f, 0xbf, 0xc4, 0x25, 0xb1, 0x24, 0x51, 0x80,
	0x11, 0xa6, 0xfc, 0xd9, 0xa6, 0x85, 0xcf, 0xe6, 0x74, 0x3e, 0x9b, 0xba, 0xe1, 0x59, 0xef, 0x3a,
	0x4c, 0xc3, 0x9d, 0xf3, 0xf3, 0xd2, 0x32, 0xd3, 0x05, 0x98, 0x60, 0xaa, 0x5f, 0xb6, 0xf6, 0x3e,
	0xdf, 0xbb, 0x0e, 0x6a, 0xb8, 0x36, 0x97, 0x18, 0xaa, 0x6a, 0x58, 0x60, 0x09, 0x30, 0x4b, 0xf1,
	0x77, 0x6d, 0x95, 0xe0, 0x16, 0xe2, 0x7c, 0xba, 0x7d, 0xd3, 0xcb, 0x45, 0x6d, 0x4f, 0xfb, 0xa7,
	0x39, 0xf9, 0xdd, 0x78, 0x28, 0xc7, 0xb0, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c,
	0x13, 0x1e, 0xcb, 0x31, 0x9c, 0x78, 0x2c, 0xc7, 0x78, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0x0a, 0xc9, 0xf9, 0x99, 0x79, 0xba, 0xa0, 0x24, 0x91, 0x5a, 0xa4, 0x9f, 0x9c, 0x9f,
	0x9b, 0x9b, 0x9f, 0xa7, 0x8f, 0x92, 0x84, 0x92, 0xd8, 0xc0, 0x5c, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x95, 0x1a, 0x0f, 0x30, 0x5a, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPreDownload.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPreDownload_PreDownloadInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPreDownload_PreDownloadInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPreDownload_PreDownloadReceiveRewardRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPreDownload_PreDownloadReceiveRewardResponse.Get().(proto.Message)
	})
}

var poolPreDownload = &sync.Pool{New: func() interface{} { return &PreDownload{} }}

func (m *PreDownload) ReleasePool() { m.Reset(); poolPreDownload.Put(m); m = nil }

var poolPreDownload_PreDownloadInfoRequest = &sync.Pool{New: func() interface{} { return &PreDownload_PreDownloadInfoRequest{} }}

func (m *PreDownload_PreDownloadInfoRequest) ReleasePool() {
	m.Reset()
	poolPreDownload_PreDownloadInfoRequest.Put(m)
	m = nil
}

var poolPreDownload_PreDownloadInfoResponse = &sync.Pool{New: func() interface{} { return &PreDownload_PreDownloadInfoResponse{} }}

func (m *PreDownload_PreDownloadInfoResponse) ReleasePool() {
	m.Reset()
	poolPreDownload_PreDownloadInfoResponse.Put(m)
	m = nil
}

var poolPreDownload_PreDownloadReceiveRewardRequest = &sync.Pool{New: func() interface{} { return &PreDownload_PreDownloadReceiveRewardRequest{} }}

func (m *PreDownload_PreDownloadReceiveRewardRequest) ReleasePool() {
	m.Reset()
	poolPreDownload_PreDownloadReceiveRewardRequest.Put(m)
	m = nil
}

var poolPreDownload_PreDownloadReceiveRewardResponse = &sync.Pool{New: func() interface{} { return &PreDownload_PreDownloadReceiveRewardResponse{} }}

func (m *PreDownload_PreDownloadReceiveRewardResponse) ReleasePool() {
	m.Reset()
	poolPreDownload_PreDownloadReceiveRewardResponse.Put(m)
	m = nil
}
func (x PreDownloadErrorCode) String() string {
	s, ok := PreDownloadErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PreDownload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PreDownload)
	if !ok {
		that2, ok := that.(PreDownload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PreDownload_PreDownloadInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PreDownload_PreDownloadInfoRequest)
	if !ok {
		that2, ok := that.(PreDownload_PreDownloadInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PreDownload_PreDownloadInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PreDownload_PreDownloadInfoResponse)
	if !ok {
		that2, ok := that.(PreDownload_PreDownloadInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsReceived != that1.IsReceived {
		return false
	}
	return true
}
func (this *PreDownload_PreDownloadReceiveRewardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PreDownload_PreDownloadReceiveRewardRequest)
	if !ok {
		that2, ok := that.(PreDownload_PreDownloadReceiveRewardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PreDownload_PreDownloadReceiveRewardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PreDownload_PreDownloadReceiveRewardResponse)
	if !ok {
		that2, ok := that.(PreDownload_PreDownloadReceiveRewardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if !this.Rewards[i].Equal(that1.Rewards[i]) {
			return false
		}
	}
	return true
}
func (m *PreDownload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreDownload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreDownload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PreDownload_PreDownloadInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreDownload_PreDownloadInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreDownload_PreDownloadInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PreDownload_PreDownloadInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreDownload_PreDownloadInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreDownload_PreDownloadInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReceived {
		i--
		if m.IsReceived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PreDownload_PreDownloadReceiveRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreDownload_PreDownloadReceiveRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreDownload_PreDownloadReceiveRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PreDownload_PreDownloadReceiveRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreDownload_PreDownloadReceiveRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreDownload_PreDownloadReceiveRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPreDownload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPreDownload(dAtA []byte, offset int, v uint64) int {
	offset -= sovPreDownload(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *PreDownload) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *PreDownload_PreDownloadInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *PreDownload_PreDownloadInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsReceived {
		w.RawByte('"')
		w.RawString("is_received")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsReceived)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PreDownload_PreDownloadReceiveRewardRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *PreDownload_PreDownloadReceiveRewardResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Rewards {
			v.JsonBytes(w)
			if i != len(m.Rewards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PreDownload) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PreDownload) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PreDownload) GoString() string {
	return m.String()
}

func (m *PreDownload_PreDownloadInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PreDownload_PreDownloadInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PreDownload_PreDownloadInfoRequest) GoString() string {
	return m.String()
}

func (m *PreDownload_PreDownloadInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PreDownload_PreDownloadInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PreDownload_PreDownloadInfoResponse) GoString() string {
	return m.String()
}

func (m *PreDownload_PreDownloadReceiveRewardRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PreDownload_PreDownloadReceiveRewardRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PreDownload_PreDownloadReceiveRewardRequest) GoString() string {
	return m.String()
}

func (m *PreDownload_PreDownloadReceiveRewardResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PreDownload_PreDownloadReceiveRewardResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PreDownload_PreDownloadReceiveRewardResponse) GoString() string {
	return m.String()
}

func (m *PreDownload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PreDownload_PreDownloadInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PreDownload_PreDownloadInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsReceived {
		n += 2
	}
	return n
}

func (m *PreDownload_PreDownloadReceiveRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PreDownload_PreDownloadReceiveRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovPreDownload(uint64(l))
		}
	}
	return n
}

func sovPreDownload(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPreDownload(x uint64) (n int) {
	return sovPreDownload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PreDownload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreDownload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreDownload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPreDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPreDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreDownload_PreDownloadInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreDownloadInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreDownloadInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPreDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPreDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreDownload_PreDownloadInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreDownloadInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreDownloadInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReceived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPreDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReceived = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPreDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPreDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreDownload_PreDownloadReceiveRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreDownloadReceiveRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreDownloadReceiveRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPreDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPreDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreDownload_PreDownloadReceiveRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreDownloadReceiveRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreDownloadReceiveRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPreDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPreDownload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPreDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &models.Item{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPreDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPreDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPreDownload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPreDownload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPreDownload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPreDownload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPreDownload
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPreDownload
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPreDownload
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPreDownload        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPreDownload          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPreDownload = fmt.Errorf("proto: unexpected end of group")
)
