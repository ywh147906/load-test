// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/arena.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ArenaErrorCode int32

const (
	ArenaErrorCode_ErrArenaSystem                   ArenaErrorCode = 0
	ArenaErrorCode_ErrArenaChallengeLock            ArenaErrorCode = 1
	ArenaErrorCode_ErrArenaChallengeTimes           ArenaErrorCode = 2
	ArenaErrorCode_ErrArenaHero                     ArenaErrorCode = 3
	ArenaErrorCode_ErrArenaConfig                   ArenaErrorCode = 4
	ArenaErrorCode_ErrArenaInit                     ArenaErrorCode = 5
	ArenaErrorCode_ErrArenaType                     ArenaErrorCode = 6
	ArenaErrorCode_ErrArenaNotFoundPlayer           ArenaErrorCode = 7
	ArenaErrorCode_ErrArenaNotHeroes                ArenaErrorCode = 8
	ArenaErrorCode_ErrArenaRanking                  ArenaErrorCode = 9
	ArenaErrorCode_ErrArenaRankingIndex             ArenaErrorCode = 10
	ArenaErrorCode_ErrArenaRankingPos               ArenaErrorCode = 11
	ArenaErrorCode_ErrArenaRankingSendReward        ArenaErrorCode = 12
	ArenaErrorCode_ErrArenaRankingChallengePlayerId ArenaErrorCode = 13
	ArenaErrorCode_ErrArenaNotInSameRanking         ArenaErrorCode = 14
	ArenaErrorCode_ErrArenaNotInRanking             ArenaErrorCode = 15
	ArenaErrorCode_ErrArenaNotFoundChallenge        ArenaErrorCode = 16
	ArenaErrorCode_ErrArenaChallengeTimeOut         ArenaErrorCode = 17
	ArenaErrorCode_ErrArenaRankingLoad              ArenaErrorCode = 18
	ArenaErrorCode_ErrArenaTicketPurchaseLimit      ArenaErrorCode = 19
	ArenaErrorCode_ErrArenaTicketPurchaseNumber     ArenaErrorCode = 20
	ArenaErrorCode_ErrArenaChallengeRankingChange   ArenaErrorCode = 21
	ArenaErrorCode_ErrArenaChallengedRankingChange  ArenaErrorCode = 22
	ArenaErrorCode_ErrArenaChallengeStart           ArenaErrorCode = 23
)

var ArenaErrorCode_name = map[int32]string{
	0:  "ErrArenaSystem",
	1:  "ErrArenaChallengeLock",
	2:  "ErrArenaChallengeTimes",
	3:  "ErrArenaHero",
	4:  "ErrArenaConfig",
	5:  "ErrArenaInit",
	6:  "ErrArenaType",
	7:  "ErrArenaNotFoundPlayer",
	8:  "ErrArenaNotHeroes",
	9:  "ErrArenaRanking",
	10: "ErrArenaRankingIndex",
	11: "ErrArenaRankingPos",
	12: "ErrArenaRankingSendReward",
	13: "ErrArenaRankingChallengePlayerId",
	14: "ErrArenaNotInSameRanking",
	15: "ErrArenaNotInRanking",
	16: "ErrArenaNotFoundChallenge",
	17: "ErrArenaChallengeTimeOut",
	18: "ErrArenaRankingLoad",
	19: "ErrArenaTicketPurchaseLimit",
	20: "ErrArenaTicketPurchaseNumber",
	21: "ErrArenaChallengeRankingChange",
	22: "ErrArenaChallengedRankingChange",
	23: "ErrArenaChallengeStart",
}

var ArenaErrorCode_value = map[string]int32{
	"ErrArenaSystem":                   0,
	"ErrArenaChallengeLock":            1,
	"ErrArenaChallengeTimes":           2,
	"ErrArenaHero":                     3,
	"ErrArenaConfig":                   4,
	"ErrArenaInit":                     5,
	"ErrArenaType":                     6,
	"ErrArenaNotFoundPlayer":           7,
	"ErrArenaNotHeroes":                8,
	"ErrArenaRanking":                  9,
	"ErrArenaRankingIndex":             10,
	"ErrArenaRankingPos":               11,
	"ErrArenaRankingSendReward":        12,
	"ErrArenaRankingChallengePlayerId": 13,
	"ErrArenaNotInSameRanking":         14,
	"ErrArenaNotInRanking":             15,
	"ErrArenaNotFoundChallenge":        16,
	"ErrArenaChallengeTimeOut":         17,
	"ErrArenaRankingLoad":              18,
	"ErrArenaTicketPurchaseLimit":      19,
	"ErrArenaTicketPurchaseNumber":     20,
	"ErrArenaChallengeRankingChange":   21,
	"ErrArenaChallengedRankingChange":  22,
	"ErrArenaChallengeStart":           23,
}

func (ArenaErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0}
}

type VirtualCombatCode int32

const (
	VirtualCombatCode_ErrVirtualCombatSystem         VirtualCombatCode = 0
	VirtualCombatCode_ErrVirtualCombatConfig         VirtualCombatCode = 1
	VirtualCombatCode_ErrVirtualCombatNotFoundPlayer VirtualCombatCode = 2
	VirtualCombatCode_ErrVirtualCombatNotHeroes      VirtualCombatCode = 3
)

var VirtualCombatCode_name = map[int32]string{
	0: "ErrVirtualCombatSystem",
	1: "ErrVirtualCombatConfig",
	2: "ErrVirtualCombatNotFoundPlayer",
	3: "ErrVirtualCombatNotHeroes",
}

var VirtualCombatCode_value = map[string]int32{
	"ErrVirtualCombatSystem":         0,
	"ErrVirtualCombatConfig":         1,
	"ErrVirtualCombatNotFoundPlayer": 2,
	"ErrVirtualCombatNotHeroes":      3,
}

func (VirtualCombatCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{1}
}

type Arena struct {
}

func (m *Arena) Reset()      { *m = Arena{} }
func (*Arena) ProtoMessage() {}
func (*Arena) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0}
}
func (m *Arena) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena.Merge(m, src)
}
func (m *Arena) XXX_Size() int {
	return m.Size()
}
func (m *Arena) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena.DiscardUnknown(m)
}

var xxx_messageInfo_Arena proto.InternalMessageInfo

func (*Arena) XXX_MessageName() string {
	return "service.Arena"
}

// 出战英雄设置
type Arena_ArenaHeroSetRequest struct {
	Type           models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	Hero0_OriginId int64            `protobuf:"varint,2,opt,name=hero0_OriginId,json=hero0OriginId,proto3" json:"hero0_OriginId,omitempty"`
	Hero1_OriginId int64            `protobuf:"varint,3,opt,name=hero1_OriginId,json=hero1OriginId,proto3" json:"hero1_OriginId,omitempty"`
}

func (m *Arena_ArenaHeroSetRequest) Reset()      { *m = Arena_ArenaHeroSetRequest{} }
func (*Arena_ArenaHeroSetRequest) ProtoMessage() {}
func (*Arena_ArenaHeroSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 0}
}
func (m *Arena_ArenaHeroSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaHeroSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaHeroSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaHeroSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaHeroSetRequest.Merge(m, src)
}
func (m *Arena_ArenaHeroSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaHeroSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaHeroSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaHeroSetRequest proto.InternalMessageInfo

func (m *Arena_ArenaHeroSetRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaHeroSetRequest) GetHero0_OriginId() int64 {
	if m != nil {
		return m.Hero0_OriginId
	}
	return 0
}

func (m *Arena_ArenaHeroSetRequest) GetHero1_OriginId() int64 {
	if m != nil {
		return m.Hero1_OriginId
	}
	return 0
}

func (*Arena_ArenaHeroSetRequest) XXX_MessageName() string {
	return "service.Arena.ArenaHeroSetRequest"
}

type Arena_ArenaHeroSetResponse struct {
	Type      models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	Assembles *models.Assemble `protobuf:"bytes,2,opt,name=assembles,proto3" json:"assembles,omitempty"`
}

func (m *Arena_ArenaHeroSetResponse) Reset()      { *m = Arena_ArenaHeroSetResponse{} }
func (*Arena_ArenaHeroSetResponse) ProtoMessage() {}
func (*Arena_ArenaHeroSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 1}
}
func (m *Arena_ArenaHeroSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaHeroSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaHeroSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaHeroSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaHeroSetResponse.Merge(m, src)
}
func (m *Arena_ArenaHeroSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaHeroSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaHeroSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaHeroSetResponse proto.InternalMessageInfo

func (m *Arena_ArenaHeroSetResponse) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaHeroSetResponse) GetAssembles() *models.Assemble {
	if m != nil {
		return m.Assembles
	}
	return nil
}

func (*Arena_ArenaHeroSetResponse) XXX_MessageName() string {
	return "service.Arena.ArenaHeroSetResponse"
}

// 排行查询
type Arena_ArenaRankingRequest struct {
	Type       models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	StartIndex int32            `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	Count      int32            `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Arena_ArenaRankingRequest) Reset()      { *m = Arena_ArenaRankingRequest{} }
func (*Arena_ArenaRankingRequest) ProtoMessage() {}
func (*Arena_ArenaRankingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 2}
}
func (m *Arena_ArenaRankingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaRankingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaRankingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaRankingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaRankingRequest.Merge(m, src)
}
func (m *Arena_ArenaRankingRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaRankingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaRankingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaRankingRequest proto.InternalMessageInfo

func (m *Arena_ArenaRankingRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaRankingRequest) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *Arena_ArenaRankingRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Arena_ArenaRankingRequest) XXX_MessageName() string {
	return "service.Arena.ArenaRankingRequest"
}

type Arena_ArenaRankingResponse struct {
	Type        models.ArenaType    `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	StartIndex  int32               `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	RankingInfo []*models.ArenaInfo `protobuf:"bytes,3,rep,name=ranking_info,json=rankingInfo,proto3" json:"ranking_info,omitempty"`
}

func (m *Arena_ArenaRankingResponse) Reset()      { *m = Arena_ArenaRankingResponse{} }
func (*Arena_ArenaRankingResponse) ProtoMessage() {}
func (*Arena_ArenaRankingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 3}
}
func (m *Arena_ArenaRankingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaRankingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaRankingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaRankingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaRankingResponse.Merge(m, src)
}
func (m *Arena_ArenaRankingResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaRankingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaRankingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaRankingResponse proto.InternalMessageInfo

func (m *Arena_ArenaRankingResponse) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaRankingResponse) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *Arena_ArenaRankingResponse) GetRankingInfo() []*models.ArenaInfo {
	if m != nil {
		return m.RankingInfo
	}
	return nil
}

func (*Arena_ArenaRankingResponse) XXX_MessageName() string {
	return "service.Arena.ArenaRankingResponse"
}

// 自己排行查询
type Arena_ArenaSelfRankingRequest struct {
	Type models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
}

func (m *Arena_ArenaSelfRankingRequest) Reset()      { *m = Arena_ArenaSelfRankingRequest{} }
func (*Arena_ArenaSelfRankingRequest) ProtoMessage() {}
func (*Arena_ArenaSelfRankingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 4}
}
func (m *Arena_ArenaSelfRankingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaSelfRankingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaSelfRankingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaSelfRankingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaSelfRankingRequest.Merge(m, src)
}
func (m *Arena_ArenaSelfRankingRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaSelfRankingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaSelfRankingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaSelfRankingRequest proto.InternalMessageInfo

func (m *Arena_ArenaSelfRankingRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (*Arena_ArenaSelfRankingRequest) XXX_MessageName() string {
	return "service.Arena.ArenaSelfRankingRequest"
}

type Arena_ArenaSelfRankingResponse struct {
	Type                   models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RankingId              int32            `protobuf:"varint,2,opt,name=ranking_id,json=rankingId,proto3" json:"ranking_id,omitempty"`
	FreeChallengeTimes     int64            `protobuf:"varint,3,opt,name=free_challenge_times,json=freeChallengeTimes,proto3" json:"free_challenge_times,omitempty"`
	NextRefreshTime        int64            `protobuf:"varint,4,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	SeasonOverTime         int64            `protobuf:"varint,5,opt,name=season_over_time,json=seasonOverTime,proto3" json:"season_over_time,omitempty"`
	Assembles              *models.Assemble `protobuf:"bytes,6,opt,name=assembles,proto3" json:"assembles,omitempty"`
	Power                  int64            `protobuf:"varint,7,opt,name=power,proto3" json:"power,omitempty"`
	NextSettlementTime     int64            `protobuf:"varint,8,opt,name=next_settlement_time,json=nextSettlementTime,proto3" json:"next_settlement_time,omitempty"`
	IsFirstChallenge       bool             `protobuf:"varint,9,opt,name=is_first_challenge,json=isFirstChallenge,proto3" json:"is_first_challenge,omitempty"`
	LeftTicketPurchasesNum int64            `protobuf:"varint,10,opt,name=left_ticket_purchases_num,json=leftTicketPurchasesNum,proto3" json:"left_ticket_purchases_num,omitempty"`
}

func (m *Arena_ArenaSelfRankingResponse) Reset()      { *m = Arena_ArenaSelfRankingResponse{} }
func (*Arena_ArenaSelfRankingResponse) ProtoMessage() {}
func (*Arena_ArenaSelfRankingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 5}
}
func (m *Arena_ArenaSelfRankingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaSelfRankingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaSelfRankingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaSelfRankingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaSelfRankingResponse.Merge(m, src)
}
func (m *Arena_ArenaSelfRankingResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaSelfRankingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaSelfRankingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaSelfRankingResponse proto.InternalMessageInfo

func (m *Arena_ArenaSelfRankingResponse) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaSelfRankingResponse) GetRankingId() int32 {
	if m != nil {
		return m.RankingId
	}
	return 0
}

func (m *Arena_ArenaSelfRankingResponse) GetFreeChallengeTimes() int64 {
	if m != nil {
		return m.FreeChallengeTimes
	}
	return 0
}

func (m *Arena_ArenaSelfRankingResponse) GetNextRefreshTime() int64 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (m *Arena_ArenaSelfRankingResponse) GetSeasonOverTime() int64 {
	if m != nil {
		return m.SeasonOverTime
	}
	return 0
}

func (m *Arena_ArenaSelfRankingResponse) GetAssembles() *models.Assemble {
	if m != nil {
		return m.Assembles
	}
	return nil
}

func (m *Arena_ArenaSelfRankingResponse) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Arena_ArenaSelfRankingResponse) GetNextSettlementTime() int64 {
	if m != nil {
		return m.NextSettlementTime
	}
	return 0
}

func (m *Arena_ArenaSelfRankingResponse) GetIsFirstChallenge() bool {
	if m != nil {
		return m.IsFirstChallenge
	}
	return false
}

func (m *Arena_ArenaSelfRankingResponse) GetLeftTicketPurchasesNum() int64 {
	if m != nil {
		return m.LeftTicketPurchasesNum
	}
	return 0
}

func (*Arena_ArenaSelfRankingResponse) XXX_MessageName() string {
	return "service.Arena.ArenaSelfRankingResponse"
}

// 查询对方出战英雄
type Arena_ArenaQueryFightHeroRequest struct {
	Type   models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RoleId string           `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *Arena_ArenaQueryFightHeroRequest) Reset()      { *m = Arena_ArenaQueryFightHeroRequest{} }
func (*Arena_ArenaQueryFightHeroRequest) ProtoMessage() {}
func (*Arena_ArenaQueryFightHeroRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 6}
}
func (m *Arena_ArenaQueryFightHeroRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaQueryFightHeroRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaQueryFightHeroRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaQueryFightHeroRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaQueryFightHeroRequest.Merge(m, src)
}
func (m *Arena_ArenaQueryFightHeroRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaQueryFightHeroRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaQueryFightHeroRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaQueryFightHeroRequest proto.InternalMessageInfo

func (m *Arena_ArenaQueryFightHeroRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaQueryFightHeroRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*Arena_ArenaQueryFightHeroRequest) XXX_MessageName() string {
	return "service.Arena.ArenaQueryFightHeroRequest"
}

type Arena_ArenaQueryFightHeroResponse struct {
	Type      models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	Assembles *models.Assemble `protobuf:"bytes,2,opt,name=assembles,proto3" json:"assembles,omitempty"`
}

func (m *Arena_ArenaQueryFightHeroResponse) Reset()      { *m = Arena_ArenaQueryFightHeroResponse{} }
func (*Arena_ArenaQueryFightHeroResponse) ProtoMessage() {}
func (*Arena_ArenaQueryFightHeroResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 7}
}
func (m *Arena_ArenaQueryFightHeroResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaQueryFightHeroResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaQueryFightHeroResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaQueryFightHeroResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaQueryFightHeroResponse.Merge(m, src)
}
func (m *Arena_ArenaQueryFightHeroResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaQueryFightHeroResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaQueryFightHeroResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaQueryFightHeroResponse proto.InternalMessageInfo

func (m *Arena_ArenaQueryFightHeroResponse) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaQueryFightHeroResponse) GetAssembles() *models.Assemble {
	if m != nil {
		return m.Assembles
	}
	return nil
}

func (*Arena_ArenaQueryFightHeroResponse) XXX_MessageName() string {
	return "service.Arena.ArenaQueryFightHeroResponse"
}

type Arena_ArenaGetChallengeRequest struct {
	Type models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
}

func (m *Arena_ArenaGetChallengeRequest) Reset()      { *m = Arena_ArenaGetChallengeRequest{} }
func (*Arena_ArenaGetChallengeRequest) ProtoMessage() {}
func (*Arena_ArenaGetChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 8}
}
func (m *Arena_ArenaGetChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaGetChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaGetChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaGetChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaGetChallengeRequest.Merge(m, src)
}
func (m *Arena_ArenaGetChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaGetChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaGetChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaGetChallengeRequest proto.InternalMessageInfo

func (m *Arena_ArenaGetChallengeRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (*Arena_ArenaGetChallengeRequest) XXX_MessageName() string {
	return "service.Arena.ArenaGetChallengeRequest"
}

type Arena_ArenaGetChallengeResponse struct {
	Type        models.ArenaType    `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RankingInfo []*models.ArenaInfo `protobuf:"bytes,2,rep,name=ranking_info,json=rankingInfo,proto3" json:"ranking_info,omitempty"`
}

func (m *Arena_ArenaGetChallengeResponse) Reset()      { *m = Arena_ArenaGetChallengeResponse{} }
func (*Arena_ArenaGetChallengeResponse) ProtoMessage() {}
func (*Arena_ArenaGetChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 9}
}
func (m *Arena_ArenaGetChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaGetChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaGetChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaGetChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaGetChallengeResponse.Merge(m, src)
}
func (m *Arena_ArenaGetChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaGetChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaGetChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaGetChallengeResponse proto.InternalMessageInfo

func (m *Arena_ArenaGetChallengeResponse) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaGetChallengeResponse) GetRankingInfo() []*models.ArenaInfo {
	if m != nil {
		return m.RankingInfo
	}
	return nil
}

func (*Arena_ArenaGetChallengeResponse) XXX_MessageName() string {
	return "service.Arena.ArenaGetChallengeResponse"
}

type Arena_ArenaChallengeRequest struct {
	Type          models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RoleId        string           `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RankingId     int32            `protobuf:"varint,3,opt,name=ranking_id,json=rankingId,proto3" json:"ranking_id,omitempty"`
	SelfRankingId int32            `protobuf:"varint,4,opt,name=self_ranking_id,json=selfRankingId,proto3" json:"self_ranking_id,omitempty"`
	BattleId      int64            `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *Arena_ArenaChallengeRequest) Reset()      { *m = Arena_ArenaChallengeRequest{} }
func (*Arena_ArenaChallengeRequest) ProtoMessage() {}
func (*Arena_ArenaChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 10}
}
func (m *Arena_ArenaChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaChallengeRequest.Merge(m, src)
}
func (m *Arena_ArenaChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaChallengeRequest proto.InternalMessageInfo

func (m *Arena_ArenaChallengeRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaChallengeRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Arena_ArenaChallengeRequest) GetRankingId() int32 {
	if m != nil {
		return m.RankingId
	}
	return 0
}

func (m *Arena_ArenaChallengeRequest) GetSelfRankingId() int32 {
	if m != nil {
		return m.SelfRankingId
	}
	return 0
}

func (m *Arena_ArenaChallengeRequest) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*Arena_ArenaChallengeRequest) XXX_MessageName() string {
	return "service.Arena.ArenaChallengeRequest"
}

type Arena_ArenaChallengeResponse struct {
	Type     models.ArenaType          `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	RoleId   string                    `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Data     *models.SingleBattleParam `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	BattleId int64                     `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *Arena_ArenaChallengeResponse) Reset()      { *m = Arena_ArenaChallengeResponse{} }
func (*Arena_ArenaChallengeResponse) ProtoMessage() {}
func (*Arena_ArenaChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 11}
}
func (m *Arena_ArenaChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaChallengeResponse.Merge(m, src)
}
func (m *Arena_ArenaChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaChallengeResponse proto.InternalMessageInfo

func (m *Arena_ArenaChallengeResponse) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaChallengeResponse) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Arena_ArenaChallengeResponse) GetData() *models.SingleBattleParam {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Arena_ArenaChallengeResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*Arena_ArenaChallengeResponse) XXX_MessageName() string {
	return "service.Arena.ArenaChallengeResponse"
}

type Arena_ArenaChallengeResultPrcRequest struct {
	Type     models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	IsWin    bool             `protobuf:"varint,2,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
	PlayerId string           `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (m *Arena_ArenaChallengeResultPrcRequest) Reset()      { *m = Arena_ArenaChallengeResultPrcRequest{} }
func (*Arena_ArenaChallengeResultPrcRequest) ProtoMessage() {}
func (*Arena_ArenaChallengeResultPrcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 12}
}
func (m *Arena_ArenaChallengeResultPrcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaChallengeResultPrcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaChallengeResultPrcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaChallengeResultPrcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaChallengeResultPrcRequest.Merge(m, src)
}
func (m *Arena_ArenaChallengeResultPrcRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaChallengeResultPrcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaChallengeResultPrcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaChallengeResultPrcRequest proto.InternalMessageInfo

func (m *Arena_ArenaChallengeResultPrcRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaChallengeResultPrcRequest) GetIsWin() bool {
	if m != nil {
		return m.IsWin
	}
	return false
}

func (m *Arena_ArenaChallengeResultPrcRequest) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (*Arena_ArenaChallengeResultPrcRequest) XXX_MessageName() string {
	return "service.Arena.ArenaChallengeResultPrcRequest"
}

type Arena_ArenaChallengeResultPrcResponse struct {
	Type              models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	IsWin             bool             `protobuf:"varint,2,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
	Rewards           []*models.Item   `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty"`
	SelfOldRankingId  int64            `protobuf:"varint,4,opt,name=self_old_ranking_id,json=selfOldRankingId,proto3" json:"self_old_ranking_id,omitempty"`
	SelfNewRankingId  int64            `protobuf:"varint,5,opt,name=self_new_ranking_id,json=selfNewRankingId,proto3" json:"self_new_ranking_id,omitempty"`
	OtherOldRankingId int64            `protobuf:"varint,6,opt,name=other_old_ranking_id,json=otherOldRankingId,proto3" json:"other_old_ranking_id,omitempty"`
	OtherNewRankingId int64            `protobuf:"varint,7,opt,name=other_new_ranking_id,json=otherNewRankingId,proto3" json:"other_new_ranking_id,omitempty"`
	PlayerId          string           `protobuf:"bytes,8,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (m *Arena_ArenaChallengeResultPrcResponse) Reset()      { *m = Arena_ArenaChallengeResultPrcResponse{} }
func (*Arena_ArenaChallengeResultPrcResponse) ProtoMessage() {}
func (*Arena_ArenaChallengeResultPrcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 13}
}
func (m *Arena_ArenaChallengeResultPrcResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaChallengeResultPrcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaChallengeResultPrcResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaChallengeResultPrcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaChallengeResultPrcResponse.Merge(m, src)
}
func (m *Arena_ArenaChallengeResultPrcResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaChallengeResultPrcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaChallengeResultPrcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaChallengeResultPrcResponse proto.InternalMessageInfo

func (m *Arena_ArenaChallengeResultPrcResponse) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaChallengeResultPrcResponse) GetIsWin() bool {
	if m != nil {
		return m.IsWin
	}
	return false
}

func (m *Arena_ArenaChallengeResultPrcResponse) GetRewards() []*models.Item {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *Arena_ArenaChallengeResultPrcResponse) GetSelfOldRankingId() int64 {
	if m != nil {
		return m.SelfOldRankingId
	}
	return 0
}

func (m *Arena_ArenaChallengeResultPrcResponse) GetSelfNewRankingId() int64 {
	if m != nil {
		return m.SelfNewRankingId
	}
	return 0
}

func (m *Arena_ArenaChallengeResultPrcResponse) GetOtherOldRankingId() int64 {
	if m != nil {
		return m.OtherOldRankingId
	}
	return 0
}

func (m *Arena_ArenaChallengeResultPrcResponse) GetOtherNewRankingId() int64 {
	if m != nil {
		return m.OtherNewRankingId
	}
	return 0
}

func (m *Arena_ArenaChallengeResultPrcResponse) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (*Arena_ArenaChallengeResultPrcResponse) XXX_MessageName() string {
	return "service.Arena.ArenaChallengeResultPrcResponse"
}

type Arena_ArenaBuyChallengeTicketRequest struct {
	Type   models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	Number int32            `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *Arena_ArenaBuyChallengeTicketRequest) Reset()      { *m = Arena_ArenaBuyChallengeTicketRequest{} }
func (*Arena_ArenaBuyChallengeTicketRequest) ProtoMessage() {}
func (*Arena_ArenaBuyChallengeTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 14}
}
func (m *Arena_ArenaBuyChallengeTicketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaBuyChallengeTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaBuyChallengeTicketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaBuyChallengeTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaBuyChallengeTicketRequest.Merge(m, src)
}
func (m *Arena_ArenaBuyChallengeTicketRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaBuyChallengeTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaBuyChallengeTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaBuyChallengeTicketRequest proto.InternalMessageInfo

func (m *Arena_ArenaBuyChallengeTicketRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaBuyChallengeTicketRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (*Arena_ArenaBuyChallengeTicketRequest) XXX_MessageName() string {
	return "service.Arena.ArenaBuyChallengeTicketRequest"
}

type Arena_ArenaBuyChallengeTicketResponse struct {
	Type                   models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	Item                   *models.Item     `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	LeftTicketPurchasesNum int64            `protobuf:"varint,3,opt,name=left_ticket_purchases_num,json=leftTicketPurchasesNum,proto3" json:"left_ticket_purchases_num,omitempty"`
}

func (m *Arena_ArenaBuyChallengeTicketResponse) Reset()      { *m = Arena_ArenaBuyChallengeTicketResponse{} }
func (*Arena_ArenaBuyChallengeTicketResponse) ProtoMessage() {}
func (*Arena_ArenaBuyChallengeTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 15}
}
func (m *Arena_ArenaBuyChallengeTicketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaBuyChallengeTicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaBuyChallengeTicketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaBuyChallengeTicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaBuyChallengeTicketResponse.Merge(m, src)
}
func (m *Arena_ArenaBuyChallengeTicketResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaBuyChallengeTicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaBuyChallengeTicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaBuyChallengeTicketResponse proto.InternalMessageInfo

func (m *Arena_ArenaBuyChallengeTicketResponse) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaBuyChallengeTicketResponse) GetItem() *models.Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *Arena_ArenaBuyChallengeTicketResponse) GetLeftTicketPurchasesNum() int64 {
	if m != nil {
		return m.LeftTicketPurchasesNum
	}
	return 0
}

func (*Arena_ArenaBuyChallengeTicketResponse) XXX_MessageName() string {
	return "service.Arena.ArenaBuyChallengeTicketResponse"
}

type Arena_ArenaGetFightLogRequest struct {
	Type models.ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
}

func (m *Arena_ArenaGetFightLogRequest) Reset()      { *m = Arena_ArenaGetFightLogRequest{} }
func (*Arena_ArenaGetFightLogRequest) ProtoMessage() {}
func (*Arena_ArenaGetFightLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 16}
}
func (m *Arena_ArenaGetFightLogRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaGetFightLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaGetFightLogRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaGetFightLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaGetFightLogRequest.Merge(m, src)
}
func (m *Arena_ArenaGetFightLogRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaGetFightLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaGetFightLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaGetFightLogRequest proto.InternalMessageInfo

func (m *Arena_ArenaGetFightLogRequest) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (*Arena_ArenaGetFightLogRequest) XXX_MessageName() string {
	return "service.Arena.ArenaGetFightLogRequest"
}

type Arena_ArenaGetFightLogResponse struct {
	Type     models.ArenaType        `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	FightLog []*models.ArenaFightLog `protobuf:"bytes,2,rep,name=fight_log,json=fightLog,proto3" json:"fight_log,omitempty"`
}

func (m *Arena_ArenaGetFightLogResponse) Reset()      { *m = Arena_ArenaGetFightLogResponse{} }
func (*Arena_ArenaGetFightLogResponse) ProtoMessage() {}
func (*Arena_ArenaGetFightLogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 17}
}
func (m *Arena_ArenaGetFightLogResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaGetFightLogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaGetFightLogResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaGetFightLogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaGetFightLogResponse.Merge(m, src)
}
func (m *Arena_ArenaGetFightLogResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaGetFightLogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaGetFightLogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaGetFightLogResponse proto.InternalMessageInfo

func (m *Arena_ArenaGetFightLogResponse) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *Arena_ArenaGetFightLogResponse) GetFightLog() []*models.ArenaFightLog {
	if m != nil {
		return m.FightLog
	}
	return nil
}

func (*Arena_ArenaGetFightLogResponse) XXX_MessageName() string {
	return "service.Arena.ArenaGetFightLogResponse"
}

type Arena_ArenaCheckRewardRequest struct {
}

func (m *Arena_ArenaCheckRewardRequest) Reset()      { *m = Arena_ArenaCheckRewardRequest{} }
func (*Arena_ArenaCheckRewardRequest) ProtoMessage() {}
func (*Arena_ArenaCheckRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 18}
}
func (m *Arena_ArenaCheckRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaCheckRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaCheckRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaCheckRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaCheckRewardRequest.Merge(m, src)
}
func (m *Arena_ArenaCheckRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaCheckRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaCheckRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaCheckRewardRequest proto.InternalMessageInfo

func (*Arena_ArenaCheckRewardRequest) XXX_MessageName() string {
	return "service.Arena.ArenaCheckRewardRequest"
}

type Arena_ArenaCheckRewardResponse struct {
}

func (m *Arena_ArenaCheckRewardResponse) Reset()      { *m = Arena_ArenaCheckRewardResponse{} }
func (*Arena_ArenaCheckRewardResponse) ProtoMessage() {}
func (*Arena_ArenaCheckRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 19}
}
func (m *Arena_ArenaCheckRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaCheckRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaCheckRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaCheckRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaCheckRewardResponse.Merge(m, src)
}
func (m *Arena_ArenaCheckRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaCheckRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaCheckRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaCheckRewardResponse proto.InternalMessageInfo

func (*Arena_ArenaCheckRewardResponse) XXX_MessageName() string {
	return "service.Arena.ArenaCheckRewardResponse"
}

type Arena_ArenaGetRewardTimeRequest struct {
}

func (m *Arena_ArenaGetRewardTimeRequest) Reset()      { *m = Arena_ArenaGetRewardTimeRequest{} }
func (*Arena_ArenaGetRewardTimeRequest) ProtoMessage() {}
func (*Arena_ArenaGetRewardTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 20}
}
func (m *Arena_ArenaGetRewardTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaGetRewardTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaGetRewardTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaGetRewardTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaGetRewardTimeRequest.Merge(m, src)
}
func (m *Arena_ArenaGetRewardTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaGetRewardTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaGetRewardTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaGetRewardTimeRequest proto.InternalMessageInfo

func (*Arena_ArenaGetRewardTimeRequest) XXX_MessageName() string {
	return "service.Arena.ArenaGetRewardTimeRequest"
}

type Arena_ArenaGetRewardTimeResponse struct {
	Times []*models.ArenaRewardTime `protobuf:"bytes,1,rep,name=times,proto3" json:"times,omitempty"`
}

func (m *Arena_ArenaGetRewardTimeResponse) Reset()      { *m = Arena_ArenaGetRewardTimeResponse{} }
func (*Arena_ArenaGetRewardTimeResponse) ProtoMessage() {}
func (*Arena_ArenaGetRewardTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{0, 21}
}
func (m *Arena_ArenaGetRewardTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena_ArenaGetRewardTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena_ArenaGetRewardTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena_ArenaGetRewardTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena_ArenaGetRewardTimeResponse.Merge(m, src)
}
func (m *Arena_ArenaGetRewardTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *Arena_ArenaGetRewardTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena_ArenaGetRewardTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Arena_ArenaGetRewardTimeResponse proto.InternalMessageInfo

func (m *Arena_ArenaGetRewardTimeResponse) GetTimes() []*models.ArenaRewardTime {
	if m != nil {
		return m.Times
	}
	return nil
}

func (*Arena_ArenaGetRewardTimeResponse) XXX_MessageName() string {
	return "service.Arena.ArenaGetRewardTimeResponse"
}

type Virtual struct {
}

func (m *Virtual) Reset()      { *m = Virtual{} }
func (*Virtual) ProtoMessage() {}
func (*Virtual) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{1}
}
func (m *Virtual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Virtual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Virtual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Virtual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Virtual.Merge(m, src)
}
func (m *Virtual) XXX_Size() int {
	return m.Size()
}
func (m *Virtual) XXX_DiscardUnknown() {
	xxx_messageInfo_Virtual.DiscardUnknown(m)
}

var xxx_messageInfo_Virtual proto.InternalMessageInfo

func (*Virtual) XXX_MessageName() string {
	return "service.Virtual"
}

type Virtual_CombatRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *Virtual_CombatRequest) Reset()      { *m = Virtual_CombatRequest{} }
func (*Virtual_CombatRequest) ProtoMessage() {}
func (*Virtual_CombatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{1, 0}
}
func (m *Virtual_CombatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Virtual_CombatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Virtual_CombatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Virtual_CombatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Virtual_CombatRequest.Merge(m, src)
}
func (m *Virtual_CombatRequest) XXX_Size() int {
	return m.Size()
}
func (m *Virtual_CombatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Virtual_CombatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Virtual_CombatRequest proto.InternalMessageInfo

func (m *Virtual_CombatRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*Virtual_CombatRequest) XXX_MessageName() string {
	return "service.Virtual.CombatRequest"
}

type Virtual_CombatResponse struct {
	RoleId string                    `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Data   *models.SingleBattleParam `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Virtual_CombatResponse) Reset()      { *m = Virtual_CombatResponse{} }
func (*Virtual_CombatResponse) ProtoMessage() {}
func (*Virtual_CombatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b07c4b6eac779f95, []int{1, 1}
}
func (m *Virtual_CombatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Virtual_CombatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Virtual_CombatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Virtual_CombatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Virtual_CombatResponse.Merge(m, src)
}
func (m *Virtual_CombatResponse) XXX_Size() int {
	return m.Size()
}
func (m *Virtual_CombatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Virtual_CombatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Virtual_CombatResponse proto.InternalMessageInfo

func (m *Virtual_CombatResponse) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Virtual_CombatResponse) GetData() *models.SingleBattleParam {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*Virtual_CombatResponse) XXX_MessageName() string {
	return "service.Virtual.CombatResponse"
}
func init() {
	proto.RegisterEnum("service.ArenaErrorCode", ArenaErrorCode_name, ArenaErrorCode_value)
	proto.RegisterEnum("service.VirtualCombatCode", VirtualCombatCode_name, VirtualCombatCode_value)
	proto.RegisterType((*Arena)(nil), "service.Arena")
	proto.RegisterType((*Arena_ArenaHeroSetRequest)(nil), "service.Arena.ArenaHeroSetRequest")
	proto.RegisterType((*Arena_ArenaHeroSetResponse)(nil), "service.Arena.ArenaHeroSetResponse")
	proto.RegisterType((*Arena_ArenaRankingRequest)(nil), "service.Arena.ArenaRankingRequest")
	proto.RegisterType((*Arena_ArenaRankingResponse)(nil), "service.Arena.ArenaRankingResponse")
	proto.RegisterType((*Arena_ArenaSelfRankingRequest)(nil), "service.Arena.ArenaSelfRankingRequest")
	proto.RegisterType((*Arena_ArenaSelfRankingResponse)(nil), "service.Arena.ArenaSelfRankingResponse")
	proto.RegisterType((*Arena_ArenaQueryFightHeroRequest)(nil), "service.Arena.ArenaQueryFightHeroRequest")
	proto.RegisterType((*Arena_ArenaQueryFightHeroResponse)(nil), "service.Arena.ArenaQueryFightHeroResponse")
	proto.RegisterType((*Arena_ArenaGetChallengeRequest)(nil), "service.Arena.ArenaGetChallengeRequest")
	proto.RegisterType((*Arena_ArenaGetChallengeResponse)(nil), "service.Arena.ArenaGetChallengeResponse")
	proto.RegisterType((*Arena_ArenaChallengeRequest)(nil), "service.Arena.ArenaChallengeRequest")
	proto.RegisterType((*Arena_ArenaChallengeResponse)(nil), "service.Arena.ArenaChallengeResponse")
	proto.RegisterType((*Arena_ArenaChallengeResultPrcRequest)(nil), "service.Arena.ArenaChallengeResultPrcRequest")
	proto.RegisterType((*Arena_ArenaChallengeResultPrcResponse)(nil), "service.Arena.ArenaChallengeResultPrcResponse")
	proto.RegisterType((*Arena_ArenaBuyChallengeTicketRequest)(nil), "service.Arena.ArenaBuyChallengeTicketRequest")
	proto.RegisterType((*Arena_ArenaBuyChallengeTicketResponse)(nil), "service.Arena.ArenaBuyChallengeTicketResponse")
	proto.RegisterType((*Arena_ArenaGetFightLogRequest)(nil), "service.Arena.ArenaGetFightLogRequest")
	proto.RegisterType((*Arena_ArenaGetFightLogResponse)(nil), "service.Arena.ArenaGetFightLogResponse")
	proto.RegisterType((*Arena_ArenaCheckRewardRequest)(nil), "service.Arena.ArenaCheckRewardRequest")
	proto.RegisterType((*Arena_ArenaCheckRewardResponse)(nil), "service.Arena.ArenaCheckRewardResponse")
	proto.RegisterType((*Arena_ArenaGetRewardTimeRequest)(nil), "service.Arena.ArenaGetRewardTimeRequest")
	proto.RegisterType((*Arena_ArenaGetRewardTimeResponse)(nil), "service.Arena.ArenaGetRewardTimeResponse")
	proto.RegisterType((*Virtual)(nil), "service.Virtual")
	proto.RegisterType((*Virtual_CombatRequest)(nil), "service.Virtual.CombatRequest")
	proto.RegisterType((*Virtual_CombatResponse)(nil), "service.Virtual.CombatResponse")
}

func init() { proto.RegisterFile("proto/service/arena.proto", fileDescriptor_b07c4b6eac779f95) }

var fileDescriptor_b07c4b6eac779f95 = []byte{
	// 1796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x4f, 0x1c, 0xd7,
	0x15, 0x67, 0x58, 0x96, 0x8f, 0x0b, 0x86, 0xd9, 0xcb, 0xb2, 0x0c, 0x43, 0xb2, 0xa6, 0x51, 0x63,
	0x21, 0x54, 0x83, 0x21, 0x56, 0xab, 0x56, 0x95, 0x9a, 0x18, 0xc5, 0xe9, 0xaa, 0x16, 0xa6, 0x83,
	0xd5, 0x56, 0x55, 0xa5, 0xd5, 0xb0, 0x73, 0x77, 0x19, 0x79, 0x3e, 0xe8, 0x9d, 0x59, 0x63, 0xd4,
	0x97, 0x56, 0x6a, 0x14, 0x77, 0x0d, 0x06, 0x47, 0x36, 0x4d, 0x14, 0xb7, 0x91, 0xdb, 0xa6, 0x4d,
	0xdd, 0xda, 0x60, 0xa5, 0xeb, 0x60, 0xa1, 0x34, 0xaf, 0xe9, 0x5b, 0x1e, 0xa3, 0x3e, 0xb5, 0xb0,
	0x33, 0x2c, 0x6f, 0xf9, 0x13, 0xaa, 0xb9, 0x73, 0xef, 0xcc, 0xce, 0xf0, 0x11, 0xaf, 0xa5, 0xbe,
	0x71, 0xcf, 0xf9, 0x9d, 0x73, 0x7e, 0xe7, 0xe3, 0x9e, 0x3b, 0x0b, 0x18, 0x5a, 0xc4, 0xa6, 0x6d,
	0x4e, 0x58, 0x08, 0x5f, 0x53, 0x0b, 0x68, 0x42, 0xc6, 0xc8, 0x90, 0xc7, 0x89, 0x0c, 0x76, 0x50,
	0xa1, 0x28, 0xf8, 0x18, 0xdd, 0x54, 0x90, 0x66, 0x35, 0x42, 0xc4, 0xc1, 0x88, 0x66, 0x5e, 0xb6,
	0x10, 0x55, 0xbc, 0x10, 0x51, 0x14, 0x4d, 0xac, 0xcb, 0xb6, 0x6a, 0x1a, 0x54, 0x3b, 0x14, 0x33,
	0xb3, 0x6d, 0x8d, 0x19, 0x66, 0x62, 0xaa, 0x92, 0x2f, 0x7f, 0xe9, 0xdf, 0x19, 0x90, 0x7c, 0xcd,
	0x8b, 0x2c, 0x56, 0x38, 0xd0, 0x4f, 0xfe, 0xfa, 0x3e, 0xc2, 0xe6, 0x1c, 0xb2, 0x25, 0xf4, 0xf3,
	0x32, 0xb2, 0x6c, 0xf8, 0x32, 0x68, 0xb3, 0x97, 0x17, 0x91, 0xc0, 0x8d, 0x70, 0xa3, 0xbd, 0x53,
	0xa9, 0x71, 0xdf, 0xc5, 0x38, 0x81, 0x5e, 0x59, 0x5e, 0x44, 0x12, 0x51, 0xc3, 0x97, 0x41, 0xef,
	0x02, 0xc2, 0xe6, 0xb9, 0xfc, 0x65, 0xac, 0x96, 0x54, 0x23, 0xa7, 0x08, 0xad, 0x23, 0xdc, 0x68,
	0x42, 0x3a, 0x45, 0xa4, 0x4c, 0xc8, 0x60, 0x93, 0x21, 0x2c, 0x11, 0xc2, 0x26, 0x99, 0x50, 0xd4,
	0x41, 0x3a, 0xca, 0xc5, 0x5a, 0x34, 0x0d, 0x0b, 0x3d, 0x2b, 0x99, 0x71, 0xd0, 0x25, 0x5b, 0x16,
	0xd2, 0xe7, 0x35, 0x64, 0x11, 0x1e, 0xdd, 0x53, 0x7c, 0x80, 0xa5, 0x0a, 0x29, 0x84, 0x88, 0x16,
	0x4d, 0x5d, 0x92, 0x8d, 0xab, 0xaa, 0x51, 0x6a, 0x32, 0xf5, 0xd3, 0xa0, 0xdb, 0xb2, 0x65, 0x6c,
	0xe7, 0x55, 0x43, 0x41, 0xd7, 0x49, 0xbc, 0xa4, 0x04, 0x88, 0x28, 0xe7, 0x49, 0x60, 0x1a, 0x24,
	0x0b, 0x66, 0xd9, 0xb0, 0x49, 0xae, 0x49, 0xc9, 0x3f, 0x88, 0x77, 0x38, 0x9a, 0x64, 0x10, 0xb5,
	0xb9, 0x24, 0xbf, 0x32, 0xec, 0x79, 0xd0, 0x83, 0x7d, 0xd7, 0x79, 0xd5, 0x28, 0x9a, 0x42, 0x62,
	0x24, 0x31, 0xda, 0x1d, 0xf3, 0x97, 0x33, 0x8a, 0xa6, 0xd4, 0x4d, 0x61, 0xde, 0x41, 0x7c, 0x15,
	0x0c, 0x12, 0xcd, 0x1c, 0xd2, 0x8a, 0xcf, 0x55, 0x0f, 0xf1, 0x5f, 0x09, 0x20, 0x1c, 0x76, 0xd1,
	0x5c, 0x72, 0x2f, 0x02, 0x10, 0x70, 0x57, 0x68, 0x6e, 0x5d, 0x8c, 0xa6, 0x02, 0xcf, 0x81, 0x74,
	0x11, 0x23, 0x94, 0x2f, 0x2c, 0xc8, 0x9a, 0x86, 0x8c, 0x12, 0xca, 0xdb, 0xaa, 0x8e, 0x2c, 0x3a,
	0x4c, 0xd0, 0xd3, 0x4d, 0x33, 0xd5, 0x15, 0x4f, 0x03, 0xc7, 0x40, 0xca, 0x40, 0xd7, 0xed, 0x3c,
	0x46, 0x45, 0x8c, 0xac, 0x05, 0x82, 0x17, 0xda, 0x08, 0xbc, 0xcf, 0x53, 0x48, 0xbe, 0xdc, 0x03,
	0xc3, 0x51, 0xc0, 0x5b, 0x48, 0xb6, 0x4c, 0x23, 0x6f, 0x5e, 0x43, 0xd8, 0x87, 0x26, 0x09, 0xb4,
	0xd7, 0x97, 0x5f, 0xbe, 0x86, 0x30, 0x41, 0x46, 0x06, 0xad, 0xfd, 0x2b, 0x07, 0xcd, 0x9b, 0x84,
	0x45, 0x73, 0x09, 0x61, 0xa1, 0x83, 0xb8, 0xf3, 0x0f, 0x5e, 0x36, 0x84, 0x9b, 0x85, 0xbc, 0x1b,
	0xab, 0x23, 0xc3, 0xf6, 0x63, 0x76, 0xfa, 0xd9, 0x78, 0xba, 0xb9, 0x40, 0x45, 0xe2, 0x7e, 0x03,
	0x40, 0xd5, 0xca, 0x17, 0x55, 0x6c, 0xd9, 0x61, 0x0d, 0x84, 0xae, 0x11, 0x6e, 0xb4, 0x53, 0xe2,
	0x55, 0xeb, 0xa2, 0xa7, 0x08, 0x0a, 0x00, 0xbf, 0x0d, 0x86, 0x34, 0x54, 0xf4, 0x9c, 0x16, 0xae,
	0x22, 0x3b, 0xbf, 0x58, 0xc6, 0x85, 0x05, 0xd9, 0x42, 0x56, 0xde, 0x28, 0xeb, 0x02, 0x20, 0x41,
	0x32, 0x1e, 0xe0, 0x0a, 0xd1, 0xcf, 0x32, 0xf5, 0x4c, 0x59, 0x17, 0x7f, 0x06, 0x44, 0xd2, 0x9a,
	0x1f, 0x96, 0x11, 0x5e, 0xbe, 0xa8, 0x96, 0x16, 0x6c, 0xef, 0x4a, 0x36, 0x79, 0x41, 0x06, 0x41,
	0x07, 0x36, 0x35, 0xc4, 0x3a, 0xd9, 0x25, 0xb5, 0x7b, 0xc7, 0x9c, 0x22, 0xda, 0x60, 0xf8, 0x48,
	0xef, 0xff, 0xdf, 0xdb, 0xfe, 0x1a, 0x1d, 0xcf, 0x37, 0x50, 0x58, 0xa3, 0x26, 0x47, 0xfc, 0x3a,
	0x18, 0x3a, 0xc2, 0x45, 0x73, 0xb4, 0xe3, 0xd7, 0xb3, 0xf5, 0x99, 0xae, 0xe7, 0x0e, 0x07, 0x06,
	0x88, 0xea, 0x39, 0xa9, 0x1f, 0xdb, 0x8c, 0xd8, 0x95, 0x4b, 0xc4, 0xaf, 0xdc, 0x19, 0xd0, 0x67,
	0x21, 0xad, 0x98, 0x6f, 0xc0, 0xb4, 0x11, 0xcc, 0x29, 0x2b, 0xbc, 0xe6, 0x39, 0x05, 0x0e, 0x83,
	0x2e, 0xff, 0xe5, 0xf1, 0x10, 0x0a, 0x19, 0xae, 0x4e, 0x5f, 0x90, 0x53, 0xc4, 0x3f, 0x71, 0x20,
	0x13, 0x67, 0xdf, 0x5c, 0xd5, 0x8e, 0xa5, 0x7f, 0x16, 0xb4, 0x29, 0xb2, 0x2d, 0x13, 0xe2, 0xdd,
	0x53, 0x43, 0xcc, 0x7e, 0x4e, 0x35, 0x4a, 0x1a, 0xba, 0x40, 0x08, 0xcc, 0xca, 0x58, 0xd6, 0x25,
	0x02, 0x3b, 0x99, 0xe6, 0x2f, 0x40, 0xf6, 0x10, 0xcb, 0xb2, 0x66, 0xcf, 0xe2, 0x42, 0x93, 0xc5,
	0x1e, 0x00, 0xed, 0xaa, 0x95, 0x5f, 0x52, 0x0d, 0x42, 0xb6, 0x53, 0x4a, 0xaa, 0xd6, 0x8f, 0x55,
	0xc3, 0x0b, 0xbe, 0xa8, 0xc9, 0xcb, 0x08, 0xb3, 0x4a, 0x77, 0x49, 0x9d, 0xbe, 0x20, 0xa7, 0x88,
	0xb5, 0x56, 0x70, 0xfa, 0xd8, 0xe8, 0xcd, 0x15, 0xeb, 0x98, 0xf0, 0x67, 0x40, 0x07, 0x46, 0x4b,
	0x32, 0x56, 0x2c, 0xfa, 0x26, 0xf4, 0x30, 0x07, 0x39, 0x1b, 0xe9, 0x12, 0x53, 0xc2, 0xb3, 0xa0,
	0x9f, 0xb4, 0xdc, 0xd4, 0x94, 0x78, 0xdb, 0x13, 0x12, 0xef, 0xa9, 0x2e, 0x6b, 0x4a, 0xd8, 0x79,
	0x06, 0x37, 0xd0, 0x52, 0x23, 0x3c, 0x19, 0xc2, 0x67, 0xd0, 0x52, 0x08, 0x9f, 0x00, 0x69, 0xd3,
	0x5e, 0x40, 0x38, 0xee, 0xbe, 0x9d, 0xe0, 0x53, 0x44, 0x17, 0xf1, 0x1f, 0x18, 0xc4, 0x02, 0x74,
	0x34, 0x18, 0x44, 0x22, 0x44, 0xca, 0xdc, 0x19, 0x2b, 0x73, 0x9e, 0xf6, 0xf8, 0x42, 0x79, 0xb9,
	0xe1, 0xa9, 0xf0, 0x16, 0x60, 0x93, 0x3d, 0xce, 0x80, 0x76, 0xa3, 0xac, 0xcf, 0x23, 0x4c, 0x9f,
	0x29, 0x7a, 0x12, 0x3f, 0xe0, 0x68, 0x1f, 0x8f, 0x8a, 0xd0, 0x5c, 0x1f, 0x47, 0x40, 0x9b, 0x6a,
	0x23, 0x9d, 0x2e, 0xb7, 0x68, 0xb7, 0x88, 0xe6, 0xe4, 0x15, 0x9f, 0x38, 0x71, 0xc5, 0xb3, 0x07,
	0xff, 0x0d, 0x64, 0x93, 0x15, 0x7c, 0xc9, 0x6c, 0xf6, 0xc1, 0x2f, 0x87, 0x0b, 0x35, 0xf4, 0xd0,
	0x5c, 0x86, 0x53, 0xa0, 0xab, 0xe8, 0x99, 0xe6, 0x35, 0xb3, 0x44, 0x37, 0xe1, 0x40, 0x04, 0x1b,
	0x38, 0xee, 0x2c, 0xd2, 0xbf, 0xc4, 0x21, 0x4a, 0x7c, 0x7a, 0x01, 0x15, 0xae, 0x4a, 0x64, 0x66,
	0x29, 0x71, 0x51, 0xa4, 0x8c, 0x22, 0x2a, 0x9f, 0x91, 0x38, 0x1c, 0xee, 0x6e, 0x5f, 0xe3, 0xbd,
	0xa8, 0xcc, 0xf0, 0x07, 0xf4, 0xbd, 0x8b, 0x29, 0x69, 0x32, 0x67, 0x41, 0xd2, 0xff, 0xce, 0xe0,
	0x08, 0xc3, 0xc1, 0x08, 0xc3, 0x06, 0xbc, 0x8f, 0x7a, 0x69, 0x95, 0x03, 0x1d, 0x3f, 0x52, 0xb1,
	0x5d, 0x96, 0x35, 0x71, 0x14, 0x9c, 0x9a, 0x36, 0xf5, 0x79, 0x39, 0x98, 0xae, 0x86, 0x45, 0xc6,
	0x45, 0x1e, 0xc5, 0x9f, 0x80, 0x5e, 0x86, 0xa4, 0x61, 0x8f, 0x83, 0x06, 0x3b, 0xaf, 0xf5, 0x99,
	0x76, 0xde, 0xd8, 0x4d, 0x00, 0x7a, 0x09, 0xd5, 0xd7, 0x31, 0x36, 0xf1, 0xb4, 0xa9, 0x20, 0x78,
	0x06, 0xf4, 0xbe, 0x8e, 0xb1, 0xff, 0xb5, 0xb6, 0x6c, 0xd9, 0x48, 0xe7, 0x5b, 0x44, 0x58, 0xa9,
	0x0a, 0xbd, 0xb0, 0x67, 0xff, 0xa3, 0x9d, 0xfd, 0x9d, 0xf7, 0x0f, 0xee, 0xbc, 0x5b, 0xdf, 0xdc,
	0x84, 0xdf, 0x04, 0x03, 0x0c, 0x17, 0xcc, 0xf2, 0x25, 0xb3, 0x70, 0x95, 0xe7, 0xc4, 0xe1, 0x4a,
	0x55, 0x18, 0x84, 0x03, 0xce, 0xe6, 0x53, 0x77, 0xe3, 0xa9, 0xfb, 0xf0, 0x8f, 0xce, 0xbd, 0x0f,
	0xeb, 0x7f, 0xf8, 0x9b, 0xbb, 0x72, 0xdb, 0xbd, 0xf1, 0x0e, 0x3c, 0x0f, 0x32, 0x87, 0xec, 0xc8,
	0x07, 0x19, 0xdf, 0x2a, 0x0a, 0x95, 0xaa, 0x90, 0x86, 0xd0, 0x47, 0xba, 0x7f, 0xbf, 0xef, 0xde,
	0xdd, 0xaa, 0x6d, 0xaf, 0xd6, 0x9f, 0x7c, 0x04, 0xbf, 0x0e, 0x7a, 0x98, 0x95, 0xf7, 0x41, 0xc0,
	0x27, 0x18, 0xa7, 0xfa, 0xcd, 0xc7, 0x07, 0xef, 0xfd, 0x9a, 0x72, 0x6a, 0xe0, 0x3e, 0x6d, 0x1a,
	0x45, 0xb5, 0xc4, 0xb7, 0x31, 0xdc, 0xc1, 0x9b, 0xab, 0xfb, 0x9f, 0x3c, 0xa2, 0xb8, 0xb1, 0xd0,
	0x5b, 0xce, 0x50, 0x6d, 0x3e, 0xc9, 0x22, 0x3b, 0x37, 0x7e, 0xe7, 0xfc, 0xe5, 0xa6, 0xb3, 0xb2,
	0xe1, 0xde, 0x7b, 0xe0, 0x3c, 0x5a, 0x71, 0x6f, 0xac, 0x37, 0x46, 0xf6, 0xa6, 0x93, 0x6f, 0x0f,
	0xaa, 0xf1, 0x78, 0xc7, 0xf9, 0xfd, 0x4d, 0xea, 0xf1, 0x5b, 0x61, 0x56, 0x33, 0xa6, 0x7d, 0xd1,
	0x2c, 0x1b, 0xca, 0x2c, 0xd9, 0x2b, 0x7c, 0x07, 0x2b, 0x87, 0x7b, 0xef, 0x81, 0xfb, 0x9b, 0x7f,
	0x3a, 0x37, 0xb6, 0xf6, 0x6f, 0xfd, 0xd5, 0x79, 0xf4, 0xa4, 0xf6, 0xe9, 0x7d, 0xf7, 0x57, 0x9b,
	0x70, 0x0a, 0xa4, 0x1a, 0x0c, 0xbd, 0xdc, 0x90, 0xc5, 0x77, 0x1e, 0xb2, 0xf1, 0xd3, 0x74, 0xef,
	0x6e, 0xb9, 0xab, 0x8f, 0xe0, 0x18, 0xe8, 0x63, 0x36, 0x74, 0xb5, 0xf1, 0x5d, 0xe2, 0x40, 0xa5,
	0x2a, 0xa4, 0x60, 0x9f, 0x7b, 0xeb, 0xed, 0xfa, 0xfd, 0x15, 0xf7, 0xcf, 0xf7, 0x28, 0xb1, 0x49,
	0x90, 0x8e, 0x61, 0xc9, 0x4f, 0x01, 0x1e, 0x88, 0x83, 0x95, 0xaa, 0xd0, 0x0f, 0x53, 0x81, 0x81,
	0xaa, 0x50, 0x93, 0x57, 0x00, 0x8c, 0x99, 0xcc, 0x9a, 0x16, 0xdf, 0x1d, 0x70, 0x62, 0x06, 0xb5,
	0x4f, 0x1a, 0x4a, 0x3a, 0x09, 0x86, 0x62, 0x46, 0x73, 0xc8, 0x50, 0xfc, 0x1b, 0xc0, 0xf7, 0xb0,
	0x9a, 0xf9, 0xc3, 0xe0, 0xac, 0xdd, 0x76, 0x3e, 0xd8, 0x80, 0xaf, 0x82, 0x91, 0x98, 0x49, 0x30,
	0x10, 0xb3, 0x74, 0x27, 0xf3, 0xa7, 0x44, 0xb1, 0x52, 0x15, 0x32, 0x30, 0xed, 0xcf, 0x84, 0x5f,
	0xba, 0x80, 0xe9, 0x77, 0x81, 0xd0, 0x50, 0xbc, 0x9c, 0x31, 0x27, 0xeb, 0x88, 0x55, 0xa4, 0x57,
	0xcc, 0x56, 0xaa, 0x82, 0x08, 0x85, 0xda, 0xf6, 0xaa, 0x17, 0x73, 0x7d, 0xa5, 0xb6, 0xfd, 0xcb,
	0xda, 0xf6, 0x03, 0x9f, 0x7e, 0x6d, 0xfb, 0xa1, 0xf7, 0x7a, 0x44, 0xac, 0x99, 0x65, 0x1f, 0xab,
	0xa5, 0x6f, 0x19, 0x1a, 0x9c, 0x0f, 0x73, 0x64, 0x4d, 0x0e, 0x18, 0xf3, 0x7c, 0xd0, 0x01, 0xd6,
	0x33, 0x3a, 0xf0, 0xe7, 0x42, 0x92, 0x91, 0x81, 0xbf, 0x5c, 0xb6, 0xf9, 0x54, 0x50, 0x18, 0x82,
	0xad, 0x3f, 0x79, 0xd3, 0xfd, 0xed, 0x13, 0x38, 0x09, 0xfa, 0x63, 0x85, 0xb9, 0x64, 0xca, 0x0a,
	0x0f, 0x83, 0xfb, 0x41, 0xc6, 0xa0, 0xbe, 0xb9, 0xe3, 0xac, 0x6d, 0xd0, 0x4a, 0x5c, 0x00, 0xc3,
	0xc1, 0x94, 0x46, 0x16, 0xfa, 0x25, 0x55, 0x57, 0x6d, 0xbe, 0x5f, 0xfc, 0x5a, 0xa5, 0x2a, 0xbc,
	0x08, 0x87, 0xfd, 0x38, 0xce, 0xea, 0xc7, 0xf5, 0x7f, 0x3c, 0xac, 0x3d, 0xdd, 0x62, 0x77, 0xac,
	0x72, 0xf0, 0xee, 0x3a, 0x9c, 0x06, 0x2f, 0x1c, 0xed, 0x63, 0x86, 0x3c, 0x5f, 0x7c, 0xfa, 0x38,
	0x27, 0x77, 0xb7, 0x0e, 0xde, 0x5a, 0x0b, 0x88, 0x64, 0x0f, 0x65, 0x1b, 0x76, 0xd7, 0x2b, 0xd4,
	0x00, 0x6b, 0x4c, 0xfd, 0xad, 0x07, 0xce, 0xc7, 0x8f, 0xdd, 0x5b, 0x6f, 0x3b, 0xeb, 0xab, 0xce,
	0xda, 0xed, 0xfd, 0x3b, 0xef, 0x3b, 0x6b, 0xef, 0x38, 0x2b, 0x1b, 0x70, 0x1a, 0x9c, 0x3e, 0xe4,
	0x43, 0x89, 0x3a, 0xc9, 0x30, 0x27, 0x74, 0xc9, 0x1c, 0x76, 0x32, 0x79, 0xc4, 0x9e, 0x99, 0xf3,
	0x7e, 0x0a, 0xf3, 0x83, 0x41, 0xa7, 0xfc, 0xa2, 0x7f, 0xfa, 0x9e, 0xdf, 0xdf, 0xb1, 0x2f, 0x39,
	0x90, 0xa2, 0xdb, 0xd9, 0xdf, 0xb7, 0x64, 0x21, 0x8e, 0x13, 0x47, 0x11, 0xf9, 0x89, 0x8b, 0xf1,
	0x08, 0x3c, 0x5d, 0x46, 0xdc, 0x91, 0xcb, 0xe8, 0x7b, 0xa4, 0x62, 0x11, 0x7c, 0x6c, 0x85, 0xb4,
	0x9e, 0xbc, 0x42, 0xbe, 0x43, 0xc6, 0x32, 0xee, 0x80, 0xae, 0x92, 0xc4, 0x89, 0xab, 0xe4, 0xc2,
	0xcc, 0x17, 0xff, 0xcd, 0xb6, 0x7c, 0xb8, 0x9b, 0xe5, 0x3e, 0xdb, 0xcd, 0x72, 0x9f, 0xef, 0x66,
	0xb9, 0xff, 0xec, 0x66, 0xb9, 0xfa, 0x6e, 0xb6, 0xe5, 0xcb, 0xdd, 0x2c, 0xb7, 0xbe, 0x97, 0x6d,
	0xf9, 0x6c, 0x2f, 0xcb, 0x7d, 0xbe, 0x97, 0x6d, 0xf9, 0x62, 0x2f, 0xdb, 0xf2, 0xd3, 0x91, 0x82,
	0xa9, 0x1a, 0x67, 0x2d, 0x84, 0xaf, 0x21, 0x3c, 0x51, 0x30, 0x75, 0xdd, 0x34, 0x26, 0x22, 0xff,
	0xd6, 0x9a, 0x6f, 0x27, 0xc7, 0x57, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xca, 0x6a, 0x40, 0x03,
	0xee, 0x12, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaHeroSetRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaHeroSetResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaRankingRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaRankingResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaSelfRankingRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaSelfRankingResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaQueryFightHeroRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaQueryFightHeroResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaGetChallengeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaGetChallengeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaChallengeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaChallengeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaChallengeResultPrcRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaChallengeResultPrcResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaBuyChallengeTicketRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaBuyChallengeTicketResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaGetFightLogRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaGetFightLogResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaCheckRewardRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaCheckRewardResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaGetRewardTimeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArena_ArenaGetRewardTimeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVirtual.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVirtual_CombatRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolVirtual_CombatResponse.Get().(proto.Message)
	})
}

var poolArena = &sync.Pool{New: func() interface{} { return &Arena{} }}

func (m *Arena) ReleasePool() { m.Reset(); poolArena.Put(m); m = nil }

var poolArena_ArenaHeroSetRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaHeroSetRequest{} }}

func (m *Arena_ArenaHeroSetRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaHeroSetRequest.Put(m)
	m = nil
}

var poolArena_ArenaHeroSetResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaHeroSetResponse{} }}

func (m *Arena_ArenaHeroSetResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaHeroSetResponse.Put(m)
	m = nil
}

var poolArena_ArenaRankingRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaRankingRequest{} }}

func (m *Arena_ArenaRankingRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaRankingRequest.Put(m)
	m = nil
}

var poolArena_ArenaRankingResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaRankingResponse{} }}

func (m *Arena_ArenaRankingResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaRankingResponse.Put(m)
	m = nil
}

var poolArena_ArenaSelfRankingRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaSelfRankingRequest{} }}

func (m *Arena_ArenaSelfRankingRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaSelfRankingRequest.Put(m)
	m = nil
}

var poolArena_ArenaSelfRankingResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaSelfRankingResponse{} }}

func (m *Arena_ArenaSelfRankingResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaSelfRankingResponse.Put(m)
	m = nil
}

var poolArena_ArenaQueryFightHeroRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaQueryFightHeroRequest{} }}

func (m *Arena_ArenaQueryFightHeroRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaQueryFightHeroRequest.Put(m)
	m = nil
}

var poolArena_ArenaQueryFightHeroResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaQueryFightHeroResponse{} }}

func (m *Arena_ArenaQueryFightHeroResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaQueryFightHeroResponse.Put(m)
	m = nil
}

var poolArena_ArenaGetChallengeRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaGetChallengeRequest{} }}

func (m *Arena_ArenaGetChallengeRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaGetChallengeRequest.Put(m)
	m = nil
}

var poolArena_ArenaGetChallengeResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaGetChallengeResponse{} }}

func (m *Arena_ArenaGetChallengeResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaGetChallengeResponse.Put(m)
	m = nil
}

var poolArena_ArenaChallengeRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaChallengeRequest{} }}

func (m *Arena_ArenaChallengeRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaChallengeRequest.Put(m)
	m = nil
}

var poolArena_ArenaChallengeResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaChallengeResponse{} }}

func (m *Arena_ArenaChallengeResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaChallengeResponse.Put(m)
	m = nil
}

var poolArena_ArenaChallengeResultPrcRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaChallengeResultPrcRequest{} }}

func (m *Arena_ArenaChallengeResultPrcRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaChallengeResultPrcRequest.Put(m)
	m = nil
}

var poolArena_ArenaChallengeResultPrcResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaChallengeResultPrcResponse{} }}

func (m *Arena_ArenaChallengeResultPrcResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaChallengeResultPrcResponse.Put(m)
	m = nil
}

var poolArena_ArenaBuyChallengeTicketRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaBuyChallengeTicketRequest{} }}

func (m *Arena_ArenaBuyChallengeTicketRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaBuyChallengeTicketRequest.Put(m)
	m = nil
}

var poolArena_ArenaBuyChallengeTicketResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaBuyChallengeTicketResponse{} }}

func (m *Arena_ArenaBuyChallengeTicketResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaBuyChallengeTicketResponse.Put(m)
	m = nil
}

var poolArena_ArenaGetFightLogRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaGetFightLogRequest{} }}

func (m *Arena_ArenaGetFightLogRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaGetFightLogRequest.Put(m)
	m = nil
}

var poolArena_ArenaGetFightLogResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaGetFightLogResponse{} }}

func (m *Arena_ArenaGetFightLogResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaGetFightLogResponse.Put(m)
	m = nil
}

var poolArena_ArenaCheckRewardRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaCheckRewardRequest{} }}

func (m *Arena_ArenaCheckRewardRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaCheckRewardRequest.Put(m)
	m = nil
}

var poolArena_ArenaCheckRewardResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaCheckRewardResponse{} }}

func (m *Arena_ArenaCheckRewardResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaCheckRewardResponse.Put(m)
	m = nil
}

var poolArena_ArenaGetRewardTimeRequest = &sync.Pool{New: func() interface{} { return &Arena_ArenaGetRewardTimeRequest{} }}

func (m *Arena_ArenaGetRewardTimeRequest) ReleasePool() {
	m.Reset()
	poolArena_ArenaGetRewardTimeRequest.Put(m)
	m = nil
}

var poolArena_ArenaGetRewardTimeResponse = &sync.Pool{New: func() interface{} { return &Arena_ArenaGetRewardTimeResponse{} }}

func (m *Arena_ArenaGetRewardTimeResponse) ReleasePool() {
	m.Reset()
	poolArena_ArenaGetRewardTimeResponse.Put(m)
	m = nil
}

var poolVirtual = &sync.Pool{New: func() interface{} { return &Virtual{} }}

func (m *Virtual) ReleasePool() { m.Reset(); poolVirtual.Put(m); m = nil }

var poolVirtual_CombatRequest = &sync.Pool{New: func() interface{} { return &Virtual_CombatRequest{} }}

func (m *Virtual_CombatRequest) ReleasePool() { m.Reset(); poolVirtual_CombatRequest.Put(m); m = nil }

var poolVirtual_CombatResponse = &sync.Pool{New: func() interface{} { return &Virtual_CombatResponse{} }}

func (m *Virtual_CombatResponse) ReleasePool() { m.Reset(); poolVirtual_CombatResponse.Put(m); m = nil }
func (x ArenaErrorCode) String() string {
	s, ok := ArenaErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VirtualCombatCode) String() string {
	s, ok := VirtualCombatCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Arena) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena)
	if !ok {
		that2, ok := that.(Arena)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Arena_ArenaHeroSetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaHeroSetRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaHeroSetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Hero0_OriginId != that1.Hero0_OriginId {
		return false
	}
	if this.Hero1_OriginId != that1.Hero1_OriginId {
		return false
	}
	return true
}
func (this *Arena_ArenaHeroSetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaHeroSetResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaHeroSetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Assembles.Equal(that1.Assembles) {
		return false
	}
	return true
}
func (this *Arena_ArenaRankingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaRankingRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaRankingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.StartIndex != that1.StartIndex {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Arena_ArenaRankingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaRankingResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaRankingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.StartIndex != that1.StartIndex {
		return false
	}
	if len(this.RankingInfo) != len(that1.RankingInfo) {
		return false
	}
	for i := range this.RankingInfo {
		if !this.RankingInfo[i].Equal(that1.RankingInfo[i]) {
			return false
		}
	}
	return true
}
func (this *Arena_ArenaSelfRankingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaSelfRankingRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaSelfRankingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Arena_ArenaSelfRankingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaSelfRankingResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaSelfRankingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RankingId != that1.RankingId {
		return false
	}
	if this.FreeChallengeTimes != that1.FreeChallengeTimes {
		return false
	}
	if this.NextRefreshTime != that1.NextRefreshTime {
		return false
	}
	if this.SeasonOverTime != that1.SeasonOverTime {
		return false
	}
	if !this.Assembles.Equal(that1.Assembles) {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.NextSettlementTime != that1.NextSettlementTime {
		return false
	}
	if this.IsFirstChallenge != that1.IsFirstChallenge {
		return false
	}
	if this.LeftTicketPurchasesNum != that1.LeftTicketPurchasesNum {
		return false
	}
	return true
}
func (this *Arena_ArenaQueryFightHeroRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaQueryFightHeroRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaQueryFightHeroRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *Arena_ArenaQueryFightHeroResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaQueryFightHeroResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaQueryFightHeroResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Assembles.Equal(that1.Assembles) {
		return false
	}
	return true
}
func (this *Arena_ArenaGetChallengeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaGetChallengeRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaGetChallengeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Arena_ArenaGetChallengeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaGetChallengeResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaGetChallengeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.RankingInfo) != len(that1.RankingInfo) {
		return false
	}
	for i := range this.RankingInfo {
		if !this.RankingInfo[i].Equal(that1.RankingInfo[i]) {
			return false
		}
	}
	return true
}
func (this *Arena_ArenaChallengeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaChallengeRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaChallengeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.RankingId != that1.RankingId {
		return false
	}
	if this.SelfRankingId != that1.SelfRankingId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *Arena_ArenaChallengeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaChallengeResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaChallengeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *Arena_ArenaChallengeResultPrcRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaChallengeResultPrcRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaChallengeResultPrcRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.IsWin != that1.IsWin {
		return false
	}
	if this.PlayerId != that1.PlayerId {
		return false
	}
	return true
}
func (this *Arena_ArenaChallengeResultPrcResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaChallengeResultPrcResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaChallengeResultPrcResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.IsWin != that1.IsWin {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if !this.Rewards[i].Equal(that1.Rewards[i]) {
			return false
		}
	}
	if this.SelfOldRankingId != that1.SelfOldRankingId {
		return false
	}
	if this.SelfNewRankingId != that1.SelfNewRankingId {
		return false
	}
	if this.OtherOldRankingId != that1.OtherOldRankingId {
		return false
	}
	if this.OtherNewRankingId != that1.OtherNewRankingId {
		return false
	}
	if this.PlayerId != that1.PlayerId {
		return false
	}
	return true
}
func (this *Arena_ArenaBuyChallengeTicketRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaBuyChallengeTicketRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaBuyChallengeTicketRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	return true
}
func (this *Arena_ArenaBuyChallengeTicketResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaBuyChallengeTicketResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaBuyChallengeTicketResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	if this.LeftTicketPurchasesNum != that1.LeftTicketPurchasesNum {
		return false
	}
	return true
}
func (this *Arena_ArenaGetFightLogRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaGetFightLogRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaGetFightLogRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Arena_ArenaGetFightLogResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaGetFightLogResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaGetFightLogResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.FightLog) != len(that1.FightLog) {
		return false
	}
	for i := range this.FightLog {
		if !this.FightLog[i].Equal(that1.FightLog[i]) {
			return false
		}
	}
	return true
}
func (this *Arena_ArenaCheckRewardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaCheckRewardRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaCheckRewardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Arena_ArenaCheckRewardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaCheckRewardResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaCheckRewardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Arena_ArenaGetRewardTimeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaGetRewardTimeRequest)
	if !ok {
		that2, ok := that.(Arena_ArenaGetRewardTimeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Arena_ArenaGetRewardTimeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Arena_ArenaGetRewardTimeResponse)
	if !ok {
		that2, ok := that.(Arena_ArenaGetRewardTimeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Times) != len(that1.Times) {
		return false
	}
	for i := range this.Times {
		if !this.Times[i].Equal(that1.Times[i]) {
			return false
		}
	}
	return true
}
func (this *Virtual) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual)
	if !ok {
		that2, ok := that.(Virtual)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Virtual_CombatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_CombatRequest)
	if !ok {
		that2, ok := that.(Virtual_CombatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *Virtual_CombatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_CombatResponse)
	if !ok {
		that2, ok := that.(Virtual_CombatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (m *Arena) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaHeroSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaHeroSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaHeroSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hero1_OriginId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Hero1_OriginId))
		i--
		dAtA[i] = 0x18
	}
	if m.Hero0_OriginId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Hero0_OriginId))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaHeroSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaHeroSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaHeroSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Assembles != nil {
		{
			size, err := m.Assembles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaRankingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaRankingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaRankingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.StartIndex != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaRankingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaRankingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaRankingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankingInfo) > 0 {
		for iNdEx := len(m.RankingInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankingInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StartIndex != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaSelfRankingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaSelfRankingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaSelfRankingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaSelfRankingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaSelfRankingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaSelfRankingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeftTicketPurchasesNum != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.LeftTicketPurchasesNum))
		i--
		dAtA[i] = 0x50
	}
	if m.IsFirstChallenge {
		i--
		if m.IsFirstChallenge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.NextSettlementTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.NextSettlementTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Power != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x38
	}
	if m.Assembles != nil {
		{
			size, err := m.Assembles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SeasonOverTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SeasonOverTime))
		i--
		dAtA[i] = 0x28
	}
	if m.NextRefreshTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.NextRefreshTime))
		i--
		dAtA[i] = 0x20
	}
	if m.FreeChallengeTimes != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.FreeChallengeTimes))
		i--
		dAtA[i] = 0x18
	}
	if m.RankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RankingId))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaQueryFightHeroRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaQueryFightHeroRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaQueryFightHeroRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaQueryFightHeroResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaQueryFightHeroResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaQueryFightHeroResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Assembles != nil {
		{
			size, err := m.Assembles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaGetChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaGetChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaGetChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaGetChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaGetChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaGetChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankingInfo) > 0 {
		for iNdEx := len(m.RankingInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankingInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.SelfRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SelfRankingId))
		i--
		dAtA[i] = 0x20
	}
	if m.RankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RankingId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaChallengeResultPrcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaChallengeResultPrcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaChallengeResultPrcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsWin {
		i--
		if m.IsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaChallengeResultPrcResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaChallengeResultPrcResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaChallengeResultPrcResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0x42
	}
	if m.OtherNewRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.OtherNewRankingId))
		i--
		dAtA[i] = 0x38
	}
	if m.OtherOldRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.OtherOldRankingId))
		i--
		dAtA[i] = 0x30
	}
	if m.SelfNewRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SelfNewRankingId))
		i--
		dAtA[i] = 0x28
	}
	if m.SelfOldRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SelfOldRankingId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsWin {
		i--
		if m.IsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaBuyChallengeTicketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaBuyChallengeTicketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaBuyChallengeTicketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaBuyChallengeTicketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaBuyChallengeTicketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaBuyChallengeTicketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeftTicketPurchasesNum != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.LeftTicketPurchasesNum))
		i--
		dAtA[i] = 0x18
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaGetFightLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaGetFightLogRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaGetFightLogRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaGetFightLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaGetFightLogResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaGetFightLogResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FightLog) > 0 {
		for iNdEx := len(m.FightLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FightLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaCheckRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaCheckRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaCheckRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaCheckRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaCheckRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaCheckRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaGetRewardTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaGetRewardTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaGetRewardTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Arena_ArenaGetRewardTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena_ArenaGetRewardTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena_ArenaGetRewardTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Times) > 0 {
		for iNdEx := len(m.Times) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Times[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Virtual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Virtual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Virtual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Virtual_CombatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Virtual_CombatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Virtual_CombatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Virtual_CombatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Virtual_CombatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Virtual_CombatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintArena(dAtA []byte, offset int, v uint64) int {
	offset -= sovArena(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Arena) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Arena_ArenaHeroSetRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.Hero0_OriginId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero0_OriginId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Hero0_OriginId))
		needWriteComma = true
	}
	if m.Hero1_OriginId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero1_OriginId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Hero1_OriginId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaHeroSetResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("assembles")
	w.RawByte('"')
	w.RawByte(':')
	m.Assembles.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaRankingRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.StartIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartIndex))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaRankingResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.StartIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartIndex))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("ranking_info")
	w.RawByte('"')
	w.RawByte(':')
	if m.RankingInfo == nil {
		w.RawString("null")
	} else if len(m.RankingInfo) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RankingInfo {
			v.JsonBytes(w)
			if i != len(m.RankingInfo)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaSelfRankingRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaSelfRankingResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankingId))
		needWriteComma = true
	}
	if m.FreeChallengeTimes != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("free_challenge_times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeChallengeTimes))
		needWriteComma = true
	}
	if m.NextRefreshTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRefreshTime))
		needWriteComma = true
	}
	if m.SeasonOverTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season_over_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SeasonOverTime))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("assembles")
	w.RawByte('"')
	w.RawByte(':')
	m.Assembles.JsonBytes(w)
	needWriteComma = true
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.NextSettlementTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_settlement_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextSettlementTime))
		needWriteComma = true
	}
	if m.IsFirstChallenge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_first_challenge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsFirstChallenge)
		needWriteComma = true
	}
	if m.LeftTicketPurchasesNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("left_ticket_purchases_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LeftTicketPurchasesNum))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaQueryFightHeroRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaQueryFightHeroResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("assembles")
	w.RawByte('"')
	w.RawByte(':')
	m.Assembles.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaGetChallengeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaGetChallengeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("ranking_info")
	w.RawByte('"')
	w.RawByte(':')
	if m.RankingInfo == nil {
		w.RawString("null")
	} else if len(m.RankingInfo) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RankingInfo {
			v.JsonBytes(w)
			if i != len(m.RankingInfo)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaChallengeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.RankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankingId))
		needWriteComma = true
	}
	if m.SelfRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("self_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SelfRankingId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaChallengeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	m.Data.JsonBytes(w)
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaChallengeResultPrcRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.IsWin {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_win")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsWin)
		needWriteComma = true
	}
	if m.PlayerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("player_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.PlayerId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaChallengeResultPrcResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.IsWin {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_win")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsWin)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Rewards {
			v.JsonBytes(w)
			if i != len(m.Rewards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.SelfOldRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("self_old_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SelfOldRankingId))
		needWriteComma = true
	}
	if m.SelfNewRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("self_new_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SelfNewRankingId))
		needWriteComma = true
	}
	if m.OtherOldRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("other_old_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OtherOldRankingId))
		needWriteComma = true
	}
	if m.OtherNewRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("other_new_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OtherNewRankingId))
		needWriteComma = true
	}
	if m.PlayerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("player_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.PlayerId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaBuyChallengeTicketRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.Number != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("number")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Number))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaBuyChallengeTicketResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("item")
	w.RawByte('"')
	w.RawByte(':')
	m.Item.JsonBytes(w)
	needWriteComma = true
	if m.LeftTicketPurchasesNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("left_ticket_purchases_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LeftTicketPurchasesNum))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaGetFightLogRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaGetFightLogResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("fight_log")
	w.RawByte('"')
	w.RawByte(':')
	if m.FightLog == nil {
		w.RawString("null")
	} else if len(m.FightLog) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.FightLog {
			v.JsonBytes(w)
			if i != len(m.FightLog)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena_ArenaCheckRewardRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Arena_ArenaCheckRewardResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Arena_ArenaGetRewardTimeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Arena_ArenaGetRewardTimeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("times")
	w.RawByte('"')
	w.RawByte(':')
	if m.Times == nil {
		w.RawString("null")
	} else if len(m.Times) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Times {
			v.JsonBytes(w)
			if i != len(m.Times)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Virtual) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Virtual_CombatRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Virtual_CombatResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	m.Data.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Arena) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena) GoString() string {
	return m.String()
}

func (m *Arena_ArenaHeroSetRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaHeroSetRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaHeroSetRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaHeroSetResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaHeroSetResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaHeroSetResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaRankingRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaRankingRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaRankingRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaRankingResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaRankingResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaRankingResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaSelfRankingRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaSelfRankingRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaSelfRankingRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaSelfRankingResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaSelfRankingResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaSelfRankingResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaQueryFightHeroRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaQueryFightHeroRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaQueryFightHeroRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaQueryFightHeroResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaQueryFightHeroResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaQueryFightHeroResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaGetChallengeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaGetChallengeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaGetChallengeRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaGetChallengeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaGetChallengeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaGetChallengeResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaChallengeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaChallengeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaChallengeRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaChallengeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaChallengeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaChallengeResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaChallengeResultPrcRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaChallengeResultPrcRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaChallengeResultPrcRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaChallengeResultPrcResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaChallengeResultPrcResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaChallengeResultPrcResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaBuyChallengeTicketRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaBuyChallengeTicketRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaBuyChallengeTicketRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaBuyChallengeTicketResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaBuyChallengeTicketResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaBuyChallengeTicketResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaGetFightLogRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaGetFightLogRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaGetFightLogRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaGetFightLogResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaGetFightLogResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaGetFightLogResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaCheckRewardRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaCheckRewardRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaCheckRewardRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaCheckRewardResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaCheckRewardResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaCheckRewardResponse) GoString() string {
	return m.String()
}

func (m *Arena_ArenaGetRewardTimeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaGetRewardTimeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaGetRewardTimeRequest) GoString() string {
	return m.String()
}

func (m *Arena_ArenaGetRewardTimeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Arena_ArenaGetRewardTimeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Arena_ArenaGetRewardTimeResponse) GoString() string {
	return m.String()
}

func (m *Virtual) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Virtual) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Virtual) GoString() string {
	return m.String()
}

func (m *Virtual_CombatRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Virtual_CombatRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Virtual_CombatRequest) GoString() string {
	return m.String()
}

func (m *Virtual_CombatResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Virtual_CombatResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Virtual_CombatResponse) GoString() string {
	return m.String()
}

func (m *Arena) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Arena_ArenaHeroSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.Hero0_OriginId != 0 {
		n += 1 + sovArena(uint64(m.Hero0_OriginId))
	}
	if m.Hero1_OriginId != 0 {
		n += 1 + sovArena(uint64(m.Hero1_OriginId))
	}
	return n
}

func (m *Arena_ArenaHeroSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.Assembles != nil {
		l = m.Assembles.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *Arena_ArenaRankingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.StartIndex != 0 {
		n += 1 + sovArena(uint64(m.StartIndex))
	}
	if m.Count != 0 {
		n += 1 + sovArena(uint64(m.Count))
	}
	return n
}

func (m *Arena_ArenaRankingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.StartIndex != 0 {
		n += 1 + sovArena(uint64(m.StartIndex))
	}
	if len(m.RankingInfo) > 0 {
		for _, e := range m.RankingInfo {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *Arena_ArenaSelfRankingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	return n
}

func (m *Arena_ArenaSelfRankingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.RankingId != 0 {
		n += 1 + sovArena(uint64(m.RankingId))
	}
	if m.FreeChallengeTimes != 0 {
		n += 1 + sovArena(uint64(m.FreeChallengeTimes))
	}
	if m.NextRefreshTime != 0 {
		n += 1 + sovArena(uint64(m.NextRefreshTime))
	}
	if m.SeasonOverTime != 0 {
		n += 1 + sovArena(uint64(m.SeasonOverTime))
	}
	if m.Assembles != nil {
		l = m.Assembles.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovArena(uint64(m.Power))
	}
	if m.NextSettlementTime != 0 {
		n += 1 + sovArena(uint64(m.NextSettlementTime))
	}
	if m.IsFirstChallenge {
		n += 2
	}
	if m.LeftTicketPurchasesNum != 0 {
		n += 1 + sovArena(uint64(m.LeftTicketPurchasesNum))
	}
	return n
}

func (m *Arena_ArenaQueryFightHeroRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *Arena_ArenaQueryFightHeroResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.Assembles != nil {
		l = m.Assembles.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *Arena_ArenaGetChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	return n
}

func (m *Arena_ArenaGetChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if len(m.RankingInfo) > 0 {
		for _, e := range m.RankingInfo {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *Arena_ArenaChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.RankingId != 0 {
		n += 1 + sovArena(uint64(m.RankingId))
	}
	if m.SelfRankingId != 0 {
		n += 1 + sovArena(uint64(m.SelfRankingId))
	}
	if m.BattleId != 0 {
		n += 2 + sovArena(uint64(m.BattleId))
	}
	return n
}

func (m *Arena_ArenaChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	if m.BattleId != 0 {
		n += 2 + sovArena(uint64(m.BattleId))
	}
	return n
}

func (m *Arena_ArenaChallengeResultPrcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.IsWin {
		n += 2
	}
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *Arena_ArenaChallengeResultPrcResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.IsWin {
		n += 2
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	if m.SelfOldRankingId != 0 {
		n += 1 + sovArena(uint64(m.SelfOldRankingId))
	}
	if m.SelfNewRankingId != 0 {
		n += 1 + sovArena(uint64(m.SelfNewRankingId))
	}
	if m.OtherOldRankingId != 0 {
		n += 1 + sovArena(uint64(m.OtherOldRankingId))
	}
	if m.OtherNewRankingId != 0 {
		n += 1 + sovArena(uint64(m.OtherNewRankingId))
	}
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *Arena_ArenaBuyChallengeTicketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.Number != 0 {
		n += 1 + sovArena(uint64(m.Number))
	}
	return n
}

func (m *Arena_ArenaBuyChallengeTicketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	if m.LeftTicketPurchasesNum != 0 {
		n += 1 + sovArena(uint64(m.LeftTicketPurchasesNum))
	}
	return n
}

func (m *Arena_ArenaGetFightLogRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	return n
}

func (m *Arena_ArenaGetFightLogResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if len(m.FightLog) > 0 {
		for _, e := range m.FightLog {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *Arena_ArenaCheckRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Arena_ArenaCheckRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Arena_ArenaGetRewardTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Arena_ArenaGetRewardTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Times) > 0 {
		for _, e := range m.Times {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *Virtual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Virtual_CombatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *Virtual_CombatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func sovArena(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArena(x uint64) (n int) {
	return sovArena(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Arena) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arena: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arena: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaHeroSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaHeroSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaHeroSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero0_OriginId", wireType)
			}
			m.Hero0_OriginId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hero0_OriginId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero1_OriginId", wireType)
			}
			m.Hero1_OriginId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hero1_OriginId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaHeroSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaHeroSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaHeroSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assembles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assembles == nil {
				m.Assembles = &models.Assemble{}
			}
			if err := m.Assembles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaRankingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRankingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRankingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaRankingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRankingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRankingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingInfo = append(m.RankingInfo, &models.ArenaInfo{})
			if err := m.RankingInfo[len(m.RankingInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaSelfRankingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaSelfRankingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaSelfRankingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaSelfRankingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaSelfRankingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaSelfRankingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingId", wireType)
			}
			m.RankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeChallengeTimes", wireType)
			}
			m.FreeChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeChallengeTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonOverTime", wireType)
			}
			m.SeasonOverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonOverTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assembles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assembles == nil {
				m.Assembles = &models.Assemble{}
			}
			if err := m.Assembles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSettlementTime", wireType)
			}
			m.NextSettlementTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSettlementTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstChallenge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirstChallenge = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTicketPurchasesNum", wireType)
			}
			m.LeftTicketPurchasesNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTicketPurchasesNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaQueryFightHeroRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaQueryFightHeroRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaQueryFightHeroRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaQueryFightHeroResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaQueryFightHeroResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaQueryFightHeroResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assembles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assembles == nil {
				m.Assembles = &models.Assemble{}
			}
			if err := m.Assembles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaGetChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaGetChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaGetChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaGetChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaGetChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaGetChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingInfo = append(m.RankingInfo, &models.ArenaInfo{})
			if err := m.RankingInfo[len(m.RankingInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingId", wireType)
			}
			m.RankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfRankingId", wireType)
			}
			m.SelfRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfRankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &models.SingleBattleParam{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaChallengeResultPrcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaChallengeResultPrcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaChallengeResultPrcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWin = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaChallengeResultPrcResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaChallengeResultPrcResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaChallengeResultPrcResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWin = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &models.Item{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfOldRankingId", wireType)
			}
			m.SelfOldRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfOldRankingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfNewRankingId", wireType)
			}
			m.SelfNewRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfNewRankingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherOldRankingId", wireType)
			}
			m.OtherOldRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherOldRankingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherNewRankingId", wireType)
			}
			m.OtherNewRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherNewRankingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaBuyChallengeTicketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaBuyChallengeTicketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaBuyChallengeTicketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaBuyChallengeTicketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaBuyChallengeTicketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaBuyChallengeTicketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &models.Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTicketPurchasesNum", wireType)
			}
			m.LeftTicketPurchasesNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTicketPurchasesNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaGetFightLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaGetFightLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaGetFightLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaGetFightLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaGetFightLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaGetFightLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FightLog = append(m.FightLog, &models.ArenaFightLog{})
			if err := m.FightLog[len(m.FightLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaCheckRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaCheckRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaCheckRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaCheckRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaCheckRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaCheckRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaGetRewardTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaGetRewardTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaGetRewardTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena_ArenaGetRewardTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaGetRewardTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaGetRewardTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Times = append(m.Times, &models.ArenaRewardTime{})
			if err := m.Times[len(m.Times)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Virtual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Virtual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Virtual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Virtual_CombatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Virtual_CombatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &models.SingleBattleParam{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArena(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArena
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArena
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArena
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArena
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArena        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArena          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArena = fmt.Errorf("proto: unexpected end of group")
)
