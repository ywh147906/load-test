// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/racing_rank.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RacingRankErrorCode int32

const (
	RacingRankErrorCode_ErrRacingRankDoNotRepeatEnroll    RacingRankErrorCode = 0
	RacingRankErrorCode_ErrRacingRankHasOver              RacingRankErrorCode = 1
	RacingRankErrorCode_ErrRacingRankDoNotRepeatGetReward RacingRankErrorCode = 2
	RacingRankErrorCode_ErrRacingRankDidNotReachRanking   RacingRankErrorCode = 3
)

var RacingRankErrorCode_name = map[int32]string{
	0: "ErrRacingRankDoNotRepeatEnroll",
	1: "ErrRacingRankHasOver",
	2: "ErrRacingRankDoNotRepeatGetReward",
	3: "ErrRacingRankDidNotReachRanking",
}

var RacingRankErrorCode_value = map[string]int32{
	"ErrRacingRankDoNotRepeatEnroll":    0,
	"ErrRacingRankHasOver":              1,
	"ErrRacingRankDoNotRepeatGetReward": 2,
	"ErrRacingRankDidNotReachRanking":   3,
}

func (RacingRankErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_511cf85a5e655771, []int{0}
}

type RacingRank struct {
}

func (m *RacingRank) Reset()      { *m = RacingRank{} }
func (*RacingRank) ProtoMessage() {}
func (*RacingRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_511cf85a5e655771, []int{0}
}
func (m *RacingRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRank.Merge(m, src)
}
func (m *RacingRank) XXX_Size() int {
	return m.Size()
}
func (m *RacingRank) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRank.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRank proto.InternalMessageInfo

func (*RacingRank) XXX_MessageName() string {
	return "service.RacingRank"
}

// 获取竞速赛信息
type RacingRank_GetRacingRankInfoRequest struct {
}

func (m *RacingRank_GetRacingRankInfoRequest) Reset()      { *m = RacingRank_GetRacingRankInfoRequest{} }
func (*RacingRank_GetRacingRankInfoRequest) ProtoMessage() {}
func (*RacingRank_GetRacingRankInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_511cf85a5e655771, []int{0, 0}
}
func (m *RacingRank_GetRacingRankInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRank_GetRacingRankInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRank_GetRacingRankInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRank_GetRacingRankInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRank_GetRacingRankInfoRequest.Merge(m, src)
}
func (m *RacingRank_GetRacingRankInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *RacingRank_GetRacingRankInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRank_GetRacingRankInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRank_GetRacingRankInfoRequest proto.InternalMessageInfo

func (*RacingRank_GetRacingRankInfoRequest) XXX_MessageName() string {
	return "service.RacingRank.GetRacingRankInfoRequest"
}

type RacingRank_GetRacingRankInfoResponse struct {
	Enrolled     bool               `protobuf:"varint,1,opt,name=enrolled,proto3" json:"enrolled,omitempty"`
	Season       int64              `protobuf:"varint,2,opt,name=season,proto3" json:"season,omitempty"`
	List         []*models.RankItem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	HighestRank  int64              `protobuf:"varint,4,opt,name=highest_rank,json=highestRank,proto3" json:"highest_rank,omitempty"`
	RewardedRank []int64            `protobuf:"varint,5,rep,packed,name=rewarded_rank,json=rewardedRank,proto3" json:"rewarded_rank,omitempty"`
	// 毫秒
	EndTime int64 `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *RacingRank_GetRacingRankInfoResponse) Reset()      { *m = RacingRank_GetRacingRankInfoResponse{} }
func (*RacingRank_GetRacingRankInfoResponse) ProtoMessage() {}
func (*RacingRank_GetRacingRankInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_511cf85a5e655771, []int{0, 1}
}
func (m *RacingRank_GetRacingRankInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRank_GetRacingRankInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRank_GetRacingRankInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRank_GetRacingRankInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRank_GetRacingRankInfoResponse.Merge(m, src)
}
func (m *RacingRank_GetRacingRankInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *RacingRank_GetRacingRankInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRank_GetRacingRankInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRank_GetRacingRankInfoResponse proto.InternalMessageInfo

func (m *RacingRank_GetRacingRankInfoResponse) GetEnrolled() bool {
	if m != nil {
		return m.Enrolled
	}
	return false
}

func (m *RacingRank_GetRacingRankInfoResponse) GetSeason() int64 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *RacingRank_GetRacingRankInfoResponse) GetList() []*models.RankItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *RacingRank_GetRacingRankInfoResponse) GetHighestRank() int64 {
	if m != nil {
		return m.HighestRank
	}
	return 0
}

func (m *RacingRank_GetRacingRankInfoResponse) GetRewardedRank() []int64 {
	if m != nil {
		return m.RewardedRank
	}
	return nil
}

func (m *RacingRank_GetRacingRankInfoResponse) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (*RacingRank_GetRacingRankInfoResponse) XXX_MessageName() string {
	return "service.RacingRank.GetRacingRankInfoResponse"
}

// 报名参加
type RacingRank_EnrollRacingRankRequest struct {
}

func (m *RacingRank_EnrollRacingRankRequest) Reset()      { *m = RacingRank_EnrollRacingRankRequest{} }
func (*RacingRank_EnrollRacingRankRequest) ProtoMessage() {}
func (*RacingRank_EnrollRacingRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_511cf85a5e655771, []int{0, 2}
}
func (m *RacingRank_EnrollRacingRankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRank_EnrollRacingRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRank_EnrollRacingRankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRank_EnrollRacingRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRank_EnrollRacingRankRequest.Merge(m, src)
}
func (m *RacingRank_EnrollRacingRankRequest) XXX_Size() int {
	return m.Size()
}
func (m *RacingRank_EnrollRacingRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRank_EnrollRacingRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRank_EnrollRacingRankRequest proto.InternalMessageInfo

func (*RacingRank_EnrollRacingRankRequest) XXX_MessageName() string {
	return "service.RacingRank.EnrollRacingRankRequest"
}

type RacingRank_EnrollRacingRankResponse struct {
	Season      int64            `protobuf:"varint,1,opt,name=season,proto3" json:"season,omitempty"`
	Self        *models.RankItem `protobuf:"bytes,2,opt,name=self,proto3" json:"self,omitempty"`
	HighestRank int64            `protobuf:"varint,3,opt,name=highest_rank,json=highestRank,proto3" json:"highest_rank,omitempty"`
	// 毫秒
	EndTime int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *RacingRank_EnrollRacingRankResponse) Reset()      { *m = RacingRank_EnrollRacingRankResponse{} }
func (*RacingRank_EnrollRacingRankResponse) ProtoMessage() {}
func (*RacingRank_EnrollRacingRankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_511cf85a5e655771, []int{0, 3}
}
func (m *RacingRank_EnrollRacingRankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRank_EnrollRacingRankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRank_EnrollRacingRankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRank_EnrollRacingRankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRank_EnrollRacingRankResponse.Merge(m, src)
}
func (m *RacingRank_EnrollRacingRankResponse) XXX_Size() int {
	return m.Size()
}
func (m *RacingRank_EnrollRacingRankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRank_EnrollRacingRankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRank_EnrollRacingRankResponse proto.InternalMessageInfo

func (m *RacingRank_EnrollRacingRankResponse) GetSeason() int64 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *RacingRank_EnrollRacingRankResponse) GetSelf() *models.RankItem {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *RacingRank_EnrollRacingRankResponse) GetHighestRank() int64 {
	if m != nil {
		return m.HighestRank
	}
	return 0
}

func (m *RacingRank_EnrollRacingRankResponse) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (*RacingRank_EnrollRacingRankResponse) XXX_MessageName() string {
	return "service.RacingRank.EnrollRacingRankResponse"
}

// 领取排名奖励
type RacingRank_GetRacingRankRewardRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RacingRank_GetRacingRankRewardRequest) Reset()      { *m = RacingRank_GetRacingRankRewardRequest{} }
func (*RacingRank_GetRacingRankRewardRequest) ProtoMessage() {}
func (*RacingRank_GetRacingRankRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_511cf85a5e655771, []int{0, 4}
}
func (m *RacingRank_GetRacingRankRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRank_GetRacingRankRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRank_GetRacingRankRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRank_GetRacingRankRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRank_GetRacingRankRewardRequest.Merge(m, src)
}
func (m *RacingRank_GetRacingRankRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *RacingRank_GetRacingRankRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRank_GetRacingRankRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRank_GetRacingRankRewardRequest proto.InternalMessageInfo

func (m *RacingRank_GetRacingRankRewardRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (*RacingRank_GetRacingRankRewardRequest) XXX_MessageName() string {
	return "service.RacingRank.GetRacingRankRewardRequest"
}

type RacingRank_GetRacingRankRewardResponse struct {
	Rewards      map[int64]int64 `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RewardedRank []int64         `protobuf:"varint,2,rep,packed,name=rewarded_rank,json=rewardedRank,proto3" json:"rewarded_rank,omitempty"`
}

func (m *RacingRank_GetRacingRankRewardResponse) Reset() {
	*m = RacingRank_GetRacingRankRewardResponse{}
}
func (*RacingRank_GetRacingRankRewardResponse) ProtoMessage() {}
func (*RacingRank_GetRacingRankRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_511cf85a5e655771, []int{0, 5}
}
func (m *RacingRank_GetRacingRankRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRank_GetRacingRankRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRank_GetRacingRankRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRank_GetRacingRankRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRank_GetRacingRankRewardResponse.Merge(m, src)
}
func (m *RacingRank_GetRacingRankRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *RacingRank_GetRacingRankRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRank_GetRacingRankRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRank_GetRacingRankRewardResponse proto.InternalMessageInfo

func (m *RacingRank_GetRacingRankRewardResponse) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *RacingRank_GetRacingRankRewardResponse) GetRewardedRank() []int64 {
	if m != nil {
		return m.RewardedRank
	}
	return nil
}

func (*RacingRank_GetRacingRankRewardResponse) XXX_MessageName() string {
	return "service.RacingRank.GetRacingRankRewardResponse"
}

//----------------------push----------------------//
// 竞速赛匹配完成
type RacingRank_RacingRankMatchSuccessPush struct {
}

func (m *RacingRank_RacingRankMatchSuccessPush) Reset()      { *m = RacingRank_RacingRankMatchSuccessPush{} }
func (*RacingRank_RacingRankMatchSuccessPush) ProtoMessage() {}
func (*RacingRank_RacingRankMatchSuccessPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_511cf85a5e655771, []int{0, 6}
}
func (m *RacingRank_RacingRankMatchSuccessPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRank_RacingRankMatchSuccessPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRank_RacingRankMatchSuccessPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRank_RacingRankMatchSuccessPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRank_RacingRankMatchSuccessPush.Merge(m, src)
}
func (m *RacingRank_RacingRankMatchSuccessPush) XXX_Size() int {
	return m.Size()
}
func (m *RacingRank_RacingRankMatchSuccessPush) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRank_RacingRankMatchSuccessPush.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRank_RacingRankMatchSuccessPush proto.InternalMessageInfo

func (*RacingRank_RacingRankMatchSuccessPush) XXX_MessageName() string {
	return "service.RacingRank.RacingRankMatchSuccessPush"
}
func init() {
	proto.RegisterEnum("service.RacingRankErrorCode", RacingRankErrorCode_name, RacingRankErrorCode_value)
	proto.RegisterType((*RacingRank)(nil), "service.RacingRank")
	proto.RegisterType((*RacingRank_GetRacingRankInfoRequest)(nil), "service.RacingRank.GetRacingRankInfoRequest")
	proto.RegisterType((*RacingRank_GetRacingRankInfoResponse)(nil), "service.RacingRank.GetRacingRankInfoResponse")
	proto.RegisterType((*RacingRank_EnrollRacingRankRequest)(nil), "service.RacingRank.EnrollRacingRankRequest")
	proto.RegisterType((*RacingRank_EnrollRacingRankResponse)(nil), "service.RacingRank.EnrollRacingRankResponse")
	proto.RegisterType((*RacingRank_GetRacingRankRewardRequest)(nil), "service.RacingRank.GetRacingRankRewardRequest")
	proto.RegisterType((*RacingRank_GetRacingRankRewardResponse)(nil), "service.RacingRank.GetRacingRankRewardResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.RacingRank.GetRacingRankRewardResponse.RewardsEntry")
	proto.RegisterType((*RacingRank_RacingRankMatchSuccessPush)(nil), "service.RacingRank.RacingRankMatchSuccessPush")
}

func init() { proto.RegisterFile("proto/service/racing_rank.proto", fileDescriptor_511cf85a5e655771) }

var fileDescriptor_511cf85a5e655771 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4b, 0x6f, 0xd3, 0x4c,
	0x14, 0xcd, 0xc4, 0x7d, 0x69, 0xda, 0xef, 0xfb, 0xf2, 0x0d, 0x7d, 0x4c, 0xa7, 0xc8, 0x4d, 0x81,
	0x45, 0x84, 0x20, 0x91, 0x60, 0x83, 0xaa, 0x2e, 0x10, 0x10, 0x01, 0x0b, 0x0a, 0x32, 0x88, 0x05,
	0x9b, 0xca, 0xb5, 0x6f, 0x13, 0xab, 0x89, 0x5d, 0x66, 0x9c, 0xa2, 0xfe, 0x01, 0x8a, 0x02, 0x81,
	0x0a, 0xa4, 0x2e, 0x78, 0x4a, 0x88, 0x4a, 0x08, 0x24, 0x5e, 0x52, 0xd4, 0x05, 0x52, 0xd9, 0x76,
	0xd9, 0x15, 0xea, 0x82, 0x05, 0x24, 0x72, 0x9a, 0xee, 0xf8, 0x09, 0xc8, 0x63, 0x17, 0x37, 0x4d,
	0x61, 0xe7, 0x7b, 0xcf, 0xb9, 0x67, 0xce, 0x99, 0x3b, 0x32, 0x1e, 0x9d, 0xe3, 0x8e, 0xeb, 0x64,
	0x04, 0xf0, 0x79, 0xcb, 0x80, 0x0c, 0xd7, 0x0d, 0xcb, 0xce, 0x4d, 0x71, 0xdd, 0x9e, 0x4d, 0x4b,
	0x84, 0x74, 0x87, 0x10, 0x1b, 0x0a, 0x98, 0x45, 0xc7, 0x84, 0x82, 0xc8, 0x4c, 0xeb, 0x02, 0x02,
	0xc6, 0x1e, 0x20, 0x1a, 0x65, 0xb4, 0x05, 0x00, 0xbb, 0x54, 0x14, 0x21, 0x32, 0xb8, 0x47, 0x2b,
	0x17, 0xf4, 0x0f, 0x7d, 0xeb, 0xc4, 0x58, 0x93, 0x16, 0x34, 0xdd, 0x9e, 0x65, 0x0c, 0xd3, 0xf3,
	0xe0, 0x46, 0x8d, 0x8b, 0xf6, 0x8c, 0xa3, 0xc1, 0xcd, 0x12, 0x08, 0x97, 0x6d, 0x22, 0x3c, 0xbc,
	0x0f, 0x28, 0xe6, 0x1c, 0x5b, 0x00, 0x61, 0xb8, 0x07, 0x6c, 0xee, 0x14, 0x0a, 0x60, 0x52, 0x94,
	0x44, 0xa9, 0x1e, 0xed, 0x77, 0x4d, 0x06, 0x71, 0x97, 0x00, 0x5d, 0x38, 0x36, 0x8d, 0x27, 0x51,
	0x4a, 0xd1, 0xc2, 0x8a, 0x1c, 0xc1, 0x1d, 0x05, 0x4b, 0xb8, 0x54, 0x49, 0x2a, 0xa9, 0xde, 0x13,
	0x89, 0x74, 0xe0, 0x2e, 0x2d, 0xb5, 0x5d, 0x28, 0x6a, 0x12, 0x25, 0x63, 0xb8, 0x2f, 0x6f, 0xe5,
	0xf2, 0x20, 0x5c, 0x79, 0x4b, 0xb4, 0x43, 0x6a, 0xf4, 0x86, 0x3d, 0x9f, 0x4c, 0x0e, 0xe3, 0x7f,
	0x38, 0xdc, 0xd2, 0xb9, 0x09, 0x66, 0xc0, 0xe9, 0x4c, 0x2a, 0x29, 0x45, 0xeb, 0xdb, 0x69, 0x4a,
	0xd2, 0xb0, 0xef, 0xd0, 0x9c, 0x72, 0xad, 0x22, 0xd0, 0x2e, 0xa9, 0xd1, 0x0d, 0xb6, 0x79, 0xcd,
	0x2a, 0x02, 0x1b, 0xc6, 0x43, 0x59, 0x69, 0x36, 0x0a, 0xb7, 0x93, 0x7a, 0x19, 0x61, 0xda, 0x8e,
	0x85, 0xa1, 0xa3, 0x60, 0x68, 0x6f, 0x30, 0x01, 0x85, 0x19, 0x19, 0x77, 0xdf, 0x60, 0x3e, 0xda,
	0x16, 0x4c, 0x69, 0x0f, 0xb6, 0xdb, 0x73, 0x47, 0xab, 0xe7, 0x63, 0x98, 0xb5, 0x6c, 0x43, 0x93,
	0x59, 0x43, 0xdb, 0xe4, 0x5f, 0x1c, 0xb7, 0xcc, 0xd0, 0x55, 0xdc, 0x32, 0xd9, 0x57, 0x84, 0x47,
	0xf6, 0xa5, 0x87, 0x49, 0xae, 0xe3, 0xee, 0xe0, 0xb2, 0x04, 0x45, 0x72, 0x1b, 0x13, 0xe9, 0xf0,
	0x19, 0xa6, 0xa3, 0x99, 0xf4, 0x5f, 0x14, 0xd2, 0x41, 0x29, 0xb2, 0xb6, 0xcb, 0x17, 0xb4, 0x1d,
	0xb1, 0xf6, 0xcd, 0xc4, 0xdb, 0x37, 0xc3, 0xc6, 0x71, 0xdf, 0xee, 0x69, 0x92, 0xc0, 0xca, 0x2c,
	0x2c, 0x84, 0xee, 0xfd, 0x4f, 0xd2, 0x8f, 0x3b, 0xe7, 0xf5, 0x42, 0x09, 0xc2, 0x07, 0x14, 0x14,
	0xe3, 0xf1, 0x53, 0x88, 0x1d, 0xc4, 0x2c, 0xb2, 0x74, 0x49, 0x77, 0x8d, 0xfc, 0xd5, 0x92, 0x61,
	0x80, 0x10, 0x57, 0x4a, 0x22, 0x7f, 0xb4, 0x12, 0xc7, 0x07, 0x22, 0x38, 0xcb, 0xb9, 0xc3, 0xcf,
	0x3a, 0x26, 0x90, 0x09, 0xac, 0x66, 0x39, 0x8f, 0x90, 0x73, 0xce, 0xa4, 0xe3, 0x6a, 0x30, 0x07,
	0xba, 0x1b, 0x2c, 0x3b, 0x11, 0x63, 0xb4, 0x5c, 0xa5, 0xfd, 0x84, 0x34, 0xdf, 0xaf, 0x7a, 0x77,
	0xbf, 0x6c, 0x2f, 0x56, 0xbc, 0x57, 0x95, 0x46, 0x79, 0xc5, 0x5b, 0xaa, 0x90, 0x0c, 0xee, 0x6f,
	0x99, 0xbe, 0xa0, 0x8b, 0xcb, 0xf3, 0xc0, 0x13, 0x88, 0x0d, 0x94, 0xab, 0xf4, 0x7f, 0xf2, 0xdf,
	0xd6, 0xdb, 0xe7, 0xcd, 0xea, 0x13, 0x6f, 0xf5, 0xd3, 0xd6, 0xe7, 0x47, 0x8d, 0x67, 0x2f, 0x48,
	0x16, 0x8f, 0xfd, 0xe9, 0x38, 0xff, 0x4a, 0x65, 0xf6, 0x44, 0x9c, 0xa9, 0xe5, 0x2a, 0x65, 0x84,
	0xee, 0x3e, 0x71, 0xfb, 0xe5, 0x6d, 0xef, 0xc1, 0xb2, 0xb7, 0xb2, 0xec, 0x95, 0x3f, 0x92, 0xd3,
	0x78, 0xb4, 0x55, 0xc6, 0x32, 0xa5, 0x8e, 0x6e, 0xe4, 0xfd, 0xd2, 0xb2, 0x73, 0x09, 0x85, 0x8d,
	0x94, 0xab, 0x74, 0x88, 0x0c, 0x34, 0x9e, 0xbe, 0x69, 0xae, 0xad, 0x79, 0x77, 0x3e, 0x34, 0xee,
	0x2d, 0x7a, 0xef, 0x1e, 0x37, 0xee, 0x3f, 0xf4, 0x96, 0x2a, 0x67, 0x26, 0x37, 0x7f, 0xa8, 0xb1,
	0xd7, 0x35, 0x15, 0xad, 0xd7, 0x54, 0xb4, 0x51, 0x53, 0xd1, 0xf7, 0x9a, 0x8a, 0x9a, 0x35, 0x35,
	0xf6, 0xb3, 0xa6, 0xa2, 0xa5, 0xba, 0x1a, 0x5b, 0xaf, 0xab, 0x68, 0xa3, 0xae, 0xc6, 0x36, 0xeb,
	0x6a, 0xec, 0x46, 0xd2, 0x70, 0x2c, 0xfb, 0xb8, 0xff, 0x0e, 0x80, 0x67, 0x0c, 0xa7, 0x58, 0x74,
	0xec, 0x4c, 0xcb, 0xdf, 0x6b, 0xba, 0x4b, 0x96, 0x27, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xbf,
	0x30, 0x33, 0x23, 0xd5, 0x04, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRank.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRank_GetRacingRankInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRank_GetRacingRankInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRank_EnrollRacingRankRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRank_EnrollRacingRankResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRank_GetRacingRankRewardRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRank_GetRacingRankRewardResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRank_RacingRankMatchSuccessPush.Get().(proto.Message)
	})
}

var poolRacingRank = &sync.Pool{New: func() interface{} { return &RacingRank{} }}

func (m *RacingRank) ReleasePool() { m.Reset(); poolRacingRank.Put(m); m = nil }

var poolRacingRank_GetRacingRankInfoRequest = &sync.Pool{New: func() interface{} { return &RacingRank_GetRacingRankInfoRequest{} }}

func (m *RacingRank_GetRacingRankInfoRequest) ReleasePool() {
	m.Reset()
	poolRacingRank_GetRacingRankInfoRequest.Put(m)
	m = nil
}

var poolRacingRank_GetRacingRankInfoResponse = &sync.Pool{New: func() interface{} { return &RacingRank_GetRacingRankInfoResponse{} }}

func (m *RacingRank_GetRacingRankInfoResponse) ReleasePool() {
	m.Reset()
	poolRacingRank_GetRacingRankInfoResponse.Put(m)
	m = nil
}

var poolRacingRank_EnrollRacingRankRequest = &sync.Pool{New: func() interface{} { return &RacingRank_EnrollRacingRankRequest{} }}

func (m *RacingRank_EnrollRacingRankRequest) ReleasePool() {
	m.Reset()
	poolRacingRank_EnrollRacingRankRequest.Put(m)
	m = nil
}

var poolRacingRank_EnrollRacingRankResponse = &sync.Pool{New: func() interface{} { return &RacingRank_EnrollRacingRankResponse{} }}

func (m *RacingRank_EnrollRacingRankResponse) ReleasePool() {
	m.Reset()
	poolRacingRank_EnrollRacingRankResponse.Put(m)
	m = nil
}

var poolRacingRank_GetRacingRankRewardRequest = &sync.Pool{New: func() interface{} { return &RacingRank_GetRacingRankRewardRequest{} }}

func (m *RacingRank_GetRacingRankRewardRequest) ReleasePool() {
	m.Reset()
	poolRacingRank_GetRacingRankRewardRequest.Put(m)
	m = nil
}

var poolRacingRank_GetRacingRankRewardResponse = &sync.Pool{New: func() interface{} { return &RacingRank_GetRacingRankRewardResponse{} }}

func (m *RacingRank_GetRacingRankRewardResponse) ReleasePool() {
	m.Reset()
	poolRacingRank_GetRacingRankRewardResponse.Put(m)
	m = nil
}

var poolRacingRank_RacingRankMatchSuccessPush = &sync.Pool{New: func() interface{} { return &RacingRank_RacingRankMatchSuccessPush{} }}

func (m *RacingRank_RacingRankMatchSuccessPush) ReleasePool() {
	m.Reset()
	poolRacingRank_RacingRankMatchSuccessPush.Put(m)
	m = nil
}
func (x RacingRankErrorCode) String() string {
	s, ok := RacingRankErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RacingRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRank)
	if !ok {
		that2, ok := that.(RacingRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RacingRank_GetRacingRankInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRank_GetRacingRankInfoRequest)
	if !ok {
		that2, ok := that.(RacingRank_GetRacingRankInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RacingRank_GetRacingRankInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRank_GetRacingRankInfoResponse)
	if !ok {
		that2, ok := that.(RacingRank_GetRacingRankInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enrolled != that1.Enrolled {
		return false
	}
	if this.Season != that1.Season {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.HighestRank != that1.HighestRank {
		return false
	}
	if len(this.RewardedRank) != len(that1.RewardedRank) {
		return false
	}
	for i := range this.RewardedRank {
		if this.RewardedRank[i] != that1.RewardedRank[i] {
			return false
		}
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	return true
}
func (this *RacingRank_EnrollRacingRankRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRank_EnrollRacingRankRequest)
	if !ok {
		that2, ok := that.(RacingRank_EnrollRacingRankRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RacingRank_EnrollRacingRankResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRank_EnrollRacingRankResponse)
	if !ok {
		that2, ok := that.(RacingRank_EnrollRacingRankResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Season != that1.Season {
		return false
	}
	if !this.Self.Equal(that1.Self) {
		return false
	}
	if this.HighestRank != that1.HighestRank {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	return true
}
func (this *RacingRank_GetRacingRankRewardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRank_GetRacingRankRewardRequest)
	if !ok {
		that2, ok := that.(RacingRank_GetRacingRankRewardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RacingRank_GetRacingRankRewardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRank_GetRacingRankRewardResponse)
	if !ok {
		that2, ok := that.(RacingRank_GetRacingRankRewardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	if len(this.RewardedRank) != len(that1.RewardedRank) {
		return false
	}
	for i := range this.RewardedRank {
		if this.RewardedRank[i] != that1.RewardedRank[i] {
			return false
		}
	}
	return true
}
func (this *RacingRank_RacingRankMatchSuccessPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRank_RacingRankMatchSuccessPush)
	if !ok {
		that2, ok := that.(RacingRank_RacingRankMatchSuccessPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *RacingRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RacingRank_GetRacingRankInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRank_GetRacingRankInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRank_GetRacingRankInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RacingRank_GetRacingRankInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRank_GetRacingRankInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRank_GetRacingRankInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RewardedRank) > 0 {
		dAtA2 := make([]byte, len(m.RewardedRank)*10)
		var j1 int
		for _, num1 := range m.RewardedRank {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRacingRank(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if m.HighestRank != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.HighestRank))
		i--
		dAtA[i] = 0x20
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRacingRank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Season != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.Season))
		i--
		dAtA[i] = 0x10
	}
	if m.Enrolled {
		i--
		if m.Enrolled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RacingRank_EnrollRacingRankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRank_EnrollRacingRankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRank_EnrollRacingRankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RacingRank_EnrollRacingRankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRank_EnrollRacingRankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRank_EnrollRacingRankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.HighestRank != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.HighestRank))
		i--
		dAtA[i] = 0x18
	}
	if m.Self != nil {
		{
			size, err := m.Self.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRacingRank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Season != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.Season))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RacingRank_GetRacingRankRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRank_GetRacingRankRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRank_GetRacingRankRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RacingRank_GetRacingRankRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRank_GetRacingRankRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRank_GetRacingRankRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardedRank) > 0 {
		dAtA5 := make([]byte, len(m.RewardedRank)*10)
		var j4 int
		for _, num1 := range m.RewardedRank {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintRacingRank(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintRacingRank(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintRacingRank(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRacingRank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RacingRank_RacingRankMatchSuccessPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRank_RacingRankMatchSuccessPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRank_RacingRankMatchSuccessPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRacingRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovRacingRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RacingRank) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RacingRank_GetRacingRankInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RacingRank_GetRacingRankInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Enrolled {
		w.RawByte('"')
		w.RawString("enrolled")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Enrolled)
		needWriteComma = true
	}
	if m.Season != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Season))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("list")
	w.RawByte('"')
	w.RawByte(':')
	if m.List == nil {
		w.RawString("null")
	} else if len(m.List) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.List {
			v.JsonBytes(w)
			if i != len(m.List)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.HighestRank != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("highest_rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HighestRank))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewarded_rank")
	w.RawByte('"')
	w.RawByte(':')
	if m.RewardedRank == nil {
		w.RawString("null")
	} else if len(m.RewardedRank) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RewardedRank {
			w.Int64(int64(v))
			if i != len(m.RewardedRank)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.EndTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RacingRank_EnrollRacingRankRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RacingRank_EnrollRacingRankResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Season != 0 {
		w.RawByte('"')
		w.RawString("season")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Season))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("self")
	w.RawByte('"')
	w.RawByte(':')
	m.Self.JsonBytes(w)
	needWriteComma = true
	if m.HighestRank != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("highest_rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HighestRank))
		needWriteComma = true
	}
	if m.EndTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RacingRank_GetRacingRankRewardRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RacingRank_GetRacingRankRewardResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewarded_rank")
	w.RawByte('"')
	w.RawByte(':')
	if m.RewardedRank == nil {
		w.RawString("null")
	} else if len(m.RewardedRank) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RewardedRank {
			w.Int64(int64(v))
			if i != len(m.RewardedRank)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RacingRank_RacingRankMatchSuccessPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RacingRank) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRank) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRank) GoString() string {
	return m.String()
}

func (m *RacingRank_GetRacingRankInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRank_GetRacingRankInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRank_GetRacingRankInfoRequest) GoString() string {
	return m.String()
}

func (m *RacingRank_GetRacingRankInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRank_GetRacingRankInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRank_GetRacingRankInfoResponse) GoString() string {
	return m.String()
}

func (m *RacingRank_EnrollRacingRankRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRank_EnrollRacingRankRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRank_EnrollRacingRankRequest) GoString() string {
	return m.String()
}

func (m *RacingRank_EnrollRacingRankResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRank_EnrollRacingRankResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRank_EnrollRacingRankResponse) GoString() string {
	return m.String()
}

func (m *RacingRank_GetRacingRankRewardRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRank_GetRacingRankRewardRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRank_GetRacingRankRewardRequest) GoString() string {
	return m.String()
}

func (m *RacingRank_GetRacingRankRewardResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRank_GetRacingRankRewardResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRank_GetRacingRankRewardResponse) GoString() string {
	return m.String()
}

func (m *RacingRank_RacingRankMatchSuccessPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRank_RacingRankMatchSuccessPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRank_RacingRankMatchSuccessPush) GoString() string {
	return m.String()
}

func (m *RacingRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RacingRank_GetRacingRankInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RacingRank_GetRacingRankInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enrolled {
		n += 2
	}
	if m.Season != 0 {
		n += 1 + sovRacingRank(uint64(m.Season))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRacingRank(uint64(l))
		}
	}
	if m.HighestRank != 0 {
		n += 1 + sovRacingRank(uint64(m.HighestRank))
	}
	if len(m.RewardedRank) > 0 {
		l = 0
		for _, e := range m.RewardedRank {
			l += sovRacingRank(uint64(e))
		}
		n += 1 + sovRacingRank(uint64(l)) + l
	}
	if m.EndTime != 0 {
		n += 1 + sovRacingRank(uint64(m.EndTime))
	}
	return n
}

func (m *RacingRank_EnrollRacingRankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RacingRank_EnrollRacingRankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Season != 0 {
		n += 1 + sovRacingRank(uint64(m.Season))
	}
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovRacingRank(uint64(l))
	}
	if m.HighestRank != 0 {
		n += 1 + sovRacingRank(uint64(m.HighestRank))
	}
	if m.EndTime != 0 {
		n += 1 + sovRacingRank(uint64(m.EndTime))
	}
	return n
}

func (m *RacingRank_GetRacingRankRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRacingRank(uint64(m.Id))
	}
	return n
}

func (m *RacingRank_GetRacingRankRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRacingRank(uint64(k)) + 1 + sovRacingRank(uint64(v))
			n += mapEntrySize + 1 + sovRacingRank(uint64(mapEntrySize))
		}
	}
	if len(m.RewardedRank) > 0 {
		l = 0
		for _, e := range m.RewardedRank {
			l += sovRacingRank(uint64(e))
		}
		n += 1 + sovRacingRank(uint64(l)) + l
	}
	return n
}

func (m *RacingRank_RacingRankMatchSuccessPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRacingRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRacingRank(x uint64) (n int) {
	return sovRacingRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RacingRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RacingRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RacingRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRank_GetRacingRankInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRacingRankInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRacingRankInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRank_GetRacingRankInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRacingRankInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRacingRankInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enrolled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enrolled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRacingRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRacingRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &models.RankItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestRank", wireType)
			}
			m.HighestRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestRank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRacingRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardedRank = append(m.RewardedRank, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRacingRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRacingRank
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRacingRank
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RewardedRank) == 0 {
					m.RewardedRank = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRacingRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardedRank = append(m.RewardedRank, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardedRank", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRank_EnrollRacingRankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnrollRacingRankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnrollRacingRankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRank_EnrollRacingRankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnrollRacingRankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnrollRacingRankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRacingRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRacingRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &models.RankItem{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestRank", wireType)
			}
			m.HighestRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestRank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRank_GetRacingRankRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRacingRankRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRacingRankRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRank_GetRacingRankRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRacingRankRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRacingRankRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRacingRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRacingRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRacingRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRacingRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRacingRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRacingRank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRacingRank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRacingRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardedRank = append(m.RewardedRank, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRacingRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRacingRank
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRacingRank
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RewardedRank) == 0 {
					m.RewardedRank = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRacingRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardedRank = append(m.RewardedRank, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardedRank", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRank_RacingRankMatchSuccessPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RacingRankMatchSuccessPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RacingRankMatchSuccessPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRacingRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRacingRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRacingRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRacingRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRacingRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRacingRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRacingRank = fmt.Errorf("proto: unexpected end of group")
)
