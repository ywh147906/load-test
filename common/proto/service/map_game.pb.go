// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/map_game.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MapGame struct {
}

func (m *MapGame) Reset()      { *m = MapGame{} }
func (*MapGame) ProtoMessage() {}
func (*MapGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0}
}
func (m *MapGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame.Merge(m, src)
}
func (m *MapGame) XXX_Size() int {
	return m.Size()
}
func (m *MapGame) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame proto.InternalMessageInfo

func (*MapGame) XXX_MessageName() string {
	return "service.MapGame"
}

type MapGame_TreasureChestRequest struct {
	Option       int64 `protobuf:"varint,1,opt,name=option,proto3" json:"option,omitempty"`
	SkillSuccess bool  `protobuf:"varint,2,opt,name=skill_success,json=skillSuccess,proto3" json:"skill_success,omitempty"`
	EventId      int64 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GameId       int64 `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MapGame_TreasureChestRequest) Reset()      { *m = MapGame_TreasureChestRequest{} }
func (*MapGame_TreasureChestRequest) ProtoMessage() {}
func (*MapGame_TreasureChestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 0}
}
func (m *MapGame_TreasureChestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_TreasureChestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_TreasureChestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_TreasureChestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_TreasureChestRequest.Merge(m, src)
}
func (m *MapGame_TreasureChestRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_TreasureChestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_TreasureChestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_TreasureChestRequest proto.InternalMessageInfo

func (m *MapGame_TreasureChestRequest) GetOption() int64 {
	if m != nil {
		return m.Option
	}
	return 0
}

func (m *MapGame_TreasureChestRequest) GetSkillSuccess() bool {
	if m != nil {
		return m.SkillSuccess
	}
	return false
}

func (m *MapGame_TreasureChestRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapGame_TreasureChestRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (*MapGame_TreasureChestRequest) XXX_MessageName() string {
	return "service.MapGame.TreasureChestRequest"
}

type MapGame_TreasureChestResponse struct {
}

func (m *MapGame_TreasureChestResponse) Reset()      { *m = MapGame_TreasureChestResponse{} }
func (*MapGame_TreasureChestResponse) ProtoMessage() {}
func (*MapGame_TreasureChestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 1}
}
func (m *MapGame_TreasureChestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_TreasureChestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_TreasureChestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_TreasureChestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_TreasureChestResponse.Merge(m, src)
}
func (m *MapGame_TreasureChestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_TreasureChestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_TreasureChestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_TreasureChestResponse proto.InternalMessageInfo

func (*MapGame_TreasureChestResponse) XXX_MessageName() string {
	return "service.MapGame.TreasureChestResponse"
}

type MapGame_CollectMineRequest struct {
	Collect  int64 `protobuf:"varint,1,opt,name=collect,proto3" json:"collect,omitempty"`
	EventId  int64 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GameId   int64 `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	ParentId int64 `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (m *MapGame_CollectMineRequest) Reset()      { *m = MapGame_CollectMineRequest{} }
func (*MapGame_CollectMineRequest) ProtoMessage() {}
func (*MapGame_CollectMineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 2}
}
func (m *MapGame_CollectMineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_CollectMineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_CollectMineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_CollectMineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_CollectMineRequest.Merge(m, src)
}
func (m *MapGame_CollectMineRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_CollectMineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_CollectMineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_CollectMineRequest proto.InternalMessageInfo

func (m *MapGame_CollectMineRequest) GetCollect() int64 {
	if m != nil {
		return m.Collect
	}
	return 0
}

func (m *MapGame_CollectMineRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapGame_CollectMineRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MapGame_CollectMineRequest) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (*MapGame_CollectMineRequest) XXX_MessageName() string {
	return "service.MapGame.CollectMineRequest"
}

type MapGame_CollectMineResponse struct {
}

func (m *MapGame_CollectMineResponse) Reset()      { *m = MapGame_CollectMineResponse{} }
func (*MapGame_CollectMineResponse) ProtoMessage() {}
func (*MapGame_CollectMineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 3}
}
func (m *MapGame_CollectMineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_CollectMineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_CollectMineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_CollectMineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_CollectMineResponse.Merge(m, src)
}
func (m *MapGame_CollectMineResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_CollectMineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_CollectMineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_CollectMineResponse proto.InternalMessageInfo

func (*MapGame_CollectMineResponse) XXX_MessageName() string {
	return "service.MapGame.CollectMineResponse"
}

type MapGame_BlackMarketRequest struct {
	Option  int64 `protobuf:"varint,1,opt,name=option,proto3" json:"option,omitempty"`
	EventId int64 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GameId  int64 `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MapGame_BlackMarketRequest) Reset()      { *m = MapGame_BlackMarketRequest{} }
func (*MapGame_BlackMarketRequest) ProtoMessage() {}
func (*MapGame_BlackMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 4}
}
func (m *MapGame_BlackMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_BlackMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_BlackMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_BlackMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_BlackMarketRequest.Merge(m, src)
}
func (m *MapGame_BlackMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_BlackMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_BlackMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_BlackMarketRequest proto.InternalMessageInfo

func (m *MapGame_BlackMarketRequest) GetOption() int64 {
	if m != nil {
		return m.Option
	}
	return 0
}

func (m *MapGame_BlackMarketRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapGame_BlackMarketRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (*MapGame_BlackMarketRequest) XXX_MessageName() string {
	return "service.MapGame.BlackMarketRequest"
}

type MapGame_BlackMarketResponse struct {
	DrawId int64 `protobuf:"varint,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
}

func (m *MapGame_BlackMarketResponse) Reset()      { *m = MapGame_BlackMarketResponse{} }
func (*MapGame_BlackMarketResponse) ProtoMessage() {}
func (*MapGame_BlackMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 5}
}
func (m *MapGame_BlackMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_BlackMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_BlackMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_BlackMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_BlackMarketResponse.Merge(m, src)
}
func (m *MapGame_BlackMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_BlackMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_BlackMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_BlackMarketResponse proto.InternalMessageInfo

func (m *MapGame_BlackMarketResponse) GetDrawId() int64 {
	if m != nil {
		return m.DrawId
	}
	return 0
}

func (*MapGame_BlackMarketResponse) XXX_MessageName() string {
	return "service.MapGame.BlackMarketResponse"
}

type MapGame_JigsawPuzzleRequest struct {
	IsSuccess bool  `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Opt       int64 `protobuf:"varint,2,opt,name=opt,proto3" json:"opt,omitempty"`
	EventId   int64 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GameId    int64 `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MapGame_JigsawPuzzleRequest) Reset()      { *m = MapGame_JigsawPuzzleRequest{} }
func (*MapGame_JigsawPuzzleRequest) ProtoMessage() {}
func (*MapGame_JigsawPuzzleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 6}
}
func (m *MapGame_JigsawPuzzleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_JigsawPuzzleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_JigsawPuzzleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_JigsawPuzzleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_JigsawPuzzleRequest.Merge(m, src)
}
func (m *MapGame_JigsawPuzzleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_JigsawPuzzleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_JigsawPuzzleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_JigsawPuzzleRequest proto.InternalMessageInfo

func (m *MapGame_JigsawPuzzleRequest) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *MapGame_JigsawPuzzleRequest) GetOpt() int64 {
	if m != nil {
		return m.Opt
	}
	return 0
}

func (m *MapGame_JigsawPuzzleRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapGame_JigsawPuzzleRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (*MapGame_JigsawPuzzleRequest) XXX_MessageName() string {
	return "service.MapGame.JigsawPuzzleRequest"
}

type MapGame_JigsawPuzzleResponse struct {
}

func (m *MapGame_JigsawPuzzleResponse) Reset()      { *m = MapGame_JigsawPuzzleResponse{} }
func (*MapGame_JigsawPuzzleResponse) ProtoMessage() {}
func (*MapGame_JigsawPuzzleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 7}
}
func (m *MapGame_JigsawPuzzleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_JigsawPuzzleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_JigsawPuzzleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_JigsawPuzzleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_JigsawPuzzleResponse.Merge(m, src)
}
func (m *MapGame_JigsawPuzzleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_JigsawPuzzleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_JigsawPuzzleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_JigsawPuzzleResponse proto.InternalMessageInfo

func (*MapGame_JigsawPuzzleResponse) XXX_MessageName() string {
	return "service.MapGame.JigsawPuzzleResponse"
}

type MapGame_CardMatchRequest struct {
	IsSuccess bool  `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Opt       int64 `protobuf:"varint,2,opt,name=opt,proto3" json:"opt,omitempty"`
	EventId   int64 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GameId    int64 `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MapGame_CardMatchRequest) Reset()      { *m = MapGame_CardMatchRequest{} }
func (*MapGame_CardMatchRequest) ProtoMessage() {}
func (*MapGame_CardMatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 8}
}
func (m *MapGame_CardMatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_CardMatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_CardMatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_CardMatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_CardMatchRequest.Merge(m, src)
}
func (m *MapGame_CardMatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_CardMatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_CardMatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_CardMatchRequest proto.InternalMessageInfo

func (m *MapGame_CardMatchRequest) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *MapGame_CardMatchRequest) GetOpt() int64 {
	if m != nil {
		return m.Opt
	}
	return 0
}

func (m *MapGame_CardMatchRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapGame_CardMatchRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (*MapGame_CardMatchRequest) XXX_MessageName() string {
	return "service.MapGame.CardMatchRequest"
}

type MapGame_CardMatchResponse struct {
}

func (m *MapGame_CardMatchResponse) Reset()      { *m = MapGame_CardMatchResponse{} }
func (*MapGame_CardMatchResponse) ProtoMessage() {}
func (*MapGame_CardMatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 9}
}
func (m *MapGame_CardMatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_CardMatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_CardMatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_CardMatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_CardMatchResponse.Merge(m, src)
}
func (m *MapGame_CardMatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_CardMatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_CardMatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_CardMatchResponse proto.InternalMessageInfo

func (*MapGame_CardMatchResponse) XXX_MessageName() string {
	return "service.MapGame.CardMatchResponse"
}

type MapGame_WantingRequest struct {
}

func (m *MapGame_WantingRequest) Reset()      { *m = MapGame_WantingRequest{} }
func (*MapGame_WantingRequest) ProtoMessage() {}
func (*MapGame_WantingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 10}
}
func (m *MapGame_WantingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_WantingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_WantingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_WantingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_WantingRequest.Merge(m, src)
}
func (m *MapGame_WantingRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_WantingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_WantingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_WantingRequest proto.InternalMessageInfo

func (*MapGame_WantingRequest) XXX_MessageName() string {
	return "service.MapGame.WantingRequest"
}

type MapGame_WantingResponse struct {
}

func (m *MapGame_WantingResponse) Reset()      { *m = MapGame_WantingResponse{} }
func (*MapGame_WantingResponse) ProtoMessage() {}
func (*MapGame_WantingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 11}
}
func (m *MapGame_WantingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_WantingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_WantingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_WantingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_WantingResponse.Merge(m, src)
}
func (m *MapGame_WantingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_WantingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_WantingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_WantingResponse proto.InternalMessageInfo

func (*MapGame_WantingResponse) XXX_MessageName() string {
	return "service.MapGame.WantingResponse"
}

type MapGame_MeetRequest struct {
	Opt     int64 `protobuf:"varint,1,opt,name=opt,proto3" json:"opt,omitempty"`
	EventId int64 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GameId  int64 `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	IsSucc  bool  `protobuf:"varint,5,opt,name=is_succ,json=isSucc,proto3" json:"is_succ,omitempty"`
}

func (m *MapGame_MeetRequest) Reset()      { *m = MapGame_MeetRequest{} }
func (*MapGame_MeetRequest) ProtoMessage() {}
func (*MapGame_MeetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 12}
}
func (m *MapGame_MeetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_MeetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_MeetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_MeetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_MeetRequest.Merge(m, src)
}
func (m *MapGame_MeetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_MeetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_MeetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_MeetRequest proto.InternalMessageInfo

func (m *MapGame_MeetRequest) GetOpt() int64 {
	if m != nil {
		return m.Opt
	}
	return 0
}

func (m *MapGame_MeetRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapGame_MeetRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MapGame_MeetRequest) GetIsSucc() bool {
	if m != nil {
		return m.IsSucc
	}
	return false
}

func (*MapGame_MeetRequest) XXX_MessageName() string {
	return "service.MapGame.MeetRequest"
}

type MapGame_MeetResponse struct {
	NewEventId int64 `protobuf:"varint,1,opt,name=new_event_id,json=newEventId,proto3" json:"new_event_id,omitempty"`
	NewGameId  int64 `protobuf:"varint,2,opt,name=new_game_id,json=newGameId,proto3" json:"new_game_id,omitempty"`
}

func (m *MapGame_MeetResponse) Reset()      { *m = MapGame_MeetResponse{} }
func (*MapGame_MeetResponse) ProtoMessage() {}
func (*MapGame_MeetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 13}
}
func (m *MapGame_MeetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_MeetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_MeetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_MeetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_MeetResponse.Merge(m, src)
}
func (m *MapGame_MeetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_MeetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_MeetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_MeetResponse proto.InternalMessageInfo

func (m *MapGame_MeetResponse) GetNewEventId() int64 {
	if m != nil {
		return m.NewEventId
	}
	return 0
}

func (m *MapGame_MeetResponse) GetNewGameId() int64 {
	if m != nil {
		return m.NewGameId
	}
	return 0
}

func (*MapGame_MeetResponse) XXX_MessageName() string {
	return "service.MapGame.MeetResponse"
}

// 偶遇战开始
type MapGame_MeetBattleStartRequest struct {
	Opt int64 `protobuf:"varint,1,opt,name=opt,proto3" json:"opt,omitempty"`
}

func (m *MapGame_MeetBattleStartRequest) Reset()      { *m = MapGame_MeetBattleStartRequest{} }
func (*MapGame_MeetBattleStartRequest) ProtoMessage() {}
func (*MapGame_MeetBattleStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 14}
}
func (m *MapGame_MeetBattleStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_MeetBattleStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_MeetBattleStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_MeetBattleStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_MeetBattleStartRequest.Merge(m, src)
}
func (m *MapGame_MeetBattleStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_MeetBattleStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_MeetBattleStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_MeetBattleStartRequest proto.InternalMessageInfo

func (m *MapGame_MeetBattleStartRequest) GetOpt() int64 {
	if m != nil {
		return m.Opt
	}
	return 0
}

func (*MapGame_MeetBattleStartRequest) XXX_MessageName() string {
	return "service.MapGame.MeetBattleStartRequest"
}

type MapGame_MeetBattleStartResponse struct {
	MapId    int64                     `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Token    string                    `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	BattleId int64                     `protobuf:"varint,3,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	Sbp      *models.SingleBattleParam `protobuf:"bytes,4,opt,name=sbp,proto3" json:"sbp,omitempty"`
}

func (m *MapGame_MeetBattleStartResponse) Reset()      { *m = MapGame_MeetBattleStartResponse{} }
func (*MapGame_MeetBattleStartResponse) ProtoMessage() {}
func (*MapGame_MeetBattleStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 15}
}
func (m *MapGame_MeetBattleStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_MeetBattleStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_MeetBattleStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_MeetBattleStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_MeetBattleStartResponse.Merge(m, src)
}
func (m *MapGame_MeetBattleStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_MeetBattleStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_MeetBattleStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_MeetBattleStartResponse proto.InternalMessageInfo

func (m *MapGame_MeetBattleStartResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *MapGame_MeetBattleStartResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MapGame_MeetBattleStartResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *MapGame_MeetBattleStartResponse) GetSbp() *models.SingleBattleParam {
	if m != nil {
		return m.Sbp
	}
	return nil
}

func (*MapGame_MeetBattleStartResponse) XXX_MessageName() string {
	return "service.MapGame.MeetBattleStartResponse"
}

// 偶遇战结束
type MapGame_MeetBattleFinishRequest struct {
	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	IsSuccess bool   `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (m *MapGame_MeetBattleFinishRequest) Reset()      { *m = MapGame_MeetBattleFinishRequest{} }
func (*MapGame_MeetBattleFinishRequest) ProtoMessage() {}
func (*MapGame_MeetBattleFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 16}
}
func (m *MapGame_MeetBattleFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_MeetBattleFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_MeetBattleFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_MeetBattleFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_MeetBattleFinishRequest.Merge(m, src)
}
func (m *MapGame_MeetBattleFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_MeetBattleFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_MeetBattleFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_MeetBattleFinishRequest proto.InternalMessageInfo

func (m *MapGame_MeetBattleFinishRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MapGame_MeetBattleFinishRequest) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (*MapGame_MeetBattleFinishRequest) XXX_MessageName() string {
	return "service.MapGame.MeetBattleFinishRequest"
}

type MapGame_MeetBattleFinishResponse struct {
}

func (m *MapGame_MeetBattleFinishResponse) Reset()      { *m = MapGame_MeetBattleFinishResponse{} }
func (*MapGame_MeetBattleFinishResponse) ProtoMessage() {}
func (*MapGame_MeetBattleFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 17}
}
func (m *MapGame_MeetBattleFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_MeetBattleFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_MeetBattleFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_MeetBattleFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_MeetBattleFinishResponse.Merge(m, src)
}
func (m *MapGame_MeetBattleFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_MeetBattleFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_MeetBattleFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_MeetBattleFinishResponse proto.InternalMessageInfo

func (*MapGame_MeetBattleFinishResponse) XXX_MessageName() string {
	return "service.MapGame.MeetBattleFinishResponse"
}

type MapGame_BuildArmsRequest struct {
	IsSuccess bool  `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Opt       int64 `protobuf:"varint,2,opt,name=opt,proto3" json:"opt,omitempty"`
	EventId   int64 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GameId    int64 `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MapGame_BuildArmsRequest) Reset()      { *m = MapGame_BuildArmsRequest{} }
func (*MapGame_BuildArmsRequest) ProtoMessage() {}
func (*MapGame_BuildArmsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 18}
}
func (m *MapGame_BuildArmsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_BuildArmsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_BuildArmsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_BuildArmsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_BuildArmsRequest.Merge(m, src)
}
func (m *MapGame_BuildArmsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_BuildArmsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_BuildArmsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_BuildArmsRequest proto.InternalMessageInfo

func (m *MapGame_BuildArmsRequest) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *MapGame_BuildArmsRequest) GetOpt() int64 {
	if m != nil {
		return m.Opt
	}
	return 0
}

func (m *MapGame_BuildArmsRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapGame_BuildArmsRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (*MapGame_BuildArmsRequest) XXX_MessageName() string {
	return "service.MapGame.BuildArmsRequest"
}

type MapGame_BuildArmsResponse struct {
}

func (m *MapGame_BuildArmsResponse) Reset()      { *m = MapGame_BuildArmsResponse{} }
func (*MapGame_BuildArmsResponse) ProtoMessage() {}
func (*MapGame_BuildArmsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8892baef6d0b266, []int{0, 19}
}
func (m *MapGame_BuildArmsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapGame_BuildArmsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapGame_BuildArmsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapGame_BuildArmsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapGame_BuildArmsResponse.Merge(m, src)
}
func (m *MapGame_BuildArmsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapGame_BuildArmsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapGame_BuildArmsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapGame_BuildArmsResponse proto.InternalMessageInfo

func (*MapGame_BuildArmsResponse) XXX_MessageName() string {
	return "service.MapGame.BuildArmsResponse"
}
func init() {
	proto.RegisterType((*MapGame)(nil), "service.MapGame")
	proto.RegisterType((*MapGame_TreasureChestRequest)(nil), "service.MapGame.TreasureChestRequest")
	proto.RegisterType((*MapGame_TreasureChestResponse)(nil), "service.MapGame.TreasureChestResponse")
	proto.RegisterType((*MapGame_CollectMineRequest)(nil), "service.MapGame.CollectMineRequest")
	proto.RegisterType((*MapGame_CollectMineResponse)(nil), "service.MapGame.CollectMineResponse")
	proto.RegisterType((*MapGame_BlackMarketRequest)(nil), "service.MapGame.BlackMarketRequest")
	proto.RegisterType((*MapGame_BlackMarketResponse)(nil), "service.MapGame.BlackMarketResponse")
	proto.RegisterType((*MapGame_JigsawPuzzleRequest)(nil), "service.MapGame.JigsawPuzzleRequest")
	proto.RegisterType((*MapGame_JigsawPuzzleResponse)(nil), "service.MapGame.JigsawPuzzleResponse")
	proto.RegisterType((*MapGame_CardMatchRequest)(nil), "service.MapGame.CardMatchRequest")
	proto.RegisterType((*MapGame_CardMatchResponse)(nil), "service.MapGame.CardMatchResponse")
	proto.RegisterType((*MapGame_WantingRequest)(nil), "service.MapGame.WantingRequest")
	proto.RegisterType((*MapGame_WantingResponse)(nil), "service.MapGame.WantingResponse")
	proto.RegisterType((*MapGame_MeetRequest)(nil), "service.MapGame.MeetRequest")
	proto.RegisterType((*MapGame_MeetResponse)(nil), "service.MapGame.MeetResponse")
	proto.RegisterType((*MapGame_MeetBattleStartRequest)(nil), "service.MapGame.MeetBattleStartRequest")
	proto.RegisterType((*MapGame_MeetBattleStartResponse)(nil), "service.MapGame.MeetBattleStartResponse")
	proto.RegisterType((*MapGame_MeetBattleFinishRequest)(nil), "service.MapGame.MeetBattleFinishRequest")
	proto.RegisterType((*MapGame_MeetBattleFinishResponse)(nil), "service.MapGame.MeetBattleFinishResponse")
	proto.RegisterType((*MapGame_BuildArmsRequest)(nil), "service.MapGame.BuildArmsRequest")
	proto.RegisterType((*MapGame_BuildArmsResponse)(nil), "service.MapGame.BuildArmsResponse")
}

func init() { proto.RegisterFile("proto/service/map_game.proto", fileDescriptor_b8892baef6d0b266) }

var fileDescriptor_b8892baef6d0b266 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0x33, 0xcd, 0xd7, 0x5c, 0x4e, 0xfa, 0x41, 0xeb, 0xb4, 0x4d, 0x3a, 0x80, 0x15, 0xc1,
	0xa6, 0x02, 0x91, 0x48, 0xf0, 0x04, 0xa4, 0x82, 0x2a, 0x48, 0xa9, 0x2a, 0x17, 0x09, 0x89, 0x4d,
	0x98, 0xda, 0xa3, 0x74, 0x14, 0x7b, 0x6c, 0x3c, 0x93, 0x46, 0xea, 0x86, 0x25, 0xdb, 0xae, 0x78,
	0x06, 0x1e, 0xa5, 0xcb, 0x2e, 0xbb, 0x04, 0x67, 0xc3, 0x92, 0x47, 0x40, 0x73, 0x89, 0x9b, 0xb4,
	0x42, 0x48, 0x41, 0xea, 0xce, 0xe7, 0xe2, 0xf9, 0xfd, 0xcf, 0xc5, 0x63, 0x78, 0x98, 0xa4, 0xb1,
	0x8c, 0x3b, 0x82, 0xa6, 0xa7, 0xcc, 0xa7, 0x9d, 0x88, 0x24, 0x83, 0x21, 0x89, 0x68, 0x5b, 0xbb,
	0x9d, 0xb2, 0xf5, 0xe3, 0x86, 0x49, 0x8b, 0xe2, 0x80, 0x86, 0xa2, 0x73, 0x4c, 0x84, 0xcd, 0xc0,
	0x3b, 0x37, 0x02, 0x52, 0x86, 0x36, 0xf4, 0xf8, 0x6b, 0x0d, 0xca, 0x7d, 0x92, 0xec, 0x93, 0x88,
	0xe2, 0x2f, 0x08, 0x36, 0xdf, 0xa5, 0x94, 0x88, 0x71, 0x4a, 0xf7, 0x4e, 0xa8, 0x90, 0x1e, 0xfd,
	0x34, 0xa6, 0x42, 0x3a, 0xdb, 0x50, 0x8a, 0x13, 0xc9, 0x62, 0xde, 0x44, 0x2d, 0xb4, 0x5b, 0xf4,
	0xac, 0xe5, 0x3c, 0x81, 0xff, 0xc5, 0x88, 0x85, 0xe1, 0x40, 0x8c, 0x7d, 0x9f, 0x0a, 0xd1, 0x5c,
	0x69, 0xa1, 0xdd, 0x8a, 0xb7, 0xa6, 0x9d, 0x47, 0xc6, 0xe7, 0xec, 0x40, 0x85, 0x9e, 0x52, 0x2e,
	0x07, 0x2c, 0x68, 0x16, 0xf5, 0xeb, 0x65, 0x6d, 0xf7, 0x02, 0xa7, 0x01, 0x65, 0x55, 0x87, 0x8a,
	0xfc, 0x67, 0x0e, 0x56, 0x66, 0x2f, 0xc0, 0x0d, 0xd8, 0xba, 0x21, 0x44, 0x24, 0x31, 0x17, 0x14,
	0x7f, 0x06, 0x67, 0x2f, 0x0e, 0x43, 0xea, 0xcb, 0x3e, 0xe3, 0x74, 0xa6, 0xaf, 0x09, 0x65, 0xdf,
	0x78, 0xad, 0xc0, 0x99, 0xb9, 0x0c, 0xdc, 0x79, 0x00, 0xd5, 0x84, 0xa4, 0xf6, 0xa5, 0x55, 0x1d,
	0xaa, 0x18, 0x47, 0x2f, 0xc0, 0x5b, 0x50, 0x5f, 0x10, 0x60, 0x75, 0x7d, 0x04, 0xa7, 0x1b, 0x12,
	0x7f, 0xd4, 0x27, 0xe9, 0x88, 0xfe, 0xb5, 0x6f, 0xcb, 0xb4, 0xa4, 0x0d, 0xf5, 0x05, 0x82, 0x01,
	0xab, 0xfc, 0x20, 0x25, 0x13, 0x95, 0x6f, 0x19, 0xca, 0xec, 0x05, 0xf8, 0x0c, 0xea, 0x6f, 0xd9,
	0x50, 0x90, 0xc9, 0xe1, 0xf8, 0xec, 0x2c, 0xcc, 0x5b, 0xf5, 0x08, 0x80, 0x89, 0x7c, 0x5e, 0x48,
	0xcf, 0xab, 0xca, 0xc4, 0x6c, 0x58, 0xeb, 0x50, 0x8c, 0x13, 0xa9, 0xe7, 0x58, 0xf4, 0xd4, 0xe3,
	0x52, 0x5a, 0xb7, 0x61, 0x73, 0x91, 0x6d, 0xbb, 0x34, 0x81, 0xf5, 0x3d, 0x92, 0x06, 0x7d, 0x22,
	0xfd, 0x93, 0x3b, 0x15, 0x54, 0x87, 0x8d, 0x39, 0xb0, 0x55, 0xb3, 0x0e, 0xf7, 0xde, 0x13, 0x2e,
	0x19, 0x1f, 0x5a, 0x2d, 0x78, 0x03, 0xee, 0xe7, 0x1e, 0x9b, 0x14, 0x42, 0xad, 0x4f, 0xaf, 0x27,
	0x6a, 0xe5, 0xa0, 0x7f, 0x92, 0xa3, 0x02, 0xb6, 0x66, 0xbd, 0x5f, 0x15, 0xaf, 0x64, 0x0a, 0xc6,
	0x87, 0xb0, 0x66, 0x68, 0x76, 0xba, 0x2d, 0x58, 0xe3, 0x74, 0x32, 0xc8, 0x01, 0x86, 0x0b, 0x9c,
	0x4e, 0x5e, 0x5b, 0x86, 0x0b, 0x35, 0x95, 0x31, 0xe3, 0x98, 0x3e, 0x55, 0x39, 0x9d, 0xec, 0x9b,
	0xca, 0x9f, 0xc2, 0xb6, 0x3a, 0xb1, 0xab, 0xbf, 0xf9, 0x23, 0x49, 0xd2, 0x3f, 0x97, 0x82, 0xcf,
	0x11, 0x34, 0x6e, 0x25, 0x5b, 0x25, 0x5b, 0x50, 0x52, 0xd7, 0x4e, 0xae, 0x61, 0x35, 0x22, 0x49,
	0x2f, 0x70, 0x36, 0x61, 0x55, 0xc6, 0x23, 0xca, 0x35, 0xb8, 0xea, 0x19, 0x43, 0x7d, 0x41, 0xe6,
	0x92, 0xb9, 0x6e, 0x4a, 0xc5, 0x38, 0x7a, 0x81, 0xf3, 0x0c, 0x8a, 0xe2, 0x38, 0xd1, 0x1d, 0xa9,
	0xbd, 0xd8, 0x69, 0x9b, 0x4b, 0xa9, 0x7d, 0xc4, 0xf8, 0x30, 0xa4, 0x86, 0x7c, 0x48, 0x52, 0x12,
	0x79, 0x2a, 0x0b, 0x1f, 0xcc, 0x2b, 0x7a, 0xc3, 0x38, 0x13, 0xf9, 0xe2, 0xe4, 0x68, 0x34, 0x8f,
	0x5e, 0x5c, 0xa7, 0x95, 0x1b, 0xeb, 0x84, 0x31, 0x34, 0x6f, 0x9f, 0x77, 0xbd, 0x9d, 0xdd, 0x31,
	0x0b, 0x83, 0x57, 0x69, 0x24, 0xee, 0x7a, 0x3b, 0xe7, 0xc0, 0x46, 0x4d, 0xf7, 0xe0, 0xea, 0x87,
	0x5b, 0xf8, 0x96, 0xb9, 0xe8, 0x22, 0x73, 0xd1, 0x65, 0xe6, 0xa2, 0xef, 0x99, 0x8b, 0x7e, 0x66,
	0x6e, 0xe1, 0x57, 0xe6, 0xa2, 0xf3, 0xa9, 0x5b, 0xb8, 0x98, 0xba, 0xe8, 0x72, 0xea, 0x16, 0xae,
	0xa6, 0x6e, 0xe1, 0x43, 0xcb, 0x8f, 0x19, 0x7f, 0xae, 0x7e, 0x04, 0x34, 0xed, 0xf8, 0x71, 0x14,
	0xc5, 0xbc, 0xb3, 0xf0, 0xd3, 0x38, 0x2e, 0x69, 0xf3, 0xe5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x9d, 0x26, 0xe2, 0xc0, 0x4c, 0x06, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_TreasureChestRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_TreasureChestResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_CollectMineRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_CollectMineResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_BlackMarketRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_BlackMarketResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_JigsawPuzzleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_JigsawPuzzleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_CardMatchRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_CardMatchResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_WantingRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_WantingResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_MeetRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_MeetResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_MeetBattleStartRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_MeetBattleStartResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_MeetBattleFinishRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_MeetBattleFinishResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_BuildArmsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapGame_BuildArmsResponse.Get().(proto.Message)
	})
}

var poolMapGame = &sync.Pool{New: func() interface{} { return &MapGame{} }}

func (m *MapGame) ReleasePool() { m.Reset(); poolMapGame.Put(m); m = nil }

var poolMapGame_TreasureChestRequest = &sync.Pool{New: func() interface{} { return &MapGame_TreasureChestRequest{} }}

func (m *MapGame_TreasureChestRequest) ReleasePool() {
	m.Reset()
	poolMapGame_TreasureChestRequest.Put(m)
	m = nil
}

var poolMapGame_TreasureChestResponse = &sync.Pool{New: func() interface{} { return &MapGame_TreasureChestResponse{} }}

func (m *MapGame_TreasureChestResponse) ReleasePool() {
	m.Reset()
	poolMapGame_TreasureChestResponse.Put(m)
	m = nil
}

var poolMapGame_CollectMineRequest = &sync.Pool{New: func() interface{} { return &MapGame_CollectMineRequest{} }}

func (m *MapGame_CollectMineRequest) ReleasePool() {
	m.Reset()
	poolMapGame_CollectMineRequest.Put(m)
	m = nil
}

var poolMapGame_CollectMineResponse = &sync.Pool{New: func() interface{} { return &MapGame_CollectMineResponse{} }}

func (m *MapGame_CollectMineResponse) ReleasePool() {
	m.Reset()
	poolMapGame_CollectMineResponse.Put(m)
	m = nil
}

var poolMapGame_BlackMarketRequest = &sync.Pool{New: func() interface{} { return &MapGame_BlackMarketRequest{} }}

func (m *MapGame_BlackMarketRequest) ReleasePool() {
	m.Reset()
	poolMapGame_BlackMarketRequest.Put(m)
	m = nil
}

var poolMapGame_BlackMarketResponse = &sync.Pool{New: func() interface{} { return &MapGame_BlackMarketResponse{} }}

func (m *MapGame_BlackMarketResponse) ReleasePool() {
	m.Reset()
	poolMapGame_BlackMarketResponse.Put(m)
	m = nil
}

var poolMapGame_JigsawPuzzleRequest = &sync.Pool{New: func() interface{} { return &MapGame_JigsawPuzzleRequest{} }}

func (m *MapGame_JigsawPuzzleRequest) ReleasePool() {
	m.Reset()
	poolMapGame_JigsawPuzzleRequest.Put(m)
	m = nil
}

var poolMapGame_JigsawPuzzleResponse = &sync.Pool{New: func() interface{} { return &MapGame_JigsawPuzzleResponse{} }}

func (m *MapGame_JigsawPuzzleResponse) ReleasePool() {
	m.Reset()
	poolMapGame_JigsawPuzzleResponse.Put(m)
	m = nil
}

var poolMapGame_CardMatchRequest = &sync.Pool{New: func() interface{} { return &MapGame_CardMatchRequest{} }}

func (m *MapGame_CardMatchRequest) ReleasePool() {
	m.Reset()
	poolMapGame_CardMatchRequest.Put(m)
	m = nil
}

var poolMapGame_CardMatchResponse = &sync.Pool{New: func() interface{} { return &MapGame_CardMatchResponse{} }}

func (m *MapGame_CardMatchResponse) ReleasePool() {
	m.Reset()
	poolMapGame_CardMatchResponse.Put(m)
	m = nil
}

var poolMapGame_WantingRequest = &sync.Pool{New: func() interface{} { return &MapGame_WantingRequest{} }}

func (m *MapGame_WantingRequest) ReleasePool() { m.Reset(); poolMapGame_WantingRequest.Put(m); m = nil }

var poolMapGame_WantingResponse = &sync.Pool{New: func() interface{} { return &MapGame_WantingResponse{} }}

func (m *MapGame_WantingResponse) ReleasePool() {
	m.Reset()
	poolMapGame_WantingResponse.Put(m)
	m = nil
}

var poolMapGame_MeetRequest = &sync.Pool{New: func() interface{} { return &MapGame_MeetRequest{} }}

func (m *MapGame_MeetRequest) ReleasePool() { m.Reset(); poolMapGame_MeetRequest.Put(m); m = nil }

var poolMapGame_MeetResponse = &sync.Pool{New: func() interface{} { return &MapGame_MeetResponse{} }}

func (m *MapGame_MeetResponse) ReleasePool() { m.Reset(); poolMapGame_MeetResponse.Put(m); m = nil }

var poolMapGame_MeetBattleStartRequest = &sync.Pool{New: func() interface{} { return &MapGame_MeetBattleStartRequest{} }}

func (m *MapGame_MeetBattleStartRequest) ReleasePool() {
	m.Reset()
	poolMapGame_MeetBattleStartRequest.Put(m)
	m = nil
}

var poolMapGame_MeetBattleStartResponse = &sync.Pool{New: func() interface{} { return &MapGame_MeetBattleStartResponse{} }}

func (m *MapGame_MeetBattleStartResponse) ReleasePool() {
	m.Reset()
	poolMapGame_MeetBattleStartResponse.Put(m)
	m = nil
}

var poolMapGame_MeetBattleFinishRequest = &sync.Pool{New: func() interface{} { return &MapGame_MeetBattleFinishRequest{} }}

func (m *MapGame_MeetBattleFinishRequest) ReleasePool() {
	m.Reset()
	poolMapGame_MeetBattleFinishRequest.Put(m)
	m = nil
}

var poolMapGame_MeetBattleFinishResponse = &sync.Pool{New: func() interface{} { return &MapGame_MeetBattleFinishResponse{} }}

func (m *MapGame_MeetBattleFinishResponse) ReleasePool() {
	m.Reset()
	poolMapGame_MeetBattleFinishResponse.Put(m)
	m = nil
}

var poolMapGame_BuildArmsRequest = &sync.Pool{New: func() interface{} { return &MapGame_BuildArmsRequest{} }}

func (m *MapGame_BuildArmsRequest) ReleasePool() {
	m.Reset()
	poolMapGame_BuildArmsRequest.Put(m)
	m = nil
}

var poolMapGame_BuildArmsResponse = &sync.Pool{New: func() interface{} { return &MapGame_BuildArmsResponse{} }}

func (m *MapGame_BuildArmsResponse) ReleasePool() {
	m.Reset()
	poolMapGame_BuildArmsResponse.Put(m)
	m = nil
}
func (this *MapGame) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame)
	if !ok {
		that2, ok := that.(MapGame)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapGame_TreasureChestRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_TreasureChestRequest)
	if !ok {
		that2, ok := that.(MapGame_TreasureChestRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Option != that1.Option {
		return false
	}
	if this.SkillSuccess != that1.SkillSuccess {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	return true
}
func (this *MapGame_TreasureChestResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_TreasureChestResponse)
	if !ok {
		that2, ok := that.(MapGame_TreasureChestResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapGame_CollectMineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_CollectMineRequest)
	if !ok {
		that2, ok := that.(MapGame_CollectMineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Collect != that1.Collect {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.ParentId != that1.ParentId {
		return false
	}
	return true
}
func (this *MapGame_CollectMineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_CollectMineResponse)
	if !ok {
		that2, ok := that.(MapGame_CollectMineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapGame_BlackMarketRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_BlackMarketRequest)
	if !ok {
		that2, ok := that.(MapGame_BlackMarketRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Option != that1.Option {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	return true
}
func (this *MapGame_BlackMarketResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_BlackMarketResponse)
	if !ok {
		that2, ok := that.(MapGame_BlackMarketResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DrawId != that1.DrawId {
		return false
	}
	return true
}
func (this *MapGame_JigsawPuzzleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_JigsawPuzzleRequest)
	if !ok {
		that2, ok := that.(MapGame_JigsawPuzzleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSuccess != that1.IsSuccess {
		return false
	}
	if this.Opt != that1.Opt {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	return true
}
func (this *MapGame_JigsawPuzzleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_JigsawPuzzleResponse)
	if !ok {
		that2, ok := that.(MapGame_JigsawPuzzleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapGame_CardMatchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_CardMatchRequest)
	if !ok {
		that2, ok := that.(MapGame_CardMatchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSuccess != that1.IsSuccess {
		return false
	}
	if this.Opt != that1.Opt {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	return true
}
func (this *MapGame_CardMatchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_CardMatchResponse)
	if !ok {
		that2, ok := that.(MapGame_CardMatchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapGame_WantingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_WantingRequest)
	if !ok {
		that2, ok := that.(MapGame_WantingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapGame_WantingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_WantingResponse)
	if !ok {
		that2, ok := that.(MapGame_WantingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapGame_MeetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_MeetRequest)
	if !ok {
		that2, ok := that.(MapGame_MeetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Opt != that1.Opt {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.IsSucc != that1.IsSucc {
		return false
	}
	return true
}
func (this *MapGame_MeetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_MeetResponse)
	if !ok {
		that2, ok := that.(MapGame_MeetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewEventId != that1.NewEventId {
		return false
	}
	if this.NewGameId != that1.NewGameId {
		return false
	}
	return true
}
func (this *MapGame_MeetBattleStartRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_MeetBattleStartRequest)
	if !ok {
		that2, ok := that.(MapGame_MeetBattleStartRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Opt != that1.Opt {
		return false
	}
	return true
}
func (this *MapGame_MeetBattleStartResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_MeetBattleStartResponse)
	if !ok {
		that2, ok := that.(MapGame_MeetBattleStartResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if !this.Sbp.Equal(that1.Sbp) {
		return false
	}
	return true
}
func (this *MapGame_MeetBattleFinishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_MeetBattleFinishRequest)
	if !ok {
		that2, ok := that.(MapGame_MeetBattleFinishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.IsSuccess != that1.IsSuccess {
		return false
	}
	return true
}
func (this *MapGame_MeetBattleFinishResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_MeetBattleFinishResponse)
	if !ok {
		that2, ok := that.(MapGame_MeetBattleFinishResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapGame_BuildArmsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_BuildArmsRequest)
	if !ok {
		that2, ok := that.(MapGame_BuildArmsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSuccess != that1.IsSuccess {
		return false
	}
	if this.Opt != that1.Opt {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	return true
}
func (this *MapGame_BuildArmsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapGame_BuildArmsResponse)
	if !ok {
		that2, ok := that.(MapGame_BuildArmsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *MapGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapGame_TreasureChestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_TreasureChestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_TreasureChestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x20
	}
	if m.EventId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillSuccess {
		i--
		if m.SkillSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Option != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_TreasureChestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_TreasureChestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_TreasureChestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapGame_CollectMineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_CollectMineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_CollectMineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParentId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x28
	}
	if m.GameId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x20
	}
	if m.EventId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x18
	}
	if m.Collect != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.Collect))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_CollectMineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_CollectMineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_CollectMineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapGame_BlackMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_BlackMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_BlackMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x20
	}
	if m.EventId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x18
	}
	if m.Option != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_BlackMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_BlackMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_BlackMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DrawId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.DrawId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_JigsawPuzzleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_JigsawPuzzleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_JigsawPuzzleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x20
	}
	if m.EventId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x18
	}
	if m.Opt != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.Opt))
		i--
		dAtA[i] = 0x10
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_JigsawPuzzleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_JigsawPuzzleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_JigsawPuzzleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapGame_CardMatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_CardMatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_CardMatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x20
	}
	if m.EventId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x18
	}
	if m.Opt != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.Opt))
		i--
		dAtA[i] = 0x10
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_CardMatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_CardMatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_CardMatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapGame_WantingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_WantingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_WantingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapGame_WantingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_WantingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_WantingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapGame_MeetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_MeetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_MeetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSucc {
		i--
		if m.IsSucc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.GameId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x20
	}
	if m.EventId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x18
	}
	if m.Opt != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.Opt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_MeetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_MeetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_MeetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewGameId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.NewGameId))
		i--
		dAtA[i] = 0x10
	}
	if m.NewEventId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.NewEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_MeetBattleStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_MeetBattleStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_MeetBattleStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Opt != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.Opt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_MeetBattleStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_MeetBattleStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_MeetBattleStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sbp != nil {
		{
			size, err := m.Sbp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapGame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BattleId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMapGame(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.MapId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_MeetBattleFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_MeetBattleFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_MeetBattleFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMapGame(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_MeetBattleFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_MeetBattleFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_MeetBattleFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapGame_BuildArmsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_BuildArmsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_BuildArmsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x20
	}
	if m.EventId != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x18
	}
	if m.Opt != 0 {
		i = encodeVarintMapGame(dAtA, i, uint64(m.Opt))
		i--
		dAtA[i] = 0x10
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapGame_BuildArmsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapGame_BuildArmsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapGame_BuildArmsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMapGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MapGame) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapGame_TreasureChestRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Option != 0 {
		w.RawByte('"')
		w.RawString("option")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Option))
		needWriteComma = true
	}
	if m.SkillSuccess {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.SkillSuccess)
		needWriteComma = true
	}
	if m.EventId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_TreasureChestResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapGame_CollectMineRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Collect != 0 {
		w.RawByte('"')
		w.RawString("collect")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Collect))
		needWriteComma = true
	}
	if m.EventId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	if m.ParentId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("parent_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ParentId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_CollectMineResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapGame_BlackMarketRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Option != 0 {
		w.RawByte('"')
		w.RawString("option")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Option))
		needWriteComma = true
	}
	if m.EventId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_BlackMarketResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DrawId != 0 {
		w.RawByte('"')
		w.RawString("draw_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DrawId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_JigsawPuzzleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsSuccess {
		w.RawByte('"')
		w.RawString("is_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSuccess)
		needWriteComma = true
	}
	if m.Opt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("opt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Opt))
		needWriteComma = true
	}
	if m.EventId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_JigsawPuzzleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapGame_CardMatchRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsSuccess {
		w.RawByte('"')
		w.RawString("is_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSuccess)
		needWriteComma = true
	}
	if m.Opt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("opt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Opt))
		needWriteComma = true
	}
	if m.EventId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_CardMatchResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapGame_WantingRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapGame_WantingResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapGame_MeetRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Opt != 0 {
		w.RawByte('"')
		w.RawString("opt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Opt))
		needWriteComma = true
	}
	if m.EventId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	if m.IsSucc {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_succ")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSucc)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_MeetResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.NewEventId != 0 {
		w.RawByte('"')
		w.RawString("new_event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NewEventId))
		needWriteComma = true
	}
	if m.NewGameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("new_game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NewGameId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_MeetBattleStartRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Opt != 0 {
		w.RawByte('"')
		w.RawString("opt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Opt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_MeetBattleStartResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.Token != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("sbp")
	w.RawByte('"')
	w.RawByte(':')
	m.Sbp.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_MeetBattleFinishRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Token != "" {
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.IsSuccess {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSuccess)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_MeetBattleFinishResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapGame_BuildArmsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsSuccess {
		w.RawByte('"')
		w.RawString("is_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSuccess)
		needWriteComma = true
	}
	if m.Opt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("opt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Opt))
		needWriteComma = true
	}
	if m.EventId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapGame_BuildArmsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapGame) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame) GoString() string {
	return m.String()
}

func (m *MapGame_TreasureChestRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_TreasureChestRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_TreasureChestRequest) GoString() string {
	return m.String()
}

func (m *MapGame_TreasureChestResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_TreasureChestResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_TreasureChestResponse) GoString() string {
	return m.String()
}

func (m *MapGame_CollectMineRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_CollectMineRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_CollectMineRequest) GoString() string {
	return m.String()
}

func (m *MapGame_CollectMineResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_CollectMineResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_CollectMineResponse) GoString() string {
	return m.String()
}

func (m *MapGame_BlackMarketRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_BlackMarketRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_BlackMarketRequest) GoString() string {
	return m.String()
}

func (m *MapGame_BlackMarketResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_BlackMarketResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_BlackMarketResponse) GoString() string {
	return m.String()
}

func (m *MapGame_JigsawPuzzleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_JigsawPuzzleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_JigsawPuzzleRequest) GoString() string {
	return m.String()
}

func (m *MapGame_JigsawPuzzleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_JigsawPuzzleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_JigsawPuzzleResponse) GoString() string {
	return m.String()
}

func (m *MapGame_CardMatchRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_CardMatchRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_CardMatchRequest) GoString() string {
	return m.String()
}

func (m *MapGame_CardMatchResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_CardMatchResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_CardMatchResponse) GoString() string {
	return m.String()
}

func (m *MapGame_WantingRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_WantingRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_WantingRequest) GoString() string {
	return m.String()
}

func (m *MapGame_WantingResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_WantingResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_WantingResponse) GoString() string {
	return m.String()
}

func (m *MapGame_MeetRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_MeetRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_MeetRequest) GoString() string {
	return m.String()
}

func (m *MapGame_MeetResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_MeetResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_MeetResponse) GoString() string {
	return m.String()
}

func (m *MapGame_MeetBattleStartRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_MeetBattleStartRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_MeetBattleStartRequest) GoString() string {
	return m.String()
}

func (m *MapGame_MeetBattleStartResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_MeetBattleStartResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_MeetBattleStartResponse) GoString() string {
	return m.String()
}

func (m *MapGame_MeetBattleFinishRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_MeetBattleFinishRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_MeetBattleFinishRequest) GoString() string {
	return m.String()
}

func (m *MapGame_MeetBattleFinishResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_MeetBattleFinishResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_MeetBattleFinishResponse) GoString() string {
	return m.String()
}

func (m *MapGame_BuildArmsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_BuildArmsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_BuildArmsRequest) GoString() string {
	return m.String()
}

func (m *MapGame_BuildArmsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapGame_BuildArmsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapGame_BuildArmsResponse) GoString() string {
	return m.String()
}

func (m *MapGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapGame_TreasureChestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Option != 0 {
		n += 1 + sovMapGame(uint64(m.Option))
	}
	if m.SkillSuccess {
		n += 2
	}
	if m.EventId != 0 {
		n += 1 + sovMapGame(uint64(m.EventId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapGame(uint64(m.GameId))
	}
	return n
}

func (m *MapGame_TreasureChestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapGame_CollectMineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collect != 0 {
		n += 1 + sovMapGame(uint64(m.Collect))
	}
	if m.EventId != 0 {
		n += 1 + sovMapGame(uint64(m.EventId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapGame(uint64(m.GameId))
	}
	if m.ParentId != 0 {
		n += 1 + sovMapGame(uint64(m.ParentId))
	}
	return n
}

func (m *MapGame_CollectMineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapGame_BlackMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Option != 0 {
		n += 1 + sovMapGame(uint64(m.Option))
	}
	if m.EventId != 0 {
		n += 1 + sovMapGame(uint64(m.EventId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapGame(uint64(m.GameId))
	}
	return n
}

func (m *MapGame_BlackMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DrawId != 0 {
		n += 1 + sovMapGame(uint64(m.DrawId))
	}
	return n
}

func (m *MapGame_JigsawPuzzleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	if m.Opt != 0 {
		n += 1 + sovMapGame(uint64(m.Opt))
	}
	if m.EventId != 0 {
		n += 1 + sovMapGame(uint64(m.EventId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapGame(uint64(m.GameId))
	}
	return n
}

func (m *MapGame_JigsawPuzzleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapGame_CardMatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	if m.Opt != 0 {
		n += 1 + sovMapGame(uint64(m.Opt))
	}
	if m.EventId != 0 {
		n += 1 + sovMapGame(uint64(m.EventId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapGame(uint64(m.GameId))
	}
	return n
}

func (m *MapGame_CardMatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapGame_WantingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapGame_WantingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapGame_MeetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opt != 0 {
		n += 1 + sovMapGame(uint64(m.Opt))
	}
	if m.EventId != 0 {
		n += 1 + sovMapGame(uint64(m.EventId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapGame(uint64(m.GameId))
	}
	if m.IsSucc {
		n += 2
	}
	return n
}

func (m *MapGame_MeetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewEventId != 0 {
		n += 1 + sovMapGame(uint64(m.NewEventId))
	}
	if m.NewGameId != 0 {
		n += 1 + sovMapGame(uint64(m.NewGameId))
	}
	return n
}

func (m *MapGame_MeetBattleStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opt != 0 {
		n += 1 + sovMapGame(uint64(m.Opt))
	}
	return n
}

func (m *MapGame_MeetBattleStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovMapGame(uint64(m.MapId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMapGame(uint64(l))
	}
	if m.BattleId != 0 {
		n += 1 + sovMapGame(uint64(m.BattleId))
	}
	if m.Sbp != nil {
		l = m.Sbp.Size()
		n += 1 + l + sovMapGame(uint64(l))
	}
	return n
}

func (m *MapGame_MeetBattleFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMapGame(uint64(l))
	}
	if m.IsSuccess {
		n += 2
	}
	return n
}

func (m *MapGame_MeetBattleFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapGame_BuildArmsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	if m.Opt != 0 {
		n += 1 + sovMapGame(uint64(m.Opt))
	}
	if m.EventId != 0 {
		n += 1 + sovMapGame(uint64(m.EventId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapGame(uint64(m.GameId))
	}
	return n
}

func (m *MapGame_BuildArmsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMapGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapGame(x uint64) (n int) {
	return sovMapGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MapGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_TreasureChestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasureChestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasureChestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkillSuccess = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_TreasureChestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasureChestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasureChestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_CollectMineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectMineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectMineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collect", wireType)
			}
			m.Collect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collect |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_CollectMineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectMineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectMineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_BlackMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlackMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlackMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_BlackMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlackMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlackMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawId", wireType)
			}
			m.DrawId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_JigsawPuzzleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JigsawPuzzleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JigsawPuzzleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			m.Opt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_JigsawPuzzleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JigsawPuzzleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JigsawPuzzleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_CardMatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardMatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardMatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			m.Opt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_CardMatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardMatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardMatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_WantingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WantingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WantingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_WantingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WantingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WantingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_MeetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			m.Opt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSucc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSucc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_MeetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEventId", wireType)
			}
			m.NewEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGameId", wireType)
			}
			m.NewGameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_MeetBattleStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeetBattleStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeetBattleStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			m.Opt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_MeetBattleStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeetBattleStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeetBattleStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sbp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sbp == nil {
				m.Sbp = &models.SingleBattleParam{}
			}
			if err := m.Sbp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_MeetBattleFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeetBattleFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeetBattleFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_MeetBattleFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeetBattleFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeetBattleFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_BuildArmsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildArmsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildArmsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			m.Opt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapGame_BuildArmsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildArmsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildArmsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapGame = fmt.Errorf("proto: unexpected end of group")
)
