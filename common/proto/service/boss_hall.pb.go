// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/boss_hall.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BossHallErrorCode int32

const (
	BossHallErrorCode_ErrBossHallSystem     BossHallErrorCode = 0
	BossHallErrorCode_ErrBossHallNotData    BossHallErrorCode = 1
	BossHallErrorCode_ErrBossHallConfig     BossHallErrorCode = 2
	BossHallErrorCode_ErrBossId             BossHallErrorCode = 3
	BossHallErrorCode_ErrBossJoinTimesLimit BossHallErrorCode = 4
	BossHallErrorCode_ErrBossKillTimesLimit BossHallErrorCode = 5
	BossHallErrorCode_ErrBossHallNotOpen    BossHallErrorCode = 6
	BossHallErrorCode_ErrBossHallNotUnlock  BossHallErrorCode = 7
)

var BossHallErrorCode_name = map[int32]string{
	0: "ErrBossHallSystem",
	1: "ErrBossHallNotData",
	2: "ErrBossHallConfig",
	3: "ErrBossId",
	4: "ErrBossJoinTimesLimit",
	5: "ErrBossKillTimesLimit",
	6: "ErrBossHallNotOpen",
	7: "ErrBossHallNotUnlock",
}

var BossHallErrorCode_value = map[string]int32{
	"ErrBossHallSystem":     0,
	"ErrBossHallNotData":    1,
	"ErrBossHallConfig":     2,
	"ErrBossId":             3,
	"ErrBossJoinTimesLimit": 4,
	"ErrBossKillTimesLimit": 5,
	"ErrBossHallNotOpen":    6,
	"ErrBossHallNotUnlock":  7,
}

func (BossHallErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4141986f3036d6cd, []int{0}
}

type BossHall struct {
}

func (m *BossHall) Reset()      { *m = BossHall{} }
func (*BossHall) ProtoMessage() {}
func (*BossHall) Descriptor() ([]byte, []int) {
	return fileDescriptor_4141986f3036d6cd, []int{0}
}
func (m *BossHall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossHall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossHall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossHall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossHall.Merge(m, src)
}
func (m *BossHall) XXX_Size() int {
	return m.Size()
}
func (m *BossHall) XXX_DiscardUnknown() {
	xxx_messageInfo_BossHall.DiscardUnknown(m)
}

var xxx_messageInfo_BossHall proto.InternalMessageInfo

func (*BossHall) XXX_MessageName() string {
	return "service.BossHall"
}

// 查询剩余可领奖次数和领奖励情况
type BossHall_BossHallGetInfoRequest struct {
}

func (m *BossHall_BossHallGetInfoRequest) Reset()      { *m = BossHall_BossHallGetInfoRequest{} }
func (*BossHall_BossHallGetInfoRequest) ProtoMessage() {}
func (*BossHall_BossHallGetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4141986f3036d6cd, []int{0, 0}
}
func (m *BossHall_BossHallGetInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossHall_BossHallGetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossHall_BossHallGetInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossHall_BossHallGetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossHall_BossHallGetInfoRequest.Merge(m, src)
}
func (m *BossHall_BossHallGetInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *BossHall_BossHallGetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BossHall_BossHallGetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BossHall_BossHallGetInfoRequest proto.InternalMessageInfo

func (*BossHall_BossHallGetInfoRequest) XXX_MessageName() string {
	return "service.BossHall.BossHallGetInfoRequest"
}

type BossHall_BossHallGetInfoResponse struct {
	LeftJoinTimes int64                      `protobuf:"varint,1,opt,name=left_join_times,json=leftJoinTimes,proto3" json:"left_join_times,omitempty"`
	LeftKillTimes int64                      `protobuf:"varint,2,opt,name=left_kill_times,json=leftKillTimes,proto3" json:"left_kill_times,omitempty"`
	JoinInfo      []*models.BossKillJoinInfo `protobuf:"bytes,3,rep,name=join_info,json=joinInfo,proto3" json:"join_info,omitempty"`
	KillInfo      []*models.BossKillJoinInfo `protobuf:"bytes,4,rep,name=kill_info,json=killInfo,proto3" json:"kill_info,omitempty"`
	CanEnter      bool                       `protobuf:"varint,5,opt,name=can_enter,json=canEnter,proto3" json:"can_enter,omitempty"`
}

func (m *BossHall_BossHallGetInfoResponse) Reset()      { *m = BossHall_BossHallGetInfoResponse{} }
func (*BossHall_BossHallGetInfoResponse) ProtoMessage() {}
func (*BossHall_BossHallGetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4141986f3036d6cd, []int{0, 1}
}
func (m *BossHall_BossHallGetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossHall_BossHallGetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossHall_BossHallGetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossHall_BossHallGetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossHall_BossHallGetInfoResponse.Merge(m, src)
}
func (m *BossHall_BossHallGetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *BossHall_BossHallGetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BossHall_BossHallGetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BossHall_BossHallGetInfoResponse proto.InternalMessageInfo

func (m *BossHall_BossHallGetInfoResponse) GetLeftJoinTimes() int64 {
	if m != nil {
		return m.LeftJoinTimes
	}
	return 0
}

func (m *BossHall_BossHallGetInfoResponse) GetLeftKillTimes() int64 {
	if m != nil {
		return m.LeftKillTimes
	}
	return 0
}

func (m *BossHall_BossHallGetInfoResponse) GetJoinInfo() []*models.BossKillJoinInfo {
	if m != nil {
		return m.JoinInfo
	}
	return nil
}

func (m *BossHall_BossHallGetInfoResponse) GetKillInfo() []*models.BossKillJoinInfo {
	if m != nil {
		return m.KillInfo
	}
	return nil
}

func (m *BossHall_BossHallGetInfoResponse) GetCanEnter() bool {
	if m != nil {
		return m.CanEnter
	}
	return false
}

func (*BossHall_BossHallGetInfoResponse) XXX_MessageName() string {
	return "service.BossHall.BossHallGetInfoResponse"
}

// 获取恶魔秘境的服务信息，给CppEnter 用
type BossHall_GetBattleInfoRequest struct {
	BossId int64 `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
}

func (m *BossHall_GetBattleInfoRequest) Reset()      { *m = BossHall_GetBattleInfoRequest{} }
func (*BossHall_GetBattleInfoRequest) ProtoMessage() {}
func (*BossHall_GetBattleInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4141986f3036d6cd, []int{0, 2}
}
func (m *BossHall_GetBattleInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossHall_GetBattleInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossHall_GetBattleInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossHall_GetBattleInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossHall_GetBattleInfoRequest.Merge(m, src)
}
func (m *BossHall_GetBattleInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *BossHall_GetBattleInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BossHall_GetBattleInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BossHall_GetBattleInfoRequest proto.InternalMessageInfo

func (m *BossHall_GetBattleInfoRequest) GetBossId() int64 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (*BossHall_GetBattleInfoRequest) XXX_MessageName() string {
	return "service.BossHall.GetBattleInfoRequest"
}

type BossHall_GetBattleInfoResponse struct {
	MapSceneId int64 `protobuf:"varint,1,opt,name=map_scene_id,json=mapSceneId,proto3" json:"map_scene_id,omitempty"`
	BattleId   int64 `protobuf:"varint,2,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *BossHall_GetBattleInfoResponse) Reset()      { *m = BossHall_GetBattleInfoResponse{} }
func (*BossHall_GetBattleInfoResponse) ProtoMessage() {}
func (*BossHall_GetBattleInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4141986f3036d6cd, []int{0, 3}
}
func (m *BossHall_GetBattleInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossHall_GetBattleInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossHall_GetBattleInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossHall_GetBattleInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossHall_GetBattleInfoResponse.Merge(m, src)
}
func (m *BossHall_GetBattleInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *BossHall_GetBattleInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BossHall_GetBattleInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BossHall_GetBattleInfoResponse proto.InternalMessageInfo

func (m *BossHall_GetBattleInfoResponse) GetMapSceneId() int64 {
	if m != nil {
		return m.MapSceneId
	}
	return 0
}

func (m *BossHall_GetBattleInfoResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*BossHall_GetBattleInfoResponse) XXX_MessageName() string {
	return "service.BossHall.GetBattleInfoResponse"
}

type BossHall_MustOpenRequest struct {
	Open bool `protobuf:"varint,1,opt,name=open,proto3" json:"open,omitempty"`
}

func (m *BossHall_MustOpenRequest) Reset()      { *m = BossHall_MustOpenRequest{} }
func (*BossHall_MustOpenRequest) ProtoMessage() {}
func (*BossHall_MustOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4141986f3036d6cd, []int{0, 4}
}
func (m *BossHall_MustOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossHall_MustOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossHall_MustOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossHall_MustOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossHall_MustOpenRequest.Merge(m, src)
}
func (m *BossHall_MustOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *BossHall_MustOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BossHall_MustOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BossHall_MustOpenRequest proto.InternalMessageInfo

func (m *BossHall_MustOpenRequest) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

func (*BossHall_MustOpenRequest) XXX_MessageName() string {
	return "service.BossHall.MustOpenRequest"
}

type BossHall_MustOpenResponse struct {
}

func (m *BossHall_MustOpenResponse) Reset()      { *m = BossHall_MustOpenResponse{} }
func (*BossHall_MustOpenResponse) ProtoMessage() {}
func (*BossHall_MustOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4141986f3036d6cd, []int{0, 5}
}
func (m *BossHall_MustOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossHall_MustOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossHall_MustOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossHall_MustOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossHall_MustOpenResponse.Merge(m, src)
}
func (m *BossHall_MustOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *BossHall_MustOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BossHall_MustOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BossHall_MustOpenResponse proto.InternalMessageInfo

func (*BossHall_MustOpenResponse) XXX_MessageName() string {
	return "service.BossHall.MustOpenResponse"
}
func init() {
	proto.RegisterEnum("service.BossHallErrorCode", BossHallErrorCode_name, BossHallErrorCode_value)
	proto.RegisterType((*BossHall)(nil), "service.BossHall")
	proto.RegisterType((*BossHall_BossHallGetInfoRequest)(nil), "service.BossHall.BossHallGetInfoRequest")
	proto.RegisterType((*BossHall_BossHallGetInfoResponse)(nil), "service.BossHall.BossHallGetInfoResponse")
	proto.RegisterType((*BossHall_GetBattleInfoRequest)(nil), "service.BossHall.GetBattleInfoRequest")
	proto.RegisterType((*BossHall_GetBattleInfoResponse)(nil), "service.BossHall.GetBattleInfoResponse")
	proto.RegisterType((*BossHall_MustOpenRequest)(nil), "service.BossHall.MustOpenRequest")
	proto.RegisterType((*BossHall_MustOpenResponse)(nil), "service.BossHall.MustOpenResponse")
}

func init() { proto.RegisterFile("proto/service/boss_hall.proto", fileDescriptor_4141986f3036d6cd) }

var fileDescriptor_4141986f3036d6cd = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcb, 0x4f, 0x13, 0x5d,
	0x18, 0xc6, 0x3b, 0x94, 0x4b, 0x39, 0x1f, 0x9f, 0x0c, 0x27, 0x5c, 0xc6, 0x41, 0x26, 0xc5, 0x44,
	0x83, 0x24, 0x52, 0x23, 0x71, 0x61, 0xdc, 0x71, 0x09, 0xd6, 0x0b, 0x26, 0x45, 0x5d, 0xb8, 0x69,
	0x86, 0x99, 0x53, 0x1c, 0x98, 0x39, 0xa7, 0xce, 0x1c, 0x48, 0xd8, 0x81, 0xc6, 0x28, 0x4d, 0xaa,
	0x24, 0x62, 0x90, 0x04, 0x63, 0xd4, 0x05, 0xc4, 0x44, 0x20, 0x6a, 0x09, 0x09, 0xc2, 0x9a, 0x25,
	0x4b, 0x76, 0x6a, 0xcb, 0x4c, 0xdb, 0x9d, 0x0b, 0xff, 0x00, 0x33, 0xb7, 0x42, 0xab, 0x89, 0xbb,
	0xf3, 0x3e, 0xcf, 0xef, 0x79, 0xe7, 0x9d, 0xf7, 0x4c, 0x06, 0x74, 0x24, 0x75, 0x42, 0x49, 0xc4,
	0x40, 0xfa, 0x94, 0x22, 0xa1, 0xc8, 0x28, 0x31, 0x8c, 0xf8, 0x7d, 0x51, 0x55, 0x7b, 0x1c, 0x1d,
	0xd6, 0x79, 0x06, 0x7f, 0xca, 0xe5, 0x34, 0x22, 0x23, 0xd5, 0xa8, 0xc4, 0xf8, 0xd6, 0x72, 0x57,
	0x1c, 0xf3, 0xf4, 0xb6, 0x0a, 0xdd, 0x40, 0x9e, 0x71, 0xb2, 0xc2, 0xa0, 0x54, 0xf5, 0xad, 0xf6,
	0x32, 0x4b, 0x94, 0xa8, 0x32, 0xa5, 0xd0, 0x69, 0xd7, 0x3c, 0xfd, 0x2d, 0x08, 0x42, 0x7d, 0xc4,
	0x30, 0xae, 0x8a, 0xaa, 0xca, 0x73, 0xa0, 0xd5, 0x3f, 0x0f, 0x21, 0x1a, 0xc5, 0x09, 0x12, 0x43,
	0x0f, 0x26, 0x91, 0x41, 0xf9, 0x5f, 0x0c, 0x68, 0xfb, 0xc3, 0x32, 0x92, 0x04, 0x1b, 0x08, 0x9e,
	0x05, 0x8d, 0x2a, 0x4a, 0xd0, 0xf8, 0x38, 0x51, 0x70, 0x9c, 0x2a, 0x1a, 0x32, 0x38, 0x26, 0xcc,
	0x74, 0x05, 0x63, 0xff, 0xdb, 0xf2, 0x35, 0xa2, 0xe0, 0xdb, 0xb6, 0x58, 0xe2, 0x26, 0x14, 0x55,
	0xf5, 0xb8, 0xaa, 0x23, 0xee, 0xba, 0xa2, 0xaa, 0x2e, 0x77, 0x09, 0xd4, 0x3b, 0xad, 0x14, 0x9c,
	0x20, 0x5c, 0x30, 0x1c, 0xec, 0xfa, 0xef, 0x22, 0xd7, 0xe3, 0x4e, 0xdf, 0x63, 0xcf, 0x60, 0x93,
	0x76, 0x57, 0x67, 0x88, 0xd0, 0xb8, 0x77, 0xb2, 0x63, 0x4e, 0x67, 0x27, 0x56, 0xfd, 0xaf, 0x98,
	0x8d, 0x3a, 0xb1, 0x76, 0x50, 0x2f, 0x89, 0x38, 0x8e, 0x30, 0x45, 0x3a, 0x57, 0x13, 0x66, 0xba,
	0x42, 0xb1, 0x90, 0x24, 0xe2, 0x41, 0xbb, 0xe6, 0x23, 0xa0, 0x79, 0x08, 0xd1, 0x3e, 0x67, 0x9b,
	0xc7, 0xd6, 0x01, 0xdb, 0x40, 0x9d, 0x73, 0x63, 0x8a, 0xec, 0xbd, 0x6a, 0xad, 0x5d, 0x46, 0x65,
	0xfe, 0x2e, 0x68, 0xa9, 0x08, 0x78, 0x4b, 0x0a, 0x83, 0x06, 0x4d, 0x4c, 0xc6, 0x0d, 0x09, 0x61,
	0x74, 0x14, 0x03, 0x9a, 0x98, 0x1c, 0xb1, 0xa5, 0xa8, 0x6c, 0x0f, 0xe2, 0x5e, 0x9b, 0x6d, 0xbb,
	0x8b, 0x09, 0xb9, 0x42, 0x54, 0xe6, 0xcf, 0x80, 0xc6, 0x9b, 0x93, 0x06, 0xbd, 0x95, 0x44, 0xd8,
	0x9f, 0x01, 0x82, 0x6a, 0x92, 0x44, 0xd8, 0xe9, 0x14, 0x8a, 0x39, 0x67, 0x1e, 0x02, 0xf6, 0x08,
	0x73, 0x9f, 0xdc, 0xbd, 0x18, 0x04, 0x4d, 0xfe, 0xd5, 0x0d, 0xea, 0x3a, 0xd1, 0xfb, 0x89, 0x8c,
	0xe0, 0x39, 0xd0, 0x34, 0xa8, 0xeb, 0xbe, 0x3e, 0x32, 0x6d, 0x50, 0xa4, 0xb1, 0x01, 0x1e, 0xa6,
	0x32, 0xdc, 0x09, 0xd8, 0x90, 0xff, 0xbc, 0x9d, 0xdf, 0x7e, 0x53, 0x5c, 0x58, 0x2a, 0xac, 0xaf,
	0xc3, 0x6e, 0x00, 0x8f, 0xa1, 0xc3, 0x84, 0x0e, 0x88, 0x54, 0x64, 0x19, 0x9f, 0xb5, 0x3e, 0xbd,
	0xb5, 0x96, 0xe7, 0xac, 0x97, 0x1b, 0x56, 0x7a, 0xad, 0xa2, 0x6d, 0x3f, 0xc1, 0x09, 0x65, 0x8c,
	0xad, 0xf2, 0xd1, 0xe2, 0xe3, 0x74, 0x7e, 0x67, 0xcd, 0x6b, 0xdb, 0x09, 0xea, 0x3d, 0x34, 0x2a,
	0xb3, 0x41, 0x1f, 0x71, 0xea, 0x01, 0x0f, 0xb9, 0x0c, 0x5a, 0x3c, 0xa4, 0xf4, 0x15, 0xdd, 0x50,
	0x34, 0x85, 0xb2, 0xd5, 0xbc, 0x90, 0xca, 0x70, 0x3c, 0xe4, 0xcc, 0xe7, 0x0f, 0x0f, 0xb7, 0x9e,
	0x99, 0x4f, 0xb6, 0xad, 0xd7, 0x33, 0x85, 0xdd, 0x5d, 0xf3, 0xe9, 0xc6, 0xe1, 0x56, 0xaa, 0xb8,
	0x34, 0x0f, 0x7b, 0x4b, 0xd1, 0xd2, 0x87, 0xe5, 0x46, 0x6b, 0x78, 0x2e, 0x95, 0xe1, 0x9a, 0x21,
	0xfc, 0x4b, 0xe8, 0x42, 0xe5, 0x9b, 0xda, 0x8b, 0x64, 0x6b, 0xfd, 0xc4, 0xe1, 0x56, 0xda, 0x5c,
	0x5e, 0x35, 0xbf, 0xce, 0x98, 0xf3, 0xeb, 0xd6, 0xe2, 0x66, 0x71, 0xf1, 0x0b, 0xbc, 0x02, 0x9a,
	0xcb, 0x13, 0x77, 0xb0, 0x4a, 0xa4, 0x09, 0xb6, 0x8e, 0xef, 0x4c, 0x65, 0xb8, 0x0e, 0xd8, 0x6e,
	0xee, 0xbc, 0x30, 0xe7, 0xd2, 0xd6, 0xec, 0x66, 0xf1, 0xe3, 0x42, 0x7e, 0xe5, 0x95, 0xf9, 0xee,
	0x91, 0xb5, 0xfc, 0xa1, 0xb0, 0xf2, 0xbe, 0xb8, 0x30, 0xdb, 0x37, 0x7c, 0xf0, 0x43, 0x08, 0xac,
	0x66, 0x05, 0x66, 0x2f, 0x2b, 0x30, 0xfb, 0x59, 0x81, 0xf9, 0x9e, 0x15, 0x98, 0x42, 0x56, 0x08,
	0xfc, 0xcc, 0x0a, 0xcc, 0x7c, 0x4e, 0x08, 0xec, 0xe5, 0x04, 0x66, 0x3f, 0x27, 0x04, 0x0e, 0x72,
	0x42, 0xe0, 0x5e, 0x58, 0x22, 0x0a, 0x3e, 0x6f, 0xff, 0x3e, 0x90, 0x1e, 0x91, 0x88, 0xa6, 0x11,
	0x1c, 0x29, 0xfb, 0xd7, 0x8c, 0xd6, 0x3a, 0x65, 0xef, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07,
	0x86, 0x5a, 0x86, 0x83, 0x04, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossHall.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossHall_BossHallGetInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossHall_BossHallGetInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossHall_GetBattleInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossHall_GetBattleInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossHall_MustOpenRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossHall_MustOpenResponse.Get().(proto.Message)
	})
}

var poolBossHall = &sync.Pool{New: func() interface{} { return &BossHall{} }}

func (m *BossHall) ReleasePool() { m.Reset(); poolBossHall.Put(m); m = nil }

var poolBossHall_BossHallGetInfoRequest = &sync.Pool{New: func() interface{} { return &BossHall_BossHallGetInfoRequest{} }}

func (m *BossHall_BossHallGetInfoRequest) ReleasePool() {
	m.Reset()
	poolBossHall_BossHallGetInfoRequest.Put(m)
	m = nil
}

var poolBossHall_BossHallGetInfoResponse = &sync.Pool{New: func() interface{} { return &BossHall_BossHallGetInfoResponse{} }}

func (m *BossHall_BossHallGetInfoResponse) ReleasePool() {
	m.Reset()
	poolBossHall_BossHallGetInfoResponse.Put(m)
	m = nil
}

var poolBossHall_GetBattleInfoRequest = &sync.Pool{New: func() interface{} { return &BossHall_GetBattleInfoRequest{} }}

func (m *BossHall_GetBattleInfoRequest) ReleasePool() {
	m.Reset()
	poolBossHall_GetBattleInfoRequest.Put(m)
	m = nil
}

var poolBossHall_GetBattleInfoResponse = &sync.Pool{New: func() interface{} { return &BossHall_GetBattleInfoResponse{} }}

func (m *BossHall_GetBattleInfoResponse) ReleasePool() {
	m.Reset()
	poolBossHall_GetBattleInfoResponse.Put(m)
	m = nil
}

var poolBossHall_MustOpenRequest = &sync.Pool{New: func() interface{} { return &BossHall_MustOpenRequest{} }}

func (m *BossHall_MustOpenRequest) ReleasePool() {
	m.Reset()
	poolBossHall_MustOpenRequest.Put(m)
	m = nil
}

var poolBossHall_MustOpenResponse = &sync.Pool{New: func() interface{} { return &BossHall_MustOpenResponse{} }}

func (m *BossHall_MustOpenResponse) ReleasePool() {
	m.Reset()
	poolBossHall_MustOpenResponse.Put(m)
	m = nil
}
func (x BossHallErrorCode) String() string {
	s, ok := BossHallErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BossHall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossHall)
	if !ok {
		that2, ok := that.(BossHall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BossHall_BossHallGetInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossHall_BossHallGetInfoRequest)
	if !ok {
		that2, ok := that.(BossHall_BossHallGetInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BossHall_BossHallGetInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossHall_BossHallGetInfoResponse)
	if !ok {
		that2, ok := that.(BossHall_BossHallGetInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LeftJoinTimes != that1.LeftJoinTimes {
		return false
	}
	if this.LeftKillTimes != that1.LeftKillTimes {
		return false
	}
	if len(this.JoinInfo) != len(that1.JoinInfo) {
		return false
	}
	for i := range this.JoinInfo {
		if !this.JoinInfo[i].Equal(that1.JoinInfo[i]) {
			return false
		}
	}
	if len(this.KillInfo) != len(that1.KillInfo) {
		return false
	}
	for i := range this.KillInfo {
		if !this.KillInfo[i].Equal(that1.KillInfo[i]) {
			return false
		}
	}
	if this.CanEnter != that1.CanEnter {
		return false
	}
	return true
}
func (this *BossHall_GetBattleInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossHall_GetBattleInfoRequest)
	if !ok {
		that2, ok := that.(BossHall_GetBattleInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	return true
}
func (this *BossHall_GetBattleInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossHall_GetBattleInfoResponse)
	if !ok {
		that2, ok := that.(BossHall_GetBattleInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapSceneId != that1.MapSceneId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *BossHall_MustOpenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossHall_MustOpenRequest)
	if !ok {
		that2, ok := that.(BossHall_MustOpenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Open != that1.Open {
		return false
	}
	return true
}
func (this *BossHall_MustOpenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossHall_MustOpenResponse)
	if !ok {
		that2, ok := that.(BossHall_MustOpenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *BossHall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossHall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossHall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BossHall_BossHallGetInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossHall_BossHallGetInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossHall_BossHallGetInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BossHall_BossHallGetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossHall_BossHallGetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossHall_BossHallGetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanEnter {
		i--
		if m.CanEnter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.KillInfo) > 0 {
		for iNdEx := len(m.KillInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBossHall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.JoinInfo) > 0 {
		for iNdEx := len(m.JoinInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoinInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBossHall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LeftKillTimes != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.LeftKillTimes))
		i--
		dAtA[i] = 0x10
	}
	if m.LeftJoinTimes != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.LeftJoinTimes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BossHall_GetBattleInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossHall_GetBattleInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossHall_GetBattleInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BossId != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BossHall_GetBattleInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossHall_GetBattleInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossHall_GetBattleInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapSceneId != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.MapSceneId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BossHall_MustOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossHall_MustOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossHall_MustOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Open {
		i--
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BossHall_MustOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossHall_MustOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossHall_MustOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintBossHall(dAtA []byte, offset int, v uint64) int {
	offset -= sovBossHall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *BossHall) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *BossHall_BossHallGetInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *BossHall_BossHallGetInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.LeftJoinTimes != 0 {
		w.RawByte('"')
		w.RawString("left_join_times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LeftJoinTimes))
		needWriteComma = true
	}
	if m.LeftKillTimes != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("left_kill_times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LeftKillTimes))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("join_info")
	w.RawByte('"')
	w.RawByte(':')
	if m.JoinInfo == nil {
		w.RawString("null")
	} else if len(m.JoinInfo) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.JoinInfo {
			v.JsonBytes(w)
			if i != len(m.JoinInfo)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("kill_info")
	w.RawByte('"')
	w.RawByte(':')
	if m.KillInfo == nil {
		w.RawString("null")
	} else if len(m.KillInfo) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.KillInfo {
			v.JsonBytes(w)
			if i != len(m.KillInfo)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.CanEnter {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("can_enter")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.CanEnter)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossHall_GetBattleInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BossId != 0 {
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossHall_GetBattleInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapSceneId != 0 {
		w.RawByte('"')
		w.RawString("map_scene_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapSceneId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossHall_MustOpenRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Open {
		w.RawByte('"')
		w.RawString("open")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Open)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossHall_MustOpenResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *BossHall) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossHall) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossHall) GoString() string {
	return m.String()
}

func (m *BossHall_BossHallGetInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossHall_BossHallGetInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossHall_BossHallGetInfoRequest) GoString() string {
	return m.String()
}

func (m *BossHall_BossHallGetInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossHall_BossHallGetInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossHall_BossHallGetInfoResponse) GoString() string {
	return m.String()
}

func (m *BossHall_GetBattleInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossHall_GetBattleInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossHall_GetBattleInfoRequest) GoString() string {
	return m.String()
}

func (m *BossHall_GetBattleInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossHall_GetBattleInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossHall_GetBattleInfoResponse) GoString() string {
	return m.String()
}

func (m *BossHall_MustOpenRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossHall_MustOpenRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossHall_MustOpenRequest) GoString() string {
	return m.String()
}

func (m *BossHall_MustOpenResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossHall_MustOpenResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossHall_MustOpenResponse) GoString() string {
	return m.String()
}

func (m *BossHall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BossHall_BossHallGetInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BossHall_BossHallGetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeftJoinTimes != 0 {
		n += 1 + sovBossHall(uint64(m.LeftJoinTimes))
	}
	if m.LeftKillTimes != 0 {
		n += 1 + sovBossHall(uint64(m.LeftKillTimes))
	}
	if len(m.JoinInfo) > 0 {
		for _, e := range m.JoinInfo {
			l = e.Size()
			n += 1 + l + sovBossHall(uint64(l))
		}
	}
	if len(m.KillInfo) > 0 {
		for _, e := range m.KillInfo {
			l = e.Size()
			n += 1 + l + sovBossHall(uint64(l))
		}
	}
	if m.CanEnter {
		n += 2
	}
	return n
}

func (m *BossHall_GetBattleInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossId != 0 {
		n += 1 + sovBossHall(uint64(m.BossId))
	}
	return n
}

func (m *BossHall_GetBattleInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapSceneId != 0 {
		n += 1 + sovBossHall(uint64(m.MapSceneId))
	}
	if m.BattleId != 0 {
		n += 1 + sovBossHall(uint64(m.BattleId))
	}
	return n
}

func (m *BossHall_MustOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Open {
		n += 2
	}
	return n
}

func (m *BossHall_MustOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovBossHall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBossHall(x uint64) (n int) {
	return sovBossHall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BossHall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossHall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossHall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossHall_BossHallGetInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossHallGetInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossHallGetInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossHall_BossHallGetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossHallGetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossHallGetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftJoinTimes", wireType)
			}
			m.LeftJoinTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftJoinTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftKillTimes", wireType)
			}
			m.LeftKillTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftKillTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBossHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBossHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinInfo = append(m.JoinInfo, &models.BossKillJoinInfo{})
			if err := m.JoinInfo[len(m.JoinInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBossHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBossHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillInfo = append(m.KillInfo, &models.BossKillJoinInfo{})
			if err := m.KillInfo[len(m.KillInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanEnter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanEnter = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossHall_GetBattleInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBattleInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBattleInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossHall_GetBattleInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBattleInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBattleInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapSceneId", wireType)
			}
			m.MapSceneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapSceneId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossHall_MustOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MustOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MustOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossHall_MustOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MustOpenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MustOpenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBossHall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBossHall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBossHall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBossHall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBossHall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBossHall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBossHall = fmt.Errorf("proto: unexpected end of group")
)
