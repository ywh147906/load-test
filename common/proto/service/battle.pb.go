// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/battle.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	cppbattle "github.com/ywh147906/load-test/common/proto/cppbattle"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	newbattle "github.com/ywh147906/load-test/common/proto/newbattle"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BattleErrorCode int32

const (
	BattleErrorCode_ErrCanNotToggle     BattleErrorCode = 0
	BattleErrorCode_ErrNoDefaultMap     BattleErrorCode = 1
	BattleErrorCode_ErrBattleLineFull   BattleErrorCode = 2
	BattleErrorCode_ErrBattleMedicineCD BattleErrorCode = 3
	BattleErrorCode_ErrBossHallDead     BattleErrorCode = 4
)

var BattleErrorCode_name = map[int32]string{
	0: "ErrCanNotToggle",
	1: "ErrNoDefaultMap",
	2: "ErrBattleLineFull",
	3: "ErrBattleMedicineCD",
	4: "ErrBossHallDead",
}

var BattleErrorCode_value = map[string]int32{
	"ErrCanNotToggle":     0,
	"ErrNoDefaultMap":     1,
	"ErrBattleLineFull":   2,
	"ErrBattleMedicineCD": 3,
	"ErrBossHallDead":     4,
}

func (BattleErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0}
}

type GameBattle struct {
}

func (m *GameBattle) Reset()      { *m = GameBattle{} }
func (*GameBattle) ProtoMessage() {}
func (*GameBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0}
}
func (m *GameBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle.Merge(m, src)
}
func (m *GameBattle) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle proto.InternalMessageInfo

func (*GameBattle) XXX_MessageName() string {
	return "service.GameBattle"
}

// 进入地图区域
type GameBattle_EnterAreaRequest struct {
	Pos            *newbattle.Vector2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId          int64              `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64              `protobuf:"varint,3,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *GameBattle_EnterAreaRequest) Reset()      { *m = GameBattle_EnterAreaRequest{} }
func (*GameBattle_EnterAreaRequest) ProtoMessage() {}
func (*GameBattle_EnterAreaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 0}
}
func (m *GameBattle_EnterAreaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_EnterAreaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_EnterAreaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_EnterAreaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_EnterAreaRequest.Merge(m, src)
}
func (m *GameBattle_EnterAreaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_EnterAreaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_EnterAreaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_EnterAreaRequest proto.InternalMessageInfo

func (m *GameBattle_EnterAreaRequest) GetPos() *newbattle.Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *GameBattle_EnterAreaRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GameBattle_EnterAreaRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*GameBattle_EnterAreaRequest) XXX_MessageName() string {
	return "service.GameBattle.EnterAreaRequest"
}

type GameBattle_EnterAreaResponse struct {
	Pos        *newbattle.Vector2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId      int64              `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	ServerTime float64            `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *GameBattle_EnterAreaResponse) Reset()      { *m = GameBattle_EnterAreaResponse{} }
func (*GameBattle_EnterAreaResponse) ProtoMessage() {}
func (*GameBattle_EnterAreaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 1}
}
func (m *GameBattle_EnterAreaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_EnterAreaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_EnterAreaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_EnterAreaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_EnterAreaResponse.Merge(m, src)
}
func (m *GameBattle_EnterAreaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_EnterAreaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_EnterAreaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_EnterAreaResponse proto.InternalMessageInfo

func (m *GameBattle_EnterAreaResponse) GetPos() *newbattle.Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *GameBattle_EnterAreaResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GameBattle_EnterAreaResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*GameBattle_EnterAreaResponse) XXX_MessageName() string {
	return "service.GameBattle.EnterAreaResponse"
}

type GameBattle_CPPCanToggleHangupRequest struct {
	MapId          int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64 `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *GameBattle_CPPCanToggleHangupRequest) Reset()      { *m = GameBattle_CPPCanToggleHangupRequest{} }
func (*GameBattle_CPPCanToggleHangupRequest) ProtoMessage() {}
func (*GameBattle_CPPCanToggleHangupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 2}
}
func (m *GameBattle_CPPCanToggleHangupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPCanToggleHangupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPCanToggleHangupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPCanToggleHangupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPCanToggleHangupRequest.Merge(m, src)
}
func (m *GameBattle_CPPCanToggleHangupRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPCanToggleHangupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPCanToggleHangupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPCanToggleHangupRequest proto.InternalMessageInfo

func (m *GameBattle_CPPCanToggleHangupRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GameBattle_CPPCanToggleHangupRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*GameBattle_CPPCanToggleHangupRequest) XXX_MessageName() string {
	return "service.GameBattle.CPPCanToggleHangupRequest"
}

type GameBattle_CPPCanToggleHangupResponse struct {
}

func (m *GameBattle_CPPCanToggleHangupResponse) Reset()      { *m = GameBattle_CPPCanToggleHangupResponse{} }
func (*GameBattle_CPPCanToggleHangupResponse) ProtoMessage() {}
func (*GameBattle_CPPCanToggleHangupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 3}
}
func (m *GameBattle_CPPCanToggleHangupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPCanToggleHangupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPCanToggleHangupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPCanToggleHangupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPCanToggleHangupResponse.Merge(m, src)
}
func (m *GameBattle_CPPCanToggleHangupResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPCanToggleHangupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPCanToggleHangupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPCanToggleHangupResponse proto.InternalMessageInfo

func (*GameBattle_CPPCanToggleHangupResponse) XXX_MessageName() string {
	return "service.GameBattle.CPPCanToggleHangupResponse"
}

type GameBattle_CPPEnterBattleRequest struct {
	Pos            *cppbattle.CPPBattle_Vec2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId          int64                     `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64                     `protobuf:"varint,3,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	ConfigId       int64                     `protobuf:"varint,4,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	IsSingle       bool                      `protobuf:"varint,5,opt,name=is_single,json=isSingle,proto3" json:"is_single,omitempty"`
	Towards        *cppbattle.CPPBattle_Vec2 `protobuf:"bytes,6,opt,name=towards,proto3" json:"towards,omitempty"`
}

func (m *GameBattle_CPPEnterBattleRequest) Reset()      { *m = GameBattle_CPPEnterBattleRequest{} }
func (*GameBattle_CPPEnterBattleRequest) ProtoMessage() {}
func (*GameBattle_CPPEnterBattleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 4}
}
func (m *GameBattle_CPPEnterBattleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPEnterBattleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPEnterBattleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPEnterBattleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPEnterBattleRequest.Merge(m, src)
}
func (m *GameBattle_CPPEnterBattleRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPEnterBattleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPEnterBattleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPEnterBattleRequest proto.InternalMessageInfo

func (m *GameBattle_CPPEnterBattleRequest) GetPos() *cppbattle.CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *GameBattle_CPPEnterBattleRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GameBattle_CPPEnterBattleRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *GameBattle_CPPEnterBattleRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *GameBattle_CPPEnterBattleRequest) GetIsSingle() bool {
	if m != nil {
		return m.IsSingle
	}
	return false
}

func (m *GameBattle_CPPEnterBattleRequest) GetTowards() *cppbattle.CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (*GameBattle_CPPEnterBattleRequest) XXX_MessageName() string {
	return "service.GameBattle.CPPEnterBattleRequest"
}

type GameBattle_CPPEnterBattleResponse struct {
	MapId          int64  `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Ip             string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port           int64  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Token          string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	BattleServerId int64  `protobuf:"varint,5,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	ErrCode        int64  `protobuf:"varint,6,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
}

func (m *GameBattle_CPPEnterBattleResponse) Reset()      { *m = GameBattle_CPPEnterBattleResponse{} }
func (*GameBattle_CPPEnterBattleResponse) ProtoMessage() {}
func (*GameBattle_CPPEnterBattleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 5}
}
func (m *GameBattle_CPPEnterBattleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPEnterBattleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPEnterBattleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPEnterBattleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPEnterBattleResponse.Merge(m, src)
}
func (m *GameBattle_CPPEnterBattleResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPEnterBattleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPEnterBattleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPEnterBattleResponse proto.InternalMessageInfo

func (m *GameBattle_CPPEnterBattleResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GameBattle_CPPEnterBattleResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GameBattle_CPPEnterBattleResponse) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GameBattle_CPPEnterBattleResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GameBattle_CPPEnterBattleResponse) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *GameBattle_CPPEnterBattleResponse) GetErrCode() int64 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (*GameBattle_CPPEnterBattleResponse) XXX_MessageName() string {
	return "service.GameBattle.CPPEnterBattleResponse"
}

type GameBattle_CPPGetBattleServerInfoRequest struct {
}

func (m *GameBattle_CPPGetBattleServerInfoRequest) Reset() {
	*m = GameBattle_CPPGetBattleServerInfoRequest{}
}
func (*GameBattle_CPPGetBattleServerInfoRequest) ProtoMessage() {}
func (*GameBattle_CPPGetBattleServerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 6}
}
func (m *GameBattle_CPPGetBattleServerInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPGetBattleServerInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPGetBattleServerInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPGetBattleServerInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPGetBattleServerInfoRequest.Merge(m, src)
}
func (m *GameBattle_CPPGetBattleServerInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPGetBattleServerInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPGetBattleServerInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPGetBattleServerInfoRequest proto.InternalMessageInfo

func (*GameBattle_CPPGetBattleServerInfoRequest) XXX_MessageName() string {
	return "service.GameBattle.CPPGetBattleServerInfoRequest"
}

type GameBattle_CPPGetBattleServerInfoResponse struct {
	HangupMapId    int64 `protobuf:"varint,1,opt,name=hangup_map_id,json=hangupMapId,proto3" json:"hangup_map_id,omitempty"`
	HangupBattleId int64 `protobuf:"varint,2,opt,name=hangup_battle_id,json=hangupBattleId,proto3" json:"hangup_battle_id,omitempty"`
}

func (m *GameBattle_CPPGetBattleServerInfoResponse) Reset() {
	*m = GameBattle_CPPGetBattleServerInfoResponse{}
}
func (*GameBattle_CPPGetBattleServerInfoResponse) ProtoMessage() {}
func (*GameBattle_CPPGetBattleServerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 7}
}
func (m *GameBattle_CPPGetBattleServerInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPGetBattleServerInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPGetBattleServerInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPGetBattleServerInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPGetBattleServerInfoResponse.Merge(m, src)
}
func (m *GameBattle_CPPGetBattleServerInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPGetBattleServerInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPGetBattleServerInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPGetBattleServerInfoResponse proto.InternalMessageInfo

func (m *GameBattle_CPPGetBattleServerInfoResponse) GetHangupMapId() int64 {
	if m != nil {
		return m.HangupMapId
	}
	return 0
}

func (m *GameBattle_CPPGetBattleServerInfoResponse) GetHangupBattleId() int64 {
	if m != nil {
		return m.HangupBattleId
	}
	return 0
}

func (*GameBattle_CPPGetBattleServerInfoResponse) XXX_MessageName() string {
	return "service.GameBattle.CPPGetBattleServerInfoResponse"
}

type GameBattle_CPPRoleOfflinePush struct {
	HangupMapId    int64   `protobuf:"varint,1,opt,name=hangup_map_id,json=hangupMapId,proto3" json:"hangup_map_id,omitempty"`
	HangupBattleId int64   `protobuf:"varint,2,opt,name=hangup_battle_id,json=hangupBattleId,proto3" json:"hangup_battle_id,omitempty"`
	HangupPosX     float32 `protobuf:"fixed32,3,opt,name=hangup_pos_x,json=hangupPosX,proto3" json:"hangup_pos_x,omitempty"`
	HangupPosY     float32 `protobuf:"fixed32,4,opt,name=hangup_pos_y,json=hangupPosY,proto3" json:"hangup_pos_y,omitempty"`
}

func (m *GameBattle_CPPRoleOfflinePush) Reset()      { *m = GameBattle_CPPRoleOfflinePush{} }
func (*GameBattle_CPPRoleOfflinePush) ProtoMessage() {}
func (*GameBattle_CPPRoleOfflinePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 8}
}
func (m *GameBattle_CPPRoleOfflinePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPRoleOfflinePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPRoleOfflinePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPRoleOfflinePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPRoleOfflinePush.Merge(m, src)
}
func (m *GameBattle_CPPRoleOfflinePush) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPRoleOfflinePush) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPRoleOfflinePush.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPRoleOfflinePush proto.InternalMessageInfo

func (m *GameBattle_CPPRoleOfflinePush) GetHangupMapId() int64 {
	if m != nil {
		return m.HangupMapId
	}
	return 0
}

func (m *GameBattle_CPPRoleOfflinePush) GetHangupBattleId() int64 {
	if m != nil {
		return m.HangupBattleId
	}
	return 0
}

func (m *GameBattle_CPPRoleOfflinePush) GetHangupPosX() float32 {
	if m != nil {
		return m.HangupPosX
	}
	return 0
}

func (m *GameBattle_CPPRoleOfflinePush) GetHangupPosY() float32 {
	if m != nil {
		return m.HangupPosY
	}
	return 0
}

func (*GameBattle_CPPRoleOfflinePush) XXX_MessageName() string {
	return "service.GameBattle.CPPRoleOfflinePush"
}

type GameBattle_CPPStageGetBattleServerIdRequest struct {
	SceneId int64 `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (m *GameBattle_CPPStageGetBattleServerIdRequest) Reset() {
	*m = GameBattle_CPPStageGetBattleServerIdRequest{}
}
func (*GameBattle_CPPStageGetBattleServerIdRequest) ProtoMessage() {}
func (*GameBattle_CPPStageGetBattleServerIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 9}
}
func (m *GameBattle_CPPStageGetBattleServerIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPStageGetBattleServerIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPStageGetBattleServerIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPStageGetBattleServerIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPStageGetBattleServerIdRequest.Merge(m, src)
}
func (m *GameBattle_CPPStageGetBattleServerIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPStageGetBattleServerIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPStageGetBattleServerIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPStageGetBattleServerIdRequest proto.InternalMessageInfo

func (m *GameBattle_CPPStageGetBattleServerIdRequest) GetSceneId() int64 {
	if m != nil {
		return m.SceneId
	}
	return 0
}

func (*GameBattle_CPPStageGetBattleServerIdRequest) XXX_MessageName() string {
	return "service.GameBattle.CPPStageGetBattleServerIdRequest"
}

type GameBattle_CPPStageGetBattleServerIdResponse struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *GameBattle_CPPStageGetBattleServerIdResponse) Reset() {
	*m = GameBattle_CPPStageGetBattleServerIdResponse{}
}
func (*GameBattle_CPPStageGetBattleServerIdResponse) ProtoMessage() {}
func (*GameBattle_CPPStageGetBattleServerIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 10}
}
func (m *GameBattle_CPPStageGetBattleServerIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPStageGetBattleServerIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPStageGetBattleServerIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPStageGetBattleServerIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPStageGetBattleServerIdResponse.Merge(m, src)
}
func (m *GameBattle_CPPStageGetBattleServerIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPStageGetBattleServerIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPStageGetBattleServerIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPStageGetBattleServerIdResponse proto.InternalMessageInfo

func (m *GameBattle_CPPStageGetBattleServerIdResponse) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*GameBattle_CPPStageGetBattleServerIdResponse) XXX_MessageName() string {
	return "service.GameBattle.CPPStageGetBattleServerIdResponse"
}

type GameBattle_CPPReviveRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Cost   int64 `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *GameBattle_CPPReviveRequest) Reset()      { *m = GameBattle_CPPReviveRequest{} }
func (*GameBattle_CPPReviveRequest) ProtoMessage() {}
func (*GameBattle_CPPReviveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 11}
}
func (m *GameBattle_CPPReviveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPReviveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPReviveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPReviveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPReviveRequest.Merge(m, src)
}
func (m *GameBattle_CPPReviveRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPReviveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPReviveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPReviveRequest proto.InternalMessageInfo

func (m *GameBattle_CPPReviveRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *GameBattle_CPPReviveRequest) GetCost() int64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (*GameBattle_CPPReviveRequest) XXX_MessageName() string {
	return "service.GameBattle.CPPReviveRequest"
}

type GameBattle_CPPReviveResponse struct {
	IsSucc bool `protobuf:"varint,1,opt,name=is_succ,json=isSucc,proto3" json:"is_succ,omitempty"`
}

func (m *GameBattle_CPPReviveResponse) Reset()      { *m = GameBattle_CPPReviveResponse{} }
func (*GameBattle_CPPReviveResponse) ProtoMessage() {}
func (*GameBattle_CPPReviveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 12}
}
func (m *GameBattle_CPPReviveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CPPReviveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CPPReviveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CPPReviveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CPPReviveResponse.Merge(m, src)
}
func (m *GameBattle_CPPReviveResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CPPReviveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CPPReviveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CPPReviveResponse proto.InternalMessageInfo

func (m *GameBattle_CPPReviveResponse) GetIsSucc() bool {
	if m != nil {
		return m.IsSucc
	}
	return false
}

func (*GameBattle_CPPReviveResponse) XXX_MessageName() string {
	return "service.GameBattle.CPPReviveResponse"
}

//自动吃药
type GameBattle_AutoMedicinePush struct {
	Typ   int64 `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	MapId int64 `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *GameBattle_AutoMedicinePush) Reset()      { *m = GameBattle_AutoMedicinePush{} }
func (*GameBattle_AutoMedicinePush) ProtoMessage() {}
func (*GameBattle_AutoMedicinePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 13}
}
func (m *GameBattle_AutoMedicinePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_AutoMedicinePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_AutoMedicinePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_AutoMedicinePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_AutoMedicinePush.Merge(m, src)
}
func (m *GameBattle_AutoMedicinePush) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_AutoMedicinePush) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_AutoMedicinePush.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_AutoMedicinePush proto.InternalMessageInfo

func (m *GameBattle_AutoMedicinePush) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *GameBattle_AutoMedicinePush) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (*GameBattle_AutoMedicinePush) XXX_MessageName() string {
	return "service.GameBattle.AutoMedicinePush"
}

//手动吃药
type GameBattle_ManualMedicineRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (m *GameBattle_ManualMedicineRequest) Reset()      { *m = GameBattle_ManualMedicineRequest{} }
func (*GameBattle_ManualMedicineRequest) ProtoMessage() {}
func (*GameBattle_ManualMedicineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 14}
}
func (m *GameBattle_ManualMedicineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_ManualMedicineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_ManualMedicineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_ManualMedicineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_ManualMedicineRequest.Merge(m, src)
}
func (m *GameBattle_ManualMedicineRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_ManualMedicineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_ManualMedicineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_ManualMedicineRequest proto.InternalMessageInfo

func (m *GameBattle_ManualMedicineRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (*GameBattle_ManualMedicineRequest) XXX_MessageName() string {
	return "service.GameBattle.ManualMedicineRequest"
}

type GameBattle_ManualMedicineResponse struct {
}

func (m *GameBattle_ManualMedicineResponse) Reset()      { *m = GameBattle_ManualMedicineResponse{} }
func (*GameBattle_ManualMedicineResponse) ProtoMessage() {}
func (*GameBattle_ManualMedicineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 15}
}
func (m *GameBattle_ManualMedicineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_ManualMedicineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_ManualMedicineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_ManualMedicineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_ManualMedicineResponse.Merge(m, src)
}
func (m *GameBattle_ManualMedicineResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_ManualMedicineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_ManualMedicineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_ManualMedicineResponse proto.InternalMessageInfo

func (*GameBattle_ManualMedicineResponse) XXX_MessageName() string {
	return "service.GameBattle.ManualMedicineResponse"
}

//推送所有药的CD
type GameBattle_MedicineCdPush struct {
	Cd int64 `protobuf:"varint,1,opt,name=cd,proto3" json:"cd,omitempty"`
}

func (m *GameBattle_MedicineCdPush) Reset()      { *m = GameBattle_MedicineCdPush{} }
func (*GameBattle_MedicineCdPush) ProtoMessage() {}
func (*GameBattle_MedicineCdPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 16}
}
func (m *GameBattle_MedicineCdPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_MedicineCdPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_MedicineCdPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_MedicineCdPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_MedicineCdPush.Merge(m, src)
}
func (m *GameBattle_MedicineCdPush) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_MedicineCdPush) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_MedicineCdPush.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_MedicineCdPush proto.InternalMessageInfo

func (m *GameBattle_MedicineCdPush) GetCd() int64 {
	if m != nil {
		return m.Cd
	}
	return 0
}

func (*GameBattle_MedicineCdPush) XXX_MessageName() string {
	return "service.GameBattle.MedicineCdPush"
}

//客户端战斗自动吃药
type GameBattle_AutoMedicineClientRequest struct {
	Typ      int64 `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	MapId    int64 `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleId int64 `protobuf:"varint,3,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *GameBattle_AutoMedicineClientRequest) Reset()      { *m = GameBattle_AutoMedicineClientRequest{} }
func (*GameBattle_AutoMedicineClientRequest) ProtoMessage() {}
func (*GameBattle_AutoMedicineClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 17}
}
func (m *GameBattle_AutoMedicineClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_AutoMedicineClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_AutoMedicineClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_AutoMedicineClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_AutoMedicineClientRequest.Merge(m, src)
}
func (m *GameBattle_AutoMedicineClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_AutoMedicineClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_AutoMedicineClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_AutoMedicineClientRequest proto.InternalMessageInfo

func (m *GameBattle_AutoMedicineClientRequest) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *GameBattle_AutoMedicineClientRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GameBattle_AutoMedicineClientRequest) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*GameBattle_AutoMedicineClientRequest) XXX_MessageName() string {
	return "service.GameBattle.AutoMedicineClientRequest"
}

type GameBattle_AutoMedicineClientResponse struct {
	MapId    int64                          `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleId int64                          `protobuf:"varint,2,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	Medicine map[int64]*models.MedicineInfo `protobuf:"bytes,3,rep,name=medicine,proto3" json:"medicine,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id       int64                          `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	CdTime   int64                          `protobuf:"varint,5,opt,name=cd_time,json=cdTime,proto3" json:"cd_time,omitempty"`
}

func (m *GameBattle_AutoMedicineClientResponse) Reset()      { *m = GameBattle_AutoMedicineClientResponse{} }
func (*GameBattle_AutoMedicineClientResponse) ProtoMessage() {}
func (*GameBattle_AutoMedicineClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 18}
}
func (m *GameBattle_AutoMedicineClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_AutoMedicineClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_AutoMedicineClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_AutoMedicineClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_AutoMedicineClientResponse.Merge(m, src)
}
func (m *GameBattle_AutoMedicineClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_AutoMedicineClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_AutoMedicineClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_AutoMedicineClientResponse proto.InternalMessageInfo

func (m *GameBattle_AutoMedicineClientResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GameBattle_AutoMedicineClientResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *GameBattle_AutoMedicineClientResponse) GetMedicine() map[int64]*models.MedicineInfo {
	if m != nil {
		return m.Medicine
	}
	return nil
}

func (m *GameBattle_AutoMedicineClientResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameBattle_AutoMedicineClientResponse) GetCdTime() int64 {
	if m != nil {
		return m.CdTime
	}
	return 0
}

func (*GameBattle_AutoMedicineClientResponse) XXX_MessageName() string {
	return "service.GameBattle.AutoMedicineClientResponse"
}

type GameBattle_GetCurrBattleInfoRequest struct {
	SceneId int64 `protobuf:"varint,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (m *GameBattle_GetCurrBattleInfoRequest) Reset()      { *m = GameBattle_GetCurrBattleInfoRequest{} }
func (*GameBattle_GetCurrBattleInfoRequest) ProtoMessage() {}
func (*GameBattle_GetCurrBattleInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 19}
}
func (m *GameBattle_GetCurrBattleInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_GetCurrBattleInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_GetCurrBattleInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_GetCurrBattleInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_GetCurrBattleInfoRequest.Merge(m, src)
}
func (m *GameBattle_GetCurrBattleInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_GetCurrBattleInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_GetCurrBattleInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_GetCurrBattleInfoRequest proto.InternalMessageInfo

func (m *GameBattle_GetCurrBattleInfoRequest) GetSceneId() int64 {
	if m != nil {
		return m.SceneId
	}
	return 0
}

func (*GameBattle_GetCurrBattleInfoRequest) XXX_MessageName() string {
	return "service.GameBattle.GetCurrBattleInfoRequest"
}

type GameBattle_GetCurrBattleInfoResponse struct {
	BattleId    int64            `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	SceneId     int64            `protobuf:"varint,2,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	HungupMapId int64            `protobuf:"varint,3,opt,name=hungup_map_id,json=hungupMapId,proto3" json:"hungup_map_id,omitempty"`
	LineInfo    *models.LineInfo `protobuf:"bytes,4,opt,name=line_info,json=lineInfo,proto3" json:"line_info,omitempty"`
}

func (m *GameBattle_GetCurrBattleInfoResponse) Reset()      { *m = GameBattle_GetCurrBattleInfoResponse{} }
func (*GameBattle_GetCurrBattleInfoResponse) ProtoMessage() {}
func (*GameBattle_GetCurrBattleInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 20}
}
func (m *GameBattle_GetCurrBattleInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_GetCurrBattleInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_GetCurrBattleInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_GetCurrBattleInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_GetCurrBattleInfoResponse.Merge(m, src)
}
func (m *GameBattle_GetCurrBattleInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_GetCurrBattleInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_GetCurrBattleInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_GetCurrBattleInfoResponse proto.InternalMessageInfo

func (m *GameBattle_GetCurrBattleInfoResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *GameBattle_GetCurrBattleInfoResponse) GetSceneId() int64 {
	if m != nil {
		return m.SceneId
	}
	return 0
}

func (m *GameBattle_GetCurrBattleInfoResponse) GetHungupMapId() int64 {
	if m != nil {
		return m.HungupMapId
	}
	return 0
}

func (m *GameBattle_GetCurrBattleInfoResponse) GetLineInfo() *models.LineInfo {
	if m != nil {
		return m.LineInfo
	}
	return nil
}

func (*GameBattle_GetCurrBattleInfoResponse) XXX_MessageName() string {
	return "service.GameBattle.GetCurrBattleInfoResponse"
}

// 获取地图所有分线
type GameBattle_GetMapAllLinesRequest struct {
	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *GameBattle_GetMapAllLinesRequest) Reset()      { *m = GameBattle_GetMapAllLinesRequest{} }
func (*GameBattle_GetMapAllLinesRequest) ProtoMessage() {}
func (*GameBattle_GetMapAllLinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 21}
}
func (m *GameBattle_GetMapAllLinesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_GetMapAllLinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_GetMapAllLinesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_GetMapAllLinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_GetMapAllLinesRequest.Merge(m, src)
}
func (m *GameBattle_GetMapAllLinesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_GetMapAllLinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_GetMapAllLinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_GetMapAllLinesRequest proto.InternalMessageInfo

func (m *GameBattle_GetMapAllLinesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (*GameBattle_GetMapAllLinesRequest) XXX_MessageName() string {
	return "service.GameBattle.GetMapAllLinesRequest"
}

type GameBattle_GetMapAllLinesResponse struct {
	AllLineInfo *models.AllLineInfo `protobuf:"bytes,1,opt,name=all_line_info,json=allLineInfo,proto3" json:"all_line_info,omitempty"`
}

func (m *GameBattle_GetMapAllLinesResponse) Reset()      { *m = GameBattle_GetMapAllLinesResponse{} }
func (*GameBattle_GetMapAllLinesResponse) ProtoMessage() {}
func (*GameBattle_GetMapAllLinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 22}
}
func (m *GameBattle_GetMapAllLinesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_GetMapAllLinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_GetMapAllLinesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_GetMapAllLinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_GetMapAllLinesResponse.Merge(m, src)
}
func (m *GameBattle_GetMapAllLinesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_GetMapAllLinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_GetMapAllLinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_GetMapAllLinesResponse proto.InternalMessageInfo

func (m *GameBattle_GetMapAllLinesResponse) GetAllLineInfo() *models.AllLineInfo {
	if m != nil {
		return m.AllLineInfo
	}
	return nil
}

func (*GameBattle_GetMapAllLinesResponse) XXX_MessageName() string {
	return "service.GameBattle.GetMapAllLinesResponse"
}

// 获取临时背包信息
type GameBattle_GameGetTempBagRequest struct {
}

func (m *GameBattle_GameGetTempBagRequest) Reset()      { *m = GameBattle_GameGetTempBagRequest{} }
func (*GameBattle_GameGetTempBagRequest) ProtoMessage() {}
func (*GameBattle_GameGetTempBagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 23}
}
func (m *GameBattle_GameGetTempBagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_GameGetTempBagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_GameGetTempBagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_GameGetTempBagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_GameGetTempBagRequest.Merge(m, src)
}
func (m *GameBattle_GameGetTempBagRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_GameGetTempBagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_GameGetTempBagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_GameGetTempBagRequest proto.InternalMessageInfo

func (*GameBattle_GameGetTempBagRequest) XXX_MessageName() string {
	return "service.GameBattle.GameGetTempBagRequest"
}

type GameBattle_GameGetTempBagResponse struct {
	TempBag *models.TempBag `protobuf:"bytes,1,opt,name=temp_bag,json=tempBag,proto3" json:"temp_bag,omitempty"`
	MapId   int64           `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *GameBattle_GameGetTempBagResponse) Reset()      { *m = GameBattle_GameGetTempBagResponse{} }
func (*GameBattle_GameGetTempBagResponse) ProtoMessage() {}
func (*GameBattle_GameGetTempBagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 24}
}
func (m *GameBattle_GameGetTempBagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_GameGetTempBagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_GameGetTempBagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_GameGetTempBagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_GameGetTempBagResponse.Merge(m, src)
}
func (m *GameBattle_GameGetTempBagResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_GameGetTempBagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_GameGetTempBagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_GameGetTempBagResponse proto.InternalMessageInfo

func (m *GameBattle_GameGetTempBagResponse) GetTempBag() *models.TempBag {
	if m != nil {
		return m.TempBag
	}
	return nil
}

func (m *GameBattle_GameGetTempBagResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (*GameBattle_GameGetTempBagResponse) XXX_MessageName() string {
	return "service.GameBattle.GameGetTempBagResponse"
}

// 领取临时背包收益
type GameBattle_GameDrawTempBagRequest struct {
}

func (m *GameBattle_GameDrawTempBagRequest) Reset()      { *m = GameBattle_GameDrawTempBagRequest{} }
func (*GameBattle_GameDrawTempBagRequest) ProtoMessage() {}
func (*GameBattle_GameDrawTempBagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 25}
}
func (m *GameBattle_GameDrawTempBagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_GameDrawTempBagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_GameDrawTempBagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_GameDrawTempBagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_GameDrawTempBagRequest.Merge(m, src)
}
func (m *GameBattle_GameDrawTempBagRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_GameDrawTempBagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_GameDrawTempBagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_GameDrawTempBagRequest proto.InternalMessageInfo

func (*GameBattle_GameDrawTempBagRequest) XXX_MessageName() string {
	return "service.GameBattle.GameDrawTempBagRequest"
}

type GameBattle_GameDrawTempBagResponse struct {
	Items map[int64]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GameBattle_GameDrawTempBagResponse) Reset()      { *m = GameBattle_GameDrawTempBagResponse{} }
func (*GameBattle_GameDrawTempBagResponse) ProtoMessage() {}
func (*GameBattle_GameDrawTempBagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 26}
}
func (m *GameBattle_GameDrawTempBagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_GameDrawTempBagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_GameDrawTempBagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_GameDrawTempBagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_GameDrawTempBagResponse.Merge(m, src)
}
func (m *GameBattle_GameDrawTempBagResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_GameDrawTempBagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_GameDrawTempBagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_GameDrawTempBagResponse proto.InternalMessageInfo

func (m *GameBattle_GameDrawTempBagResponse) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*GameBattle_GameDrawTempBagResponse) XXX_MessageName() string {
	return "service.GameBattle.GameDrawTempBagResponse"
}

//添加指定buff
type GameBattle_CheatAddBuffRequest struct {
	BuffId int64 `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	Num    int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *GameBattle_CheatAddBuffRequest) Reset()      { *m = GameBattle_CheatAddBuffRequest{} }
func (*GameBattle_CheatAddBuffRequest) ProtoMessage() {}
func (*GameBattle_CheatAddBuffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 27}
}
func (m *GameBattle_CheatAddBuffRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CheatAddBuffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CheatAddBuffRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CheatAddBuffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CheatAddBuffRequest.Merge(m, src)
}
func (m *GameBattle_CheatAddBuffRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CheatAddBuffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CheatAddBuffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CheatAddBuffRequest proto.InternalMessageInfo

func (m *GameBattle_CheatAddBuffRequest) GetBuffId() int64 {
	if m != nil {
		return m.BuffId
	}
	return 0
}

func (m *GameBattle_CheatAddBuffRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*GameBattle_CheatAddBuffRequest) XXX_MessageName() string {
	return "service.GameBattle.CheatAddBuffRequest"
}

type GameBattle_CheatAddBuffResponse struct {
}

func (m *GameBattle_CheatAddBuffResponse) Reset()      { *m = GameBattle_CheatAddBuffResponse{} }
func (*GameBattle_CheatAddBuffResponse) ProtoMessage() {}
func (*GameBattle_CheatAddBuffResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc614f8ae14d391, []int{0, 28}
}
func (m *GameBattle_CheatAddBuffResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBattle_CheatAddBuffResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBattle_CheatAddBuffResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBattle_CheatAddBuffResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBattle_CheatAddBuffResponse.Merge(m, src)
}
func (m *GameBattle_CheatAddBuffResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameBattle_CheatAddBuffResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBattle_CheatAddBuffResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameBattle_CheatAddBuffResponse proto.InternalMessageInfo

func (*GameBattle_CheatAddBuffResponse) XXX_MessageName() string {
	return "service.GameBattle.CheatAddBuffResponse"
}
func init() {
	proto.RegisterEnum("service.BattleErrorCode", BattleErrorCode_name, BattleErrorCode_value)
	proto.RegisterType((*GameBattle)(nil), "service.GameBattle")
	proto.RegisterType((*GameBattle_EnterAreaRequest)(nil), "service.GameBattle.EnterAreaRequest")
	proto.RegisterType((*GameBattle_EnterAreaResponse)(nil), "service.GameBattle.EnterAreaResponse")
	proto.RegisterType((*GameBattle_CPPCanToggleHangupRequest)(nil), "service.GameBattle.CPPCanToggleHangupRequest")
	proto.RegisterType((*GameBattle_CPPCanToggleHangupResponse)(nil), "service.GameBattle.CPPCanToggleHangupResponse")
	proto.RegisterType((*GameBattle_CPPEnterBattleRequest)(nil), "service.GameBattle.CPPEnterBattleRequest")
	proto.RegisterType((*GameBattle_CPPEnterBattleResponse)(nil), "service.GameBattle.CPPEnterBattleResponse")
	proto.RegisterType((*GameBattle_CPPGetBattleServerInfoRequest)(nil), "service.GameBattle.CPPGetBattleServerInfoRequest")
	proto.RegisterType((*GameBattle_CPPGetBattleServerInfoResponse)(nil), "service.GameBattle.CPPGetBattleServerInfoResponse")
	proto.RegisterType((*GameBattle_CPPRoleOfflinePush)(nil), "service.GameBattle.CPPRoleOfflinePush")
	proto.RegisterType((*GameBattle_CPPStageGetBattleServerIdRequest)(nil), "service.GameBattle.CPPStageGetBattleServerIdRequest")
	proto.RegisterType((*GameBattle_CPPStageGetBattleServerIdResponse)(nil), "service.GameBattle.CPPStageGetBattleServerIdResponse")
	proto.RegisterType((*GameBattle_CPPReviveRequest)(nil), "service.GameBattle.CPPReviveRequest")
	proto.RegisterType((*GameBattle_CPPReviveResponse)(nil), "service.GameBattle.CPPReviveResponse")
	proto.RegisterType((*GameBattle_AutoMedicinePush)(nil), "service.GameBattle.AutoMedicinePush")
	proto.RegisterType((*GameBattle_ManualMedicineRequest)(nil), "service.GameBattle.ManualMedicineRequest")
	proto.RegisterType((*GameBattle_ManualMedicineResponse)(nil), "service.GameBattle.ManualMedicineResponse")
	proto.RegisterType((*GameBattle_MedicineCdPush)(nil), "service.GameBattle.MedicineCdPush")
	proto.RegisterType((*GameBattle_AutoMedicineClientRequest)(nil), "service.GameBattle.AutoMedicineClientRequest")
	proto.RegisterType((*GameBattle_AutoMedicineClientResponse)(nil), "service.GameBattle.AutoMedicineClientResponse")
	proto.RegisterMapType((map[int64]*models.MedicineInfo)(nil), "service.GameBattle.AutoMedicineClientResponse.MedicineEntry")
	proto.RegisterType((*GameBattle_GetCurrBattleInfoRequest)(nil), "service.GameBattle.GetCurrBattleInfoRequest")
	proto.RegisterType((*GameBattle_GetCurrBattleInfoResponse)(nil), "service.GameBattle.GetCurrBattleInfoResponse")
	proto.RegisterType((*GameBattle_GetMapAllLinesRequest)(nil), "service.GameBattle.GetMapAllLinesRequest")
	proto.RegisterType((*GameBattle_GetMapAllLinesResponse)(nil), "service.GameBattle.GetMapAllLinesResponse")
	proto.RegisterType((*GameBattle_GameGetTempBagRequest)(nil), "service.GameBattle.GameGetTempBagRequest")
	proto.RegisterType((*GameBattle_GameGetTempBagResponse)(nil), "service.GameBattle.GameGetTempBagResponse")
	proto.RegisterType((*GameBattle_GameDrawTempBagRequest)(nil), "service.GameBattle.GameDrawTempBagRequest")
	proto.RegisterType((*GameBattle_GameDrawTempBagResponse)(nil), "service.GameBattle.GameDrawTempBagResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.GameBattle.GameDrawTempBagResponse.ItemsEntry")
	proto.RegisterType((*GameBattle_CheatAddBuffRequest)(nil), "service.GameBattle.CheatAddBuffRequest")
	proto.RegisterType((*GameBattle_CheatAddBuffResponse)(nil), "service.GameBattle.CheatAddBuffResponse")
}

func init() { proto.RegisterFile("proto/service/battle.proto", fileDescriptor_3cc614f8ae14d391) }

var fileDescriptor_3cc614f8ae14d391 = []byte{
	// 1408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6f, 0x14, 0x55,
	0x14, 0xef, 0xcc, 0xd2, 0x76, 0x7b, 0x0a, 0x65, 0x3b, 0xfd, 0x9a, 0x5e, 0x71, 0x5d, 0x89, 0x0f,
	0x15, 0xed, 0x16, 0x4b, 0x54, 0x82, 0x1a, 0x6d, 0xa7, 0xb5, 0x34, 0xa1, 0x38, 0x6c, 0x89, 0xc1,
	0x8f, 0x64, 0x33, 0x9d, 0xb9, 0xbb, 0x4c, 0x98, 0x9d, 0x3b, 0xcc, 0x47, 0x6b, 0x1f, 0x91, 0x44,
	0xa0, 0x49, 0x13, 0x0d, 0x3e, 0xa0, 0xf6, 0xa5, 0x44, 0x91, 0x17, 0x8a, 0x21, 0xa9, 0x12, 0x08,
	0xf8, 0xca, 0x23, 0x8f, 0x3c, 0x6a, 0xcb, 0x2e, 0xe5, 0xcd, 0x07, 0xff, 0x00, 0x33, 0xf7, 0xde,
	0xd9, 0x9d, 0x5d, 0xb7, 0xc5, 0x44, 0xde, 0xe6, 0x9e, 0xfb, 0x3b, 0xbf, 0x73, 0x7e, 0xe7, 0x9e,
	0x7b, 0xee, 0x2e, 0x20, 0xc7, 0x25, 0x3e, 0x19, 0xf1, 0xb0, 0x3b, 0x6f, 0xea, 0x78, 0x64, 0x4e,
	0xf3, 0x7d, 0x0b, 0x67, 0xa9, 0x51, 0x6a, 0xe7, 0x56, 0x34, 0xc0, 0x40, 0x25, 0x62, 0x60, 0xcb,
	0x1b, 0x99, 0xd3, 0x3c, 0x8e, 0x40, 0xaf, 0xb2, 0x0d, 0x1b, 0x2f, 0x0c, 0x33, 0xcf, 0xe1, 0x88,
	0xc8, 0xc6, 0x0b, 0xf9, 0x38, 0x19, 0xca, 0x30, 0xa8, 0xee, 0x38, 0xcc, 0x1c, 0x7e, 0xd5, 0x23,
	0x06, 0x1b, 0xa2, 0xd4, 0xb6, 0xf6, 0x7f, 0xdf, 0x07, 0x30, 0xa5, 0x95, 0xf0, 0x38, 0x35, 0xa2,
	0x0b, 0x02, 0xa4, 0x26, 0x6d, 0x1f, 0xbb, 0x63, 0x2e, 0xd6, 0x72, 0xf8, 0x6c, 0x80, 0x3d, 0x5f,
	0x7a, 0x05, 0x12, 0x0e, 0xf1, 0x64, 0x21, 0x23, 0x0c, 0x75, 0x8e, 0x4a, 0x59, 0x1b, 0x2f, 0x70,
	0x8a, 0x8f, 0xb1, 0xee, 0x13, 0x77, 0x34, 0x17, 0x6e, 0x4b, 0x7d, 0xd0, 0x56, 0xd2, 0x9c, 0xbc,
	0x69, 0xc8, 0x62, 0x46, 0x18, 0x4a, 0xe4, 0x5a, 0x4b, 0x9a, 0x33, 0x6d, 0x48, 0x43, 0x90, 0x62,
	0xe8, 0x7c, 0x28, 0x00, 0xbb, 0x21, 0x20, 0x41, 0x01, 0x5d, 0xcc, 0x3e, 0x4b, 0xcd, 0xd3, 0xc6,
	0x91, 0xdd, 0x5f, 0xae, 0xcb, 0x49, 0x68, 0x63, 0x56, 0x74, 0x16, 0xba, 0x63, 0x89, 0x78, 0x0e,
	0xb1, 0x3d, 0xfc, 0xff, 0x32, 0x79, 0x09, 0x3a, 0x79, 0x0a, 0xbe, 0x59, 0xc2, 0xb2, 0x9e, 0x11,
	0x86, 0x84, 0x1c, 0x30, 0xd3, 0x49, 0xb3, 0x84, 0xd1, 0xe7, 0x30, 0xa8, 0xa8, 0xaa, 0xa2, 0xd9,
	0x27, 0x49, 0xb1, 0x68, 0xe1, 0xa3, 0x9a, 0x5d, 0x0c, 0x9c, 0xa8, 0x08, 0x35, 0x52, 0xe1, 0x59,
	0xf2, 0xc4, 0x66, 0xf2, 0xd0, 0x3e, 0x40, 0xcd, 0xd8, 0x99, 0x32, 0xf4, 0xb7, 0x00, 0x7d, 0x8a,
	0xaa, 0x52, 0xc9, 0xec, 0x2c, 0xa2, 0xc0, 0xaf, 0xc5, 0x35, 0x0f, 0x66, 0xab, 0xc7, 0x9c, 0x55,
	0x54, 0x75, 0xbc, 0xaa, 0xfe, 0x39, 0x1d, 0x82, 0xf4, 0x02, 0x74, 0xe8, 0xc4, 0x2e, 0x98, 0xc5,
	0x10, 0xb2, 0x8b, 0x42, 0x92, 0xcc, 0xc0, 0x36, 0x4d, 0x2f, 0xef, 0x99, 0x76, 0xd1, 0xc2, 0x72,
	0x6b, 0x46, 0x18, 0x4a, 0xe6, 0x92, 0xa6, 0x37, 0x4b, 0xd7, 0xd2, 0x21, 0x68, 0xf7, 0xc9, 0x82,
	0xe6, 0x1a, 0x9e, 0xdc, 0xf6, 0xac, 0x5c, 0x23, 0x24, 0x5a, 0x13, 0xa0, 0xbf, 0x51, 0x36, 0x3f,
	0xeb, 0x6d, 0x0a, 0xde, 0x05, 0xa2, 0xe9, 0x50, 0x75, 0x1d, 0x39, 0xd1, 0x74, 0x24, 0x09, 0x76,
	0x39, 0xc4, 0xf5, 0xb9, 0x1c, 0xfa, 0x2d, 0xf5, 0x42, 0xab, 0x4f, 0xce, 0x60, 0x9b, 0x0a, 0xe8,
	0xc8, 0xb1, 0x45, 0xd3, 0x22, 0xb4, 0x36, 0x2d, 0xc2, 0x20, 0x24, 0xb1, 0xeb, 0xe6, 0x75, 0x62,
	0x60, 0xaa, 0x25, 0x91, 0x6b, 0xc7, 0xae, 0xab, 0x10, 0x03, 0xa3, 0x61, 0x78, 0x51, 0x51, 0xd5,
	0x29, 0xec, 0x8f, 0xc7, 0x5d, 0xec, 0x02, 0xe1, 0xc7, 0xd5, 0xd0, 0xc5, 0x36, 0xa4, 0xb7, 0x83,
	0x73, 0x99, 0xfb, 0x61, 0xcf, 0x69, 0xda, 0x0a, 0xf9, 0x3a, 0xb5, 0x9d, 0xcc, 0x38, 0x13, 0x1d,
	0x1f, 0xc7, 0x70, 0x01, 0xb5, 0x26, 0x63, 0x76, 0xc6, 0x3e, 0x6d, 0xa0, 0x6b, 0x02, 0x48, 0x8a,
	0xaa, 0xe6, 0x88, 0x85, 0x3f, 0x2a, 0x14, 0x2c, 0xd3, 0xc6, 0x6a, 0xe0, 0x9d, 0x7e, 0xbe, 0x41,
	0xa4, 0x0c, 0xec, 0xe6, 0x48, 0x87, 0x78, 0xf9, 0x2f, 0x68, 0xe9, 0xc5, 0x1c, 0x30, 0x9b, 0x4a,
	0xbc, 0x53, 0x0d, 0x88, 0x45, 0x7a, 0x0e, 0x71, 0xc4, 0x27, 0xe8, 0x3d, 0xc8, 0x28, 0xaa, 0x3a,
	0xeb, 0x6b, 0x45, 0xdc, 0x58, 0x1d, 0x23, 0xea, 0xfc, 0x41, 0x48, 0x7a, 0x3a, 0xb6, 0x71, 0x2d,
	0xe1, 0x76, 0xba, 0x9e, 0x36, 0xd0, 0x0c, 0xbc, 0xbc, 0x83, 0x3b, 0x2f, 0x6d, 0xb3, 0x03, 0x17,
	0x9a, 0xde, 0xcd, 0xf7, 0x21, 0x15, 0x56, 0x0d, 0xcf, 0x9b, 0xf3, 0xd5, 0x7b, 0x37, 0x00, 0xed,
	0xa6, 0x8f, 0x4b, 0x35, 0xa7, 0xb6, 0x70, 0x39, 0x6d, 0x84, 0x1d, 0xa7, 0x13, 0xcf, 0xe7, 0xc5,
	0xa1, 0xdf, 0xe8, 0x75, 0xe8, 0x8e, 0x11, 0xf0, 0xf8, 0x21, 0x83, 0x97, 0xf7, 0x02, 0x5d, 0xa7,
	0x0c, 0xc9, 0x5c, 0x9b, 0xe9, 0xcd, 0x06, 0xba, 0x8e, 0xde, 0x81, 0xd4, 0x58, 0xe0, 0x93, 0x19,
	0x6c, 0x98, 0x7a, 0x74, 0x44, 0x29, 0x48, 0xf8, 0x8b, 0x0e, 0x0f, 0x15, 0x7e, 0x6e, 0x73, 0x97,
	0xd1, 0x41, 0xe8, 0x9b, 0xd1, 0xec, 0x40, 0xb3, 0x22, 0xf7, 0x67, 0x25, 0x8c, 0x64, 0xe8, 0x6f,
	0xf4, 0xe0, 0x53, 0x27, 0x03, 0x5d, 0x91, 0x4d, 0x31, 0x68, 0x1a, 0x5d, 0x20, 0xea, 0x91, 0xbf,
	0xa8, 0x1b, 0x48, 0x83, 0xc1, 0x78, 0xaa, 0x8a, 0x65, 0x62, 0xdb, 0x8f, 0x22, 0xfe, 0xd7, 0x9c,
	0xc3, 0xc1, 0x51, 0x6b, 0x2a, 0x76, 0x53, 0x93, 0x73, 0xd5, 0x9e, 0x15, 0x01, 0x35, 0x8b, 0xb1,
	0xf3, 0x1c, 0xa8, 0xa3, 0x14, 0xeb, 0x29, 0xa5, 0x53, 0x90, 0x2c, 0x71, 0x36, 0x39, 0x91, 0x49,
	0x0c, 0x75, 0x8e, 0xbe, 0x9b, 0xe5, 0xef, 0x67, 0xb6, 0xf6, 0xda, 0x65, 0xb7, 0x8f, 0x9a, 0x8d,
	0xcc, 0x93, 0xb6, 0xef, 0x2e, 0xe6, 0xaa, 0x6c, 0x74, 0xfc, 0x44, 0x83, 0x51, 0x34, 0x8d, 0xb0,
	0xe8, 0xba, 0xc1, 0x1e, 0x14, 0x36, 0x4b, 0xda, 0x74, 0x83, 0x3e, 0x26, 0x27, 0x60, 0x4f, 0x1d,
	0x47, 0x58, 0xac, 0x33, 0x78, 0x31, 0x2a, 0xd6, 0x19, 0xbc, 0x28, 0x1d, 0x80, 0xd6, 0x79, 0xcd,
	0x0a, 0x30, 0x4d, 0xbf, 0x73, 0xb4, 0x37, 0xcb, 0x1e, 0xe8, 0x6a, 0x6c, 0x3a, 0x27, 0x18, 0xe4,
	0x88, 0x78, 0x58, 0x40, 0x6f, 0x82, 0x3c, 0x85, 0x7d, 0x25, 0x70, 0xf9, 0xa8, 0x8c, 0x8d, 0x9d,
	0x9d, 0xee, 0xca, 0x35, 0x01, 0x06, 0x9b, 0xf8, 0xf1, 0xf2, 0xd6, 0xd5, 0x51, 0x68, 0xa8, 0x63,
	0x9c, 0x55, 0xac, 0x63, 0xa5, 0x23, 0x25, 0x88, 0x8f, 0x94, 0x04, 0x1f, 0x29, 0x41, 0x6d, 0xa4,
	0x0c, 0x43, 0x47, 0x38, 0x82, 0xf2, 0xa6, 0x5d, 0x20, 0xb4, 0x66, 0x9d, 0xa3, 0xa9, 0x48, 0xe4,
	0xb1, 0x48, 0x60, 0xd2, 0xe2, 0x5f, 0x28, 0x0b, 0x7d, 0x53, 0xd8, 0x9f, 0xd1, 0x9c, 0x31, 0xcb,
	0x0a, 0xb7, 0xbd, 0x9d, 0xdf, 0x5e, 0x74, 0x02, 0xfa, 0x1b, 0xf1, 0x5c, 0xd4, 0xdb, 0xb0, 0x47,
	0xb3, 0xac, 0x7c, 0x2d, 0x38, 0x7b, 0x3d, 0x7b, 0xa2, 0xe0, 0xdc, 0x81, 0xc6, 0xef, 0xd4, 0x6a,
	0x0b, 0x34, 0x00, 0x7d, 0x61, 0x7f, 0x4c, 0x61, 0xff, 0x24, 0x2e, 0x39, 0xe3, 0x5a, 0x91, 0xa7,
	0x80, 0x3e, 0x83, 0xfe, 0xc6, 0x0d, 0x1e, 0xeb, 0x00, 0x24, 0x7d, 0x5c, 0x0a, 0xa7, 0x66, 0x91,
	0x87, 0xd9, 0x1b, 0x85, 0x89, 0xa0, 0xed, 0x3e, 0xfb, 0xd8, 0xee, 0x4a, 0xcb, 0x8c, 0x7c, 0xc2,
	0xd5, 0x16, 0x1a, 0xc2, 0xae, 0x0a, 0x30, 0xf0, 0xaf, 0x2d, 0x1e, 0xf8, 0x18, 0xb4, 0x86, 0x17,
	0x3c, 0xfc, 0x69, 0x10, 0x76, 0xf8, 0x5b, 0xcd, 0x3a, 0x7c, 0x1b, 0xdf, 0xec, 0x74, 0xe8, 0xc8,
	0x7a, 0x9b, 0x91, 0xa0, 0xc3, 0x00, 0x35, 0x63, 0x93, 0x66, 0xed, 0x8d, 0x37, 0x6b, 0x22, 0xde,
	0x96, 0x1f, 0x40, 0x8f, 0x72, 0x1a, 0x6b, 0xfe, 0x98, 0x61, 0x8c, 0x07, 0x85, 0x42, 0x6c, 0x1c,
	0xcd, 0x05, 0x85, 0x42, 0x6c, 0x1c, 0x85, 0xcb, 0x69, 0x23, 0xe4, 0xb6, 0x83, 0x12, 0xe7, 0x09,
	0x3f, 0x51, 0x3f, 0xf4, 0xd6, 0x33, 0xb0, 0x2c, 0x0f, 0x7c, 0x23, 0xc2, 0x5e, 0x26, 0x64, 0xd2,
	0x75, 0x09, 0x7d, 0x80, 0xa5, 0x43, 0xb0, 0x77, 0xd2, 0x75, 0x15, 0xcd, 0x3e, 0x4e, 0x7c, 0xf6,
	0x4b, 0x2a, 0xd5, 0x82, 0xd2, 0x4b, 0xeb, 0x32, 0x92, 0xe4, 0xf2, 0xbd, 0xcb, 0xe5, 0x4b, 0xcb,
	0xe5, 0x95, 0x3b, 0x95, 0xef, 0x6e, 0x3e, 0xbe, 0xbd, 0xbc, 0x75, 0xfe, 0x5e, 0xf9, 0xe2, 0x85,
	0xca, 0xf2, 0x55, 0xee, 0x74, 0x9c, 0x4c, 0xe0, 0x82, 0x16, 0x58, 0x61, 0xcb, 0xa4, 0x84, 0xc8,
	0xa9, 0x72, 0x6b, 0xb5, 0xb2, 0x72, 0x69, 0x6b, 0xed, 0xfe, 0x93, 0x7b, 0x6b, 0x4f, 0xef, 0x5e,
	0xd9, 0x5a, 0xfb, 0xb1, 0xbc, 0xf2, 0x4b, 0xf9, 0x87, 0xfb, 0xd2, 0x08, 0x74, 0x4f, 0x46, 0x57,
	0x26, 0x6c, 0x90, 0x0f, 0x03, 0xcb, 0x4a, 0x89, 0x48, 0x5e, 0x5a, 0x97, 0x7b, 0x25, 0x89, 0x81,
	0xca, 0x17, 0xbf, 0x7a, 0x72, 0xe7, 0xf7, 0xf2, 0x6f, 0xb7, 0x2a, 0x77, 0x57, 0xa5, 0x83, 0xd0,
	0x53, 0x75, 0xa8, 0x8e, 0x95, 0x89, 0x54, 0x02, 0x0d, 0x2c, 0xad, 0xcb, 0x3d, 0x52, 0xf7, 0xd6,
	0xcd, 0x9f, 0xb6, 0x96, 0x6f, 0x96, 0x2f, 0x9f, 0x2b, 0xaf, 0x5c, 0x57, 0x26, 0x1e, 0xdf, 0xbe,
	0x21, 0xbd, 0x41, 0xf3, 0x1a, 0x27, 0x9e, 0x77, 0x54, 0xb3, 0xac, 0x09, 0xac, 0x19, 0xa9, 0x5d,
	0x68, 0xdf, 0xd2, 0xba, 0x2c, 0x4b, 0xfd, 0x95, 0x73, 0xbf, 0x3e, 0xbd, 0xf1, 0xed, 0x93, 0x9f,
	0xaf, 0x94, 0xaf, 0x9e, 0x9f, 0x23, 0x9e, 0x57, 0xb9, 0x71, 0xf7, 0xf1, 0x9d, 0xd5, 0xf1, 0xe3,
	0x8f, 0xfe, 0x4c, 0xb7, 0x5c, 0xdf, 0x48, 0x0b, 0x0f, 0x36, 0xd2, 0xc2, 0xc3, 0x8d, 0xb4, 0xf0,
	0xc7, 0x46, 0x5a, 0xd8, 0xda, 0x48, 0xb7, 0xfc, 0xb5, 0x91, 0x16, 0xbe, 0xde, 0x4c, 0xb7, 0x3c,
	0xd8, 0x4c, 0x0b, 0x0f, 0x37, 0xd3, 0x2d, 0x8f, 0x36, 0xd3, 0x2d, 0x9f, 0x66, 0x74, 0x62, 0xda,
	0xc3, 0xec, 0xf9, 0x1b, 0xd1, 0x49, 0xa9, 0x44, 0xec, 0x91, 0xba, 0xff, 0x25, 0x73, 0x6d, 0x74,
	0x79, 0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xab, 0xd0, 0x05, 0x2b, 0xaf, 0x0c, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_EnterAreaRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_EnterAreaResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPCanToggleHangupRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPCanToggleHangupResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPEnterBattleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPEnterBattleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPGetBattleServerInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPGetBattleServerInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPRoleOfflinePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPStageGetBattleServerIdRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPStageGetBattleServerIdResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPReviveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CPPReviveResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_AutoMedicinePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_ManualMedicineRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_ManualMedicineResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_MedicineCdPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_AutoMedicineClientRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_AutoMedicineClientResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_GetCurrBattleInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_GetCurrBattleInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_GetMapAllLinesRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_GetMapAllLinesResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_GameGetTempBagRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_GameGetTempBagResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_GameDrawTempBagRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_GameDrawTempBagResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CheatAddBuffRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGameBattle_CheatAddBuffResponse.Get().(proto.Message)
	})
}

var poolGameBattle = &sync.Pool{New: func() interface{} { return &GameBattle{} }}

func (m *GameBattle) ReleasePool() { m.Reset(); poolGameBattle.Put(m); m = nil }

var poolGameBattle_EnterAreaRequest = &sync.Pool{New: func() interface{} { return &GameBattle_EnterAreaRequest{} }}

func (m *GameBattle_EnterAreaRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_EnterAreaRequest.Put(m)
	m = nil
}

var poolGameBattle_EnterAreaResponse = &sync.Pool{New: func() interface{} { return &GameBattle_EnterAreaResponse{} }}

func (m *GameBattle_EnterAreaResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_EnterAreaResponse.Put(m)
	m = nil
}

var poolGameBattle_CPPCanToggleHangupRequest = &sync.Pool{New: func() interface{} { return &GameBattle_CPPCanToggleHangupRequest{} }}

func (m *GameBattle_CPPCanToggleHangupRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPCanToggleHangupRequest.Put(m)
	m = nil
}

var poolGameBattle_CPPCanToggleHangupResponse = &sync.Pool{New: func() interface{} { return &GameBattle_CPPCanToggleHangupResponse{} }}

func (m *GameBattle_CPPCanToggleHangupResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPCanToggleHangupResponse.Put(m)
	m = nil
}

var poolGameBattle_CPPEnterBattleRequest = &sync.Pool{New: func() interface{} { return &GameBattle_CPPEnterBattleRequest{} }}

func (m *GameBattle_CPPEnterBattleRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPEnterBattleRequest.Put(m)
	m = nil
}

var poolGameBattle_CPPEnterBattleResponse = &sync.Pool{New: func() interface{} { return &GameBattle_CPPEnterBattleResponse{} }}

func (m *GameBattle_CPPEnterBattleResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPEnterBattleResponse.Put(m)
	m = nil
}

var poolGameBattle_CPPGetBattleServerInfoRequest = &sync.Pool{New: func() interface{} { return &GameBattle_CPPGetBattleServerInfoRequest{} }}

func (m *GameBattle_CPPGetBattleServerInfoRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPGetBattleServerInfoRequest.Put(m)
	m = nil
}

var poolGameBattle_CPPGetBattleServerInfoResponse = &sync.Pool{New: func() interface{} { return &GameBattle_CPPGetBattleServerInfoResponse{} }}

func (m *GameBattle_CPPGetBattleServerInfoResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPGetBattleServerInfoResponse.Put(m)
	m = nil
}

var poolGameBattle_CPPRoleOfflinePush = &sync.Pool{New: func() interface{} { return &GameBattle_CPPRoleOfflinePush{} }}

func (m *GameBattle_CPPRoleOfflinePush) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPRoleOfflinePush.Put(m)
	m = nil
}

var poolGameBattle_CPPStageGetBattleServerIdRequest = &sync.Pool{New: func() interface{} { return &GameBattle_CPPStageGetBattleServerIdRequest{} }}

func (m *GameBattle_CPPStageGetBattleServerIdRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPStageGetBattleServerIdRequest.Put(m)
	m = nil
}

var poolGameBattle_CPPStageGetBattleServerIdResponse = &sync.Pool{New: func() interface{} { return &GameBattle_CPPStageGetBattleServerIdResponse{} }}

func (m *GameBattle_CPPStageGetBattleServerIdResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPStageGetBattleServerIdResponse.Put(m)
	m = nil
}

var poolGameBattle_CPPReviveRequest = &sync.Pool{New: func() interface{} { return &GameBattle_CPPReviveRequest{} }}

func (m *GameBattle_CPPReviveRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPReviveRequest.Put(m)
	m = nil
}

var poolGameBattle_CPPReviveResponse = &sync.Pool{New: func() interface{} { return &GameBattle_CPPReviveResponse{} }}

func (m *GameBattle_CPPReviveResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_CPPReviveResponse.Put(m)
	m = nil
}

var poolGameBattle_AutoMedicinePush = &sync.Pool{New: func() interface{} { return &GameBattle_AutoMedicinePush{} }}

func (m *GameBattle_AutoMedicinePush) ReleasePool() {
	m.Reset()
	poolGameBattle_AutoMedicinePush.Put(m)
	m = nil
}

var poolGameBattle_ManualMedicineRequest = &sync.Pool{New: func() interface{} { return &GameBattle_ManualMedicineRequest{} }}

func (m *GameBattle_ManualMedicineRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_ManualMedicineRequest.Put(m)
	m = nil
}

var poolGameBattle_ManualMedicineResponse = &sync.Pool{New: func() interface{} { return &GameBattle_ManualMedicineResponse{} }}

func (m *GameBattle_ManualMedicineResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_ManualMedicineResponse.Put(m)
	m = nil
}

var poolGameBattle_MedicineCdPush = &sync.Pool{New: func() interface{} { return &GameBattle_MedicineCdPush{} }}

func (m *GameBattle_MedicineCdPush) ReleasePool() {
	m.Reset()
	poolGameBattle_MedicineCdPush.Put(m)
	m = nil
}

var poolGameBattle_AutoMedicineClientRequest = &sync.Pool{New: func() interface{} { return &GameBattle_AutoMedicineClientRequest{} }}

func (m *GameBattle_AutoMedicineClientRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_AutoMedicineClientRequest.Put(m)
	m = nil
}

var poolGameBattle_AutoMedicineClientResponse = &sync.Pool{New: func() interface{} { return &GameBattle_AutoMedicineClientResponse{} }}

func (m *GameBattle_AutoMedicineClientResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_AutoMedicineClientResponse.Put(m)
	m = nil
}

var poolGameBattle_GetCurrBattleInfoRequest = &sync.Pool{New: func() interface{} { return &GameBattle_GetCurrBattleInfoRequest{} }}

func (m *GameBattle_GetCurrBattleInfoRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_GetCurrBattleInfoRequest.Put(m)
	m = nil
}

var poolGameBattle_GetCurrBattleInfoResponse = &sync.Pool{New: func() interface{} { return &GameBattle_GetCurrBattleInfoResponse{} }}

func (m *GameBattle_GetCurrBattleInfoResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_GetCurrBattleInfoResponse.Put(m)
	m = nil
}

var poolGameBattle_GetMapAllLinesRequest = &sync.Pool{New: func() interface{} { return &GameBattle_GetMapAllLinesRequest{} }}

func (m *GameBattle_GetMapAllLinesRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_GetMapAllLinesRequest.Put(m)
	m = nil
}

var poolGameBattle_GetMapAllLinesResponse = &sync.Pool{New: func() interface{} { return &GameBattle_GetMapAllLinesResponse{} }}

func (m *GameBattle_GetMapAllLinesResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_GetMapAllLinesResponse.Put(m)
	m = nil
}

var poolGameBattle_GameGetTempBagRequest = &sync.Pool{New: func() interface{} { return &GameBattle_GameGetTempBagRequest{} }}

func (m *GameBattle_GameGetTempBagRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_GameGetTempBagRequest.Put(m)
	m = nil
}

var poolGameBattle_GameGetTempBagResponse = &sync.Pool{New: func() interface{} { return &GameBattle_GameGetTempBagResponse{} }}

func (m *GameBattle_GameGetTempBagResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_GameGetTempBagResponse.Put(m)
	m = nil
}

var poolGameBattle_GameDrawTempBagRequest = &sync.Pool{New: func() interface{} { return &GameBattle_GameDrawTempBagRequest{} }}

func (m *GameBattle_GameDrawTempBagRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_GameDrawTempBagRequest.Put(m)
	m = nil
}

var poolGameBattle_GameDrawTempBagResponse = &sync.Pool{New: func() interface{} { return &GameBattle_GameDrawTempBagResponse{} }}

func (m *GameBattle_GameDrawTempBagResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_GameDrawTempBagResponse.Put(m)
	m = nil
}

var poolGameBattle_CheatAddBuffRequest = &sync.Pool{New: func() interface{} { return &GameBattle_CheatAddBuffRequest{} }}

func (m *GameBattle_CheatAddBuffRequest) ReleasePool() {
	m.Reset()
	poolGameBattle_CheatAddBuffRequest.Put(m)
	m = nil
}

var poolGameBattle_CheatAddBuffResponse = &sync.Pool{New: func() interface{} { return &GameBattle_CheatAddBuffResponse{} }}

func (m *GameBattle_CheatAddBuffResponse) ReleasePool() {
	m.Reset()
	poolGameBattle_CheatAddBuffResponse.Put(m)
	m = nil
}
func (x BattleErrorCode) String() string {
	s, ok := BattleErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GameBattle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle)
	if !ok {
		that2, ok := that.(GameBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GameBattle_EnterAreaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_EnterAreaRequest)
	if !ok {
		that2, ok := that.(GameBattle_EnterAreaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *GameBattle_EnterAreaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_EnterAreaResponse)
	if !ok {
		that2, ok := that.(GameBattle_EnterAreaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *GameBattle_CPPCanToggleHangupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPCanToggleHangupRequest)
	if !ok {
		that2, ok := that.(GameBattle_CPPCanToggleHangupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *GameBattle_CPPCanToggleHangupResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPCanToggleHangupResponse)
	if !ok {
		that2, ok := that.(GameBattle_CPPCanToggleHangupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GameBattle_CPPEnterBattleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPEnterBattleRequest)
	if !ok {
		that2, ok := that.(GameBattle_CPPEnterBattleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.IsSingle != that1.IsSingle {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	return true
}
func (this *GameBattle_CPPEnterBattleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPEnterBattleResponse)
	if !ok {
		that2, ok := that.(GameBattle_CPPEnterBattleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *GameBattle_CPPGetBattleServerInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPGetBattleServerInfoRequest)
	if !ok {
		that2, ok := that.(GameBattle_CPPGetBattleServerInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GameBattle_CPPGetBattleServerInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPGetBattleServerInfoResponse)
	if !ok {
		that2, ok := that.(GameBattle_CPPGetBattleServerInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HangupMapId != that1.HangupMapId {
		return false
	}
	if this.HangupBattleId != that1.HangupBattleId {
		return false
	}
	return true
}
func (this *GameBattle_CPPRoleOfflinePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPRoleOfflinePush)
	if !ok {
		that2, ok := that.(GameBattle_CPPRoleOfflinePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HangupMapId != that1.HangupMapId {
		return false
	}
	if this.HangupBattleId != that1.HangupBattleId {
		return false
	}
	if this.HangupPosX != that1.HangupPosX {
		return false
	}
	if this.HangupPosY != that1.HangupPosY {
		return false
	}
	return true
}
func (this *GameBattle_CPPStageGetBattleServerIdRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPStageGetBattleServerIdRequest)
	if !ok {
		that2, ok := that.(GameBattle_CPPStageGetBattleServerIdRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SceneId != that1.SceneId {
		return false
	}
	return true
}
func (this *GameBattle_CPPStageGetBattleServerIdResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPStageGetBattleServerIdResponse)
	if !ok {
		that2, ok := that.(GameBattle_CPPStageGetBattleServerIdResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *GameBattle_CPPReviveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPReviveRequest)
	if !ok {
		that2, ok := that.(GameBattle_CPPReviveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Cost != that1.Cost {
		return false
	}
	return true
}
func (this *GameBattle_CPPReviveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CPPReviveResponse)
	if !ok {
		that2, ok := that.(GameBattle_CPPReviveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsSucc != that1.IsSucc {
		return false
	}
	return true
}
func (this *GameBattle_AutoMedicinePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_AutoMedicinePush)
	if !ok {
		that2, ok := that.(GameBattle_AutoMedicinePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *GameBattle_ManualMedicineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_ManualMedicineRequest)
	if !ok {
		that2, ok := that.(GameBattle_ManualMedicineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	return true
}
func (this *GameBattle_ManualMedicineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_ManualMedicineResponse)
	if !ok {
		that2, ok := that.(GameBattle_ManualMedicineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GameBattle_MedicineCdPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_MedicineCdPush)
	if !ok {
		that2, ok := that.(GameBattle_MedicineCdPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cd != that1.Cd {
		return false
	}
	return true
}
func (this *GameBattle_AutoMedicineClientRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_AutoMedicineClientRequest)
	if !ok {
		that2, ok := that.(GameBattle_AutoMedicineClientRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *GameBattle_AutoMedicineClientResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_AutoMedicineClientResponse)
	if !ok {
		that2, ok := that.(GameBattle_AutoMedicineClientResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if len(this.Medicine) != len(that1.Medicine) {
		return false
	}
	for i := range this.Medicine {
		if !this.Medicine[i].Equal(that1.Medicine[i]) {
			return false
		}
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CdTime != that1.CdTime {
		return false
	}
	return true
}
func (this *GameBattle_GetCurrBattleInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_GetCurrBattleInfoRequest)
	if !ok {
		that2, ok := that.(GameBattle_GetCurrBattleInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SceneId != that1.SceneId {
		return false
	}
	return true
}
func (this *GameBattle_GetCurrBattleInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_GetCurrBattleInfoResponse)
	if !ok {
		that2, ok := that.(GameBattle_GetCurrBattleInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.SceneId != that1.SceneId {
		return false
	}
	if this.HungupMapId != that1.HungupMapId {
		return false
	}
	if !this.LineInfo.Equal(that1.LineInfo) {
		return false
	}
	return true
}
func (this *GameBattle_GetMapAllLinesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_GetMapAllLinesRequest)
	if !ok {
		that2, ok := that.(GameBattle_GetMapAllLinesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *GameBattle_GetMapAllLinesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_GetMapAllLinesResponse)
	if !ok {
		that2, ok := that.(GameBattle_GetMapAllLinesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllLineInfo.Equal(that1.AllLineInfo) {
		return false
	}
	return true
}
func (this *GameBattle_GameGetTempBagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_GameGetTempBagRequest)
	if !ok {
		that2, ok := that.(GameBattle_GameGetTempBagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GameBattle_GameGetTempBagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_GameGetTempBagResponse)
	if !ok {
		that2, ok := that.(GameBattle_GameGetTempBagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TempBag.Equal(that1.TempBag) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *GameBattle_GameDrawTempBagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_GameDrawTempBagRequest)
	if !ok {
		that2, ok := that.(GameBattle_GameDrawTempBagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GameBattle_GameDrawTempBagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_GameDrawTempBagResponse)
	if !ok {
		that2, ok := that.(GameBattle_GameDrawTempBagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	return true
}
func (this *GameBattle_CheatAddBuffRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CheatAddBuffRequest)
	if !ok {
		that2, ok := that.(GameBattle_CheatAddBuffRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BuffId != that1.BuffId {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *GameBattle_CheatAddBuffResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameBattle_CheatAddBuffResponse)
	if !ok {
		that2, ok := that.(GameBattle_CheatAddBuffResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *GameBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GameBattle_EnterAreaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_EnterAreaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_EnterAreaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_EnterAreaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_EnterAreaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_EnterAreaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPCanToggleHangupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPCanToggleHangupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPCanToggleHangupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPCanToggleHangupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPCanToggleHangupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPCanToggleHangupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPEnterBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPEnterBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPEnterBattleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.IsSingle {
		i--
		if m.IsSingle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ConfigId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x20
	}
	if m.BattleServerId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPEnterBattleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPEnterBattleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPEnterBattleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.ErrCode))
		i--
		dAtA[i] = 0x30
	}
	if m.BattleServerId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if m.Port != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintBattle(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPGetBattleServerInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPGetBattleServerInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPGetBattleServerInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPGetBattleServerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPGetBattleServerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPGetBattleServerInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HangupBattleId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.HangupBattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.HangupMapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.HangupMapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPRoleOfflinePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPRoleOfflinePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPRoleOfflinePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HangupPosY != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HangupPosY))))
		i--
		dAtA[i] = 0x25
	}
	if m.HangupPosX != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HangupPosX))))
		i--
		dAtA[i] = 0x1d
	}
	if m.HangupBattleId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.HangupBattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.HangupMapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.HangupMapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPStageGetBattleServerIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPStageGetBattleServerIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPStageGetBattleServerIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SceneId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.SceneId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPStageGetBattleServerIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPStageGetBattleServerIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPStageGetBattleServerIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPReviveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPReviveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPReviveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cost != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Cost))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CPPReviveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CPPReviveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CPPReviveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSucc {
		i--
		if m.IsSucc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_AutoMedicinePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_AutoMedicinePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_AutoMedicinePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Typ != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_ManualMedicineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_ManualMedicineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_ManualMedicineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_ManualMedicineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_ManualMedicineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_ManualMedicineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GameBattle_MedicineCdPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_MedicineCdPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_MedicineCdPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cd != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Cd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_AutoMedicineClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_AutoMedicineClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_AutoMedicineClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x18
	}
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Typ != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_AutoMedicineClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_AutoMedicineClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_AutoMedicineClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CdTime != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.CdTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Id != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Medicine) > 0 {
		for k := range m.Medicine {
			v := m.Medicine[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBattle(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BattleId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_GetCurrBattleInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_GetCurrBattleInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_GetCurrBattleInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SceneId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.SceneId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_GetCurrBattleInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_GetCurrBattleInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_GetCurrBattleInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LineInfo != nil {
		{
			size, err := m.LineInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HungupMapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.HungupMapId))
		i--
		dAtA[i] = 0x18
	}
	if m.SceneId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.SceneId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_GetMapAllLinesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_GetMapAllLinesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_GetMapAllLinesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_GetMapAllLinesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_GetMapAllLinesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_GetMapAllLinesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllLineInfo != nil {
		{
			size, err := m.AllLineInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_GameGetTempBagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_GameGetTempBagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_GameGetTempBagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GameBattle_GameGetTempBagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_GameGetTempBagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_GameGetTempBagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.TempBag != nil {
		{
			size, err := m.TempBag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_GameDrawTempBagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_GameDrawTempBagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_GameDrawTempBagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GameBattle_GameDrawTempBagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_GameDrawTempBagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_GameDrawTempBagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CheatAddBuffRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CheatAddBuffRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CheatAddBuffRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.BuffId != 0 {
		i = encodeVarintBattle(dAtA, i, uint64(m.BuffId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameBattle_CheatAddBuffResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBattle_CheatAddBuffResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBattle_CheatAddBuffResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintBattle(dAtA []byte, offset int, v uint64) int {
	offset -= sovBattle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *GameBattle) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GameBattle_EnterAreaRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_EnterAreaResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CPPCanToggleHangupRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CPPCanToggleHangupResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GameBattle_CPPEnterBattleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.IsSingle {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_single")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSingle)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CPPEnterBattleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.Ip != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ip")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Ip)
		needWriteComma = true
	}
	if m.Port != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("port")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Port))
		needWriteComma = true
	}
	if m.Token != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.ErrCode != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("err_code")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ErrCode))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CPPGetBattleServerInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GameBattle_CPPGetBattleServerInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.HangupMapId != 0 {
		w.RawByte('"')
		w.RawString("hangup_map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HangupMapId))
		needWriteComma = true
	}
	if m.HangupBattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hangup_battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HangupBattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CPPRoleOfflinePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.HangupMapId != 0 {
		w.RawByte('"')
		w.RawString("hangup_map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HangupMapId))
		needWriteComma = true
	}
	if m.HangupBattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hangup_battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HangupBattleId))
		needWriteComma = true
	}
	if math.Abs(float64(m.HangupPosX)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hangup_pos_x")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.HangupPosX))
		needWriteComma = true
	}
	if math.Abs(float64(m.HangupPosY)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hangup_pos_y")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.HangupPosY))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CPPStageGetBattleServerIdRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SceneId != 0 {
		w.RawByte('"')
		w.RawString("scene_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SceneId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CPPStageGetBattleServerIdResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CPPReviveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Cost != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cost")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cost))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CPPReviveResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsSucc {
		w.RawByte('"')
		w.RawString("is_succ")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSucc)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_AutoMedicinePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_ManualMedicineRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_ManualMedicineResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GameBattle_MedicineCdPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Cd != 0 {
		w.RawByte('"')
		w.RawString("cd")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cd))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_AutoMedicineClientRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_AutoMedicineClientResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("medicine")
	w.RawByte('"')
	w.RawByte(':')
	if m.Medicine == nil {
		w.RawString("null")
	} else if len(m.Medicine) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlMedicine := len(m.Medicine)
		for k, v := range m.Medicine {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlMedicine--
			if mlMedicine != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Id != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.CdTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cd_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CdTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_GetCurrBattleInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SceneId != 0 {
		w.RawByte('"')
		w.RawString("scene_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SceneId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_GetCurrBattleInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.SceneId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("scene_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SceneId))
		needWriteComma = true
	}
	if m.HungupMapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hungup_map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HungupMapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("line_info")
	w.RawByte('"')
	w.RawByte(':')
	m.LineInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_GetMapAllLinesRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_GetMapAllLinesResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("all_line_info")
	w.RawByte('"')
	w.RawByte(':')
	m.AllLineInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_GameGetTempBagRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GameBattle_GameGetTempBagResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("temp_bag")
	w.RawByte('"')
	w.RawByte(':')
	m.TempBag.JsonBytes(w)
	needWriteComma = true
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_GameDrawTempBagRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GameBattle_GameDrawTempBagResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CheatAddBuffRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BuffId != 0 {
		w.RawByte('"')
		w.RawString("buff_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuffId))
		needWriteComma = true
	}
	if m.Num != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GameBattle_CheatAddBuffResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GameBattle) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle) GoString() string {
	return m.String()
}

func (m *GameBattle_EnterAreaRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_EnterAreaRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_EnterAreaRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_EnterAreaResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_EnterAreaResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_EnterAreaResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPCanToggleHangupRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPCanToggleHangupRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPCanToggleHangupRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPCanToggleHangupResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPCanToggleHangupResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPCanToggleHangupResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPEnterBattleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPEnterBattleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPEnterBattleRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPEnterBattleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPEnterBattleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPEnterBattleResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPGetBattleServerInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPGetBattleServerInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPGetBattleServerInfoRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPGetBattleServerInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPGetBattleServerInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPGetBattleServerInfoResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPRoleOfflinePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPRoleOfflinePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPRoleOfflinePush) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPStageGetBattleServerIdRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPStageGetBattleServerIdRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPStageGetBattleServerIdRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPStageGetBattleServerIdResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPStageGetBattleServerIdResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPStageGetBattleServerIdResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPReviveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPReviveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPReviveRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_CPPReviveResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CPPReviveResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CPPReviveResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_AutoMedicinePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_AutoMedicinePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_AutoMedicinePush) GoString() string {
	return m.String()
}

func (m *GameBattle_ManualMedicineRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_ManualMedicineRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_ManualMedicineRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_ManualMedicineResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_ManualMedicineResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_ManualMedicineResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_MedicineCdPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_MedicineCdPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_MedicineCdPush) GoString() string {
	return m.String()
}

func (m *GameBattle_AutoMedicineClientRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_AutoMedicineClientRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_AutoMedicineClientRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_AutoMedicineClientResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_AutoMedicineClientResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_AutoMedicineClientResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_GetCurrBattleInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_GetCurrBattleInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_GetCurrBattleInfoRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_GetCurrBattleInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_GetCurrBattleInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_GetCurrBattleInfoResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_GetMapAllLinesRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_GetMapAllLinesRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_GetMapAllLinesRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_GetMapAllLinesResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_GetMapAllLinesResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_GetMapAllLinesResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_GameGetTempBagRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_GameGetTempBagRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_GameGetTempBagRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_GameGetTempBagResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_GameGetTempBagResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_GameGetTempBagResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_GameDrawTempBagRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_GameDrawTempBagRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_GameDrawTempBagRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_GameDrawTempBagResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_GameDrawTempBagResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_GameDrawTempBagResponse) GoString() string {
	return m.String()
}

func (m *GameBattle_CheatAddBuffRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CheatAddBuffRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CheatAddBuffRequest) GoString() string {
	return m.String()
}

func (m *GameBattle_CheatAddBuffResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GameBattle_CheatAddBuffResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GameBattle_CheatAddBuffResponse) GoString() string {
	return m.String()
}

func (m *GameBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GameBattle_EnterAreaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovBattle(uint64(m.BattleServerId))
	}
	return n
}

func (m *GameBattle_EnterAreaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *GameBattle_CPPCanToggleHangupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovBattle(uint64(m.BattleServerId))
	}
	return n
}

func (m *GameBattle_CPPCanToggleHangupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GameBattle_CPPEnterBattleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovBattle(uint64(m.BattleServerId))
	}
	if m.ConfigId != 0 {
		n += 1 + sovBattle(uint64(m.ConfigId))
	}
	if m.IsSingle {
		n += 2
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	return n
}

func (m *GameBattle_CPPEnterBattleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovBattle(uint64(m.Port))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovBattle(uint64(m.BattleServerId))
	}
	if m.ErrCode != 0 {
		n += 1 + sovBattle(uint64(m.ErrCode))
	}
	return n
}

func (m *GameBattle_CPPGetBattleServerInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GameBattle_CPPGetBattleServerInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HangupMapId != 0 {
		n += 1 + sovBattle(uint64(m.HangupMapId))
	}
	if m.HangupBattleId != 0 {
		n += 1 + sovBattle(uint64(m.HangupBattleId))
	}
	return n
}

func (m *GameBattle_CPPRoleOfflinePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HangupMapId != 0 {
		n += 1 + sovBattle(uint64(m.HangupMapId))
	}
	if m.HangupBattleId != 0 {
		n += 1 + sovBattle(uint64(m.HangupBattleId))
	}
	if m.HangupPosX != 0 {
		n += 5
	}
	if m.HangupPosY != 0 {
		n += 5
	}
	return n
}

func (m *GameBattle_CPPStageGetBattleServerIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SceneId != 0 {
		n += 1 + sovBattle(uint64(m.SceneId))
	}
	return n
}

func (m *GameBattle_CPPStageGetBattleServerIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovBattle(uint64(m.BattleServerId))
	}
	return n
}

func (m *GameBattle_CPPReviveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBattle(uint64(m.ItemId))
	}
	if m.Cost != 0 {
		n += 1 + sovBattle(uint64(m.Cost))
	}
	return n
}

func (m *GameBattle_CPPReviveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSucc {
		n += 2
	}
	return n
}

func (m *GameBattle_AutoMedicinePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovBattle(uint64(m.Typ))
	}
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	return n
}

func (m *GameBattle_ManualMedicineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBattle(uint64(m.ItemId))
	}
	return n
}

func (m *GameBattle_ManualMedicineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GameBattle_MedicineCdPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cd != 0 {
		n += 1 + sovBattle(uint64(m.Cd))
	}
	return n
}

func (m *GameBattle_AutoMedicineClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovBattle(uint64(m.Typ))
	}
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	if m.BattleId != 0 {
		n += 1 + sovBattle(uint64(m.BattleId))
	}
	return n
}

func (m *GameBattle_AutoMedicineClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	if m.BattleId != 0 {
		n += 1 + sovBattle(uint64(m.BattleId))
	}
	if len(m.Medicine) > 0 {
		for k, v := range m.Medicine {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBattle(uint64(l))
			}
			mapEntrySize := 1 + sovBattle(uint64(k)) + l
			n += mapEntrySize + 1 + sovBattle(uint64(mapEntrySize))
		}
	}
	if m.Id != 0 {
		n += 1 + sovBattle(uint64(m.Id))
	}
	if m.CdTime != 0 {
		n += 1 + sovBattle(uint64(m.CdTime))
	}
	return n
}

func (m *GameBattle_GetCurrBattleInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SceneId != 0 {
		n += 1 + sovBattle(uint64(m.SceneId))
	}
	return n
}

func (m *GameBattle_GetCurrBattleInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovBattle(uint64(m.BattleId))
	}
	if m.SceneId != 0 {
		n += 1 + sovBattle(uint64(m.SceneId))
	}
	if m.HungupMapId != 0 {
		n += 1 + sovBattle(uint64(m.HungupMapId))
	}
	if m.LineInfo != nil {
		l = m.LineInfo.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	return n
}

func (m *GameBattle_GetMapAllLinesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	return n
}

func (m *GameBattle_GetMapAllLinesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllLineInfo != nil {
		l = m.AllLineInfo.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	return n
}

func (m *GameBattle_GameGetTempBagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GameBattle_GameGetTempBagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TempBag != nil {
		l = m.TempBag.Size()
		n += 1 + l + sovBattle(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovBattle(uint64(m.MapId))
	}
	return n
}

func (m *GameBattle_GameDrawTempBagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GameBattle_GameDrawTempBagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBattle(uint64(k)) + 1 + sovBattle(uint64(v))
			n += mapEntrySize + 1 + sovBattle(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GameBattle_CheatAddBuffRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuffId != 0 {
		n += 1 + sovBattle(uint64(m.BuffId))
	}
	if m.Num != 0 {
		n += 1 + sovBattle(uint64(m.Num))
	}
	return n
}

func (m *GameBattle_CheatAddBuffResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovBattle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBattle(x uint64) (n int) {
	return sovBattle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_EnterAreaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterAreaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterAreaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &newbattle.Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_EnterAreaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterAreaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterAreaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &newbattle.Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPCanToggleHangupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPCanToggleHangupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPCanToggleHangupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPCanToggleHangupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPCanToggleHangupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPCanToggleHangupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPEnterBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPEnterBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPEnterBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &cppbattle.CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSingle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSingle = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &cppbattle.CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPEnterBattleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPEnterBattleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPEnterBattleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPGetBattleServerInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPGetBattleServerInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPGetBattleServerInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPGetBattleServerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPGetBattleServerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPGetBattleServerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupMapId", wireType)
			}
			m.HangupMapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HangupMapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupBattleId", wireType)
			}
			m.HangupBattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HangupBattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPRoleOfflinePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPRoleOfflinePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPRoleOfflinePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupMapId", wireType)
			}
			m.HangupMapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HangupMapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupBattleId", wireType)
			}
			m.HangupBattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HangupBattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupPosX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HangupPosX = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupPosY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HangupPosY = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPStageGetBattleServerIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPStageGetBattleServerIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPStageGetBattleServerIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			m.SceneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPStageGetBattleServerIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPStageGetBattleServerIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPStageGetBattleServerIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPReviveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPReviveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPReviveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CPPReviveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPReviveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPReviveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSucc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSucc = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_AutoMedicinePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMedicinePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMedicinePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_ManualMedicineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManualMedicineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManualMedicineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_ManualMedicineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManualMedicineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManualMedicineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_MedicineCdPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedicineCdPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedicineCdPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cd", wireType)
			}
			m.Cd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_AutoMedicineClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMedicineClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMedicineClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_AutoMedicineClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMedicineClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMedicineClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medicine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Medicine == nil {
				m.Medicine = make(map[int64]*models.MedicineInfo)
			}
			var mapkey int64
			var mapvalue *models.MedicineInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBattle
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBattle
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.MedicineInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Medicine[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdTime", wireType)
			}
			m.CdTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_GetCurrBattleInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrBattleInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrBattleInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			m.SceneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_GetCurrBattleInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrBattleInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrBattleInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneId", wireType)
			}
			m.SceneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SceneId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HungupMapId", wireType)
			}
			m.HungupMapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HungupMapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LineInfo == nil {
				m.LineInfo = &models.LineInfo{}
			}
			if err := m.LineInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_GetMapAllLinesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapAllLinesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapAllLinesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_GetMapAllLinesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapAllLinesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapAllLinesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllLineInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllLineInfo == nil {
				m.AllLineInfo = &models.AllLineInfo{}
			}
			if err := m.AllLineInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_GameGetTempBagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGetTempBagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGetTempBagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_GameGetTempBagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameGetTempBagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameGetTempBagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempBag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TempBag == nil {
				m.TempBag = &models.TempBag{}
			}
			if err := m.TempBag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_GameDrawTempBagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameDrawTempBagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameDrawTempBagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_GameDrawTempBagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameDrawTempBagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameDrawTempBagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CheatAddBuffRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddBuffRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddBuffRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
			m.BuffId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBattle_CheatAddBuffResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddBuffResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddBuffResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBattle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBattle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBattle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBattle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBattle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBattle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBattle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBattle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBattle = fmt.Errorf("proto: unexpected end of group")
)
