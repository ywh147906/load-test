// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/x_day_goal.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type XDayGoalErrorCode int32

const (
	XDayGoalErrorCode_ErrXDayGoalSystem        XDayGoalErrorCode = 0
	XDayGoalErrorCode_ErrXDayGoalNotData       XDayGoalErrorCode = 1
	XDayGoalErrorCode_ErrXDayGoalConfig        XDayGoalErrorCode = 2
	XDayGoalErrorCode_ErrXDayGoalNoStart       XDayGoalErrorCode = 3
	XDayGoalErrorCode_ErrXDayGoalTimeOver      XDayGoalErrorCode = 4
	XDayGoalErrorCode_ErrXDayGoalNoReward      XDayGoalErrorCode = 5
	XDayGoalErrorCode_ErrXDayGoalReceived      XDayGoalErrorCode = 6
	XDayGoalErrorCode_ErrXDayGoalNotComplete   XDayGoalErrorCode = 7
	XDayGoalErrorCode_ErrXDayGoalNotScore      XDayGoalErrorCode = 8
	XDayGoalErrorCode_ErrXDayGoalScoreReceived XDayGoalErrorCode = 9
	XDayGoalErrorCode_ErrXDayGoalNotDay        XDayGoalErrorCode = 10
)

var XDayGoalErrorCode_name = map[int32]string{
	0:  "ErrXDayGoalSystem",
	1:  "ErrXDayGoalNotData",
	2:  "ErrXDayGoalConfig",
	3:  "ErrXDayGoalNoStart",
	4:  "ErrXDayGoalTimeOver",
	5:  "ErrXDayGoalNoReward",
	6:  "ErrXDayGoalReceived",
	7:  "ErrXDayGoalNotComplete",
	8:  "ErrXDayGoalNotScore",
	9:  "ErrXDayGoalScoreReceived",
	10: "ErrXDayGoalNotDay",
}

var XDayGoalErrorCode_value = map[string]int32{
	"ErrXDayGoalSystem":        0,
	"ErrXDayGoalNotData":       1,
	"ErrXDayGoalConfig":        2,
	"ErrXDayGoalNoStart":       3,
	"ErrXDayGoalTimeOver":      4,
	"ErrXDayGoalNoReward":      5,
	"ErrXDayGoalReceived":      6,
	"ErrXDayGoalNotComplete":   7,
	"ErrXDayGoalNotScore":      8,
	"ErrXDayGoalScoreReceived": 9,
	"ErrXDayGoalNotDay":        10,
}

func (XDayGoalErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0}
}

type XDayGoal struct {
}

func (m *XDayGoal) Reset()      { *m = XDayGoal{} }
func (*XDayGoal) ProtoMessage() {}
func (*XDayGoal) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0}
}
func (m *XDayGoal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal.Merge(m, src)
}
func (m *XDayGoal) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal proto.InternalMessageInfo

func (*XDayGoal) XXX_MessageName() string {
	return "service.XDayGoal"
}

// 获取当前所有任务情况
type XDayGoal_XDayGoalAllInfoRequest struct {
}

func (m *XDayGoal_XDayGoalAllInfoRequest) Reset()      { *m = XDayGoal_XDayGoalAllInfoRequest{} }
func (*XDayGoal_XDayGoalAllInfoRequest) ProtoMessage() {}
func (*XDayGoal_XDayGoalAllInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 0}
}
func (m *XDayGoal_XDayGoalAllInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalAllInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalAllInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalAllInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalAllInfoRequest.Merge(m, src)
}
func (m *XDayGoal_XDayGoalAllInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalAllInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalAllInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalAllInfoRequest proto.InternalMessageInfo

func (*XDayGoal_XDayGoalAllInfoRequest) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalAllInfoRequest"
}

type XDayGoal_XDayGoalAllInfoResponse struct {
	Infos map[int64]*models.XDayGoalInfoDetail `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *XDayGoal_XDayGoalAllInfoResponse) Reset()      { *m = XDayGoal_XDayGoalAllInfoResponse{} }
func (*XDayGoal_XDayGoalAllInfoResponse) ProtoMessage() {}
func (*XDayGoal_XDayGoalAllInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 1}
}
func (m *XDayGoal_XDayGoalAllInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalAllInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalAllInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalAllInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalAllInfoResponse.Merge(m, src)
}
func (m *XDayGoal_XDayGoalAllInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalAllInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalAllInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalAllInfoResponse proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalAllInfoResponse) GetInfos() map[int64]*models.XDayGoalInfoDetail {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (*XDayGoal_XDayGoalAllInfoResponse) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalAllInfoResponse"
}

// 领取奖品
type XDayGoal_XDayGoalGetReceiveActivityRequest struct {
	Id         int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId int64 `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) Reset() {
	*m = XDayGoal_XDayGoalGetReceiveActivityRequest{}
}
func (*XDayGoal_XDayGoalGetReceiveActivityRequest) ProtoMessage() {}
func (*XDayGoal_XDayGoalGetReceiveActivityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 2}
}
func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalGetReceiveActivityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalGetReceiveActivityRequest.Merge(m, src)
}
func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalGetReceiveActivityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalGetReceiveActivityRequest proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (*XDayGoal_XDayGoalGetReceiveActivityRequest) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalGetReceiveActivityRequest"
}

type XDayGoal_XDayGoalGetReceiveActivityResponse struct {
	RewardItem *models.Items              `protobuf:"bytes,1,opt,name=reward_item,json=rewardItem,proto3" json:"reward_item,omitempty"`
	Info       *models.XDayGoalInfoDetail `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) Reset() {
	*m = XDayGoal_XDayGoalGetReceiveActivityResponse{}
}
func (*XDayGoal_XDayGoalGetReceiveActivityResponse) ProtoMessage() {}
func (*XDayGoal_XDayGoalGetReceiveActivityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 3}
}
func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalGetReceiveActivityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalGetReceiveActivityResponse.Merge(m, src)
}
func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalGetReceiveActivityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalGetReceiveActivityResponse proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) GetRewardItem() *models.Items {
	if m != nil {
		return m.RewardItem
	}
	return nil
}

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) GetInfo() *models.XDayGoalInfoDetail {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*XDayGoal_XDayGoalGetReceiveActivityResponse) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalGetReceiveActivityResponse"
}

// 领取积分奖品
type XDayGoal_XDayGoalGetReceiveScoreRewardRequest struct {
	Id         int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId int64 `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) Reset() {
	*m = XDayGoal_XDayGoalGetReceiveScoreRewardRequest{}
}
func (*XDayGoal_XDayGoalGetReceiveScoreRewardRequest) ProtoMessage() {}
func (*XDayGoal_XDayGoalGetReceiveScoreRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 4}
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalGetReceiveScoreRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalGetReceiveScoreRewardRequest.Merge(m, src)
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalGetReceiveScoreRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalGetReceiveScoreRewardRequest proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (*XDayGoal_XDayGoalGetReceiveScoreRewardRequest) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalGetReceiveScoreRewardRequest"
}

type XDayGoal_XDayGoalGetReceiveScoreRewardResponse struct {
	RewardItem *models.Items              `protobuf:"bytes,1,opt,name=reward_item,json=rewardItem,proto3" json:"reward_item,omitempty"`
	Info       *models.XDayGoalInfoDetail `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) Reset() {
	*m = XDayGoal_XDayGoalGetReceiveScoreRewardResponse{}
}
func (*XDayGoal_XDayGoalGetReceiveScoreRewardResponse) ProtoMessage() {}
func (*XDayGoal_XDayGoalGetReceiveScoreRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 5}
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalGetReceiveScoreRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalGetReceiveScoreRewardResponse.Merge(m, src)
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalGetReceiveScoreRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalGetReceiveScoreRewardResponse proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) GetRewardItem() *models.Items {
	if m != nil {
		return m.RewardItem
	}
	return nil
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) GetInfo() *models.XDayGoalInfoDetail {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*XDayGoal_XDayGoalGetReceiveScoreRewardResponse) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalGetReceiveScoreRewardResponse"
}

// 获取活动配置
type XDayGoal_XDayGoalGetActivityConfRequest struct {
	ActivityId int64 `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (m *XDayGoal_XDayGoalGetActivityConfRequest) Reset() {
	*m = XDayGoal_XDayGoalGetActivityConfRequest{}
}
func (*XDayGoal_XDayGoalGetActivityConfRequest) ProtoMessage() {}
func (*XDayGoal_XDayGoalGetActivityConfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 6}
}
func (m *XDayGoal_XDayGoalGetActivityConfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalGetActivityConfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalGetActivityConfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalGetActivityConfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalGetActivityConfRequest.Merge(m, src)
}
func (m *XDayGoal_XDayGoalGetActivityConfRequest) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalGetActivityConfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalGetActivityConfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalGetActivityConfRequest proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalGetActivityConfRequest) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (*XDayGoal_XDayGoalGetActivityConfRequest) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalGetActivityConfRequest"
}

type XDayGoal_XDayGoalGetActivityConfResponse struct {
	Cnf []*models.XDayCnfInfo `protobuf:"bytes,1,rep,name=cnf,proto3" json:"cnf,omitempty"`
}

func (m *XDayGoal_XDayGoalGetActivityConfResponse) Reset() {
	*m = XDayGoal_XDayGoalGetActivityConfResponse{}
}
func (*XDayGoal_XDayGoalGetActivityConfResponse) ProtoMessage() {}
func (*XDayGoal_XDayGoalGetActivityConfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 7}
}
func (m *XDayGoal_XDayGoalGetActivityConfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalGetActivityConfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalGetActivityConfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalGetActivityConfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalGetActivityConfResponse.Merge(m, src)
}
func (m *XDayGoal_XDayGoalGetActivityConfResponse) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalGetActivityConfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalGetActivityConfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalGetActivityConfResponse proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalGetActivityConfResponse) GetCnf() []*models.XDayCnfInfo {
	if m != nil {
		return m.Cnf
	}
	return nil
}

func (*XDayGoal_XDayGoalGetActivityConfResponse) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalGetActivityConfResponse"
}

// 获取积分配置
type XDayGoal_XDayGoalGetScoreConfRequest struct {
	ActivityId int64 `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (m *XDayGoal_XDayGoalGetScoreConfRequest) Reset()      { *m = XDayGoal_XDayGoalGetScoreConfRequest{} }
func (*XDayGoal_XDayGoalGetScoreConfRequest) ProtoMessage() {}
func (*XDayGoal_XDayGoalGetScoreConfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 8}
}
func (m *XDayGoal_XDayGoalGetScoreConfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalGetScoreConfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalGetScoreConfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalGetScoreConfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalGetScoreConfRequest.Merge(m, src)
}
func (m *XDayGoal_XDayGoalGetScoreConfRequest) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalGetScoreConfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalGetScoreConfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalGetScoreConfRequest proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalGetScoreConfRequest) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (*XDayGoal_XDayGoalGetScoreConfRequest) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalGetScoreConfRequest"
}

type XDayGoal_XDayGoalGetScoreConfResponse struct {
	Cnf []*models.XDayScoreCnfInfo `protobuf:"bytes,1,rep,name=cnf,proto3" json:"cnf,omitempty"`
}

func (m *XDayGoal_XDayGoalGetScoreConfResponse) Reset()      { *m = XDayGoal_XDayGoalGetScoreConfResponse{} }
func (*XDayGoal_XDayGoalGetScoreConfResponse) ProtoMessage() {}
func (*XDayGoal_XDayGoalGetScoreConfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 9}
}
func (m *XDayGoal_XDayGoalGetScoreConfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalGetScoreConfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalGetScoreConfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalGetScoreConfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalGetScoreConfResponse.Merge(m, src)
}
func (m *XDayGoal_XDayGoalGetScoreConfResponse) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalGetScoreConfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalGetScoreConfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalGetScoreConfResponse proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalGetScoreConfResponse) GetCnf() []*models.XDayScoreCnfInfo {
	if m != nil {
		return m.Cnf
	}
	return nil
}

func (*XDayGoal_XDayGoalGetScoreConfResponse) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalGetScoreConfResponse"
}

// 活动进程更新
type XDayGoal_XDayGoalActivityProgressPush struct {
	Progress map[int64]*models.ActivityProgress `protobuf:"bytes,1,rep,name=progress,proto3" json:"progress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *XDayGoal_XDayGoalActivityProgressPush) Reset()      { *m = XDayGoal_XDayGoalActivityProgressPush{} }
func (*XDayGoal_XDayGoalActivityProgressPush) ProtoMessage() {}
func (*XDayGoal_XDayGoalActivityProgressPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 10}
}
func (m *XDayGoal_XDayGoalActivityProgressPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_XDayGoalActivityProgressPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_XDayGoalActivityProgressPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_XDayGoalActivityProgressPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_XDayGoalActivityProgressPush.Merge(m, src)
}
func (m *XDayGoal_XDayGoalActivityProgressPush) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_XDayGoalActivityProgressPush) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_XDayGoalActivityProgressPush.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_XDayGoalActivityProgressPush proto.InternalMessageInfo

func (m *XDayGoal_XDayGoalActivityProgressPush) GetProgress() map[int64]*models.ActivityProgress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (*XDayGoal_XDayGoalActivityProgressPush) XXX_MessageName() string {
	return "service.XDayGoal.XDayGoalActivityProgressPush"
}

// 修改结束时间 永久活动无法修改
type XDayGoal_CheatXDayGmChangeEndTimeRequest struct {
	ActivityId int64 `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	EndTime    int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) Reset() {
	*m = XDayGoal_CheatXDayGmChangeEndTimeRequest{}
}
func (*XDayGoal_CheatXDayGmChangeEndTimeRequest) ProtoMessage() {}
func (*XDayGoal_CheatXDayGmChangeEndTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 11}
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_CheatXDayGmChangeEndTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_CheatXDayGmChangeEndTimeRequest.Merge(m, src)
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_CheatXDayGmChangeEndTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_CheatXDayGmChangeEndTimeRequest proto.InternalMessageInfo

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (*XDayGoal_CheatXDayGmChangeEndTimeRequest) XXX_MessageName() string {
	return "service.XDayGoal.CheatXDayGmChangeEndTimeRequest"
}

type XDayGoal_CheatXDayGmChangeEndTimeResponse struct {
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) Reset() {
	*m = XDayGoal_CheatXDayGmChangeEndTimeResponse{}
}
func (*XDayGoal_CheatXDayGmChangeEndTimeResponse) ProtoMessage() {}
func (*XDayGoal_CheatXDayGmChangeEndTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 12}
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_CheatXDayGmChangeEndTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_CheatXDayGmChangeEndTimeResponse.Merge(m, src)
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_CheatXDayGmChangeEndTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_CheatXDayGmChangeEndTimeResponse proto.InternalMessageInfo

func (*XDayGoal_CheatXDayGmChangeEndTimeResponse) XXX_MessageName() string {
	return "service.XDayGoal.CheatXDayGmChangeEndTimeResponse"
}

// 修改已解锁天数
type XDayGoal_CheatXDayGmChangeDaysRequest struct {
	ActivityId int64 `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Days       int64 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) Reset()      { *m = XDayGoal_CheatXDayGmChangeDaysRequest{} }
func (*XDayGoal_CheatXDayGmChangeDaysRequest) ProtoMessage() {}
func (*XDayGoal_CheatXDayGmChangeDaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 13}
}
func (m *XDayGoal_CheatXDayGmChangeDaysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_CheatXDayGmChangeDaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_CheatXDayGmChangeDaysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_CheatXDayGmChangeDaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_CheatXDayGmChangeDaysRequest.Merge(m, src)
}
func (m *XDayGoal_CheatXDayGmChangeDaysRequest) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_CheatXDayGmChangeDaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_CheatXDayGmChangeDaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_CheatXDayGmChangeDaysRequest proto.InternalMessageInfo

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) GetDays() int64 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (*XDayGoal_CheatXDayGmChangeDaysRequest) XXX_MessageName() string {
	return "service.XDayGoal.CheatXDayGmChangeDaysRequest"
}

type XDayGoal_CheatXDayGmChangeDaysResponse struct {
	Info *models.XDayGoalInfoDetail `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *XDayGoal_CheatXDayGmChangeDaysResponse) Reset() {
	*m = XDayGoal_CheatXDayGmChangeDaysResponse{}
}
func (*XDayGoal_CheatXDayGmChangeDaysResponse) ProtoMessage() {}
func (*XDayGoal_CheatXDayGmChangeDaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ef2b8cc1fbf2cb, []int{0, 14}
}
func (m *XDayGoal_CheatXDayGmChangeDaysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoal_CheatXDayGmChangeDaysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoal_CheatXDayGmChangeDaysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoal_CheatXDayGmChangeDaysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoal_CheatXDayGmChangeDaysResponse.Merge(m, src)
}
func (m *XDayGoal_CheatXDayGmChangeDaysResponse) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoal_CheatXDayGmChangeDaysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoal_CheatXDayGmChangeDaysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoal_CheatXDayGmChangeDaysResponse proto.InternalMessageInfo

func (m *XDayGoal_CheatXDayGmChangeDaysResponse) GetInfo() *models.XDayGoalInfoDetail {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*XDayGoal_CheatXDayGmChangeDaysResponse) XXX_MessageName() string {
	return "service.XDayGoal.CheatXDayGmChangeDaysResponse"
}
func init() {
	proto.RegisterEnum("service.XDayGoalErrorCode", XDayGoalErrorCode_name, XDayGoalErrorCode_value)
	proto.RegisterType((*XDayGoal)(nil), "service.XDayGoal")
	proto.RegisterType((*XDayGoal_XDayGoalAllInfoRequest)(nil), "service.XDayGoal.XDayGoalAllInfoRequest")
	proto.RegisterType((*XDayGoal_XDayGoalAllInfoResponse)(nil), "service.XDayGoal.XDayGoalAllInfoResponse")
	proto.RegisterMapType((map[int64]*models.XDayGoalInfoDetail)(nil), "service.XDayGoal.XDayGoalAllInfoResponse.InfosEntry")
	proto.RegisterType((*XDayGoal_XDayGoalGetReceiveActivityRequest)(nil), "service.XDayGoal.XDayGoalGetReceiveActivityRequest")
	proto.RegisterType((*XDayGoal_XDayGoalGetReceiveActivityResponse)(nil), "service.XDayGoal.XDayGoalGetReceiveActivityResponse")
	proto.RegisterType((*XDayGoal_XDayGoalGetReceiveScoreRewardRequest)(nil), "service.XDayGoal.XDayGoalGetReceiveScoreRewardRequest")
	proto.RegisterType((*XDayGoal_XDayGoalGetReceiveScoreRewardResponse)(nil), "service.XDayGoal.XDayGoalGetReceiveScoreRewardResponse")
	proto.RegisterType((*XDayGoal_XDayGoalGetActivityConfRequest)(nil), "service.XDayGoal.XDayGoalGetActivityConfRequest")
	proto.RegisterType((*XDayGoal_XDayGoalGetActivityConfResponse)(nil), "service.XDayGoal.XDayGoalGetActivityConfResponse")
	proto.RegisterType((*XDayGoal_XDayGoalGetScoreConfRequest)(nil), "service.XDayGoal.XDayGoalGetScoreConfRequest")
	proto.RegisterType((*XDayGoal_XDayGoalGetScoreConfResponse)(nil), "service.XDayGoal.XDayGoalGetScoreConfResponse")
	proto.RegisterType((*XDayGoal_XDayGoalActivityProgressPush)(nil), "service.XDayGoal.XDayGoalActivityProgressPush")
	proto.RegisterMapType((map[int64]*models.ActivityProgress)(nil), "service.XDayGoal.XDayGoalActivityProgressPush.ProgressEntry")
	proto.RegisterType((*XDayGoal_CheatXDayGmChangeEndTimeRequest)(nil), "service.XDayGoal.CheatXDayGmChangeEndTimeRequest")
	proto.RegisterType((*XDayGoal_CheatXDayGmChangeEndTimeResponse)(nil), "service.XDayGoal.CheatXDayGmChangeEndTimeResponse")
	proto.RegisterType((*XDayGoal_CheatXDayGmChangeDaysRequest)(nil), "service.XDayGoal.CheatXDayGmChangeDaysRequest")
	proto.RegisterType((*XDayGoal_CheatXDayGmChangeDaysResponse)(nil), "service.XDayGoal.CheatXDayGmChangeDaysResponse")
}

func init() { proto.RegisterFile("proto/service/x_day_goal.proto", fileDescriptor_11ef2b8cc1fbf2cb) }

var fileDescriptor_11ef2b8cc1fbf2cb = []byte{
	// 959 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xd8, 0x49, 0x93, 0x3e, 0xd3, 0x76, 0x33, 0x55, 0x93, 0xd5, 0xa4, 0xdd, 0x98, 0x88,
	0x8a, 0x10, 0xc4, 0x06, 0x02, 0x07, 0x40, 0x08, 0x29, 0x38, 0x51, 0x49, 0x0f, 0x69, 0xe5, 0x04,
	0x51, 0x21, 0xa4, 0x68, 0xeb, 0x1d, 0x3b, 0x2b, 0xbc, 0x3b, 0x61, 0x77, 0x63, 0xd8, 0x1b, 0x08,
	0x5a, 0x82, 0x69, 0xa0, 0x52, 0xa1, 0x15, 0x52, 0x51, 0x55, 0x24, 0xd4, 0x88, 0x43, 0x52, 0x52,
	0xdc, 0x20, 0x19, 0xee, 0xbd, 0xd1, 0x63, 0x8f, 0xe0, 0x74, 0x9d, 0xf8, 0xc6, 0x9f, 0x80, 0xf6,
	0xc7, 0x38, 0x6b, 0x3b, 0x09, 0x86, 0x03, 0xb7, 0x9d, 0x79, 0xdf, 0xfb, 0xde, 0xf7, 0xbd, 0x99,
	0x37, 0x5a, 0x90, 0x16, 0x4d, 0x66, 0xb3, 0x31, 0x8b, 0x9a, 0x45, 0x2d, 0x4b, 0xc7, 0x3e, 0x9c,
	0x57, 0x15, 0x67, 0x3e, 0xcf, 0x94, 0x82, 0xec, 0x07, 0x70, 0x4f, 0x18, 0x21, 0xa7, 0x02, 0xa0,
	0xce, 0x54, 0x5a, 0xb0, 0xda, 0x70, 0x64, 0xa0, 0x29, 0x7c, 0x51, 0xb1, 0x68, 0x18, 0x18, 0x6c,
	0x0a, 0x28, 0x59, 0x5b, 0x2b, 0x6a, 0xb6, 0x13, 0x06, 0xfb, 0x5b, 0xb2, 0xf2, 0xc1, 0xfe, 0x70,
	0x39, 0x09, 0xbd, 0x17, 0x26, 0x15, 0xe7, 0x0c, 0x53, 0x0a, 0x44, 0x84, 0x7e, 0xfe, 0x3d, 0x51,
	0x28, 0x4c, 0x1b, 0x39, 0x96, 0xa1, 0xef, 0x2f, 0x51, 0xcb, 0x26, 0x15, 0x04, 0x03, 0x6d, 0x21,
	0x6b, 0x91, 0x19, 0x16, 0xc5, 0x67, 0xa1, 0x5b, 0x33, 0x72, 0xcc, 0x12, 0x13, 0xa9, 0xc4, 0x48,
	0x72, 0xfc, 0x25, 0x39, 0x34, 0x22, 0xf3, 0x04, 0x79, 0x9f, 0x4c, 0xd9, 0x5b, 0x58, 0x53, 0x86,
	0x6d, 0x3a, 0x99, 0x80, 0x82, 0xcc, 0x01, 0xec, 0x6e, 0x62, 0x01, 0x12, 0xef, 0x51, 0x47, 0x44,
	0x29, 0x34, 0x92, 0xc8, 0x78, 0x9f, 0xf8, 0x79, 0xe8, 0x2e, 0x2a, 0x85, 0x25, 0x2a, 0xc6, 0x53,
	0x68, 0x24, 0x39, 0x4e, 0xe4, 0xc0, 0x50, 0xa3, 0x82, 0x97, 0x3c, 0x49, 0x6d, 0x45, 0x2b, 0x64,
	0x02, 0xe0, 0xab, 0xf1, 0x97, 0x11, 0x99, 0x83, 0x27, 0x39, 0xe0, 0x0c, 0xb5, 0x33, 0x34, 0x4b,
	0xb5, 0x22, 0x9d, 0x08, 0x1b, 0x14, 0x5a, 0xc4, 0x47, 0x21, 0xae, 0xa9, 0x61, 0xad, 0xb8, 0xa6,
	0xe2, 0x21, 0x48, 0xf2, 0x1e, 0xce, 0x6b, 0xaa, 0x5f, 0x30, 0x91, 0x01, 0xbe, 0x35, 0xad, 0x92,
	0x4f, 0x11, 0x0c, 0x1f, 0x44, 0x1b, 0xb6, 0x47, 0x86, 0xa4, 0x49, 0x3f, 0x50, 0x4c, 0x75, 0x5e,
	0xb3, 0xa9, 0xee, 0x17, 0x48, 0x8e, 0x1f, 0xe1, 0xc2, 0xa7, 0x6d, 0xaa, 0x5b, 0x19, 0x08, 0x10,
	0xde, 0x02, 0xcb, 0xd0, 0xe5, 0xf5, 0xa2, 0x03, 0x87, 0x3e, 0x8e, 0xbc, 0x0d, 0x4f, 0xb5, 0xab,
	0x98, 0xcd, 0x32, 0x93, 0x66, 0x7c, 0xd2, 0xff, 0xec, 0xef, 0x33, 0x04, 0xa7, 0xff, 0x81, 0xf9,
	0x7f, 0xb2, 0x38, 0x01, 0x52, 0x44, 0x08, 0xef, 0x70, 0x9a, 0x19, 0x39, 0x6e, 0xae, 0xc5, 0x0c,
	0x6a, 0x33, 0xf3, 0x26, 0x0c, 0xed, 0x4b, 0x11, 0xba, 0x38, 0x0d, 0x89, 0xac, 0x91, 0x13, 0x91,
	0x7f, 0x8b, 0x8f, 0x47, 0x45, 0xa5, 0x8d, 0x9c, 0x7f, 0x6f, 0xbd, 0x38, 0x79, 0x1d, 0x06, 0x23,
	0x4c, 0x7e, 0x3b, 0xfe, 0x95, 0x92, 0xb3, 0x70, 0x72, 0xef, 0xfc, 0x50, 0xc6, 0x68, 0x54, 0x86,
	0x18, 0x95, 0x11, 0x60, 0xa3, 0x5a, 0x7e, 0x47, 0xbb, 0x64, 0xdc, 0xd3, 0x79, 0x93, 0xe5, 0x4d,
	0x6a, 0x59, 0xe7, 0x97, 0xac, 0x05, 0x7c, 0x01, 0x7a, 0x17, 0xc3, 0x75, 0xc8, 0xf8, 0xda, 0x01,
	0xe3, 0xb9, 0x07, 0x83, 0xcc, 0x17, 0xc1, 0x98, 0x36, 0xd8, 0xc8, 0x5b, 0x70, 0xa4, 0x29, 0xb4,
	0xc7, 0xb0, 0xca, 0xcd, 0xc3, 0xda, 0xf0, 0xd2, 0x5a, 0x27, 0x3a, 0xaa, 0xef, 0xc2, 0x50, 0x7a,
	0x81, 0x2a, 0xb6, 0xaf, 0x49, 0x4f, 0x2f, 0x28, 0x46, 0x9e, 0x4e, 0x19, 0xea, 0x9c, 0xa6, 0xd3,
	0x4e, 0x3b, 0x8c, 0x45, 0xe8, 0xa1, 0x41, 0x4a, 0x78, 0xab, 0xf9, 0x92, 0x0c, 0x43, 0x6a, 0x7f,
	0xf6, 0xa0, 0xff, 0x64, 0x16, 0x4e, 0xb6, 0x61, 0x26, 0x15, 0xc7, 0xea, 0xb8, 0x3c, 0x86, 0x2e,
	0x55, 0x71, 0xac, 0xb0, 0xb6, 0xff, 0x4d, 0xce, 0xc1, 0xa9, 0x7d, 0x48, 0x1b, 0x23, 0x14, 0x8c,
	0x04, 0xea, 0x6c, 0x24, 0x46, 0xbf, 0xec, 0x82, 0x3e, 0x1e, 0x9c, 0x32, 0x4d, 0x66, 0xa6, 0x99,
	0x4a, 0xf1, 0x33, 0xd0, 0x37, 0x65, 0x9a, 0x7c, 0x7f, 0xd6, 0xb1, 0x6c, 0xaa, 0x0b, 0x31, 0x82,
	0x4b, 0x65, 0xf1, 0x28, 0x7e, 0x62, 0xfb, 0x5e, 0x65, 0xbb, 0x72, 0xab, 0xfe, 0xf5, 0xb7, 0x3b,
	0xeb, 0xeb, 0x78, 0x14, 0x70, 0x04, 0x3a, 0xc3, 0xec, 0x49, 0xc5, 0x56, 0x04, 0xc4, 0xb1, 0xb5,
	0x8d, 0xdb, 0xb5, 0x9b, 0x9f, 0xd7, 0xbe, 0xb9, 0x5b, 0x5b, 0x59, 0x6b, 0xa1, 0xf5, 0x6e, 0xab,
	0x96, 0x17, 0xe2, 0x1c, 0x5a, 0xbf, 0xb4, 0xb2, 0xfd, 0xdb, 0x5a, 0x48, 0xfb, 0x74, 0x0b, 0xed,
	0xac, 0xad, 0x98, 0xb6, 0x90, 0x20, 0xc7, 0x4a, 0x65, 0x31, 0x89, 0x0f, 0xd7, 0x6e, 0xfe, 0xe8,
	0xfe, 0xfa, 0x91, 0x7b, 0xe7, 0x0b, 0x3c, 0x02, 0xc7, 0x23, 0x40, 0xef, 0x04, 0xce, 0x15, 0xa9,
	0x29, 0x74, 0x71, 0xa4, 0xbb, 0xb9, 0xb1, 0x5d, 0xb9, 0x56, 0xfb, 0xee, 0x16, 0x96, 0x9b, 0x90,
	0x33, 0x2c, 0x78, 0x7c, 0x84, 0x6e, 0x72, 0xa2, 0x54, 0x16, 0xfb, 0xf0, 0x31, 0x77, 0x73, 0xc3,
	0xbd, 0xb4, 0x5a, 0xff, 0x64, 0xb5, 0xfe, 0xfd, 0x65, 0x77, 0xed, 0x4a, 0x0b, 0x3e, 0x7c, 0xb6,
	0x54, 0xe1, 0x50, 0x03, 0xff, 0xc3, 0x75, 0xf7, 0xda, 0xc7, 0xee, 0xe6, 0x86, 0x87, 0xff, 0xea,
	0x3a, 0x7e, 0x01, 0xfa, 0x9b, 0x3b, 0x91, 0x66, 0xfa, 0x62, 0x81, 0xda, 0x54, 0xe8, 0xe1, 0x29,
	0x8f, 0x2b, 0x15, 0xb7, 0x74, 0xdb, 0x13, 0xbf, 0x76, 0xa5, 0xb6, 0x7c, 0x15, 0x3f, 0xdb, 0x22,
	0x29, 0x18, 0x63, 0xa1, 0xb7, 0xd1, 0xe9, 0x3b, 0xeb, 0xee, 0xf2, 0xe5, 0xc7, 0xbf, 0xac, 0xec,
	0xdc, 0xbf, 0x87, 0x5f, 0x01, 0x31, 0x7a, 0x28, 0xc1, 0xfb, 0x19, 0x8a, 0x3a, 0x4c, 0x06, 0x4b,
	0x65, 0x71, 0x00, 0x9f, 0x08, 0x32, 0x3c, 0x69, 0xa5, 0x9f, 0x76, 0xa5, 0x35, 0x37, 0xde, 0x3f,
	0x24, 0x47, 0x80, 0xc6, 0x19, 0xdd, 0xb8, 0x5f, 0xbf, 0xf1, 0xb3, 0xa7, 0x6a, 0xf9, 0xee, 0x1b,
	0x33, 0x8f, 0xfe, 0x94, 0x62, 0xab, 0x55, 0x09, 0x3d, 0xa8, 0x4a, 0xe8, 0x61, 0x55, 0x42, 0x7f,
	0x54, 0x25, 0xb4, 0x53, 0x95, 0x62, 0x7f, 0x55, 0x25, 0x74, 0x75, 0x4b, 0x8a, 0x3d, 0xd8, 0x92,
	0xd0, 0xc3, 0x2d, 0x29, 0xf6, 0x68, 0x4b, 0x8a, 0xbd, 0x93, 0xca, 0x32, 0xcd, 0x78, 0xce, 0x7b,
	0x09, 0xa8, 0x39, 0x96, 0x65, 0xba, 0xce, 0x8c, 0xb1, 0xa6, 0xff, 0x93, 0x8b, 0x87, 0xfc, 0xe5,
	0x8b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x36, 0x5f, 0xe0, 0x0a, 0xb7, 0x08, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalAllInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalAllInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalGetReceiveActivityRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalGetReceiveActivityResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalGetReceiveScoreRewardRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalGetReceiveScoreRewardResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalGetActivityConfRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalGetActivityConfResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalGetScoreConfRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalGetScoreConfResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_XDayGoalActivityProgressPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_CheatXDayGmChangeEndTimeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_CheatXDayGmChangeEndTimeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_CheatXDayGmChangeDaysRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoal_CheatXDayGmChangeDaysResponse.Get().(proto.Message)
	})
}

var poolXDayGoal = &sync.Pool{New: func() interface{} { return &XDayGoal{} }}

func (m *XDayGoal) ReleasePool() { m.Reset(); poolXDayGoal.Put(m); m = nil }

var poolXDayGoal_XDayGoalAllInfoRequest = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalAllInfoRequest{} }}

func (m *XDayGoal_XDayGoalAllInfoRequest) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalAllInfoRequest.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalAllInfoResponse = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalAllInfoResponse{} }}

func (m *XDayGoal_XDayGoalAllInfoResponse) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalAllInfoResponse.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalGetReceiveActivityRequest = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalGetReceiveActivityRequest{} }}

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalGetReceiveActivityRequest.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalGetReceiveActivityResponse = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalGetReceiveActivityResponse{} }}

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalGetReceiveActivityResponse.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalGetReceiveScoreRewardRequest = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalGetReceiveScoreRewardRequest{} }}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalGetReceiveScoreRewardRequest.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalGetReceiveScoreRewardResponse = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalGetReceiveScoreRewardResponse{} }}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalGetReceiveScoreRewardResponse.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalGetActivityConfRequest = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalGetActivityConfRequest{} }}

func (m *XDayGoal_XDayGoalGetActivityConfRequest) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalGetActivityConfRequest.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalGetActivityConfResponse = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalGetActivityConfResponse{} }}

func (m *XDayGoal_XDayGoalGetActivityConfResponse) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalGetActivityConfResponse.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalGetScoreConfRequest = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalGetScoreConfRequest{} }}

func (m *XDayGoal_XDayGoalGetScoreConfRequest) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalGetScoreConfRequest.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalGetScoreConfResponse = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalGetScoreConfResponse{} }}

func (m *XDayGoal_XDayGoalGetScoreConfResponse) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalGetScoreConfResponse.Put(m)
	m = nil
}

var poolXDayGoal_XDayGoalActivityProgressPush = &sync.Pool{New: func() interface{} { return &XDayGoal_XDayGoalActivityProgressPush{} }}

func (m *XDayGoal_XDayGoalActivityProgressPush) ReleasePool() {
	m.Reset()
	poolXDayGoal_XDayGoalActivityProgressPush.Put(m)
	m = nil
}

var poolXDayGoal_CheatXDayGmChangeEndTimeRequest = &sync.Pool{New: func() interface{} { return &XDayGoal_CheatXDayGmChangeEndTimeRequest{} }}

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) ReleasePool() {
	m.Reset()
	poolXDayGoal_CheatXDayGmChangeEndTimeRequest.Put(m)
	m = nil
}

var poolXDayGoal_CheatXDayGmChangeEndTimeResponse = &sync.Pool{New: func() interface{} { return &XDayGoal_CheatXDayGmChangeEndTimeResponse{} }}

func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) ReleasePool() {
	m.Reset()
	poolXDayGoal_CheatXDayGmChangeEndTimeResponse.Put(m)
	m = nil
}

var poolXDayGoal_CheatXDayGmChangeDaysRequest = &sync.Pool{New: func() interface{} { return &XDayGoal_CheatXDayGmChangeDaysRequest{} }}

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) ReleasePool() {
	m.Reset()
	poolXDayGoal_CheatXDayGmChangeDaysRequest.Put(m)
	m = nil
}

var poolXDayGoal_CheatXDayGmChangeDaysResponse = &sync.Pool{New: func() interface{} { return &XDayGoal_CheatXDayGmChangeDaysResponse{} }}

func (m *XDayGoal_CheatXDayGmChangeDaysResponse) ReleasePool() {
	m.Reset()
	poolXDayGoal_CheatXDayGmChangeDaysResponse.Put(m)
	m = nil
}
func (x XDayGoalErrorCode) String() string {
	s, ok := XDayGoalErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *XDayGoal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal)
	if !ok {
		that2, ok := that.(XDayGoal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *XDayGoal_XDayGoalAllInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalAllInfoRequest)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalAllInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *XDayGoal_XDayGoalAllInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalAllInfoResponse)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalAllInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	return true
}
func (this *XDayGoal_XDayGoalGetReceiveActivityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalGetReceiveActivityRequest)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalGetReceiveActivityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	return true
}
func (this *XDayGoal_XDayGoalGetReceiveActivityResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalGetReceiveActivityResponse)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalGetReceiveActivityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RewardItem.Equal(that1.RewardItem) {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalGetReceiveScoreRewardRequest)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalGetReceiveScoreRewardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	return true
}
func (this *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalGetReceiveScoreRewardResponse)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalGetReceiveScoreRewardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RewardItem.Equal(that1.RewardItem) {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *XDayGoal_XDayGoalGetActivityConfRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalGetActivityConfRequest)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalGetActivityConfRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	return true
}
func (this *XDayGoal_XDayGoalGetActivityConfResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalGetActivityConfResponse)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalGetActivityConfResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cnf) != len(that1.Cnf) {
		return false
	}
	for i := range this.Cnf {
		if !this.Cnf[i].Equal(that1.Cnf[i]) {
			return false
		}
	}
	return true
}
func (this *XDayGoal_XDayGoalGetScoreConfRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalGetScoreConfRequest)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalGetScoreConfRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	return true
}
func (this *XDayGoal_XDayGoalGetScoreConfResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalGetScoreConfResponse)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalGetScoreConfResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cnf) != len(that1.Cnf) {
		return false
	}
	for i := range this.Cnf {
		if !this.Cnf[i].Equal(that1.Cnf[i]) {
			return false
		}
	}
	return true
}
func (this *XDayGoal_XDayGoalActivityProgressPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_XDayGoalActivityProgressPush)
	if !ok {
		that2, ok := that.(XDayGoal_XDayGoalActivityProgressPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Progress) != len(that1.Progress) {
		return false
	}
	for i := range this.Progress {
		if !this.Progress[i].Equal(that1.Progress[i]) {
			return false
		}
	}
	return true
}
func (this *XDayGoal_CheatXDayGmChangeEndTimeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_CheatXDayGmChangeEndTimeRequest)
	if !ok {
		that2, ok := that.(XDayGoal_CheatXDayGmChangeEndTimeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	return true
}
func (this *XDayGoal_CheatXDayGmChangeEndTimeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_CheatXDayGmChangeEndTimeResponse)
	if !ok {
		that2, ok := that.(XDayGoal_CheatXDayGmChangeEndTimeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *XDayGoal_CheatXDayGmChangeDaysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_CheatXDayGmChangeDaysRequest)
	if !ok {
		that2, ok := that.(XDayGoal_CheatXDayGmChangeDaysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.Days != that1.Days {
		return false
	}
	return true
}
func (this *XDayGoal_CheatXDayGmChangeDaysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoal_CheatXDayGmChangeDaysResponse)
	if !ok {
		that2, ok := that.(XDayGoal_CheatXDayGmChangeDaysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (m *XDayGoal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalAllInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalAllInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalAllInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalAllInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalAllInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalAllInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for k := range m.Infos {
			v := m.Infos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintXDayGoal(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXDayGoal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RewardItem != nil {
		{
			size, err := m.RewardItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXDayGoal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXDayGoal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RewardItem != nil {
		{
			size, err := m.RewardItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXDayGoal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalGetActivityConfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalGetActivityConfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalGetActivityConfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalGetActivityConfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalGetActivityConfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalGetActivityConfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cnf) > 0 {
		for iNdEx := len(m.Cnf) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cnf[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintXDayGoal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalGetScoreConfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalGetScoreConfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalGetScoreConfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalGetScoreConfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalGetScoreConfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalGetScoreConfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cnf) > 0 {
		for iNdEx := len(m.Cnf) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cnf[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintXDayGoal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_XDayGoalActivityProgressPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_XDayGoalActivityProgressPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_XDayGoalActivityProgressPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Progress) > 0 {
		for k := range m.Progress {
			v := m.Progress[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintXDayGoal(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Days != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x10
	}
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoal_CheatXDayGmChangeDaysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoal_CheatXDayGmChangeDaysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoal_CheatXDayGmChangeDaysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintXDayGoal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintXDayGoal(dAtA []byte, offset int, v uint64) int {
	offset -= sovXDayGoal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *XDayGoal) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalAllInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalAllInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("infos")
	w.RawByte('"')
	w.RawByte(':')
	if m.Infos == nil {
		w.RawString("null")
	} else if len(m.Infos) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlInfos := len(m.Infos)
		for k, v := range m.Infos {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlInfos--
			if mlInfos != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("reward_item")
	w.RawByte('"')
	w.RawByte(':')
	m.RewardItem.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("reward_item")
	w.RawByte('"')
	w.RawByte(':')
	m.RewardItem.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalGetActivityConfRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ActivityId != 0 {
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalGetActivityConfResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("cnf")
	w.RawByte('"')
	w.RawByte(':')
	if m.Cnf == nil {
		w.RawString("null")
	} else if len(m.Cnf) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Cnf {
			v.JsonBytes(w)
			if i != len(m.Cnf)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalGetScoreConfRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ActivityId != 0 {
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalGetScoreConfResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("cnf")
	w.RawByte('"')
	w.RawByte(':')
	if m.Cnf == nil {
		w.RawString("null")
	} else if len(m.Cnf) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Cnf {
			v.JsonBytes(w)
			if i != len(m.Cnf)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_XDayGoalActivityProgressPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("progress")
	w.RawByte('"')
	w.RawByte(':')
	if m.Progress == nil {
		w.RawString("null")
	} else if len(m.Progress) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlProgress := len(m.Progress)
		for k, v := range m.Progress {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlProgress--
			if mlProgress != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ActivityId != 0 {
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.EndTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("endTime")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ActivityId != 0 {
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.Days != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("days")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Days))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal_CheatXDayGmChangeDaysResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoal) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalAllInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalAllInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalAllInfoRequest) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalAllInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalAllInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalAllInfoResponse) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalGetActivityConfRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalGetActivityConfRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalGetActivityConfRequest) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalGetActivityConfResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalGetActivityConfResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalGetActivityConfResponse) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalGetScoreConfRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalGetScoreConfRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalGetScoreConfRequest) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalGetScoreConfResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalGetScoreConfResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalGetScoreConfResponse) GoString() string {
	return m.String()
}

func (m *XDayGoal_XDayGoalActivityProgressPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_XDayGoalActivityProgressPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_XDayGoalActivityProgressPush) GoString() string {
	return m.String()
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) GoString() string {
	return m.String()
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) GoString() string {
	return m.String()
}

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_CheatXDayGmChangeDaysRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_CheatXDayGmChangeDaysRequest) GoString() string {
	return m.String()
}

func (m *XDayGoal_CheatXDayGmChangeDaysResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoal_CheatXDayGmChangeDaysResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoal_CheatXDayGmChangeDaysResponse) GoString() string {
	return m.String()
}

func (m *XDayGoal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *XDayGoal_XDayGoalAllInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *XDayGoal_XDayGoalAllInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for k, v := range m.Infos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovXDayGoal(uint64(l))
			}
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + l
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovXDayGoal(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	return n
}

func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardItem != nil {
		l = m.RewardItem.Size()
		n += 1 + l + sovXDayGoal(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovXDayGoal(uint64(l))
	}
	return n
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovXDayGoal(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	return n
}

func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardItem != nil {
		l = m.RewardItem.Size()
		n += 1 + l + sovXDayGoal(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovXDayGoal(uint64(l))
	}
	return n
}

func (m *XDayGoal_XDayGoalGetActivityConfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	return n
}

func (m *XDayGoal_XDayGoalGetActivityConfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cnf) > 0 {
		for _, e := range m.Cnf {
			l = e.Size()
			n += 1 + l + sovXDayGoal(uint64(l))
		}
	}
	return n
}

func (m *XDayGoal_XDayGoalGetScoreConfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	return n
}

func (m *XDayGoal_XDayGoalGetScoreConfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cnf) > 0 {
		for _, e := range m.Cnf {
			l = e.Size()
			n += 1 + l + sovXDayGoal(uint64(l))
		}
	}
	return n
}

func (m *XDayGoal_XDayGoalActivityProgressPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Progress) > 0 {
		for k, v := range m.Progress {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovXDayGoal(uint64(l))
			}
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + l
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	if m.EndTime != 0 {
		n += 1 + sovXDayGoal(uint64(m.EndTime))
	}
	return n
}

func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *XDayGoal_CheatXDayGmChangeDaysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	if m.Days != 0 {
		n += 1 + sovXDayGoal(uint64(m.Days))
	}
	return n
}

func (m *XDayGoal_CheatXDayGmChangeDaysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovXDayGoal(uint64(l))
	}
	return n
}

func sovXDayGoal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozXDayGoal(x uint64) (n int) {
	return sovXDayGoal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XDayGoal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalAllInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalAllInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalAllInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalAllInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalAllInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalAllInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infos == nil {
				m.Infos = make(map[int64]*models.XDayGoalInfoDetail)
			}
			var mapkey int64
			var mapvalue *models.XDayGoalInfoDetail
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthXDayGoal
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.XDayGoalInfoDetail{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Infos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalGetReceiveActivityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalGetReceiveActivityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalGetReceiveActivityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalGetReceiveActivityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalGetReceiveActivityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalGetReceiveActivityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardItem == nil {
				m.RewardItem = &models.Items{}
			}
			if err := m.RewardItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.XDayGoalInfoDetail{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalGetReceiveScoreRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalGetReceiveScoreRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalGetReceiveScoreRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalGetReceiveScoreRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalGetReceiveScoreRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardItem == nil {
				m.RewardItem = &models.Items{}
			}
			if err := m.RewardItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.XDayGoalInfoDetail{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalGetActivityConfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalGetActivityConfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalGetActivityConfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalGetActivityConfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalGetActivityConfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalGetActivityConfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cnf = append(m.Cnf, &models.XDayCnfInfo{})
			if err := m.Cnf[len(m.Cnf)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalGetScoreConfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalGetScoreConfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalGetScoreConfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalGetScoreConfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalGetScoreConfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalGetScoreConfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cnf = append(m.Cnf, &models.XDayScoreCnfInfo{})
			if err := m.Cnf[len(m.Cnf)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_XDayGoalActivityProgressPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalActivityProgressPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalActivityProgressPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = make(map[int64]*models.ActivityProgress)
			}
			var mapkey int64
			var mapvalue *models.ActivityProgress
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthXDayGoal
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.ActivityProgress{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Progress[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatXDayGmChangeEndTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatXDayGmChangeEndTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_CheatXDayGmChangeEndTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatXDayGmChangeEndTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatXDayGmChangeEndTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_CheatXDayGmChangeDaysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatXDayGmChangeDaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatXDayGmChangeDaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoal_CheatXDayGmChangeDaysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatXDayGmChangeDaysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatXDayGmChangeDaysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.XDayGoalInfoDetail{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXDayGoal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthXDayGoal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupXDayGoal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthXDayGoal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthXDayGoal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXDayGoal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupXDayGoal = fmt.Errorf("proto: unexpected end of group")
)
