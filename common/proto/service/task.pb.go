// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/task.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	battle "github.com/ywh147906/load-test/common/proto/battle"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	newbattle "github.com/ywh147906/load-test/common/proto/newbattle"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//----------------------------------------------------任务通用协议------------------------------------------------------//
type Task struct {
}

func (m *Task) Reset()      { *m = Task{} }
func (*Task) ProtoMessage() {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (*Task) XXX_MessageName() string {
	return "service.Task"
}

// 提交道具类任务
type Task_SubmitTaskRequest struct {
	TaskId int64           `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ItemId int64           `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  int64           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Kind   models.TaskKind `protobuf:"varint,4,opt,name=kind,proto3,enum=models.TaskKind" json:"kind,omitempty"`
	Typ    models.TaskType `protobuf:"varint,5,opt,name=typ,proto3,enum=models.TaskType" json:"typ,omitempty"`
}

func (m *Task_SubmitTaskRequest) Reset()      { *m = Task_SubmitTaskRequest{} }
func (*Task_SubmitTaskRequest) ProtoMessage() {}
func (*Task_SubmitTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 0}
}
func (m *Task_SubmitTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_SubmitTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_SubmitTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_SubmitTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_SubmitTaskRequest.Merge(m, src)
}
func (m *Task_SubmitTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *Task_SubmitTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_SubmitTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Task_SubmitTaskRequest proto.InternalMessageInfo

func (m *Task_SubmitTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Task_SubmitTaskRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Task_SubmitTaskRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Task_SubmitTaskRequest) GetKind() models.TaskKind {
	if m != nil {
		return m.Kind
	}
	return models.TaskKind_Daily
}

func (m *Task_SubmitTaskRequest) GetTyp() models.TaskType {
	if m != nil {
		return m.Typ
	}
	return models.TaskType_TaskLogin
}

func (*Task_SubmitTaskRequest) XXX_MessageName() string {
	return "service.Task.SubmitTaskRequest"
}

type Task_SubmitTaskResponse struct {
}

func (m *Task_SubmitTaskResponse) Reset()      { *m = Task_SubmitTaskResponse{} }
func (*Task_SubmitTaskResponse) ProtoMessage() {}
func (*Task_SubmitTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 1}
}
func (m *Task_SubmitTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_SubmitTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_SubmitTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_SubmitTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_SubmitTaskResponse.Merge(m, src)
}
func (m *Task_SubmitTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *Task_SubmitTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_SubmitTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Task_SubmitTaskResponse proto.InternalMessageInfo

func (*Task_SubmitTaskResponse) XXX_MessageName() string {
	return "service.Task.SubmitTaskResponse"
}

// 战斗类任务
type Task_BattleTaskRequest struct {
	TaskId int64           `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NpcId  int64           `protobuf:"varint,2,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	Kind   models.TaskKind `protobuf:"varint,3,opt,name=kind,proto3,enum=models.TaskKind" json:"kind,omitempty"`
}

func (m *Task_BattleTaskRequest) Reset()      { *m = Task_BattleTaskRequest{} }
func (*Task_BattleTaskRequest) ProtoMessage() {}
func (*Task_BattleTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 2}
}
func (m *Task_BattleTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_BattleTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_BattleTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_BattleTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_BattleTaskRequest.Merge(m, src)
}
func (m *Task_BattleTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *Task_BattleTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_BattleTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Task_BattleTaskRequest proto.InternalMessageInfo

func (m *Task_BattleTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Task_BattleTaskRequest) GetNpcId() int64 {
	if m != nil {
		return m.NpcId
	}
	return 0
}

func (m *Task_BattleTaskRequest) GetKind() models.TaskKind {
	if m != nil {
		return m.Kind
	}
	return models.TaskKind_Daily
}

func (*Task_BattleTaskRequest) XXX_MessageName() string {
	return "service.Task.BattleTaskRequest"
}

type Task_BattleTaskResponse struct {
	Pos        *battle.Pos `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId      string      `protobuf:"bytes,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	ServerTime float64     `protobuf:"fixed64,99,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *Task_BattleTaskResponse) Reset()      { *m = Task_BattleTaskResponse{} }
func (*Task_BattleTaskResponse) ProtoMessage() {}
func (*Task_BattleTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 3}
}
func (m *Task_BattleTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_BattleTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_BattleTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_BattleTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_BattleTaskResponse.Merge(m, src)
}
func (m *Task_BattleTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *Task_BattleTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_BattleTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Task_BattleTaskResponse proto.InternalMessageInfo

func (m *Task_BattleTaskResponse) GetPos() *battle.Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Task_BattleTaskResponse) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *Task_BattleTaskResponse) GetServerTime() float64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (*Task_BattleTaskResponse) XXX_MessageName() string {
	return "service.Task.BattleTaskResponse"
}

// 采集任务(采集演出)
type Task_GatherTaskRequest struct {
	TaskId int64           `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Kind   models.TaskKind `protobuf:"varint,2,opt,name=kind,proto3,enum=models.TaskKind" json:"kind,omitempty"`
}

func (m *Task_GatherTaskRequest) Reset()      { *m = Task_GatherTaskRequest{} }
func (*Task_GatherTaskRequest) ProtoMessage() {}
func (*Task_GatherTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 4}
}
func (m *Task_GatherTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_GatherTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_GatherTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_GatherTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_GatherTaskRequest.Merge(m, src)
}
func (m *Task_GatherTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *Task_GatherTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_GatherTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Task_GatherTaskRequest proto.InternalMessageInfo

func (m *Task_GatherTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Task_GatherTaskRequest) GetKind() models.TaskKind {
	if m != nil {
		return m.Kind
	}
	return models.TaskKind_Daily
}

func (*Task_GatherTaskRequest) XXX_MessageName() string {
	return "service.Task.GatherTaskRequest"
}

type Task_GatherTaskResponse struct {
}

func (m *Task_GatherTaskResponse) Reset()      { *m = Task_GatherTaskResponse{} }
func (*Task_GatherTaskResponse) ProtoMessage() {}
func (*Task_GatherTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 5}
}
func (m *Task_GatherTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_GatherTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_GatherTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_GatherTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_GatherTaskResponse.Merge(m, src)
}
func (m *Task_GatherTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *Task_GatherTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_GatherTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Task_GatherTaskResponse proto.InternalMessageInfo

func (*Task_GatherTaskResponse) XXX_MessageName() string {
	return "service.Task.GatherTaskResponse"
}

type Task_MoveTaskRequest struct {
	TaskId int64           `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Kind   models.TaskKind `protobuf:"varint,2,opt,name=kind,proto3,enum=models.TaskKind" json:"kind,omitempty"`
}

func (m *Task_MoveTaskRequest) Reset()      { *m = Task_MoveTaskRequest{} }
func (*Task_MoveTaskRequest) ProtoMessage() {}
func (*Task_MoveTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 6}
}
func (m *Task_MoveTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_MoveTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_MoveTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_MoveTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_MoveTaskRequest.Merge(m, src)
}
func (m *Task_MoveTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *Task_MoveTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_MoveTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Task_MoveTaskRequest proto.InternalMessageInfo

func (m *Task_MoveTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Task_MoveTaskRequest) GetKind() models.TaskKind {
	if m != nil {
		return m.Kind
	}
	return models.TaskKind_Daily
}

func (*Task_MoveTaskRequest) XXX_MessageName() string {
	return "service.Task.MoveTaskRequest"
}

type Task_MoveTaskResponse struct {
}

func (m *Task_MoveTaskResponse) Reset()      { *m = Task_MoveTaskResponse{} }
func (*Task_MoveTaskResponse) ProtoMessage() {}
func (*Task_MoveTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 7}
}
func (m *Task_MoveTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_MoveTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_MoveTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_MoveTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_MoveTaskResponse.Merge(m, src)
}
func (m *Task_MoveTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *Task_MoveTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_MoveTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Task_MoveTaskResponse proto.InternalMessageInfo

func (*Task_MoveTaskResponse) XXX_MessageName() string {
	return "service.Task.MoveTaskResponse"
}

// 杀怪计数
type Task_KillMonsterRequest struct {
	TaskId    int64           `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	MonsterId int64           `protobuf:"varint,2,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	Count     int64           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Kind      models.TaskKind `protobuf:"varint,4,opt,name=kind,proto3,enum=models.TaskKind" json:"kind,omitempty"`
	Typ       models.TaskType `protobuf:"varint,5,opt,name=typ,proto3,enum=models.TaskType" json:"typ,omitempty"`
}

func (m *Task_KillMonsterRequest) Reset()      { *m = Task_KillMonsterRequest{} }
func (*Task_KillMonsterRequest) ProtoMessage() {}
func (*Task_KillMonsterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 8}
}
func (m *Task_KillMonsterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_KillMonsterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_KillMonsterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_KillMonsterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_KillMonsterRequest.Merge(m, src)
}
func (m *Task_KillMonsterRequest) XXX_Size() int {
	return m.Size()
}
func (m *Task_KillMonsterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_KillMonsterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Task_KillMonsterRequest proto.InternalMessageInfo

func (m *Task_KillMonsterRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Task_KillMonsterRequest) GetMonsterId() int64 {
	if m != nil {
		return m.MonsterId
	}
	return 0
}

func (m *Task_KillMonsterRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Task_KillMonsterRequest) GetKind() models.TaskKind {
	if m != nil {
		return m.Kind
	}
	return models.TaskKind_Daily
}

func (m *Task_KillMonsterRequest) GetTyp() models.TaskType {
	if m != nil {
		return m.Typ
	}
	return models.TaskType_TaskLogin
}

func (*Task_KillMonsterRequest) XXX_MessageName() string {
	return "service.Task.KillMonsterRequest"
}

type Task_KillMonsterResponse struct {
}

func (m *Task_KillMonsterResponse) Reset()      { *m = Task_KillMonsterResponse{} }
func (*Task_KillMonsterResponse) ProtoMessage() {}
func (*Task_KillMonsterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 9}
}
func (m *Task_KillMonsterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_KillMonsterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_KillMonsterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_KillMonsterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_KillMonsterResponse.Merge(m, src)
}
func (m *Task_KillMonsterResponse) XXX_Size() int {
	return m.Size()
}
func (m *Task_KillMonsterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_KillMonsterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Task_KillMonsterResponse proto.InternalMessageInfo

func (*Task_KillMonsterResponse) XXX_MessageName() string {
	return "service.Task.KillMonsterResponse"
}

//----------------------event----------------------//
type Task_KillMonsterEvent struct {
	MonsterId int64 `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	Num       int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Task_KillMonsterEvent) Reset()      { *m = Task_KillMonsterEvent{} }
func (*Task_KillMonsterEvent) ProtoMessage() {}
func (*Task_KillMonsterEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 10}
}
func (m *Task_KillMonsterEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_KillMonsterEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_KillMonsterEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_KillMonsterEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_KillMonsterEvent.Merge(m, src)
}
func (m *Task_KillMonsterEvent) XXX_Size() int {
	return m.Size()
}
func (m *Task_KillMonsterEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_KillMonsterEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Task_KillMonsterEvent proto.InternalMessageInfo

func (m *Task_KillMonsterEvent) GetMonsterId() int64 {
	if m != nil {
		return m.MonsterId
	}
	return 0
}

func (m *Task_KillMonsterEvent) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*Task_KillMonsterEvent) XXX_MessageName() string {
	return "service.Task.KillMonsterEvent"
}

type Task_KillMonstersEvent struct {
	Kills map[int64]int64 `protobuf:"bytes,1,rep,name=kills,proto3" json:"kills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Task_KillMonstersEvent) Reset()      { *m = Task_KillMonstersEvent{} }
func (*Task_KillMonstersEvent) ProtoMessage() {}
func (*Task_KillMonstersEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 11}
}
func (m *Task_KillMonstersEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_KillMonstersEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_KillMonstersEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_KillMonstersEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_KillMonstersEvent.Merge(m, src)
}
func (m *Task_KillMonstersEvent) XXX_Size() int {
	return m.Size()
}
func (m *Task_KillMonstersEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_KillMonstersEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Task_KillMonstersEvent proto.InternalMessageInfo

func (m *Task_KillMonstersEvent) GetKills() map[int64]int64 {
	if m != nil {
		return m.Kills
	}
	return nil
}

func (*Task_KillMonstersEvent) XXX_MessageName() string {
	return "service.Task.KillMonstersEvent"
}

// 玩家传送事件
type Task_TeleportEvent struct {
	RoleId string             `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	MapId  int64              `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Pos    *newbattle.Vector2 `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *Task_TeleportEvent) Reset()      { *m = Task_TeleportEvent{} }
func (*Task_TeleportEvent) ProtoMessage() {}
func (*Task_TeleportEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 12}
}
func (m *Task_TeleportEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_TeleportEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_TeleportEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_TeleportEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_TeleportEvent.Merge(m, src)
}
func (m *Task_TeleportEvent) XXX_Size() int {
	return m.Size()
}
func (m *Task_TeleportEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_TeleportEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Task_TeleportEvent proto.InternalMessageInfo

func (m *Task_TeleportEvent) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Task_TeleportEvent) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *Task_TeleportEvent) GetPos() *newbattle.Vector2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (*Task_TeleportEvent) XXX_MessageName() string {
	return "service.Task.TeleportEvent"
}

type Task_FinishRLEvent struct {
	RoguelikeId int64 `protobuf:"varint,1,opt,name=roguelike_id,json=roguelikeId,proto3" json:"roguelike_id,omitempty"`
}

func (m *Task_FinishRLEvent) Reset()      { *m = Task_FinishRLEvent{} }
func (*Task_FinishRLEvent) ProtoMessage() {}
func (*Task_FinishRLEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a63094ab968569ff, []int{0, 13}
}
func (m *Task_FinishRLEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task_FinishRLEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task_FinishRLEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task_FinishRLEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task_FinishRLEvent.Merge(m, src)
}
func (m *Task_FinishRLEvent) XXX_Size() int {
	return m.Size()
}
func (m *Task_FinishRLEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Task_FinishRLEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Task_FinishRLEvent proto.InternalMessageInfo

func (m *Task_FinishRLEvent) GetRoguelikeId() int64 {
	if m != nil {
		return m.RoguelikeId
	}
	return 0
}

func (*Task_FinishRLEvent) XXX_MessageName() string {
	return "service.Task.FinishRLEvent"
}
func init() {
	proto.RegisterType((*Task)(nil), "service.Task")
	proto.RegisterType((*Task_SubmitTaskRequest)(nil), "service.Task.SubmitTaskRequest")
	proto.RegisterType((*Task_SubmitTaskResponse)(nil), "service.Task.SubmitTaskResponse")
	proto.RegisterType((*Task_BattleTaskRequest)(nil), "service.Task.BattleTaskRequest")
	proto.RegisterType((*Task_BattleTaskResponse)(nil), "service.Task.BattleTaskResponse")
	proto.RegisterType((*Task_GatherTaskRequest)(nil), "service.Task.GatherTaskRequest")
	proto.RegisterType((*Task_GatherTaskResponse)(nil), "service.Task.GatherTaskResponse")
	proto.RegisterType((*Task_MoveTaskRequest)(nil), "service.Task.MoveTaskRequest")
	proto.RegisterType((*Task_MoveTaskResponse)(nil), "service.Task.MoveTaskResponse")
	proto.RegisterType((*Task_KillMonsterRequest)(nil), "service.Task.KillMonsterRequest")
	proto.RegisterType((*Task_KillMonsterResponse)(nil), "service.Task.KillMonsterResponse")
	proto.RegisterType((*Task_KillMonsterEvent)(nil), "service.Task.KillMonsterEvent")
	proto.RegisterType((*Task_KillMonstersEvent)(nil), "service.Task.KillMonstersEvent")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Task.KillMonstersEvent.KillsEntry")
	proto.RegisterType((*Task_TeleportEvent)(nil), "service.Task.TeleportEvent")
	proto.RegisterType((*Task_FinishRLEvent)(nil), "service.Task.FinishRLEvent")
}

func init() { proto.RegisterFile("proto/service/task.proto", fileDescriptor_a63094ab968569ff) }

var fileDescriptor_a63094ab968569ff = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0xcd, 0xd4, 0x4d, 0xaa, 0xdc, 0xbc, 0xbe, 0x97, 0xf8, 0xb5, 0x6a, 0x64, 0xa9, 0x26, 0xad,
	0xba, 0x08, 0x48, 0x75, 0xa4, 0xb0, 0xa9, 0x58, 0xa1, 0xa2, 0x82, 0xa2, 0x52, 0x54, 0x99, 0x88,
	0x05, 0x9b, 0xca, 0xb1, 0xaf, 0xe8, 0xc8, 0xf6, 0x8c, 0xf1, 0x8c, 0x53, 0xe5, 0x2b, 0xe0, 0x23,
	0x40, 0x62, 0xc1, 0x87, 0x74, 0xd9, 0x65, 0x97, 0x90, 0x6c, 0x58, 0xf2, 0x09, 0x68, 0x3c, 0x4e,
	0xe3, 0xb6, 0x52, 0xe9, 0x02, 0xb1, 0xf3, 0x3d, 0xf7, 0x64, 0xce, 0x39, 0x33, 0xf7, 0x06, 0xda,
	0x49, 0xca, 0x25, 0xef, 0x09, 0x4c, 0xc7, 0xd4, 0xc7, 0x9e, 0xf4, 0x44, 0xe8, 0xe4, 0x90, 0xb9,
	0x52, 0x60, 0xd6, 0x86, 0xa6, 0xc4, 0x3c, 0xc0, 0x48, 0xf4, 0x46, 0x9e, 0x40, 0xcd, 0xb0, 0xda,
	0xd7, 0x1a, 0xc8, 0xb2, 0x58, 0x14, 0x9d, 0x87, 0xba, 0xc3, 0xf0, 0x6c, 0x77, 0xe4, 0x49, 0x19,
	0xe1, 0xee, 0x5c, 0x80, 0xe1, 0xd9, 0x89, 0x86, 0x0a, 0xea, 0x96, 0xa6, 0xde, 0xa0, 0x95, 0x29,
	0xdb, 0x9f, 0xea, 0xb0, 0x3c, 0xf4, 0x44, 0x68, 0x7d, 0x26, 0xd0, 0x7a, 0x9d, 0x8d, 0x62, 0x2a,
	0x55, 0xe9, 0xe2, 0xfb, 0x0c, 0x85, 0x34, 0x37, 0x60, 0x45, 0xd9, 0x3e, 0xa1, 0x41, 0x9b, 0x74,
	0x48, 0xd7, 0x70, 0x6b, 0xaa, 0x1c, 0x04, 0xaa, 0x41, 0x25, 0xc6, 0xaa, 0xb1, 0xa4, 0x1b, 0xaa,
	0x1c, 0x04, 0xe6, 0x1a, 0x54, 0x7d, 0x9e, 0x31, 0xd9, 0x36, 0x72, 0x58, 0x17, 0xe6, 0x0e, 0x2c,
	0x87, 0x94, 0x05, 0xed, 0xe5, 0x0e, 0xe9, 0xfe, 0xdb, 0x6f, 0x3a, 0x3a, 0x97, 0xa3, 0xa4, 0x0e,
	0x29, 0x0b, 0xdc, 0xbc, 0x6b, 0x6e, 0x83, 0x21, 0x27, 0x49, 0xbb, 0x7a, 0x9b, 0x34, 0x9c, 0x24,
	0xe8, 0xaa, 0xa6, 0xb5, 0x06, 0x66, 0xd9, 0xa6, 0x48, 0x38, 0x13, 0x68, 0x51, 0x68, 0xed, 0xe7,
	0xb1, 0xee, 0x65, 0x7e, 0x1d, 0x6a, 0x2c, 0xf1, 0x17, 0xde, 0xab, 0x2c, 0xf1, 0x07, 0xc1, 0x95,
	0x49, 0xe3, 0x2e, 0x93, 0x56, 0x08, 0x66, 0x59, 0x4a, 0x1b, 0x30, 0x37, 0xc1, 0x48, 0xb8, 0xc8,
	0x75, 0x1a, 0xfd, 0x86, 0x53, 0xdc, 0xf1, 0x31, 0x17, 0xae, 0xc2, 0x95, 0x62, 0xec, 0x25, 0x73,
	0xc5, 0xba, 0x5b, 0x8d, 0xbd, 0x64, 0x10, 0x98, 0x0f, 0xa0, 0xa1, 0x5e, 0x05, 0xd3, 0x13, 0x49,
	0x63, 0x6c, 0xfb, 0x1d, 0xd2, 0x25, 0x2e, 0x68, 0x68, 0x48, 0x63, 0xb4, 0x5c, 0x68, 0xbd, 0xf0,
	0xe4, 0x29, 0xa6, 0xf7, 0xca, 0x35, 0x0f, 0xb0, 0x74, 0x67, 0x80, 0x35, 0x30, 0xcb, 0x67, 0x16,
	0x37, 0x78, 0x0c, 0xff, 0x1d, 0xf1, 0x31, 0xfe, 0x41, 0x1d, 0x13, 0x9a, 0x8b, 0x13, 0x0b, 0x95,
	0xaf, 0x04, 0xcc, 0x43, 0x1a, 0x45, 0x47, 0x9c, 0x09, 0x89, 0xe9, 0x6f, 0x95, 0x36, 0x01, 0x62,
	0x4d, 0x5d, 0xbc, 0x56, 0xbd, 0x40, 0xfe, 0xc2, 0xb0, 0xad, 0xc3, 0xff, 0xd7, 0xdc, 0x16, 0x29,
	0x9e, 0x41, 0xb3, 0x04, 0x1f, 0x8c, 0x91, 0xc9, 0x1b, 0x4e, 0xc9, 0x4d, 0xa7, 0x4d, 0x30, 0x58,
	0x16, 0x17, 0x09, 0xd4, 0xa7, 0xf5, 0x81, 0x40, 0xab, 0x74, 0x8a, 0xd0, 0xc7, 0x3c, 0x85, 0x6a,
	0x48, 0xa3, 0x48, 0x4d, 0x92, 0xd1, 0x6d, 0xf4, 0x1f, 0x39, 0xc5, 0xd6, 0xe6, 0xc6, 0x9c, 0x5b,
	0xfc, 0x1c, 0x11, 0x07, 0x4c, 0xa6, 0x13, 0x57, 0xff, 0xd0, 0xda, 0x03, 0x58, 0x80, 0x4a, 0x37,
	0xc4, 0x49, 0xe1, 0x47, 0x7d, 0xaa, 0x3b, 0x1b, 0x7b, 0x51, 0x86, 0xf3, 0xd9, 0xcf, 0x8b, 0x27,
	0x4b, 0x7b, 0xc4, 0x42, 0x58, 0x1d, 0x62, 0x84, 0x09, 0x4f, 0xa5, 0x36, 0xb3, 0x01, 0x2b, 0x29,
	0x8f, 0x70, 0x1e, 0xa8, 0xee, 0xd6, 0x54, 0xa9, 0x17, 0xa8, 0x34, 0xce, 0xc6, 0x7c, 0x9c, 0x77,
	0xf4, 0x12, 0x18, 0xf9, 0x12, 0x98, 0x0e, 0xc3, 0xb3, 0x62, 0x0f, 0xde, 0xa0, 0x2f, 0x79, 0xda,
	0xcf, 0x77, 0xc1, 0xea, 0xc3, 0xea, 0x73, 0xca, 0xa8, 0x38, 0x75, 0x5f, 0x6a, 0x99, 0x2d, 0xf8,
	0x27, 0xe5, 0xef, 0x32, 0x8c, 0x68, 0x88, 0x8b, 0xcb, 0x6b, 0x5c, 0x61, 0x83, 0x60, 0xff, 0xd5,
	0xe5, 0x77, 0xbb, 0xf2, 0x65, 0x6a, 0x93, 0xf3, 0xa9, 0x4d, 0x2e, 0xa6, 0x36, 0xf9, 0x36, 0xb5,
	0xc9, 0x8f, 0xa9, 0x5d, 0xf9, 0x39, 0xb5, 0xc9, 0xc7, 0x99, 0x5d, 0x39, 0x9f, 0xd9, 0xe4, 0x62,
	0x66, 0x57, 0x2e, 0x67, 0x76, 0xe5, 0x6d, 0xc7, 0xe7, 0x94, 0xed, 0xea, 0x35, 0xea, 0xf9, 0x3c,
	0x8e, 0x39, 0xeb, 0x5d, 0xfb, 0x2f, 0x1e, 0xd5, 0xf2, 0xf2, 0xf1, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x89, 0x33, 0xf8, 0x78, 0xa3, 0x05, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_SubmitTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_SubmitTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_BattleTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_BattleTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_GatherTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_GatherTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_MoveTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_MoveTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_KillMonsterRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_KillMonsterResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_KillMonsterEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_KillMonstersEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_TeleportEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask_FinishRLEvent.Get().(proto.Message)
	})
}

var poolTask = &sync.Pool{New: func() interface{} { return &Task{} }}

func (m *Task) ReleasePool() { m.Reset(); poolTask.Put(m); m = nil }

var poolTask_SubmitTaskRequest = &sync.Pool{New: func() interface{} { return &Task_SubmitTaskRequest{} }}

func (m *Task_SubmitTaskRequest) ReleasePool() { m.Reset(); poolTask_SubmitTaskRequest.Put(m); m = nil }

var poolTask_SubmitTaskResponse = &sync.Pool{New: func() interface{} { return &Task_SubmitTaskResponse{} }}

func (m *Task_SubmitTaskResponse) ReleasePool() {
	m.Reset()
	poolTask_SubmitTaskResponse.Put(m)
	m = nil
}

var poolTask_BattleTaskRequest = &sync.Pool{New: func() interface{} { return &Task_BattleTaskRequest{} }}

func (m *Task_BattleTaskRequest) ReleasePool() { m.Reset(); poolTask_BattleTaskRequest.Put(m); m = nil }

var poolTask_BattleTaskResponse = &sync.Pool{New: func() interface{} { return &Task_BattleTaskResponse{} }}

func (m *Task_BattleTaskResponse) ReleasePool() {
	m.Reset()
	poolTask_BattleTaskResponse.Put(m)
	m = nil
}

var poolTask_GatherTaskRequest = &sync.Pool{New: func() interface{} { return &Task_GatherTaskRequest{} }}

func (m *Task_GatherTaskRequest) ReleasePool() { m.Reset(); poolTask_GatherTaskRequest.Put(m); m = nil }

var poolTask_GatherTaskResponse = &sync.Pool{New: func() interface{} { return &Task_GatherTaskResponse{} }}

func (m *Task_GatherTaskResponse) ReleasePool() {
	m.Reset()
	poolTask_GatherTaskResponse.Put(m)
	m = nil
}

var poolTask_MoveTaskRequest = &sync.Pool{New: func() interface{} { return &Task_MoveTaskRequest{} }}

func (m *Task_MoveTaskRequest) ReleasePool() { m.Reset(); poolTask_MoveTaskRequest.Put(m); m = nil }

var poolTask_MoveTaskResponse = &sync.Pool{New: func() interface{} { return &Task_MoveTaskResponse{} }}

func (m *Task_MoveTaskResponse) ReleasePool() { m.Reset(); poolTask_MoveTaskResponse.Put(m); m = nil }

var poolTask_KillMonsterRequest = &sync.Pool{New: func() interface{} { return &Task_KillMonsterRequest{} }}

func (m *Task_KillMonsterRequest) ReleasePool() {
	m.Reset()
	poolTask_KillMonsterRequest.Put(m)
	m = nil
}

var poolTask_KillMonsterResponse = &sync.Pool{New: func() interface{} { return &Task_KillMonsterResponse{} }}

func (m *Task_KillMonsterResponse) ReleasePool() {
	m.Reset()
	poolTask_KillMonsterResponse.Put(m)
	m = nil
}

var poolTask_KillMonsterEvent = &sync.Pool{New: func() interface{} { return &Task_KillMonsterEvent{} }}

func (m *Task_KillMonsterEvent) ReleasePool() { m.Reset(); poolTask_KillMonsterEvent.Put(m); m = nil }

var poolTask_KillMonstersEvent = &sync.Pool{New: func() interface{} { return &Task_KillMonstersEvent{} }}

func (m *Task_KillMonstersEvent) ReleasePool() { m.Reset(); poolTask_KillMonstersEvent.Put(m); m = nil }

var poolTask_TeleportEvent = &sync.Pool{New: func() interface{} { return &Task_TeleportEvent{} }}

func (m *Task_TeleportEvent) ReleasePool() { m.Reset(); poolTask_TeleportEvent.Put(m); m = nil }

var poolTask_FinishRLEvent = &sync.Pool{New: func() interface{} { return &Task_FinishRLEvent{} }}

func (m *Task_FinishRLEvent) ReleasePool() { m.Reset(); poolTask_FinishRLEvent.Put(m); m = nil }
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Task_SubmitTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_SubmitTaskRequest)
	if !ok {
		that2, ok := that.(Task_SubmitTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *Task_SubmitTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_SubmitTaskResponse)
	if !ok {
		that2, ok := that.(Task_SubmitTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Task_BattleTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_BattleTaskRequest)
	if !ok {
		that2, ok := that.(Task_BattleTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.NpcId != that1.NpcId {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *Task_BattleTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_BattleTaskResponse)
	if !ok {
		that2, ok := that.(Task_BattleTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	return true
}
func (this *Task_GatherTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_GatherTaskRequest)
	if !ok {
		that2, ok := that.(Task_GatherTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *Task_GatherTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_GatherTaskResponse)
	if !ok {
		that2, ok := that.(Task_GatherTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Task_MoveTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_MoveTaskRequest)
	if !ok {
		that2, ok := that.(Task_MoveTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *Task_MoveTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_MoveTaskResponse)
	if !ok {
		that2, ok := that.(Task_MoveTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Task_KillMonsterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_KillMonsterRequest)
	if !ok {
		that2, ok := that.(Task_KillMonsterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.MonsterId != that1.MonsterId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *Task_KillMonsterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_KillMonsterResponse)
	if !ok {
		that2, ok := that.(Task_KillMonsterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Task_KillMonsterEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_KillMonsterEvent)
	if !ok {
		that2, ok := that.(Task_KillMonsterEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MonsterId != that1.MonsterId {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *Task_KillMonstersEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_KillMonstersEvent)
	if !ok {
		that2, ok := that.(Task_KillMonstersEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Kills) != len(that1.Kills) {
		return false
	}
	for i := range this.Kills {
		if this.Kills[i] != that1.Kills[i] {
			return false
		}
	}
	return true
}
func (this *Task_TeleportEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_TeleportEvent)
	if !ok {
		that2, ok := that.(Task_TeleportEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	return true
}
func (this *Task_FinishRLEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task_FinishRLEvent)
	if !ok {
		that2, ok := that.(Task_FinishRLEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoguelikeId != that1.RoguelikeId {
		return false
	}
	return true
}
func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Task_SubmitTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_SubmitTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_SubmitTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x28
	}
	if m.Kind != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Task_SubmitTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_SubmitTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_SubmitTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Task_BattleTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_BattleTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_BattleTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x18
	}
	if m.NpcId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.NpcId))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Task_BattleTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_BattleTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_BattleTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServerTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x99
	}
	if len(m.MapId) > 0 {
		i -= len(m.MapId)
		copy(dAtA[i:], m.MapId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.MapId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Task_GatherTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_GatherTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_GatherTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Task_GatherTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_GatherTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_GatherTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Task_MoveTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_MoveTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_MoveTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Task_MoveTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_MoveTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_MoveTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Task_KillMonsterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_KillMonsterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_KillMonsterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x28
	}
	if m.Kind != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.MonsterId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.MonsterId))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Task_KillMonsterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_KillMonsterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_KillMonsterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Task_KillMonsterEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_KillMonsterEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_KillMonsterEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.MonsterId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.MonsterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Task_KillMonstersEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_KillMonstersEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_KillMonstersEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kills) > 0 {
		for k := range m.Kills {
			v := m.Kills[k]
			baseI := i
			i = encodeVarintTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Task_TeleportEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_TeleportEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_TeleportEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MapId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintTask(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Task_FinishRLEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_FinishRLEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task_FinishRLEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoguelikeId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.RoguelikeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Task) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Task_SubmitTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.ItemId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.Kind != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kind")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Kind))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task_SubmitTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Task_BattleTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.NpcId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("npc_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NpcId))
		needWriteComma = true
	}
	if m.Kind != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kind")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Kind))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task_BattleTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.MapId)
		needWriteComma = true
	}
	if math.Abs(float64(m.ServerTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.ServerTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task_GatherTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.Kind != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kind")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Kind))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task_GatherTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Task_MoveTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.Kind != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kind")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Kind))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task_MoveTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Task_KillMonsterRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.MonsterId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("monster_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.Kind != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kind")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Kind))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task_KillMonsterResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Task_KillMonsterEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MonsterId != 0 {
		w.RawByte('"')
		w.RawString("monster_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterId))
		needWriteComma = true
	}
	if m.Num != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task_KillMonstersEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("kills")
	w.RawByte('"')
	w.RawByte(':')
	if m.Kills == nil {
		w.RawString("null")
	} else if len(m.Kills) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlKills := len(m.Kills)
		for k, v := range m.Kills {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlKills--
			if mlKills != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task_TeleportEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task_FinishRLEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoguelikeId != 0 {
		w.RawByte('"')
		w.RawString("roguelike_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoguelikeId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task) GoString() string {
	return m.String()
}

func (m *Task_SubmitTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_SubmitTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_SubmitTaskRequest) GoString() string {
	return m.String()
}

func (m *Task_SubmitTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_SubmitTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_SubmitTaskResponse) GoString() string {
	return m.String()
}

func (m *Task_BattleTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_BattleTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_BattleTaskRequest) GoString() string {
	return m.String()
}

func (m *Task_BattleTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_BattleTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_BattleTaskResponse) GoString() string {
	return m.String()
}

func (m *Task_GatherTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_GatherTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_GatherTaskRequest) GoString() string {
	return m.String()
}

func (m *Task_GatherTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_GatherTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_GatherTaskResponse) GoString() string {
	return m.String()
}

func (m *Task_MoveTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_MoveTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_MoveTaskRequest) GoString() string {
	return m.String()
}

func (m *Task_MoveTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_MoveTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_MoveTaskResponse) GoString() string {
	return m.String()
}

func (m *Task_KillMonsterRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_KillMonsterRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_KillMonsterRequest) GoString() string {
	return m.String()
}

func (m *Task_KillMonsterResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_KillMonsterResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_KillMonsterResponse) GoString() string {
	return m.String()
}

func (m *Task_KillMonsterEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_KillMonsterEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_KillMonsterEvent) GoString() string {
	return m.String()
}

func (m *Task_KillMonstersEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_KillMonstersEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_KillMonstersEvent) GoString() string {
	return m.String()
}

func (m *Task_TeleportEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_TeleportEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_TeleportEvent) GoString() string {
	return m.String()
}

func (m *Task_FinishRLEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task_FinishRLEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task_FinishRLEvent) GoString() string {
	return m.String()
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Task_SubmitTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovTask(uint64(m.TaskId))
	}
	if m.ItemId != 0 {
		n += 1 + sovTask(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovTask(uint64(m.Count))
	}
	if m.Kind != 0 {
		n += 1 + sovTask(uint64(m.Kind))
	}
	if m.Typ != 0 {
		n += 1 + sovTask(uint64(m.Typ))
	}
	return n
}

func (m *Task_SubmitTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Task_BattleTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovTask(uint64(m.TaskId))
	}
	if m.NpcId != 0 {
		n += 1 + sovTask(uint64(m.NpcId))
	}
	if m.Kind != 0 {
		n += 1 + sovTask(uint64(m.Kind))
	}
	return n
}

func (m *Task_BattleTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.MapId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 10
	}
	return n
}

func (m *Task_GatherTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovTask(uint64(m.TaskId))
	}
	if m.Kind != 0 {
		n += 1 + sovTask(uint64(m.Kind))
	}
	return n
}

func (m *Task_GatherTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Task_MoveTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovTask(uint64(m.TaskId))
	}
	if m.Kind != 0 {
		n += 1 + sovTask(uint64(m.Kind))
	}
	return n
}

func (m *Task_MoveTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Task_KillMonsterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovTask(uint64(m.TaskId))
	}
	if m.MonsterId != 0 {
		n += 1 + sovTask(uint64(m.MonsterId))
	}
	if m.Count != 0 {
		n += 1 + sovTask(uint64(m.Count))
	}
	if m.Kind != 0 {
		n += 1 + sovTask(uint64(m.Kind))
	}
	if m.Typ != 0 {
		n += 1 + sovTask(uint64(m.Typ))
	}
	return n
}

func (m *Task_KillMonsterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Task_KillMonsterEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonsterId != 0 {
		n += 1 + sovTask(uint64(m.MonsterId))
	}
	if m.Num != 0 {
		n += 1 + sovTask(uint64(m.Num))
	}
	return n
}

func (m *Task_KillMonstersEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Kills) > 0 {
		for k, v := range m.Kills {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTask(uint64(k)) + 1 + sovTask(uint64(v))
			n += mapEntrySize + 1 + sovTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Task_TeleportEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovTask(uint64(m.MapId))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *Task_FinishRLEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoguelikeId != 0 {
		n += 1 + sovTask(uint64(m.RoguelikeId))
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_SubmitTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= models.TaskKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_SubmitTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_BattleTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			m.NpcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NpcId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= models.TaskKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_BattleTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &battle.Pos{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServerTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_GatherTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatherTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatherTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= models.TaskKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_GatherTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatherTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatherTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_MoveTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= models.TaskKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_MoveTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_KillMonsterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterId", wireType)
			}
			m.MonsterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= models.TaskKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_KillMonsterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_KillMonsterEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterId", wireType)
			}
			m.MonsterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_KillMonstersEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonstersEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonstersEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kills == nil {
				m.Kills = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Kills[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_TeleportEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeleportEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeleportEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &newbattle.Vector2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_FinishRLEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishRLEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishRLEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoguelikeId", wireType)
			}
			m.RoguelikeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoguelikeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
