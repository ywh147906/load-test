// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/im.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImErrorCode int32

const (
	ImErrorCode_ErrGiftNotFound  ImErrorCode = 0
	ImErrorCode_ErrGiftDrawLimit ImErrorCode = 1
)

var ImErrorCode_name = map[int32]string{
	0: "ErrGiftNotFound",
	1: "ErrGiftDrawLimit",
}

var ImErrorCode_value = map[string]int32{
	"ErrGiftNotFound":  0,
	"ErrGiftDrawLimit": 1,
}

func (ImErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0}
}

type Im struct {
}

func (m *Im) Reset()      { *m = Im{} }
func (*Im) ProtoMessage() {}
func (*Im) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0}
}
func (m *Im) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im.Merge(m, src)
}
func (m *Im) XXX_Size() int {
	return m.Size()
}
func (m *Im) XXX_DiscardUnknown() {
	xxx_messageInfo_Im.DiscardUnknown(m)
}

var xxx_messageInfo_Im proto.InternalMessageInfo

func (*Im) XXX_MessageName() string {
	return "service.Im"
}

// 获取im token
type Im_GetTokenRequest struct {
}

func (m *Im_GetTokenRequest) Reset()      { *m = Im_GetTokenRequest{} }
func (*Im_GetTokenRequest) ProtoMessage() {}
func (*Im_GetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 0}
}
func (m *Im_GetTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_GetTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_GetTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_GetTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_GetTokenRequest.Merge(m, src)
}
func (m *Im_GetTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *Im_GetTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_GetTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Im_GetTokenRequest proto.InternalMessageInfo

func (*Im_GetTokenRequest) XXX_MessageName() string {
	return "service.Im.GetTokenRequest"
}

type Im_GetTokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *Im_GetTokenResponse) Reset()      { *m = Im_GetTokenResponse{} }
func (*Im_GetTokenResponse) ProtoMessage() {}
func (*Im_GetTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 1}
}
func (m *Im_GetTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_GetTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_GetTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_GetTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_GetTokenResponse.Merge(m, src)
}
func (m *Im_GetTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *Im_GetTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_GetTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Im_GetTokenResponse proto.InternalMessageInfo

func (m *Im_GetTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (*Im_GetTokenResponse) XXX_MessageName() string {
	return "service.Im.GetTokenResponse"
}

// 获取红包详情
type Im_GetGiftRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Im_GetGiftRequest) Reset()      { *m = Im_GetGiftRequest{} }
func (*Im_GetGiftRequest) ProtoMessage() {}
func (*Im_GetGiftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 2}
}
func (m *Im_GetGiftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_GetGiftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_GetGiftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_GetGiftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_GetGiftRequest.Merge(m, src)
}
func (m *Im_GetGiftRequest) XXX_Size() int {
	return m.Size()
}
func (m *Im_GetGiftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_GetGiftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Im_GetGiftRequest proto.InternalMessageInfo

func (m *Im_GetGiftRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*Im_GetGiftRequest) XXX_MessageName() string {
	return "service.Im.GetGiftRequest"
}

type Im_GetGiftResponse struct {
	Gift  *models.Gift `protobuf:"bytes,1,opt,name=gift,proto3" json:"gift,omitempty"`
	Count int64        `protobuf:"zigzag64,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Im_GetGiftResponse) Reset()      { *m = Im_GetGiftResponse{} }
func (*Im_GetGiftResponse) ProtoMessage() {}
func (*Im_GetGiftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 3}
}
func (m *Im_GetGiftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_GetGiftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_GetGiftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_GetGiftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_GetGiftResponse.Merge(m, src)
}
func (m *Im_GetGiftResponse) XXX_Size() int {
	return m.Size()
}
func (m *Im_GetGiftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_GetGiftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Im_GetGiftResponse proto.InternalMessageInfo

func (m *Im_GetGiftResponse) GetGift() *models.Gift {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *Im_GetGiftResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Im_GetGiftResponse) XXX_MessageName() string {
	return "service.Im.GetGiftResponse"
}

// 批量获取红包详情
type Im_GetGiftByIdsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *Im_GetGiftByIdsRequest) Reset()      { *m = Im_GetGiftByIdsRequest{} }
func (*Im_GetGiftByIdsRequest) ProtoMessage() {}
func (*Im_GetGiftByIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 4}
}
func (m *Im_GetGiftByIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_GetGiftByIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_GetGiftByIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_GetGiftByIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_GetGiftByIdsRequest.Merge(m, src)
}
func (m *Im_GetGiftByIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *Im_GetGiftByIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_GetGiftByIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Im_GetGiftByIdsRequest proto.InternalMessageInfo

func (m *Im_GetGiftByIdsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (*Im_GetGiftByIdsRequest) XXX_MessageName() string {
	return "service.Im.GetGiftByIdsRequest"
}

type Im_GetGiftByIdsResponse struct {
	Gifts []*models.Gift `protobuf:"bytes,1,rep,name=gifts,proto3" json:"gifts,omitempty"`
}

func (m *Im_GetGiftByIdsResponse) Reset()      { *m = Im_GetGiftByIdsResponse{} }
func (*Im_GetGiftByIdsResponse) ProtoMessage() {}
func (*Im_GetGiftByIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 5}
}
func (m *Im_GetGiftByIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_GetGiftByIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_GetGiftByIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_GetGiftByIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_GetGiftByIdsResponse.Merge(m, src)
}
func (m *Im_GetGiftByIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *Im_GetGiftByIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_GetGiftByIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Im_GetGiftByIdsResponse proto.InternalMessageInfo

func (m *Im_GetGiftByIdsResponse) GetGifts() []*models.Gift {
	if m != nil {
		return m.Gifts
	}
	return nil
}

func (*Im_GetGiftByIdsResponse) XXX_MessageName() string {
	return "service.Im.GetGiftByIdsResponse"
}

// 领取红包
type Im_DrawGiftRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Im_DrawGiftRequest) Reset()      { *m = Im_DrawGiftRequest{} }
func (*Im_DrawGiftRequest) ProtoMessage() {}
func (*Im_DrawGiftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 6}
}
func (m *Im_DrawGiftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_DrawGiftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_DrawGiftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_DrawGiftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_DrawGiftRequest.Merge(m, src)
}
func (m *Im_DrawGiftRequest) XXX_Size() int {
	return m.Size()
}
func (m *Im_DrawGiftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_DrawGiftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Im_DrawGiftRequest proto.InternalMessageInfo

func (m *Im_DrawGiftRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*Im_DrawGiftRequest) XXX_MessageName() string {
	return "service.Im.DrawGiftRequest"
}

type Im_DrawGiftResponse struct {
	Gift *models.Gift `protobuf:"bytes,1,opt,name=gift,proto3" json:"gift,omitempty"`
	Item *models.Item `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *Im_DrawGiftResponse) Reset()      { *m = Im_DrawGiftResponse{} }
func (*Im_DrawGiftResponse) ProtoMessage() {}
func (*Im_DrawGiftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 7}
}
func (m *Im_DrawGiftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_DrawGiftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_DrawGiftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_DrawGiftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_DrawGiftResponse.Merge(m, src)
}
func (m *Im_DrawGiftResponse) XXX_Size() int {
	return m.Size()
}
func (m *Im_DrawGiftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_DrawGiftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Im_DrawGiftResponse proto.InternalMessageInfo

func (m *Im_DrawGiftResponse) GetGift() *models.Gift {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *Im_DrawGiftResponse) GetItem() *models.Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (*Im_DrawGiftResponse) XXX_MessageName() string {
	return "service.Im.DrawGiftResponse"
}

// 分享（目前仅分享装备）
type Im_ShareRequest struct {
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *Im_ShareRequest) Reset()      { *m = Im_ShareRequest{} }
func (*Im_ShareRequest) ProtoMessage() {}
func (*Im_ShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 8}
}
func (m *Im_ShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_ShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_ShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_ShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_ShareRequest.Merge(m, src)
}
func (m *Im_ShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *Im_ShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_ShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Im_ShareRequest proto.InternalMessageInfo

func (m *Im_ShareRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (*Im_ShareRequest) XXX_MessageName() string {
	return "service.Im.ShareRequest"
}

type Im_ShareResponse struct {
}

func (m *Im_ShareResponse) Reset()      { *m = Im_ShareResponse{} }
func (*Im_ShareResponse) ProtoMessage() {}
func (*Im_ShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 9}
}
func (m *Im_ShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_ShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_ShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_ShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_ShareResponse.Merge(m, src)
}
func (m *Im_ShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *Im_ShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_ShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Im_ShareResponse proto.InternalMessageInfo

func (*Im_ShareResponse) XXX_MessageName() string {
	return "service.Im.ShareResponse"
}

// 分享其他物品(只用作统计计数)，不会发送聊天
type Im_ShareItemRequest struct {
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *Im_ShareItemRequest) Reset()      { *m = Im_ShareItemRequest{} }
func (*Im_ShareItemRequest) ProtoMessage() {}
func (*Im_ShareItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 10}
}
func (m *Im_ShareItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_ShareItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_ShareItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_ShareItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_ShareItemRequest.Merge(m, src)
}
func (m *Im_ShareItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *Im_ShareItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_ShareItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Im_ShareItemRequest proto.InternalMessageInfo

func (m *Im_ShareItemRequest) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (*Im_ShareItemRequest) XXX_MessageName() string {
	return "service.Im.ShareItemRequest"
}

type Im_ShareItemResponse struct {
}

func (m *Im_ShareItemResponse) Reset()      { *m = Im_ShareItemResponse{} }
func (*Im_ShareItemResponse) ProtoMessage() {}
func (*Im_ShareItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 11}
}
func (m *Im_ShareItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_ShareItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_ShareItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_ShareItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_ShareItemResponse.Merge(m, src)
}
func (m *Im_ShareItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *Im_ShareItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_ShareItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Im_ShareItemResponse proto.InternalMessageInfo

func (*Im_ShareItemResponse) XXX_MessageName() string {
	return "service.Im.ShareItemResponse"
}

// 作弊器发红包
type Im_CheatSendGiftRequest struct {
	No int64 `protobuf:"zigzag64,1,opt,name=no,proto3" json:"no,omitempty"`
}

func (m *Im_CheatSendGiftRequest) Reset()      { *m = Im_CheatSendGiftRequest{} }
func (*Im_CheatSendGiftRequest) ProtoMessage() {}
func (*Im_CheatSendGiftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 12}
}
func (m *Im_CheatSendGiftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_CheatSendGiftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_CheatSendGiftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_CheatSendGiftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_CheatSendGiftRequest.Merge(m, src)
}
func (m *Im_CheatSendGiftRequest) XXX_Size() int {
	return m.Size()
}
func (m *Im_CheatSendGiftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_CheatSendGiftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Im_CheatSendGiftRequest proto.InternalMessageInfo

func (m *Im_CheatSendGiftRequest) GetNo() int64 {
	if m != nil {
		return m.No
	}
	return 0
}

func (*Im_CheatSendGiftRequest) XXX_MessageName() string {
	return "service.Im.CheatSendGiftRequest"
}

type Im_CheatSendGiftResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Im_CheatSendGiftResponse) Reset()      { *m = Im_CheatSendGiftResponse{} }
func (*Im_CheatSendGiftResponse) ProtoMessage() {}
func (*Im_CheatSendGiftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 13}
}
func (m *Im_CheatSendGiftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_CheatSendGiftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_CheatSendGiftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_CheatSendGiftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_CheatSendGiftResponse.Merge(m, src)
}
func (m *Im_CheatSendGiftResponse) XXX_Size() int {
	return m.Size()
}
func (m *Im_CheatSendGiftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_CheatSendGiftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Im_CheatSendGiftResponse proto.InternalMessageInfo

func (m *Im_CheatSendGiftResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*Im_CheatSendGiftResponse) XXX_MessageName() string {
	return "service.Im.CheatSendGiftResponse"
}

// GM发跑马灯消息
type Im_CheatSendMarqueeRequest struct {
	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	IsVolatile bool   `protobuf:"varint,2,opt,name=is_volatile,json=isVolatile,proto3" json:"is_volatile,omitempty"`
}

func (m *Im_CheatSendMarqueeRequest) Reset()      { *m = Im_CheatSendMarqueeRequest{} }
func (*Im_CheatSendMarqueeRequest) ProtoMessage() {}
func (*Im_CheatSendMarqueeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 14}
}
func (m *Im_CheatSendMarqueeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_CheatSendMarqueeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_CheatSendMarqueeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_CheatSendMarqueeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_CheatSendMarqueeRequest.Merge(m, src)
}
func (m *Im_CheatSendMarqueeRequest) XXX_Size() int {
	return m.Size()
}
func (m *Im_CheatSendMarqueeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_CheatSendMarqueeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Im_CheatSendMarqueeRequest proto.InternalMessageInfo

func (m *Im_CheatSendMarqueeRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Im_CheatSendMarqueeRequest) GetIsVolatile() bool {
	if m != nil {
		return m.IsVolatile
	}
	return false
}

func (*Im_CheatSendMarqueeRequest) XXX_MessageName() string {
	return "service.Im.CheatSendMarqueeRequest"
}

type Im_CheatSendMarqueeResponse struct {
}

func (m *Im_CheatSendMarqueeResponse) Reset()      { *m = Im_CheatSendMarqueeResponse{} }
func (*Im_CheatSendMarqueeResponse) ProtoMessage() {}
func (*Im_CheatSendMarqueeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04a152bbc3ad6d29, []int{0, 15}
}
func (m *Im_CheatSendMarqueeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Im_CheatSendMarqueeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Im_CheatSendMarqueeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Im_CheatSendMarqueeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Im_CheatSendMarqueeResponse.Merge(m, src)
}
func (m *Im_CheatSendMarqueeResponse) XXX_Size() int {
	return m.Size()
}
func (m *Im_CheatSendMarqueeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Im_CheatSendMarqueeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Im_CheatSendMarqueeResponse proto.InternalMessageInfo

func (*Im_CheatSendMarqueeResponse) XXX_MessageName() string {
	return "service.Im.CheatSendMarqueeResponse"
}
func init() {
	proto.RegisterEnum("service.ImErrorCode", ImErrorCode_name, ImErrorCode_value)
	proto.RegisterType((*Im)(nil), "service.Im")
	proto.RegisterType((*Im_GetTokenRequest)(nil), "service.Im.GetTokenRequest")
	proto.RegisterType((*Im_GetTokenResponse)(nil), "service.Im.GetTokenResponse")
	proto.RegisterType((*Im_GetGiftRequest)(nil), "service.Im.GetGiftRequest")
	proto.RegisterType((*Im_GetGiftResponse)(nil), "service.Im.GetGiftResponse")
	proto.RegisterType((*Im_GetGiftByIdsRequest)(nil), "service.Im.GetGiftByIdsRequest")
	proto.RegisterType((*Im_GetGiftByIdsResponse)(nil), "service.Im.GetGiftByIdsResponse")
	proto.RegisterType((*Im_DrawGiftRequest)(nil), "service.Im.DrawGiftRequest")
	proto.RegisterType((*Im_DrawGiftResponse)(nil), "service.Im.DrawGiftResponse")
	proto.RegisterType((*Im_ShareRequest)(nil), "service.Im.ShareRequest")
	proto.RegisterType((*Im_ShareResponse)(nil), "service.Im.ShareResponse")
	proto.RegisterType((*Im_ShareItemRequest)(nil), "service.Im.ShareItemRequest")
	proto.RegisterType((*Im_ShareItemResponse)(nil), "service.Im.ShareItemResponse")
	proto.RegisterType((*Im_CheatSendGiftRequest)(nil), "service.Im.CheatSendGiftRequest")
	proto.RegisterType((*Im_CheatSendGiftResponse)(nil), "service.Im.CheatSendGiftResponse")
	proto.RegisterType((*Im_CheatSendMarqueeRequest)(nil), "service.Im.CheatSendMarqueeRequest")
	proto.RegisterType((*Im_CheatSendMarqueeResponse)(nil), "service.Im.CheatSendMarqueeResponse")
}

func init() { proto.RegisterFile("proto/service/im.proto", fileDescriptor_04a152bbc3ad6d29) }

var fileDescriptor_04a152bbc3ad6d29 = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x4b, 0x14, 0x51,
	0x18, 0xc6, 0x77, 0x76, 0xfd, 0xc8, 0x57, 0x73, 0xc7, 0x71, 0xd5, 0xe1, 0x04, 0xa7, 0x45, 0x44,
	0x37, 0x41, 0x17, 0xea, 0x4e, 0x08, 0x42, 0x33, 0x59, 0x28, 0x89, 0x51, 0xbc, 0xe8, 0x26, 0xc6,
	0x9d, 0xa3, 0x1e, 0x72, 0xe6, 0xe8, 0x9c, 0xb3, 0x46, 0x74, 0x27, 0x14, 0x24, 0x45, 0xde, 0xf4,
	0x05, 0xde, 0x24, 0x04, 0x5e, 0x18, 0x44, 0xb0, 0x24, 0x5d, 0x78, 0xed, 0xa5, 0x97, 0x5e, 0xd6,
	0xac, 0xbb, 0xe9, 0x5d, 0x7f, 0x42, 0xcc, 0x9c, 0xe3, 0xd7, 0x2c, 0x45, 0x77, 0xf3, 0x3e, 0xef,
	0xef, 0x7d, 0xde, 0x8f, 0x81, 0x03, 0xdd, 0x4b, 0x3e, 0x13, 0x2c, 0xcf, 0x89, 0xbf, 0x42, 0x8b,
	0x24, 0x4f, 0xdd, 0xe1, 0x48, 0x30, 0x9a, 0x95, 0x82, 0x7a, 0x24, 0xe0, 0x32, 0x87, 0x2c, 0xf2,
	0xfc, 0xac, 0xcd, 0x89, 0x24, 0x62, 0x89, 0x79, 0x3a, 0x27, 0x54, 0xa2, 0x3b, 0x56, 0x31, 0x2f,
	0xf5, 0xde, 0x17, 0x4d, 0x90, 0x2c, 0xb8, 0xa8, 0x03, 0xd2, 0x13, 0x44, 0x4c, 0xb3, 0x47, 0xc4,
	0xb3, 0xc8, 0x72, 0x89, 0x70, 0x81, 0x72, 0xa0, 0x9f, 0x49, 0x7c, 0x89, 0x79, 0x9c, 0x18, 0x19,
	0x68, 0x14, 0xa1, 0x60, 0x6a, 0x59, 0x2d, 0xd7, 0x62, 0xc9, 0x00, 0xdd, 0x84, 0xf6, 0x09, 0x22,
	0x26, 0xe8, 0x9c, 0x50, 0xb5, 0x46, 0x3b, 0x24, 0xa9, 0xa3, 0xa0, 0x24, 0x75, 0x46, 0xae, 0xac,
	0x96, 0xcd, 0x1e, 0x68, 0x08, 0xe7, 0x31, 0xd2, 0xe3, 0xbe, 0x1f, 0xb2, 0x93, 0x4c, 0xdc, 0x61,
	0x25, 0xcf, 0x41, 0x85, 0xa8, 0xb7, 0x2c, 0x57, 0x7d, 0xb2, 0x92, 0x8d, 0x1c, 0x5a, 0xaf, 0xb7,
	0x0d, 0xcb, 0xb1, 0x87, 0x23, 0x46, 0xba, 0x64, 0xa0, 0xb1, 0xc8, 0x4a, 0x9e, 0x30, 0x93, 0x59,
	0x2d, 0x67, 0x58, 0x32, 0x40, 0x03, 0xd0, 0xa9, 0xac, 0x46, 0x9f, 0x14, 0x1c, 0x7e, 0x32, 0x8e,
	0x0e, 0x29, 0xea, 0x70, 0x53, 0xcb, 0xa6, 0x72, 0x2d, 0x56, 0xf8, 0x89, 0x46, 0x20, 0x73, 0x11,
	0x54, 0x8d, 0x7b, 0xa1, 0x31, 0xb4, 0x97, 0x6c, 0xbc, 0xb3, 0x4c, 0xa1, 0xfb, 0x90, 0xbe, 0xed,
	0xdb, 0x8f, 0xff, 0xb5, 0xef, 0xd0, 0x6a, 0xd9, 0xbc, 0xf6, 0x97, 0x7d, 0x0d, 0x5d, 0x09, 0xa1,
	0xc9, 0x5d, 0xea, 0x52, 0x81, 0x66, 0x40, 0x3f, 0x73, 0xfc, 0xef, 0x13, 0x64, 0xa1, 0x81, 0x0a,
	0xe2, 0x46, 0x17, 0x38, 0x47, 0x14, 0x04, 0x71, 0xad, 0x28, 0x83, 0x30, 0xb4, 0x4d, 0x2d, 0xd8,
	0x3e, 0x89, 0x8f, 0x99, 0x92, 0x63, 0xa2, 0x34, 0x5c, 0x56, 0x79, 0xd9, 0x14, 0xf5, 0x81, 0x1e,
	0x09, 0x91, 0x47, 0xfd, 0xf1, 0x52, 0xf2, 0x78, 0x9d, 0xd0, 0x71, 0x8e, 0x52, 0xa5, 0xfd, 0x90,
	0x19, 0x5b, 0x20, 0xb6, 0x98, 0x22, 0x9e, 0x13, 0x3b, 0x8d, 0xc7, 0xa2, 0x2d, 0x0c, 0x2b, 0xe9,
	0x31, 0x34, 0x00, 0x5d, 0x31, 0x4e, 0x2d, 0x1c, 0xbb, 0x21, 0x9a, 0x86, 0x9e, 0x53, 0xf0, 0x9e,
	0xed, 0x2f, 0x97, 0xc8, 0xe9, 0x1e, 0x26, 0x34, 0xbb, 0x84, 0x73, 0x7b, 0x9e, 0x28, 0xfe, 0x24,
	0x34, 0xae, 0x42, 0x2b, 0xe5, 0x0f, 0x57, 0xd8, 0xa2, 0x2d, 0xe8, 0x22, 0x89, 0x4e, 0x73, 0xc9,
	0x02, 0xca, 0x67, 0x94, 0x82, 0x10, 0x98, 0xf5, 0xae, 0x72, 0x82, 0xc1, 0xa7, 0xd0, 0x5a, 0x70,
	0xc7, 0x7d, 0x9f, 0xf9, 0x63, 0xcc, 0x21, 0xc6, 0x20, 0xc4, 0x7f, 0x9d, 0x9e, 0x40, 0x5d, 0x6b,
	0x65, 0xb3, 0xc3, 0x48, 0xff, 0xfa, 0xbe, 0x59, 0x7d, 0xf9, 0xec, 0x70, 0xe7, 0x55, 0xf5, 0xf3,
	0xfb, 0xea, 0xc6, 0x96, 0x71, 0x0b, 0xea, 0xfe, 0xaa, 0xae, 0xa1, 0xc1, 0xb5, 0xb2, 0xd9, 0x6f,
	0xf4, 0xd5, 0x36, 0xb6, 0x6b, 0xef, 0x3e, 0xc9, 0x92, 0xe3, 0xcd, 0xe7, 0xd5, 0xd7, 0x6f, 0x6b,
	0xdb, 0x1f, 0x6b, 0x6f, 0xbe, 0x54, 0xbf, 0x7d, 0x3d, 0xda, 0xdd, 0x3d, 0xdc, 0x59, 0x3b, 0xfe,
	0xb0, 0x3e, 0x3a, 0x79, 0xf0, 0x13, 0x27, 0xb6, 0x02, 0xac, 0xed, 0x05, 0x58, 0xdb, 0x0f, 0xb0,
	0xf6, 0x23, 0xc0, 0xda, 0x51, 0x80, 0x13, 0xbf, 0x03, 0xac, 0xad, 0x57, 0x70, 0x62, 0xaf, 0x82,
	0xb5, 0xfd, 0x0a, 0x4e, 0x1c, 0x54, 0x70, 0xe2, 0x41, 0xb6, 0xc8, 0xa8, 0x37, 0x14, 0x3e, 0x07,
	0xc4, 0xcf, 0x17, 0x99, 0xeb, 0x32, 0x2f, 0x7f, 0xe1, 0xd1, 0x98, 0x6d, 0x8a, 0xc2, 0x1b, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x2a, 0xc8, 0x07, 0x4c, 0x04, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_GetTokenRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_GetTokenResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_GetGiftRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_GetGiftResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_GetGiftByIdsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_GetGiftByIdsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_DrawGiftRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_DrawGiftResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_ShareRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_ShareResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_ShareItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_ShareItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_CheatSendGiftRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_CheatSendGiftResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_CheatSendMarqueeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolIm_CheatSendMarqueeResponse.Get().(proto.Message)
	})
}

var poolIm = &sync.Pool{New: func() interface{} { return &Im{} }}

func (m *Im) ReleasePool() { m.Reset(); poolIm.Put(m); m = nil }

var poolIm_GetTokenRequest = &sync.Pool{New: func() interface{} { return &Im_GetTokenRequest{} }}

func (m *Im_GetTokenRequest) ReleasePool() { m.Reset(); poolIm_GetTokenRequest.Put(m); m = nil }

var poolIm_GetTokenResponse = &sync.Pool{New: func() interface{} { return &Im_GetTokenResponse{} }}

func (m *Im_GetTokenResponse) ReleasePool() { m.Reset(); poolIm_GetTokenResponse.Put(m); m = nil }

var poolIm_GetGiftRequest = &sync.Pool{New: func() interface{} { return &Im_GetGiftRequest{} }}

func (m *Im_GetGiftRequest) ReleasePool() { m.Reset(); poolIm_GetGiftRequest.Put(m); m = nil }

var poolIm_GetGiftResponse = &sync.Pool{New: func() interface{} { return &Im_GetGiftResponse{} }}

func (m *Im_GetGiftResponse) ReleasePool() { m.Reset(); poolIm_GetGiftResponse.Put(m); m = nil }

var poolIm_GetGiftByIdsRequest = &sync.Pool{New: func() interface{} { return &Im_GetGiftByIdsRequest{} }}

func (m *Im_GetGiftByIdsRequest) ReleasePool() { m.Reset(); poolIm_GetGiftByIdsRequest.Put(m); m = nil }

var poolIm_GetGiftByIdsResponse = &sync.Pool{New: func() interface{} { return &Im_GetGiftByIdsResponse{} }}

func (m *Im_GetGiftByIdsResponse) ReleasePool() {
	m.Reset()
	poolIm_GetGiftByIdsResponse.Put(m)
	m = nil
}

var poolIm_DrawGiftRequest = &sync.Pool{New: func() interface{} { return &Im_DrawGiftRequest{} }}

func (m *Im_DrawGiftRequest) ReleasePool() { m.Reset(); poolIm_DrawGiftRequest.Put(m); m = nil }

var poolIm_DrawGiftResponse = &sync.Pool{New: func() interface{} { return &Im_DrawGiftResponse{} }}

func (m *Im_DrawGiftResponse) ReleasePool() { m.Reset(); poolIm_DrawGiftResponse.Put(m); m = nil }

var poolIm_ShareRequest = &sync.Pool{New: func() interface{} { return &Im_ShareRequest{} }}

func (m *Im_ShareRequest) ReleasePool() { m.Reset(); poolIm_ShareRequest.Put(m); m = nil }

var poolIm_ShareResponse = &sync.Pool{New: func() interface{} { return &Im_ShareResponse{} }}

func (m *Im_ShareResponse) ReleasePool() { m.Reset(); poolIm_ShareResponse.Put(m); m = nil }

var poolIm_ShareItemRequest = &sync.Pool{New: func() interface{} { return &Im_ShareItemRequest{} }}

func (m *Im_ShareItemRequest) ReleasePool() { m.Reset(); poolIm_ShareItemRequest.Put(m); m = nil }

var poolIm_ShareItemResponse = &sync.Pool{New: func() interface{} { return &Im_ShareItemResponse{} }}

func (m *Im_ShareItemResponse) ReleasePool() { m.Reset(); poolIm_ShareItemResponse.Put(m); m = nil }

var poolIm_CheatSendGiftRequest = &sync.Pool{New: func() interface{} { return &Im_CheatSendGiftRequest{} }}

func (m *Im_CheatSendGiftRequest) ReleasePool() {
	m.Reset()
	poolIm_CheatSendGiftRequest.Put(m)
	m = nil
}

var poolIm_CheatSendGiftResponse = &sync.Pool{New: func() interface{} { return &Im_CheatSendGiftResponse{} }}

func (m *Im_CheatSendGiftResponse) ReleasePool() {
	m.Reset()
	poolIm_CheatSendGiftResponse.Put(m)
	m = nil
}

var poolIm_CheatSendMarqueeRequest = &sync.Pool{New: func() interface{} { return &Im_CheatSendMarqueeRequest{} }}

func (m *Im_CheatSendMarqueeRequest) ReleasePool() {
	m.Reset()
	poolIm_CheatSendMarqueeRequest.Put(m)
	m = nil
}

var poolIm_CheatSendMarqueeResponse = &sync.Pool{New: func() interface{} { return &Im_CheatSendMarqueeResponse{} }}

func (m *Im_CheatSendMarqueeResponse) ReleasePool() {
	m.Reset()
	poolIm_CheatSendMarqueeResponse.Put(m)
	m = nil
}
func (x ImErrorCode) String() string {
	s, ok := ImErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Im) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im)
	if !ok {
		that2, ok := that.(Im)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Im_GetTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_GetTokenRequest)
	if !ok {
		that2, ok := that.(Im_GetTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Im_GetTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_GetTokenResponse)
	if !ok {
		that2, ok := that.(Im_GetTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *Im_GetGiftRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_GetGiftRequest)
	if !ok {
		that2, ok := that.(Im_GetGiftRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Im_GetGiftResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_GetGiftResponse)
	if !ok {
		that2, ok := that.(Im_GetGiftResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gift.Equal(that1.Gift) {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Im_GetGiftByIdsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_GetGiftByIdsRequest)
	if !ok {
		that2, ok := that.(Im_GetGiftByIdsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	return true
}
func (this *Im_GetGiftByIdsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_GetGiftByIdsResponse)
	if !ok {
		that2, ok := that.(Im_GetGiftByIdsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Gifts) != len(that1.Gifts) {
		return false
	}
	for i := range this.Gifts {
		if !this.Gifts[i].Equal(that1.Gifts[i]) {
			return false
		}
	}
	return true
}
func (this *Im_DrawGiftRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_DrawGiftRequest)
	if !ok {
		that2, ok := that.(Im_DrawGiftRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Im_DrawGiftResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_DrawGiftResponse)
	if !ok {
		that2, ok := that.(Im_DrawGiftResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gift.Equal(that1.Gift) {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *Im_ShareRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_ShareRequest)
	if !ok {
		that2, ok := that.(Im_ShareRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Id) != len(that1.Id) {
		return false
	}
	for i := range this.Id {
		if this.Id[i] != that1.Id[i] {
			return false
		}
	}
	return true
}
func (this *Im_ShareResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_ShareResponse)
	if !ok {
		that2, ok := that.(Im_ShareResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Im_ShareItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_ShareItemRequest)
	if !ok {
		that2, ok := that.(Im_ShareItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	return true
}
func (this *Im_ShareItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_ShareItemResponse)
	if !ok {
		that2, ok := that.(Im_ShareItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Im_CheatSendGiftRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_CheatSendGiftRequest)
	if !ok {
		that2, ok := that.(Im_CheatSendGiftRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.No != that1.No {
		return false
	}
	return true
}
func (this *Im_CheatSendGiftResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_CheatSendGiftResponse)
	if !ok {
		that2, ok := that.(Im_CheatSendGiftResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Im_CheatSendMarqueeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_CheatSendMarqueeRequest)
	if !ok {
		that2, ok := that.(Im_CheatSendMarqueeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.IsVolatile != that1.IsVolatile {
		return false
	}
	return true
}
func (this *Im_CheatSendMarqueeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Im_CheatSendMarqueeResponse)
	if !ok {
		that2, ok := that.(Im_CheatSendMarqueeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Im) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Im_GetTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_GetTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_GetTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Im_GetTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_GetTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_GetTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintIm(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Im_GetGiftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_GetGiftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_GetGiftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIm(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Im_GetGiftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_GetGiftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_GetGiftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintIm(dAtA, i, uint64((uint64(m.Count)<<1)^uint64((m.Count>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Gift != nil {
		{
			size, err := m.Gift.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Im_GetGiftByIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_GetGiftByIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_GetGiftByIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintIm(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Im_GetGiftByIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_GetGiftByIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_GetGiftByIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gifts) > 0 {
		for iNdEx := len(m.Gifts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gifts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Im_DrawGiftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_DrawGiftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_DrawGiftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIm(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Im_DrawGiftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_DrawGiftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_DrawGiftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Gift != nil {
		{
			size, err := m.Gift.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Im_ShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_ShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_ShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintIm(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Im_ShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_ShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_ShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Im_ShareItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_ShareItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_ShareItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA5 := make([]byte, len(m.Ids)*10)
		var j4 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintIm(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Im_ShareItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_ShareItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_ShareItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Im_CheatSendGiftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_CheatSendGiftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_CheatSendGiftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.No != 0 {
		i = encodeVarintIm(dAtA, i, uint64((uint64(m.No)<<1)^uint64((m.No>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Im_CheatSendGiftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_CheatSendGiftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_CheatSendGiftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIm(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Im_CheatSendMarqueeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_CheatSendMarqueeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_CheatSendMarqueeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsVolatile {
		i--
		if m.IsVolatile {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintIm(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Im_CheatSendMarqueeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Im_CheatSendMarqueeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Im_CheatSendMarqueeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintIm(dAtA []byte, offset int, v uint64) int {
	offset -= sovIm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Im) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Im_GetTokenRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Im_GetTokenResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Token != "" {
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_GetGiftRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_GetGiftResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("gift")
	w.RawByte('"')
	w.RawByte(':')
	m.Gift.JsonBytes(w)
	needWriteComma = true
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_GetGiftByIdsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.Ids == nil {
		w.RawString("null")
	} else if len(m.Ids) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Ids {
			w.String(v)
			if i != len(m.Ids)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_GetGiftByIdsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("gifts")
	w.RawByte('"')
	w.RawByte(':')
	if m.Gifts == nil {
		w.RawString("null")
	} else if len(m.Gifts) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Gifts {
			v.JsonBytes(w)
			if i != len(m.Gifts)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_DrawGiftRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_DrawGiftResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("gift")
	w.RawByte('"')
	w.RawByte(':')
	m.Gift.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("item")
	w.RawByte('"')
	w.RawByte(':')
	m.Item.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_ShareRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("id")
	w.RawByte('"')
	w.RawByte(':')
	if m.Id == nil {
		w.RawString("null")
	} else if len(m.Id) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Id {
			w.String(v)
			if i != len(m.Id)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_ShareResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Im_ShareItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.Ids == nil {
		w.RawString("null")
	} else if len(m.Ids) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Ids {
			w.Int64(int64(v))
			if i != len(m.Ids)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_ShareItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Im_CheatSendGiftRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.No != 0 {
		w.RawByte('"')
		w.RawString("no")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.No))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_CheatSendGiftResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_CheatSendMarqueeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Message != "" {
		w.RawByte('"')
		w.RawString("message")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Message)
		needWriteComma = true
	}
	if m.IsVolatile {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_volatile")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsVolatile)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Im_CheatSendMarqueeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Im) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im) GoString() string {
	return m.String()
}

func (m *Im_GetTokenRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_GetTokenRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_GetTokenRequest) GoString() string {
	return m.String()
}

func (m *Im_GetTokenResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_GetTokenResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_GetTokenResponse) GoString() string {
	return m.String()
}

func (m *Im_GetGiftRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_GetGiftRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_GetGiftRequest) GoString() string {
	return m.String()
}

func (m *Im_GetGiftResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_GetGiftResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_GetGiftResponse) GoString() string {
	return m.String()
}

func (m *Im_GetGiftByIdsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_GetGiftByIdsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_GetGiftByIdsRequest) GoString() string {
	return m.String()
}

func (m *Im_GetGiftByIdsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_GetGiftByIdsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_GetGiftByIdsResponse) GoString() string {
	return m.String()
}

func (m *Im_DrawGiftRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_DrawGiftRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_DrawGiftRequest) GoString() string {
	return m.String()
}

func (m *Im_DrawGiftResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_DrawGiftResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_DrawGiftResponse) GoString() string {
	return m.String()
}

func (m *Im_ShareRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_ShareRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_ShareRequest) GoString() string {
	return m.String()
}

func (m *Im_ShareResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_ShareResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_ShareResponse) GoString() string {
	return m.String()
}

func (m *Im_ShareItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_ShareItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_ShareItemRequest) GoString() string {
	return m.String()
}

func (m *Im_ShareItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_ShareItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_ShareItemResponse) GoString() string {
	return m.String()
}

func (m *Im_CheatSendGiftRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_CheatSendGiftRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_CheatSendGiftRequest) GoString() string {
	return m.String()
}

func (m *Im_CheatSendGiftResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_CheatSendGiftResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_CheatSendGiftResponse) GoString() string {
	return m.String()
}

func (m *Im_CheatSendMarqueeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_CheatSendMarqueeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_CheatSendMarqueeRequest) GoString() string {
	return m.String()
}

func (m *Im_CheatSendMarqueeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Im_CheatSendMarqueeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Im_CheatSendMarqueeResponse) GoString() string {
	return m.String()
}

func (m *Im) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Im_GetTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Im_GetTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovIm(uint64(l))
	}
	return n
}

func (m *Im_GetGiftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIm(uint64(l))
	}
	return n
}

func (m *Im_GetGiftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gift != nil {
		l = m.Gift.Size()
		n += 1 + l + sovIm(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sozIm(uint64(m.Count))
	}
	return n
}

func (m *Im_GetGiftByIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovIm(uint64(l))
		}
	}
	return n
}

func (m *Im_GetGiftByIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gifts) > 0 {
		for _, e := range m.Gifts {
			l = e.Size()
			n += 1 + l + sovIm(uint64(l))
		}
	}
	return n
}

func (m *Im_DrawGiftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIm(uint64(l))
	}
	return n
}

func (m *Im_DrawGiftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gift != nil {
		l = m.Gift.Size()
		n += 1 + l + sovIm(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovIm(uint64(l))
	}
	return n
}

func (m *Im_ShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovIm(uint64(l))
		}
	}
	return n
}

func (m *Im_ShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Im_ShareItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovIm(uint64(e))
		}
		n += 1 + sovIm(uint64(l)) + l
	}
	return n
}

func (m *Im_ShareItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Im_CheatSendGiftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.No != 0 {
		n += 1 + sozIm(uint64(m.No))
	}
	return n
}

func (m *Im_CheatSendGiftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIm(uint64(l))
	}
	return n
}

func (m *Im_CheatSendMarqueeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovIm(uint64(l))
	}
	if m.IsVolatile {
		n += 2
	}
	return n
}

func (m *Im_CheatSendMarqueeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovIm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIm(x uint64) (n int) {
	return sovIm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Im) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Im: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Im: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_GetTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_GetTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_GetGiftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGiftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGiftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_GetGiftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGiftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGiftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gift == nil {
				m.Gift = &models.Gift{}
			}
			if err := m.Gift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Count = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_GetGiftByIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGiftByIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGiftByIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_GetGiftByIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGiftByIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGiftByIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifts = append(m.Gifts, &models.Gift{})
			if err := m.Gifts[len(m.Gifts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_DrawGiftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawGiftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawGiftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_DrawGiftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawGiftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawGiftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gift == nil {
				m.Gift = &models.Gift{}
			}
			if err := m.Gift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &models.Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_ShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_ShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_ShareItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIm
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthIm
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_ShareItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_CheatSendGiftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSendGiftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSendGiftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.No = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_CheatSendGiftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSendGiftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSendGiftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_CheatSendMarqueeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSendMarqueeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSendMarqueeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVolatile", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVolatile = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Im_CheatSendMarqueeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSendMarqueeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSendMarqueeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIm = fmt.Errorf("proto: unexpected end of group")
)
