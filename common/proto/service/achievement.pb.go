// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/achievement.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CountTyp int32

const (
	CountTyp_CTAdd CountTyp = 0
	CountTyp_CTSet CountTyp = 1
)

var CountTyp_name = map[int32]string{
	0: "CTAdd",
	1: "CTSet",
}

var CountTyp_value = map[string]int32{
	"CTAdd": 0,
	"CTSet": 1,
}

func (CountTyp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0}
}

type AchievementErrorCode int32

const (
	AchievementErrorCode_ErrAchievementNotExist        AchievementErrorCode = 0
	AchievementErrorCode_ErrAchievementNotFinished     AchievementErrorCode = 1
	AchievementErrorCode_ErrAchievementAlreadyCollect  AchievementErrorCode = 2
	AchievementErrorCode_ErrAchievementMustGainInOrder AchievementErrorCode = 3
)

var AchievementErrorCode_name = map[int32]string{
	0: "ErrAchievementNotExist",
	1: "ErrAchievementNotFinished",
	2: "ErrAchievementAlreadyCollect",
	3: "ErrAchievementMustGainInOrder",
}

var AchievementErrorCode_value = map[string]int32{
	"ErrAchievementNotExist":        0,
	"ErrAchievementNotFinished":     1,
	"ErrAchievementAlreadyCollect":  2,
	"ErrAchievementMustGainInOrder": 3,
}

func (AchievementErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{1}
}

type Achievement struct {
}

func (m *Achievement) Reset()      { *m = Achievement{} }
func (*Achievement) ProtoMessage() {}
func (*Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0}
}
func (m *Achievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement.Merge(m, src)
}
func (m *Achievement) XXX_Size() int {
	return m.Size()
}
func (m *Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement proto.InternalMessageInfo

func (*Achievement) XXX_MessageName() string {
	return "service.Achievement"
}

// 修改用户成就counter
type Achievement_AddOrSetCounterRequest struct {
	RoleId        string   `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	AchievementId int64    `protobuf:"varint,2,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	Cnt           int64    `protobuf:"varint,3,opt,name=cnt,proto3" json:"cnt,omitempty"`
	CountTyp      CountTyp `protobuf:"varint,4,opt,name=count_typ,json=countTyp,proto3,enum=service.CountTyp" json:"count_typ,omitempty"`
}

func (m *Achievement_AddOrSetCounterRequest) Reset()      { *m = Achievement_AddOrSetCounterRequest{} }
func (*Achievement_AddOrSetCounterRequest) ProtoMessage() {}
func (*Achievement_AddOrSetCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 0}
}
func (m *Achievement_AddOrSetCounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_AddOrSetCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_AddOrSetCounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_AddOrSetCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_AddOrSetCounterRequest.Merge(m, src)
}
func (m *Achievement_AddOrSetCounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_AddOrSetCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_AddOrSetCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_AddOrSetCounterRequest proto.InternalMessageInfo

func (m *Achievement_AddOrSetCounterRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Achievement_AddOrSetCounterRequest) GetAchievementId() int64 {
	if m != nil {
		return m.AchievementId
	}
	return 0
}

func (m *Achievement_AddOrSetCounterRequest) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (m *Achievement_AddOrSetCounterRequest) GetCountTyp() CountTyp {
	if m != nil {
		return m.CountTyp
	}
	return CountTyp_CTAdd
}

func (*Achievement_AddOrSetCounterRequest) XXX_MessageName() string {
	return "service.Achievement.AddOrSetCounterRequest"
}

type Achievement_AddOrSetCounterResponse struct {
}

func (m *Achievement_AddOrSetCounterResponse) Reset()      { *m = Achievement_AddOrSetCounterResponse{} }
func (*Achievement_AddOrSetCounterResponse) ProtoMessage() {}
func (*Achievement_AddOrSetCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 1}
}
func (m *Achievement_AddOrSetCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_AddOrSetCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_AddOrSetCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_AddOrSetCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_AddOrSetCounterResponse.Merge(m, src)
}
func (m *Achievement_AddOrSetCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_AddOrSetCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_AddOrSetCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_AddOrSetCounterResponse proto.InternalMessageInfo

func (*Achievement_AddOrSetCounterResponse) XXX_MessageName() string {
	return "service.Achievement.AddOrSetCounterResponse"
}

type Achievement_GetAchievementListRequest struct {
}

func (m *Achievement_GetAchievementListRequest) Reset()      { *m = Achievement_GetAchievementListRequest{} }
func (*Achievement_GetAchievementListRequest) ProtoMessage() {}
func (*Achievement_GetAchievementListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 2}
}
func (m *Achievement_GetAchievementListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_GetAchievementListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_GetAchievementListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_GetAchievementListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_GetAchievementListRequest.Merge(m, src)
}
func (m *Achievement_GetAchievementListRequest) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_GetAchievementListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_GetAchievementListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_GetAchievementListRequest proto.InternalMessageInfo

func (*Achievement_GetAchievementListRequest) XXX_MessageName() string {
	return "service.Achievement.GetAchievementListRequest"
}

type Achievement_GetAchievementListResponse struct {
	List  []*models.AchievementView `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Point int64                     `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (m *Achievement_GetAchievementListResponse) Reset() {
	*m = Achievement_GetAchievementListResponse{}
}
func (*Achievement_GetAchievementListResponse) ProtoMessage() {}
func (*Achievement_GetAchievementListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 3}
}
func (m *Achievement_GetAchievementListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_GetAchievementListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_GetAchievementListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_GetAchievementListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_GetAchievementListResponse.Merge(m, src)
}
func (m *Achievement_GetAchievementListResponse) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_GetAchievementListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_GetAchievementListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_GetAchievementListResponse proto.InternalMessageInfo

func (m *Achievement_GetAchievementListResponse) GetList() []*models.AchievementView {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *Achievement_GetAchievementListResponse) GetPoint() int64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (*Achievement_GetAchievementListResponse) XXX_MessageName() string {
	return "service.Achievement.GetAchievementListResponse"
}

type Achievement_GetAchievementDetailRequest struct {
	AchievementId int64 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
}

func (m *Achievement_GetAchievementDetailRequest) Reset() {
	*m = Achievement_GetAchievementDetailRequest{}
}
func (*Achievement_GetAchievementDetailRequest) ProtoMessage() {}
func (*Achievement_GetAchievementDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 4}
}
func (m *Achievement_GetAchievementDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_GetAchievementDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_GetAchievementDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_GetAchievementDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_GetAchievementDetailRequest.Merge(m, src)
}
func (m *Achievement_GetAchievementDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_GetAchievementDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_GetAchievementDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_GetAchievementDetailRequest proto.InternalMessageInfo

func (m *Achievement_GetAchievementDetailRequest) GetAchievementId() int64 {
	if m != nil {
		return m.AchievementId
	}
	return 0
}

func (*Achievement_GetAchievementDetailRequest) XXX_MessageName() string {
	return "service.Achievement.GetAchievementDetailRequest"
}

type Achievement_GetAchievementDetailResponse struct {
	Info *models.AchievementView `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Achievement_GetAchievementDetailResponse) Reset() {
	*m = Achievement_GetAchievementDetailResponse{}
}
func (*Achievement_GetAchievementDetailResponse) ProtoMessage() {}
func (*Achievement_GetAchievementDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 5}
}
func (m *Achievement_GetAchievementDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_GetAchievementDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_GetAchievementDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_GetAchievementDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_GetAchievementDetailResponse.Merge(m, src)
}
func (m *Achievement_GetAchievementDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_GetAchievementDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_GetAchievementDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_GetAchievementDetailResponse proto.InternalMessageInfo

func (m *Achievement_GetAchievementDetailResponse) GetInfo() *models.AchievementView {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*Achievement_GetAchievementDetailResponse) XXX_MessageName() string {
	return "service.Achievement.GetAchievementDetailResponse"
}

type Achievement_CollectRequest struct {
	AchievementId int64 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	Gear          int64 `protobuf:"varint,2,opt,name=gear,proto3" json:"gear,omitempty"`
}

func (m *Achievement_CollectRequest) Reset()      { *m = Achievement_CollectRequest{} }
func (*Achievement_CollectRequest) ProtoMessage() {}
func (*Achievement_CollectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 6}
}
func (m *Achievement_CollectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_CollectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_CollectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_CollectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_CollectRequest.Merge(m, src)
}
func (m *Achievement_CollectRequest) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_CollectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_CollectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_CollectRequest proto.InternalMessageInfo

func (m *Achievement_CollectRequest) GetAchievementId() int64 {
	if m != nil {
		return m.AchievementId
	}
	return 0
}

func (m *Achievement_CollectRequest) GetGear() int64 {
	if m != nil {
		return m.Gear
	}
	return 0
}

func (*Achievement_CollectRequest) XXX_MessageName() string {
	return "service.Achievement.CollectRequest"
}

type Achievement_CollectResponse struct {
	Items    []*models.Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	CurrGear int64          `protobuf:"varint,2,opt,name=curr_gear,json=currGear,proto3" json:"curr_gear,omitempty"`
}

func (m *Achievement_CollectResponse) Reset()      { *m = Achievement_CollectResponse{} }
func (*Achievement_CollectResponse) ProtoMessage() {}
func (*Achievement_CollectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 7}
}
func (m *Achievement_CollectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_CollectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_CollectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_CollectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_CollectResponse.Merge(m, src)
}
func (m *Achievement_CollectResponse) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_CollectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_CollectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_CollectResponse proto.InternalMessageInfo

func (m *Achievement_CollectResponse) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Achievement_CollectResponse) GetCurrGear() int64 {
	if m != nil {
		return m.CurrGear
	}
	return 0
}

func (*Achievement_CollectResponse) XXX_MessageName() string {
	return "service.Achievement.CollectResponse"
}

//----------------------push----------------------//
type Achievement_DonePush struct {
	Info *models.AchievementView `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Achievement_DonePush) Reset()      { *m = Achievement_DonePush{} }
func (*Achievement_DonePush) ProtoMessage() {}
func (*Achievement_DonePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 8}
}
func (m *Achievement_DonePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_DonePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_DonePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_DonePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_DonePush.Merge(m, src)
}
func (m *Achievement_DonePush) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_DonePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_DonePush.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_DonePush proto.InternalMessageInfo

func (m *Achievement_DonePush) GetInfo() *models.AchievementView {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*Achievement_DonePush) XXX_MessageName() string {
	return "service.Achievement.DonePush"
}

//----------------------cheat----------------------//
type Achievement_CheatAddCounterResponse struct {
}

func (m *Achievement_CheatAddCounterResponse) Reset()      { *m = Achievement_CheatAddCounterResponse{} }
func (*Achievement_CheatAddCounterResponse) ProtoMessage() {}
func (*Achievement_CheatAddCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc242b2c2f9c35c, []int{0, 9}
}
func (m *Achievement_CheatAddCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement_CheatAddCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement_CheatAddCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement_CheatAddCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement_CheatAddCounterResponse.Merge(m, src)
}
func (m *Achievement_CheatAddCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *Achievement_CheatAddCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement_CheatAddCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement_CheatAddCounterResponse proto.InternalMessageInfo

func (*Achievement_CheatAddCounterResponse) XXX_MessageName() string {
	return "service.Achievement.CheatAddCounterResponse"
}
func init() {
	proto.RegisterEnum("service.CountTyp", CountTyp_name, CountTyp_value)
	proto.RegisterEnum("service.AchievementErrorCode", AchievementErrorCode_name, AchievementErrorCode_value)
	proto.RegisterType((*Achievement)(nil), "service.Achievement")
	proto.RegisterType((*Achievement_AddOrSetCounterRequest)(nil), "service.Achievement.AddOrSetCounterRequest")
	proto.RegisterType((*Achievement_AddOrSetCounterResponse)(nil), "service.Achievement.AddOrSetCounterResponse")
	proto.RegisterType((*Achievement_GetAchievementListRequest)(nil), "service.Achievement.GetAchievementListRequest")
	proto.RegisterType((*Achievement_GetAchievementListResponse)(nil), "service.Achievement.GetAchievementListResponse")
	proto.RegisterType((*Achievement_GetAchievementDetailRequest)(nil), "service.Achievement.GetAchievementDetailRequest")
	proto.RegisterType((*Achievement_GetAchievementDetailResponse)(nil), "service.Achievement.GetAchievementDetailResponse")
	proto.RegisterType((*Achievement_CollectRequest)(nil), "service.Achievement.CollectRequest")
	proto.RegisterType((*Achievement_CollectResponse)(nil), "service.Achievement.CollectResponse")
	proto.RegisterType((*Achievement_DonePush)(nil), "service.Achievement.DonePush")
	proto.RegisterType((*Achievement_CheatAddCounterResponse)(nil), "service.Achievement.CheatAddCounterResponse")
}

func init() { proto.RegisterFile("proto/service/achievement.proto", fileDescriptor_5fc242b2c2f9c35c) }

var fileDescriptor_5fc242b2c2f9c35c = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x4f, 0x13, 0x5d,
	0x14, 0xed, 0xa3, 0x14, 0xda, 0xcb, 0xf7, 0x41, 0x79, 0xe1, 0xa3, 0xed, 0x14, 0xe6, 0xab, 0x24,
	0x26, 0x0d, 0xc6, 0x36, 0xa2, 0x09, 0xeb, 0xda, 0x22, 0x69, 0x50, 0x30, 0x85, 0xb8, 0x70, 0xd3,
	0x94, 0x99, 0x2b, 0x7d, 0x49, 0x3b, 0xaf, 0xbe, 0x79, 0x45, 0xf9, 0x01, 0x1a, 0x24, 0x18, 0x58,
	0x19, 0x63, 0xd8, 0xe0, 0x8a, 0x98, 0x68, 0xd4, 0x84, 0x68, 0x70, 0xe1, 0x96, 0xc4, 0x0d, 0x4b,
	0x96, 0xda, 0xda, 0x46, 0x76, 0xfe, 0x02, 0x63, 0xa6, 0x33, 0x48, 0x87, 0x12, 0x13, 0x76, 0xf7,
	0xbd, 0x73, 0xcf, 0xb9, 0xe7, 0x9e, 0xbc, 0x19, 0xf8, 0xbf, 0x22, 0xb8, 0xe4, 0x49, 0x13, 0xc5,
	0x32, 0xd3, 0x30, 0x59, 0xd0, 0x8a, 0x0c, 0x97, 0xb1, 0x8c, 0x86, 0x4c, 0xb4, 0x10, 0xda, 0xeb,
	0x40, 0x8a, 0x6a, 0x77, 0x96, 0xb9, 0x8e, 0x25, 0xb3, 0xb3, 0x51, 0x09, 0xb9, 0xf0, 0xc5, 0x82,
	0x89, 0x0e, 0x30, 0x7c, 0x0a, 0x58, 0xb2, 0xef, 0xc7, 0xbe, 0xf8, 0xa0, 0x2f, 0x75, 0x22, 0xa3,
	0xbc, 0x20, 0x30, 0x9c, 0xd2, 0xf5, 0x39, 0x31, 0x8f, 0x32, 0xcd, 0xab, 0x86, 0x44, 0x91, 0xc3,
	0xfb, 0x55, 0x34, 0x25, 0x0d, 0x41, 0xaf, 0xe0, 0x25, 0xcc, 0x33, 0x3d, 0x4c, 0x62, 0x24, 0x1e,
	0xc8, 0xf5, 0x58, 0xc7, 0xac, 0x4e, 0x2f, 0x42, 0x7f, 0x9b, 0x13, 0x0b, 0xef, 0x8a, 0x91, 0xb8,
	0x37, 0xf7, 0x6f, 0xdb, 0x6d, 0x56, 0xa7, 0x41, 0xf0, 0x6a, 0x86, 0x0c, 0x7b, 0x5b, 0x98, 0x55,
	0xd2, 0x04, 0x04, 0x34, 0x6b, 0x46, 0x5e, 0xae, 0x54, 0xc2, 0xdd, 0x31, 0x12, 0xef, 0x9f, 0x18,
	0x4c, 0x38, 0xab, 0x26, 0x5a, 0xd3, 0x17, 0x56, 0x2a, 0x39, 0xbf, 0xe6, 0x54, 0x4a, 0x04, 0x42,
	0x1d, 0xde, 0xcc, 0x0a, 0x37, 0x4c, 0x54, 0xa2, 0x10, 0x99, 0x46, 0xd9, 0xb6, 0xc9, 0x4d, 0x66,
	0x4a, 0xc7, 0xb9, 0x92, 0x07, 0xe5, 0x2c, 0xd0, 0xa6, 0xd2, 0x4b, 0xd0, 0x5d, 0x62, 0xa6, 0x0c,
	0x93, 0x98, 0x37, 0xde, 0x37, 0x11, 0x4a, 0xd8, 0x19, 0x25, 0xda, 0xda, 0xef, 0x30, 0x7c, 0x90,
	0x6b, 0x35, 0xd1, 0x21, 0xf0, 0x55, 0x38, 0x33, 0xa4, 0xb3, 0xa2, 0x7d, 0x50, 0x32, 0x10, 0x75,
	0x0f, 0xc8, 0xa0, 0x2c, 0xb0, 0xd2, 0x71, 0x72, 0x9d, 0x01, 0x91, 0x33, 0x02, 0x52, 0x66, 0x60,
	0xe4, 0x6c, 0x95, 0x13, 0xa3, 0xcc, 0xb8, 0xc7, 0x5b, 0xe4, 0xbf, 0x19, 0xb5, 0x9a, 0x94, 0x19,
	0xe8, 0x4f, 0xf3, 0x52, 0x09, 0x35, 0x79, 0x3e, 0x17, 0x94, 0x42, 0xf7, 0x12, 0x16, 0x84, 0xb3,
	0x60, 0xab, 0x56, 0x72, 0x30, 0xf0, 0x47, 0xcc, 0x31, 0x33, 0x06, 0x3e, 0x26, 0xb1, 0x6c, 0x3a,
	0xb1, 0xfd, 0x73, 0xec, 0x26, 0x2b, 0xb1, 0x9c, 0xb3, 0x21, 0x1a, 0x85, 0x80, 0x56, 0x15, 0x22,
	0xdf, 0xa6, 0xe7, 0xb7, 0x2e, 0xa6, 0x2d, 0xcd, 0x49, 0xf0, 0x67, 0xb8, 0x81, 0xb7, 0xab, 0x66,
	0xf1, 0x7c, 0x9b, 0x45, 0x20, 0x94, 0x2e, 0x62, 0x41, 0xa6, 0x74, 0xfd, 0xd4, 0x2b, 0x18, 0x8f,
	0x81, 0xff, 0xf8, 0xd9, 0xd0, 0x00, 0xf8, 0xd2, 0x0b, 0x29, 0x5d, 0x0f, 0x7a, 0xec, 0x72, 0x1e,
	0x65, 0x90, 0x8c, 0xff, 0x22, 0x30, 0xd4, 0x26, 0x3b, 0x25, 0x04, 0x17, 0x69, 0xae, 0x23, 0xbd,
	0x02, 0xc3, 0x53, 0x42, 0xb4, 0x41, 0xb3, 0x5c, 0x4e, 0x3d, 0x64, 0xa6, 0x0c, 0x7a, 0x94, 0xff,
	0xd6, 0x76, 0xc3, 0x83, 0x74, 0xa0, 0xb9, 0xba, 0xd9, 0x78, 0xfb, 0xee, 0xfb, 0xc7, 0xa7, 0x8d,
	0xd7, 0xcf, 0x1b, 0x5b, 0x3b, 0xf4, 0x1a, 0x44, 0x3a, 0x28, 0x37, 0x98, 0xc1, 0xcc, 0x22, 0xea,
	0x41, 0xe2, 0x66, 0x35, 0xb7, 0x5e, 0x35, 0xde, 0xac, 0x37, 0x57, 0x37, 0xe9, 0x24, 0x8c, 0xb8,
	0x59, 0xa9, 0x92, 0xc0, 0x82, 0xbe, 0xe2, 0x04, 0x1c, 0xec, 0x72, 0x13, 0x1b, 0x1f, 0xde, 0x1f,
	0xbd, 0x7c, 0xdc, 0xd8, 0x78, 0x46, 0x33, 0x30, 0xea, 0x26, 0xde, 0xaa, 0x9a, 0x72, 0xba, 0xc0,
	0x8c, 0xac, 0x31, 0x27, 0x74, 0x14, 0x41, 0xaf, 0x72, 0x61, 0x6d, 0x37, 0x3c, 0x4a, 0xa3, 0x0e,
	0xf3, 0xf3, 0xa3, 0xa3, 0xed, 0x4f, 0xcd, 0xf5, 0x27, 0x47, 0xdb, 0x7b, 0x8d, 0xbd, 0x0d, 0x5b,
	0xe5, 0xfa, 0xec, 0xe1, 0x37, 0xd5, 0xb3, 0x53, 0x53, 0xc9, 0x7e, 0x4d, 0x25, 0x07, 0x35, 0x95,
	0x7c, 0xad, 0xa9, 0xe4, 0x47, 0x4d, 0xf5, 0xfc, 0xac, 0xa9, 0x64, 0xb3, 0xae, 0x7a, 0xf6, 0xeb,
	0x2a, 0x39, 0xa8, 0xab, 0x9e, 0xc3, 0xba, 0xea, 0xb9, 0x1b, 0xd3, 0x38, 0x33, 0x2e, 0x5b, 0x9f,
	0x24, 0x8a, 0xa4, 0xc6, 0xcb, 0x65, 0x6e, 0x24, 0x5d, 0x3f, 0xab, 0xc5, 0x9e, 0xd6, 0xf1, 0xea,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xbd, 0x0a, 0xab, 0xc4, 0x04, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_AddOrSetCounterRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_AddOrSetCounterResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_GetAchievementListRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_GetAchievementListResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_GetAchievementDetailRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_GetAchievementDetailResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_CollectRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_CollectResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_DonePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement_CheatAddCounterResponse.Get().(proto.Message)
	})
}

var poolAchievement = &sync.Pool{New: func() interface{} { return &Achievement{} }}

func (m *Achievement) ReleasePool() { m.Reset(); poolAchievement.Put(m); m = nil }

var poolAchievement_AddOrSetCounterRequest = &sync.Pool{New: func() interface{} { return &Achievement_AddOrSetCounterRequest{} }}

func (m *Achievement_AddOrSetCounterRequest) ReleasePool() {
	m.Reset()
	poolAchievement_AddOrSetCounterRequest.Put(m)
	m = nil
}

var poolAchievement_AddOrSetCounterResponse = &sync.Pool{New: func() interface{} { return &Achievement_AddOrSetCounterResponse{} }}

func (m *Achievement_AddOrSetCounterResponse) ReleasePool() {
	m.Reset()
	poolAchievement_AddOrSetCounterResponse.Put(m)
	m = nil
}

var poolAchievement_GetAchievementListRequest = &sync.Pool{New: func() interface{} { return &Achievement_GetAchievementListRequest{} }}

func (m *Achievement_GetAchievementListRequest) ReleasePool() {
	m.Reset()
	poolAchievement_GetAchievementListRequest.Put(m)
	m = nil
}

var poolAchievement_GetAchievementListResponse = &sync.Pool{New: func() interface{} { return &Achievement_GetAchievementListResponse{} }}

func (m *Achievement_GetAchievementListResponse) ReleasePool() {
	m.Reset()
	poolAchievement_GetAchievementListResponse.Put(m)
	m = nil
}

var poolAchievement_GetAchievementDetailRequest = &sync.Pool{New: func() interface{} { return &Achievement_GetAchievementDetailRequest{} }}

func (m *Achievement_GetAchievementDetailRequest) ReleasePool() {
	m.Reset()
	poolAchievement_GetAchievementDetailRequest.Put(m)
	m = nil
}

var poolAchievement_GetAchievementDetailResponse = &sync.Pool{New: func() interface{} { return &Achievement_GetAchievementDetailResponse{} }}

func (m *Achievement_GetAchievementDetailResponse) ReleasePool() {
	m.Reset()
	poolAchievement_GetAchievementDetailResponse.Put(m)
	m = nil
}

var poolAchievement_CollectRequest = &sync.Pool{New: func() interface{} { return &Achievement_CollectRequest{} }}

func (m *Achievement_CollectRequest) ReleasePool() {
	m.Reset()
	poolAchievement_CollectRequest.Put(m)
	m = nil
}

var poolAchievement_CollectResponse = &sync.Pool{New: func() interface{} { return &Achievement_CollectResponse{} }}

func (m *Achievement_CollectResponse) ReleasePool() {
	m.Reset()
	poolAchievement_CollectResponse.Put(m)
	m = nil
}

var poolAchievement_DonePush = &sync.Pool{New: func() interface{} { return &Achievement_DonePush{} }}

func (m *Achievement_DonePush) ReleasePool() { m.Reset(); poolAchievement_DonePush.Put(m); m = nil }

var poolAchievement_CheatAddCounterResponse = &sync.Pool{New: func() interface{} { return &Achievement_CheatAddCounterResponse{} }}

func (m *Achievement_CheatAddCounterResponse) ReleasePool() {
	m.Reset()
	poolAchievement_CheatAddCounterResponse.Put(m)
	m = nil
}
func (x CountTyp) String() string {
	s, ok := CountTyp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AchievementErrorCode) String() string {
	s, ok := AchievementErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Achievement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement)
	if !ok {
		that2, ok := that.(Achievement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Achievement_AddOrSetCounterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_AddOrSetCounterRequest)
	if !ok {
		that2, ok := that.(Achievement_AddOrSetCounterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.AchievementId != that1.AchievementId {
		return false
	}
	if this.Cnt != that1.Cnt {
		return false
	}
	if this.CountTyp != that1.CountTyp {
		return false
	}
	return true
}
func (this *Achievement_AddOrSetCounterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_AddOrSetCounterResponse)
	if !ok {
		that2, ok := that.(Achievement_AddOrSetCounterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Achievement_GetAchievementListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_GetAchievementListRequest)
	if !ok {
		that2, ok := that.(Achievement_GetAchievementListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Achievement_GetAchievementListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_GetAchievementListResponse)
	if !ok {
		that2, ok := that.(Achievement_GetAchievementListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Point != that1.Point {
		return false
	}
	return true
}
func (this *Achievement_GetAchievementDetailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_GetAchievementDetailRequest)
	if !ok {
		that2, ok := that.(Achievement_GetAchievementDetailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AchievementId != that1.AchievementId {
		return false
	}
	return true
}
func (this *Achievement_GetAchievementDetailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_GetAchievementDetailResponse)
	if !ok {
		that2, ok := that.(Achievement_GetAchievementDetailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *Achievement_CollectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_CollectRequest)
	if !ok {
		that2, ok := that.(Achievement_CollectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AchievementId != that1.AchievementId {
		return false
	}
	if this.Gear != that1.Gear {
		return false
	}
	return true
}
func (this *Achievement_CollectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_CollectResponse)
	if !ok {
		that2, ok := that.(Achievement_CollectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if this.CurrGear != that1.CurrGear {
		return false
	}
	return true
}
func (this *Achievement_DonePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_DonePush)
	if !ok {
		that2, ok := that.(Achievement_DonePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *Achievement_CheatAddCounterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement_CheatAddCounterResponse)
	if !ok {
		that2, ok := that.(Achievement_CheatAddCounterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Achievement_AddOrSetCounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_AddOrSetCounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_AddOrSetCounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CountTyp != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.CountTyp))
		i--
		dAtA[i] = 0x20
	}
	if m.Cnt != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.Cnt))
		i--
		dAtA[i] = 0x18
	}
	if m.AchievementId != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.AchievementId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintAchievement(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Achievement_AddOrSetCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_AddOrSetCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_AddOrSetCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Achievement_GetAchievementListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_GetAchievementListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_GetAchievementListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Achievement_GetAchievementListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_GetAchievementListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_GetAchievementListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Point != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAchievement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Achievement_GetAchievementDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_GetAchievementDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_GetAchievementDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AchievementId != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.AchievementId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Achievement_GetAchievementDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_GetAchievementDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_GetAchievementDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAchievement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Achievement_CollectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_CollectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_CollectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gear != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.Gear))
		i--
		dAtA[i] = 0x10
	}
	if m.AchievementId != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.AchievementId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Achievement_CollectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_CollectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_CollectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrGear != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.CurrGear))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAchievement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Achievement_DonePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_DonePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_DonePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAchievement(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Achievement_CheatAddCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement_CheatAddCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement_CheatAddCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintAchievement(dAtA []byte, offset int, v uint64) int {
	offset -= sovAchievement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Achievement) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Achievement_AddOrSetCounterRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.AchievementId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("achievement_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AchievementId))
		needWriteComma = true
	}
	if m.Cnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cnt))
		needWriteComma = true
	}
	if m.CountTyp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count_typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CountTyp))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Achievement_AddOrSetCounterResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Achievement_GetAchievementListRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Achievement_GetAchievementListResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("list")
	w.RawByte('"')
	w.RawByte(':')
	if m.List == nil {
		w.RawString("null")
	} else if len(m.List) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.List {
			v.JsonBytes(w)
			if i != len(m.List)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Point != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("point")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Point))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Achievement_GetAchievementDetailRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AchievementId != 0 {
		w.RawByte('"')
		w.RawString("achievement_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AchievementId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Achievement_GetAchievementDetailResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Achievement_CollectRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AchievementId != 0 {
		w.RawByte('"')
		w.RawString("achievement_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AchievementId))
		needWriteComma = true
	}
	if m.Gear != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("gear")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Gear))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Achievement_CollectResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.CurrGear != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("curr_gear")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurrGear))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Achievement_DonePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Achievement_CheatAddCounterResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Achievement) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement) GoString() string {
	return m.String()
}

func (m *Achievement_AddOrSetCounterRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_AddOrSetCounterRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_AddOrSetCounterRequest) GoString() string {
	return m.String()
}

func (m *Achievement_AddOrSetCounterResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_AddOrSetCounterResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_AddOrSetCounterResponse) GoString() string {
	return m.String()
}

func (m *Achievement_GetAchievementListRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_GetAchievementListRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_GetAchievementListRequest) GoString() string {
	return m.String()
}

func (m *Achievement_GetAchievementListResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_GetAchievementListResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_GetAchievementListResponse) GoString() string {
	return m.String()
}

func (m *Achievement_GetAchievementDetailRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_GetAchievementDetailRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_GetAchievementDetailRequest) GoString() string {
	return m.String()
}

func (m *Achievement_GetAchievementDetailResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_GetAchievementDetailResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_GetAchievementDetailResponse) GoString() string {
	return m.String()
}

func (m *Achievement_CollectRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_CollectRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_CollectRequest) GoString() string {
	return m.String()
}

func (m *Achievement_CollectResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_CollectResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_CollectResponse) GoString() string {
	return m.String()
}

func (m *Achievement_DonePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_DonePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_DonePush) GoString() string {
	return m.String()
}

func (m *Achievement_CheatAddCounterResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement_CheatAddCounterResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement_CheatAddCounterResponse) GoString() string {
	return m.String()
}

func (m *Achievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Achievement_AddOrSetCounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovAchievement(uint64(l))
	}
	if m.AchievementId != 0 {
		n += 1 + sovAchievement(uint64(m.AchievementId))
	}
	if m.Cnt != 0 {
		n += 1 + sovAchievement(uint64(m.Cnt))
	}
	if m.CountTyp != 0 {
		n += 1 + sovAchievement(uint64(m.CountTyp))
	}
	return n
}

func (m *Achievement_AddOrSetCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Achievement_GetAchievementListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Achievement_GetAchievementListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovAchievement(uint64(l))
		}
	}
	if m.Point != 0 {
		n += 1 + sovAchievement(uint64(m.Point))
	}
	return n
}

func (m *Achievement_GetAchievementDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AchievementId != 0 {
		n += 1 + sovAchievement(uint64(m.AchievementId))
	}
	return n
}

func (m *Achievement_GetAchievementDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovAchievement(uint64(l))
	}
	return n
}

func (m *Achievement_CollectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AchievementId != 0 {
		n += 1 + sovAchievement(uint64(m.AchievementId))
	}
	if m.Gear != 0 {
		n += 1 + sovAchievement(uint64(m.Gear))
	}
	return n
}

func (m *Achievement_CollectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAchievement(uint64(l))
		}
	}
	if m.CurrGear != 0 {
		n += 1 + sovAchievement(uint64(m.CurrGear))
	}
	return n
}

func (m *Achievement_DonePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovAchievement(uint64(l))
	}
	return n
}

func (m *Achievement_CheatAddCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovAchievement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAchievement(x uint64) (n int) {
	return sovAchievement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_AddOrSetCounterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOrSetCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOrSetCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementId", wireType)
			}
			m.AchievementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountTyp", wireType)
			}
			m.CountTyp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountTyp |= CountTyp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_AddOrSetCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddOrSetCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddOrSetCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_GetAchievementListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_GetAchievementListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &models.AchievementView{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_GetAchievementDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementId", wireType)
			}
			m.AchievementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_GetAchievementDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAchievementDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAchievementDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.AchievementView{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_CollectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchievementId", wireType)
			}
			m.AchievementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchievementId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gear", wireType)
			}
			m.Gear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_CollectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrGear", wireType)
			}
			m.CurrGear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrGear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_DonePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DonePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DonePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.AchievementView{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement_CheatAddCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAchievement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAchievement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAchievement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAchievement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAchievement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAchievement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAchievement = fmt.Errorf("proto: unexpected end of group")
)
