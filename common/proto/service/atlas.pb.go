// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/atlas.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AtlasErrorCode int32

const (
	AtlasErrorCode_ErrAtlasAlreadyUnlock AtlasErrorCode = 0
	AtlasErrorCode_ErrAtlasNotExist      AtlasErrorCode = 1
)

var AtlasErrorCode_name = map[int32]string{
	0: "ErrAtlasAlreadyUnlock",
	1: "ErrAtlasNotExist",
}

var AtlasErrorCode_value = map[string]int32{
	"ErrAtlasAlreadyUnlock": 0,
	"ErrAtlasNotExist":      1,
}

func (AtlasErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e82d94380ea7462, []int{0}
}

type Atlas struct {
}

func (m *Atlas) Reset()      { *m = Atlas{} }
func (*Atlas) ProtoMessage() {}
func (*Atlas) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e82d94380ea7462, []int{0}
}
func (m *Atlas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Atlas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Atlas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Atlas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Atlas.Merge(m, src)
}
func (m *Atlas) XXX_Size() int {
	return m.Size()
}
func (m *Atlas) XXX_DiscardUnknown() {
	xxx_messageInfo_Atlas.DiscardUnknown(m)
}

var xxx_messageInfo_Atlas proto.InternalMessageInfo

func (*Atlas) XXX_MessageName() string {
	return "service.Atlas"
}

type Atlas_GetAtlasRequest struct {
}

func (m *Atlas_GetAtlasRequest) Reset()      { *m = Atlas_GetAtlasRequest{} }
func (*Atlas_GetAtlasRequest) ProtoMessage() {}
func (*Atlas_GetAtlasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e82d94380ea7462, []int{0, 0}
}
func (m *Atlas_GetAtlasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Atlas_GetAtlasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Atlas_GetAtlasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Atlas_GetAtlasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Atlas_GetAtlasRequest.Merge(m, src)
}
func (m *Atlas_GetAtlasRequest) XXX_Size() int {
	return m.Size()
}
func (m *Atlas_GetAtlasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Atlas_GetAtlasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Atlas_GetAtlasRequest proto.InternalMessageInfo

func (*Atlas_GetAtlasRequest) XXX_MessageName() string {
	return "service.Atlas.GetAtlasRequest"
}

type Atlas_GetAtlasResponse struct {
	Atlas []*models.Atlas `protobuf:"bytes,1,rep,name=atlas,proto3" json:"atlas,omitempty"`
}

func (m *Atlas_GetAtlasResponse) Reset()      { *m = Atlas_GetAtlasResponse{} }
func (*Atlas_GetAtlasResponse) ProtoMessage() {}
func (*Atlas_GetAtlasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e82d94380ea7462, []int{0, 1}
}
func (m *Atlas_GetAtlasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Atlas_GetAtlasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Atlas_GetAtlasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Atlas_GetAtlasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Atlas_GetAtlasResponse.Merge(m, src)
}
func (m *Atlas_GetAtlasResponse) XXX_Size() int {
	return m.Size()
}
func (m *Atlas_GetAtlasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Atlas_GetAtlasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Atlas_GetAtlasResponse proto.InternalMessageInfo

func (m *Atlas_GetAtlasResponse) GetAtlas() []*models.Atlas {
	if m != nil {
		return m.Atlas
	}
	return nil
}

func (*Atlas_GetAtlasResponse) XXX_MessageName() string {
	return "service.Atlas.GetAtlasResponse"
}

type Atlas_UnlockAtlasRequest struct {
	Typ models.AtlasType `protobuf:"varint,1,opt,name=typ,proto3,enum=models.AtlasType" json:"typ,omitempty"`
	Id  int64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Atlas_UnlockAtlasRequest) Reset()      { *m = Atlas_UnlockAtlasRequest{} }
func (*Atlas_UnlockAtlasRequest) ProtoMessage() {}
func (*Atlas_UnlockAtlasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e82d94380ea7462, []int{0, 2}
}
func (m *Atlas_UnlockAtlasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Atlas_UnlockAtlasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Atlas_UnlockAtlasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Atlas_UnlockAtlasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Atlas_UnlockAtlasRequest.Merge(m, src)
}
func (m *Atlas_UnlockAtlasRequest) XXX_Size() int {
	return m.Size()
}
func (m *Atlas_UnlockAtlasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Atlas_UnlockAtlasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Atlas_UnlockAtlasRequest proto.InternalMessageInfo

func (m *Atlas_UnlockAtlasRequest) GetTyp() models.AtlasType {
	if m != nil {
		return m.Typ
	}
	return models.AtlasType_EquipAtlas
}

func (m *Atlas_UnlockAtlasRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (*Atlas_UnlockAtlasRequest) XXX_MessageName() string {
	return "service.Atlas.UnlockAtlasRequest"
}

type Atlas_UnlockAtlasResponse struct {
	Typ    models.AtlasType    `protobuf:"varint,1,opt,name=typ,proto3,enum=models.AtlasType" json:"typ,omitempty"`
	Id     int64               `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Status models.RewardStatus `protobuf:"varint,3,opt,name=status,proto3,enum=models.RewardStatus" json:"status,omitempty"`
	Reward map[int64]int64     `protobuf:"bytes,4,rep,name=reward,proto3" json:"reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Atlas_UnlockAtlasResponse) Reset()      { *m = Atlas_UnlockAtlasResponse{} }
func (*Atlas_UnlockAtlasResponse) ProtoMessage() {}
func (*Atlas_UnlockAtlasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e82d94380ea7462, []int{0, 3}
}
func (m *Atlas_UnlockAtlasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Atlas_UnlockAtlasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Atlas_UnlockAtlasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Atlas_UnlockAtlasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Atlas_UnlockAtlasResponse.Merge(m, src)
}
func (m *Atlas_UnlockAtlasResponse) XXX_Size() int {
	return m.Size()
}
func (m *Atlas_UnlockAtlasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Atlas_UnlockAtlasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Atlas_UnlockAtlasResponse proto.InternalMessageInfo

func (m *Atlas_UnlockAtlasResponse) GetTyp() models.AtlasType {
	if m != nil {
		return m.Typ
	}
	return models.AtlasType_EquipAtlas
}

func (m *Atlas_UnlockAtlasResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Atlas_UnlockAtlasResponse) GetStatus() models.RewardStatus {
	if m != nil {
		return m.Status
	}
	return models.RewardStatus_Locked
}

func (m *Atlas_UnlockAtlasResponse) GetReward() map[int64]int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (*Atlas_UnlockAtlasResponse) XXX_MessageName() string {
	return "service.Atlas.UnlockAtlasResponse"
}
func init() {
	proto.RegisterEnum("service.AtlasErrorCode", AtlasErrorCode_name, AtlasErrorCode_value)
	proto.RegisterType((*Atlas)(nil), "service.Atlas")
	proto.RegisterType((*Atlas_GetAtlasRequest)(nil), "service.Atlas.GetAtlasRequest")
	proto.RegisterType((*Atlas_GetAtlasResponse)(nil), "service.Atlas.GetAtlasResponse")
	proto.RegisterType((*Atlas_UnlockAtlasRequest)(nil), "service.Atlas.UnlockAtlasRequest")
	proto.RegisterType((*Atlas_UnlockAtlasResponse)(nil), "service.Atlas.UnlockAtlasResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Atlas.UnlockAtlasResponse.RewardEntry")
}

func init() { proto.RegisterFile("proto/service/atlas.proto", fileDescriptor_7e82d94380ea7462) }

var fileDescriptor_7e82d94380ea7462 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x3d, 0x6c, 0xd3, 0x40,
	0x14, 0xf6, 0xc5, 0x24, 0x48, 0xaf, 0x22, 0x75, 0x8e, 0x54, 0x1c, 0x37, 0x9c, 0x22, 0xba, 0x44,
	0x08, 0x1c, 0x54, 0x06, 0x7e, 0xb6, 0x82, 0x02, 0x62, 0xe9, 0x60, 0x60, 0x61, 0x73, 0xe3, 0x37,
	0x58, 0x75, 0x7c, 0xe1, 0xee, 0x52, 0xf0, 0xc8, 0x48, 0x25, 0x24, 0x06, 0x06, 0x24, 0xba, 0x81,
	0x44, 0x97, 0x2e, 0x88, 0x0a, 0x26, 0xe6, 0x8e, 0x1d, 0x3b, 0x82, 0x43, 0x50, 0xbb, 0xb1, 0xb3,
	0xa0, 0x9c, 0x5d, 0x88, 0x25, 0x16, 0xb6, 0xf7, 0xbe, 0xbf, 0xf7, 0xf9, 0x07, 0xce, 0x8f, 0x94,
	0x34, 0xb2, 0xa7, 0x51, 0x6d, 0xc6, 0x03, 0xec, 0x85, 0x26, 0x09, 0xb5, 0x6f, 0x31, 0x7a, 0xba,
	0x04, 0x39, 0x2b, 0x34, 0x43, 0x19, 0x61, 0xa2, 0xe7, 0x25, 0xfc, 0x5c, 0x85, 0x59, 0x0f, 0x35,
	0x96, 0x44, 0xd5, 0x82, 0xe9, 0x78, 0x58, 0x5a, 0x2e, 0x6c, 0xbb, 0x50, 0x5f, 0x9d, 0x45, 0xf0,
	0x16, 0x2c, 0xde, 0x45, 0x63, 0xe7, 0x00, 0x1f, 0x8f, 0x51, 0x1b, 0x7e, 0x0d, 0xbc, 0xbf, 0x90,
	0x1e, 0xc9, 0x54, 0x23, 0x5d, 0x86, 0xba, 0x3d, 0xc9, 0x48, 0xc7, 0xed, 0x2e, 0xac, 0x9c, 0xf1,
	0x8b, 0x50, 0xbf, 0x50, 0x15, 0x1c, 0xbf, 0x07, 0xf4, 0x61, 0x9a, 0xc8, 0xc1, 0xc6, 0x7c, 0x1c,
	0x5d, 0x06, 0xd7, 0x64, 0x23, 0x46, 0x3a, 0xa4, 0xdb, 0x5c, 0x69, 0x55, 0x8c, 0x0f, 0xb2, 0x11,
	0x06, 0x33, 0x96, 0x36, 0xa1, 0x16, 0x47, 0xac, 0xd6, 0x21, 0x5d, 0x37, 0xa8, 0xc5, 0x11, 0xff,
	0x45, 0xe0, 0x6c, 0x25, 0xeb, 0x4f, 0x8f, 0xff, 0x0f, 0xa3, 0x97, 0xa0, 0xa1, 0x4d, 0x68, 0xc6,
	0x9a, 0xb9, 0xd6, 0xd7, 0x3e, 0xf1, 0x05, 0xf8, 0x24, 0x54, 0xd1, 0x7d, 0xcb, 0x05, 0xa5, 0x86,
	0xde, 0x81, 0x86, 0xb2, 0x38, 0x3b, 0x65, 0x9f, 0xd5, 0xf7, 0xcb, 0x4f, 0x50, 0x9c, 0xf1, 0xff,
	0x51, 0xab, 0x0c, 0xea, 0xa7, 0x46, 0x65, 0x41, 0xe9, 0xe6, 0x37, 0x60, 0x61, 0x0e, 0xa6, 0x1e,
	0xb8, 0x1b, 0x98, 0xd9, 0xe6, 0x6e, 0x30, 0x1b, 0x69, 0x1b, 0xea, 0x9b, 0x61, 0x32, 0xc6, 0xb2,
	0x69, 0xb1, 0xdc, 0xac, 0x5d, 0x27, 0x17, 0x15, 0x34, 0x6d, 0x7e, 0x5f, 0x29, 0xa9, 0x6e, 0xcb,
	0x08, 0xe9, 0x15, 0x58, 0xea, 0x2b, 0x65, 0xc1, 0xd5, 0x44, 0x61, 0x18, 0x65, 0x45, 0x0d, 0xcf,
	0xe1, 0x4b, 0x5b, 0x7b, 0xac, 0x45, 0x17, 0xa7, 0x6f, 0xbe, 0x1c, 0x3f, 0xff, 0x38, 0xfd, 0xf4,
	0xe1, 0xe8, 0xfd, 0xdb, 0xe3, 0x57, 0xcf, 0xa8, 0x0f, 0xde, 0x89, 0x63, 0x4d, 0x9a, 0xfe, 0xd3,
	0x58, 0x1b, 0x8f, 0x70, 0xb6, 0xb5, 0xc7, 0xda, 0x94, 0xfe, 0xd8, 0x7d, 0x57, 0xe8, 0xbf, 0x7f,
	0x7e, 0x31, 0xdd, 0x7d, 0x3d, 0xdd, 0xde, 0xb9, 0xb5, 0x76, 0xf8, 0x4d, 0x38, 0x3b, 0xb9, 0x20,
	0xfb, 0xb9, 0x20, 0x07, 0xb9, 0x20, 0x5f, 0x73, 0x41, 0x8e, 0x72, 0xe1, 0xfc, 0xcc, 0x05, 0x79,
	0x39, 0x11, 0xce, 0xfe, 0x44, 0x90, 0x83, 0x89, 0x70, 0x0e, 0x27, 0xc2, 0x79, 0xd4, 0x19, 0xc8,
	0x38, 0xbd, 0x3c, 0x7b, 0x31, 0xa8, 0x7a, 0x03, 0x39, 0x1c, 0xca, 0xb4, 0x57, 0xf9, 0x89, 0xd7,
	0x1b, 0x76, 0xbd, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xbc, 0x7b, 0x3c, 0xdc, 0x02, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAtlas.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAtlas_GetAtlasRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAtlas_GetAtlasResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAtlas_UnlockAtlasRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAtlas_UnlockAtlasResponse.Get().(proto.Message)
	})
}

var poolAtlas = &sync.Pool{New: func() interface{} { return &Atlas{} }}

func (m *Atlas) ReleasePool() { m.Reset(); poolAtlas.Put(m); m = nil }

var poolAtlas_GetAtlasRequest = &sync.Pool{New: func() interface{} { return &Atlas_GetAtlasRequest{} }}

func (m *Atlas_GetAtlasRequest) ReleasePool() { m.Reset(); poolAtlas_GetAtlasRequest.Put(m); m = nil }

var poolAtlas_GetAtlasResponse = &sync.Pool{New: func() interface{} { return &Atlas_GetAtlasResponse{} }}

func (m *Atlas_GetAtlasResponse) ReleasePool() { m.Reset(); poolAtlas_GetAtlasResponse.Put(m); m = nil }

var poolAtlas_UnlockAtlasRequest = &sync.Pool{New: func() interface{} { return &Atlas_UnlockAtlasRequest{} }}

func (m *Atlas_UnlockAtlasRequest) ReleasePool() {
	m.Reset()
	poolAtlas_UnlockAtlasRequest.Put(m)
	m = nil
}

var poolAtlas_UnlockAtlasResponse = &sync.Pool{New: func() interface{} { return &Atlas_UnlockAtlasResponse{} }}

func (m *Atlas_UnlockAtlasResponse) ReleasePool() {
	m.Reset()
	poolAtlas_UnlockAtlasResponse.Put(m)
	m = nil
}
func (x AtlasErrorCode) String() string {
	s, ok := AtlasErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Atlas) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Atlas)
	if !ok {
		that2, ok := that.(Atlas)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Atlas_GetAtlasRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Atlas_GetAtlasRequest)
	if !ok {
		that2, ok := that.(Atlas_GetAtlasRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Atlas_GetAtlasResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Atlas_GetAtlasResponse)
	if !ok {
		that2, ok := that.(Atlas_GetAtlasResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Atlas) != len(that1.Atlas) {
		return false
	}
	for i := range this.Atlas {
		if !this.Atlas[i].Equal(that1.Atlas[i]) {
			return false
		}
	}
	return true
}
func (this *Atlas_UnlockAtlasRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Atlas_UnlockAtlasRequest)
	if !ok {
		that2, ok := that.(Atlas_UnlockAtlasRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Atlas_UnlockAtlasResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Atlas_UnlockAtlasResponse)
	if !ok {
		that2, ok := that.(Atlas_UnlockAtlasResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	return true
}
func (m *Atlas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Atlas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Atlas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Atlas_GetAtlasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Atlas_GetAtlasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Atlas_GetAtlasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Atlas_GetAtlasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Atlas_GetAtlasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Atlas_GetAtlasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Atlas) > 0 {
		for iNdEx := len(m.Atlas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Atlas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAtlas(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Atlas_UnlockAtlasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Atlas_UnlockAtlasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Atlas_UnlockAtlasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAtlas(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Typ != 0 {
		i = encodeVarintAtlas(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Atlas_UnlockAtlasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Atlas_UnlockAtlasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Atlas_UnlockAtlasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for k := range m.Reward {
			v := m.Reward[k]
			baseI := i
			i = encodeVarintAtlas(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintAtlas(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintAtlas(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Status != 0 {
		i = encodeVarintAtlas(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintAtlas(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Typ != 0 {
		i = encodeVarintAtlas(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAtlas(dAtA []byte, offset int, v uint64) int {
	offset -= sovAtlas(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Atlas) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Atlas_GetAtlasRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Atlas_GetAtlasResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("atlas")
	w.RawByte('"')
	w.RawByte(':')
	if m.Atlas == nil {
		w.RawString("null")
	} else if len(m.Atlas) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Atlas {
			v.JsonBytes(w)
			if i != len(m.Atlas)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Atlas_UnlockAtlasRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Id != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Atlas_UnlockAtlasResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Id != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlReward := len(m.Reward)
		for k, v := range m.Reward {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlReward--
			if mlReward != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Atlas) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Atlas) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Atlas) GoString() string {
	return m.String()
}

func (m *Atlas_GetAtlasRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Atlas_GetAtlasRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Atlas_GetAtlasRequest) GoString() string {
	return m.String()
}

func (m *Atlas_GetAtlasResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Atlas_GetAtlasResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Atlas_GetAtlasResponse) GoString() string {
	return m.String()
}

func (m *Atlas_UnlockAtlasRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Atlas_UnlockAtlasRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Atlas_UnlockAtlasRequest) GoString() string {
	return m.String()
}

func (m *Atlas_UnlockAtlasResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Atlas_UnlockAtlasResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Atlas_UnlockAtlasResponse) GoString() string {
	return m.String()
}

func (m *Atlas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Atlas_GetAtlasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Atlas_GetAtlasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Atlas) > 0 {
		for _, e := range m.Atlas {
			l = e.Size()
			n += 1 + l + sovAtlas(uint64(l))
		}
	}
	return n
}

func (m *Atlas_UnlockAtlasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovAtlas(uint64(m.Typ))
	}
	if m.Id != 0 {
		n += 1 + sovAtlas(uint64(m.Id))
	}
	return n
}

func (m *Atlas_UnlockAtlasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovAtlas(uint64(m.Typ))
	}
	if m.Id != 0 {
		n += 1 + sovAtlas(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovAtlas(uint64(m.Status))
	}
	if len(m.Reward) > 0 {
		for k, v := range m.Reward {
			_ = k
			_ = v
			mapEntrySize := 1 + sovAtlas(uint64(k)) + 1 + sovAtlas(uint64(v))
			n += mapEntrySize + 1 + sovAtlas(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAtlas(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAtlas(x uint64) (n int) {
	return sovAtlas(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Atlas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Atlas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Atlas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Atlas_GetAtlasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAtlasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAtlasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Atlas_GetAtlasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAtlasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAtlasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atlas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtlas
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAtlas
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Atlas = append(m.Atlas, &models.Atlas{})
			if err := m.Atlas[len(m.Atlas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Atlas_UnlockAtlasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockAtlasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockAtlasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.AtlasType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Atlas_UnlockAtlasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockAtlasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockAtlasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.AtlasType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= models.RewardStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtlas
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAtlas
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAtlas
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAtlas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAtlas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAtlas(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAtlas
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reward[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAtlas(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAtlas
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAtlas
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAtlas
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAtlas        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAtlas          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAtlas = fmt.Errorf("proto: unexpected end of group")
)
