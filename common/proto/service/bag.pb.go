// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/bag.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BagErrorCode int32

const (
	BagErrorCode_ErrBagNotEnough          BagErrorCode = 0
	BagErrorCode_ErrBagNoSuchItem         BagErrorCode = 1
	BagErrorCode_ErrBagChooseNotMatch     BagErrorCode = 2
	BagErrorCode_ErrBagInvalidUse         BagErrorCode = 3
	BagErrorCode_ErrBagCapLimit           BagErrorCode = 4
	BagErrorCode_ErrBagNotExchange        BagErrorCode = 5
	BagErrorCode_ErrBagItemBelowZero      BagErrorCode = 6
	BagErrorCode_ErrBagItemCantSell       BagErrorCode = 7
	BagErrorCode_ErrBagItemHasExpired     BagErrorCode = 8
	BagErrorCode_ErrBagItemNotEquip       BagErrorCode = 9
	BagErrorCode_ErrBagEquipNotExist      BagErrorCode = 10
	BagErrorCode_ErrBagRelicsEquipCantSub BagErrorCode = 11
	BagErrorCode_ErrBagRelicsNotExist     BagErrorCode = 12
	BagErrorCode_ErrBagMedicineNotExist   BagErrorCode = 13
	BagErrorCode_ErrBagMedicineCD         BagErrorCode = 14
	BagErrorCode_ErrBagMedicineLevel      BagErrorCode = 15
	BagErrorCode_ErrBagMedicineMap        BagErrorCode = 16
	BagErrorCode_ErrBagCanNotSynthesis    BagErrorCode = 17
	BagErrorCode_ErrBagMaxCapacity        BagErrorCode = 18
	BagErrorCode_ErrBagNeedUnlockLattice  BagErrorCode = 19
)

var BagErrorCode_name = map[int32]string{
	0:  "ErrBagNotEnough",
	1:  "ErrBagNoSuchItem",
	2:  "ErrBagChooseNotMatch",
	3:  "ErrBagInvalidUse",
	4:  "ErrBagCapLimit",
	5:  "ErrBagNotExchange",
	6:  "ErrBagItemBelowZero",
	7:  "ErrBagItemCantSell",
	8:  "ErrBagItemHasExpired",
	9:  "ErrBagItemNotEquip",
	10: "ErrBagEquipNotExist",
	11: "ErrBagRelicsEquipCantSub",
	12: "ErrBagRelicsNotExist",
	13: "ErrBagMedicineNotExist",
	14: "ErrBagMedicineCD",
	15: "ErrBagMedicineLevel",
	16: "ErrBagMedicineMap",
	17: "ErrBagCanNotSynthesis",
	18: "ErrBagMaxCapacity",
	19: "ErrBagNeedUnlockLattice",
}

var BagErrorCode_value = map[string]int32{
	"ErrBagNotEnough":          0,
	"ErrBagNoSuchItem":         1,
	"ErrBagChooseNotMatch":     2,
	"ErrBagInvalidUse":         3,
	"ErrBagCapLimit":           4,
	"ErrBagNotExchange":        5,
	"ErrBagItemBelowZero":      6,
	"ErrBagItemCantSell":       7,
	"ErrBagItemHasExpired":     8,
	"ErrBagItemNotEquip":       9,
	"ErrBagEquipNotExist":      10,
	"ErrBagRelicsEquipCantSub": 11,
	"ErrBagRelicsNotExist":     12,
	"ErrBagMedicineNotExist":   13,
	"ErrBagMedicineCD":         14,
	"ErrBagMedicineLevel":      15,
	"ErrBagMedicineMap":        16,
	"ErrBagCanNotSynthesis":    17,
	"ErrBagMaxCapacity":        18,
	"ErrBagNeedUnlockLattice":  19,
}

func (BagErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0}
}

type Bag struct {
}

func (m *Bag) Reset()      { *m = Bag{} }
func (*Bag) ProtoMessage() {}
func (*Bag) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0}
}
func (m *Bag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag.Merge(m, src)
}
func (m *Bag) XXX_Size() int {
	return m.Size()
}
func (m *Bag) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag.DiscardUnknown(m)
}

var xxx_messageInfo_Bag proto.InternalMessageInfo

func (*Bag) XXX_MessageName() string {
	return "service.Bag"
}

type Bag_GetBagInfoRequest struct {
}

func (m *Bag_GetBagInfoRequest) Reset()      { *m = Bag_GetBagInfoRequest{} }
func (*Bag_GetBagInfoRequest) ProtoMessage() {}
func (*Bag_GetBagInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 0}
}
func (m *Bag_GetBagInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_GetBagInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_GetBagInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_GetBagInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_GetBagInfoRequest.Merge(m, src)
}
func (m *Bag_GetBagInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_GetBagInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_GetBagInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_GetBagInfoRequest proto.InternalMessageInfo

func (*Bag_GetBagInfoRequest) XXX_MessageName() string {
	return "service.Bag.GetBagInfoRequest"
}

type Bag_GetBagInfoResponse struct {
	Bag *models.Bag `protobuf:"bytes,1,opt,name=bag,proto3" json:"bag,omitempty"`
}

func (m *Bag_GetBagInfoResponse) Reset()      { *m = Bag_GetBagInfoResponse{} }
func (*Bag_GetBagInfoResponse) ProtoMessage() {}
func (*Bag_GetBagInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 1}
}
func (m *Bag_GetBagInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_GetBagInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_GetBagInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_GetBagInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_GetBagInfoResponse.Merge(m, src)
}
func (m *Bag_GetBagInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_GetBagInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_GetBagInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_GetBagInfoResponse proto.InternalMessageInfo

func (m *Bag_GetBagInfoResponse) GetBag() *models.Bag {
	if m != nil {
		return m.Bag
	}
	return nil
}

func (*Bag_GetBagInfoResponse) XXX_MessageName() string {
	return "service.Bag.GetBagInfoResponse"
}

type Bag_GetItemRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (m *Bag_GetItemRequest) Reset()      { *m = Bag_GetItemRequest{} }
func (*Bag_GetItemRequest) ProtoMessage() {}
func (*Bag_GetItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 2}
}
func (m *Bag_GetItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_GetItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_GetItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_GetItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_GetItemRequest.Merge(m, src)
}
func (m *Bag_GetItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_GetItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_GetItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_GetItemRequest proto.InternalMessageInfo

func (m *Bag_GetItemRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (*Bag_GetItemRequest) XXX_MessageName() string {
	return "service.Bag.GetItemRequest"
}

type Bag_GetItemResponse struct {
	Item *models.Item `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (m *Bag_GetItemResponse) Reset()      { *m = Bag_GetItemResponse{} }
func (*Bag_GetItemResponse) ProtoMessage() {}
func (*Bag_GetItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 3}
}
func (m *Bag_GetItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_GetItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_GetItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_GetItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_GetItemResponse.Merge(m, src)
}
func (m *Bag_GetItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_GetItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_GetItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_GetItemResponse proto.InternalMessageInfo

func (m *Bag_GetItemResponse) GetItem() *models.Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (*Bag_GetItemResponse) XXX_MessageName() string {
	return "service.Bag.GetItemResponse"
}

type Bag_UseItemRequest struct {
	ItemId int64           `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  int64           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Choose map[int64]int64 `protobuf:"bytes,3,rep,name=choose,proto3" json:"choose,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Bag_UseItemRequest) Reset()      { *m = Bag_UseItemRequest{} }
func (*Bag_UseItemRequest) ProtoMessage() {}
func (*Bag_UseItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 4}
}
func (m *Bag_UseItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_UseItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_UseItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_UseItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_UseItemRequest.Merge(m, src)
}
func (m *Bag_UseItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_UseItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_UseItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_UseItemRequest proto.InternalMessageInfo

func (m *Bag_UseItemRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Bag_UseItemRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Bag_UseItemRequest) GetChoose() map[int64]int64 {
	if m != nil {
		return m.Choose
	}
	return nil
}

func (*Bag_UseItemRequest) XXX_MessageName() string {
	return "service.Bag.UseItemRequest"
}

type Bag_UseItemResponse struct {
	Items  map[int64]int64     `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Equips []*models.Equipment `protobuf:"bytes,2,rep,name=equips,proto3" json:"equips,omitempty"`
}

func (m *Bag_UseItemResponse) Reset()      { *m = Bag_UseItemResponse{} }
func (*Bag_UseItemResponse) ProtoMessage() {}
func (*Bag_UseItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 5}
}
func (m *Bag_UseItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_UseItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_UseItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_UseItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_UseItemResponse.Merge(m, src)
}
func (m *Bag_UseItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_UseItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_UseItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_UseItemResponse proto.InternalMessageInfo

func (m *Bag_UseItemResponse) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Bag_UseItemResponse) GetEquips() []*models.Equipment {
	if m != nil {
		return m.Equips
	}
	return nil
}

func (*Bag_UseItemResponse) XXX_MessageName() string {
	return "service.Bag.UseItemResponse"
}

type Bag_SellThingsRequest struct {
	Items  map[int64]int64  `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Equips map[string]int64 `protobuf:"bytes,2,rep,name=equips,proto3" json:"equips,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Bag_SellThingsRequest) Reset()      { *m = Bag_SellThingsRequest{} }
func (*Bag_SellThingsRequest) ProtoMessage() {}
func (*Bag_SellThingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 6}
}
func (m *Bag_SellThingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_SellThingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_SellThingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_SellThingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_SellThingsRequest.Merge(m, src)
}
func (m *Bag_SellThingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_SellThingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_SellThingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_SellThingsRequest proto.InternalMessageInfo

func (m *Bag_SellThingsRequest) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Bag_SellThingsRequest) GetEquips() map[string]int64 {
	if m != nil {
		return m.Equips
	}
	return nil
}

func (*Bag_SellThingsRequest) XXX_MessageName() string {
	return "service.Bag.SellThingsRequest"
}

type Bag_SellThingsResponse struct {
	Items map[int64]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Bag_SellThingsResponse) Reset()      { *m = Bag_SellThingsResponse{} }
func (*Bag_SellThingsResponse) ProtoMessage() {}
func (*Bag_SellThingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 7}
}
func (m *Bag_SellThingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_SellThingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_SellThingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_SellThingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_SellThingsResponse.Merge(m, src)
}
func (m *Bag_SellThingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_SellThingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_SellThingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_SellThingsResponse proto.InternalMessageInfo

func (m *Bag_SellThingsResponse) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*Bag_SellThingsResponse) XXX_MessageName() string {
	return "service.Bag.SellThingsResponse"
}

type Bag_AddItemsRequest struct {
	Items map[int64]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Bag_AddItemsRequest) Reset()      { *m = Bag_AddItemsRequest{} }
func (*Bag_AddItemsRequest) ProtoMessage() {}
func (*Bag_AddItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 8}
}
func (m *Bag_AddItemsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_AddItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_AddItemsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_AddItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_AddItemsRequest.Merge(m, src)
}
func (m *Bag_AddItemsRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_AddItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_AddItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_AddItemsRequest proto.InternalMessageInfo

func (m *Bag_AddItemsRequest) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*Bag_AddItemsRequest) XXX_MessageName() string {
	return "service.Bag.AddItemsRequest"
}

type Bag_AddItemsResponse struct {
}

func (m *Bag_AddItemsResponse) Reset()      { *m = Bag_AddItemsResponse{} }
func (*Bag_AddItemsResponse) ProtoMessage() {}
func (*Bag_AddItemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 9}
}
func (m *Bag_AddItemsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_AddItemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_AddItemsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_AddItemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_AddItemsResponse.Merge(m, src)
}
func (m *Bag_AddItemsResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_AddItemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_AddItemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_AddItemsResponse proto.InternalMessageInfo

func (*Bag_AddItemsResponse) XXX_MessageName() string {
	return "service.Bag.AddItemsResponse"
}

type Bag_AddItemRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Bag_AddItemRequest) Reset()      { *m = Bag_AddItemRequest{} }
func (*Bag_AddItemRequest) ProtoMessage() {}
func (*Bag_AddItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 10}
}
func (m *Bag_AddItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_AddItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_AddItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_AddItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_AddItemRequest.Merge(m, src)
}
func (m *Bag_AddItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_AddItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_AddItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_AddItemRequest proto.InternalMessageInfo

func (m *Bag_AddItemRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Bag_AddItemRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Bag_AddItemRequest) XXX_MessageName() string {
	return "service.Bag.AddItemRequest"
}

type Bag_AddItemResponse struct {
}

func (m *Bag_AddItemResponse) Reset()      { *m = Bag_AddItemResponse{} }
func (*Bag_AddItemResponse) ProtoMessage() {}
func (*Bag_AddItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 11}
}
func (m *Bag_AddItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_AddItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_AddItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_AddItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_AddItemResponse.Merge(m, src)
}
func (m *Bag_AddItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_AddItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_AddItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_AddItemResponse proto.InternalMessageInfo

func (*Bag_AddItemResponse) XXX_MessageName() string {
	return "service.Bag.AddItemResponse"
}

type Bag_AddItemsEvent struct {
	Items map[int64]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Bag_AddItemsEvent) Reset()      { *m = Bag_AddItemsEvent{} }
func (*Bag_AddItemsEvent) ProtoMessage() {}
func (*Bag_AddItemsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 12}
}
func (m *Bag_AddItemsEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_AddItemsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_AddItemsEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_AddItemsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_AddItemsEvent.Merge(m, src)
}
func (m *Bag_AddItemsEvent) XXX_Size() int {
	return m.Size()
}
func (m *Bag_AddItemsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_AddItemsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_AddItemsEvent proto.InternalMessageInfo

func (m *Bag_AddItemsEvent) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*Bag_AddItemsEvent) XXX_MessageName() string {
	return "service.Bag.AddItemsEvent"
}

type Bag_AddItemEvent struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Bag_AddItemEvent) Reset()      { *m = Bag_AddItemEvent{} }
func (*Bag_AddItemEvent) ProtoMessage() {}
func (*Bag_AddItemEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 13}
}
func (m *Bag_AddItemEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_AddItemEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_AddItemEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_AddItemEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_AddItemEvent.Merge(m, src)
}
func (m *Bag_AddItemEvent) XXX_Size() int {
	return m.Size()
}
func (m *Bag_AddItemEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_AddItemEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_AddItemEvent proto.InternalMessageInfo

func (m *Bag_AddItemEvent) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Bag_AddItemEvent) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Bag_AddItemEvent) XXX_MessageName() string {
	return "service.Bag.AddItemEvent"
}

type Bag_SubItemEvent struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Bag_SubItemEvent) Reset()      { *m = Bag_SubItemEvent{} }
func (*Bag_SubItemEvent) ProtoMessage() {}
func (*Bag_SubItemEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 14}
}
func (m *Bag_SubItemEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_SubItemEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_SubItemEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_SubItemEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_SubItemEvent.Merge(m, src)
}
func (m *Bag_SubItemEvent) XXX_Size() int {
	return m.Size()
}
func (m *Bag_SubItemEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_SubItemEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_SubItemEvent proto.InternalMessageInfo

func (m *Bag_SubItemEvent) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Bag_SubItemEvent) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Bag_SubItemEvent) XXX_MessageName() string {
	return "service.Bag.SubItemEvent"
}

type Bag_GetBagConfigRequest struct {
}

func (m *Bag_GetBagConfigRequest) Reset()      { *m = Bag_GetBagConfigRequest{} }
func (*Bag_GetBagConfigRequest) ProtoMessage() {}
func (*Bag_GetBagConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 15}
}
func (m *Bag_GetBagConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_GetBagConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_GetBagConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_GetBagConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_GetBagConfigRequest.Merge(m, src)
}
func (m *Bag_GetBagConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_GetBagConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_GetBagConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_GetBagConfigRequest proto.InternalMessageInfo

func (*Bag_GetBagConfigRequest) XXX_MessageName() string {
	return "service.Bag.GetBagConfigRequest"
}

type Bag_GetBagConfigResponse struct {
	Config *models.BagConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *Bag_GetBagConfigResponse) Reset()      { *m = Bag_GetBagConfigResponse{} }
func (*Bag_GetBagConfigResponse) ProtoMessage() {}
func (*Bag_GetBagConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 16}
}
func (m *Bag_GetBagConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_GetBagConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_GetBagConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_GetBagConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_GetBagConfigResponse.Merge(m, src)
}
func (m *Bag_GetBagConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_GetBagConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_GetBagConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_GetBagConfigResponse proto.InternalMessageInfo

func (m *Bag_GetBagConfigResponse) GetConfig() *models.BagConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (*Bag_GetBagConfigResponse) XXX_MessageName() string {
	return "service.Bag.GetBagConfigResponse"
}

type Bag_SaveBagConfigRequest struct {
	Quality int64 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (m *Bag_SaveBagConfigRequest) Reset()      { *m = Bag_SaveBagConfigRequest{} }
func (*Bag_SaveBagConfigRequest) ProtoMessage() {}
func (*Bag_SaveBagConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 17}
}
func (m *Bag_SaveBagConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_SaveBagConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_SaveBagConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_SaveBagConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_SaveBagConfigRequest.Merge(m, src)
}
func (m *Bag_SaveBagConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_SaveBagConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_SaveBagConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_SaveBagConfigRequest proto.InternalMessageInfo

func (m *Bag_SaveBagConfigRequest) GetQuality() int64 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (*Bag_SaveBagConfigRequest) XXX_MessageName() string {
	return "service.Bag.SaveBagConfigRequest"
}

type Bag_SaveBagConfigResponse struct {
}

func (m *Bag_SaveBagConfigResponse) Reset()      { *m = Bag_SaveBagConfigResponse{} }
func (*Bag_SaveBagConfigResponse) ProtoMessage() {}
func (*Bag_SaveBagConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 18}
}
func (m *Bag_SaveBagConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_SaveBagConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_SaveBagConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_SaveBagConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_SaveBagConfigResponse.Merge(m, src)
}
func (m *Bag_SaveBagConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_SaveBagConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_SaveBagConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_SaveBagConfigResponse proto.InternalMessageInfo

func (*Bag_SaveBagConfigResponse) XXX_MessageName() string {
	return "service.Bag.SaveBagConfigResponse"
}

// 钻石兑换绑钻
type Bag_DiamondExchangeBoundRequest struct {
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Bag_DiamondExchangeBoundRequest) Reset()      { *m = Bag_DiamondExchangeBoundRequest{} }
func (*Bag_DiamondExchangeBoundRequest) ProtoMessage() {}
func (*Bag_DiamondExchangeBoundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 19}
}
func (m *Bag_DiamondExchangeBoundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_DiamondExchangeBoundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_DiamondExchangeBoundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_DiamondExchangeBoundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_DiamondExchangeBoundRequest.Merge(m, src)
}
func (m *Bag_DiamondExchangeBoundRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_DiamondExchangeBoundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_DiamondExchangeBoundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_DiamondExchangeBoundRequest proto.InternalMessageInfo

func (m *Bag_DiamondExchangeBoundRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*Bag_DiamondExchangeBoundRequest) XXX_MessageName() string {
	return "service.Bag.DiamondExchangeBoundRequest"
}

type Bag_DiamondExchangeBoundResponse struct {
}

func (m *Bag_DiamondExchangeBoundResponse) Reset()      { *m = Bag_DiamondExchangeBoundResponse{} }
func (*Bag_DiamondExchangeBoundResponse) ProtoMessage() {}
func (*Bag_DiamondExchangeBoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 20}
}
func (m *Bag_DiamondExchangeBoundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_DiamondExchangeBoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_DiamondExchangeBoundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_DiamondExchangeBoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_DiamondExchangeBoundResponse.Merge(m, src)
}
func (m *Bag_DiamondExchangeBoundResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_DiamondExchangeBoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_DiamondExchangeBoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_DiamondExchangeBoundResponse proto.InternalMessageInfo

func (*Bag_DiamondExchangeBoundResponse) XXX_MessageName() string {
	return "service.Bag.DiamondExchangeBoundResponse"
}

// 合成道具
type Bag_SynthesisItemRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Num    int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Bag_SynthesisItemRequest) Reset()      { *m = Bag_SynthesisItemRequest{} }
func (*Bag_SynthesisItemRequest) ProtoMessage() {}
func (*Bag_SynthesisItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 21}
}
func (m *Bag_SynthesisItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_SynthesisItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_SynthesisItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_SynthesisItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_SynthesisItemRequest.Merge(m, src)
}
func (m *Bag_SynthesisItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_SynthesisItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_SynthesisItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_SynthesisItemRequest proto.InternalMessageInfo

func (m *Bag_SynthesisItemRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Bag_SynthesisItemRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*Bag_SynthesisItemRequest) XXX_MessageName() string {
	return "service.Bag.SynthesisItemRequest"
}

type Bag_SynthesisItemResponse struct {
}

func (m *Bag_SynthesisItemResponse) Reset()      { *m = Bag_SynthesisItemResponse{} }
func (*Bag_SynthesisItemResponse) ProtoMessage() {}
func (*Bag_SynthesisItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 22}
}
func (m *Bag_SynthesisItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_SynthesisItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_SynthesisItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_SynthesisItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_SynthesisItemResponse.Merge(m, src)
}
func (m *Bag_SynthesisItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_SynthesisItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_SynthesisItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_SynthesisItemResponse proto.InternalMessageInfo

func (*Bag_SynthesisItemResponse) XXX_MessageName() string {
	return "service.Bag.SynthesisItemResponse"
}

// 扩大格子容量
type Bag_ExpandCapacityRequest struct {
}

func (m *Bag_ExpandCapacityRequest) Reset()      { *m = Bag_ExpandCapacityRequest{} }
func (*Bag_ExpandCapacityRequest) ProtoMessage() {}
func (*Bag_ExpandCapacityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 23}
}
func (m *Bag_ExpandCapacityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_ExpandCapacityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_ExpandCapacityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_ExpandCapacityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_ExpandCapacityRequest.Merge(m, src)
}
func (m *Bag_ExpandCapacityRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_ExpandCapacityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_ExpandCapacityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_ExpandCapacityRequest proto.InternalMessageInfo

func (*Bag_ExpandCapacityRequest) XXX_MessageName() string {
	return "service.Bag.ExpandCapacityRequest"
}

type Bag_ExpandCapacityResponse struct {
	LatticeCount int64 `protobuf:"varint,1,opt,name=lattice_count,json=latticeCount,proto3" json:"lattice_count,omitempty"`
	UnlockTime   int64 `protobuf:"varint,2,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
}

func (m *Bag_ExpandCapacityResponse) Reset()      { *m = Bag_ExpandCapacityResponse{} }
func (*Bag_ExpandCapacityResponse) ProtoMessage() {}
func (*Bag_ExpandCapacityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 24}
}
func (m *Bag_ExpandCapacityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_ExpandCapacityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_ExpandCapacityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_ExpandCapacityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_ExpandCapacityResponse.Merge(m, src)
}
func (m *Bag_ExpandCapacityResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_ExpandCapacityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_ExpandCapacityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_ExpandCapacityResponse proto.InternalMessageInfo

func (m *Bag_ExpandCapacityResponse) GetLatticeCount() int64 {
	if m != nil {
		return m.LatticeCount
	}
	return 0
}

func (m *Bag_ExpandCapacityResponse) GetUnlockTime() int64 {
	if m != nil {
		return m.UnlockTime
	}
	return 0
}

func (*Bag_ExpandCapacityResponse) XXX_MessageName() string {
	return "service.Bag.ExpandCapacityResponse"
}

// 花费钻石立即解锁格子（需要先调用ExpandCapacityRequest）
type Bag_ExpandCapacityImmediatelyRequest struct {
}

func (m *Bag_ExpandCapacityImmediatelyRequest) Reset()      { *m = Bag_ExpandCapacityImmediatelyRequest{} }
func (*Bag_ExpandCapacityImmediatelyRequest) ProtoMessage() {}
func (*Bag_ExpandCapacityImmediatelyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 25}
}
func (m *Bag_ExpandCapacityImmediatelyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_ExpandCapacityImmediatelyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_ExpandCapacityImmediatelyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_ExpandCapacityImmediatelyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_ExpandCapacityImmediatelyRequest.Merge(m, src)
}
func (m *Bag_ExpandCapacityImmediatelyRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_ExpandCapacityImmediatelyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_ExpandCapacityImmediatelyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_ExpandCapacityImmediatelyRequest proto.InternalMessageInfo

func (*Bag_ExpandCapacityImmediatelyRequest) XXX_MessageName() string {
	return "service.Bag.ExpandCapacityImmediatelyRequest"
}

type Bag_ExpandCapacityImmediatelyResponse struct {
	Capacity int64 `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (m *Bag_ExpandCapacityImmediatelyResponse) Reset()      { *m = Bag_ExpandCapacityImmediatelyResponse{} }
func (*Bag_ExpandCapacityImmediatelyResponse) ProtoMessage() {}
func (*Bag_ExpandCapacityImmediatelyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 26}
}
func (m *Bag_ExpandCapacityImmediatelyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_ExpandCapacityImmediatelyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_ExpandCapacityImmediatelyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_ExpandCapacityImmediatelyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_ExpandCapacityImmediatelyResponse.Merge(m, src)
}
func (m *Bag_ExpandCapacityImmediatelyResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_ExpandCapacityImmediatelyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_ExpandCapacityImmediatelyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_ExpandCapacityImmediatelyResponse proto.InternalMessageInfo

func (m *Bag_ExpandCapacityImmediatelyResponse) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (*Bag_ExpandCapacityImmediatelyResponse) XXX_MessageName() string {
	return "service.Bag.ExpandCapacityImmediatelyResponse"
}

type Bag_CheatAddItemRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Bag_CheatAddItemRequest) Reset()      { *m = Bag_CheatAddItemRequest{} }
func (*Bag_CheatAddItemRequest) ProtoMessage() {}
func (*Bag_CheatAddItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 27}
}
func (m *Bag_CheatAddItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_CheatAddItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_CheatAddItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_CheatAddItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_CheatAddItemRequest.Merge(m, src)
}
func (m *Bag_CheatAddItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_CheatAddItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_CheatAddItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_CheatAddItemRequest proto.InternalMessageInfo

func (m *Bag_CheatAddItemRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Bag_CheatAddItemRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Bag_CheatAddItemRequest) XXX_MessageName() string {
	return "service.Bag.CheatAddItemRequest"
}

type Bag_CheatAddItemResponse struct {
}

func (m *Bag_CheatAddItemResponse) Reset()      { *m = Bag_CheatAddItemResponse{} }
func (*Bag_CheatAddItemResponse) ProtoMessage() {}
func (*Bag_CheatAddItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 28}
}
func (m *Bag_CheatAddItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_CheatAddItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_CheatAddItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_CheatAddItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_CheatAddItemResponse.Merge(m, src)
}
func (m *Bag_CheatAddItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_CheatAddItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_CheatAddItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_CheatAddItemResponse proto.InternalMessageInfo

func (*Bag_CheatAddItemResponse) XXX_MessageName() string {
	return "service.Bag.CheatAddItemResponse"
}

type Bag_CheatAddAllItemRequest struct {
	Typ   int64 `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Bag_CheatAddAllItemRequest) Reset()      { *m = Bag_CheatAddAllItemRequest{} }
func (*Bag_CheatAddAllItemRequest) ProtoMessage() {}
func (*Bag_CheatAddAllItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 29}
}
func (m *Bag_CheatAddAllItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_CheatAddAllItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_CheatAddAllItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_CheatAddAllItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_CheatAddAllItemRequest.Merge(m, src)
}
func (m *Bag_CheatAddAllItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_CheatAddAllItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_CheatAddAllItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_CheatAddAllItemRequest proto.InternalMessageInfo

func (m *Bag_CheatAddAllItemRequest) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *Bag_CheatAddAllItemRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Bag_CheatAddAllItemRequest) XXX_MessageName() string {
	return "service.Bag.CheatAddAllItemRequest"
}

type Bag_CheatAddAllItemResponse struct {
}

func (m *Bag_CheatAddAllItemResponse) Reset()      { *m = Bag_CheatAddAllItemResponse{} }
func (*Bag_CheatAddAllItemResponse) ProtoMessage() {}
func (*Bag_CheatAddAllItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 30}
}
func (m *Bag_CheatAddAllItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_CheatAddAllItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_CheatAddAllItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_CheatAddAllItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_CheatAddAllItemResponse.Merge(m, src)
}
func (m *Bag_CheatAddAllItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_CheatAddAllItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_CheatAddAllItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_CheatAddAllItemResponse proto.InternalMessageInfo

func (*Bag_CheatAddAllItemResponse) XXX_MessageName() string {
	return "service.Bag.CheatAddAllItemResponse"
}

type Bag_CheatSetItemRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Bag_CheatSetItemRequest) Reset()      { *m = Bag_CheatSetItemRequest{} }
func (*Bag_CheatSetItemRequest) ProtoMessage() {}
func (*Bag_CheatSetItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 31}
}
func (m *Bag_CheatSetItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_CheatSetItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_CheatSetItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_CheatSetItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_CheatSetItemRequest.Merge(m, src)
}
func (m *Bag_CheatSetItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_CheatSetItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_CheatSetItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_CheatSetItemRequest proto.InternalMessageInfo

func (m *Bag_CheatSetItemRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Bag_CheatSetItemRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Bag_CheatSetItemRequest) XXX_MessageName() string {
	return "service.Bag.CheatSetItemRequest"
}

type Bag_CheatSetItemResponse struct {
}

func (m *Bag_CheatSetItemResponse) Reset()      { *m = Bag_CheatSetItemResponse{} }
func (*Bag_CheatSetItemResponse) ProtoMessage() {}
func (*Bag_CheatSetItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 32}
}
func (m *Bag_CheatSetItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_CheatSetItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_CheatSetItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_CheatSetItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_CheatSetItemResponse.Merge(m, src)
}
func (m *Bag_CheatSetItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_CheatSetItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_CheatSetItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_CheatSetItemResponse proto.InternalMessageInfo

func (*Bag_CheatSetItemResponse) XXX_MessageName() string {
	return "service.Bag.CheatSetItemResponse"
}

type Bag_CheatDeleteAllRequest struct {
}

func (m *Bag_CheatDeleteAllRequest) Reset()      { *m = Bag_CheatDeleteAllRequest{} }
func (*Bag_CheatDeleteAllRequest) ProtoMessage() {}
func (*Bag_CheatDeleteAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 33}
}
func (m *Bag_CheatDeleteAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_CheatDeleteAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_CheatDeleteAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_CheatDeleteAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_CheatDeleteAllRequest.Merge(m, src)
}
func (m *Bag_CheatDeleteAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *Bag_CheatDeleteAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_CheatDeleteAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_CheatDeleteAllRequest proto.InternalMessageInfo

func (*Bag_CheatDeleteAllRequest) XXX_MessageName() string {
	return "service.Bag.CheatDeleteAllRequest"
}

type Bag_CheatDeleteAllResponse struct {
}

func (m *Bag_CheatDeleteAllResponse) Reset()      { *m = Bag_CheatDeleteAllResponse{} }
func (*Bag_CheatDeleteAllResponse) ProtoMessage() {}
func (*Bag_CheatDeleteAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 34}
}
func (m *Bag_CheatDeleteAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_CheatDeleteAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_CheatDeleteAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_CheatDeleteAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_CheatDeleteAllResponse.Merge(m, src)
}
func (m *Bag_CheatDeleteAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *Bag_CheatDeleteAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_CheatDeleteAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_CheatDeleteAllResponse proto.InternalMessageInfo

func (*Bag_CheatDeleteAllResponse) XXX_MessageName() string {
	return "service.Bag.CheatDeleteAllResponse"
}

//----------------------push----------------------//
type Bag_ItemUpdatePush struct {
	Items []*models.Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *Bag_ItemUpdatePush) Reset()      { *m = Bag_ItemUpdatePush{} }
func (*Bag_ItemUpdatePush) ProtoMessage() {}
func (*Bag_ItemUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 35}
}
func (m *Bag_ItemUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_ItemUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_ItemUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_ItemUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_ItemUpdatePush.Merge(m, src)
}
func (m *Bag_ItemUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *Bag_ItemUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_ItemUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_ItemUpdatePush proto.InternalMessageInfo

func (m *Bag_ItemUpdatePush) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*Bag_ItemUpdatePush) XXX_MessageName() string {
	return "service.Bag.ItemUpdatePush"
}

// 获得新装备
type Bag_EquipGotPush struct {
	Equipments []*models.Equipment `protobuf:"bytes,1,rep,name=equipments,proto3" json:"equipments,omitempty"`
}

func (m *Bag_EquipGotPush) Reset()      { *m = Bag_EquipGotPush{} }
func (*Bag_EquipGotPush) ProtoMessage() {}
func (*Bag_EquipGotPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 36}
}
func (m *Bag_EquipGotPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_EquipGotPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_EquipGotPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_EquipGotPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_EquipGotPush.Merge(m, src)
}
func (m *Bag_EquipGotPush) XXX_Size() int {
	return m.Size()
}
func (m *Bag_EquipGotPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_EquipGotPush.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_EquipGotPush proto.InternalMessageInfo

func (m *Bag_EquipGotPush) GetEquipments() []*models.Equipment {
	if m != nil {
		return m.Equipments
	}
	return nil
}

func (*Bag_EquipGotPush) XXX_MessageName() string {
	return "service.Bag.EquipGotPush"
}

// 用于装备的更新以及当穿脱装备时，客户端更新该装备在背包里的显示与隐藏
type Bag_EquipUpdatePush struct {
	Equipments []*models.Equipment `protobuf:"bytes,1,rep,name=equipments,proto3" json:"equipments,omitempty"`
}

func (m *Bag_EquipUpdatePush) Reset()      { *m = Bag_EquipUpdatePush{} }
func (*Bag_EquipUpdatePush) ProtoMessage() {}
func (*Bag_EquipUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 37}
}
func (m *Bag_EquipUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_EquipUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_EquipUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_EquipUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_EquipUpdatePush.Merge(m, src)
}
func (m *Bag_EquipUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *Bag_EquipUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_EquipUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_EquipUpdatePush proto.InternalMessageInfo

func (m *Bag_EquipUpdatePush) GetEquipments() []*models.Equipment {
	if m != nil {
		return m.Equipments
	}
	return nil
}

func (*Bag_EquipUpdatePush) XXX_MessageName() string {
	return "service.Bag.EquipUpdatePush"
}

// 装备销毁（售卖或者熔炼装备等）
type Bag_EquipDestroyedPush struct {
	EquipId []string `protobuf:"bytes,1,rep,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"`
}

func (m *Bag_EquipDestroyedPush) Reset()      { *m = Bag_EquipDestroyedPush{} }
func (*Bag_EquipDestroyedPush) ProtoMessage() {}
func (*Bag_EquipDestroyedPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 38}
}
func (m *Bag_EquipDestroyedPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_EquipDestroyedPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_EquipDestroyedPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_EquipDestroyedPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_EquipDestroyedPush.Merge(m, src)
}
func (m *Bag_EquipDestroyedPush) XXX_Size() int {
	return m.Size()
}
func (m *Bag_EquipDestroyedPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_EquipDestroyedPush.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_EquipDestroyedPush proto.InternalMessageInfo

func (m *Bag_EquipDestroyedPush) GetEquipId() []string {
	if m != nil {
		return m.EquipId
	}
	return nil
}

func (*Bag_EquipDestroyedPush) XXX_MessageName() string {
	return "service.Bag.EquipDestroyedPush"
}

// 遗物更新推送
type Bag_RelicsUpdatePush struct {
	Relics []*models.Relics `protobuf:"bytes,1,rep,name=relics,proto3" json:"relics,omitempty"`
}

func (m *Bag_RelicsUpdatePush) Reset()      { *m = Bag_RelicsUpdatePush{} }
func (*Bag_RelicsUpdatePush) ProtoMessage() {}
func (*Bag_RelicsUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 39}
}
func (m *Bag_RelicsUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_RelicsUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_RelicsUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_RelicsUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_RelicsUpdatePush.Merge(m, src)
}
func (m *Bag_RelicsUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *Bag_RelicsUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_RelicsUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_RelicsUpdatePush proto.InternalMessageInfo

func (m *Bag_RelicsUpdatePush) GetRelics() []*models.Relics {
	if m != nil {
		return m.Relics
	}
	return nil
}

func (*Bag_RelicsUpdatePush) XXX_MessageName() string {
	return "service.Bag.RelicsUpdatePush"
}

type Bag_SkillStoneUpdatePush struct {
	SkillStones []*models.SkillStone `protobuf:"bytes,1,rep,name=skill_stones,json=skillStones,proto3" json:"skill_stones,omitempty"`
}

func (m *Bag_SkillStoneUpdatePush) Reset()      { *m = Bag_SkillStoneUpdatePush{} }
func (*Bag_SkillStoneUpdatePush) ProtoMessage() {}
func (*Bag_SkillStoneUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 40}
}
func (m *Bag_SkillStoneUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_SkillStoneUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_SkillStoneUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_SkillStoneUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_SkillStoneUpdatePush.Merge(m, src)
}
func (m *Bag_SkillStoneUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *Bag_SkillStoneUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_SkillStoneUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_SkillStoneUpdatePush proto.InternalMessageInfo

func (m *Bag_SkillStoneUpdatePush) GetSkillStones() []*models.SkillStone {
	if m != nil {
		return m.SkillStones
	}
	return nil
}

func (*Bag_SkillStoneUpdatePush) XXX_MessageName() string {
	return "service.Bag.SkillStoneUpdatePush"
}

// 符文改变
type Bag_RuneUpdatePush struct {
	Runes []*models.TalentRune `protobuf:"bytes,1,rep,name=runes,proto3" json:"runes,omitempty"`
}

func (m *Bag_RuneUpdatePush) Reset()      { *m = Bag_RuneUpdatePush{} }
func (*Bag_RuneUpdatePush) ProtoMessage() {}
func (*Bag_RuneUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 41}
}
func (m *Bag_RuneUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_RuneUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_RuneUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_RuneUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_RuneUpdatePush.Merge(m, src)
}
func (m *Bag_RuneUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *Bag_RuneUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_RuneUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_RuneUpdatePush proto.InternalMessageInfo

func (m *Bag_RuneUpdatePush) GetRunes() []*models.TalentRune {
	if m != nil {
		return m.Runes
	}
	return nil
}

func (*Bag_RuneUpdatePush) XXX_MessageName() string {
	return "service.Bag.RuneUpdatePush"
}

// 符文摧毁
type Bag_RuneDestroyedPush struct {
	RuneIds []string `protobuf:"bytes,1,rep,name=rune_ids,json=runeIds,proto3" json:"rune_ids,omitempty"`
}

func (m *Bag_RuneDestroyedPush) Reset()      { *m = Bag_RuneDestroyedPush{} }
func (*Bag_RuneDestroyedPush) ProtoMessage() {}
func (*Bag_RuneDestroyedPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5ae04db0e52a590, []int{0, 42}
}
func (m *Bag_RuneDestroyedPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag_RuneDestroyedPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag_RuneDestroyedPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag_RuneDestroyedPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag_RuneDestroyedPush.Merge(m, src)
}
func (m *Bag_RuneDestroyedPush) XXX_Size() int {
	return m.Size()
}
func (m *Bag_RuneDestroyedPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag_RuneDestroyedPush.DiscardUnknown(m)
}

var xxx_messageInfo_Bag_RuneDestroyedPush proto.InternalMessageInfo

func (m *Bag_RuneDestroyedPush) GetRuneIds() []string {
	if m != nil {
		return m.RuneIds
	}
	return nil
}

func (*Bag_RuneDestroyedPush) XXX_MessageName() string {
	return "service.Bag.RuneDestroyedPush"
}
func init() {
	proto.RegisterEnum("service.BagErrorCode", BagErrorCode_name, BagErrorCode_value)
	proto.RegisterType((*Bag)(nil), "service.Bag")
	proto.RegisterType((*Bag_GetBagInfoRequest)(nil), "service.Bag.GetBagInfoRequest")
	proto.RegisterType((*Bag_GetBagInfoResponse)(nil), "service.Bag.GetBagInfoResponse")
	proto.RegisterType((*Bag_GetItemRequest)(nil), "service.Bag.GetItemRequest")
	proto.RegisterType((*Bag_GetItemResponse)(nil), "service.Bag.GetItemResponse")
	proto.RegisterType((*Bag_UseItemRequest)(nil), "service.Bag.UseItemRequest")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Bag.UseItemRequest.ChooseEntry")
	proto.RegisterType((*Bag_UseItemResponse)(nil), "service.Bag.UseItemResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Bag.UseItemResponse.ItemsEntry")
	proto.RegisterType((*Bag_SellThingsRequest)(nil), "service.Bag.SellThingsRequest")
	proto.RegisterMapType((map[string]int64)(nil), "service.Bag.SellThingsRequest.EquipsEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Bag.SellThingsRequest.ItemsEntry")
	proto.RegisterType((*Bag_SellThingsResponse)(nil), "service.Bag.SellThingsResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Bag.SellThingsResponse.ItemsEntry")
	proto.RegisterType((*Bag_AddItemsRequest)(nil), "service.Bag.AddItemsRequest")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Bag.AddItemsRequest.ItemsEntry")
	proto.RegisterType((*Bag_AddItemsResponse)(nil), "service.Bag.AddItemsResponse")
	proto.RegisterType((*Bag_AddItemRequest)(nil), "service.Bag.AddItemRequest")
	proto.RegisterType((*Bag_AddItemResponse)(nil), "service.Bag.AddItemResponse")
	proto.RegisterType((*Bag_AddItemsEvent)(nil), "service.Bag.AddItemsEvent")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Bag.AddItemsEvent.ItemsEntry")
	proto.RegisterType((*Bag_AddItemEvent)(nil), "service.Bag.AddItemEvent")
	proto.RegisterType((*Bag_SubItemEvent)(nil), "service.Bag.SubItemEvent")
	proto.RegisterType((*Bag_GetBagConfigRequest)(nil), "service.Bag.GetBagConfigRequest")
	proto.RegisterType((*Bag_GetBagConfigResponse)(nil), "service.Bag.GetBagConfigResponse")
	proto.RegisterType((*Bag_SaveBagConfigRequest)(nil), "service.Bag.SaveBagConfigRequest")
	proto.RegisterType((*Bag_SaveBagConfigResponse)(nil), "service.Bag.SaveBagConfigResponse")
	proto.RegisterType((*Bag_DiamondExchangeBoundRequest)(nil), "service.Bag.DiamondExchangeBoundRequest")
	proto.RegisterType((*Bag_DiamondExchangeBoundResponse)(nil), "service.Bag.DiamondExchangeBoundResponse")
	proto.RegisterType((*Bag_SynthesisItemRequest)(nil), "service.Bag.SynthesisItemRequest")
	proto.RegisterType((*Bag_SynthesisItemResponse)(nil), "service.Bag.SynthesisItemResponse")
	proto.RegisterType((*Bag_ExpandCapacityRequest)(nil), "service.Bag.ExpandCapacityRequest")
	proto.RegisterType((*Bag_ExpandCapacityResponse)(nil), "service.Bag.ExpandCapacityResponse")
	proto.RegisterType((*Bag_ExpandCapacityImmediatelyRequest)(nil), "service.Bag.ExpandCapacityImmediatelyRequest")
	proto.RegisterType((*Bag_ExpandCapacityImmediatelyResponse)(nil), "service.Bag.ExpandCapacityImmediatelyResponse")
	proto.RegisterType((*Bag_CheatAddItemRequest)(nil), "service.Bag.CheatAddItemRequest")
	proto.RegisterType((*Bag_CheatAddItemResponse)(nil), "service.Bag.CheatAddItemResponse")
	proto.RegisterType((*Bag_CheatAddAllItemRequest)(nil), "service.Bag.CheatAddAllItemRequest")
	proto.RegisterType((*Bag_CheatAddAllItemResponse)(nil), "service.Bag.CheatAddAllItemResponse")
	proto.RegisterType((*Bag_CheatSetItemRequest)(nil), "service.Bag.CheatSetItemRequest")
	proto.RegisterType((*Bag_CheatSetItemResponse)(nil), "service.Bag.CheatSetItemResponse")
	proto.RegisterType((*Bag_CheatDeleteAllRequest)(nil), "service.Bag.CheatDeleteAllRequest")
	proto.RegisterType((*Bag_CheatDeleteAllResponse)(nil), "service.Bag.CheatDeleteAllResponse")
	proto.RegisterType((*Bag_ItemUpdatePush)(nil), "service.Bag.ItemUpdatePush")
	proto.RegisterType((*Bag_EquipGotPush)(nil), "service.Bag.EquipGotPush")
	proto.RegisterType((*Bag_EquipUpdatePush)(nil), "service.Bag.EquipUpdatePush")
	proto.RegisterType((*Bag_EquipDestroyedPush)(nil), "service.Bag.EquipDestroyedPush")
	proto.RegisterType((*Bag_RelicsUpdatePush)(nil), "service.Bag.RelicsUpdatePush")
	proto.RegisterType((*Bag_SkillStoneUpdatePush)(nil), "service.Bag.SkillStoneUpdatePush")
	proto.RegisterType((*Bag_RuneUpdatePush)(nil), "service.Bag.RuneUpdatePush")
	proto.RegisterType((*Bag_RuneDestroyedPush)(nil), "service.Bag.RuneDestroyedPush")
}

func init() { proto.RegisterFile("proto/service/bag.proto", fileDescriptor_e5ae04db0e52a590) }

var fileDescriptor_e5ae04db0e52a590 = []byte{
	// 1736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x73, 0x13, 0xd7,
	0x15, 0xb7, 0xac, 0x60, 0xc3, 0xb1, 0x91, 0x57, 0xd7, 0xb2, 0xb5, 0x5c, 0x12, 0xd5, 0x90, 0x69,
	0x63, 0x98, 0x44, 0x4e, 0xa0, 0x99, 0x24, 0x6e, 0x29, 0xb1, 0x6c, 0x0d, 0xf5, 0x0c, 0x66, 0x3a,
	0x12, 0xbc, 0xe4, 0xa1, 0x9e, 0xb5, 0xf6, 0x46, 0xde, 0x61, 0xb5, 0x2b, 0xb4, 0x57, 0x0e, 0x7e,
	0x0b, 0x61, 0x5c, 0x63, 0x15, 0x17, 0xcf, 0x00, 0x93, 0x74, 0xe2, 0xb6, 0x69, 0x80, 0x81, 0xa4,
	0x43, 0xf0, 0x04, 0x54, 0x1c, 0x52, 0x9c, 0xd7, 0x3c, 0x75, 0xf2, 0x98, 0xc7, 0xd6, 0x78, 0x65,
	0xf9, 0xad, 0x7f, 0x42, 0x67, 0xef, 0x87, 0xa4, 0x95, 0xcd, 0x47, 0x80, 0x37, 0xdf, 0x73, 0x7e,
	0xbf, 0xdf, 0xf9, 0xb8, 0x47, 0x7b, 0xcf, 0x18, 0xa2, 0xf9, 0x82, 0x4d, 0xed, 0x01, 0x87, 0x14,
	0xa6, 0x8c, 0x0c, 0x19, 0x98, 0xd0, 0xb2, 0x71, 0x66, 0x41, 0xed, 0xc2, 0x84, 0x7b, 0x39, 0x22,
	0x67, 0xeb, 0xc4, 0x74, 0xea, 0x00, 0x1c, 0x6d, 0xb2, 0x3b, 0x44, 0x38, 0x5e, 0xf4, 0x39, 0xc8,
	0xa9, 0xa2, 0x91, 0xcf, 0x11, 0x8b, 0x0a, 0xef, 0x2e, 0x9f, 0xb7, 0x40, 0x4c, 0x23, 0xe3, 0x6c,
	0xe9, 0xa2, 0x9a, 0x59, 0x63, 0xed, 0xfd, 0x77, 0x14, 0x82, 0x09, 0x2d, 0x8b, 0xbb, 0x21, 0x7c,
	0x84, 0xd0, 0x84, 0x96, 0x1d, 0xb5, 0xde, 0xb7, 0x53, 0xe4, 0x54, 0x91, 0x38, 0x14, 0x1f, 0x04,
	0xd4, 0x68, 0x74, 0xf2, 0xb6, 0xe5, 0x10, 0xf4, 0x12, 0x04, 0x27, 0xb4, 0xac, 0x1a, 0xe8, 0x0b,
	0xf4, 0x77, 0x1c, 0xe8, 0x88, 0x73, 0xd5, 0x78, 0x42, 0xcb, 0xa6, 0x3c, 0x3b, 0xde, 0x07, 0xa1,
	0x23, 0x84, 0x8e, 0x52, 0x92, 0x13, 0x32, 0x28, 0x0a, 0xed, 0x06, 0x25, 0xb9, 0x71, 0x43, 0x67,
	0xa4, 0x60, 0xaa, 0xcd, 0x3b, 0x8e, 0xea, 0xf8, 0x20, 0x74, 0xd5, 0xa0, 0x42, 0xbc, 0x0f, 0x5e,
	0xf0, 0x9c, 0x42, 0xbd, 0x53, 0xaa, 0x33, 0x0c, 0xf3, 0xe0, 0x3b, 0xad, 0x10, 0x3a, 0xe1, 0x90,
	0x27, 0x09, 0x80, 0x22, 0xb0, 0x2d, 0x63, 0x17, 0x2d, 0xaa, 0xb6, 0x32, 0x33, 0x3f, 0xa0, 0xc3,
	0xd0, 0x96, 0x99, 0xb4, 0x6d, 0x87, 0xa8, 0xc1, 0xbe, 0x60, 0x7f, 0xc7, 0x81, 0x57, 0xe2, 0xe2,
	0x4a, 0xbc, 0x22, 0xe2, 0x7e, 0xed, 0xf8, 0x30, 0x43, 0x26, 0x2d, 0x5a, 0x98, 0x4e, 0x09, 0x1a,
	0x7e, 0x07, 0x3a, 0x1a, 0xcc, 0x48, 0x81, 0xe0, 0x49, 0x32, 0x2d, 0x42, 0x7b, 0x7f, 0x7a, 0x71,
	0xa7, 0x34, 0xb3, 0x48, 0x64, 0x5c, 0x76, 0x18, 0x6c, 0x7d, 0x3b, 0x30, 0xf8, 0xc1, 0x47, 0x65,
	0xd5, 0x61, 0x0d, 0x44, 0x5d, 0xc9, 0x42, 0x21, 0xa1, 0x65, 0x8f, 0xd9, 0x34, 0x69, 0xd9, 0xc5,
	0xec, 0x24, 0x52, 0xa4, 0x21, 0x5d, 0xcc, 0x4c, 0x7a, 0x39, 0xa0, 0x08, 0xb7, 0xf0, 0x60, 0xc7,
	0x6c, 0x3a, 0xa6, 0xd1, 0x4c, 0x0d, 0x37, 0x6a, 0x4d, 0x69, 0xa6, 0xa1, 0x9f, 0x70, 0x08, 0x0a,
	0x09, 0x9c, 0x96, 0x3f, 0x6a, 0xe4, 0x0c, 0x8a, 0xc2, 0x75, 0xe9, 0xd3, 0x99, 0x49, 0xcd, 0xca,
	0x12, 0x5c, 0x0e, 0x40, 0x57, 0xad, 0x34, 0xd1, 0xec, 0x43, 0xb0, 0xcd, 0x6b, 0x94, 0xa3, 0x06,
	0x1e, 0xd5, 0x07, 0x0e, 0x66, 0x57, 0xe0, 0xf0, 0x3e, 0x70, 0x16, 0xda, 0x07, 0x6d, 0x6c, 0x08,
	0x1d, 0xb5, 0x95, 0xf1, 0xc3, 0xf2, 0xb6, 0x92, 0x72, 0x34, 0x53, 0x02, 0x80, 0xdf, 0x06, 0xa8,
	0xf3, 0x7f, 0x4a, 0xc3, 0xf0, 0xb7, 0xad, 0x10, 0x4e, 0x13, 0xd3, 0x3c, 0x3e, 0x69, 0x58, 0x59,
	0x47, 0xde, 0xf8, 0x61, 0x7f, 0xe6, 0xfb, 0x7c, 0x99, 0x6f, 0x82, 0x6f, 0x91, 0x7b, 0xa2, 0x29,
	0xf7, 0xfd, 0x8f, 0x51, 0x60, 0x25, 0x09, 0x89, 0x67, 0x2f, 0xea, 0x1d, 0xe8, 0x68, 0x10, 0x6c,
	0xa4, 0xee, 0x78, 0xdc, 0x00, 0xbd, 0xfa, 0x51, 0x59, 0xed, 0x7f, 0xd2, 0x01, 0xc2, 0x0b, 0x01,
	0x40, 0x8d, 0xc5, 0x88, 0x8b, 0x7f, 0xd7, 0xdf, 0xbe, 0x87, 0x17, 0xff, 0xb0, 0xbb, 0x7f, 0x86,
	0xda, 0x4b, 0x01, 0xe8, 0x1a, 0xd2, 0x75, 0xc6, 0x96, 0xd7, 0xf9, 0xc8, 0x41, 0x6c, 0x02, 0x3f,
	0xd7, 0x64, 0x10, 0x28, 0x75, 0x79, 0x5e, 0x2c, 0x3e, 0x0c, 0x21, 0x61, 0x7b, 0xba, 0xef, 0x0b,
	0x0e, 0xd7, 0x0a, 0xac, 0x69, 0xfe, 0x21, 0x00, 0x3b, 0x65, 0xa0, 0xe4, 0x14, 0xb1, 0x28, 0xfa,
	0x95, 0xbf, 0xe4, 0x9f, 0x6f, 0x59, 0x32, 0x83, 0x3e, 0xd7, 0x82, 0x0f, 0x41, 0xa7, 0x10, 0xe7,
	0x69, 0xfc, 0xc4, 0xd2, 0x0e, 0x41, 0x67, 0xba, 0x38, 0xf1, 0xd4, 0xf4, 0x1e, 0xe8, 0xe6, 0x0f,
	0xca, 0xb0, 0x6d, 0xbd, 0x6f, 0x64, 0xe5, 0x3b, 0x33, 0x04, 0x11, 0xbf, 0x59, 0x8c, 0xe9, 0x3e,
	0x68, 0xcb, 0x30, 0x8b, 0x78, 0x0e, 0xc2, 0x0d, 0x8f, 0x8d, 0x80, 0x0a, 0x00, 0x7e, 0x1d, 0x22,
	0x69, 0x6d, 0x8a, 0x34, 0x4b, 0x23, 0x15, 0xda, 0x4f, 0x15, 0x35, 0xd3, 0xa0, 0xb2, 0x3f, 0xf2,
	0x88, 0xa3, 0xd0, 0xd3, 0xc4, 0x10, 0x77, 0x35, 0x00, 0xbb, 0x47, 0x0c, 0x2d, 0x67, 0x5b, 0xba,
	0xfc, 0x78, 0x26, 0xec, 0xa2, 0xa5, 0x4b, 0x45, 0x05, 0x82, 0x56, 0x31, 0x27, 0xbb, 0x6d, 0x15,
	0x73, 0x38, 0x06, 0x2f, 0x6e, 0x4d, 0x10, 0x82, 0x43, 0x10, 0x49, 0x4f, 0x5b, 0x74, 0x92, 0x38,
	0x86, 0xf3, 0x44, 0x63, 0x25, 0x42, 0xb4, 0xd6, 0x43, 0x78, 0xc9, 0xfa, 0x25, 0x84, 0x76, 0x14,
	0x7a, 0x92, 0xa7, 0xf3, 0x9a, 0xa5, 0x0f, 0x6b, 0x79, 0x2d, 0x63, 0xd0, 0x69, 0xd9, 0xd3, 0xdf,
	0x43, 0x6f, 0xb3, 0x43, 0x74, 0xf5, 0x65, 0xd8, 0x69, 0x6a, 0x94, 0x1a, 0x19, 0x32, 0xce, 0xaf,
	0x88, 0x07, 0xef, 0x14, 0xc6, 0x61, 0xf6, 0x46, 0xfe, 0x0c, 0x3a, 0x8a, 0x96, 0x69, 0x67, 0x4e,
	0x8e, 0x53, 0x23, 0x27, 0xe7, 0x08, 0xb8, 0xe9, 0xb8, 0x91, 0x23, 0x78, 0x2f, 0xf4, 0xf9, 0xf5,
	0x47, 0x73, 0x39, 0xa2, 0x1b, 0x1a, 0x25, 0x66, 0x2d, 0x87, 0xc3, 0xb0, 0xe7, 0x11, 0x18, 0x91,
	0x0e, 0x86, 0xed, 0x19, 0xe1, 0x16, 0x99, 0xd4, 0xce, 0x78, 0x04, 0xba, 0x87, 0x27, 0x89, 0x46,
	0x9f, 0xed, 0xf7, 0xd8, 0x0b, 0x11, 0xbf, 0x8a, 0xe8, 0xdd, 0xbb, 0xd0, 0x2b, 0xed, 0x43, 0xa6,
	0xd9, 0x18, 0x40, 0x81, 0x20, 0x9d, 0xce, 0xcb, 0x3b, 0xa6, 0xd3, 0xf9, 0x87, 0x28, 0xef, 0x82,
	0xe8, 0x26, 0x05, 0x21, 0x2e, 0x53, 0x4f, 0x3f, 0xd9, 0x2e, 0xf4, 0x98, 0xd4, 0xd3, 0xfe, 0x35,
	0xc9, 0xbb, 0x76, 0x66, 0x1f, 0x21, 0x26, 0xa1, 0x64, 0xc8, 0x34, 0x65, 0xcb, 0x55, 0x51, 0x53,
	0x83, 0x43, 0x50, 0x7e, 0x09, 0x21, 0x4f, 0xe2, 0x44, 0x5e, 0xd7, 0x28, 0xf9, 0x5d, 0xd1, 0x99,
	0x44, 0x7b, 0xfd, 0x9f, 0x20, 0xff, 0xb2, 0x25, 0xbe, 0x34, 0x43, 0xd0, 0xc9, 0x5e, 0xaa, 0x23,
	0x36, 0x65, 0x9c, 0x37, 0x00, 0x6a, 0x8b, 0xa7, 0x24, 0x6e, 0xf1, 0xee, 0x37, 0x80, 0xf0, 0x08,
	0x74, 0x31, 0x47, 0x43, 0xe4, 0xa7, 0x50, 0x19, 0x00, 0xc4, 0x1c, 0x23, 0xc4, 0xa1, 0x05, 0x7b,
	0x9a, 0xe8, 0x4c, 0x68, 0x17, 0x6c, 0x67, 0x18, 0xde, 0xcf, 0x60, 0xff, 0x8e, 0x54, 0x3b, 0x3b,
	0x8f, 0xea, 0x78, 0x10, 0x94, 0x14, 0x5b, 0x82, 0x1b, 0xe2, 0xfe, 0x02, 0xda, 0xf8, 0x62, 0x2c,
	0x62, 0x86, 0x64, 0x4c, 0x8e, 0x4c, 0x09, 0x2f, 0x1e, 0x83, 0x48, 0xfa, 0xa4, 0x61, 0x9a, 0x69,
	0x6a, 0x5b, 0xa4, 0x81, 0xff, 0x26, 0x74, 0x3a, 0x9e, 0x7d, 0xdc, 0xf1, 0x1c, 0x52, 0x05, 0x49,
	0x95, 0x3a, 0x27, 0xd5, 0xe1, 0xd4, 0xfe, 0x76, 0xf0, 0x20, 0x84, 0x52, 0x45, 0x9f, 0x50, 0x3f,
	0x6c, 0x2b, 0x14, 0xb7, 0x50, 0x38, 0xce, 0x76, 0x73, 0x0f, 0x9c, 0xe2, 0x00, 0x1c, 0x87, 0xb0,
	0x77, 0xdc, 0x54, 0xb6, 0xe7, 0x1d, 0x37, 0x74, 0x47, 0x96, 0xed, 0x9d, 0x47, 0x75, 0x67, 0xff,
	0xd2, 0x76, 0xe8, 0x4c, 0x68, 0xd9, 0x64, 0xa1, 0x60, 0x17, 0x86, 0x6d, 0x9d, 0xa0, 0xd7, 0xa0,
	0x79, 0x4f, 0x50, 0x5a, 0xb0, 0x5a, 0x2a, 0xab, 0x11, 0x84, 0x36, 0xce, 0x5c, 0x74, 0x67, 0xee,
	0x56, 0x2e, 0x2f, 0x6d, 0xcc, 0x5e, 0x58, 0x5b, 0x9e, 0xaf, 0xfe, 0xf3, 0x36, 0x7a, 0x0b, 0x36,
	0x6d, 0x11, 0x4a, 0x00, 0xef, 0x29, 0x95, 0xd5, 0x97, 0xd0, 0xee, 0xea, 0xad, 0x6b, 0x9c, 0xe2,
	0x81, 0xcf, 0xde, 0x5f, 0xff, 0xf4, 0x4e, 0xe5, 0x4f, 0xd7, 0xd6, 0xee, 0x7f, 0xb7, 0x7e, 0xe9,
	0x06, 0x7a, 0x13, 0xb6, 0xdc, 0x56, 0x95, 0x56, 0xbc, 0xbb, 0x54, 0x56, 0xa3, 0xa8, 0x67, 0xe3,
	0xc3, 0xb9, 0xca, 0x1f, 0xbf, 0x58, 0x5b, 0xfe, 0xb2, 0x72, 0x79, 0x69, 0x6d, 0x79, 0xde, 0x3d,
	0xff, 0xcd, 0xc6, 0xcc, 0x3c, 0x8a, 0xc3, 0xa6, 0x75, 0x56, 0x09, 0xd6, 0xf2, 0xfb, 0xcb, 0x5f,
	0x2b, 0xb7, 0x2f, 0xf3, 0x00, 0x3c, 0x30, 0x7a, 0x15, 0x9a, 0x96, 0x5d, 0xe5, 0x05, 0x89, 0xae,
	0x9e, 0x3d, 0xef, 0x9e, 0x9f, 0x71, 0xbf, 0xfa, 0x66, 0x63, 0xf6, 0x82, 0x7b, 0xf7, 0xeb, 0xca,
	0xb7, 0x7f, 0x47, 0x03, 0xb0, 0x79, 0x15, 0x56, 0xb6, 0xf9, 0xcb, 0xe7, 0xb5, 0xac, 0xdd, 0xbb,
	0x5a, 0x99, 0xff, 0x1c, 0xbd, 0x05, 0xdd, 0x22, 0x1d, 0x4a, 0x72, 0x09, 0x62, 0xda, 0x1f, 0xbc,
	0x47, 0x0a, 0xb6, 0xd2, 0x86, 0x63, 0xa5, 0xb2, 0x8a, 0x91, 0xda, 0xdc, 0xb1, 0xb3, 0xf7, 0xd7,
	0x96, 0xef, 0x55, 0xef, 0xfc, 0x0d, 0xbd, 0x0e, 0xa8, 0x4e, 0x1c, 0xd6, 0x2c, 0xea, 0xad, 0x51,
	0x4a, 0x7b, 0x53, 0xa7, 0x3f, 0xfe, 0xac, 0x72, 0xfb, 0xb2, 0x7b, 0xe9, 0x2b, 0x77, 0xf6, 0x1e,
	0x1a, 0x90, 0x0d, 0xf3, 0x18, 0xbf, 0xd5, 0x9c, 0xe4, 0xe9, 0xbc, 0x51, 0x20, 0xba, 0xb2, 0x1d,
	0xf7, 0x94, 0xca, 0x6a, 0x18, 0x75, 0x71, 0x8e, 0x7b, 0xf7, 0xeb, 0xea, 0x77, 0xb3, 0x95, 0xc5,
	0xa6, 0x10, 0x5e, 0x41, 0xde, 0xa4, 0x2b, 0x3b, 0x36, 0x55, 0x53, 0xf9, 0xe4, 0x56, 0xf5, 0xca,
	0x8c, 0x7b, 0x75, 0x16, 0xc5, 0x65, 0x35, 0x0c, 0xca, 0x7a, 0x60, 0x38, 0x54, 0x01, 0x19, 0x81,
	0xc3, 0xbc, 0xcb, 0xb8, 0xf9, 0x89, 0xbb, 0x78, 0x03, 0x25, 0x41, 0xe5, 0x78, 0xfe, 0x7b, 0x60,
	0x2c, 0x56, 0x4b, 0x71, 0x42, 0xe9, 0xc0, 0xaf, 0x94, 0xca, 0xea, 0xcb, 0x68, 0x0f, 0x27, 0xb9,
	0x17, 0x4a, 0x1b, 0x67, 0x3e, 0x5e, 0x9f, 0xfb, 0xa2, 0x71, 0x14, 0x2a, 0x73, 0x57, 0x36, 0xfe,
	0x7c, 0xb5, 0x5e, 0x19, 0x97, 0xa9, 0xc5, 0xed, 0xac, 0x57, 0x26, 0x98, 0x22, 0xee, 0x1b, 0xd0,
	0xcb, 0x09, 0x63, 0x44, 0x37, 0x32, 0x86, 0x45, 0x6a, 0x94, 0x9d, 0xb5, 0x54, 0xe7, 0x6f, 0xb9,
	0x17, 0xcf, 0xd4, 0x29, 0xfb, 0xe5, 0xdc, 0x48, 0xca, 0xf0, 0x88, 0x12, 0xc2, 0x91, 0x52, 0x59,
	0x55, 0x50, 0x88, 0x83, 0xdd, 0xc5, 0x1b, 0x19, 0x7d, 0x6d, 0xf9, 0x26, 0x1a, 0x94, 0x6d, 0x90,
	0xd8, 0xa3, 0x64, 0x8a, 0x98, 0x4a, 0x97, 0x1c, 0xeb, 0xca, 0xe2, 0x97, 0xd5, 0x95, 0x15, 0xf7,
	0xdc, 0x92, 0x08, 0xc2, 0xe6, 0x6d, 0xfd, 0xe6, 0xdc, 0xfa, 0xbd, 0xeb, 0xe8, 0x37, 0x72, 0x82,
	0x24, 0x77, 0x4c, 0xcb, 0x2b, 0x8a, 0xec, 0x85, 0x7b, 0xff, 0xa2, 0x3b, 0x37, 0xef, 0x2e, 0x2e,
	0xb9, 0x9f, 0xae, 0xf0, 0xcb, 0xe5, 0xe4, 0xea, 0xad, 0x6b, 0x5c, 0x0b, 0xfd, 0x1a, 0x7a, 0xe4,
	0xbc, 0x5a, 0xc7, 0x6c, 0x5a, 0x7b, 0xc5, 0x95, 0xb0, 0x8c, 0xce, 0x35, 0x1a, 0x67, 0xb1, 0xfa,
	0xf9, 0x3f, 0xdc, 0x85, 0x73, 0x95, 0x73, 0x0b, 0xf5, 0xf9, 0x1d, 0xd3, 0x4e, 0xcb, 0x47, 0x54,
	0x41, 0xf2, 0xc6, 0xbd, 0xd1, 0x58, 0x59, 0xa9, 0x2c, 0x7e, 0xe8, 0x5e, 0xbd, 0xce, 0xc7, 0x1e,
	0x1d, 0x80, 0xa8, 0x18, 0x78, 0x42, 0xf4, 0x13, 0xec, 0xb9, 0x3e, 0xca, 0xdf, 0x75, 0xa5, 0x5b,
	0xb6, 0xd2, 0x9d, 0x39, 0x57, 0xbd, 0x7e, 0x65, 0xe3, 0xd2, 0x99, 0xca, 0x67, 0xff, 0x72, 0x6f,
	0x2e, 0x24, 0x8e, 0xfd, 0xf8, 0xdf, 0x58, 0xcb, 0x8d, 0xd5, 0x58, 0xe0, 0xfb, 0xd5, 0x58, 0xe0,
	0x87, 0xd5, 0x58, 0xe0, 0x3f, 0xab, 0xb1, 0x40, 0x75, 0x35, 0xd6, 0xf2, 0xbf, 0xd5, 0x58, 0x60,
	0xe1, 0x41, 0xac, 0xe5, 0xfb, 0x07, 0xb1, 0xc0, 0x0f, 0x0f, 0x62, 0x2d, 0x3f, 0x3e, 0x88, 0xb5,
	0xbc, 0xd7, 0x97, 0xb1, 0x0d, 0xeb, 0x35, 0x6f, 0x5b, 0x25, 0x85, 0x81, 0x8c, 0x9d, 0xcb, 0xd9,
	0xd6, 0x80, 0xef, 0x7f, 0x1d, 0x13, 0x6d, 0xec, 0x78, 0xf0, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xc6, 0xd3, 0x6d, 0xfe, 0x03, 0x11, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_GetBagInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_GetBagInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_GetItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_GetItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_UseItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_UseItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_SellThingsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_SellThingsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_AddItemsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_AddItemsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_AddItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_AddItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_AddItemsEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_AddItemEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_SubItemEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_GetBagConfigRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_GetBagConfigResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_SaveBagConfigRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_SaveBagConfigResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_DiamondExchangeBoundRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_DiamondExchangeBoundResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_SynthesisItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_SynthesisItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_ExpandCapacityRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_ExpandCapacityResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_ExpandCapacityImmediatelyRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_ExpandCapacityImmediatelyResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_CheatAddItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_CheatAddItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_CheatAddAllItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_CheatAddAllItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_CheatSetItemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_CheatSetItemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_CheatDeleteAllRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_CheatDeleteAllResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_ItemUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_EquipGotPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_EquipUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_EquipDestroyedPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_RelicsUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_SkillStoneUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_RuneUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag_RuneDestroyedPush.Get().(proto.Message)
	})
}

var poolBag = &sync.Pool{New: func() interface{} { return &Bag{} }}

func (m *Bag) ReleasePool() { m.Reset(); poolBag.Put(m); m = nil }

var poolBag_GetBagInfoRequest = &sync.Pool{New: func() interface{} { return &Bag_GetBagInfoRequest{} }}

func (m *Bag_GetBagInfoRequest) ReleasePool() { m.Reset(); poolBag_GetBagInfoRequest.Put(m); m = nil }

var poolBag_GetBagInfoResponse = &sync.Pool{New: func() interface{} { return &Bag_GetBagInfoResponse{} }}

func (m *Bag_GetBagInfoResponse) ReleasePool() { m.Reset(); poolBag_GetBagInfoResponse.Put(m); m = nil }

var poolBag_GetItemRequest = &sync.Pool{New: func() interface{} { return &Bag_GetItemRequest{} }}

func (m *Bag_GetItemRequest) ReleasePool() { m.Reset(); poolBag_GetItemRequest.Put(m); m = nil }

var poolBag_GetItemResponse = &sync.Pool{New: func() interface{} { return &Bag_GetItemResponse{} }}

func (m *Bag_GetItemResponse) ReleasePool() { m.Reset(); poolBag_GetItemResponse.Put(m); m = nil }

var poolBag_UseItemRequest = &sync.Pool{New: func() interface{} { return &Bag_UseItemRequest{} }}

func (m *Bag_UseItemRequest) ReleasePool() { m.Reset(); poolBag_UseItemRequest.Put(m); m = nil }

var poolBag_UseItemResponse = &sync.Pool{New: func() interface{} { return &Bag_UseItemResponse{} }}

func (m *Bag_UseItemResponse) ReleasePool() { m.Reset(); poolBag_UseItemResponse.Put(m); m = nil }

var poolBag_SellThingsRequest = &sync.Pool{New: func() interface{} { return &Bag_SellThingsRequest{} }}

func (m *Bag_SellThingsRequest) ReleasePool() { m.Reset(); poolBag_SellThingsRequest.Put(m); m = nil }

var poolBag_SellThingsResponse = &sync.Pool{New: func() interface{} { return &Bag_SellThingsResponse{} }}

func (m *Bag_SellThingsResponse) ReleasePool() { m.Reset(); poolBag_SellThingsResponse.Put(m); m = nil }

var poolBag_AddItemsRequest = &sync.Pool{New: func() interface{} { return &Bag_AddItemsRequest{} }}

func (m *Bag_AddItemsRequest) ReleasePool() { m.Reset(); poolBag_AddItemsRequest.Put(m); m = nil }

var poolBag_AddItemsResponse = &sync.Pool{New: func() interface{} { return &Bag_AddItemsResponse{} }}

func (m *Bag_AddItemsResponse) ReleasePool() { m.Reset(); poolBag_AddItemsResponse.Put(m); m = nil }

var poolBag_AddItemRequest = &sync.Pool{New: func() interface{} { return &Bag_AddItemRequest{} }}

func (m *Bag_AddItemRequest) ReleasePool() { m.Reset(); poolBag_AddItemRequest.Put(m); m = nil }

var poolBag_AddItemResponse = &sync.Pool{New: func() interface{} { return &Bag_AddItemResponse{} }}

func (m *Bag_AddItemResponse) ReleasePool() { m.Reset(); poolBag_AddItemResponse.Put(m); m = nil }

var poolBag_AddItemsEvent = &sync.Pool{New: func() interface{} { return &Bag_AddItemsEvent{} }}

func (m *Bag_AddItemsEvent) ReleasePool() { m.Reset(); poolBag_AddItemsEvent.Put(m); m = nil }

var poolBag_AddItemEvent = &sync.Pool{New: func() interface{} { return &Bag_AddItemEvent{} }}

func (m *Bag_AddItemEvent) ReleasePool() { m.Reset(); poolBag_AddItemEvent.Put(m); m = nil }

var poolBag_SubItemEvent = &sync.Pool{New: func() interface{} { return &Bag_SubItemEvent{} }}

func (m *Bag_SubItemEvent) ReleasePool() { m.Reset(); poolBag_SubItemEvent.Put(m); m = nil }

var poolBag_GetBagConfigRequest = &sync.Pool{New: func() interface{} { return &Bag_GetBagConfigRequest{} }}

func (m *Bag_GetBagConfigRequest) ReleasePool() {
	m.Reset()
	poolBag_GetBagConfigRequest.Put(m)
	m = nil
}

var poolBag_GetBagConfigResponse = &sync.Pool{New: func() interface{} { return &Bag_GetBagConfigResponse{} }}

func (m *Bag_GetBagConfigResponse) ReleasePool() {
	m.Reset()
	poolBag_GetBagConfigResponse.Put(m)
	m = nil
}

var poolBag_SaveBagConfigRequest = &sync.Pool{New: func() interface{} { return &Bag_SaveBagConfigRequest{} }}

func (m *Bag_SaveBagConfigRequest) ReleasePool() {
	m.Reset()
	poolBag_SaveBagConfigRequest.Put(m)
	m = nil
}

var poolBag_SaveBagConfigResponse = &sync.Pool{New: func() interface{} { return &Bag_SaveBagConfigResponse{} }}

func (m *Bag_SaveBagConfigResponse) ReleasePool() {
	m.Reset()
	poolBag_SaveBagConfigResponse.Put(m)
	m = nil
}

var poolBag_DiamondExchangeBoundRequest = &sync.Pool{New: func() interface{} { return &Bag_DiamondExchangeBoundRequest{} }}

func (m *Bag_DiamondExchangeBoundRequest) ReleasePool() {
	m.Reset()
	poolBag_DiamondExchangeBoundRequest.Put(m)
	m = nil
}

var poolBag_DiamondExchangeBoundResponse = &sync.Pool{New: func() interface{} { return &Bag_DiamondExchangeBoundResponse{} }}

func (m *Bag_DiamondExchangeBoundResponse) ReleasePool() {
	m.Reset()
	poolBag_DiamondExchangeBoundResponse.Put(m)
	m = nil
}

var poolBag_SynthesisItemRequest = &sync.Pool{New: func() interface{} { return &Bag_SynthesisItemRequest{} }}

func (m *Bag_SynthesisItemRequest) ReleasePool() {
	m.Reset()
	poolBag_SynthesisItemRequest.Put(m)
	m = nil
}

var poolBag_SynthesisItemResponse = &sync.Pool{New: func() interface{} { return &Bag_SynthesisItemResponse{} }}

func (m *Bag_SynthesisItemResponse) ReleasePool() {
	m.Reset()
	poolBag_SynthesisItemResponse.Put(m)
	m = nil
}

var poolBag_ExpandCapacityRequest = &sync.Pool{New: func() interface{} { return &Bag_ExpandCapacityRequest{} }}

func (m *Bag_ExpandCapacityRequest) ReleasePool() {
	m.Reset()
	poolBag_ExpandCapacityRequest.Put(m)
	m = nil
}

var poolBag_ExpandCapacityResponse = &sync.Pool{New: func() interface{} { return &Bag_ExpandCapacityResponse{} }}

func (m *Bag_ExpandCapacityResponse) ReleasePool() {
	m.Reset()
	poolBag_ExpandCapacityResponse.Put(m)
	m = nil
}

var poolBag_ExpandCapacityImmediatelyRequest = &sync.Pool{New: func() interface{} { return &Bag_ExpandCapacityImmediatelyRequest{} }}

func (m *Bag_ExpandCapacityImmediatelyRequest) ReleasePool() {
	m.Reset()
	poolBag_ExpandCapacityImmediatelyRequest.Put(m)
	m = nil
}

var poolBag_ExpandCapacityImmediatelyResponse = &sync.Pool{New: func() interface{} { return &Bag_ExpandCapacityImmediatelyResponse{} }}

func (m *Bag_ExpandCapacityImmediatelyResponse) ReleasePool() {
	m.Reset()
	poolBag_ExpandCapacityImmediatelyResponse.Put(m)
	m = nil
}

var poolBag_CheatAddItemRequest = &sync.Pool{New: func() interface{} { return &Bag_CheatAddItemRequest{} }}

func (m *Bag_CheatAddItemRequest) ReleasePool() {
	m.Reset()
	poolBag_CheatAddItemRequest.Put(m)
	m = nil
}

var poolBag_CheatAddItemResponse = &sync.Pool{New: func() interface{} { return &Bag_CheatAddItemResponse{} }}

func (m *Bag_CheatAddItemResponse) ReleasePool() {
	m.Reset()
	poolBag_CheatAddItemResponse.Put(m)
	m = nil
}

var poolBag_CheatAddAllItemRequest = &sync.Pool{New: func() interface{} { return &Bag_CheatAddAllItemRequest{} }}

func (m *Bag_CheatAddAllItemRequest) ReleasePool() {
	m.Reset()
	poolBag_CheatAddAllItemRequest.Put(m)
	m = nil
}

var poolBag_CheatAddAllItemResponse = &sync.Pool{New: func() interface{} { return &Bag_CheatAddAllItemResponse{} }}

func (m *Bag_CheatAddAllItemResponse) ReleasePool() {
	m.Reset()
	poolBag_CheatAddAllItemResponse.Put(m)
	m = nil
}

var poolBag_CheatSetItemRequest = &sync.Pool{New: func() interface{} { return &Bag_CheatSetItemRequest{} }}

func (m *Bag_CheatSetItemRequest) ReleasePool() {
	m.Reset()
	poolBag_CheatSetItemRequest.Put(m)
	m = nil
}

var poolBag_CheatSetItemResponse = &sync.Pool{New: func() interface{} { return &Bag_CheatSetItemResponse{} }}

func (m *Bag_CheatSetItemResponse) ReleasePool() {
	m.Reset()
	poolBag_CheatSetItemResponse.Put(m)
	m = nil
}

var poolBag_CheatDeleteAllRequest = &sync.Pool{New: func() interface{} { return &Bag_CheatDeleteAllRequest{} }}

func (m *Bag_CheatDeleteAllRequest) ReleasePool() {
	m.Reset()
	poolBag_CheatDeleteAllRequest.Put(m)
	m = nil
}

var poolBag_CheatDeleteAllResponse = &sync.Pool{New: func() interface{} { return &Bag_CheatDeleteAllResponse{} }}

func (m *Bag_CheatDeleteAllResponse) ReleasePool() {
	m.Reset()
	poolBag_CheatDeleteAllResponse.Put(m)
	m = nil
}

var poolBag_ItemUpdatePush = &sync.Pool{New: func() interface{} { return &Bag_ItemUpdatePush{} }}

func (m *Bag_ItemUpdatePush) ReleasePool() { m.Reset(); poolBag_ItemUpdatePush.Put(m); m = nil }

var poolBag_EquipGotPush = &sync.Pool{New: func() interface{} { return &Bag_EquipGotPush{} }}

func (m *Bag_EquipGotPush) ReleasePool() { m.Reset(); poolBag_EquipGotPush.Put(m); m = nil }

var poolBag_EquipUpdatePush = &sync.Pool{New: func() interface{} { return &Bag_EquipUpdatePush{} }}

func (m *Bag_EquipUpdatePush) ReleasePool() { m.Reset(); poolBag_EquipUpdatePush.Put(m); m = nil }

var poolBag_EquipDestroyedPush = &sync.Pool{New: func() interface{} { return &Bag_EquipDestroyedPush{} }}

func (m *Bag_EquipDestroyedPush) ReleasePool() { m.Reset(); poolBag_EquipDestroyedPush.Put(m); m = nil }

var poolBag_RelicsUpdatePush = &sync.Pool{New: func() interface{} { return &Bag_RelicsUpdatePush{} }}

func (m *Bag_RelicsUpdatePush) ReleasePool() { m.Reset(); poolBag_RelicsUpdatePush.Put(m); m = nil }

var poolBag_SkillStoneUpdatePush = &sync.Pool{New: func() interface{} { return &Bag_SkillStoneUpdatePush{} }}

func (m *Bag_SkillStoneUpdatePush) ReleasePool() {
	m.Reset()
	poolBag_SkillStoneUpdatePush.Put(m)
	m = nil
}

var poolBag_RuneUpdatePush = &sync.Pool{New: func() interface{} { return &Bag_RuneUpdatePush{} }}

func (m *Bag_RuneUpdatePush) ReleasePool() { m.Reset(); poolBag_RuneUpdatePush.Put(m); m = nil }

var poolBag_RuneDestroyedPush = &sync.Pool{New: func() interface{} { return &Bag_RuneDestroyedPush{} }}

func (m *Bag_RuneDestroyedPush) ReleasePool() { m.Reset(); poolBag_RuneDestroyedPush.Put(m); m = nil }
func (x BagErrorCode) String() string {
	s, ok := BagErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Bag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag)
	if !ok {
		that2, ok := that.(Bag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_GetBagInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_GetBagInfoRequest)
	if !ok {
		that2, ok := that.(Bag_GetBagInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_GetBagInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_GetBagInfoResponse)
	if !ok {
		that2, ok := that.(Bag_GetBagInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bag.Equal(that1.Bag) {
		return false
	}
	return true
}
func (this *Bag_GetItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_GetItemRequest)
	if !ok {
		that2, ok := that.(Bag_GetItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	return true
}
func (this *Bag_GetItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_GetItemResponse)
	if !ok {
		that2, ok := that.(Bag_GetItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *Bag_UseItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_UseItemRequest)
	if !ok {
		that2, ok := that.(Bag_UseItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.Choose) != len(that1.Choose) {
		return false
	}
	for i := range this.Choose {
		if this.Choose[i] != that1.Choose[i] {
			return false
		}
	}
	return true
}
func (this *Bag_UseItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_UseItemResponse)
	if !ok {
		that2, ok := that.(Bag_UseItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	if len(this.Equips) != len(that1.Equips) {
		return false
	}
	for i := range this.Equips {
		if !this.Equips[i].Equal(that1.Equips[i]) {
			return false
		}
	}
	return true
}
func (this *Bag_SellThingsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_SellThingsRequest)
	if !ok {
		that2, ok := that.(Bag_SellThingsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	if len(this.Equips) != len(that1.Equips) {
		return false
	}
	for i := range this.Equips {
		if this.Equips[i] != that1.Equips[i] {
			return false
		}
	}
	return true
}
func (this *Bag_SellThingsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_SellThingsResponse)
	if !ok {
		that2, ok := that.(Bag_SellThingsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	return true
}
func (this *Bag_AddItemsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_AddItemsRequest)
	if !ok {
		that2, ok := that.(Bag_AddItemsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	return true
}
func (this *Bag_AddItemsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_AddItemsResponse)
	if !ok {
		that2, ok := that.(Bag_AddItemsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_AddItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_AddItemRequest)
	if !ok {
		that2, ok := that.(Bag_AddItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Bag_AddItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_AddItemResponse)
	if !ok {
		that2, ok := that.(Bag_AddItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_AddItemsEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_AddItemsEvent)
	if !ok {
		that2, ok := that.(Bag_AddItemsEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	return true
}
func (this *Bag_AddItemEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_AddItemEvent)
	if !ok {
		that2, ok := that.(Bag_AddItemEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Bag_SubItemEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_SubItemEvent)
	if !ok {
		that2, ok := that.(Bag_SubItemEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Bag_GetBagConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_GetBagConfigRequest)
	if !ok {
		that2, ok := that.(Bag_GetBagConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_GetBagConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_GetBagConfigResponse)
	if !ok {
		that2, ok := that.(Bag_GetBagConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *Bag_SaveBagConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_SaveBagConfigRequest)
	if !ok {
		that2, ok := that.(Bag_SaveBagConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Quality != that1.Quality {
		return false
	}
	return true
}
func (this *Bag_SaveBagConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_SaveBagConfigResponse)
	if !ok {
		that2, ok := that.(Bag_SaveBagConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_DiamondExchangeBoundRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_DiamondExchangeBoundRequest)
	if !ok {
		that2, ok := that.(Bag_DiamondExchangeBoundRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *Bag_DiamondExchangeBoundResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_DiamondExchangeBoundResponse)
	if !ok {
		that2, ok := that.(Bag_DiamondExchangeBoundResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_SynthesisItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_SynthesisItemRequest)
	if !ok {
		that2, ok := that.(Bag_SynthesisItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *Bag_SynthesisItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_SynthesisItemResponse)
	if !ok {
		that2, ok := that.(Bag_SynthesisItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_ExpandCapacityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_ExpandCapacityRequest)
	if !ok {
		that2, ok := that.(Bag_ExpandCapacityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_ExpandCapacityResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_ExpandCapacityResponse)
	if !ok {
		that2, ok := that.(Bag_ExpandCapacityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LatticeCount != that1.LatticeCount {
		return false
	}
	if this.UnlockTime != that1.UnlockTime {
		return false
	}
	return true
}
func (this *Bag_ExpandCapacityImmediatelyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_ExpandCapacityImmediatelyRequest)
	if !ok {
		that2, ok := that.(Bag_ExpandCapacityImmediatelyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_ExpandCapacityImmediatelyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_ExpandCapacityImmediatelyResponse)
	if !ok {
		that2, ok := that.(Bag_ExpandCapacityImmediatelyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Capacity != that1.Capacity {
		return false
	}
	return true
}
func (this *Bag_CheatAddItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_CheatAddItemRequest)
	if !ok {
		that2, ok := that.(Bag_CheatAddItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Bag_CheatAddItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_CheatAddItemResponse)
	if !ok {
		that2, ok := that.(Bag_CheatAddItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_CheatAddAllItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_CheatAddAllItemRequest)
	if !ok {
		that2, ok := that.(Bag_CheatAddAllItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Bag_CheatAddAllItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_CheatAddAllItemResponse)
	if !ok {
		that2, ok := that.(Bag_CheatAddAllItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_CheatSetItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_CheatSetItemRequest)
	if !ok {
		that2, ok := that.(Bag_CheatSetItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Bag_CheatSetItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_CheatSetItemResponse)
	if !ok {
		that2, ok := that.(Bag_CheatSetItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_CheatDeleteAllRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_CheatDeleteAllRequest)
	if !ok {
		that2, ok := that.(Bag_CheatDeleteAllRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_CheatDeleteAllResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_CheatDeleteAllResponse)
	if !ok {
		that2, ok := that.(Bag_CheatDeleteAllResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Bag_ItemUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_ItemUpdatePush)
	if !ok {
		that2, ok := that.(Bag_ItemUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *Bag_EquipGotPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_EquipGotPush)
	if !ok {
		that2, ok := that.(Bag_EquipGotPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Equipments) != len(that1.Equipments) {
		return false
	}
	for i := range this.Equipments {
		if !this.Equipments[i].Equal(that1.Equipments[i]) {
			return false
		}
	}
	return true
}
func (this *Bag_EquipUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_EquipUpdatePush)
	if !ok {
		that2, ok := that.(Bag_EquipUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Equipments) != len(that1.Equipments) {
		return false
	}
	for i := range this.Equipments {
		if !this.Equipments[i].Equal(that1.Equipments[i]) {
			return false
		}
	}
	return true
}
func (this *Bag_EquipDestroyedPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_EquipDestroyedPush)
	if !ok {
		that2, ok := that.(Bag_EquipDestroyedPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EquipId) != len(that1.EquipId) {
		return false
	}
	for i := range this.EquipId {
		if this.EquipId[i] != that1.EquipId[i] {
			return false
		}
	}
	return true
}
func (this *Bag_RelicsUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_RelicsUpdatePush)
	if !ok {
		that2, ok := that.(Bag_RelicsUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Relics) != len(that1.Relics) {
		return false
	}
	for i := range this.Relics {
		if !this.Relics[i].Equal(that1.Relics[i]) {
			return false
		}
	}
	return true
}
func (this *Bag_SkillStoneUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_SkillStoneUpdatePush)
	if !ok {
		that2, ok := that.(Bag_SkillStoneUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SkillStones) != len(that1.SkillStones) {
		return false
	}
	for i := range this.SkillStones {
		if !this.SkillStones[i].Equal(that1.SkillStones[i]) {
			return false
		}
	}
	return true
}
func (this *Bag_RuneUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_RuneUpdatePush)
	if !ok {
		that2, ok := that.(Bag_RuneUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Runes) != len(that1.Runes) {
		return false
	}
	for i := range this.Runes {
		if !this.Runes[i].Equal(that1.Runes[i]) {
			return false
		}
	}
	return true
}
func (this *Bag_RuneDestroyedPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag_RuneDestroyedPush)
	if !ok {
		that2, ok := that.(Bag_RuneDestroyedPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RuneIds) != len(that1.RuneIds) {
		return false
	}
	for i := range this.RuneIds {
		if this.RuneIds[i] != that1.RuneIds[i] {
			return false
		}
	}
	return true
}
func (m *Bag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_GetBagInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_GetBagInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_GetBagInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_GetBagInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_GetBagInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_GetBagInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bag != nil {
		{
			size, err := m.Bag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBag(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bag_GetItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_GetItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_GetItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_GetItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_GetItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_GetItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBag(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bag_UseItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_UseItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_UseItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Choose) > 0 {
		for k := range m.Choose {
			v := m.Choose[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBag(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Count != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_UseItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_UseItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_UseItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Equips) > 0 {
		for iNdEx := len(m.Equips) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equips[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBag(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_SellThingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_SellThingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_SellThingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Equips) > 0 {
		for k := range m.Equips {
			v := m.Equips[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBag(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBag(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_SellThingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_SellThingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_SellThingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBag(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_AddItemsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_AddItemsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_AddItemsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBag(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_AddItemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_AddItemsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_AddItemsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_AddItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_AddItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_AddItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_AddItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_AddItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_AddItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_AddItemsEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_AddItemsEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_AddItemsEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBag(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_AddItemEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_AddItemEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_AddItemEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_SubItemEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_SubItemEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_SubItemEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_GetBagConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_GetBagConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_GetBagConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_GetBagConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_GetBagConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_GetBagConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBag(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bag_SaveBagConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_SaveBagConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_SaveBagConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quality != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_SaveBagConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_SaveBagConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_SaveBagConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_DiamondExchangeBoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_DiamondExchangeBoundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_DiamondExchangeBoundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_DiamondExchangeBoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_DiamondExchangeBoundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_DiamondExchangeBoundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_SynthesisItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_SynthesisItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_SynthesisItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_SynthesisItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_SynthesisItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_SynthesisItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_ExpandCapacityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_ExpandCapacityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_ExpandCapacityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_ExpandCapacityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_ExpandCapacityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_ExpandCapacityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnlockTime != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.UnlockTime))
		i--
		dAtA[i] = 0x10
	}
	if m.LatticeCount != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.LatticeCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_ExpandCapacityImmediatelyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_ExpandCapacityImmediatelyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_ExpandCapacityImmediatelyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_ExpandCapacityImmediatelyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_ExpandCapacityImmediatelyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_ExpandCapacityImmediatelyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Capacity != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_CheatAddItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_CheatAddItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_CheatAddItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_CheatAddItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_CheatAddItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_CheatAddItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_CheatAddAllItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_CheatAddAllItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_CheatAddAllItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Typ != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_CheatAddAllItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_CheatAddAllItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_CheatAddAllItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_CheatSetItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_CheatSetItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_CheatSetItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bag_CheatSetItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_CheatSetItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_CheatSetItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_CheatDeleteAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_CheatDeleteAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_CheatDeleteAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_CheatDeleteAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_CheatDeleteAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_CheatDeleteAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Bag_ItemUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_ItemUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_ItemUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_EquipGotPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_EquipGotPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_EquipGotPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Equipments) > 0 {
		for iNdEx := len(m.Equipments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equipments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_EquipUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_EquipUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_EquipUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Equipments) > 0 {
		for iNdEx := len(m.Equipments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equipments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_EquipDestroyedPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_EquipDestroyedPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_EquipDestroyedPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EquipId) > 0 {
		for iNdEx := len(m.EquipId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EquipId[iNdEx])
			copy(dAtA[i:], m.EquipId[iNdEx])
			i = encodeVarintBag(dAtA, i, uint64(len(m.EquipId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_RelicsUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_RelicsUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_RelicsUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relics) > 0 {
		for iNdEx := len(m.Relics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_SkillStoneUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_SkillStoneUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_SkillStoneUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SkillStones) > 0 {
		for iNdEx := len(m.SkillStones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SkillStones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_RuneUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_RuneUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_RuneUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Runes) > 0 {
		for iNdEx := len(m.Runes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Runes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bag_RuneDestroyedPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag_RuneDestroyedPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag_RuneDestroyedPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuneIds) > 0 {
		for iNdEx := len(m.RuneIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RuneIds[iNdEx])
			copy(dAtA[i:], m.RuneIds[iNdEx])
			i = encodeVarintBag(dAtA, i, uint64(len(m.RuneIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBag(dAtA []byte, offset int, v uint64) int {
	offset -= sovBag(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Bag) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_GetBagInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_GetBagInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("bag")
	w.RawByte('"')
	w.RawByte(':')
	m.Bag.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_GetItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_GetItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("item")
	w.RawByte('"')
	w.RawByte(':')
	m.Item.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_UseItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("choose")
	w.RawByte('"')
	w.RawByte(':')
	if m.Choose == nil {
		w.RawString("null")
	} else if len(m.Choose) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlChoose := len(m.Choose)
		for k, v := range m.Choose {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlChoose--
			if mlChoose != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_UseItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equips")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equips == nil {
		w.RawString("null")
	} else if len(m.Equips) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Equips {
			v.JsonBytes(w)
			if i != len(m.Equips)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_SellThingsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equips")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equips == nil {
		w.RawString("null")
	} else if len(m.Equips) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquips := len(m.Equips)
		for k, v := range m.Equips {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEquips--
			if mlEquips != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_SellThingsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_AddItemsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_AddItemsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_AddItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_AddItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_AddItemsEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_AddItemEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_SubItemEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_GetBagConfigRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_GetBagConfigResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("config")
	w.RawByte('"')
	w.RawByte(':')
	m.Config.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_SaveBagConfigRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Quality != 0 {
		w.RawByte('"')
		w.RawString("quality")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Quality))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_SaveBagConfigResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_DiamondExchangeBoundRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Num != 0 {
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_DiamondExchangeBoundResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_SynthesisItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Num != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_SynthesisItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_ExpandCapacityRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_ExpandCapacityResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.LatticeCount != 0 {
		w.RawByte('"')
		w.RawString("lattice_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LatticeCount))
		needWriteComma = true
	}
	if m.UnlockTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unlock_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UnlockTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_ExpandCapacityImmediatelyRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_ExpandCapacityImmediatelyResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Capacity != 0 {
		w.RawByte('"')
		w.RawString("capacity")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Capacity))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_CheatAddItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_CheatAddItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_CheatAddAllItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_CheatAddAllItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_CheatSetItemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_CheatSetItemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_CheatDeleteAllRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_CheatDeleteAllResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Bag_ItemUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_EquipGotPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("equipments")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equipments == nil {
		w.RawString("null")
	} else if len(m.Equipments) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Equipments {
			v.JsonBytes(w)
			if i != len(m.Equipments)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_EquipUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("equipments")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equipments == nil {
		w.RawString("null")
	} else if len(m.Equipments) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Equipments {
			v.JsonBytes(w)
			if i != len(m.Equipments)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_EquipDestroyedPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("equip_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.EquipId == nil {
		w.RawString("null")
	} else if len(m.EquipId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.EquipId {
			w.String(v)
			if i != len(m.EquipId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_RelicsUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("relics")
	w.RawByte('"')
	w.RawByte(':')
	if m.Relics == nil {
		w.RawString("null")
	} else if len(m.Relics) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Relics {
			v.JsonBytes(w)
			if i != len(m.Relics)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_SkillStoneUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("skill_stones")
	w.RawByte('"')
	w.RawByte(':')
	if m.SkillStones == nil {
		w.RawString("null")
	} else if len(m.SkillStones) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.SkillStones {
			v.JsonBytes(w)
			if i != len(m.SkillStones)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_RuneUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("runes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Runes == nil {
		w.RawString("null")
	} else if len(m.Runes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Runes {
			v.JsonBytes(w)
			if i != len(m.Runes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag_RuneDestroyedPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rune_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.RuneIds == nil {
		w.RawString("null")
	} else if len(m.RuneIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RuneIds {
			w.String(v)
			if i != len(m.RuneIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag) GoString() string {
	return m.String()
}

func (m *Bag_GetBagInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_GetBagInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_GetBagInfoRequest) GoString() string {
	return m.String()
}

func (m *Bag_GetBagInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_GetBagInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_GetBagInfoResponse) GoString() string {
	return m.String()
}

func (m *Bag_GetItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_GetItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_GetItemRequest) GoString() string {
	return m.String()
}

func (m *Bag_GetItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_GetItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_GetItemResponse) GoString() string {
	return m.String()
}

func (m *Bag_UseItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_UseItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_UseItemRequest) GoString() string {
	return m.String()
}

func (m *Bag_UseItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_UseItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_UseItemResponse) GoString() string {
	return m.String()
}

func (m *Bag_SellThingsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_SellThingsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_SellThingsRequest) GoString() string {
	return m.String()
}

func (m *Bag_SellThingsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_SellThingsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_SellThingsResponse) GoString() string {
	return m.String()
}

func (m *Bag_AddItemsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_AddItemsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_AddItemsRequest) GoString() string {
	return m.String()
}

func (m *Bag_AddItemsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_AddItemsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_AddItemsResponse) GoString() string {
	return m.String()
}

func (m *Bag_AddItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_AddItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_AddItemRequest) GoString() string {
	return m.String()
}

func (m *Bag_AddItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_AddItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_AddItemResponse) GoString() string {
	return m.String()
}

func (m *Bag_AddItemsEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_AddItemsEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_AddItemsEvent) GoString() string {
	return m.String()
}

func (m *Bag_AddItemEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_AddItemEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_AddItemEvent) GoString() string {
	return m.String()
}

func (m *Bag_SubItemEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_SubItemEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_SubItemEvent) GoString() string {
	return m.String()
}

func (m *Bag_GetBagConfigRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_GetBagConfigRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_GetBagConfigRequest) GoString() string {
	return m.String()
}

func (m *Bag_GetBagConfigResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_GetBagConfigResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_GetBagConfigResponse) GoString() string {
	return m.String()
}

func (m *Bag_SaveBagConfigRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_SaveBagConfigRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_SaveBagConfigRequest) GoString() string {
	return m.String()
}

func (m *Bag_SaveBagConfigResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_SaveBagConfigResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_SaveBagConfigResponse) GoString() string {
	return m.String()
}

func (m *Bag_DiamondExchangeBoundRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_DiamondExchangeBoundRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_DiamondExchangeBoundRequest) GoString() string {
	return m.String()
}

func (m *Bag_DiamondExchangeBoundResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_DiamondExchangeBoundResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_DiamondExchangeBoundResponse) GoString() string {
	return m.String()
}

func (m *Bag_SynthesisItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_SynthesisItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_SynthesisItemRequest) GoString() string {
	return m.String()
}

func (m *Bag_SynthesisItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_SynthesisItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_SynthesisItemResponse) GoString() string {
	return m.String()
}

func (m *Bag_ExpandCapacityRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_ExpandCapacityRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_ExpandCapacityRequest) GoString() string {
	return m.String()
}

func (m *Bag_ExpandCapacityResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_ExpandCapacityResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_ExpandCapacityResponse) GoString() string {
	return m.String()
}

func (m *Bag_ExpandCapacityImmediatelyRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_ExpandCapacityImmediatelyRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_ExpandCapacityImmediatelyRequest) GoString() string {
	return m.String()
}

func (m *Bag_ExpandCapacityImmediatelyResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_ExpandCapacityImmediatelyResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_ExpandCapacityImmediatelyResponse) GoString() string {
	return m.String()
}

func (m *Bag_CheatAddItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_CheatAddItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_CheatAddItemRequest) GoString() string {
	return m.String()
}

func (m *Bag_CheatAddItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_CheatAddItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_CheatAddItemResponse) GoString() string {
	return m.String()
}

func (m *Bag_CheatAddAllItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_CheatAddAllItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_CheatAddAllItemRequest) GoString() string {
	return m.String()
}

func (m *Bag_CheatAddAllItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_CheatAddAllItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_CheatAddAllItemResponse) GoString() string {
	return m.String()
}

func (m *Bag_CheatSetItemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_CheatSetItemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_CheatSetItemRequest) GoString() string {
	return m.String()
}

func (m *Bag_CheatSetItemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_CheatSetItemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_CheatSetItemResponse) GoString() string {
	return m.String()
}

func (m *Bag_CheatDeleteAllRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_CheatDeleteAllRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_CheatDeleteAllRequest) GoString() string {
	return m.String()
}

func (m *Bag_CheatDeleteAllResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_CheatDeleteAllResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_CheatDeleteAllResponse) GoString() string {
	return m.String()
}

func (m *Bag_ItemUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_ItemUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_ItemUpdatePush) GoString() string {
	return m.String()
}

func (m *Bag_EquipGotPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_EquipGotPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_EquipGotPush) GoString() string {
	return m.String()
}

func (m *Bag_EquipUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_EquipUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_EquipUpdatePush) GoString() string {
	return m.String()
}

func (m *Bag_EquipDestroyedPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_EquipDestroyedPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_EquipDestroyedPush) GoString() string {
	return m.String()
}

func (m *Bag_RelicsUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_RelicsUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_RelicsUpdatePush) GoString() string {
	return m.String()
}

func (m *Bag_SkillStoneUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_SkillStoneUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_SkillStoneUpdatePush) GoString() string {
	return m.String()
}

func (m *Bag_RuneUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_RuneUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_RuneUpdatePush) GoString() string {
	return m.String()
}

func (m *Bag_RuneDestroyedPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag_RuneDestroyedPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag_RuneDestroyedPush) GoString() string {
	return m.String()
}

func (m *Bag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_GetBagInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_GetBagInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bag != nil {
		l = m.Bag.Size()
		n += 1 + l + sovBag(uint64(l))
	}
	return n
}

func (m *Bag_GetItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	return n
}

func (m *Bag_GetItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovBag(uint64(l))
	}
	return n
}

func (m *Bag_UseItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	if len(m.Choose) > 0 {
		for k, v := range m.Choose {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBag(uint64(k)) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bag_UseItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBag(uint64(k)) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	if len(m.Equips) > 0 {
		for _, e := range m.Equips {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *Bag_SellThingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBag(uint64(k)) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	if len(m.Equips) > 0 {
		for k, v := range m.Equips {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBag(uint64(len(k))) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bag_SellThingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBag(uint64(k)) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bag_AddItemsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBag(uint64(k)) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bag_AddItemsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_AddItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	return n
}

func (m *Bag_AddItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_AddItemsEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBag(uint64(k)) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bag_AddItemEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	return n
}

func (m *Bag_SubItemEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	return n
}

func (m *Bag_GetBagConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_GetBagConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovBag(uint64(l))
	}
	return n
}

func (m *Bag_SaveBagConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quality != 0 {
		n += 1 + sovBag(uint64(m.Quality))
	}
	return n
}

func (m *Bag_SaveBagConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_DiamondExchangeBoundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovBag(uint64(m.Num))
	}
	return n
}

func (m *Bag_DiamondExchangeBoundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_SynthesisItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Num != 0 {
		n += 1 + sovBag(uint64(m.Num))
	}
	return n
}

func (m *Bag_SynthesisItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_ExpandCapacityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_ExpandCapacityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatticeCount != 0 {
		n += 1 + sovBag(uint64(m.LatticeCount))
	}
	if m.UnlockTime != 0 {
		n += 1 + sovBag(uint64(m.UnlockTime))
	}
	return n
}

func (m *Bag_ExpandCapacityImmediatelyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_ExpandCapacityImmediatelyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Capacity != 0 {
		n += 1 + sovBag(uint64(m.Capacity))
	}
	return n
}

func (m *Bag_CheatAddItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	return n
}

func (m *Bag_CheatAddItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_CheatAddAllItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovBag(uint64(m.Typ))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	return n
}

func (m *Bag_CheatAddAllItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_CheatSetItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	return n
}

func (m *Bag_CheatSetItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_CheatDeleteAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_CheatDeleteAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Bag_ItemUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *Bag_EquipGotPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equipments) > 0 {
		for _, e := range m.Equipments {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *Bag_EquipUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equipments) > 0 {
		for _, e := range m.Equipments {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *Bag_EquipDestroyedPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EquipId) > 0 {
		for _, s := range m.EquipId {
			l = len(s)
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *Bag_RelicsUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relics) > 0 {
		for _, e := range m.Relics {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *Bag_SkillStoneUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SkillStones) > 0 {
		for _, e := range m.SkillStones {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *Bag_RuneUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Runes) > 0 {
		for _, e := range m.Runes {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *Bag_RuneDestroyedPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RuneIds) > 0 {
		for _, s := range m.RuneIds {
			l = len(s)
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func sovBag(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBag(x uint64) (n int) {
	return sovBag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_GetBagInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBagInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBagInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_GetBagInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBagInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBagInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bag == nil {
				m.Bag = &models.Bag{}
			}
			if err := m.Bag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_GetItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_GetItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &models.Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_UseItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choose", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Choose == nil {
				m.Choose = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Choose[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_UseItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equips = append(m.Equips, &models.Equipment{})
			if err := m.Equips[len(m.Equips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_SellThingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellThingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellThingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equips == nil {
				m.Equips = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBag
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBag
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Equips[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_SellThingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellThingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellThingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_AddItemsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddItemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddItemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_AddItemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddItemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddItemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_AddItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_AddItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_AddItemsEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddItemsEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddItemsEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_AddItemEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddItemEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddItemEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_SubItemEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubItemEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubItemEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_GetBagConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBagConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBagConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_GetBagConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBagConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBagConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &models.BagConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_SaveBagConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveBagConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveBagConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_SaveBagConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveBagConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveBagConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_DiamondExchangeBoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondExchangeBoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondExchangeBoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_DiamondExchangeBoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiamondExchangeBoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiamondExchangeBoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_SynthesisItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SynthesisItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SynthesisItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_SynthesisItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SynthesisItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SynthesisItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_ExpandCapacityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpandCapacityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpandCapacityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_ExpandCapacityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpandCapacityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpandCapacityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatticeCount", wireType)
			}
			m.LatticeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatticeCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTime", wireType)
			}
			m.UnlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_ExpandCapacityImmediatelyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpandCapacityImmediatelyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpandCapacityImmediatelyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_ExpandCapacityImmediatelyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpandCapacityImmediatelyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpandCapacityImmediatelyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_CheatAddItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_CheatAddItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_CheatAddAllItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddAllItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddAllItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_CheatAddAllItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddAllItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddAllItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_CheatSetItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSetItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSetItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_CheatSetItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSetItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSetItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_CheatDeleteAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatDeleteAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatDeleteAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_CheatDeleteAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatDeleteAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatDeleteAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_ItemUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_EquipGotPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipGotPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipGotPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equipments = append(m.Equipments, &models.Equipment{})
			if err := m.Equipments[len(m.Equipments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_EquipUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equipments = append(m.Equipments, &models.Equipment{})
			if err := m.Equipments[len(m.Equipments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_EquipDestroyedPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipDestroyedPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipDestroyedPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipId = append(m.EquipId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_RelicsUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relics = append(m.Relics, &models.Relics{})
			if err := m.Relics[len(m.Relics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_SkillStoneUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillStoneUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillStoneUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillStones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillStones = append(m.SkillStones, &models.SkillStone{})
			if err := m.SkillStones[len(m.SkillStones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_RuneUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runes = append(m.Runes, &models.TalentRune{})
			if err := m.Runes[len(m.Runes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bag_RuneDestroyedPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneDestroyedPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneDestroyedPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneIds = append(m.RuneIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBag
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBag
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBag
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBag        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBag          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBag = fmt.Errorf("proto: unexpected end of group")
)
