// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/map_event.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MapEventErrorCode int32

const (
	MapEventErrorCode_ErrMapNotExist             MapEventErrorCode = 0
	MapEventErrorCode_ErrMapEventLock            MapEventErrorCode = 1
	MapEventErrorCode_ErrMapStoryNotExist        MapEventErrorCode = 2
	MapEventErrorCode_ErrMapGameNotExist         MapEventErrorCode = 3
	MapEventErrorCode_ErrMapEventAddFailed       MapEventErrorCode = 4
	MapEventErrorCode_ErrMapEventNotFinish       MapEventErrorCode = 5
	MapEventErrorCode_ErrAppointMapEventRepeat   MapEventErrorCode = 6
	MapEventErrorCode_ErrAppointMapEventComplate MapEventErrorCode = 7
)

var MapEventErrorCode_name = map[int32]string{
	0: "ErrMapNotExist",
	1: "ErrMapEventLock",
	2: "ErrMapStoryNotExist",
	3: "ErrMapGameNotExist",
	4: "ErrMapEventAddFailed",
	5: "ErrMapEventNotFinish",
	6: "ErrAppointMapEventRepeat",
	7: "ErrAppointMapEventComplate",
}

var MapEventErrorCode_value = map[string]int32{
	"ErrMapNotExist":             0,
	"ErrMapEventLock":            1,
	"ErrMapStoryNotExist":        2,
	"ErrMapGameNotExist":         3,
	"ErrMapEventAddFailed":       4,
	"ErrMapEventNotFinish":       5,
	"ErrAppointMapEventRepeat":   6,
	"ErrAppointMapEventComplate": 7,
}

func (MapEventErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0}
}

type MapEvent struct {
}

func (m *MapEvent) Reset()      { *m = MapEvent{} }
func (*MapEvent) ProtoMessage() {}
func (*MapEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0}
}
func (m *MapEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent.Merge(m, src)
}
func (m *MapEvent) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent proto.InternalMessageInfo

func (*MapEvent) XXX_MessageName() string {
	return "service.MapEvent"
}

type MapEvent_GetMapStoryRequest struct {
}

func (m *MapEvent_GetMapStoryRequest) Reset()      { *m = MapEvent_GetMapStoryRequest{} }
func (*MapEvent_GetMapStoryRequest) ProtoMessage() {}
func (*MapEvent_GetMapStoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 0}
}
func (m *MapEvent_GetMapStoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_GetMapStoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_GetMapStoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_GetMapStoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_GetMapStoryRequest.Merge(m, src)
}
func (m *MapEvent_GetMapStoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_GetMapStoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_GetMapStoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_GetMapStoryRequest proto.InternalMessageInfo

func (*MapEvent_GetMapStoryRequest) XXX_MessageName() string {
	return "service.MapEvent.GetMapStoryRequest"
}

type MapEvent_GetMapStoryResponse struct {
	Story []*models.MapStory `protobuf:"bytes,1,rep,name=story,proto3" json:"story,omitempty"`
}

func (m *MapEvent_GetMapStoryResponse) Reset()      { *m = MapEvent_GetMapStoryResponse{} }
func (*MapEvent_GetMapStoryResponse) ProtoMessage() {}
func (*MapEvent_GetMapStoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 1}
}
func (m *MapEvent_GetMapStoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_GetMapStoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_GetMapStoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_GetMapStoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_GetMapStoryResponse.Merge(m, src)
}
func (m *MapEvent_GetMapStoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_GetMapStoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_GetMapStoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_GetMapStoryResponse proto.InternalMessageInfo

func (m *MapEvent_GetMapStoryResponse) GetStory() []*models.MapStory {
	if m != nil {
		return m.Story
	}
	return nil
}

func (*MapEvent_GetMapStoryResponse) XXX_MessageName() string {
	return "service.MapEvent.GetMapStoryResponse"
}

type MapEvent_GetStoryRewardRequest struct {
	StoryId int64 `protobuf:"varint,1,opt,name=story_id,json=storyId,proto3" json:"story_id,omitempty"`
}

func (m *MapEvent_GetStoryRewardRequest) Reset()      { *m = MapEvent_GetStoryRewardRequest{} }
func (*MapEvent_GetStoryRewardRequest) ProtoMessage() {}
func (*MapEvent_GetStoryRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 2}
}
func (m *MapEvent_GetStoryRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_GetStoryRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_GetStoryRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_GetStoryRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_GetStoryRewardRequest.Merge(m, src)
}
func (m *MapEvent_GetStoryRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_GetStoryRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_GetStoryRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_GetStoryRewardRequest proto.InternalMessageInfo

func (m *MapEvent_GetStoryRewardRequest) GetStoryId() int64 {
	if m != nil {
		return m.StoryId
	}
	return 0
}

func (*MapEvent_GetStoryRewardRequest) XXX_MessageName() string {
	return "service.MapEvent.GetStoryRewardRequest"
}

type MapEvent_GetStoryRewardResponse struct {
	Reward map[int64]int64 `protobuf:"bytes,1,rep,name=reward,proto3" json:"reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *MapEvent_GetStoryRewardResponse) Reset()      { *m = MapEvent_GetStoryRewardResponse{} }
func (*MapEvent_GetStoryRewardResponse) ProtoMessage() {}
func (*MapEvent_GetStoryRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 3}
}
func (m *MapEvent_GetStoryRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_GetStoryRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_GetStoryRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_GetStoryRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_GetStoryRewardResponse.Merge(m, src)
}
func (m *MapEvent_GetStoryRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_GetStoryRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_GetStoryRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_GetStoryRewardResponse proto.InternalMessageInfo

func (m *MapEvent_GetStoryRewardResponse) GetReward() map[int64]int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (*MapEvent_GetStoryRewardResponse) XXX_MessageName() string {
	return "service.MapEvent.GetStoryRewardResponse"
}

type MapEvent_GetMapEventRequest struct {
}

func (m *MapEvent_GetMapEventRequest) Reset()      { *m = MapEvent_GetMapEventRequest{} }
func (*MapEvent_GetMapEventRequest) ProtoMessage() {}
func (*MapEvent_GetMapEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 4}
}
func (m *MapEvent_GetMapEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_GetMapEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_GetMapEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_GetMapEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_GetMapEventRequest.Merge(m, src)
}
func (m *MapEvent_GetMapEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_GetMapEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_GetMapEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_GetMapEventRequest proto.InternalMessageInfo

func (*MapEvent_GetMapEventRequest) XXX_MessageName() string {
	return "service.MapEvent.GetMapEventRequest"
}

type MapEvent_GetMapEventResponse struct {
	Events      []*models.MapEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Count       int64              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	NextRefresh int64              `protobuf:"varint,3,opt,name=next_refresh,json=nextRefresh,proto3" json:"next_refresh,omitempty"`
	Curr        int64              `protobuf:"varint,4,opt,name=curr,proto3" json:"curr,omitempty"`
}

func (m *MapEvent_GetMapEventResponse) Reset()      { *m = MapEvent_GetMapEventResponse{} }
func (*MapEvent_GetMapEventResponse) ProtoMessage() {}
func (*MapEvent_GetMapEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 5}
}
func (m *MapEvent_GetMapEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_GetMapEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_GetMapEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_GetMapEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_GetMapEventResponse.Merge(m, src)
}
func (m *MapEvent_GetMapEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_GetMapEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_GetMapEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_GetMapEventResponse proto.InternalMessageInfo

func (m *MapEvent_GetMapEventResponse) GetEvents() []*models.MapEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *MapEvent_GetMapEventResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *MapEvent_GetMapEventResponse) GetNextRefresh() int64 {
	if m != nil {
		return m.NextRefresh
	}
	return 0
}

func (m *MapEvent_GetMapEventResponse) GetCurr() int64 {
	if m != nil {
		return m.Curr
	}
	return 0
}

func (*MapEvent_GetMapEventResponse) XXX_MessageName() string {
	return "service.MapEvent.GetMapEventResponse"
}

type MapEvent_RefreshEventRequest struct {
}

func (m *MapEvent_RefreshEventRequest) Reset()      { *m = MapEvent_RefreshEventRequest{} }
func (*MapEvent_RefreshEventRequest) ProtoMessage() {}
func (*MapEvent_RefreshEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 6}
}
func (m *MapEvent_RefreshEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_RefreshEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_RefreshEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_RefreshEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_RefreshEventRequest.Merge(m, src)
}
func (m *MapEvent_RefreshEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_RefreshEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_RefreshEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_RefreshEventRequest proto.InternalMessageInfo

func (*MapEvent_RefreshEventRequest) XXX_MessageName() string {
	return "service.MapEvent.RefreshEventRequest"
}

type MapEvent_RefreshEventResponse struct {
	Event *models.MapEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *MapEvent_RefreshEventResponse) Reset()      { *m = MapEvent_RefreshEventResponse{} }
func (*MapEvent_RefreshEventResponse) ProtoMessage() {}
func (*MapEvent_RefreshEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 7}
}
func (m *MapEvent_RefreshEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_RefreshEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_RefreshEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_RefreshEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_RefreshEventResponse.Merge(m, src)
}
func (m *MapEvent_RefreshEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_RefreshEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_RefreshEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_RefreshEventResponse proto.InternalMessageInfo

func (m *MapEvent_RefreshEventResponse) GetEvent() *models.MapEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (*MapEvent_RefreshEventResponse) XXX_MessageName() string {
	return "service.MapEvent.RefreshEventResponse"
}

type MapEvent_ComplateEventRequest struct {
	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *MapEvent_ComplateEventRequest) Reset()      { *m = MapEvent_ComplateEventRequest{} }
func (*MapEvent_ComplateEventRequest) ProtoMessage() {}
func (*MapEvent_ComplateEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 8}
}
func (m *MapEvent_ComplateEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_ComplateEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_ComplateEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_ComplateEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_ComplateEventRequest.Merge(m, src)
}
func (m *MapEvent_ComplateEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_ComplateEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_ComplateEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_ComplateEventRequest proto.InternalMessageInfo

func (m *MapEvent_ComplateEventRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (*MapEvent_ComplateEventRequest) XXX_MessageName() string {
	return "service.MapEvent.ComplateEventRequest"
}

type MapEvent_ComplateEventResponse struct {
}

func (m *MapEvent_ComplateEventResponse) Reset()      { *m = MapEvent_ComplateEventResponse{} }
func (*MapEvent_ComplateEventResponse) ProtoMessage() {}
func (*MapEvent_ComplateEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 9}
}
func (m *MapEvent_ComplateEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_ComplateEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_ComplateEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_ComplateEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_ComplateEventResponse.Merge(m, src)
}
func (m *MapEvent_ComplateEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_ComplateEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_ComplateEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_ComplateEventResponse proto.InternalMessageInfo

func (*MapEvent_ComplateEventResponse) XXX_MessageName() string {
	return "service.MapEvent.ComplateEventResponse"
}

type MapEvent_AppointEventStartRequest struct {
	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	GameId  int64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (m *MapEvent_AppointEventStartRequest) Reset()      { *m = MapEvent_AppointEventStartRequest{} }
func (*MapEvent_AppointEventStartRequest) ProtoMessage() {}
func (*MapEvent_AppointEventStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 10}
}
func (m *MapEvent_AppointEventStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_AppointEventStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_AppointEventStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_AppointEventStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_AppointEventStartRequest.Merge(m, src)
}
func (m *MapEvent_AppointEventStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_AppointEventStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_AppointEventStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_AppointEventStartRequest proto.InternalMessageInfo

func (m *MapEvent_AppointEventStartRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapEvent_AppointEventStartRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (*MapEvent_AppointEventStartRequest) XXX_MessageName() string {
	return "service.MapEvent.AppointEventStartRequest"
}

type MapEvent_AppointEventStartResponse struct {
}

func (m *MapEvent_AppointEventStartResponse) Reset()      { *m = MapEvent_AppointEventStartResponse{} }
func (*MapEvent_AppointEventStartResponse) ProtoMessage() {}
func (*MapEvent_AppointEventStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 11}
}
func (m *MapEvent_AppointEventStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_AppointEventStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_AppointEventStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_AppointEventStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_AppointEventStartResponse.Merge(m, src)
}
func (m *MapEvent_AppointEventStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_AppointEventStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_AppointEventStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_AppointEventStartResponse proto.InternalMessageInfo

func (*MapEvent_AppointEventStartResponse) XXX_MessageName() string {
	return "service.MapEvent.AppointEventStartResponse"
}

type MapEvent_GetAppointEventInfoRequest struct {
}

func (m *MapEvent_GetAppointEventInfoRequest) Reset()      { *m = MapEvent_GetAppointEventInfoRequest{} }
func (*MapEvent_GetAppointEventInfoRequest) ProtoMessage() {}
func (*MapEvent_GetAppointEventInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 12}
}
func (m *MapEvent_GetAppointEventInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_GetAppointEventInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_GetAppointEventInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_GetAppointEventInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_GetAppointEventInfoRequest.Merge(m, src)
}
func (m *MapEvent_GetAppointEventInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_GetAppointEventInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_GetAppointEventInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_GetAppointEventInfoRequest proto.InternalMessageInfo

func (*MapEvent_GetAppointEventInfoRequest) XXX_MessageName() string {
	return "service.MapEvent.GetAppointEventInfoRequest"
}

type MapEvent_GetAppointEventInfoResponse struct {
	EventInfos []*models.AppointMapEvent `protobuf:"bytes,1,rep,name=event_infos,json=eventInfos,proto3" json:"event_infos,omitempty"`
}

func (m *MapEvent_GetAppointEventInfoResponse) Reset()      { *m = MapEvent_GetAppointEventInfoResponse{} }
func (*MapEvent_GetAppointEventInfoResponse) ProtoMessage() {}
func (*MapEvent_GetAppointEventInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 13}
}
func (m *MapEvent_GetAppointEventInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_GetAppointEventInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_GetAppointEventInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_GetAppointEventInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_GetAppointEventInfoResponse.Merge(m, src)
}
func (m *MapEvent_GetAppointEventInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_GetAppointEventInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_GetAppointEventInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_GetAppointEventInfoResponse proto.InternalMessageInfo

func (m *MapEvent_GetAppointEventInfoResponse) GetEventInfos() []*models.AppointMapEvent {
	if m != nil {
		return m.EventInfos
	}
	return nil
}

func (*MapEvent_GetAppointEventInfoResponse) XXX_MessageName() string {
	return "service.MapEvent.GetAppointEventInfoResponse"
}

type MapEvent_FixAppointEventFinishStatusRequest struct {
	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *MapEvent_FixAppointEventFinishStatusRequest) Reset() {
	*m = MapEvent_FixAppointEventFinishStatusRequest{}
}
func (*MapEvent_FixAppointEventFinishStatusRequest) ProtoMessage() {}
func (*MapEvent_FixAppointEventFinishStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 14}
}
func (m *MapEvent_FixAppointEventFinishStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_FixAppointEventFinishStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_FixAppointEventFinishStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_FixAppointEventFinishStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_FixAppointEventFinishStatusRequest.Merge(m, src)
}
func (m *MapEvent_FixAppointEventFinishStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_FixAppointEventFinishStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_FixAppointEventFinishStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_FixAppointEventFinishStatusRequest proto.InternalMessageInfo

func (m *MapEvent_FixAppointEventFinishStatusRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (*MapEvent_FixAppointEventFinishStatusRequest) XXX_MessageName() string {
	return "service.MapEvent.FixAppointEventFinishStatusRequest"
}

type MapEvent_FixAppointEventFinishStatusResponse struct {
}

func (m *MapEvent_FixAppointEventFinishStatusResponse) Reset() {
	*m = MapEvent_FixAppointEventFinishStatusResponse{}
}
func (*MapEvent_FixAppointEventFinishStatusResponse) ProtoMessage() {}
func (*MapEvent_FixAppointEventFinishStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 15}
}
func (m *MapEvent_FixAppointEventFinishStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_FixAppointEventFinishStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_FixAppointEventFinishStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_FixAppointEventFinishStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_FixAppointEventFinishStatusResponse.Merge(m, src)
}
func (m *MapEvent_FixAppointEventFinishStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_FixAppointEventFinishStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_FixAppointEventFinishStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_FixAppointEventFinishStatusResponse proto.InternalMessageInfo

func (*MapEvent_FixAppointEventFinishStatusResponse) XXX_MessageName() string {
	return "service.MapEvent.FixAppointEventFinishStatusResponse"
}

type MapEvent_CheatUnlockEventRequest struct {
}

func (m *MapEvent_CheatUnlockEventRequest) Reset()      { *m = MapEvent_CheatUnlockEventRequest{} }
func (*MapEvent_CheatUnlockEventRequest) ProtoMessage() {}
func (*MapEvent_CheatUnlockEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 16}
}
func (m *MapEvent_CheatUnlockEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatUnlockEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatUnlockEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatUnlockEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatUnlockEventRequest.Merge(m, src)
}
func (m *MapEvent_CheatUnlockEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatUnlockEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatUnlockEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatUnlockEventRequest proto.InternalMessageInfo

func (*MapEvent_CheatUnlockEventRequest) XXX_MessageName() string {
	return "service.MapEvent.CheatUnlockEventRequest"
}

type MapEvent_CheatUnlockEventResponse struct {
}

func (m *MapEvent_CheatUnlockEventResponse) Reset()      { *m = MapEvent_CheatUnlockEventResponse{} }
func (*MapEvent_CheatUnlockEventResponse) ProtoMessage() {}
func (*MapEvent_CheatUnlockEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 17}
}
func (m *MapEvent_CheatUnlockEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatUnlockEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatUnlockEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatUnlockEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatUnlockEventResponse.Merge(m, src)
}
func (m *MapEvent_CheatUnlockEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatUnlockEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatUnlockEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatUnlockEventResponse proto.InternalMessageInfo

func (*MapEvent_CheatUnlockEventResponse) XXX_MessageName() string {
	return "service.MapEvent.CheatUnlockEventResponse"
}

type MapEvent_UnlockEventRequest struct {
}

func (m *MapEvent_UnlockEventRequest) Reset()      { *m = MapEvent_UnlockEventRequest{} }
func (*MapEvent_UnlockEventRequest) ProtoMessage() {}
func (*MapEvent_UnlockEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 18}
}
func (m *MapEvent_UnlockEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_UnlockEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_UnlockEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_UnlockEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_UnlockEventRequest.Merge(m, src)
}
func (m *MapEvent_UnlockEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_UnlockEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_UnlockEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_UnlockEventRequest proto.InternalMessageInfo

func (*MapEvent_UnlockEventRequest) XXX_MessageName() string {
	return "service.MapEvent.UnlockEventRequest"
}

type MapEvent_UnlockEventResponse struct {
}

func (m *MapEvent_UnlockEventResponse) Reset()      { *m = MapEvent_UnlockEventResponse{} }
func (*MapEvent_UnlockEventResponse) ProtoMessage() {}
func (*MapEvent_UnlockEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 19}
}
func (m *MapEvent_UnlockEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_UnlockEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_UnlockEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_UnlockEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_UnlockEventResponse.Merge(m, src)
}
func (m *MapEvent_UnlockEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_UnlockEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_UnlockEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_UnlockEventResponse proto.InternalMessageInfo

func (*MapEvent_UnlockEventResponse) XXX_MessageName() string {
	return "service.MapEvent.UnlockEventResponse"
}

type MapEvent_CheatAddEventRequest struct {
	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	MapId   int64 `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	GameId  int64 `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Point   int64 `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
}

func (m *MapEvent_CheatAddEventRequest) Reset()      { *m = MapEvent_CheatAddEventRequest{} }
func (*MapEvent_CheatAddEventRequest) ProtoMessage() {}
func (*MapEvent_CheatAddEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 20}
}
func (m *MapEvent_CheatAddEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatAddEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatAddEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatAddEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatAddEventRequest.Merge(m, src)
}
func (m *MapEvent_CheatAddEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatAddEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatAddEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatAddEventRequest proto.InternalMessageInfo

func (m *MapEvent_CheatAddEventRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapEvent_CheatAddEventRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *MapEvent_CheatAddEventRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MapEvent_CheatAddEventRequest) GetPoint() int64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (*MapEvent_CheatAddEventRequest) XXX_MessageName() string {
	return "service.MapEvent.CheatAddEventRequest"
}

type MapEvent_CheatAddEventResponse struct {
}

func (m *MapEvent_CheatAddEventResponse) Reset()      { *m = MapEvent_CheatAddEventResponse{} }
func (*MapEvent_CheatAddEventResponse) ProtoMessage() {}
func (*MapEvent_CheatAddEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 21}
}
func (m *MapEvent_CheatAddEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatAddEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatAddEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatAddEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatAddEventResponse.Merge(m, src)
}
func (m *MapEvent_CheatAddEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatAddEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatAddEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatAddEventResponse proto.InternalMessageInfo

func (*MapEvent_CheatAddEventResponse) XXX_MessageName() string {
	return "service.MapEvent.CheatAddEventResponse"
}

type MapEvent_CheatFinishEventRequest struct {
	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *MapEvent_CheatFinishEventRequest) Reset()      { *m = MapEvent_CheatFinishEventRequest{} }
func (*MapEvent_CheatFinishEventRequest) ProtoMessage() {}
func (*MapEvent_CheatFinishEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 22}
}
func (m *MapEvent_CheatFinishEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatFinishEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatFinishEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatFinishEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatFinishEventRequest.Merge(m, src)
}
func (m *MapEvent_CheatFinishEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatFinishEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatFinishEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatFinishEventRequest proto.InternalMessageInfo

func (m *MapEvent_CheatFinishEventRequest) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (*MapEvent_CheatFinishEventRequest) XXX_MessageName() string {
	return "service.MapEvent.CheatFinishEventRequest"
}

type MapEvent_CheatFinishEventResponse struct {
}

func (m *MapEvent_CheatFinishEventResponse) Reset()      { *m = MapEvent_CheatFinishEventResponse{} }
func (*MapEvent_CheatFinishEventResponse) ProtoMessage() {}
func (*MapEvent_CheatFinishEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 23}
}
func (m *MapEvent_CheatFinishEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatFinishEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatFinishEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatFinishEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatFinishEventResponse.Merge(m, src)
}
func (m *MapEvent_CheatFinishEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatFinishEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatFinishEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatFinishEventResponse proto.InternalMessageInfo

func (*MapEvent_CheatFinishEventResponse) XXX_MessageName() string {
	return "service.MapEvent.CheatFinishEventResponse"
}

type MapEvent_CheatChangeMapRequest struct {
	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *MapEvent_CheatChangeMapRequest) Reset()      { *m = MapEvent_CheatChangeMapRequest{} }
func (*MapEvent_CheatChangeMapRequest) ProtoMessage() {}
func (*MapEvent_CheatChangeMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 24}
}
func (m *MapEvent_CheatChangeMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatChangeMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatChangeMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatChangeMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatChangeMapRequest.Merge(m, src)
}
func (m *MapEvent_CheatChangeMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatChangeMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatChangeMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatChangeMapRequest proto.InternalMessageInfo

func (m *MapEvent_CheatChangeMapRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (*MapEvent_CheatChangeMapRequest) XXX_MessageName() string {
	return "service.MapEvent.CheatChangeMapRequest"
}

type MapEvent_CheatChangeMapResponse struct {
}

func (m *MapEvent_CheatChangeMapResponse) Reset()      { *m = MapEvent_CheatChangeMapResponse{} }
func (*MapEvent_CheatChangeMapResponse) ProtoMessage() {}
func (*MapEvent_CheatChangeMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 25}
}
func (m *MapEvent_CheatChangeMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatChangeMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatChangeMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatChangeMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatChangeMapResponse.Merge(m, src)
}
func (m *MapEvent_CheatChangeMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatChangeMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatChangeMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatChangeMapResponse proto.InternalMessageInfo

func (*MapEvent_CheatChangeMapResponse) XXX_MessageName() string {
	return "service.MapEvent.CheatChangeMapResponse"
}

type MapEvent_CheatGetStoryRequest struct {
	StoryId int64 `protobuf:"varint,1,opt,name=story_id,json=storyId,proto3" json:"story_id,omitempty"`
	Piece   int64 `protobuf:"varint,2,opt,name=piece,proto3" json:"piece,omitempty"`
}

func (m *MapEvent_CheatGetStoryRequest) Reset()      { *m = MapEvent_CheatGetStoryRequest{} }
func (*MapEvent_CheatGetStoryRequest) ProtoMessage() {}
func (*MapEvent_CheatGetStoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 26}
}
func (m *MapEvent_CheatGetStoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatGetStoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatGetStoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatGetStoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatGetStoryRequest.Merge(m, src)
}
func (m *MapEvent_CheatGetStoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatGetStoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatGetStoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatGetStoryRequest proto.InternalMessageInfo

func (m *MapEvent_CheatGetStoryRequest) GetStoryId() int64 {
	if m != nil {
		return m.StoryId
	}
	return 0
}

func (m *MapEvent_CheatGetStoryRequest) GetPiece() int64 {
	if m != nil {
		return m.Piece
	}
	return 0
}

func (*MapEvent_CheatGetStoryRequest) XXX_MessageName() string {
	return "service.MapEvent.CheatGetStoryRequest"
}

type MapEvent_CheatGetStoryResponse struct {
}

func (m *MapEvent_CheatGetStoryResponse) Reset()      { *m = MapEvent_CheatGetStoryResponse{} }
func (*MapEvent_CheatGetStoryResponse) ProtoMessage() {}
func (*MapEvent_CheatGetStoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 27}
}
func (m *MapEvent_CheatGetStoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_CheatGetStoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_CheatGetStoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_CheatGetStoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_CheatGetStoryResponse.Merge(m, src)
}
func (m *MapEvent_CheatGetStoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_CheatGetStoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_CheatGetStoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_CheatGetStoryResponse proto.InternalMessageInfo

func (*MapEvent_CheatGetStoryResponse) XXX_MessageName() string {
	return "service.MapEvent.CheatGetStoryResponse"
}

//----------------------push----------------------//
type MapEvent_EventFinishPush struct {
	EventId   int64           `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	IsSuccess bool            `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Rewards   map[int64]int64 `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StoryId   int64           `protobuf:"varint,4,opt,name=story_id,json=storyId,proto3" json:"story_id,omitempty"`
	Piece     int64           `protobuf:"varint,5,opt,name=piece,proto3" json:"piece,omitempty"`
	MapId     int64           `protobuf:"varint,6,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Ratio     int64           `protobuf:"varint,7,opt,name=Ratio,proto3" json:"Ratio,omitempty"`
}

func (m *MapEvent_EventFinishPush) Reset()      { *m = MapEvent_EventFinishPush{} }
func (*MapEvent_EventFinishPush) ProtoMessage() {}
func (*MapEvent_EventFinishPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdb0b105b6b8ffb9, []int{0, 28}
}
func (m *MapEvent_EventFinishPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent_EventFinishPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent_EventFinishPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent_EventFinishPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent_EventFinishPush.Merge(m, src)
}
func (m *MapEvent_EventFinishPush) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent_EventFinishPush) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent_EventFinishPush.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent_EventFinishPush proto.InternalMessageInfo

func (m *MapEvent_EventFinishPush) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapEvent_EventFinishPush) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *MapEvent_EventFinishPush) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *MapEvent_EventFinishPush) GetStoryId() int64 {
	if m != nil {
		return m.StoryId
	}
	return 0
}

func (m *MapEvent_EventFinishPush) GetPiece() int64 {
	if m != nil {
		return m.Piece
	}
	return 0
}

func (m *MapEvent_EventFinishPush) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *MapEvent_EventFinishPush) GetRatio() int64 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (*MapEvent_EventFinishPush) XXX_MessageName() string {
	return "service.MapEvent.EventFinishPush"
}
func init() {
	proto.RegisterEnum("service.MapEventErrorCode", MapEventErrorCode_name, MapEventErrorCode_value)
	proto.RegisterType((*MapEvent)(nil), "service.MapEvent")
	proto.RegisterType((*MapEvent_GetMapStoryRequest)(nil), "service.MapEvent.GetMapStoryRequest")
	proto.RegisterType((*MapEvent_GetMapStoryResponse)(nil), "service.MapEvent.GetMapStoryResponse")
	proto.RegisterType((*MapEvent_GetStoryRewardRequest)(nil), "service.MapEvent.GetStoryRewardRequest")
	proto.RegisterType((*MapEvent_GetStoryRewardResponse)(nil), "service.MapEvent.GetStoryRewardResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.MapEvent.GetStoryRewardResponse.RewardEntry")
	proto.RegisterType((*MapEvent_GetMapEventRequest)(nil), "service.MapEvent.GetMapEventRequest")
	proto.RegisterType((*MapEvent_GetMapEventResponse)(nil), "service.MapEvent.GetMapEventResponse")
	proto.RegisterType((*MapEvent_RefreshEventRequest)(nil), "service.MapEvent.RefreshEventRequest")
	proto.RegisterType((*MapEvent_RefreshEventResponse)(nil), "service.MapEvent.RefreshEventResponse")
	proto.RegisterType((*MapEvent_ComplateEventRequest)(nil), "service.MapEvent.ComplateEventRequest")
	proto.RegisterType((*MapEvent_ComplateEventResponse)(nil), "service.MapEvent.ComplateEventResponse")
	proto.RegisterType((*MapEvent_AppointEventStartRequest)(nil), "service.MapEvent.AppointEventStartRequest")
	proto.RegisterType((*MapEvent_AppointEventStartResponse)(nil), "service.MapEvent.AppointEventStartResponse")
	proto.RegisterType((*MapEvent_GetAppointEventInfoRequest)(nil), "service.MapEvent.GetAppointEventInfoRequest")
	proto.RegisterType((*MapEvent_GetAppointEventInfoResponse)(nil), "service.MapEvent.GetAppointEventInfoResponse")
	proto.RegisterType((*MapEvent_FixAppointEventFinishStatusRequest)(nil), "service.MapEvent.FixAppointEventFinishStatusRequest")
	proto.RegisterType((*MapEvent_FixAppointEventFinishStatusResponse)(nil), "service.MapEvent.FixAppointEventFinishStatusResponse")
	proto.RegisterType((*MapEvent_CheatUnlockEventRequest)(nil), "service.MapEvent.CheatUnlockEventRequest")
	proto.RegisterType((*MapEvent_CheatUnlockEventResponse)(nil), "service.MapEvent.CheatUnlockEventResponse")
	proto.RegisterType((*MapEvent_UnlockEventRequest)(nil), "service.MapEvent.UnlockEventRequest")
	proto.RegisterType((*MapEvent_UnlockEventResponse)(nil), "service.MapEvent.UnlockEventResponse")
	proto.RegisterType((*MapEvent_CheatAddEventRequest)(nil), "service.MapEvent.CheatAddEventRequest")
	proto.RegisterType((*MapEvent_CheatAddEventResponse)(nil), "service.MapEvent.CheatAddEventResponse")
	proto.RegisterType((*MapEvent_CheatFinishEventRequest)(nil), "service.MapEvent.CheatFinishEventRequest")
	proto.RegisterType((*MapEvent_CheatFinishEventResponse)(nil), "service.MapEvent.CheatFinishEventResponse")
	proto.RegisterType((*MapEvent_CheatChangeMapRequest)(nil), "service.MapEvent.CheatChangeMapRequest")
	proto.RegisterType((*MapEvent_CheatChangeMapResponse)(nil), "service.MapEvent.CheatChangeMapResponse")
	proto.RegisterType((*MapEvent_CheatGetStoryRequest)(nil), "service.MapEvent.CheatGetStoryRequest")
	proto.RegisterType((*MapEvent_CheatGetStoryResponse)(nil), "service.MapEvent.CheatGetStoryResponse")
	proto.RegisterType((*MapEvent_EventFinishPush)(nil), "service.MapEvent.EventFinishPush")
	proto.RegisterMapType((map[int64]int64)(nil), "service.MapEvent.EventFinishPush.RewardsEntry")
}

func init() { proto.RegisterFile("proto/service/map_event.proto", fileDescriptor_bdb0b105b6b8ffb9) }

var fileDescriptor_bdb0b105b6b8ffb9 = []byte{
	// 1052 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdf, 0x4f, 0x1c, 0xd5,
	0x17, 0xdf, 0x61, 0xd9, 0x5d, 0xbe, 0x07, 0xbe, 0xed, 0x7a, 0xd9, 0xed, 0x0e, 0x97, 0x76, 0x82,
	0xf5, 0x47, 0x88, 0x89, 0x8b, 0xfd, 0x11, 0x83, 0x35, 0xd6, 0x20, 0x59, 0x90, 0xa4, 0x10, 0xb3,
	0xc4, 0x98, 0xf8, 0x42, 0xa6, 0x33, 0x97, 0x32, 0x81, 0x9d, 0x3b, 0xce, 0xbd, 0x4b, 0xe1, 0xad,
	0x3e, 0xa9, 0x6b, 0x49, 0xfa, 0x60, 0x52, 0x13, 0x79, 0xa8, 0x11, 0x63, 0xd3, 0x04, 0x7f, 0x45,
	0x2c, 0x91, 0xc4, 0x27, 0x1f, 0xfa, 0xd8, 0xc7, 0x3e, 0xea, 0xc2, 0x10, 0x78, 0xd3, 0xff, 0xc0,
	0xcc, 0xbd, 0x77, 0x96, 0x99, 0x65, 0xad, 0xf8, 0x36, 0xe7, 0xc7, 0xe7, 0x9c, 0xf3, 0xf9, 0x9c,
	0xcb, 0x61, 0xe1, 0x9c, 0xe7, 0x53, 0x4e, 0x47, 0x18, 0xf1, 0x97, 0x1d, 0x8b, 0x8c, 0xd4, 0x4c,
	0x6f, 0x8e, 0x2c, 0x13, 0x97, 0x97, 0x85, 0x1f, 0xe5, 0x54, 0x00, 0x9f, 0x95, 0x79, 0x35, 0x6a,
	0x93, 0x25, 0xd6, 0x9e, 0x86, 0x4b, 0x89, 0xe8, 0x75, 0x93, 0x11, 0x19, 0x38, 0xff, 0xd7, 0xff,
	0xa1, 0x67, 0xda, 0xf4, 0x2a, 0x61, 0x2e, 0x2e, 0x00, 0x9a, 0x24, 0x7c, 0xda, 0xf4, 0x66, 0x39,
	0xf5, 0x57, 0xab, 0xe4, 0x83, 0x3a, 0x61, 0x1c, 0xbf, 0x01, 0xfd, 0x09, 0x2f, 0xf3, 0xa8, 0xcb,
	0x08, 0x7a, 0x11, 0x32, 0x2c, 0x74, 0xe8, 0xda, 0x50, 0x7a, 0xb8, 0xf7, 0x62, 0xbe, 0x2c, 0x8b,
	0x97, 0x5b, 0x89, 0x32, 0x8c, 0x2f, 0x42, 0x71, 0x92, 0x70, 0x85, 0xbd, 0x69, 0xfa, 0xb6, 0xaa,
	0x8b, 0x06, 0xa0, 0x47, 0x64, 0xcc, 0x39, 0xb6, 0xae, 0x0d, 0x69, 0xc3, 0xe9, 0x6a, 0x4e, 0xd8,
	0x53, 0x36, 0xfe, 0x52, 0x83, 0x33, 0xed, 0x20, 0xd5, 0xf6, 0x1a, 0x64, 0x7d, 0xe1, 0x51, 0x7d,
	0x2f, 0x97, 0x95, 0x02, 0xe5, 0x88, 0x46, 0xb9, 0x33, 0xb2, 0x2c, 0xcd, 0x8a, 0xcb, 0xfd, 0xd5,
	0xaa, 0xaa, 0x81, 0x5f, 0x83, 0xde, 0x98, 0x1b, 0xe5, 0x21, 0xbd, 0x48, 0x56, 0xd5, 0x34, 0xe1,
	0x27, 0x2a, 0x40, 0x66, 0xd9, 0x5c, 0xaa, 0x13, 0xbd, 0x4b, 0xf8, 0xa4, 0x71, 0xa5, 0x6b, 0x54,
	0x3b, 0x12, 0x4b, 0x34, 0x8d, 0xc4, 0xba, 0xad, 0x45, 0x6a, 0x29, 0xb7, 0x1a, 0x7b, 0x18, 0xb2,
	0x62, 0x1f, 0xac, 0x83, 0x5c, 0x32, 0x53, 0xc5, 0xc3, 0x8e, 0x16, 0xad, 0xbb, 0x3c, 0xea, 0x28,
	0x0c, 0xf4, 0x2c, 0xf4, 0xb9, 0x64, 0x85, 0xcf, 0xf9, 0x64, 0xde, 0x27, 0x6c, 0x41, 0x4f, 0x8b,
	0x60, 0x6f, 0xe8, 0xab, 0x4a, 0x17, 0x42, 0xd0, 0x6d, 0xd5, 0x7d, 0x5f, 0xef, 0x16, 0x21, 0xf1,
	0x8d, 0x8b, 0xd0, 0xaf, 0xc2, 0x89, 0x29, 0xaf, 0x42, 0x21, 0xe9, 0x3e, 0xda, 0xa9, 0x98, 0x42,
	0x28, 0xd0, 0x69, 0x48, 0x19, 0xc6, 0x17, 0xa0, 0x30, 0x4e, 0x6b, 0xde, 0x92, 0xc9, 0x49, 0xbc,
	0x6e, 0xb8, 0x52, 0x91, 0x10, 0x5b, 0xa9, 0xb0, 0xa7, 0x6c, 0x5c, 0x82, 0x62, 0x1b, 0x44, 0xf6,
	0xc4, 0x33, 0xa0, 0x8f, 0x79, 0x1e, 0x75, 0x5c, 0x2e, 0xfc, 0xb3, 0xdc, 0xf4, 0x4f, 0x50, 0x0f,
	0x95, 0x20, 0x77, 0xc3, 0xac, 0x91, 0x30, 0x22, 0x85, 0xca, 0x86, 0xe6, 0x94, 0x8d, 0x07, 0x61,
	0xa0, 0x43, 0x3d, 0xd5, 0xec, 0x2c, 0xe0, 0x49, 0xc2, 0xe3, 0xf1, 0x29, 0x77, 0x9e, 0x46, 0xb2,
	0xbc, 0x07, 0x83, 0x1d, 0xa3, 0x4a, 0x9d, 0x51, 0xe8, 0x55, 0xd3, 0xb8, 0xf3, 0x34, 0x5a, 0x64,
	0x29, 0xd2, 0x48, 0xc1, 0x5a, 0x52, 0x01, 0x89, 0x0a, 0x30, 0xfc, 0x26, 0x9c, 0x9f, 0x70, 0x56,
	0xe2, 0x85, 0x27, 0x1c, 0xd7, 0x61, 0x0b, 0xb3, 0xdc, 0xe4, 0x75, 0x76, 0x02, 0xf5, 0x5e, 0x80,
	0xe7, 0x9e, 0x5a, 0x40, 0xd1, 0x1b, 0x80, 0xd2, 0xf8, 0x02, 0x31, 0xf9, 0xbb, 0xee, 0x12, 0xb5,
	0x16, 0x13, 0x2b, 0xc7, 0xa0, 0x1f, 0x0f, 0x29, 0x58, 0x01, 0x50, 0x07, 0x44, 0x11, 0xfa, 0x3b,
	0x25, 0xdf, 0x84, 0x82, 0x28, 0x34, 0x66, 0xdb, 0x27, 0xdc, 0x3d, 0x2a, 0x42, 0x36, 0x3c, 0x48,
	0xad, 0x55, 0x65, 0x6a, 0xa6, 0x97, 0x5c, 0x61, 0x3a, 0xbe, 0xc2, 0xf0, 0x4f, 0x40, 0x10, 0x55,
	0x4f, 0x59, 0x1a, 0xe2, 0x05, 0x25, 0x1b, 0xab, 0x89, 0x2e, 0x2b, 0xd6, 0x52, 0x92, 0x93, 0x3e,
	0xc8, 0x48, 0x90, 0x04, 0x4a, 0x55, 0x2c, 0xab, 0x56, 0xe3, 0x0b, 0xa6, 0x7b, 0x83, 0x4c, 0x9b,
	0x5e, 0x54, 0xef, 0x88, 0x89, 0x16, 0x63, 0x82, 0x75, 0x38, 0xd3, 0x9e, 0xaf, 0x2a, 0x4d, 0x2a,
	0xb5, 0x8e, 0x6e, 0xd2, 0xbf, 0x1d, 0x3f, 0xc1, 0xde, 0x21, 0x56, 0xeb, 0xe4, 0x08, 0xa3, 0xc5,
	0xfe, 0xa8, 0x90, 0xea, 0xf0, 0x5d, 0x17, 0x9c, 0x8e, 0xbd, 0x88, 0x77, 0xea, 0x6c, 0xe1, 0x69,
	0xbb, 0x38, 0x07, 0xe0, 0xb0, 0x39, 0x56, 0xb7, 0x2c, 0xc2, 0x98, 0x68, 0xd1, 0x53, 0xfd, 0x9f,
	0xc3, 0x66, 0xa5, 0x03, 0xbd, 0x0d, 0x39, 0x79, 0x1a, 0x99, 0x9e, 0x16, 0xef, 0xbb, 0x7c, 0xfc,
	0xbe, 0xb6, 0x75, 0x53, 0x87, 0x95, 0xc9, 0xcb, 0x1a, 0xc1, 0x13, 0x0c, 0xbb, 0xff, 0x81, 0x61,
	0x26, 0xc6, 0x30, 0xa6, 0x6d, 0x36, 0xfe, 0x4a, 0x0a, 0x90, 0xa9, 0x9a, 0xdc, 0xa1, 0x7a, 0x4e,
	0x7a, 0x85, 0x81, 0xaf, 0x40, 0x5f, 0xbc, 0xed, 0x7f, 0xb9, 0xdc, 0x2f, 0xfd, 0x96, 0x86, 0x67,
	0x22, 0x32, 0x15, 0xdf, 0xa7, 0xfe, 0x38, 0xb5, 0xc3, 0xdb, 0x77, 0xaa, 0xe2, 0xfb, 0xd3, 0xa6,
	0x37, 0x43, 0x79, 0x65, 0xc5, 0x61, 0x3c, 0x9f, 0xc2, 0xa8, 0xb1, 0xa5, 0x9f, 0x42, 0x7d, 0xfb,
	0x77, 0xef, 0xed, 0x6f, 0x6e, 0x04, 0xeb, 0xdf, 0x07, 0x5f, 0xfc, 0x8a, 0x5e, 0x81, 0xd3, 0x32,
	0x4f, 0xe0, 0xaf, 0x51, 0x6b, 0x31, 0xaf, 0xe1, 0xc1, 0xc6, 0x96, 0x5e, 0x42, 0x45, 0x99, 0xb2,
	0xf7, 0xcb, 0xa7, 0x7b, 0x3b, 0x3f, 0xef, 0xaf, 0x3f, 0x38, 0xf8, 0xe6, 0xab, 0xc3, 0xcf, 0x3e,
	0x44, 0x17, 0xa0, 0x5f, 0x22, 0xc4, 0xe2, 0x5a, 0xe5, 0xbb, 0xb0, 0xde, 0xd8, 0xd2, 0x0b, 0x08,
	0xed, 0x6d, 0xaf, 0x05, 0x9b, 0x9f, 0x07, 0xeb, 0xf7, 0xf7, 0x37, 0x37, 0x0e, 0x6f, 0x6d, 0x1f,
	0xde, 0xdd, 0x41, 0x97, 0x00, 0x49, 0xc8, 0xa4, 0x59, 0x23, 0x2d, 0x44, 0xba, 0x53, 0x9f, 0x16,
	0x1a, 0x8d, 0x42, 0x21, 0x36, 0xd9, 0x98, 0x6d, 0x4f, 0x98, 0xce, 0x12, 0xb1, 0xf3, 0xdd, 0xd8,
	0x68, 0x6c, 0xe9, 0x18, 0xe9, 0x89, 0xf1, 0x1e, 0xee, 0x04, 0x8d, 0x7b, 0xc1, 0xc6, 0x0f, 0x07,
	0x3f, 0x7d, 0x8d, 0xae, 0x26, 0x90, 0x33, 0x54, 0x6d, 0x37, 0x9f, 0xc1, 0xcf, 0x37, 0xb6, 0xf4,
	0x21, 0x64, 0x04, 0x9f, 0xac, 0xed, 0x6d, 0xdf, 0xda, 0xdb, 0x7e, 0xd0, 0xc6, 0x30, 0xf8, 0xf6,
	0xf6, 0xfe, 0xc7, 0x77, 0xd0, 0xab, 0xa0, 0x57, 0x7c, 0xbf, 0xfd, 0x02, 0x12, 0x8f, 0x98, 0x3c,
	0x9f, 0x8d, 0x68, 0xc6, 0xa1, 0x87, 0x1f, 0xad, 0x05, 0x1b, 0x6b, 0xe8, 0x75, 0xc0, 0xc7, 0x71,
	0xd1, 0xbf, 0x89, 0x7c, 0xae, 0x13, 0xdd, 0xe0, 0xe1, 0x8f, 0xb2, 0xe9, 0x5b, 0x33, 0x4f, 0xfe,
	0x30, 0x52, 0xf7, 0x9b, 0x86, 0xf6, 0xa8, 0x69, 0x68, 0x8f, 0x9b, 0x86, 0xf6, 0x7b, 0xd3, 0xd0,
	0x0e, 0x9a, 0x46, 0xea, 0xcf, 0xa6, 0xa1, 0xdd, 0xd9, 0x35, 0x52, 0x8f, 0x76, 0x0d, 0xed, 0xf1,
	0xae, 0x91, 0x7a, 0xb2, 0x6b, 0xa4, 0xde, 0x1f, 0xb2, 0xa8, 0xe3, 0xbe, 0x1c, 0xbe, 0x65, 0xe2,
	0x8f, 0x58, 0xb4, 0x56, 0xa3, 0xee, 0x48, 0xe2, 0xa7, 0xd5, 0xf5, 0xac, 0x30, 0x2f, 0xfd, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x02, 0x9a, 0x1f, 0xde, 0x72, 0x09, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_GetMapStoryRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_GetMapStoryResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_GetStoryRewardRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_GetStoryRewardResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_GetMapEventRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_GetMapEventResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_RefreshEventRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_RefreshEventResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_ComplateEventRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_ComplateEventResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_AppointEventStartRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_AppointEventStartResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_GetAppointEventInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_GetAppointEventInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_FixAppointEventFinishStatusRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_FixAppointEventFinishStatusResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatUnlockEventRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatUnlockEventResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_UnlockEventRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_UnlockEventResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatAddEventRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatAddEventResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatFinishEventRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatFinishEventResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatChangeMapRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatChangeMapResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatGetStoryRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_CheatGetStoryResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent_EventFinishPush.Get().(proto.Message)
	})
}

var poolMapEvent = &sync.Pool{New: func() interface{} { return &MapEvent{} }}

func (m *MapEvent) ReleasePool() { m.Reset(); poolMapEvent.Put(m); m = nil }

var poolMapEvent_GetMapStoryRequest = &sync.Pool{New: func() interface{} { return &MapEvent_GetMapStoryRequest{} }}

func (m *MapEvent_GetMapStoryRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_GetMapStoryRequest.Put(m)
	m = nil
}

var poolMapEvent_GetMapStoryResponse = &sync.Pool{New: func() interface{} { return &MapEvent_GetMapStoryResponse{} }}

func (m *MapEvent_GetMapStoryResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_GetMapStoryResponse.Put(m)
	m = nil
}

var poolMapEvent_GetStoryRewardRequest = &sync.Pool{New: func() interface{} { return &MapEvent_GetStoryRewardRequest{} }}

func (m *MapEvent_GetStoryRewardRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_GetStoryRewardRequest.Put(m)
	m = nil
}

var poolMapEvent_GetStoryRewardResponse = &sync.Pool{New: func() interface{} { return &MapEvent_GetStoryRewardResponse{} }}

func (m *MapEvent_GetStoryRewardResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_GetStoryRewardResponse.Put(m)
	m = nil
}

var poolMapEvent_GetMapEventRequest = &sync.Pool{New: func() interface{} { return &MapEvent_GetMapEventRequest{} }}

func (m *MapEvent_GetMapEventRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_GetMapEventRequest.Put(m)
	m = nil
}

var poolMapEvent_GetMapEventResponse = &sync.Pool{New: func() interface{} { return &MapEvent_GetMapEventResponse{} }}

func (m *MapEvent_GetMapEventResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_GetMapEventResponse.Put(m)
	m = nil
}

var poolMapEvent_RefreshEventRequest = &sync.Pool{New: func() interface{} { return &MapEvent_RefreshEventRequest{} }}

func (m *MapEvent_RefreshEventRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_RefreshEventRequest.Put(m)
	m = nil
}

var poolMapEvent_RefreshEventResponse = &sync.Pool{New: func() interface{} { return &MapEvent_RefreshEventResponse{} }}

func (m *MapEvent_RefreshEventResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_RefreshEventResponse.Put(m)
	m = nil
}

var poolMapEvent_ComplateEventRequest = &sync.Pool{New: func() interface{} { return &MapEvent_ComplateEventRequest{} }}

func (m *MapEvent_ComplateEventRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_ComplateEventRequest.Put(m)
	m = nil
}

var poolMapEvent_ComplateEventResponse = &sync.Pool{New: func() interface{} { return &MapEvent_ComplateEventResponse{} }}

func (m *MapEvent_ComplateEventResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_ComplateEventResponse.Put(m)
	m = nil
}

var poolMapEvent_AppointEventStartRequest = &sync.Pool{New: func() interface{} { return &MapEvent_AppointEventStartRequest{} }}

func (m *MapEvent_AppointEventStartRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_AppointEventStartRequest.Put(m)
	m = nil
}

var poolMapEvent_AppointEventStartResponse = &sync.Pool{New: func() interface{} { return &MapEvent_AppointEventStartResponse{} }}

func (m *MapEvent_AppointEventStartResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_AppointEventStartResponse.Put(m)
	m = nil
}

var poolMapEvent_GetAppointEventInfoRequest = &sync.Pool{New: func() interface{} { return &MapEvent_GetAppointEventInfoRequest{} }}

func (m *MapEvent_GetAppointEventInfoRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_GetAppointEventInfoRequest.Put(m)
	m = nil
}

var poolMapEvent_GetAppointEventInfoResponse = &sync.Pool{New: func() interface{} { return &MapEvent_GetAppointEventInfoResponse{} }}

func (m *MapEvent_GetAppointEventInfoResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_GetAppointEventInfoResponse.Put(m)
	m = nil
}

var poolMapEvent_FixAppointEventFinishStatusRequest = &sync.Pool{New: func() interface{} { return &MapEvent_FixAppointEventFinishStatusRequest{} }}

func (m *MapEvent_FixAppointEventFinishStatusRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_FixAppointEventFinishStatusRequest.Put(m)
	m = nil
}

var poolMapEvent_FixAppointEventFinishStatusResponse = &sync.Pool{New: func() interface{} { return &MapEvent_FixAppointEventFinishStatusResponse{} }}

func (m *MapEvent_FixAppointEventFinishStatusResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_FixAppointEventFinishStatusResponse.Put(m)
	m = nil
}

var poolMapEvent_CheatUnlockEventRequest = &sync.Pool{New: func() interface{} { return &MapEvent_CheatUnlockEventRequest{} }}

func (m *MapEvent_CheatUnlockEventRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatUnlockEventRequest.Put(m)
	m = nil
}

var poolMapEvent_CheatUnlockEventResponse = &sync.Pool{New: func() interface{} { return &MapEvent_CheatUnlockEventResponse{} }}

func (m *MapEvent_CheatUnlockEventResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatUnlockEventResponse.Put(m)
	m = nil
}

var poolMapEvent_UnlockEventRequest = &sync.Pool{New: func() interface{} { return &MapEvent_UnlockEventRequest{} }}

func (m *MapEvent_UnlockEventRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_UnlockEventRequest.Put(m)
	m = nil
}

var poolMapEvent_UnlockEventResponse = &sync.Pool{New: func() interface{} { return &MapEvent_UnlockEventResponse{} }}

func (m *MapEvent_UnlockEventResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_UnlockEventResponse.Put(m)
	m = nil
}

var poolMapEvent_CheatAddEventRequest = &sync.Pool{New: func() interface{} { return &MapEvent_CheatAddEventRequest{} }}

func (m *MapEvent_CheatAddEventRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatAddEventRequest.Put(m)
	m = nil
}

var poolMapEvent_CheatAddEventResponse = &sync.Pool{New: func() interface{} { return &MapEvent_CheatAddEventResponse{} }}

func (m *MapEvent_CheatAddEventResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatAddEventResponse.Put(m)
	m = nil
}

var poolMapEvent_CheatFinishEventRequest = &sync.Pool{New: func() interface{} { return &MapEvent_CheatFinishEventRequest{} }}

func (m *MapEvent_CheatFinishEventRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatFinishEventRequest.Put(m)
	m = nil
}

var poolMapEvent_CheatFinishEventResponse = &sync.Pool{New: func() interface{} { return &MapEvent_CheatFinishEventResponse{} }}

func (m *MapEvent_CheatFinishEventResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatFinishEventResponse.Put(m)
	m = nil
}

var poolMapEvent_CheatChangeMapRequest = &sync.Pool{New: func() interface{} { return &MapEvent_CheatChangeMapRequest{} }}

func (m *MapEvent_CheatChangeMapRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatChangeMapRequest.Put(m)
	m = nil
}

var poolMapEvent_CheatChangeMapResponse = &sync.Pool{New: func() interface{} { return &MapEvent_CheatChangeMapResponse{} }}

func (m *MapEvent_CheatChangeMapResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatChangeMapResponse.Put(m)
	m = nil
}

var poolMapEvent_CheatGetStoryRequest = &sync.Pool{New: func() interface{} { return &MapEvent_CheatGetStoryRequest{} }}

func (m *MapEvent_CheatGetStoryRequest) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatGetStoryRequest.Put(m)
	m = nil
}

var poolMapEvent_CheatGetStoryResponse = &sync.Pool{New: func() interface{} { return &MapEvent_CheatGetStoryResponse{} }}

func (m *MapEvent_CheatGetStoryResponse) ReleasePool() {
	m.Reset()
	poolMapEvent_CheatGetStoryResponse.Put(m)
	m = nil
}

var poolMapEvent_EventFinishPush = &sync.Pool{New: func() interface{} { return &MapEvent_EventFinishPush{} }}

func (m *MapEvent_EventFinishPush) ReleasePool() {
	m.Reset()
	poolMapEvent_EventFinishPush.Put(m)
	m = nil
}
func (x MapEventErrorCode) String() string {
	s, ok := MapEventErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MapEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent)
	if !ok {
		that2, ok := that.(MapEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_GetMapStoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_GetMapStoryRequest)
	if !ok {
		that2, ok := that.(MapEvent_GetMapStoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_GetMapStoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_GetMapStoryResponse)
	if !ok {
		that2, ok := that.(MapEvent_GetMapStoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Story) != len(that1.Story) {
		return false
	}
	for i := range this.Story {
		if !this.Story[i].Equal(that1.Story[i]) {
			return false
		}
	}
	return true
}
func (this *MapEvent_GetStoryRewardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_GetStoryRewardRequest)
	if !ok {
		that2, ok := that.(MapEvent_GetStoryRewardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoryId != that1.StoryId {
		return false
	}
	return true
}
func (this *MapEvent_GetStoryRewardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_GetStoryRewardResponse)
	if !ok {
		that2, ok := that.(MapEvent_GetStoryRewardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	return true
}
func (this *MapEvent_GetMapEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_GetMapEventRequest)
	if !ok {
		that2, ok := that.(MapEvent_GetMapEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_GetMapEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_GetMapEventResponse)
	if !ok {
		that2, ok := that.(MapEvent_GetMapEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	if this.Count != that1.Count {
		return false
	}
	if this.NextRefresh != that1.NextRefresh {
		return false
	}
	if this.Curr != that1.Curr {
		return false
	}
	return true
}
func (this *MapEvent_RefreshEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_RefreshEventRequest)
	if !ok {
		that2, ok := that.(MapEvent_RefreshEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_RefreshEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_RefreshEventResponse)
	if !ok {
		that2, ok := that.(MapEvent_RefreshEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *MapEvent_ComplateEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_ComplateEventRequest)
	if !ok {
		that2, ok := that.(MapEvent_ComplateEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	return true
}
func (this *MapEvent_ComplateEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_ComplateEventResponse)
	if !ok {
		that2, ok := that.(MapEvent_ComplateEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_AppointEventStartRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_AppointEventStartRequest)
	if !ok {
		that2, ok := that.(MapEvent_AppointEventStartRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	return true
}
func (this *MapEvent_AppointEventStartResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_AppointEventStartResponse)
	if !ok {
		that2, ok := that.(MapEvent_AppointEventStartResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_GetAppointEventInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_GetAppointEventInfoRequest)
	if !ok {
		that2, ok := that.(MapEvent_GetAppointEventInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_GetAppointEventInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_GetAppointEventInfoResponse)
	if !ok {
		that2, ok := that.(MapEvent_GetAppointEventInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EventInfos) != len(that1.EventInfos) {
		return false
	}
	for i := range this.EventInfos {
		if !this.EventInfos[i].Equal(that1.EventInfos[i]) {
			return false
		}
	}
	return true
}
func (this *MapEvent_FixAppointEventFinishStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_FixAppointEventFinishStatusRequest)
	if !ok {
		that2, ok := that.(MapEvent_FixAppointEventFinishStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	return true
}
func (this *MapEvent_FixAppointEventFinishStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_FixAppointEventFinishStatusResponse)
	if !ok {
		that2, ok := that.(MapEvent_FixAppointEventFinishStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_CheatUnlockEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatUnlockEventRequest)
	if !ok {
		that2, ok := that.(MapEvent_CheatUnlockEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_CheatUnlockEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatUnlockEventResponse)
	if !ok {
		that2, ok := that.(MapEvent_CheatUnlockEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_UnlockEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_UnlockEventRequest)
	if !ok {
		that2, ok := that.(MapEvent_UnlockEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_UnlockEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_UnlockEventResponse)
	if !ok {
		that2, ok := that.(MapEvent_UnlockEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_CheatAddEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatAddEventRequest)
	if !ok {
		that2, ok := that.(MapEvent_CheatAddEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.Point != that1.Point {
		return false
	}
	return true
}
func (this *MapEvent_CheatAddEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatAddEventResponse)
	if !ok {
		that2, ok := that.(MapEvent_CheatAddEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_CheatFinishEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatFinishEventRequest)
	if !ok {
		that2, ok := that.(MapEvent_CheatFinishEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	return true
}
func (this *MapEvent_CheatFinishEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatFinishEventResponse)
	if !ok {
		that2, ok := that.(MapEvent_CheatFinishEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_CheatChangeMapRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatChangeMapRequest)
	if !ok {
		that2, ok := that.(MapEvent_CheatChangeMapRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *MapEvent_CheatChangeMapResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatChangeMapResponse)
	if !ok {
		that2, ok := that.(MapEvent_CheatChangeMapResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_CheatGetStoryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatGetStoryRequest)
	if !ok {
		that2, ok := that.(MapEvent_CheatGetStoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoryId != that1.StoryId {
		return false
	}
	if this.Piece != that1.Piece {
		return false
	}
	return true
}
func (this *MapEvent_CheatGetStoryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_CheatGetStoryResponse)
	if !ok {
		that2, ok := that.(MapEvent_CheatGetStoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MapEvent_EventFinishPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent_EventFinishPush)
	if !ok {
		that2, ok := that.(MapEvent_EventFinishPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.IsSuccess != that1.IsSuccess {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	if this.StoryId != that1.StoryId {
		return false
	}
	if this.Piece != that1.Piece {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.Ratio != that1.Ratio {
		return false
	}
	return true
}
func (m *MapEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_GetMapStoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_GetMapStoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_GetMapStoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_GetMapStoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_GetMapStoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_GetMapStoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Story) > 0 {
		for iNdEx := len(m.Story) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Story[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_GetStoryRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_GetStoryRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_GetStoryRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoryId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.StoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_GetStoryRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_GetStoryRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_GetStoryRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for k := range m.Reward {
			v := m.Reward[k]
			baseI := i
			i = encodeVarintMapEvent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMapEvent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMapEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_GetMapEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_GetMapEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_GetMapEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_GetMapEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_GetMapEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_GetMapEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Curr != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Curr))
		i--
		dAtA[i] = 0x20
	}
	if m.NextRefresh != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.NextRefresh))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_RefreshEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_RefreshEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_RefreshEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_RefreshEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_RefreshEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_RefreshEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_ComplateEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_ComplateEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_ComplateEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_ComplateEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_ComplateEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_ComplateEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_AppointEventStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_AppointEventStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_AppointEventStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_AppointEventStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_AppointEventStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_AppointEventStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_GetAppointEventInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_GetAppointEventInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_GetAppointEventInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_GetAppointEventInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_GetAppointEventInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_GetAppointEventInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventInfos) > 0 {
		for iNdEx := len(m.EventInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_FixAppointEventFinishStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_FixAppointEventFinishStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_FixAppointEventFinishStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_FixAppointEventFinishStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_FixAppointEventFinishStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_FixAppointEventFinishStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatUnlockEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatUnlockEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatUnlockEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatUnlockEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatUnlockEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatUnlockEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_UnlockEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_UnlockEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_UnlockEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_UnlockEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_UnlockEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_UnlockEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatAddEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatAddEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatAddEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Point != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x20
	}
	if m.GameId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x18
	}
	if m.MapId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatAddEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatAddEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatAddEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatFinishEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatFinishEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatFinishEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatFinishEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatFinishEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatFinishEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatChangeMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatChangeMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatChangeMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatChangeMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatChangeMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatChangeMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatGetStoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatGetStoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatGetStoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Piece != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Piece))
		i--
		dAtA[i] = 0x10
	}
	if m.StoryId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.StoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent_CheatGetStoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_CheatGetStoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_CheatGetStoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MapEvent_EventFinishPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent_EventFinishPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent_EventFinishPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ratio != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x38
	}
	if m.MapId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x30
	}
	if m.Piece != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Piece))
		i--
		dAtA[i] = 0x28
	}
	if m.StoryId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.StoryId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintMapEvent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMapEvent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMapEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MapEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_GetMapStoryRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_GetMapStoryResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("story")
	w.RawByte('"')
	w.RawByte(':')
	if m.Story == nil {
		w.RawString("null")
	} else if len(m.Story) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Story {
			v.JsonBytes(w)
			if i != len(m.Story)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_GetStoryRewardRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.StoryId != 0 {
		w.RawByte('"')
		w.RawString("story_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StoryId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_GetStoryRewardResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlReward := len(m.Reward)
		for k, v := range m.Reward {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlReward--
			if mlReward != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_GetMapEventRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_GetMapEventResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("events")
	w.RawByte('"')
	w.RawByte(':')
	if m.Events == nil {
		w.RawString("null")
	} else if len(m.Events) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Events {
			v.JsonBytes(w)
			if i != len(m.Events)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.NextRefresh != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_refresh")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRefresh))
		needWriteComma = true
	}
	if m.Curr != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("curr")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Curr))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_RefreshEventRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_RefreshEventResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("event")
	w.RawByte('"')
	w.RawByte(':')
	m.Event.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_ComplateEventRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EventId != 0 {
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_ComplateEventResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_AppointEventStartRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EventId != 0 {
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_AppointEventStartResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_GetAppointEventInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_GetAppointEventInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("event_infos")
	w.RawByte('"')
	w.RawByte(':')
	if m.EventInfos == nil {
		w.RawString("null")
	} else if len(m.EventInfos) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.EventInfos {
			v.JsonBytes(w)
			if i != len(m.EventInfos)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_FixAppointEventFinishStatusRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EventId != 0 {
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_FixAppointEventFinishStatusResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_CheatUnlockEventRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_CheatUnlockEventResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_UnlockEventRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_UnlockEventResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_CheatAddEventRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EventId != 0 {
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	if m.Point != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("point")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Point))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_CheatAddEventResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_CheatFinishEventRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EventId != 0 {
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_CheatFinishEventResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_CheatChangeMapRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_CheatChangeMapResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_CheatGetStoryRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.StoryId != 0 {
		w.RawByte('"')
		w.RawString("story_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StoryId))
		needWriteComma = true
	}
	if m.Piece != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("piece")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Piece))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent_CheatGetStoryResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MapEvent_EventFinishPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EventId != 0 {
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.IsSuccess {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSuccess)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.StoryId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("story_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StoryId))
		needWriteComma = true
	}
	if m.Piece != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("piece")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Piece))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.Ratio != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Ratio")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Ratio))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent) GoString() string {
	return m.String()
}

func (m *MapEvent_GetMapStoryRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_GetMapStoryRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_GetMapStoryRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_GetMapStoryResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_GetMapStoryResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_GetMapStoryResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_GetStoryRewardRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_GetStoryRewardRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_GetStoryRewardRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_GetStoryRewardResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_GetStoryRewardResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_GetStoryRewardResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_GetMapEventRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_GetMapEventRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_GetMapEventRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_GetMapEventResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_GetMapEventResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_GetMapEventResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_RefreshEventRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_RefreshEventRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_RefreshEventRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_RefreshEventResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_RefreshEventResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_RefreshEventResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_ComplateEventRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_ComplateEventRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_ComplateEventRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_ComplateEventResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_ComplateEventResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_ComplateEventResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_AppointEventStartRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_AppointEventStartRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_AppointEventStartRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_AppointEventStartResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_AppointEventStartResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_AppointEventStartResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_GetAppointEventInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_GetAppointEventInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_GetAppointEventInfoRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_GetAppointEventInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_GetAppointEventInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_GetAppointEventInfoResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_FixAppointEventFinishStatusRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_FixAppointEventFinishStatusRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_FixAppointEventFinishStatusRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_FixAppointEventFinishStatusResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_FixAppointEventFinishStatusResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_FixAppointEventFinishStatusResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatUnlockEventRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatUnlockEventRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatUnlockEventRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatUnlockEventResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatUnlockEventResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatUnlockEventResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_UnlockEventRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_UnlockEventRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_UnlockEventRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_UnlockEventResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_UnlockEventResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_UnlockEventResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatAddEventRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatAddEventRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatAddEventRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatAddEventResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatAddEventResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatAddEventResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatFinishEventRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatFinishEventRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatFinishEventRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatFinishEventResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatFinishEventResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatFinishEventResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatChangeMapRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatChangeMapRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatChangeMapRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatChangeMapResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatChangeMapResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatChangeMapResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatGetStoryRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatGetStoryRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatGetStoryRequest) GoString() string {
	return m.String()
}

func (m *MapEvent_CheatGetStoryResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_CheatGetStoryResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_CheatGetStoryResponse) GoString() string {
	return m.String()
}

func (m *MapEvent_EventFinishPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent_EventFinishPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent_EventFinishPush) GoString() string {
	return m.String()
}

func (m *MapEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_GetMapStoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_GetMapStoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Story) > 0 {
		for _, e := range m.Story {
			l = e.Size()
			n += 1 + l + sovMapEvent(uint64(l))
		}
	}
	return n
}

func (m *MapEvent_GetStoryRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoryId != 0 {
		n += 1 + sovMapEvent(uint64(m.StoryId))
	}
	return n
}

func (m *MapEvent_GetStoryRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for k, v := range m.Reward {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapEvent(uint64(k)) + 1 + sovMapEvent(uint64(v))
			n += mapEntrySize + 1 + sovMapEvent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MapEvent_GetMapEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_GetMapEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovMapEvent(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovMapEvent(uint64(m.Count))
	}
	if m.NextRefresh != 0 {
		n += 1 + sovMapEvent(uint64(m.NextRefresh))
	}
	if m.Curr != 0 {
		n += 1 + sovMapEvent(uint64(m.Curr))
	}
	return n
}

func (m *MapEvent_RefreshEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_RefreshEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovMapEvent(uint64(l))
	}
	return n
}

func (m *MapEvent_ComplateEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMapEvent(uint64(m.EventId))
	}
	return n
}

func (m *MapEvent_ComplateEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_AppointEventStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMapEvent(uint64(m.EventId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapEvent(uint64(m.GameId))
	}
	return n
}

func (m *MapEvent_AppointEventStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_GetAppointEventInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_GetAppointEventInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventInfos) > 0 {
		for _, e := range m.EventInfos {
			l = e.Size()
			n += 1 + l + sovMapEvent(uint64(l))
		}
	}
	return n
}

func (m *MapEvent_FixAppointEventFinishStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMapEvent(uint64(m.EventId))
	}
	return n
}

func (m *MapEvent_FixAppointEventFinishStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_CheatUnlockEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_CheatUnlockEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_UnlockEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_UnlockEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_CheatAddEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMapEvent(uint64(m.EventId))
	}
	if m.MapId != 0 {
		n += 1 + sovMapEvent(uint64(m.MapId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapEvent(uint64(m.GameId))
	}
	if m.Point != 0 {
		n += 1 + sovMapEvent(uint64(m.Point))
	}
	return n
}

func (m *MapEvent_CheatAddEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_CheatFinishEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMapEvent(uint64(m.EventId))
	}
	return n
}

func (m *MapEvent_CheatFinishEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_CheatChangeMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovMapEvent(uint64(m.MapId))
	}
	return n
}

func (m *MapEvent_CheatChangeMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_CheatGetStoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoryId != 0 {
		n += 1 + sovMapEvent(uint64(m.StoryId))
	}
	if m.Piece != 0 {
		n += 1 + sovMapEvent(uint64(m.Piece))
	}
	return n
}

func (m *MapEvent_CheatGetStoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MapEvent_EventFinishPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMapEvent(uint64(m.EventId))
	}
	if m.IsSuccess {
		n += 2
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapEvent(uint64(k)) + 1 + sovMapEvent(uint64(v))
			n += mapEntrySize + 1 + sovMapEvent(uint64(mapEntrySize))
		}
	}
	if m.StoryId != 0 {
		n += 1 + sovMapEvent(uint64(m.StoryId))
	}
	if m.Piece != 0 {
		n += 1 + sovMapEvent(uint64(m.Piece))
	}
	if m.MapId != 0 {
		n += 1 + sovMapEvent(uint64(m.MapId))
	}
	if m.Ratio != 0 {
		n += 1 + sovMapEvent(uint64(m.Ratio))
	}
	return n
}

func sovMapEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapEvent(x uint64) (n int) {
	return sovMapEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MapEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_GetMapStoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapStoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapStoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_GetMapStoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapStoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapStoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Story", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Story = append(m.Story, &models.MapStory{})
			if err := m.Story[len(m.Story)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_GetStoryRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStoryRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStoryRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoryId", wireType)
			}
			m.StoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_GetStoryRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStoryRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStoryRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMapEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMapEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reward[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_GetMapEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_GetMapEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &models.MapEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefresh", wireType)
			}
			m.NextRefresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefresh |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curr", wireType)
			}
			m.Curr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_RefreshEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_RefreshEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &models.MapEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_ComplateEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplateEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplateEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_ComplateEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplateEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplateEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_AppointEventStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointEventStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointEventStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_AppointEventStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointEventStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointEventStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_GetAppointEventInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppointEventInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppointEventInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_GetAppointEventInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppointEventInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppointEventInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventInfos = append(m.EventInfos, &models.AppointMapEvent{})
			if err := m.EventInfos[len(m.EventInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_FixAppointEventFinishStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixAppointEventFinishStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixAppointEventFinishStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_FixAppointEventFinishStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixAppointEventFinishStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixAppointEventFinishStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatUnlockEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatUnlockEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatUnlockEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatUnlockEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatUnlockEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatUnlockEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_UnlockEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_UnlockEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatAddEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatAddEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatFinishEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatFinishEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatFinishEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatFinishEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatFinishEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatFinishEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatChangeMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatChangeMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatChangeMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatChangeMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatChangeMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatChangeMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatGetStoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatGetStoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatGetStoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoryId", wireType)
			}
			m.StoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Piece", wireType)
			}
			m.Piece = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Piece |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_CheatGetStoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatGetStoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatGetStoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent_EventFinishPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFinishPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFinishPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMapEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMapEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoryId", wireType)
			}
			m.StoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Piece", wireType)
			}
			m.Piece = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Piece |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapEvent = fmt.Errorf("proto: unexpected end of group")
)
