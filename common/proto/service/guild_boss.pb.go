// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/guild_boss.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GuildBossErrorCode int32

const (
	GuildBossErrorCode_ErrorGuildBossAlreadyRewards GuildBossErrorCode = 0
	GuildBossErrorCode_ErrorGuildBossMaxEnterPlayer GuildBossErrorCode = 1
)

var GuildBossErrorCode_name = map[int32]string{
	0: "ErrorGuildBossAlreadyRewards",
	1: "ErrorGuildBossMaxEnterPlayer",
}

var GuildBossErrorCode_value = map[string]int32{
	"ErrorGuildBossAlreadyRewards": 0,
	"ErrorGuildBossMaxEnterPlayer": 1,
}

func (GuildBossErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0}
}

type GuildBoss struct {
}

func (m *GuildBoss) Reset()      { *m = GuildBoss{} }
func (*GuildBoss) ProtoMessage() {}
func (*GuildBoss) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0}
}
func (m *GuildBoss) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss.Merge(m, src)
}
func (m *GuildBoss) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss proto.InternalMessageInfo

func (*GuildBoss) XXX_MessageName() string {
	return "service.GuildBoss"
}

// 获取今天和过去可领取的奖品信息
type GuildBoss_GetCurrDayRewardsRequest struct {
}

func (m *GuildBoss_GetCurrDayRewardsRequest) Reset()      { *m = GuildBoss_GetCurrDayRewardsRequest{} }
func (*GuildBoss_GetCurrDayRewardsRequest) ProtoMessage() {}
func (*GuildBoss_GetCurrDayRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 0}
}
func (m *GuildBoss_GetCurrDayRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_GetCurrDayRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_GetCurrDayRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_GetCurrDayRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_GetCurrDayRewardsRequest.Merge(m, src)
}
func (m *GuildBoss_GetCurrDayRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_GetCurrDayRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_GetCurrDayRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_GetCurrDayRewardsRequest proto.InternalMessageInfo

func (*GuildBoss_GetCurrDayRewardsRequest) XXX_MessageName() string {
	return "service.GuildBoss.GetCurrDayRewardsRequest"
}

type GuildBoss_OtherRewards struct {
	Timestamp   int64          `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SelfDamage  int64          `protobuf:"varint,2,opt,name=self_damage,json=selfDamage,proto3" json:"self_damage,omitempty"`
	TotalDamage int64          `protobuf:"varint,3,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	Items       []*models.Item `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *GuildBoss_OtherRewards) Reset()      { *m = GuildBoss_OtherRewards{} }
func (*GuildBoss_OtherRewards) ProtoMessage() {}
func (*GuildBoss_OtherRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 1}
}
func (m *GuildBoss_OtherRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_OtherRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_OtherRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_OtherRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_OtherRewards.Merge(m, src)
}
func (m *GuildBoss_OtherRewards) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_OtherRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_OtherRewards.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_OtherRewards proto.InternalMessageInfo

func (m *GuildBoss_OtherRewards) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GuildBoss_OtherRewards) GetSelfDamage() int64 {
	if m != nil {
		return m.SelfDamage
	}
	return 0
}

func (m *GuildBoss_OtherRewards) GetTotalDamage() int64 {
	if m != nil {
		return m.TotalDamage
	}
	return 0
}

func (m *GuildBoss_OtherRewards) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*GuildBoss_OtherRewards) XXX_MessageName() string {
	return "service.GuildBoss.OtherRewards"
}

type GuildBoss_CurrDayRewards struct {
	Damage int64          `protobuf:"varint,1,opt,name=damage,proto3" json:"damage,omitempty"`
	Status int64          `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Items  []*models.Item `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *GuildBoss_CurrDayRewards) Reset()      { *m = GuildBoss_CurrDayRewards{} }
func (*GuildBoss_CurrDayRewards) ProtoMessage() {}
func (*GuildBoss_CurrDayRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 2}
}
func (m *GuildBoss_CurrDayRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_CurrDayRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_CurrDayRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_CurrDayRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_CurrDayRewards.Merge(m, src)
}
func (m *GuildBoss_CurrDayRewards) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_CurrDayRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_CurrDayRewards.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_CurrDayRewards proto.InternalMessageInfo

func (m *GuildBoss_CurrDayRewards) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *GuildBoss_CurrDayRewards) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GuildBoss_CurrDayRewards) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*GuildBoss_CurrDayRewards) XXX_MessageName() string {
	return "service.GuildBoss.CurrDayRewards"
}

type GuildBoss_GetCurrDayRewardsResponse struct {
	CurrDayRewards  []*GuildBoss_CurrDayRewards `protobuf:"bytes,1,rep,name=curr_day_rewards,json=currDayRewards,proto3" json:"curr_day_rewards,omitempty"`
	OtherDayRewards []*GuildBoss_OtherRewards   `protobuf:"bytes,2,rep,name=other_day_rewards,json=otherDayRewards,proto3" json:"other_day_rewards,omitempty"`
}

func (m *GuildBoss_GetCurrDayRewardsResponse) Reset()      { *m = GuildBoss_GetCurrDayRewardsResponse{} }
func (*GuildBoss_GetCurrDayRewardsResponse) ProtoMessage() {}
func (*GuildBoss_GetCurrDayRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 3}
}
func (m *GuildBoss_GetCurrDayRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_GetCurrDayRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_GetCurrDayRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_GetCurrDayRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_GetCurrDayRewardsResponse.Merge(m, src)
}
func (m *GuildBoss_GetCurrDayRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_GetCurrDayRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_GetCurrDayRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_GetCurrDayRewardsResponse proto.InternalMessageInfo

func (m *GuildBoss_GetCurrDayRewardsResponse) GetCurrDayRewards() []*GuildBoss_CurrDayRewards {
	if m != nil {
		return m.CurrDayRewards
	}
	return nil
}

func (m *GuildBoss_GetCurrDayRewardsResponse) GetOtherDayRewards() []*GuildBoss_OtherRewards {
	if m != nil {
		return m.OtherDayRewards
	}
	return nil
}

func (*GuildBoss_GetCurrDayRewardsResponse) XXX_MessageName() string {
	return "service.GuildBoss.GetCurrDayRewardsResponse"
}

// 领取今天的奖品
type GuildBoss_RewardCurrDayRequest struct {
}

func (m *GuildBoss_RewardCurrDayRequest) Reset()      { *m = GuildBoss_RewardCurrDayRequest{} }
func (*GuildBoss_RewardCurrDayRequest) ProtoMessage() {}
func (*GuildBoss_RewardCurrDayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 4}
}
func (m *GuildBoss_RewardCurrDayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_RewardCurrDayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_RewardCurrDayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_RewardCurrDayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_RewardCurrDayRequest.Merge(m, src)
}
func (m *GuildBoss_RewardCurrDayRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_RewardCurrDayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_RewardCurrDayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_RewardCurrDayRequest proto.InternalMessageInfo

func (*GuildBoss_RewardCurrDayRequest) XXX_MessageName() string {
	return "service.GuildBoss.RewardCurrDayRequest"
}

type GuildBoss_RewardCurrDayResponse struct {
	CurrDayRewards  []*GuildBoss_CurrDayRewards `protobuf:"bytes,1,rep,name=curr_day_rewards,json=currDayRewards,proto3" json:"curr_day_rewards,omitempty"`
	OtherDayRewards []*GuildBoss_OtherRewards   `protobuf:"bytes,2,rep,name=other_day_rewards,json=otherDayRewards,proto3" json:"other_day_rewards,omitempty"`
}

func (m *GuildBoss_RewardCurrDayResponse) Reset()      { *m = GuildBoss_RewardCurrDayResponse{} }
func (*GuildBoss_RewardCurrDayResponse) ProtoMessage() {}
func (*GuildBoss_RewardCurrDayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 5}
}
func (m *GuildBoss_RewardCurrDayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_RewardCurrDayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_RewardCurrDayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_RewardCurrDayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_RewardCurrDayResponse.Merge(m, src)
}
func (m *GuildBoss_RewardCurrDayResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_RewardCurrDayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_RewardCurrDayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_RewardCurrDayResponse proto.InternalMessageInfo

func (m *GuildBoss_RewardCurrDayResponse) GetCurrDayRewards() []*GuildBoss_CurrDayRewards {
	if m != nil {
		return m.CurrDayRewards
	}
	return nil
}

func (m *GuildBoss_RewardCurrDayResponse) GetOtherDayRewards() []*GuildBoss_OtherRewards {
	if m != nil {
		return m.OtherDayRewards
	}
	return nil
}

func (*GuildBoss_RewardCurrDayResponse) XXX_MessageName() string {
	return "service.GuildBoss.RewardCurrDayResponse"
}

// 领取之前的奖品
type GuildBoss_RewardOtherDayRequest struct {
}

func (m *GuildBoss_RewardOtherDayRequest) Reset()      { *m = GuildBoss_RewardOtherDayRequest{} }
func (*GuildBoss_RewardOtherDayRequest) ProtoMessage() {}
func (*GuildBoss_RewardOtherDayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 6}
}
func (m *GuildBoss_RewardOtherDayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_RewardOtherDayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_RewardOtherDayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_RewardOtherDayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_RewardOtherDayRequest.Merge(m, src)
}
func (m *GuildBoss_RewardOtherDayRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_RewardOtherDayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_RewardOtherDayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_RewardOtherDayRequest proto.InternalMessageInfo

func (*GuildBoss_RewardOtherDayRequest) XXX_MessageName() string {
	return "service.GuildBoss.RewardOtherDayRequest"
}

type GuildBoss_RewardOtherDayResponse struct {
	CurrDayRewards  []*GuildBoss_CurrDayRewards `protobuf:"bytes,1,rep,name=curr_day_rewards,json=currDayRewards,proto3" json:"curr_day_rewards,omitempty"`
	OtherDayRewards []*GuildBoss_OtherRewards   `protobuf:"bytes,2,rep,name=other_day_rewards,json=otherDayRewards,proto3" json:"other_day_rewards,omitempty"`
}

func (m *GuildBoss_RewardOtherDayResponse) Reset()      { *m = GuildBoss_RewardOtherDayResponse{} }
func (*GuildBoss_RewardOtherDayResponse) ProtoMessage() {}
func (*GuildBoss_RewardOtherDayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 7}
}
func (m *GuildBoss_RewardOtherDayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_RewardOtherDayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_RewardOtherDayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_RewardOtherDayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_RewardOtherDayResponse.Merge(m, src)
}
func (m *GuildBoss_RewardOtherDayResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_RewardOtherDayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_RewardOtherDayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_RewardOtherDayResponse proto.InternalMessageInfo

func (m *GuildBoss_RewardOtherDayResponse) GetCurrDayRewards() []*GuildBoss_CurrDayRewards {
	if m != nil {
		return m.CurrDayRewards
	}
	return nil
}

func (m *GuildBoss_RewardOtherDayResponse) GetOtherDayRewards() []*GuildBoss_OtherRewards {
	if m != nil {
		return m.OtherDayRewards
	}
	return nil
}

func (*GuildBoss_RewardOtherDayResponse) XXX_MessageName() string {
	return "service.GuildBoss.RewardOtherDayResponse"
}

// 检查是否可以进入工会Boss
type GuildBoss_CanEnterRequest struct {
}

func (m *GuildBoss_CanEnterRequest) Reset()      { *m = GuildBoss_CanEnterRequest{} }
func (*GuildBoss_CanEnterRequest) ProtoMessage() {}
func (*GuildBoss_CanEnterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 8}
}
func (m *GuildBoss_CanEnterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_CanEnterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_CanEnterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_CanEnterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_CanEnterRequest.Merge(m, src)
}
func (m *GuildBoss_CanEnterRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_CanEnterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_CanEnterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_CanEnterRequest proto.InternalMessageInfo

func (*GuildBoss_CanEnterRequest) XXX_MessageName() string {
	return "service.GuildBoss.CanEnterRequest"
}

// 检查是否可以进入工会Boss
type GuildBoss_CanEnterResponse struct {
	Can              bool  `protobuf:"varint,1,opt,name=can,proto3" json:"can,omitempty"`
	RemainSeconds    int64 `protobuf:"varint,2,opt,name=remain_seconds,json=remainSeconds,proto3" json:"remain_seconds,omitempty"`
	TotalDamage      int64 `protobuf:"varint,3,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	RefreshRemain    int64 `protobuf:"varint,4,opt,name=refresh_remain,json=refreshRemain,proto3" json:"refresh_remain,omitempty"`
	RemainEnterCount int64 `protobuf:"varint,5,opt,name=remain_enter_count,json=remainEnterCount,proto3" json:"remain_enter_count,omitempty"`
}

func (m *GuildBoss_CanEnterResponse) Reset()      { *m = GuildBoss_CanEnterResponse{} }
func (*GuildBoss_CanEnterResponse) ProtoMessage() {}
func (*GuildBoss_CanEnterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 9}
}
func (m *GuildBoss_CanEnterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_CanEnterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_CanEnterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_CanEnterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_CanEnterResponse.Merge(m, src)
}
func (m *GuildBoss_CanEnterResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_CanEnterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_CanEnterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_CanEnterResponse proto.InternalMessageInfo

func (m *GuildBoss_CanEnterResponse) GetCan() bool {
	if m != nil {
		return m.Can
	}
	return false
}

func (m *GuildBoss_CanEnterResponse) GetRemainSeconds() int64 {
	if m != nil {
		return m.RemainSeconds
	}
	return 0
}

func (m *GuildBoss_CanEnterResponse) GetTotalDamage() int64 {
	if m != nil {
		return m.TotalDamage
	}
	return 0
}

func (m *GuildBoss_CanEnterResponse) GetRefreshRemain() int64 {
	if m != nil {
		return m.RefreshRemain
	}
	return 0
}

func (m *GuildBoss_CanEnterResponse) GetRemainEnterCount() int64 {
	if m != nil {
		return m.RemainEnterCount
	}
	return 0
}

func (*GuildBoss_CanEnterResponse) XXX_MessageName() string {
	return "service.GuildBoss.CanEnterResponse"
}

type GuildBoss_GetGBBattleServerInfoRequest struct {
}

func (m *GuildBoss_GetGBBattleServerInfoRequest) Reset() {
	*m = GuildBoss_GetGBBattleServerInfoRequest{}
}
func (*GuildBoss_GetGBBattleServerInfoRequest) ProtoMessage() {}
func (*GuildBoss_GetGBBattleServerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 10}
}
func (m *GuildBoss_GetGBBattleServerInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_GetGBBattleServerInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_GetGBBattleServerInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_GetGBBattleServerInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_GetGBBattleServerInfoRequest.Merge(m, src)
}
func (m *GuildBoss_GetGBBattleServerInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_GetGBBattleServerInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_GetGBBattleServerInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_GetGBBattleServerInfoRequest proto.InternalMessageInfo

func (*GuildBoss_GetGBBattleServerInfoRequest) XXX_MessageName() string {
	return "service.GuildBoss.GetGBBattleServerInfoRequest"
}

type GuildBoss_GetGBBattleServerInfoResponse struct {
	Can           bool  `protobuf:"varint,1,opt,name=can,proto3" json:"can,omitempty"`
	RemainSeconds int64 `protobuf:"varint,2,opt,name=remain_seconds,json=remainSeconds,proto3" json:"remain_seconds,omitempty"`
	TotalDamage   int64 `protobuf:"varint,3,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	RefreshRemain int64 `protobuf:"varint,4,opt,name=refresh_remain,json=refreshRemain,proto3" json:"refresh_remain,omitempty"`
	MapSceneId    int64 `protobuf:"varint,5,opt,name=map_scene_id,json=mapSceneId,proto3" json:"map_scene_id,omitempty"`
	BattleId      int64 `protobuf:"varint,6,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) Reset() {
	*m = GuildBoss_GetGBBattleServerInfoResponse{}
}
func (*GuildBoss_GetGBBattleServerInfoResponse) ProtoMessage() {}
func (*GuildBoss_GetGBBattleServerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 11}
}
func (m *GuildBoss_GetGBBattleServerInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_GetGBBattleServerInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_GetGBBattleServerInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_GetGBBattleServerInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_GetGBBattleServerInfoResponse.Merge(m, src)
}
func (m *GuildBoss_GetGBBattleServerInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_GetGBBattleServerInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_GetGBBattleServerInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_GetGBBattleServerInfoResponse proto.InternalMessageInfo

func (m *GuildBoss_GetGBBattleServerInfoResponse) GetCan() bool {
	if m != nil {
		return m.Can
	}
	return false
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) GetRemainSeconds() int64 {
	if m != nil {
		return m.RemainSeconds
	}
	return 0
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) GetTotalDamage() int64 {
	if m != nil {
		return m.TotalDamage
	}
	return 0
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) GetRefreshRemain() int64 {
	if m != nil {
		return m.RefreshRemain
	}
	return 0
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) GetMapSceneId() int64 {
	if m != nil {
		return m.MapSceneId
	}
	return 0
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*GuildBoss_GetGBBattleServerInfoResponse) XXX_MessageName() string {
	return "service.GuildBoss.GetGBBattleServerInfoResponse"
}

type GuildBoss_SyncDamageInfoPush struct {
	PlayerDamages    map[string]int64 `protobuf:"bytes,1,rep,name=player_damages,json=playerDamages,proto3" json:"player_damages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalDamages     int64            `protobuf:"varint,2,opt,name=total_damages,json=totalDamages,proto3" json:"total_damages,omitempty"`
	GuildDayId       string           `protobuf:"bytes,3,opt,name=guild_day_id,json=guildDayId,proto3" json:"guild_day_id,omitempty"`
	OverRole         string           `protobuf:"bytes,4,opt,name=over_role,json=overRole,proto3" json:"over_role,omitempty"`
	OverRoleServerId int64            `protobuf:"varint,5,opt,name=over_role_server_id,json=overRoleServerId,proto3" json:"over_role_server_id,omitempty"`
}

func (m *GuildBoss_SyncDamageInfoPush) Reset()      { *m = GuildBoss_SyncDamageInfoPush{} }
func (*GuildBoss_SyncDamageInfoPush) ProtoMessage() {}
func (*GuildBoss_SyncDamageInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 12}
}
func (m *GuildBoss_SyncDamageInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_SyncDamageInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_SyncDamageInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_SyncDamageInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_SyncDamageInfoPush.Merge(m, src)
}
func (m *GuildBoss_SyncDamageInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_SyncDamageInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_SyncDamageInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_SyncDamageInfoPush proto.InternalMessageInfo

func (m *GuildBoss_SyncDamageInfoPush) GetPlayerDamages() map[string]int64 {
	if m != nil {
		return m.PlayerDamages
	}
	return nil
}

func (m *GuildBoss_SyncDamageInfoPush) GetTotalDamages() int64 {
	if m != nil {
		return m.TotalDamages
	}
	return 0
}

func (m *GuildBoss_SyncDamageInfoPush) GetGuildDayId() string {
	if m != nil {
		return m.GuildDayId
	}
	return ""
}

func (m *GuildBoss_SyncDamageInfoPush) GetOverRole() string {
	if m != nil {
		return m.OverRole
	}
	return ""
}

func (m *GuildBoss_SyncDamageInfoPush) GetOverRoleServerId() int64 {
	if m != nil {
		return m.OverRoleServerId
	}
	return 0
}

func (*GuildBoss_SyncDamageInfoPush) XXX_MessageName() string {
	return "service.GuildBoss.SyncDamageInfoPush"
}

type GuildBoss_QueryRankRequest struct {
}

func (m *GuildBoss_QueryRankRequest) Reset()      { *m = GuildBoss_QueryRankRequest{} }
func (*GuildBoss_QueryRankRequest) ProtoMessage() {}
func (*GuildBoss_QueryRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 13}
}
func (m *GuildBoss_QueryRankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_QueryRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_QueryRankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_QueryRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_QueryRankRequest.Merge(m, src)
}
func (m *GuildBoss_QueryRankRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_QueryRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_QueryRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_QueryRankRequest proto.InternalMessageInfo

func (*GuildBoss_QueryRankRequest) XXX_MessageName() string {
	return "service.GuildBoss.QueryRankRequest"
}

type GuildBoss_RankInfo struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	AvatarId    int64  `protobuf:"varint,2,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	Lv          int64  `protobuf:"varint,3,opt,name=lv,proto3" json:"lv,omitempty"`
	NickName    string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Combat      int64  `protobuf:"varint,5,opt,name=combat,proto3" json:"combat,omitempty"`
	SelfDamage  int64  `protobuf:"varint,6,opt,name=self_damage,json=selfDamage,proto3" json:"self_damage,omitempty"`
	AvatarFrame int64  `protobuf:"varint,7,opt,name=AvatarFrame,proto3" json:"AvatarFrame,omitempty"`
}

func (m *GuildBoss_RankInfo) Reset()      { *m = GuildBoss_RankInfo{} }
func (*GuildBoss_RankInfo) ProtoMessage() {}
func (*GuildBoss_RankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 14}
}
func (m *GuildBoss_RankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_RankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_RankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_RankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_RankInfo.Merge(m, src)
}
func (m *GuildBoss_RankInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_RankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_RankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_RankInfo proto.InternalMessageInfo

func (m *GuildBoss_RankInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildBoss_RankInfo) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *GuildBoss_RankInfo) GetLv() int64 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *GuildBoss_RankInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *GuildBoss_RankInfo) GetCombat() int64 {
	if m != nil {
		return m.Combat
	}
	return 0
}

func (m *GuildBoss_RankInfo) GetSelfDamage() int64 {
	if m != nil {
		return m.SelfDamage
	}
	return 0
}

func (m *GuildBoss_RankInfo) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (*GuildBoss_RankInfo) XXX_MessageName() string {
	return "service.GuildBoss.RankInfo"
}

type GuildBoss_QueryRankResponse struct {
	Ranks      []*GuildBoss_RankInfo `protobuf:"bytes,1,rep,name=ranks,proto3" json:"ranks,omitempty"`
	RemainTime int64                 `protobuf:"varint,2,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
}

func (m *GuildBoss_QueryRankResponse) Reset()      { *m = GuildBoss_QueryRankResponse{} }
func (*GuildBoss_QueryRankResponse) ProtoMessage() {}
func (*GuildBoss_QueryRankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 15}
}
func (m *GuildBoss_QueryRankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_QueryRankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_QueryRankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_QueryRankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_QueryRankResponse.Merge(m, src)
}
func (m *GuildBoss_QueryRankResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_QueryRankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_QueryRankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_QueryRankResponse proto.InternalMessageInfo

func (m *GuildBoss_QueryRankResponse) GetRanks() []*GuildBoss_RankInfo {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (m *GuildBoss_QueryRankResponse) GetRemainTime() int64 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (*GuildBoss_QueryRankResponse) XXX_MessageName() string {
	return "service.GuildBoss.QueryRankResponse"
}

type GuildBoss_OnlineCountRequest struct {
}

func (m *GuildBoss_OnlineCountRequest) Reset()      { *m = GuildBoss_OnlineCountRequest{} }
func (*GuildBoss_OnlineCountRequest) ProtoMessage() {}
func (*GuildBoss_OnlineCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 16}
}
func (m *GuildBoss_OnlineCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_OnlineCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_OnlineCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_OnlineCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_OnlineCountRequest.Merge(m, src)
}
func (m *GuildBoss_OnlineCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_OnlineCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_OnlineCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_OnlineCountRequest proto.InternalMessageInfo

func (*GuildBoss_OnlineCountRequest) XXX_MessageName() string {
	return "service.GuildBoss.OnlineCountRequest"
}

type GuildBoss_OnlineCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GuildBoss_OnlineCountResponse) Reset()      { *m = GuildBoss_OnlineCountResponse{} }
func (*GuildBoss_OnlineCountResponse) ProtoMessage() {}
func (*GuildBoss_OnlineCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 17}
}
func (m *GuildBoss_OnlineCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_OnlineCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_OnlineCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_OnlineCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_OnlineCountResponse.Merge(m, src)
}
func (m *GuildBoss_OnlineCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_OnlineCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_OnlineCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_OnlineCountResponse proto.InternalMessageInfo

func (m *GuildBoss_OnlineCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*GuildBoss_OnlineCountResponse) XXX_MessageName() string {
	return "service.GuildBoss.OnlineCountResponse"
}

type GuildBoss_GetSelfDamageAndRankRequest struct {
}

func (m *GuildBoss_GetSelfDamageAndRankRequest) Reset()      { *m = GuildBoss_GetSelfDamageAndRankRequest{} }
func (*GuildBoss_GetSelfDamageAndRankRequest) ProtoMessage() {}
func (*GuildBoss_GetSelfDamageAndRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 18}
}
func (m *GuildBoss_GetSelfDamageAndRankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_GetSelfDamageAndRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_GetSelfDamageAndRankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_GetSelfDamageAndRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_GetSelfDamageAndRankRequest.Merge(m, src)
}
func (m *GuildBoss_GetSelfDamageAndRankRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_GetSelfDamageAndRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_GetSelfDamageAndRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_GetSelfDamageAndRankRequest proto.InternalMessageInfo

func (*GuildBoss_GetSelfDamageAndRankRequest) XXX_MessageName() string {
	return "service.GuildBoss.GetSelfDamageAndRankRequest"
}

type GuildBoss_GetSelfDamageAndRankResponse struct {
	SelfDamage int64 `protobuf:"varint,1,opt,name=self_damage,json=selfDamage,proto3" json:"self_damage,omitempty"`
	Rank       int64 `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (m *GuildBoss_GetSelfDamageAndRankResponse) Reset() {
	*m = GuildBoss_GetSelfDamageAndRankResponse{}
}
func (*GuildBoss_GetSelfDamageAndRankResponse) ProtoMessage() {}
func (*GuildBoss_GetSelfDamageAndRankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 19}
}
func (m *GuildBoss_GetSelfDamageAndRankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_GetSelfDamageAndRankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_GetSelfDamageAndRankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_GetSelfDamageAndRankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_GetSelfDamageAndRankResponse.Merge(m, src)
}
func (m *GuildBoss_GetSelfDamageAndRankResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_GetSelfDamageAndRankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_GetSelfDamageAndRankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_GetSelfDamageAndRankResponse proto.InternalMessageInfo

func (m *GuildBoss_GetSelfDamageAndRankResponse) GetSelfDamage() int64 {
	if m != nil {
		return m.SelfDamage
	}
	return 0
}

func (m *GuildBoss_GetSelfDamageAndRankResponse) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (*GuildBoss_GetSelfDamageAndRankResponse) XXX_MessageName() string {
	return "service.GuildBoss.GetSelfDamageAndRankResponse"
}

type GuildBoss_GuildBossFinishPush struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GuildBoss_GuildBossFinishPush) Reset()      { *m = GuildBoss_GuildBossFinishPush{} }
func (*GuildBoss_GuildBossFinishPush) ProtoMessage() {}
func (*GuildBoss_GuildBossFinishPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_05671978d7622ff7, []int{0, 20}
}
func (m *GuildBoss_GuildBossFinishPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss_GuildBossFinishPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss_GuildBossFinishPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss_GuildBossFinishPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss_GuildBossFinishPush.Merge(m, src)
}
func (m *GuildBoss_GuildBossFinishPush) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss_GuildBossFinishPush) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss_GuildBossFinishPush.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss_GuildBossFinishPush proto.InternalMessageInfo

func (m *GuildBoss_GuildBossFinishPush) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*GuildBoss_GuildBossFinishPush) XXX_MessageName() string {
	return "service.GuildBoss.GuildBossFinishPush"
}
func init() {
	proto.RegisterEnum("service.GuildBossErrorCode", GuildBossErrorCode_name, GuildBossErrorCode_value)
	proto.RegisterType((*GuildBoss)(nil), "service.GuildBoss")
	proto.RegisterType((*GuildBoss_GetCurrDayRewardsRequest)(nil), "service.GuildBoss.GetCurrDayRewardsRequest")
	proto.RegisterType((*GuildBoss_OtherRewards)(nil), "service.GuildBoss.OtherRewards")
	proto.RegisterType((*GuildBoss_CurrDayRewards)(nil), "service.GuildBoss.CurrDayRewards")
	proto.RegisterType((*GuildBoss_GetCurrDayRewardsResponse)(nil), "service.GuildBoss.GetCurrDayRewardsResponse")
	proto.RegisterType((*GuildBoss_RewardCurrDayRequest)(nil), "service.GuildBoss.RewardCurrDayRequest")
	proto.RegisterType((*GuildBoss_RewardCurrDayResponse)(nil), "service.GuildBoss.RewardCurrDayResponse")
	proto.RegisterType((*GuildBoss_RewardOtherDayRequest)(nil), "service.GuildBoss.RewardOtherDayRequest")
	proto.RegisterType((*GuildBoss_RewardOtherDayResponse)(nil), "service.GuildBoss.RewardOtherDayResponse")
	proto.RegisterType((*GuildBoss_CanEnterRequest)(nil), "service.GuildBoss.CanEnterRequest")
	proto.RegisterType((*GuildBoss_CanEnterResponse)(nil), "service.GuildBoss.CanEnterResponse")
	proto.RegisterType((*GuildBoss_GetGBBattleServerInfoRequest)(nil), "service.GuildBoss.GetGBBattleServerInfoRequest")
	proto.RegisterType((*GuildBoss_GetGBBattleServerInfoResponse)(nil), "service.GuildBoss.GetGBBattleServerInfoResponse")
	proto.RegisterType((*GuildBoss_SyncDamageInfoPush)(nil), "service.GuildBoss.SyncDamageInfoPush")
	proto.RegisterMapType((map[string]int64)(nil), "service.GuildBoss.SyncDamageInfoPush.PlayerDamagesEntry")
	proto.RegisterType((*GuildBoss_QueryRankRequest)(nil), "service.GuildBoss.QueryRankRequest")
	proto.RegisterType((*GuildBoss_RankInfo)(nil), "service.GuildBoss.RankInfo")
	proto.RegisterType((*GuildBoss_QueryRankResponse)(nil), "service.GuildBoss.QueryRankResponse")
	proto.RegisterType((*GuildBoss_OnlineCountRequest)(nil), "service.GuildBoss.OnlineCountRequest")
	proto.RegisterType((*GuildBoss_OnlineCountResponse)(nil), "service.GuildBoss.OnlineCountResponse")
	proto.RegisterType((*GuildBoss_GetSelfDamageAndRankRequest)(nil), "service.GuildBoss.GetSelfDamageAndRankRequest")
	proto.RegisterType((*GuildBoss_GetSelfDamageAndRankResponse)(nil), "service.GuildBoss.GetSelfDamageAndRankResponse")
	proto.RegisterType((*GuildBoss_GuildBossFinishPush)(nil), "service.GuildBoss.GuildBossFinishPush")
}

func init() { proto.RegisterFile("proto/service/guild_boss.proto", fileDescriptor_05671978d7622ff7) }

var fileDescriptor_05671978d7622ff7 = []byte{
	// 1092 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6f, 0x1b, 0xc5,
	0x1b, 0xf6, 0x3a, 0x9f, 0x7e, 0xf3, 0x51, 0x67, 0x9a, 0x5f, 0xea, 0xdf, 0x26, 0xdd, 0xa6, 0x41,
	0x48, 0xa1, 0x10, 0x47, 0xc0, 0xa5, 0xea, 0x89, 0x7c, 0x2b, 0xaa, 0x68, 0xc2, 0x9a, 0x13, 0x97,
	0xd5, 0x64, 0x77, 0x92, 0xac, 0xb2, 0x3b, 0x63, 0x66, 0xd6, 0x06, 0xdf, 0x00, 0x09, 0x84, 0x7a,
	0x29, 0x12, 0xd0, 0x03, 0x70, 0x42, 0x44, 0x20, 0xc4, 0xa1, 0x54, 0x8a, 0x2a, 0x15, 0x54, 0x0e,
	0x5c, 0x22, 0x4e, 0x3d, 0xf6, 0x48, 0x9d, 0xba, 0x84, 0x1b, 0x7f, 0x02, 0x9a, 0x8f, 0x75, 0x6c,
	0xc7, 0x45, 0x88, 0x53, 0x6e, 0x3b, 0xcf, 0xfb, 0xce, 0x33, 0xef, 0xf3, 0x7e, 0xf8, 0x35, 0x38,
	0x65, 0xce, 0x12, 0x36, 0x2f, 0x08, 0xaf, 0x86, 0x3e, 0x99, 0xdf, 0xa9, 0x84, 0x51, 0xe0, 0x6d,
	0x31, 0x21, 0x8a, 0xca, 0x80, 0x06, 0x8c, 0xc5, 0xbe, 0xa0, 0x1d, 0x63, 0x16, 0x90, 0x48, 0xcc,
	0x6f, 0x61, 0x41, 0xb4, 0x87, 0x3d, 0xd1, 0x61, 0xd8, 0xd1, 0xf8, 0xcc, 0xf7, 0x08, 0x72, 0x6b,
	0x92, 0x6e, 0x91, 0x09, 0x61, 0xdb, 0x50, 0x58, 0x23, 0xc9, 0x52, 0x85, 0xf3, 0x65, 0x5c, 0x73,
	0xc9, 0x3b, 0x98, 0x07, 0xc2, 0x25, 0x6f, 0x57, 0x88, 0x48, 0xec, 0xcf, 0x2c, 0x18, 0xde, 0x48,
	0x76, 0x09, 0x37, 0x38, 0x9a, 0x82, 0x5c, 0x12, 0xc6, 0x44, 0x24, 0x38, 0x2e, 0x17, 0xac, 0x69,
	0x6b, 0xb6, 0xc7, 0x3d, 0x01, 0xd0, 0x25, 0x18, 0x12, 0x24, 0xda, 0xf6, 0x02, 0x1c, 0xe3, 0x1d,
	0x52, 0xc8, 0x2a, 0x3b, 0x48, 0x68, 0x59, 0x21, 0xe8, 0x32, 0x0c, 0x27, 0x2c, 0xc1, 0x51, 0xea,
	0xd1, 0xa3, 0x3c, 0x86, 0x14, 0x66, 0x5c, 0x66, 0xa0, 0x2f, 0x4c, 0x48, 0x2c, 0x0a, 0xbd, 0xd3,
	0x3d, 0xb3, 0x43, 0xaf, 0x0c, 0x17, 0x75, 0xf8, 0xc5, 0xf5, 0x84, 0xc4, 0xae, 0x36, 0xd9, 0x01,
	0x8c, 0xb6, 0xc7, 0x8b, 0x26, 0xa0, 0xdf, 0x50, 0xea, 0xa0, 0xcc, 0x49, 0xe2, 0x22, 0xc1, 0x49,
	0x45, 0x98, 0x60, 0xcc, 0xe9, 0xe4, 0x95, 0x9e, 0x67, 0xbf, 0x72, 0x60, 0xc1, 0xff, 0xbb, 0x64,
	0x46, 0x94, 0x19, 0x15, 0x04, 0x5d, 0x87, 0xbc, 0x5f, 0xe1, 0xdc, 0x0b, 0x70, 0xcd, 0xe3, 0xda,
	0x56, 0xb0, 0x14, 0xd9, 0xe5, 0xa2, 0xa9, 0x4c, 0xb1, 0x99, 0xe4, 0x62, 0x07, 0xc9, 0xa8, 0xdf,
	0x1e, 0xfe, 0x75, 0x18, 0x63, 0x32, 0xcd, 0x6d, 0x6c, 0x59, 0xc5, 0x76, 0xa9, 0x0b, 0x5b, 0x6b,
	0x49, 0xdc, 0x73, 0xea, 0xe6, 0x09, 0x99, 0xbd, 0x02, 0xe3, 0xfa, 0xb3, 0xf9, 0xa8, 0x2a, 0xe6,
	0xb5, 0xb9, 0x0f, 0x0e, 0x0a, 0x2f, 0xb4, 0x54, 0x1e, 0x4d, 0xad, 0x70, 0xce, 0x78, 0xf3, 0xbc,
	0x10, 0x71, 0x82, 0x83, 0x26, 0xcd, 0x8f, 0x16, 0xfc, 0xaf, 0x83, 0xe7, 0xcc, 0x4b, 0x5f, 0x4d,
	0x43, 0xde, 0x68, 0x1a, 0xfe, 0x93, 0xf6, 0xbb, 0x16, 0x4c, 0x74, 0x12, 0x9d, 0x79, 0xf1, 0x63,
	0x70, 0x6e, 0x09, 0xd3, 0x15, 0x9a, 0x48, 0x1f, 0x3d, 0xbf, 0xbf, 0x5a, 0x90, 0x3f, 0xc1, 0x8c,
	0x82, 0x3c, 0xf4, 0xf8, 0x98, 0xaa, 0x41, 0x19, 0x74, 0xe5, 0x27, 0x7a, 0x1e, 0x46, 0x39, 0x89,
	0x71, 0x48, 0x3d, 0x41, 0x7c, 0x46, 0x83, 0x74, 0x5a, 0x46, 0x34, 0x5a, 0xd2, 0xe0, 0xbf, 0x99,
	0x5e, 0xc5, 0xb4, 0xcd, 0x89, 0xd8, 0xf5, 0xf4, 0xdd, 0x42, 0x6f, 0xca, 0xa4, 0x50, 0x57, 0x81,
	0xe8, 0x25, 0x40, 0xe6, 0x41, 0x22, 0x43, 0xf3, 0x7c, 0x56, 0xa1, 0x49, 0xa1, 0x4f, 0xb9, 0xe6,
	0xb5, 0x45, 0xc5, 0xbc, 0x24, 0x71, 0xdb, 0x81, 0xa9, 0x35, 0x92, 0xac, 0x2d, 0x2e, 0xe2, 0x24,
	0x89, 0x48, 0x89, 0xf0, 0x2a, 0xe1, 0xeb, 0x74, 0x9b, 0xa5, 0x2a, 0x1f, 0x5b, 0x70, 0xf1, 0x19,
	0x0e, 0x67, 0x47, 0xf2, 0x34, 0x0c, 0xc7, 0xb8, 0xec, 0x09, 0x9f, 0x50, 0xe2, 0x85, 0x81, 0x11,
	0x0b, 0x31, 0x2e, 0x97, 0x24, 0xb4, 0x1e, 0xa0, 0x49, 0xc8, 0x6d, 0x29, 0x01, 0xd2, 0xdc, 0xaf,
	0xcc, 0x83, 0x1a, 0x58, 0x0f, 0xec, 0xdf, 0xb2, 0x80, 0x4a, 0x35, 0xea, 0xeb, 0x47, 0xa5, 0xb8,
	0xcd, 0x8a, 0xd8, 0x45, 0x1e, 0x8c, 0x96, 0x23, 0x5c, 0x53, 0x1d, 0x24, 0x0d, 0x69, 0x2f, 0x5e,
	0xed, 0xd2, 0x3d, 0xa7, 0xaf, 0x17, 0x37, 0xd5, 0x5d, 0x0d, 0x8a, 0x15, 0x9a, 0xf0, 0x9a, 0x3b,
	0x52, 0x6e, 0xc5, 0xd0, 0x73, 0x30, 0xd2, 0x9a, 0x80, 0x34, 0x4d, 0xc3, 0x2d, 0x19, 0x10, 0x52,
	0x9b, 0x5e, 0x4f, 0xb2, 0x8d, 0xc3, 0x40, 0x65, 0x29, 0xe7, 0x82, 0xc2, 0x96, 0x71, 0x4d, 0x6b,
	0x63, 0x55, 0xc2, 0x3d, 0xce, 0x22, 0xa2, 0xf2, 0x93, 0x73, 0x07, 0x25, 0xe0, 0xb2, 0x88, 0xa0,
	0x39, 0x38, 0xdf, 0x34, 0x7a, 0x42, 0x55, 0xef, 0x24, 0x43, 0xf9, 0xd4, 0xcd, 0x94, 0x35, 0xb0,
	0x5f, 0x03, 0x74, 0x3a, 0x6e, 0x59, 0xe2, 0x3d, 0x52, 0x53, 0x25, 0xce, 0xb9, 0xf2, 0x13, 0x8d,
	0x43, 0x5f, 0x15, 0x47, 0x95, 0x74, 0x0f, 0xe9, 0xc3, 0xb5, 0xec, 0x55, 0xcb, 0x46, 0x90, 0x7f,
	0xa3, 0x42, 0x78, 0xcd, 0xc5, 0x74, 0x2f, 0x6d, 0xa2, 0x43, 0x0b, 0x06, 0xe5, 0x59, 0xe6, 0x06,
	0x5d, 0x80, 0x01, 0x15, 0x4c, 0x18, 0x18, 0xc2, 0x7e, 0x79, 0xd4, 0x3a, 0x70, 0x15, 0x27, 0x58,
	0x05, 0xa8, 0x79, 0x07, 0x35, 0xb0, 0x1e, 0xa0, 0x51, 0xc8, 0x46, 0x55, 0xd3, 0x22, 0xd9, 0xa8,
	0x2a, 0x9d, 0x69, 0xe8, 0xef, 0x79, 0x14, 0xc7, 0x4d, 0xd1, 0x12, 0xb8, 0x81, 0x63, 0xb5, 0x99,
	0x7c, 0x16, 0x6f, 0xe1, 0xb4, 0xed, 0xcd, 0xa9, 0x73, 0x87, 0xf6, 0x9f, 0xda, 0xa1, 0xd3, 0x30,
	0xb4, 0xa0, 0x5e, 0x5c, 0xe5, 0x92, 0x77, 0x40, 0x77, 0x64, 0x0b, 0x64, 0xef, 0xc0, 0x58, 0x8b,
	0x3c, 0x33, 0x02, 0x2f, 0x43, 0x1f, 0xc7, 0x74, 0x2f, 0x6d, 0x90, 0xc9, 0x2e, 0x0d, 0x92, 0xca,
	0x77, 0xb5, 0xa7, 0x0c, 0xc5, 0xcc, 0x88, 0x5c, 0xf1, 0xe9, 0x3a, 0xd7, 0xd0, 0x9b, 0x61, 0x4c,
	0xec, 0x71, 0x40, 0x1b, 0x34, 0x0a, 0x29, 0x51, 0x73, 0x9a, 0x66, 0xf2, 0x45, 0x38, 0xdf, 0x86,
	0x9a, 0x00, 0xc6, 0xa1, 0x4f, 0x8f, 0xb9, 0xde, 0xd0, 0xfa, 0x60, 0x5f, 0x84, 0xc9, 0x35, 0x92,
	0x94, 0x9a, 0xf2, 0x16, 0x68, 0xd0, 0x5a, 0x95, 0x92, 0x1a, 0xfd, 0x2e, 0x66, 0x43, 0xda, 0x91,
	0x2d, 0xeb, 0x54, 0xb6, 0x10, 0xf4, 0x4a, 0x31, 0x26, 0x78, 0xf5, 0x2d, 0x03, 0x6c, 0x8a, 0x5e,
	0x0d, 0x69, 0x28, 0x76, 0xd5, 0x2c, 0x75, 0x0d, 0xf0, 0xca, 0x0f, 0x16, 0xa0, 0xa6, 0xb7, 0x5a,
	0x1a, 0x4b, 0x2c, 0x20, 0x68, 0x19, 0xfe, 0x71, 0x83, 0xe4, 0x33, 0xf6, 0xcc, 0xcd, 0x83, 0x82,
	0x83, 0xa6, 0x1a, 0xf7, 0xf6, 0x9f, 0xfc, 0xfc, 0xc5, 0xe2, 0xc6, 0x46, 0xa9, 0xb1, 0x7f, 0xbb,
	0xf1, 0xe9, 0xfb, 0x8d, 0x7b, 0x77, 0xff, 0xf8, 0xe9, 0xd6, 0x9f, 0x5f, 0x7f, 0xd4, 0xb8, 0x75,
	0x1b, 0x6d, 0x76, 0xb2, 0xbc, 0x8e, 0xdf, 0x55, 0x3f, 0x7c, 0xba, 0xc1, 0xf3, 0x96, 0x5d, 0xbc,
	0x79, 0x50, 0xb8, 0x82, 0x66, 0x0d, 0x0b, 0x13, 0x42, 0xdf, 0x3f, 0x7e, 0xf0, 0xa0, 0xf1, 0xf1,
	0x9d, 0xa7, 0x5f, 0xbd, 0xd7, 0xf8, 0xe6, 0xdb, 0xe3, 0x5f, 0xbe, 0x6c, 0x7c, 0xb8, 0xff, 0xe4,
	0xfe, 0xfd, 0xa7, 0x9f, 0xdf, 0x59, 0xbc, 0xf1, 0xe8, 0xb1, 0x93, 0xf9, 0xae, 0xee, 0x58, 0x87,
	0x75, 0xc7, 0x7a, 0x58, 0x77, 0xac, 0xdf, 0xeb, 0x8e, 0x75, 0x5c, 0x77, 0x32, 0x7f, 0xd5, 0x1d,
	0xeb, 0x93, 0x23, 0x27, 0x73, 0x78, 0xe4, 0x58, 0x0f, 0x8f, 0x9c, 0xcc, 0xa3, 0x23, 0x27, 0xf3,
	0xd6, 0xb4, 0xcf, 0x42, 0x3a, 0xa7, 0x47, 0x6e, 0xde, 0x67, 0x71, 0xcc, 0xe8, 0x7c, 0xdb, 0xdf,
	0xce, 0xad, 0x7e, 0x75, 0x7c, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x69, 0x13, 0xcd,
	0x8e, 0x0a, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_GetCurrDayRewardsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_OtherRewards.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_CurrDayRewards.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_GetCurrDayRewardsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_RewardCurrDayRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_RewardCurrDayResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_RewardOtherDayRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_RewardOtherDayResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_CanEnterRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_CanEnterResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_GetGBBattleServerInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_GetGBBattleServerInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_SyncDamageInfoPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_QueryRankRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_RankInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_QueryRankResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_OnlineCountRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_OnlineCountResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_GetSelfDamageAndRankRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_GetSelfDamageAndRankResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss_GuildBossFinishPush.Get().(proto.Message)
	})
}

var poolGuildBoss = &sync.Pool{New: func() interface{} { return &GuildBoss{} }}

func (m *GuildBoss) ReleasePool() { m.Reset(); poolGuildBoss.Put(m); m = nil }

var poolGuildBoss_GetCurrDayRewardsRequest = &sync.Pool{New: func() interface{} { return &GuildBoss_GetCurrDayRewardsRequest{} }}

func (m *GuildBoss_GetCurrDayRewardsRequest) ReleasePool() {
	m.Reset()
	poolGuildBoss_GetCurrDayRewardsRequest.Put(m)
	m = nil
}

var poolGuildBoss_OtherRewards = &sync.Pool{New: func() interface{} { return &GuildBoss_OtherRewards{} }}

func (m *GuildBoss_OtherRewards) ReleasePool() { m.Reset(); poolGuildBoss_OtherRewards.Put(m); m = nil }

var poolGuildBoss_CurrDayRewards = &sync.Pool{New: func() interface{} { return &GuildBoss_CurrDayRewards{} }}

func (m *GuildBoss_CurrDayRewards) ReleasePool() {
	m.Reset()
	poolGuildBoss_CurrDayRewards.Put(m)
	m = nil
}

var poolGuildBoss_GetCurrDayRewardsResponse = &sync.Pool{New: func() interface{} { return &GuildBoss_GetCurrDayRewardsResponse{} }}

func (m *GuildBoss_GetCurrDayRewardsResponse) ReleasePool() {
	m.Reset()
	poolGuildBoss_GetCurrDayRewardsResponse.Put(m)
	m = nil
}

var poolGuildBoss_RewardCurrDayRequest = &sync.Pool{New: func() interface{} { return &GuildBoss_RewardCurrDayRequest{} }}

func (m *GuildBoss_RewardCurrDayRequest) ReleasePool() {
	m.Reset()
	poolGuildBoss_RewardCurrDayRequest.Put(m)
	m = nil
}

var poolGuildBoss_RewardCurrDayResponse = &sync.Pool{New: func() interface{} { return &GuildBoss_RewardCurrDayResponse{} }}

func (m *GuildBoss_RewardCurrDayResponse) ReleasePool() {
	m.Reset()
	poolGuildBoss_RewardCurrDayResponse.Put(m)
	m = nil
}

var poolGuildBoss_RewardOtherDayRequest = &sync.Pool{New: func() interface{} { return &GuildBoss_RewardOtherDayRequest{} }}

func (m *GuildBoss_RewardOtherDayRequest) ReleasePool() {
	m.Reset()
	poolGuildBoss_RewardOtherDayRequest.Put(m)
	m = nil
}

var poolGuildBoss_RewardOtherDayResponse = &sync.Pool{New: func() interface{} { return &GuildBoss_RewardOtherDayResponse{} }}

func (m *GuildBoss_RewardOtherDayResponse) ReleasePool() {
	m.Reset()
	poolGuildBoss_RewardOtherDayResponse.Put(m)
	m = nil
}

var poolGuildBoss_CanEnterRequest = &sync.Pool{New: func() interface{} { return &GuildBoss_CanEnterRequest{} }}

func (m *GuildBoss_CanEnterRequest) ReleasePool() {
	m.Reset()
	poolGuildBoss_CanEnterRequest.Put(m)
	m = nil
}

var poolGuildBoss_CanEnterResponse = &sync.Pool{New: func() interface{} { return &GuildBoss_CanEnterResponse{} }}

func (m *GuildBoss_CanEnterResponse) ReleasePool() {
	m.Reset()
	poolGuildBoss_CanEnterResponse.Put(m)
	m = nil
}

var poolGuildBoss_GetGBBattleServerInfoRequest = &sync.Pool{New: func() interface{} { return &GuildBoss_GetGBBattleServerInfoRequest{} }}

func (m *GuildBoss_GetGBBattleServerInfoRequest) ReleasePool() {
	m.Reset()
	poolGuildBoss_GetGBBattleServerInfoRequest.Put(m)
	m = nil
}

var poolGuildBoss_GetGBBattleServerInfoResponse = &sync.Pool{New: func() interface{} { return &GuildBoss_GetGBBattleServerInfoResponse{} }}

func (m *GuildBoss_GetGBBattleServerInfoResponse) ReleasePool() {
	m.Reset()
	poolGuildBoss_GetGBBattleServerInfoResponse.Put(m)
	m = nil
}

var poolGuildBoss_SyncDamageInfoPush = &sync.Pool{New: func() interface{} { return &GuildBoss_SyncDamageInfoPush{} }}

func (m *GuildBoss_SyncDamageInfoPush) ReleasePool() {
	m.Reset()
	poolGuildBoss_SyncDamageInfoPush.Put(m)
	m = nil
}

var poolGuildBoss_QueryRankRequest = &sync.Pool{New: func() interface{} { return &GuildBoss_QueryRankRequest{} }}

func (m *GuildBoss_QueryRankRequest) ReleasePool() {
	m.Reset()
	poolGuildBoss_QueryRankRequest.Put(m)
	m = nil
}

var poolGuildBoss_RankInfo = &sync.Pool{New: func() interface{} { return &GuildBoss_RankInfo{} }}

func (m *GuildBoss_RankInfo) ReleasePool() { m.Reset(); poolGuildBoss_RankInfo.Put(m); m = nil }

var poolGuildBoss_QueryRankResponse = &sync.Pool{New: func() interface{} { return &GuildBoss_QueryRankResponse{} }}

func (m *GuildBoss_QueryRankResponse) ReleasePool() {
	m.Reset()
	poolGuildBoss_QueryRankResponse.Put(m)
	m = nil
}

var poolGuildBoss_OnlineCountRequest = &sync.Pool{New: func() interface{} { return &GuildBoss_OnlineCountRequest{} }}

func (m *GuildBoss_OnlineCountRequest) ReleasePool() {
	m.Reset()
	poolGuildBoss_OnlineCountRequest.Put(m)
	m = nil
}

var poolGuildBoss_OnlineCountResponse = &sync.Pool{New: func() interface{} { return &GuildBoss_OnlineCountResponse{} }}

func (m *GuildBoss_OnlineCountResponse) ReleasePool() {
	m.Reset()
	poolGuildBoss_OnlineCountResponse.Put(m)
	m = nil
}

var poolGuildBoss_GetSelfDamageAndRankRequest = &sync.Pool{New: func() interface{} { return &GuildBoss_GetSelfDamageAndRankRequest{} }}

func (m *GuildBoss_GetSelfDamageAndRankRequest) ReleasePool() {
	m.Reset()
	poolGuildBoss_GetSelfDamageAndRankRequest.Put(m)
	m = nil
}

var poolGuildBoss_GetSelfDamageAndRankResponse = &sync.Pool{New: func() interface{} { return &GuildBoss_GetSelfDamageAndRankResponse{} }}

func (m *GuildBoss_GetSelfDamageAndRankResponse) ReleasePool() {
	m.Reset()
	poolGuildBoss_GetSelfDamageAndRankResponse.Put(m)
	m = nil
}

var poolGuildBoss_GuildBossFinishPush = &sync.Pool{New: func() interface{} { return &GuildBoss_GuildBossFinishPush{} }}

func (m *GuildBoss_GuildBossFinishPush) ReleasePool() {
	m.Reset()
	poolGuildBoss_GuildBossFinishPush.Put(m)
	m = nil
}
func (x GuildBossErrorCode) String() string {
	s, ok := GuildBossErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GuildBoss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss)
	if !ok {
		that2, ok := that.(GuildBoss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildBoss_GetCurrDayRewardsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_GetCurrDayRewardsRequest)
	if !ok {
		that2, ok := that.(GuildBoss_GetCurrDayRewardsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildBoss_OtherRewards) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_OtherRewards)
	if !ok {
		that2, ok := that.(GuildBoss_OtherRewards)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.SelfDamage != that1.SelfDamage {
		return false
	}
	if this.TotalDamage != that1.TotalDamage {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *GuildBoss_CurrDayRewards) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_CurrDayRewards)
	if !ok {
		that2, ok := that.(GuildBoss_CurrDayRewards)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *GuildBoss_GetCurrDayRewardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_GetCurrDayRewardsResponse)
	if !ok {
		that2, ok := that.(GuildBoss_GetCurrDayRewardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CurrDayRewards) != len(that1.CurrDayRewards) {
		return false
	}
	for i := range this.CurrDayRewards {
		if !this.CurrDayRewards[i].Equal(that1.CurrDayRewards[i]) {
			return false
		}
	}
	if len(this.OtherDayRewards) != len(that1.OtherDayRewards) {
		return false
	}
	for i := range this.OtherDayRewards {
		if !this.OtherDayRewards[i].Equal(that1.OtherDayRewards[i]) {
			return false
		}
	}
	return true
}
func (this *GuildBoss_RewardCurrDayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_RewardCurrDayRequest)
	if !ok {
		that2, ok := that.(GuildBoss_RewardCurrDayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildBoss_RewardCurrDayResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_RewardCurrDayResponse)
	if !ok {
		that2, ok := that.(GuildBoss_RewardCurrDayResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CurrDayRewards) != len(that1.CurrDayRewards) {
		return false
	}
	for i := range this.CurrDayRewards {
		if !this.CurrDayRewards[i].Equal(that1.CurrDayRewards[i]) {
			return false
		}
	}
	if len(this.OtherDayRewards) != len(that1.OtherDayRewards) {
		return false
	}
	for i := range this.OtherDayRewards {
		if !this.OtherDayRewards[i].Equal(that1.OtherDayRewards[i]) {
			return false
		}
	}
	return true
}
func (this *GuildBoss_RewardOtherDayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_RewardOtherDayRequest)
	if !ok {
		that2, ok := that.(GuildBoss_RewardOtherDayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildBoss_RewardOtherDayResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_RewardOtherDayResponse)
	if !ok {
		that2, ok := that.(GuildBoss_RewardOtherDayResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CurrDayRewards) != len(that1.CurrDayRewards) {
		return false
	}
	for i := range this.CurrDayRewards {
		if !this.CurrDayRewards[i].Equal(that1.CurrDayRewards[i]) {
			return false
		}
	}
	if len(this.OtherDayRewards) != len(that1.OtherDayRewards) {
		return false
	}
	for i := range this.OtherDayRewards {
		if !this.OtherDayRewards[i].Equal(that1.OtherDayRewards[i]) {
			return false
		}
	}
	return true
}
func (this *GuildBoss_CanEnterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_CanEnterRequest)
	if !ok {
		that2, ok := that.(GuildBoss_CanEnterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildBoss_CanEnterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_CanEnterResponse)
	if !ok {
		that2, ok := that.(GuildBoss_CanEnterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Can != that1.Can {
		return false
	}
	if this.RemainSeconds != that1.RemainSeconds {
		return false
	}
	if this.TotalDamage != that1.TotalDamage {
		return false
	}
	if this.RefreshRemain != that1.RefreshRemain {
		return false
	}
	if this.RemainEnterCount != that1.RemainEnterCount {
		return false
	}
	return true
}
func (this *GuildBoss_GetGBBattleServerInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_GetGBBattleServerInfoRequest)
	if !ok {
		that2, ok := that.(GuildBoss_GetGBBattleServerInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildBoss_GetGBBattleServerInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_GetGBBattleServerInfoResponse)
	if !ok {
		that2, ok := that.(GuildBoss_GetGBBattleServerInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Can != that1.Can {
		return false
	}
	if this.RemainSeconds != that1.RemainSeconds {
		return false
	}
	if this.TotalDamage != that1.TotalDamage {
		return false
	}
	if this.RefreshRemain != that1.RefreshRemain {
		return false
	}
	if this.MapSceneId != that1.MapSceneId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *GuildBoss_SyncDamageInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_SyncDamageInfoPush)
	if !ok {
		that2, ok := that.(GuildBoss_SyncDamageInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PlayerDamages) != len(that1.PlayerDamages) {
		return false
	}
	for i := range this.PlayerDamages {
		if this.PlayerDamages[i] != that1.PlayerDamages[i] {
			return false
		}
	}
	if this.TotalDamages != that1.TotalDamages {
		return false
	}
	if this.GuildDayId != that1.GuildDayId {
		return false
	}
	if this.OverRole != that1.OverRole {
		return false
	}
	if this.OverRoleServerId != that1.OverRoleServerId {
		return false
	}
	return true
}
func (this *GuildBoss_QueryRankRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_QueryRankRequest)
	if !ok {
		that2, ok := that.(GuildBoss_QueryRankRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildBoss_RankInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_RankInfo)
	if !ok {
		that2, ok := that.(GuildBoss_RankInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.Lv != that1.Lv {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if this.Combat != that1.Combat {
		return false
	}
	if this.SelfDamage != that1.SelfDamage {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	return true
}
func (this *GuildBoss_QueryRankResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_QueryRankResponse)
	if !ok {
		that2, ok := that.(GuildBoss_QueryRankResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ranks) != len(that1.Ranks) {
		return false
	}
	for i := range this.Ranks {
		if !this.Ranks[i].Equal(that1.Ranks[i]) {
			return false
		}
	}
	if this.RemainTime != that1.RemainTime {
		return false
	}
	return true
}
func (this *GuildBoss_OnlineCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_OnlineCountRequest)
	if !ok {
		that2, ok := that.(GuildBoss_OnlineCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildBoss_OnlineCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_OnlineCountResponse)
	if !ok {
		that2, ok := that.(GuildBoss_OnlineCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GuildBoss_GetSelfDamageAndRankRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_GetSelfDamageAndRankRequest)
	if !ok {
		that2, ok := that.(GuildBoss_GetSelfDamageAndRankRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildBoss_GetSelfDamageAndRankResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_GetSelfDamageAndRankResponse)
	if !ok {
		that2, ok := that.(GuildBoss_GetSelfDamageAndRankResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SelfDamage != that1.SelfDamage {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	return true
}
func (this *GuildBoss_GuildBossFinishPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss_GuildBossFinishPush)
	if !ok {
		that2, ok := that.(GuildBoss_GuildBossFinishPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (m *GuildBoss) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildBoss_GetCurrDayRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_GetCurrDayRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_GetCurrDayRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildBoss_OtherRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_OtherRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_OtherRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TotalDamage != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.TotalDamage))
		i--
		dAtA[i] = 0x18
	}
	if m.SelfDamage != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.SelfDamage))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_CurrDayRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_CurrDayRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_CurrDayRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Status != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Damage != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_GetCurrDayRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_GetCurrDayRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_GetCurrDayRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OtherDayRewards) > 0 {
		for iNdEx := len(m.OtherDayRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtherDayRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CurrDayRewards) > 0 {
		for iNdEx := len(m.CurrDayRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrDayRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_RewardCurrDayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_RewardCurrDayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_RewardCurrDayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildBoss_RewardCurrDayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_RewardCurrDayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_RewardCurrDayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OtherDayRewards) > 0 {
		for iNdEx := len(m.OtherDayRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtherDayRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CurrDayRewards) > 0 {
		for iNdEx := len(m.CurrDayRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrDayRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_RewardOtherDayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_RewardOtherDayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_RewardOtherDayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildBoss_RewardOtherDayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_RewardOtherDayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_RewardOtherDayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OtherDayRewards) > 0 {
		for iNdEx := len(m.OtherDayRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtherDayRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CurrDayRewards) > 0 {
		for iNdEx := len(m.CurrDayRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrDayRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_CanEnterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_CanEnterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_CanEnterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildBoss_CanEnterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_CanEnterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_CanEnterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemainEnterCount != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.RemainEnterCount))
		i--
		dAtA[i] = 0x28
	}
	if m.RefreshRemain != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.RefreshRemain))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalDamage != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.TotalDamage))
		i--
		dAtA[i] = 0x18
	}
	if m.RemainSeconds != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.RemainSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.Can {
		i--
		if m.Can {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_GetGBBattleServerInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_GetGBBattleServerInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_GetGBBattleServerInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x30
	}
	if m.MapSceneId != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.MapSceneId))
		i--
		dAtA[i] = 0x28
	}
	if m.RefreshRemain != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.RefreshRemain))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalDamage != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.TotalDamage))
		i--
		dAtA[i] = 0x18
	}
	if m.RemainSeconds != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.RemainSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.Can {
		i--
		if m.Can {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_SyncDamageInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_SyncDamageInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_SyncDamageInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OverRoleServerId != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.OverRoleServerId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OverRole) > 0 {
		i -= len(m.OverRole)
		copy(dAtA[i:], m.OverRole)
		i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.OverRole)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GuildDayId) > 0 {
		i -= len(m.GuildDayId)
		copy(dAtA[i:], m.GuildDayId)
		i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.GuildDayId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TotalDamages != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.TotalDamages))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlayerDamages) > 0 {
		for k := range m.PlayerDamages {
			v := m.PlayerDamages[k]
			baseI := i
			i = encodeVarintGuildBoss(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGuildBoss(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGuildBoss(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_QueryRankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_QueryRankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_QueryRankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildBoss_RankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_RankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_RankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarFrame != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x38
	}
	if m.SelfDamage != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.SelfDamage))
		i--
		dAtA[i] = 0x30
	}
	if m.Combat != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Combat))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Lv != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Lv))
		i--
		dAtA[i] = 0x18
	}
	if m.AvatarId != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_QueryRankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_QueryRankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_QueryRankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemainTime != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.RemainTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ranks) > 0 {
		for iNdEx := len(m.Ranks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ranks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_OnlineCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_OnlineCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_OnlineCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildBoss_OnlineCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_OnlineCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_OnlineCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_GetSelfDamageAndRankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_GetSelfDamageAndRankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_GetSelfDamageAndRankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildBoss_GetSelfDamageAndRankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_GetSelfDamageAndRankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_GetSelfDamageAndRankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x10
	}
	if m.SelfDamage != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.SelfDamage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss_GuildBossFinishPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss_GuildBossFinishPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss_GuildBossFinishPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuildBoss(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuildBoss(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *GuildBoss) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildBoss_GetCurrDayRewardsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildBoss_OtherRewards) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Timestamp != 0 {
		w.RawByte('"')
		w.RawString("timestamp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Timestamp))
		needWriteComma = true
	}
	if m.SelfDamage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("self_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SelfDamage))
		needWriteComma = true
	}
	if m.TotalDamage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDamage))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_CurrDayRewards) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Damage != 0 {
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_GetCurrDayRewardsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("curr_day_rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.CurrDayRewards == nil {
		w.RawString("null")
	} else if len(m.CurrDayRewards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.CurrDayRewards {
			v.JsonBytes(w)
			if i != len(m.CurrDayRewards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("other_day_rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.OtherDayRewards == nil {
		w.RawString("null")
	} else if len(m.OtherDayRewards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.OtherDayRewards {
			v.JsonBytes(w)
			if i != len(m.OtherDayRewards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_RewardCurrDayRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildBoss_RewardCurrDayResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("curr_day_rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.CurrDayRewards == nil {
		w.RawString("null")
	} else if len(m.CurrDayRewards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.CurrDayRewards {
			v.JsonBytes(w)
			if i != len(m.CurrDayRewards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("other_day_rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.OtherDayRewards == nil {
		w.RawString("null")
	} else if len(m.OtherDayRewards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.OtherDayRewards {
			v.JsonBytes(w)
			if i != len(m.OtherDayRewards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_RewardOtherDayRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildBoss_RewardOtherDayResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("curr_day_rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.CurrDayRewards == nil {
		w.RawString("null")
	} else if len(m.CurrDayRewards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.CurrDayRewards {
			v.JsonBytes(w)
			if i != len(m.CurrDayRewards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("other_day_rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.OtherDayRewards == nil {
		w.RawString("null")
	} else if len(m.OtherDayRewards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.OtherDayRewards {
			v.JsonBytes(w)
			if i != len(m.OtherDayRewards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_CanEnterRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildBoss_CanEnterResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Can {
		w.RawByte('"')
		w.RawString("can")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Can)
		needWriteComma = true
	}
	if m.RemainSeconds != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_seconds")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainSeconds))
		needWriteComma = true
	}
	if m.TotalDamage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDamage))
		needWriteComma = true
	}
	if m.RefreshRemain != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("refresh_remain")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RefreshRemain))
		needWriteComma = true
	}
	if m.RemainEnterCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_enter_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainEnterCount))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_GetGBBattleServerInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildBoss_GetGBBattleServerInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Can {
		w.RawByte('"')
		w.RawString("can")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Can)
		needWriteComma = true
	}
	if m.RemainSeconds != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_seconds")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainSeconds))
		needWriteComma = true
	}
	if m.TotalDamage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDamage))
		needWriteComma = true
	}
	if m.RefreshRemain != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("refresh_remain")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RefreshRemain))
		needWriteComma = true
	}
	if m.MapSceneId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_scene_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapSceneId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_SyncDamageInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("player_damages")
	w.RawByte('"')
	w.RawByte(':')
	if m.PlayerDamages == nil {
		w.RawString("null")
	} else if len(m.PlayerDamages) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlPlayerDamages := len(m.PlayerDamages)
		for k, v := range m.PlayerDamages {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlPlayerDamages--
			if mlPlayerDamages != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.TotalDamages != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_damages")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDamages))
		needWriteComma = true
	}
	if m.GuildDayId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_day_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildDayId)
		needWriteComma = true
	}
	if m.OverRole != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("over_role")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OverRole)
		needWriteComma = true
	}
	if m.OverRoleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("over_role_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OverRoleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_QueryRankRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildBoss_RankInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.Lv != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lv")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lv))
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	if m.Combat != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Combat))
		needWriteComma = true
	}
	if m.SelfDamage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("self_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SelfDamage))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("AvatarFrame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_QueryRankResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("ranks")
	w.RawByte('"')
	w.RawByte(':')
	if m.Ranks == nil {
		w.RawString("null")
	} else if len(m.Ranks) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Ranks {
			v.JsonBytes(w)
			if i != len(m.Ranks)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.RemainTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_OnlineCountRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildBoss_OnlineCountResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Count != 0 {
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_GetSelfDamageAndRankRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildBoss_GetSelfDamageAndRankResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SelfDamage != 0 {
		w.RawByte('"')
		w.RawString("self_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SelfDamage))
		needWriteComma = true
	}
	if m.Rank != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rank))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss_GuildBossFinishPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Count != 0 {
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss) GoString() string {
	return m.String()
}

func (m *GuildBoss_GetCurrDayRewardsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_GetCurrDayRewardsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_GetCurrDayRewardsRequest) GoString() string {
	return m.String()
}

func (m *GuildBoss_OtherRewards) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_OtherRewards) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_OtherRewards) GoString() string {
	return m.String()
}

func (m *GuildBoss_CurrDayRewards) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_CurrDayRewards) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_CurrDayRewards) GoString() string {
	return m.String()
}

func (m *GuildBoss_GetCurrDayRewardsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_GetCurrDayRewardsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_GetCurrDayRewardsResponse) GoString() string {
	return m.String()
}

func (m *GuildBoss_RewardCurrDayRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_RewardCurrDayRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_RewardCurrDayRequest) GoString() string {
	return m.String()
}

func (m *GuildBoss_RewardCurrDayResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_RewardCurrDayResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_RewardCurrDayResponse) GoString() string {
	return m.String()
}

func (m *GuildBoss_RewardOtherDayRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_RewardOtherDayRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_RewardOtherDayRequest) GoString() string {
	return m.String()
}

func (m *GuildBoss_RewardOtherDayResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_RewardOtherDayResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_RewardOtherDayResponse) GoString() string {
	return m.String()
}

func (m *GuildBoss_CanEnterRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_CanEnterRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_CanEnterRequest) GoString() string {
	return m.String()
}

func (m *GuildBoss_CanEnterResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_CanEnterResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_CanEnterResponse) GoString() string {
	return m.String()
}

func (m *GuildBoss_GetGBBattleServerInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_GetGBBattleServerInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_GetGBBattleServerInfoRequest) GoString() string {
	return m.String()
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_GetGBBattleServerInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_GetGBBattleServerInfoResponse) GoString() string {
	return m.String()
}

func (m *GuildBoss_SyncDamageInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_SyncDamageInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_SyncDamageInfoPush) GoString() string {
	return m.String()
}

func (m *GuildBoss_QueryRankRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_QueryRankRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_QueryRankRequest) GoString() string {
	return m.String()
}

func (m *GuildBoss_RankInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_RankInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_RankInfo) GoString() string {
	return m.String()
}

func (m *GuildBoss_QueryRankResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_QueryRankResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_QueryRankResponse) GoString() string {
	return m.String()
}

func (m *GuildBoss_OnlineCountRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_OnlineCountRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_OnlineCountRequest) GoString() string {
	return m.String()
}

func (m *GuildBoss_OnlineCountResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_OnlineCountResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_OnlineCountResponse) GoString() string {
	return m.String()
}

func (m *GuildBoss_GetSelfDamageAndRankRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_GetSelfDamageAndRankRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_GetSelfDamageAndRankRequest) GoString() string {
	return m.String()
}

func (m *GuildBoss_GetSelfDamageAndRankResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_GetSelfDamageAndRankResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_GetSelfDamageAndRankResponse) GoString() string {
	return m.String()
}

func (m *GuildBoss_GuildBossFinishPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss_GuildBossFinishPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss_GuildBossFinishPush) GoString() string {
	return m.String()
}

func (m *GuildBoss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildBoss_GetCurrDayRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildBoss_OtherRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGuildBoss(uint64(m.Timestamp))
	}
	if m.SelfDamage != 0 {
		n += 1 + sovGuildBoss(uint64(m.SelfDamage))
	}
	if m.TotalDamage != 0 {
		n += 1 + sovGuildBoss(uint64(m.TotalDamage))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	return n
}

func (m *GuildBoss_CurrDayRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Damage != 0 {
		n += 1 + sovGuildBoss(uint64(m.Damage))
	}
	if m.Status != 0 {
		n += 1 + sovGuildBoss(uint64(m.Status))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	return n
}

func (m *GuildBoss_GetCurrDayRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurrDayRewards) > 0 {
		for _, e := range m.CurrDayRewards {
			l = e.Size()
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	if len(m.OtherDayRewards) > 0 {
		for _, e := range m.OtherDayRewards {
			l = e.Size()
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	return n
}

func (m *GuildBoss_RewardCurrDayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildBoss_RewardCurrDayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurrDayRewards) > 0 {
		for _, e := range m.CurrDayRewards {
			l = e.Size()
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	if len(m.OtherDayRewards) > 0 {
		for _, e := range m.OtherDayRewards {
			l = e.Size()
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	return n
}

func (m *GuildBoss_RewardOtherDayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildBoss_RewardOtherDayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurrDayRewards) > 0 {
		for _, e := range m.CurrDayRewards {
			l = e.Size()
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	if len(m.OtherDayRewards) > 0 {
		for _, e := range m.OtherDayRewards {
			l = e.Size()
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	return n
}

func (m *GuildBoss_CanEnterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildBoss_CanEnterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Can {
		n += 2
	}
	if m.RemainSeconds != 0 {
		n += 1 + sovGuildBoss(uint64(m.RemainSeconds))
	}
	if m.TotalDamage != 0 {
		n += 1 + sovGuildBoss(uint64(m.TotalDamage))
	}
	if m.RefreshRemain != 0 {
		n += 1 + sovGuildBoss(uint64(m.RefreshRemain))
	}
	if m.RemainEnterCount != 0 {
		n += 1 + sovGuildBoss(uint64(m.RemainEnterCount))
	}
	return n
}

func (m *GuildBoss_GetGBBattleServerInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildBoss_GetGBBattleServerInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Can {
		n += 2
	}
	if m.RemainSeconds != 0 {
		n += 1 + sovGuildBoss(uint64(m.RemainSeconds))
	}
	if m.TotalDamage != 0 {
		n += 1 + sovGuildBoss(uint64(m.TotalDamage))
	}
	if m.RefreshRemain != 0 {
		n += 1 + sovGuildBoss(uint64(m.RefreshRemain))
	}
	if m.MapSceneId != 0 {
		n += 1 + sovGuildBoss(uint64(m.MapSceneId))
	}
	if m.BattleId != 0 {
		n += 1 + sovGuildBoss(uint64(m.BattleId))
	}
	return n
}

func (m *GuildBoss_SyncDamageInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerDamages) > 0 {
		for k, v := range m.PlayerDamages {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGuildBoss(uint64(len(k))) + 1 + sovGuildBoss(uint64(v))
			n += mapEntrySize + 1 + sovGuildBoss(uint64(mapEntrySize))
		}
	}
	if m.TotalDamages != 0 {
		n += 1 + sovGuildBoss(uint64(m.TotalDamages))
	}
	l = len(m.GuildDayId)
	if l > 0 {
		n += 1 + l + sovGuildBoss(uint64(l))
	}
	l = len(m.OverRole)
	if l > 0 {
		n += 1 + l + sovGuildBoss(uint64(l))
	}
	if m.OverRoleServerId != 0 {
		n += 1 + sovGuildBoss(uint64(m.OverRoleServerId))
	}
	return n
}

func (m *GuildBoss_QueryRankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildBoss_RankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuildBoss(uint64(l))
	}
	if m.AvatarId != 0 {
		n += 1 + sovGuildBoss(uint64(m.AvatarId))
	}
	if m.Lv != 0 {
		n += 1 + sovGuildBoss(uint64(m.Lv))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGuildBoss(uint64(l))
	}
	if m.Combat != 0 {
		n += 1 + sovGuildBoss(uint64(m.Combat))
	}
	if m.SelfDamage != 0 {
		n += 1 + sovGuildBoss(uint64(m.SelfDamage))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovGuildBoss(uint64(m.AvatarFrame))
	}
	return n
}

func (m *GuildBoss_QueryRankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		for _, e := range m.Ranks {
			l = e.Size()
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	if m.RemainTime != 0 {
		n += 1 + sovGuildBoss(uint64(m.RemainTime))
	}
	return n
}

func (m *GuildBoss_OnlineCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildBoss_OnlineCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovGuildBoss(uint64(m.Count))
	}
	return n
}

func (m *GuildBoss_GetSelfDamageAndRankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildBoss_GetSelfDamageAndRankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelfDamage != 0 {
		n += 1 + sovGuildBoss(uint64(m.SelfDamage))
	}
	if m.Rank != 0 {
		n += 1 + sovGuildBoss(uint64(m.Rank))
	}
	return n
}

func (m *GuildBoss_GuildBossFinishPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovGuildBoss(uint64(m.Count))
	}
	return n
}

func sovGuildBoss(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuildBoss(x uint64) (n int) {
	return sovGuildBoss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuildBoss) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBoss: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBoss: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_GetCurrDayRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrDayRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrDayRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_OtherRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDamage", wireType)
			}
			m.SelfDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamage", wireType)
			}
			m.TotalDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_CurrDayRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrDayRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrDayRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_GetCurrDayRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrDayRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrDayRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrDayRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrDayRewards = append(m.CurrDayRewards, &GuildBoss_CurrDayRewards{})
			if err := m.CurrDayRewards[len(m.CurrDayRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherDayRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherDayRewards = append(m.OtherDayRewards, &GuildBoss_OtherRewards{})
			if err := m.OtherDayRewards[len(m.OtherDayRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_RewardCurrDayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardCurrDayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardCurrDayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_RewardCurrDayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardCurrDayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardCurrDayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrDayRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrDayRewards = append(m.CurrDayRewards, &GuildBoss_CurrDayRewards{})
			if err := m.CurrDayRewards[len(m.CurrDayRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherDayRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherDayRewards = append(m.OtherDayRewards, &GuildBoss_OtherRewards{})
			if err := m.OtherDayRewards[len(m.OtherDayRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_RewardOtherDayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardOtherDayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardOtherDayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_RewardOtherDayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardOtherDayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardOtherDayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrDayRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrDayRewards = append(m.CurrDayRewards, &GuildBoss_CurrDayRewards{})
			if err := m.CurrDayRewards[len(m.CurrDayRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherDayRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherDayRewards = append(m.OtherDayRewards, &GuildBoss_OtherRewards{})
			if err := m.OtherDayRewards[len(m.OtherDayRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_CanEnterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanEnterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanEnterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_CanEnterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanEnterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanEnterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Can", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Can = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainSeconds", wireType)
			}
			m.RemainSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamage", wireType)
			}
			m.TotalDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshRemain", wireType)
			}
			m.RefreshRemain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshRemain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainEnterCount", wireType)
			}
			m.RemainEnterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainEnterCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_GetGBBattleServerInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGBBattleServerInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGBBattleServerInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_GetGBBattleServerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGBBattleServerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGBBattleServerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Can", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Can = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainSeconds", wireType)
			}
			m.RemainSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamage", wireType)
			}
			m.TotalDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshRemain", wireType)
			}
			m.RefreshRemain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshRemain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapSceneId", wireType)
			}
			m.MapSceneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapSceneId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_SyncDamageInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncDamageInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncDamageInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDamages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerDamages == nil {
				m.PlayerDamages = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuildBoss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuildBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGuildBoss
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGuildBoss
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuildBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuildBoss(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGuildBoss
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PlayerDamages[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamages", wireType)
			}
			m.TotalDamages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDamages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildDayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildDayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OverRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverRoleServerId", wireType)
			}
			m.OverRoleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverRoleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_QueryRankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_RankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			m.Combat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Combat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDamage", wireType)
			}
			m.SelfDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_QueryRankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranks = append(m.Ranks, &GuildBoss_RankInfo{})
			if err := m.Ranks[len(m.Ranks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_OnlineCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnlineCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnlineCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_OnlineCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnlineCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnlineCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_GetSelfDamageAndRankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSelfDamageAndRankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSelfDamageAndRankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_GetSelfDamageAndRankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSelfDamageAndRankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSelfDamageAndRankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDamage", wireType)
			}
			m.SelfDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss_GuildBossFinishPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBossFinishPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBossFinishPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuildBoss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuildBoss
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuildBoss
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuildBoss
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuildBoss        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuildBoss          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuildBoss = fmt.Errorf("proto: unexpected end of group")
)
