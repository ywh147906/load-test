// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/gacha.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GachaErrorCode int32

const (
	GachaErrorCode_ErrGachaNotExist   GachaErrorCode = 0
	GachaErrorCode_ErrGachaReachLimit GachaErrorCode = 1
	GachaErrorCode_ErrGachaWrongCount GachaErrorCode = 2
	GachaErrorCode_ErrGachaRefreshed  GachaErrorCode = 3
)

var GachaErrorCode_name = map[int32]string{
	0: "ErrGachaNotExist",
	1: "ErrGachaReachLimit",
	2: "ErrGachaWrongCount",
	3: "ErrGachaRefreshed",
}

var GachaErrorCode_value = map[string]int32{
	"ErrGachaNotExist":   0,
	"ErrGachaReachLimit": 1,
	"ErrGachaWrongCount": 2,
	"ErrGachaRefreshed":  3,
}

func (GachaErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_62f9c91d6fbe8767, []int{0}
}

type Gacha struct {
}

func (m *Gacha) Reset()      { *m = Gacha{} }
func (*Gacha) ProtoMessage() {}
func (*Gacha) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f9c91d6fbe8767, []int{0}
}
func (m *Gacha) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gacha) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gacha.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gacha) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gacha.Merge(m, src)
}
func (m *Gacha) XXX_Size() int {
	return m.Size()
}
func (m *Gacha) XXX_DiscardUnknown() {
	xxx_messageInfo_Gacha.DiscardUnknown(m)
}

var xxx_messageInfo_Gacha proto.InternalMessageInfo

func (*Gacha) XXX_MessageName() string {
	return "service.Gacha"
}

type Gacha_GetGachaPoolRequest struct {
}

func (m *Gacha_GetGachaPoolRequest) Reset()      { *m = Gacha_GetGachaPoolRequest{} }
func (*Gacha_GetGachaPoolRequest) ProtoMessage() {}
func (*Gacha_GetGachaPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f9c91d6fbe8767, []int{0, 0}
}
func (m *Gacha_GetGachaPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gacha_GetGachaPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gacha_GetGachaPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gacha_GetGachaPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gacha_GetGachaPoolRequest.Merge(m, src)
}
func (m *Gacha_GetGachaPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *Gacha_GetGachaPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Gacha_GetGachaPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Gacha_GetGachaPoolRequest proto.InternalMessageInfo

func (*Gacha_GetGachaPoolRequest) XXX_MessageName() string {
	return "service.Gacha.GetGachaPoolRequest"
}

type Gacha_GetGachaPoolResponse struct {
	Gacha []*models.Gacha `protobuf:"bytes,1,rep,name=gacha,proto3" json:"gacha,omitempty"`
}

func (m *Gacha_GetGachaPoolResponse) Reset()      { *m = Gacha_GetGachaPoolResponse{} }
func (*Gacha_GetGachaPoolResponse) ProtoMessage() {}
func (*Gacha_GetGachaPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f9c91d6fbe8767, []int{0, 1}
}
func (m *Gacha_GetGachaPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gacha_GetGachaPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gacha_GetGachaPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gacha_GetGachaPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gacha_GetGachaPoolResponse.Merge(m, src)
}
func (m *Gacha_GetGachaPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *Gacha_GetGachaPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Gacha_GetGachaPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Gacha_GetGachaPoolResponse proto.InternalMessageInfo

func (m *Gacha_GetGachaPoolResponse) GetGacha() []*models.Gacha {
	if m != nil {
		return m.Gacha
	}
	return nil
}

func (*Gacha_GetGachaPoolResponse) XXX_MessageName() string {
	return "service.Gacha.GetGachaPoolResponse"
}

type Gacha_GachaRequest struct {
	GachaId int64 `protobuf:"varint,1,opt,name=gacha_id,json=gachaId,proto3" json:"gacha_id,omitempty"`
	Count   int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Gacha_GachaRequest) Reset()      { *m = Gacha_GachaRequest{} }
func (*Gacha_GachaRequest) ProtoMessage() {}
func (*Gacha_GachaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f9c91d6fbe8767, []int{0, 2}
}
func (m *Gacha_GachaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gacha_GachaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gacha_GachaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gacha_GachaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gacha_GachaRequest.Merge(m, src)
}
func (m *Gacha_GachaRequest) XXX_Size() int {
	return m.Size()
}
func (m *Gacha_GachaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Gacha_GachaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Gacha_GachaRequest proto.InternalMessageInfo

func (m *Gacha_GachaRequest) GetGachaId() int64 {
	if m != nil {
		return m.GachaId
	}
	return 0
}

func (m *Gacha_GachaRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Gacha_GachaRequest) XXX_MessageName() string {
	return "service.Gacha.GachaRequest"
}

type Gacha_GachaResponse struct {
	Items []*models.Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Gacha *models.Gacha  `protobuf:"bytes,2,opt,name=gacha,proto3" json:"gacha,omitempty"`
}

func (m *Gacha_GachaResponse) Reset()      { *m = Gacha_GachaResponse{} }
func (*Gacha_GachaResponse) ProtoMessage() {}
func (*Gacha_GachaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f9c91d6fbe8767, []int{0, 3}
}
func (m *Gacha_GachaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gacha_GachaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gacha_GachaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gacha_GachaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gacha_GachaResponse.Merge(m, src)
}
func (m *Gacha_GachaResponse) XXX_Size() int {
	return m.Size()
}
func (m *Gacha_GachaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Gacha_GachaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Gacha_GachaResponse proto.InternalMessageInfo

func (m *Gacha_GachaResponse) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Gacha_GachaResponse) GetGacha() *models.Gacha {
	if m != nil {
		return m.Gacha
	}
	return nil
}

func (*Gacha_GachaResponse) XXX_MessageName() string {
	return "service.Gacha.GachaResponse"
}

type Gacha_CheatUnlockGachaRequest struct {
}

func (m *Gacha_CheatUnlockGachaRequest) Reset()      { *m = Gacha_CheatUnlockGachaRequest{} }
func (*Gacha_CheatUnlockGachaRequest) ProtoMessage() {}
func (*Gacha_CheatUnlockGachaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f9c91d6fbe8767, []int{0, 4}
}
func (m *Gacha_CheatUnlockGachaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gacha_CheatUnlockGachaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gacha_CheatUnlockGachaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gacha_CheatUnlockGachaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gacha_CheatUnlockGachaRequest.Merge(m, src)
}
func (m *Gacha_CheatUnlockGachaRequest) XXX_Size() int {
	return m.Size()
}
func (m *Gacha_CheatUnlockGachaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Gacha_CheatUnlockGachaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Gacha_CheatUnlockGachaRequest proto.InternalMessageInfo

func (*Gacha_CheatUnlockGachaRequest) XXX_MessageName() string {
	return "service.Gacha.CheatUnlockGachaRequest"
}

type Gacha_CheatUnlockGachaResponse struct {
}

func (m *Gacha_CheatUnlockGachaResponse) Reset()      { *m = Gacha_CheatUnlockGachaResponse{} }
func (*Gacha_CheatUnlockGachaResponse) ProtoMessage() {}
func (*Gacha_CheatUnlockGachaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62f9c91d6fbe8767, []int{0, 5}
}
func (m *Gacha_CheatUnlockGachaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gacha_CheatUnlockGachaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gacha_CheatUnlockGachaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gacha_CheatUnlockGachaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gacha_CheatUnlockGachaResponse.Merge(m, src)
}
func (m *Gacha_CheatUnlockGachaResponse) XXX_Size() int {
	return m.Size()
}
func (m *Gacha_CheatUnlockGachaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Gacha_CheatUnlockGachaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Gacha_CheatUnlockGachaResponse proto.InternalMessageInfo

func (*Gacha_CheatUnlockGachaResponse) XXX_MessageName() string {
	return "service.Gacha.CheatUnlockGachaResponse"
}
func init() {
	proto.RegisterEnum("service.GachaErrorCode", GachaErrorCode_name, GachaErrorCode_value)
	proto.RegisterType((*Gacha)(nil), "service.Gacha")
	proto.RegisterType((*Gacha_GetGachaPoolRequest)(nil), "service.Gacha.GetGachaPoolRequest")
	proto.RegisterType((*Gacha_GetGachaPoolResponse)(nil), "service.Gacha.GetGachaPoolResponse")
	proto.RegisterType((*Gacha_GachaRequest)(nil), "service.Gacha.GachaRequest")
	proto.RegisterType((*Gacha_GachaResponse)(nil), "service.Gacha.GachaResponse")
	proto.RegisterType((*Gacha_CheatUnlockGachaRequest)(nil), "service.Gacha.CheatUnlockGachaRequest")
	proto.RegisterType((*Gacha_CheatUnlockGachaResponse)(nil), "service.Gacha.CheatUnlockGachaResponse")
}

func init() { proto.RegisterFile("proto/service/gacha.proto", fileDescriptor_62f9c91d6fbe8767) }

var fileDescriptor_62f9c91d6fbe8767 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x6b, 0x13, 0x41,
	0x1c, 0xdd, 0x49, 0x88, 0x95, 0xb1, 0xd5, 0x74, 0x6c, 0xed, 0x66, 0x0e, 0x43, 0xa8, 0x1e, 0x8a,
	0x1f, 0x09, 0x28, 0x78, 0x51, 0x10, 0x0c, 0xa1, 0x14, 0xa4, 0xc8, 0x82, 0x28, 0x5e, 0x64, 0xbb,
	0x3b, 0x26, 0x8b, 0xd9, 0x9d, 0x3a, 0x33, 0x15, 0xaf, 0x82, 0x60, 0x59, 0x2c, 0xed, 0xc1, 0x6f,
	0x7a, 0xd0, 0x83, 0x50, 0xc4, 0xd2, 0x28, 0x84, 0xf6, 0x62, 0xcf, 0x3d, 0xf6, 0xd8, 0xa3, 0xdd,
	0x74, 0xd7, 0xf6, 0xe6, 0x9f, 0x20, 0x3b, 0xb3, 0x25, 0x8d, 0xe2, 0x6d, 0xdf, 0xc7, 0xbc, 0xf7,
	0x58, 0x7e, 0xb0, 0x34, 0xcb, 0x99, 0x64, 0x55, 0x41, 0xf9, 0x13, 0xcf, 0xa1, 0xd5, 0x86, 0xed,
	0x34, 0xed, 0x8a, 0xe2, 0xd0, 0x40, 0x46, 0x62, 0x53, 0x7b, 0x7c, 0xe6, 0xd2, 0x96, 0x38, 0x6a,
	0xc1, 0x63, 0x7d, 0xca, 0x8c, 0x2d, 0x68, 0x26, 0x9c, 0xf9, 0x4b, 0x68, 0x68, 0x7e, 0x7c, 0x35,
	0x07, 0x0b, 0x93, 0x69, 0x00, 0x1e, 0x85, 0xa7, 0x27, 0xa9, 0x54, 0xdf, 0xb7, 0x19, 0x6b, 0x59,
	0xf4, 0xf1, 0x1c, 0x15, 0x12, 0x5f, 0x83, 0x23, 0xfd, 0xb4, 0x98, 0x65, 0x81, 0xa0, 0xe8, 0x2c,
	0x2c, 0xa8, 0x62, 0x13, 0x94, 0xf3, 0x13, 0x27, 0x2e, 0x0f, 0x55, 0x74, 0x74, 0x45, 0x39, 0x2d,
	0xad, 0xe1, 0x1b, 0x70, 0x50, 0x63, 0x1d, 0x86, 0x4a, 0xf0, 0xb8, 0x12, 0x1e, 0x78, 0xae, 0x09,
	0xca, 0x60, 0x22, 0x6f, 0x0d, 0x28, 0x3c, 0xe5, 0xa2, 0x11, 0x58, 0x70, 0xd8, 0x5c, 0x20, 0xcd,
	0x9c, 0xe2, 0x35, 0xc0, 0xf7, 0xe0, 0x50, 0x16, 0x90, 0xd5, 0x8e, 0xc3, 0x82, 0x27, 0xa9, 0x2f,
	0xb2, 0xda, 0xc1, 0xc3, 0xda, 0x29, 0x49, 0x7d, 0x4b, 0x4b, 0xbd, 0x69, 0x69, 0xd4, 0xff, 0xa6,
	0x95, 0xe0, 0x58, 0xad, 0x49, 0x6d, 0x79, 0x27, 0x68, 0x31, 0xe7, 0xd1, 0xd1, 0x95, 0x18, 0x43,
	0xf3, 0x5f, 0x49, 0xf7, 0x9f, 0xdf, 0x05, 0xf0, 0xa4, 0x62, 0xea, 0x9c, 0x33, 0x5e, 0x63, 0x2e,
	0x45, 0x17, 0x60, 0xb1, 0xce, 0xb9, 0x22, 0xa7, 0x99, 0xac, 0x3f, 0xf5, 0x84, 0x2c, 0x1a, 0x78,
	0x34, 0xec, 0x98, 0xc3, 0xe8, 0x54, 0xbc, 0xf0, 0x29, 0xf9, 0xf6, 0x71, 0x6f, 0x63, 0x21, 0x5e,
	0x7d, 0x17, 0x2f, 0xaf, 0xa0, 0xeb, 0x10, 0x1d, 0x9a, 0x2d, 0x6a, 0x3b, 0xcd, 0x5b, 0x9e, 0xef,
	0xc9, 0x22, 0xc0, 0xe7, 0xc2, 0x8e, 0x59, 0x46, 0x24, 0x59, 0x5b, 0x4c, 0xde, 0x7e, 0x4e, 0xc2,
	0x1f, 0xe9, 0xbb, 0xd7, 0xed, 0x83, 0x17, 0x8b, 0xfb, 0x9b, 0x9b, 0xf1, 0x7c, 0x7b, 0x6f, 0x23,
	0x3c, 0x78, 0xbf, 0x84, 0xae, 0xf6, 0x5e, 0xdf, 0xe5, 0x2c, 0x68, 0xd4, 0xd2, 0x9f, 0x54, 0xcc,
	0x61, 0x12, 0x76, 0x4c, 0x8c, 0xcc, 0x64, 0xf9, 0x4b, 0xf2, 0x6a, 0x2d, 0x79, 0xf9, 0xec, 0xd7,
	0x87, 0xe7, 0x59, 0xc6, 0xd7, 0x34, 0x06, 0x5d, 0x84, 0xc3, 0xbd, 0xd6, 0x87, 0x9c, 0x8a, 0x26,
	0x75, 0x8b, 0xf9, 0xfe, 0x8d, 0xf1, 0xfa, 0xf7, 0x78, 0x7e, 0x3d, 0x79, 0xd3, 0xbe, 0x39, 0xbd,
	0xb3, 0x4b, 0x8c, 0x95, 0x88, 0x80, 0xad, 0x88, 0x80, 0xed, 0x88, 0x80, 0x9f, 0x11, 0x01, 0xfb,
	0x11, 0x31, 0x7e, 0x47, 0x04, 0x2c, 0x75, 0x89, 0xb1, 0xd5, 0x25, 0x60, 0xbb, 0x4b, 0x8c, 0x9d,
	0x2e, 0x31, 0xee, 0x97, 0x1d, 0xe6, 0x05, 0x97, 0xd2, 0xd3, 0xa4, 0xbc, 0xea, 0x30, 0xdf, 0x67,
	0x41, 0xb5, 0xef, 0x86, 0x67, 0x8e, 0x29, 0x78, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d,
	0x45, 0xa3, 0x99, 0xdb, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGacha.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGacha_GetGachaPoolRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGacha_GetGachaPoolResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGacha_GachaRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGacha_GachaResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGacha_CheatUnlockGachaRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGacha_CheatUnlockGachaResponse.Get().(proto.Message)
	})
}

var poolGacha = &sync.Pool{New: func() interface{} { return &Gacha{} }}

func (m *Gacha) ReleasePool() { m.Reset(); poolGacha.Put(m); m = nil }

var poolGacha_GetGachaPoolRequest = &sync.Pool{New: func() interface{} { return &Gacha_GetGachaPoolRequest{} }}

func (m *Gacha_GetGachaPoolRequest) ReleasePool() {
	m.Reset()
	poolGacha_GetGachaPoolRequest.Put(m)
	m = nil
}

var poolGacha_GetGachaPoolResponse = &sync.Pool{New: func() interface{} { return &Gacha_GetGachaPoolResponse{} }}

func (m *Gacha_GetGachaPoolResponse) ReleasePool() {
	m.Reset()
	poolGacha_GetGachaPoolResponse.Put(m)
	m = nil
}

var poolGacha_GachaRequest = &sync.Pool{New: func() interface{} { return &Gacha_GachaRequest{} }}

func (m *Gacha_GachaRequest) ReleasePool() { m.Reset(); poolGacha_GachaRequest.Put(m); m = nil }

var poolGacha_GachaResponse = &sync.Pool{New: func() interface{} { return &Gacha_GachaResponse{} }}

func (m *Gacha_GachaResponse) ReleasePool() { m.Reset(); poolGacha_GachaResponse.Put(m); m = nil }

var poolGacha_CheatUnlockGachaRequest = &sync.Pool{New: func() interface{} { return &Gacha_CheatUnlockGachaRequest{} }}

func (m *Gacha_CheatUnlockGachaRequest) ReleasePool() {
	m.Reset()
	poolGacha_CheatUnlockGachaRequest.Put(m)
	m = nil
}

var poolGacha_CheatUnlockGachaResponse = &sync.Pool{New: func() interface{} { return &Gacha_CheatUnlockGachaResponse{} }}

func (m *Gacha_CheatUnlockGachaResponse) ReleasePool() {
	m.Reset()
	poolGacha_CheatUnlockGachaResponse.Put(m)
	m = nil
}
func (x GachaErrorCode) String() string {
	s, ok := GachaErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Gacha) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gacha)
	if !ok {
		that2, ok := that.(Gacha)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Gacha_GetGachaPoolRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gacha_GetGachaPoolRequest)
	if !ok {
		that2, ok := that.(Gacha_GetGachaPoolRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Gacha_GetGachaPoolResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gacha_GetGachaPoolResponse)
	if !ok {
		that2, ok := that.(Gacha_GetGachaPoolResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Gacha) != len(that1.Gacha) {
		return false
	}
	for i := range this.Gacha {
		if !this.Gacha[i].Equal(that1.Gacha[i]) {
			return false
		}
	}
	return true
}
func (this *Gacha_GachaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gacha_GachaRequest)
	if !ok {
		that2, ok := that.(Gacha_GachaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GachaId != that1.GachaId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Gacha_GachaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gacha_GachaResponse)
	if !ok {
		that2, ok := that.(Gacha_GachaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !this.Gacha.Equal(that1.Gacha) {
		return false
	}
	return true
}
func (this *Gacha_CheatUnlockGachaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gacha_CheatUnlockGachaRequest)
	if !ok {
		that2, ok := that.(Gacha_CheatUnlockGachaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Gacha_CheatUnlockGachaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gacha_CheatUnlockGachaResponse)
	if !ok {
		that2, ok := that.(Gacha_CheatUnlockGachaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Gacha) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gacha) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gacha) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Gacha_GetGachaPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gacha_GetGachaPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gacha_GetGachaPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Gacha_GetGachaPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gacha_GetGachaPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gacha_GetGachaPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gacha) > 0 {
		for iNdEx := len(m.Gacha) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gacha[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGacha(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Gacha_GachaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gacha_GachaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gacha_GachaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.GachaId != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.GachaId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Gacha_GachaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gacha_GachaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gacha_GachaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gacha != nil {
		{
			size, err := m.Gacha.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGacha(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGacha(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Gacha_CheatUnlockGachaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gacha_CheatUnlockGachaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gacha_CheatUnlockGachaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Gacha_CheatUnlockGachaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gacha_CheatUnlockGachaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gacha_CheatUnlockGachaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintGacha(dAtA []byte, offset int, v uint64) int {
	offset -= sovGacha(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Gacha) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Gacha_GetGachaPoolRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Gacha_GetGachaPoolResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("gacha")
	w.RawByte('"')
	w.RawByte(':')
	if m.Gacha == nil {
		w.RawString("null")
	} else if len(m.Gacha) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Gacha {
			v.JsonBytes(w)
			if i != len(m.Gacha)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Gacha_GachaRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GachaId != 0 {
		w.RawByte('"')
		w.RawString("gacha_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GachaId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Gacha_GachaResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("gacha")
	w.RawByte('"')
	w.RawByte(':')
	m.Gacha.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Gacha_CheatUnlockGachaRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Gacha_CheatUnlockGachaResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Gacha) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Gacha) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Gacha) GoString() string {
	return m.String()
}

func (m *Gacha_GetGachaPoolRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Gacha_GetGachaPoolRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Gacha_GetGachaPoolRequest) GoString() string {
	return m.String()
}

func (m *Gacha_GetGachaPoolResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Gacha_GetGachaPoolResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Gacha_GetGachaPoolResponse) GoString() string {
	return m.String()
}

func (m *Gacha_GachaRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Gacha_GachaRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Gacha_GachaRequest) GoString() string {
	return m.String()
}

func (m *Gacha_GachaResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Gacha_GachaResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Gacha_GachaResponse) GoString() string {
	return m.String()
}

func (m *Gacha_CheatUnlockGachaRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Gacha_CheatUnlockGachaRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Gacha_CheatUnlockGachaRequest) GoString() string {
	return m.String()
}

func (m *Gacha_CheatUnlockGachaResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Gacha_CheatUnlockGachaResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Gacha_CheatUnlockGachaResponse) GoString() string {
	return m.String()
}

func (m *Gacha) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Gacha_GetGachaPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Gacha_GetGachaPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gacha) > 0 {
		for _, e := range m.Gacha {
			l = e.Size()
			n += 1 + l + sovGacha(uint64(l))
		}
	}
	return n
}

func (m *Gacha_GachaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GachaId != 0 {
		n += 1 + sovGacha(uint64(m.GachaId))
	}
	if m.Count != 0 {
		n += 1 + sovGacha(uint64(m.Count))
	}
	return n
}

func (m *Gacha_GachaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGacha(uint64(l))
		}
	}
	if m.Gacha != nil {
		l = m.Gacha.Size()
		n += 1 + l + sovGacha(uint64(l))
	}
	return n
}

func (m *Gacha_CheatUnlockGachaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Gacha_CheatUnlockGachaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovGacha(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGacha(x uint64) (n int) {
	return sovGacha(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Gacha) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gacha: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gacha: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gacha_GetGachaPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGachaPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGachaPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gacha_GetGachaPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGachaPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGachaPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gacha", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGacha
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGacha
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gacha = append(m.Gacha, &models.Gacha{})
			if err := m.Gacha[len(m.Gacha)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gacha_GachaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GachaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GachaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GachaId", wireType)
			}
			m.GachaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GachaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gacha_GachaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GachaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GachaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGacha
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGacha
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gacha", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGacha
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGacha
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gacha == nil {
				m.Gacha = &models.Gacha{}
			}
			if err := m.Gacha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gacha_CheatUnlockGachaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatUnlockGachaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatUnlockGachaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gacha_CheatUnlockGachaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatUnlockGachaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatUnlockGachaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGacha(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGacha
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGacha
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGacha
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGacha        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGacha          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGacha = fmt.Errorf("proto: unexpected end of group")
)
