// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/expedition.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExpeditionErrorCode int32

const (
	ExpeditionErrorCode_ErrExecutionNotEnough      ExpeditionErrorCode = 0
	ExpeditionErrorCode_ErrNoIdleTask              ExpeditionErrorCode = 1
	ExpeditionErrorCode_ErrExpeditionTaskNotExist  ExpeditionErrorCode = 2
	ExpeditionErrorCode_ErrExpeditionTaskNotDone   ExpeditionErrorCode = 3
	ExpeditionErrorCode_ErrExpeditionTaskNotStart  ExpeditionErrorCode = 4
	ExpeditionErrorCode_ErrExpeditionTaskFinish    ExpeditionErrorCode = 5
	ExpeditionErrorCode_ErrLimitConditionNotEnough ExpeditionErrorCode = 6
)

var ExpeditionErrorCode_name = map[int32]string{
	0: "ErrExecutionNotEnough",
	1: "ErrNoIdleTask",
	2: "ErrExpeditionTaskNotExist",
	3: "ErrExpeditionTaskNotDone",
	4: "ErrExpeditionTaskNotStart",
	5: "ErrExpeditionTaskFinish",
	6: "ErrLimitConditionNotEnough",
}

var ExpeditionErrorCode_value = map[string]int32{
	"ErrExecutionNotEnough":      0,
	"ErrNoIdleTask":              1,
	"ErrExpeditionTaskNotExist":  2,
	"ErrExpeditionTaskNotDone":   3,
	"ErrExpeditionTaskNotStart":  4,
	"ErrExpeditionTaskFinish":    5,
	"ErrLimitConditionNotEnough": 6,
}

func (ExpeditionErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0}
}

type Expedition struct {
}

func (m *Expedition) Reset()      { *m = Expedition{} }
func (*Expedition) ProtoMessage() {}
func (*Expedition) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0}
}
func (m *Expedition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition.Merge(m, src)
}
func (m *Expedition) XXX_Size() int {
	return m.Size()
}
func (m *Expedition) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition proto.InternalMessageInfo

func (*Expedition) XXX_MessageName() string {
	return "service.Expedition"
}

// 获取远征信息
type Expedition_ExpeditionInfoRequest struct {
}

func (m *Expedition_ExpeditionInfoRequest) Reset()      { *m = Expedition_ExpeditionInfoRequest{} }
func (*Expedition_ExpeditionInfoRequest) ProtoMessage() {}
func (*Expedition_ExpeditionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 0}
}
func (m *Expedition_ExpeditionInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionInfoRequest.Merge(m, src)
}
func (m *Expedition_ExpeditionInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionInfoRequest proto.InternalMessageInfo

func (*Expedition_ExpeditionInfoRequest) XXX_MessageName() string {
	return "service.Expedition.ExpeditionInfoRequest"
}

type Expedition_ExpeditionInfoResponse struct {
	MustCount             int64                             `protobuf:"varint,1,opt,name=must_count,json=mustCount,proto3" json:"must_count,omitempty"`
	ExecutionRecoverCount int64                             `protobuf:"varint,2,opt,name=execution_recover_count,json=executionRecoverCount,proto3" json:"execution_recover_count,omitempty"`
	NextRecoverTime       int64                             `protobuf:"varint,3,opt,name=next_recover_time,json=nextRecoverTime,proto3" json:"next_recover_time,omitempty"`
	Task                  map[string]*models.ExpeditionTask `protobuf:"bytes,4,rep,name=task,proto3" json:"task,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraSlot             int64                             `protobuf:"varint,5,opt,name=extra_slot,json=extraSlot,proto3" json:"extra_slot,omitempty"`
	FreeRefreshCount      int64                             `protobuf:"varint,6,opt,name=free_refresh_count,json=freeRefreshCount,proto3" json:"free_refresh_count,omitempty"`
	MaxExecution          int64                             `protobuf:"varint,7,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
}

func (m *Expedition_ExpeditionInfoResponse) Reset()      { *m = Expedition_ExpeditionInfoResponse{} }
func (*Expedition_ExpeditionInfoResponse) ProtoMessage() {}
func (*Expedition_ExpeditionInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 1}
}
func (m *Expedition_ExpeditionInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionInfoResponse.Merge(m, src)
}
func (m *Expedition_ExpeditionInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionInfoResponse proto.InternalMessageInfo

func (m *Expedition_ExpeditionInfoResponse) GetMustCount() int64 {
	if m != nil {
		return m.MustCount
	}
	return 0
}

func (m *Expedition_ExpeditionInfoResponse) GetExecutionRecoverCount() int64 {
	if m != nil {
		return m.ExecutionRecoverCount
	}
	return 0
}

func (m *Expedition_ExpeditionInfoResponse) GetNextRecoverTime() int64 {
	if m != nil {
		return m.NextRecoverTime
	}
	return 0
}

func (m *Expedition_ExpeditionInfoResponse) GetTask() map[string]*models.ExpeditionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *Expedition_ExpeditionInfoResponse) GetExtraSlot() int64 {
	if m != nil {
		return m.ExtraSlot
	}
	return 0
}

func (m *Expedition_ExpeditionInfoResponse) GetFreeRefreshCount() int64 {
	if m != nil {
		return m.FreeRefreshCount
	}
	return 0
}

func (m *Expedition_ExpeditionInfoResponse) GetMaxExecution() int64 {
	if m != nil {
		return m.MaxExecution
	}
	return 0
}

func (*Expedition_ExpeditionInfoResponse) XXX_MessageName() string {
	return "service.Expedition.ExpeditionInfoResponse"
}

// 派遣
type Expedition_ExpeditionDispatchRequest struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *Expedition_ExpeditionDispatchRequest) Reset()      { *m = Expedition_ExpeditionDispatchRequest{} }
func (*Expedition_ExpeditionDispatchRequest) ProtoMessage() {}
func (*Expedition_ExpeditionDispatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 2}
}
func (m *Expedition_ExpeditionDispatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionDispatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionDispatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionDispatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionDispatchRequest.Merge(m, src)
}
func (m *Expedition_ExpeditionDispatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionDispatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionDispatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionDispatchRequest proto.InternalMessageInfo

func (m *Expedition_ExpeditionDispatchRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (*Expedition_ExpeditionDispatchRequest) XXX_MessageName() string {
	return "service.Expedition.ExpeditionDispatchRequest"
}

type Expedition_ExpeditionDispatchResponse struct {
	Task *models.ExpeditionTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *Expedition_ExpeditionDispatchResponse) Reset()      { *m = Expedition_ExpeditionDispatchResponse{} }
func (*Expedition_ExpeditionDispatchResponse) ProtoMessage() {}
func (*Expedition_ExpeditionDispatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 3}
}
func (m *Expedition_ExpeditionDispatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionDispatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionDispatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionDispatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionDispatchResponse.Merge(m, src)
}
func (m *Expedition_ExpeditionDispatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionDispatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionDispatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionDispatchResponse proto.InternalMessageInfo

func (m *Expedition_ExpeditionDispatchResponse) GetTask() *models.ExpeditionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (*Expedition_ExpeditionDispatchResponse) XXX_MessageName() string {
	return "service.Expedition.ExpeditionDispatchResponse"
}

// 领取完成奖励
type Expedition_ExpeditionGetDoneRewardRequest struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *Expedition_ExpeditionGetDoneRewardRequest) Reset() {
	*m = Expedition_ExpeditionGetDoneRewardRequest{}
}
func (*Expedition_ExpeditionGetDoneRewardRequest) ProtoMessage() {}
func (*Expedition_ExpeditionGetDoneRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 4}
}
func (m *Expedition_ExpeditionGetDoneRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionGetDoneRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionGetDoneRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionGetDoneRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionGetDoneRewardRequest.Merge(m, src)
}
func (m *Expedition_ExpeditionGetDoneRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionGetDoneRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionGetDoneRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionGetDoneRewardRequest proto.InternalMessageInfo

func (m *Expedition_ExpeditionGetDoneRewardRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (*Expedition_ExpeditionGetDoneRewardRequest) XXX_MessageName() string {
	return "service.Expedition.ExpeditionGetDoneRewardRequest"
}

type Expedition_ExpeditionGetDoneRewardResponse struct {
	Task   map[string]*models.ExpeditionTask `protobuf:"bytes,1,rep,name=task,proto3" json:"task,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Reward map[int64]int64                   `protobuf:"bytes,2,rep,name=reward,proto3" json:"reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Expedition_ExpeditionGetDoneRewardResponse) Reset() {
	*m = Expedition_ExpeditionGetDoneRewardResponse{}
}
func (*Expedition_ExpeditionGetDoneRewardResponse) ProtoMessage() {}
func (*Expedition_ExpeditionGetDoneRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 5}
}
func (m *Expedition_ExpeditionGetDoneRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionGetDoneRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionGetDoneRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionGetDoneRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionGetDoneRewardResponse.Merge(m, src)
}
func (m *Expedition_ExpeditionGetDoneRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionGetDoneRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionGetDoneRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionGetDoneRewardResponse proto.InternalMessageInfo

func (m *Expedition_ExpeditionGetDoneRewardResponse) GetTask() map[string]*models.ExpeditionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *Expedition_ExpeditionGetDoneRewardResponse) GetReward() map[int64]int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (*Expedition_ExpeditionGetDoneRewardResponse) XXX_MessageName() string {
	return "service.Expedition.ExpeditionGetDoneRewardResponse"
}

// 花费钻石立即完成任务
type Expedition_ExpeditionDoneImmediatelyRequest struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *Expedition_ExpeditionDoneImmediatelyRequest) Reset() {
	*m = Expedition_ExpeditionDoneImmediatelyRequest{}
}
func (*Expedition_ExpeditionDoneImmediatelyRequest) ProtoMessage() {}
func (*Expedition_ExpeditionDoneImmediatelyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 6}
}
func (m *Expedition_ExpeditionDoneImmediatelyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionDoneImmediatelyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionDoneImmediatelyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionDoneImmediatelyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionDoneImmediatelyRequest.Merge(m, src)
}
func (m *Expedition_ExpeditionDoneImmediatelyRequest) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionDoneImmediatelyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionDoneImmediatelyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionDoneImmediatelyRequest proto.InternalMessageInfo

func (m *Expedition_ExpeditionDoneImmediatelyRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (*Expedition_ExpeditionDoneImmediatelyRequest) XXX_MessageName() string {
	return "service.Expedition.ExpeditionDoneImmediatelyRequest"
}

type Expedition_ExpeditionDoneImmediatelyResponse struct {
	Task *models.ExpeditionTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *Expedition_ExpeditionDoneImmediatelyResponse) Reset() {
	*m = Expedition_ExpeditionDoneImmediatelyResponse{}
}
func (*Expedition_ExpeditionDoneImmediatelyResponse) ProtoMessage() {}
func (*Expedition_ExpeditionDoneImmediatelyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 7}
}
func (m *Expedition_ExpeditionDoneImmediatelyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionDoneImmediatelyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionDoneImmediatelyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionDoneImmediatelyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionDoneImmediatelyResponse.Merge(m, src)
}
func (m *Expedition_ExpeditionDoneImmediatelyResponse) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionDoneImmediatelyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionDoneImmediatelyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionDoneImmediatelyResponse proto.InternalMessageInfo

func (m *Expedition_ExpeditionDoneImmediatelyResponse) GetTask() *models.ExpeditionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (*Expedition_ExpeditionDoneImmediatelyResponse) XXX_MessageName() string {
	return "service.Expedition.ExpeditionDoneImmediatelyResponse"
}

// 刷新任务
type Expedition_ExpeditionRefreshRequest struct {
}

func (m *Expedition_ExpeditionRefreshRequest) Reset()      { *m = Expedition_ExpeditionRefreshRequest{} }
func (*Expedition_ExpeditionRefreshRequest) ProtoMessage() {}
func (*Expedition_ExpeditionRefreshRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 8}
}
func (m *Expedition_ExpeditionRefreshRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionRefreshRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionRefreshRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionRefreshRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionRefreshRequest.Merge(m, src)
}
func (m *Expedition_ExpeditionRefreshRequest) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionRefreshRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionRefreshRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionRefreshRequest proto.InternalMessageInfo

func (*Expedition_ExpeditionRefreshRequest) XXX_MessageName() string {
	return "service.Expedition.ExpeditionRefreshRequest"
}

type Expedition_ExpeditionRefreshResponse struct {
	MustCount        int64                             `protobuf:"varint,1,opt,name=must_count,json=mustCount,proto3" json:"must_count,omitempty"`
	Task             map[string]*models.ExpeditionTask `protobuf:"bytes,2,rep,name=task,proto3" json:"task,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FreeRefreshCount int64                             `protobuf:"varint,3,opt,name=free_refresh_count,json=freeRefreshCount,proto3" json:"free_refresh_count,omitempty"`
}

func (m *Expedition_ExpeditionRefreshResponse) Reset()      { *m = Expedition_ExpeditionRefreshResponse{} }
func (*Expedition_ExpeditionRefreshResponse) ProtoMessage() {}
func (*Expedition_ExpeditionRefreshResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 9}
}
func (m *Expedition_ExpeditionRefreshResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExpeditionRefreshResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExpeditionRefreshResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExpeditionRefreshResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExpeditionRefreshResponse.Merge(m, src)
}
func (m *Expedition_ExpeditionRefreshResponse) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExpeditionRefreshResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExpeditionRefreshResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExpeditionRefreshResponse proto.InternalMessageInfo

func (m *Expedition_ExpeditionRefreshResponse) GetMustCount() int64 {
	if m != nil {
		return m.MustCount
	}
	return 0
}

func (m *Expedition_ExpeditionRefreshResponse) GetTask() map[string]*models.ExpeditionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *Expedition_ExpeditionRefreshResponse) GetFreeRefreshCount() int64 {
	if m != nil {
		return m.FreeRefreshCount
	}
	return 0
}

func (*Expedition_ExpeditionRefreshResponse) XXX_MessageName() string {
	return "service.Expedition.ExpeditionRefreshResponse"
}

//----------------------push----------------------//
// 行动力单次恢复数量变化更新
type Expedition_ExecutionRecoverCountUpdatePush struct {
	ExecutionRecoverCount int64 `protobuf:"varint,1,opt,name=execution_recover_count,json=executionRecoverCount,proto3" json:"execution_recover_count,omitempty"`
	MaxExecution          int64 `protobuf:"varint,2,opt,name=max_execution,json=maxExecution,proto3" json:"max_execution,omitempty"`
}

func (m *Expedition_ExecutionRecoverCountUpdatePush) Reset() {
	*m = Expedition_ExecutionRecoverCountUpdatePush{}
}
func (*Expedition_ExecutionRecoverCountUpdatePush) ProtoMessage() {}
func (*Expedition_ExecutionRecoverCountUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc849aafa23786a, []int{0, 10}
}
func (m *Expedition_ExecutionRecoverCountUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition_ExecutionRecoverCountUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition_ExecutionRecoverCountUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition_ExecutionRecoverCountUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition_ExecutionRecoverCountUpdatePush.Merge(m, src)
}
func (m *Expedition_ExecutionRecoverCountUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *Expedition_ExecutionRecoverCountUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition_ExecutionRecoverCountUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition_ExecutionRecoverCountUpdatePush proto.InternalMessageInfo

func (m *Expedition_ExecutionRecoverCountUpdatePush) GetExecutionRecoverCount() int64 {
	if m != nil {
		return m.ExecutionRecoverCount
	}
	return 0
}

func (m *Expedition_ExecutionRecoverCountUpdatePush) GetMaxExecution() int64 {
	if m != nil {
		return m.MaxExecution
	}
	return 0
}

func (*Expedition_ExecutionRecoverCountUpdatePush) XXX_MessageName() string {
	return "service.Expedition.ExecutionRecoverCountUpdatePush"
}
func init() {
	proto.RegisterEnum("service.ExpeditionErrorCode", ExpeditionErrorCode_name, ExpeditionErrorCode_value)
	proto.RegisterType((*Expedition)(nil), "service.Expedition")
	proto.RegisterType((*Expedition_ExpeditionInfoRequest)(nil), "service.Expedition.ExpeditionInfoRequest")
	proto.RegisterType((*Expedition_ExpeditionInfoResponse)(nil), "service.Expedition.ExpeditionInfoResponse")
	proto.RegisterMapType((map[string]*models.ExpeditionTask)(nil), "service.Expedition.ExpeditionInfoResponse.TaskEntry")
	proto.RegisterType((*Expedition_ExpeditionDispatchRequest)(nil), "service.Expedition.ExpeditionDispatchRequest")
	proto.RegisterType((*Expedition_ExpeditionDispatchResponse)(nil), "service.Expedition.ExpeditionDispatchResponse")
	proto.RegisterType((*Expedition_ExpeditionGetDoneRewardRequest)(nil), "service.Expedition.ExpeditionGetDoneRewardRequest")
	proto.RegisterType((*Expedition_ExpeditionGetDoneRewardResponse)(nil), "service.Expedition.ExpeditionGetDoneRewardResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Expedition.ExpeditionGetDoneRewardResponse.RewardEntry")
	proto.RegisterMapType((map[string]*models.ExpeditionTask)(nil), "service.Expedition.ExpeditionGetDoneRewardResponse.TaskEntry")
	proto.RegisterType((*Expedition_ExpeditionDoneImmediatelyRequest)(nil), "service.Expedition.ExpeditionDoneImmediatelyRequest")
	proto.RegisterType((*Expedition_ExpeditionDoneImmediatelyResponse)(nil), "service.Expedition.ExpeditionDoneImmediatelyResponse")
	proto.RegisterType((*Expedition_ExpeditionRefreshRequest)(nil), "service.Expedition.ExpeditionRefreshRequest")
	proto.RegisterType((*Expedition_ExpeditionRefreshResponse)(nil), "service.Expedition.ExpeditionRefreshResponse")
	proto.RegisterMapType((map[string]*models.ExpeditionTask)(nil), "service.Expedition.ExpeditionRefreshResponse.TaskEntry")
	proto.RegisterType((*Expedition_ExecutionRecoverCountUpdatePush)(nil), "service.Expedition.ExecutionRecoverCountUpdatePush")
}

func init() { proto.RegisterFile("proto/service/expedition.proto", fileDescriptor_2fc849aafa23786a) }

var fileDescriptor_2fc849aafa23786a = []byte{
	// 901 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x7a, 0x13, 0x47, 0x99, 0xb4, 0xea, 0x76, 0xa8, 0xeb, 0x65, 0x51, 0x97, 0x00, 0x97,
	0x2a, 0x14, 0x1b, 0x85, 0xaa, 0x50, 0x2a, 0x84, 0x44, 0xba, 0xd0, 0x08, 0x94, 0xc2, 0xb6, 0x08,
	0x89, 0x8b, 0xb5, 0xf5, 0xbe, 0xe0, 0x55, 0xbc, 0x3b, 0x66, 0x76, 0x1c, 0x9c, 0x0b, 0xe2, 0x84,
	0xa8, 0x69, 0xa4, 0x48, 0x1c, 0x28, 0x25, 0x15, 0xf2, 0x89, 0x80, 0x44, 0x0f, 0xa9, 0x12, 0x22,
	0x8c, 0xc4, 0xb5, 0xc7, 0x1e, 0xcb, 0x0d, 0x1c, 0xaf, 0xeb, 0xde, 0xf8, 0x09, 0x68, 0x76, 0x36,
	0xeb, 0x4d, 0xec, 0xba, 0x55, 0xd5, 0x9b, 0xf7, 0xbd, 0xef, 0xfb, 0xde, 0x7b, 0xf3, 0xcd, 0x3c,
	0x19, 0xe9, 0x55, 0x4a, 0x18, 0x29, 0xf8, 0x40, 0x97, 0x9d, 0x12, 0x14, 0xa0, 0x5e, 0x05, 0xdb,
	0x61, 0x0e, 0xf1, 0xf2, 0x61, 0x02, 0x4f, 0x44, 0x19, 0x2d, 0x27, 0x80, 0x2e, 0xb1, 0xa1, 0xe2,
	0x17, 0xae, 0x58, 0x3e, 0x08, 0x84, 0x76, 0x62, 0x5f, 0xe2, 0xa0, 0xc0, 0x8b, 0x37, 0x0e, 0x21,
	0x64, 0xc4, 0x41, 0x2d, 0x87, 0xb2, 0xfd, 0xaf, 0x79, 0x6f, 0x91, 0x98, 0xf0, 0x79, 0x0d, 0x7c,
	0xa6, 0x6d, 0xc8, 0xe8, 0xf8, 0xc1, 0x8c, 0x5f, 0x25, 0x9e, 0x0f, 0xf8, 0x04, 0x42, 0x6e, 0xcd,
	0x67, 0xc5, 0x12, 0xa9, 0x79, 0x4c, 0x95, 0xa6, 0xa5, 0x93, 0xb2, 0x39, 0xc9, 0x23, 0x73, 0x3c,
	0x80, 0xcf, 0xa0, 0x1c, 0xd4, 0xa1, 0x54, 0xe3, 0xbc, 0x22, 0x85, 0x12, 0x59, 0x06, 0x1a, 0x61,
	0xd3, 0x21, 0x36, 0x1b, 0xa7, 0x4d, 0x91, 0x15, 0xbc, 0x19, 0x74, 0xd4, 0x83, 0x3a, 0x8b, 0x29,
	0xcc, 0x71, 0x41, 0x95, 0x43, 0xc6, 0x11, 0x9e, 0x88, 0xc0, 0x97, 0x1d, 0x17, 0xf0, 0x05, 0x34,
	0xc6, 0x2c, 0x7f, 0x49, 0x1d, 0x9b, 0x96, 0x4f, 0x4e, 0xcd, 0x9e, 0xce, 0x47, 0xa7, 0x92, 0xef,
	0x77, 0x9c, 0x1f, 0xde, 0x7c, 0xfe, 0xb2, 0xe5, 0x2f, 0x19, 0x1e, 0xa3, 0x2b, 0x66, 0xa8, 0xc0,
	0x87, 0x81, 0x3a, 0xa3, 0x56, 0xd1, 0xaf, 0x10, 0xa6, 0x8e, 0x8b, 0x61, 0xc2, 0xc8, 0xa5, 0x0a,
	0x61, 0xf8, 0x14, 0xc2, 0x8b, 0x14, 0xa0, 0x48, 0x61, 0x91, 0x82, 0x5f, 0x8e, 0xe6, 0xc8, 0x84,
	0x30, 0x85, 0x67, 0x4c, 0x91, 0x10, 0x23, 0xbc, 0x84, 0x0e, 0xbb, 0x56, 0xbd, 0x18, 0xcf, 0xa7,
	0x4e, 0x84, 0xc0, 0x43, 0xae, 0x55, 0x37, 0xf6, 0x62, 0xda, 0x45, 0x34, 0x19, 0x37, 0x81, 0x15,
	0x24, 0x2f, 0xc1, 0x4a, 0x78, 0x88, 0x93, 0x26, 0xff, 0x89, 0x4f, 0xa1, 0xf1, 0x65, 0xab, 0x52,
	0x83, 0xf0, 0xb0, 0xa6, 0x66, 0x8f, 0xe7, 0x85, 0x93, 0x89, 0x79, 0x38, 0xdb, 0x14, 0xa0, 0x37,
	0xd3, 0x6f, 0x48, 0xda, 0x69, 0xf4, 0x6c, 0x3f, 0x79, 0xde, 0xf1, 0xab, 0x16, 0x2b, 0x95, 0x23,
	0x1f, 0x71, 0x0e, 0x4d, 0xf0, 0x39, 0x8b, 0x8e, 0x1d, 0x15, 0xc9, 0xf0, 0xcf, 0x79, 0x5b, 0xbb,
	0x80, 0xb4, 0x61, 0xac, 0xc8, 0xe3, 0x99, 0xe8, 0x80, 0xa5, 0x91, 0x4d, 0x84, 0x18, 0xed, 0x2c,
	0xd2, 0xfb, 0xf1, 0xf7, 0x80, 0x9d, 0x27, 0x1e, 0x98, 0xf0, 0x85, 0x45, 0xed, 0x47, 0x36, 0xf1,
	0x77, 0x1a, 0x3d, 0xff, 0x50, 0x6e, 0xd4, 0xca, 0x47, 0x71, 0x2b, 0xdc, 0xeb, 0xb7, 0x46, 0x7b,
	0x3d, 0x54, 0x62, 0xc0, 0xf4, 0x4f, 0x50, 0x86, 0x86, 0x08, 0x35, 0x1d, 0x8a, 0xbe, 0xfd, 0x24,
	0xa2, 0xe2, 0x53, 0xc8, 0x46, 0x72, 0x4f, 0xdf, 0xdb, 0xb3, 0x68, 0x2a, 0x51, 0x27, 0x29, 0x29,
	0x0b, 0xc9, 0x63, 0x49, 0x49, 0x39, 0x49, 0x3d, 0x87, 0xa6, 0x13, 0x06, 0x13, 0x0f, 0xe6, 0x5d,
	0x17, 0x6c, 0xc7, 0x62, 0x50, 0x59, 0x79, 0xa4, 0x31, 0x17, 0xd1, 0x0b, 0x23, 0xc8, 0x4f, 0x70,
	0x49, 0x34, 0xa4, 0xf6, 0xe3, 0xd1, 0xa3, 0xd9, 0xdb, 0x35, 0x5f, 0xa7, 0x93, 0x37, 0x38, 0x4e,
	0x3e, 0xde, 0xba, 0x79, 0x3f, 0x6a, 0x42, 0x38, 0xf9, 0xfa, 0x68, 0x27, 0x0f, 0x68, 0x0f, 0x5c,
	0x8c, 0xe1, 0xcf, 0x5d, 0x1e, 0xfe, 0xdc, 0x9f, 0xbe, 0xdb, 0x5f, 0xf2, 0xd7, 0x30, 0x64, 0x37,
	0x7e, 0x5c, 0xb5, 0x2d, 0x06, 0x1f, 0xd6, 0xfc, 0xf2, 0xa8, 0xed, 0x2a, 0x8d, 0xda, 0xae, 0x03,
	0xab, 0x29, 0x3d, 0xb8, 0x9a, 0x66, 0xae, 0xca, 0xe8, 0x99, 0x7e, 0x77, 0x06, 0xa5, 0x84, 0xce,
	0x11, 0x1b, 0xf0, 0xab, 0x28, 0x6b, 0x50, 0x1a, 0xe3, 0x16, 0x08, 0x33, 0x3c, 0x52, 0xfb, 0xac,
	0xac, 0xa4, 0xb4, 0x6c, 0x63, 0x4b, 0x3d, 0x8a, 0x8f, 0xf4, 0x9a, 0xd7, 0x82, 0xc6, 0x46, 0xd0,
	0xf8, 0xb1, 0xb3, 0xb3, 0xda, 0xdb, 0xbe, 0x8d, 0x5f, 0x46, 0x87, 0x0d, 0x4a, 0x17, 0xc8, 0xbc,
	0x5d, 0x01, 0x3e, 0xa5, 0x22, 0x69, 0x6a, 0x63, 0x4b, 0x3d, 0x86, 0x71, 0x77, 0xb3, 0xd9, 0x5d,
	0xbf, 0x7a, 0xff, 0x97, 0x3f, 0x1e, 0x7c, 0xbf, 0xd9, 0x69, 0xb5, 0x82, 0x46, 0x13, 0xf3, 0x05,
	0xc6, 0xe5, 0x93, 0xc7, 0xc2, 0x6b, 0xd4, 0x1d, 0x9f, 0x29, 0xe9, 0xbd, 0x12, 0x02, 0xdc, 0xd9,
	0x59, 0x0d, 0x7e, 0xbb, 0x1e, 0xac, 0x6f, 0xe0, 0x33, 0x48, 0x1d, 0xc6, 0xe2, 0x97, 0x55, 0x91,
	0xf7, 0xaa, 0x09, 0x52, 0xef, 0xaf, 0xeb, 0xdd, 0xf5, 0x5f, 0x83, 0x5b, 0xd7, 0xba, 0xdf, 0xac,
	0x3d, 0xac, 0xda, 0x25, 0x66, 0x51, 0xa6, 0x8c, 0xed, 0xaf, 0xc6, 0x59, 0x7f, 0x7e, 0x15, 0xfc,
	0xfc, 0x2d, 0x9e, 0x45, 0xb9, 0x01, 0xd6, 0xbb, 0x8e, 0xe7, 0xf8, 0x65, 0x65, 0x7c, 0x3f, 0x27,
	0xf8, 0x7d, 0xf3, 0x7e, 0xeb, 0xbb, 0xee, 0xcd, 0x9f, 0xf0, 0x39, 0xa4, 0x19, 0x94, 0x7e, 0xe0,
	0xb8, 0x0e, 0x9b, 0x23, 0x9e, 0xe0, 0xf5, 0xcf, 0x2e, 0xa3, 0x3d, 0xd7, 0xd8, 0x52, 0x73, 0x38,
	0xfb, 0xe0, 0x87, 0xb5, 0xe0, 0xd6, 0x8d, 0xee, 0xcd, 0x66, 0xa7, 0xb5, 0xdd, 0xd9, 0x59, 0xed,
	0xb6, 0x9a, 0xbd, 0xed, 0xdb, 0xef, 0x2c, 0xdc, 0xfb, 0x57, 0x4f, 0x6d, 0xb4, 0x75, 0xe9, 0x4e,
	0x5b, 0x97, 0xee, 0xb6, 0x75, 0xe9, 0x9f, 0xb6, 0x2e, 0xf5, 0xda, 0x7a, 0xea, 0xbf, 0xb6, 0x2e,
	0xad, 0xed, 0xea, 0xa9, 0x3b, 0xbb, 0xba, 0x74, 0x77, 0x57, 0x4f, 0xdd, 0xdb, 0xd5, 0x53, 0x9f,
	0x4e, 0x97, 0x88, 0xe3, 0xbd, 0xc2, 0xef, 0x3e, 0xd0, 0x42, 0x89, 0xb8, 0x2e, 0xf1, 0x0a, 0xfb,
	0xfe, 0x4a, 0x5c, 0xc9, 0x84, 0x9f, 0xaf, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x65, 0x7b, 0x94,
	0xfa, 0x62, 0x08, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionDispatchRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionDispatchResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionGetDoneRewardRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionGetDoneRewardResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionDoneImmediatelyRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionDoneImmediatelyResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionRefreshRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExpeditionRefreshResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition_ExecutionRecoverCountUpdatePush.Get().(proto.Message)
	})
}

var poolExpedition = &sync.Pool{New: func() interface{} { return &Expedition{} }}

func (m *Expedition) ReleasePool() { m.Reset(); poolExpedition.Put(m); m = nil }

var poolExpedition_ExpeditionInfoRequest = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionInfoRequest{} }}

func (m *Expedition_ExpeditionInfoRequest) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionInfoRequest.Put(m)
	m = nil
}

var poolExpedition_ExpeditionInfoResponse = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionInfoResponse{} }}

func (m *Expedition_ExpeditionInfoResponse) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionInfoResponse.Put(m)
	m = nil
}

var poolExpedition_ExpeditionDispatchRequest = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionDispatchRequest{} }}

func (m *Expedition_ExpeditionDispatchRequest) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionDispatchRequest.Put(m)
	m = nil
}

var poolExpedition_ExpeditionDispatchResponse = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionDispatchResponse{} }}

func (m *Expedition_ExpeditionDispatchResponse) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionDispatchResponse.Put(m)
	m = nil
}

var poolExpedition_ExpeditionGetDoneRewardRequest = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionGetDoneRewardRequest{} }}

func (m *Expedition_ExpeditionGetDoneRewardRequest) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionGetDoneRewardRequest.Put(m)
	m = nil
}

var poolExpedition_ExpeditionGetDoneRewardResponse = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionGetDoneRewardResponse{} }}

func (m *Expedition_ExpeditionGetDoneRewardResponse) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionGetDoneRewardResponse.Put(m)
	m = nil
}

var poolExpedition_ExpeditionDoneImmediatelyRequest = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionDoneImmediatelyRequest{} }}

func (m *Expedition_ExpeditionDoneImmediatelyRequest) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionDoneImmediatelyRequest.Put(m)
	m = nil
}

var poolExpedition_ExpeditionDoneImmediatelyResponse = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionDoneImmediatelyResponse{} }}

func (m *Expedition_ExpeditionDoneImmediatelyResponse) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionDoneImmediatelyResponse.Put(m)
	m = nil
}

var poolExpedition_ExpeditionRefreshRequest = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionRefreshRequest{} }}

func (m *Expedition_ExpeditionRefreshRequest) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionRefreshRequest.Put(m)
	m = nil
}

var poolExpedition_ExpeditionRefreshResponse = &sync.Pool{New: func() interface{} { return &Expedition_ExpeditionRefreshResponse{} }}

func (m *Expedition_ExpeditionRefreshResponse) ReleasePool() {
	m.Reset()
	poolExpedition_ExpeditionRefreshResponse.Put(m)
	m = nil
}

var poolExpedition_ExecutionRecoverCountUpdatePush = &sync.Pool{New: func() interface{} { return &Expedition_ExecutionRecoverCountUpdatePush{} }}

func (m *Expedition_ExecutionRecoverCountUpdatePush) ReleasePool() {
	m.Reset()
	poolExpedition_ExecutionRecoverCountUpdatePush.Put(m)
	m = nil
}
func (x ExpeditionErrorCode) String() string {
	s, ok := ExpeditionErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Expedition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition)
	if !ok {
		that2, ok := that.(Expedition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Expedition_ExpeditionInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionInfoRequest)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Expedition_ExpeditionInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionInfoResponse)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MustCount != that1.MustCount {
		return false
	}
	if this.ExecutionRecoverCount != that1.ExecutionRecoverCount {
		return false
	}
	if this.NextRecoverTime != that1.NextRecoverTime {
		return false
	}
	if len(this.Task) != len(that1.Task) {
		return false
	}
	for i := range this.Task {
		if !this.Task[i].Equal(that1.Task[i]) {
			return false
		}
	}
	if this.ExtraSlot != that1.ExtraSlot {
		return false
	}
	if this.FreeRefreshCount != that1.FreeRefreshCount {
		return false
	}
	if this.MaxExecution != that1.MaxExecution {
		return false
	}
	return true
}
func (this *Expedition_ExpeditionDispatchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionDispatchRequest)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionDispatchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *Expedition_ExpeditionDispatchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionDispatchResponse)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionDispatchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *Expedition_ExpeditionGetDoneRewardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionGetDoneRewardRequest)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionGetDoneRewardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *Expedition_ExpeditionGetDoneRewardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionGetDoneRewardResponse)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionGetDoneRewardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Task) != len(that1.Task) {
		return false
	}
	for i := range this.Task {
		if !this.Task[i].Equal(that1.Task[i]) {
			return false
		}
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	return true
}
func (this *Expedition_ExpeditionDoneImmediatelyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionDoneImmediatelyRequest)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionDoneImmediatelyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *Expedition_ExpeditionDoneImmediatelyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionDoneImmediatelyResponse)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionDoneImmediatelyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *Expedition_ExpeditionRefreshRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionRefreshRequest)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionRefreshRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Expedition_ExpeditionRefreshResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExpeditionRefreshResponse)
	if !ok {
		that2, ok := that.(Expedition_ExpeditionRefreshResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MustCount != that1.MustCount {
		return false
	}
	if len(this.Task) != len(that1.Task) {
		return false
	}
	for i := range this.Task {
		if !this.Task[i].Equal(that1.Task[i]) {
			return false
		}
	}
	if this.FreeRefreshCount != that1.FreeRefreshCount {
		return false
	}
	return true
}
func (this *Expedition_ExecutionRecoverCountUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition_ExecutionRecoverCountUpdatePush)
	if !ok {
		that2, ok := that.(Expedition_ExecutionRecoverCountUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExecutionRecoverCount != that1.ExecutionRecoverCount {
		return false
	}
	if this.MaxExecution != that1.MaxExecution {
		return false
	}
	return true
}
func (m *Expedition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxExecution != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.MaxExecution))
		i--
		dAtA[i] = 0x38
	}
	if m.FreeRefreshCount != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.FreeRefreshCount))
		i--
		dAtA[i] = 0x30
	}
	if m.ExtraSlot != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.ExtraSlot))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Task) > 0 {
		for k := range m.Task {
			v := m.Task[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintExpedition(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintExpedition(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintExpedition(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NextRecoverTime != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.NextRecoverTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ExecutionRecoverCount != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.ExecutionRecoverCount))
		i--
		dAtA[i] = 0x10
	}
	if m.MustCount != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.MustCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionDispatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionDispatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionDispatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintExpedition(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionDispatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionDispatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionDispatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExpedition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionGetDoneRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionGetDoneRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionGetDoneRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintExpedition(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionGetDoneRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionGetDoneRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionGetDoneRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for k := range m.Reward {
			v := m.Reward[k]
			baseI := i
			i = encodeVarintExpedition(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintExpedition(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintExpedition(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Task) > 0 {
		for k := range m.Task {
			v := m.Task[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintExpedition(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintExpedition(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintExpedition(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionDoneImmediatelyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionDoneImmediatelyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionDoneImmediatelyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintExpedition(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionDoneImmediatelyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionDoneImmediatelyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionDoneImmediatelyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExpedition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionRefreshRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionRefreshRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionRefreshRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Expedition_ExpeditionRefreshResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExpeditionRefreshResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExpeditionRefreshResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FreeRefreshCount != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.FreeRefreshCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Task) > 0 {
		for k := range m.Task {
			v := m.Task[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintExpedition(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintExpedition(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintExpedition(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MustCount != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.MustCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Expedition_ExecutionRecoverCountUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition_ExecutionRecoverCountUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition_ExecutionRecoverCountUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxExecution != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.MaxExecution))
		i--
		dAtA[i] = 0x10
	}
	if m.ExecutionRecoverCount != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.ExecutionRecoverCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExpedition(dAtA []byte, offset int, v uint64) int {
	offset -= sovExpedition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Expedition) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Expedition_ExpeditionInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Expedition_ExpeditionInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MustCount != 0 {
		w.RawByte('"')
		w.RawString("must_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MustCount))
		needWriteComma = true
	}
	if m.ExecutionRecoverCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("execution_recover_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExecutionRecoverCount))
		needWriteComma = true
	}
	if m.NextRecoverTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_recover_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRecoverTime))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	if m.Task == nil {
		w.RawString("null")
	} else if len(m.Task) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlTask := len(m.Task)
		for k, v := range m.Task {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlTask--
			if mlTask != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.ExtraSlot != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("extra_slot")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExtraSlot))
		needWriteComma = true
	}
	if m.FreeRefreshCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("free_refresh_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeRefreshCount))
		needWriteComma = true
	}
	if m.MaxExecution != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_execution")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxExecution))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition_ExpeditionDispatchRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != "" {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TaskId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition_ExpeditionDispatchResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition_ExpeditionGetDoneRewardRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != "" {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TaskId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition_ExpeditionGetDoneRewardResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	if m.Task == nil {
		w.RawString("null")
	} else if len(m.Task) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlTask := len(m.Task)
		for k, v := range m.Task {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlTask--
			if mlTask != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlReward := len(m.Reward)
		for k, v := range m.Reward {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlReward--
			if mlReward != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition_ExpeditionDoneImmediatelyRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != "" {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TaskId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition_ExpeditionDoneImmediatelyResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition_ExpeditionRefreshRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Expedition_ExpeditionRefreshResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MustCount != 0 {
		w.RawByte('"')
		w.RawString("must_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MustCount))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	if m.Task == nil {
		w.RawString("null")
	} else if len(m.Task) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlTask := len(m.Task)
		for k, v := range m.Task {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlTask--
			if mlTask != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.FreeRefreshCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("free_refresh_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeRefreshCount))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition_ExecutionRecoverCountUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ExecutionRecoverCount != 0 {
		w.RawByte('"')
		w.RawString("execution_recover_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExecutionRecoverCount))
		needWriteComma = true
	}
	if m.MaxExecution != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_execution")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxExecution))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionInfoRequest) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionInfoResponse) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionDispatchRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionDispatchRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionDispatchRequest) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionDispatchResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionDispatchResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionDispatchResponse) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionGetDoneRewardRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionGetDoneRewardRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionGetDoneRewardRequest) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionGetDoneRewardResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionGetDoneRewardResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionGetDoneRewardResponse) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionDoneImmediatelyRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionDoneImmediatelyRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionDoneImmediatelyRequest) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionDoneImmediatelyResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionDoneImmediatelyResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionDoneImmediatelyResponse) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionRefreshRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionRefreshRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionRefreshRequest) GoString() string {
	return m.String()
}

func (m *Expedition_ExpeditionRefreshResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExpeditionRefreshResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExpeditionRefreshResponse) GoString() string {
	return m.String()
}

func (m *Expedition_ExecutionRecoverCountUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition_ExecutionRecoverCountUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition_ExecutionRecoverCountUpdatePush) GoString() string {
	return m.String()
}

func (m *Expedition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Expedition_ExpeditionInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Expedition_ExpeditionInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MustCount != 0 {
		n += 1 + sovExpedition(uint64(m.MustCount))
	}
	if m.ExecutionRecoverCount != 0 {
		n += 1 + sovExpedition(uint64(m.ExecutionRecoverCount))
	}
	if m.NextRecoverTime != 0 {
		n += 1 + sovExpedition(uint64(m.NextRecoverTime))
	}
	if len(m.Task) > 0 {
		for k, v := range m.Task {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovExpedition(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovExpedition(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovExpedition(uint64(mapEntrySize))
		}
	}
	if m.ExtraSlot != 0 {
		n += 1 + sovExpedition(uint64(m.ExtraSlot))
	}
	if m.FreeRefreshCount != 0 {
		n += 1 + sovExpedition(uint64(m.FreeRefreshCount))
	}
	if m.MaxExecution != 0 {
		n += 1 + sovExpedition(uint64(m.MaxExecution))
	}
	return n
}

func (m *Expedition_ExpeditionDispatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovExpedition(uint64(l))
	}
	return n
}

func (m *Expedition_ExpeditionDispatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovExpedition(uint64(l))
	}
	return n
}

func (m *Expedition_ExpeditionGetDoneRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovExpedition(uint64(l))
	}
	return n
}

func (m *Expedition_ExpeditionGetDoneRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Task) > 0 {
		for k, v := range m.Task {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovExpedition(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovExpedition(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovExpedition(uint64(mapEntrySize))
		}
	}
	if len(m.Reward) > 0 {
		for k, v := range m.Reward {
			_ = k
			_ = v
			mapEntrySize := 1 + sovExpedition(uint64(k)) + 1 + sovExpedition(uint64(v))
			n += mapEntrySize + 1 + sovExpedition(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Expedition_ExpeditionDoneImmediatelyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovExpedition(uint64(l))
	}
	return n
}

func (m *Expedition_ExpeditionDoneImmediatelyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovExpedition(uint64(l))
	}
	return n
}

func (m *Expedition_ExpeditionRefreshRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Expedition_ExpeditionRefreshResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MustCount != 0 {
		n += 1 + sovExpedition(uint64(m.MustCount))
	}
	if len(m.Task) > 0 {
		for k, v := range m.Task {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovExpedition(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovExpedition(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovExpedition(uint64(mapEntrySize))
		}
	}
	if m.FreeRefreshCount != 0 {
		n += 1 + sovExpedition(uint64(m.FreeRefreshCount))
	}
	return n
}

func (m *Expedition_ExecutionRecoverCountUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionRecoverCount != 0 {
		n += 1 + sovExpedition(uint64(m.ExecutionRecoverCount))
	}
	if m.MaxExecution != 0 {
		n += 1 + sovExpedition(uint64(m.MaxExecution))
	}
	return n
}

func sovExpedition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExpedition(x uint64) (n int) {
	return sovExpedition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Expedition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expedition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expedition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustCount", wireType)
			}
			m.MustCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MustCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionRecoverCount", wireType)
			}
			m.ExecutionRecoverCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionRecoverCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRecoverTime", wireType)
			}
			m.NextRecoverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRecoverTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = make(map[string]*models.ExpeditionTask)
			}
			var mapkey string
			var mapvalue *models.ExpeditionTask
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExpedition
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExpedition
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthExpedition
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthExpedition
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthExpedition
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.ExpeditionTask{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExpedition(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExpedition
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Task[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraSlot", wireType)
			}
			m.ExtraSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraSlot |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeRefreshCount", wireType)
			}
			m.FreeRefreshCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeRefreshCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxExecution", wireType)
			}
			m.MaxExecution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxExecution |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionDispatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionDispatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionDispatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionDispatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionDispatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionDispatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.ExpeditionTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionGetDoneRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionGetDoneRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionGetDoneRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionGetDoneRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionGetDoneRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionGetDoneRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = make(map[string]*models.ExpeditionTask)
			}
			var mapkey string
			var mapvalue *models.ExpeditionTask
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExpedition
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExpedition
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthExpedition
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthExpedition
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthExpedition
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.ExpeditionTask{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExpedition(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExpedition
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Task[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExpedition
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExpedition(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExpedition
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reward[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionDoneImmediatelyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionDoneImmediatelyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionDoneImmediatelyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionDoneImmediatelyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionDoneImmediatelyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionDoneImmediatelyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.ExpeditionTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionRefreshRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionRefreshRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionRefreshRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExpeditionRefreshResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionRefreshResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionRefreshResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustCount", wireType)
			}
			m.MustCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MustCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = make(map[string]*models.ExpeditionTask)
			}
			var mapkey string
			var mapvalue *models.ExpeditionTask
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExpedition
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExpedition
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthExpedition
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthExpedition
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthExpedition
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.ExpeditionTask{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExpedition(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExpedition
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Task[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeRefreshCount", wireType)
			}
			m.FreeRefreshCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeRefreshCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expedition_ExecutionRecoverCountUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionRecoverCountUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionRecoverCountUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionRecoverCount", wireType)
			}
			m.ExecutionRecoverCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionRecoverCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxExecution", wireType)
			}
			m.MaxExecution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxExecution |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpedition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpedition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExpedition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExpedition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExpedition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpedition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExpedition = fmt.Errorf("proto: unexpected end of group")
)
