// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/enchant.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EnchantErrorCode int32

const (
	EnchantErrorCode_ErrEnchantMaterialNotExist        EnchantErrorCode = 0
	EnchantErrorCode_ErrEnchantMaterialNotEnough       EnchantErrorCode = 1
	EnchantErrorCode_ErrEnchantLastUnfinished          EnchantErrorCode = 2
	EnchantErrorCode_ErrEnchantNotExist                EnchantErrorCode = 3
	EnchantErrorCode_ErrEnchantMaterialAndSlotNotMatch EnchantErrorCode = 4
	EnchantErrorCode_ErrEnchantMaterialAndHeroNotMatch EnchantErrorCode = 5
)

var EnchantErrorCode_name = map[int32]string{
	0: "ErrEnchantMaterialNotExist",
	1: "ErrEnchantMaterialNotEnough",
	2: "ErrEnchantLastUnfinished",
	3: "ErrEnchantNotExist",
	4: "ErrEnchantMaterialAndSlotNotMatch",
	5: "ErrEnchantMaterialAndHeroNotMatch",
}

var EnchantErrorCode_value = map[string]int32{
	"ErrEnchantMaterialNotExist":        0,
	"ErrEnchantMaterialNotEnough":       1,
	"ErrEnchantLastUnfinished":          2,
	"ErrEnchantNotExist":                3,
	"ErrEnchantMaterialAndSlotNotMatch": 4,
	"ErrEnchantMaterialAndHeroNotMatch": 5,
}

func (EnchantErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0}
}

type Enchant struct {
}

func (m *Enchant) Reset()      { *m = Enchant{} }
func (*Enchant) ProtoMessage() {}
func (*Enchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0}
}
func (m *Enchant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant.Merge(m, src)
}
func (m *Enchant) XXX_Size() int {
	return m.Size()
}
func (m *Enchant) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant proto.InternalMessageInfo

func (*Enchant) XXX_MessageName() string {
	return "service.Enchant"
}

// 获取玩家附魔信息
type Enchant_EnchantInfoRequest struct {
}

func (m *Enchant_EnchantInfoRequest) Reset()      { *m = Enchant_EnchantInfoRequest{} }
func (*Enchant_EnchantInfoRequest) ProtoMessage() {}
func (*Enchant_EnchantInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0, 0}
}
func (m *Enchant_EnchantInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant_EnchantInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant_EnchantInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant_EnchantInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant_EnchantInfoRequest.Merge(m, src)
}
func (m *Enchant_EnchantInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *Enchant_EnchantInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant_EnchantInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant_EnchantInfoRequest proto.InternalMessageInfo

func (*Enchant_EnchantInfoRequest) XXX_MessageName() string {
	return "service.Enchant.EnchantInfoRequest"
}

type Enchant_EnchantInfoResponse struct {
	// 当返回的hero_id>0时表示上一次附魔未完成，必须先完成上一次附魔才能进行下一次附魔
	HeroId int64         `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	SlotId int64         `protobuf:"varint,2,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	Info   *models.Affix `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Enchant_EnchantInfoResponse) Reset()      { *m = Enchant_EnchantInfoResponse{} }
func (*Enchant_EnchantInfoResponse) ProtoMessage() {}
func (*Enchant_EnchantInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0, 1}
}
func (m *Enchant_EnchantInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant_EnchantInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant_EnchantInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant_EnchantInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant_EnchantInfoResponse.Merge(m, src)
}
func (m *Enchant_EnchantInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *Enchant_EnchantInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant_EnchantInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant_EnchantInfoResponse proto.InternalMessageInfo

func (m *Enchant_EnchantInfoResponse) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *Enchant_EnchantInfoResponse) GetSlotId() int64 {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *Enchant_EnchantInfoResponse) GetInfo() *models.Affix {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*Enchant_EnchantInfoResponse) XXX_MessageName() string {
	return "service.Enchant.EnchantInfoResponse"
}

// 附魔（生成词条）
type Enchant_EnchantGenRequest struct {
	HeroId     int64 `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	SlotId     int64 `protobuf:"varint,2,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	MaterialId int64 `protobuf:"varint,3,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`
}

func (m *Enchant_EnchantGenRequest) Reset()      { *m = Enchant_EnchantGenRequest{} }
func (*Enchant_EnchantGenRequest) ProtoMessage() {}
func (*Enchant_EnchantGenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0, 2}
}
func (m *Enchant_EnchantGenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant_EnchantGenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant_EnchantGenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant_EnchantGenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant_EnchantGenRequest.Merge(m, src)
}
func (m *Enchant_EnchantGenRequest) XXX_Size() int {
	return m.Size()
}
func (m *Enchant_EnchantGenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant_EnchantGenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant_EnchantGenRequest proto.InternalMessageInfo

func (m *Enchant_EnchantGenRequest) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *Enchant_EnchantGenRequest) GetSlotId() int64 {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *Enchant_EnchantGenRequest) GetMaterialId() int64 {
	if m != nil {
		return m.MaterialId
	}
	return 0
}

func (*Enchant_EnchantGenRequest) XXX_MessageName() string {
	return "service.Enchant.EnchantGenRequest"
}

type Enchant_EnchantGenResponse struct {
	Info *models.Affix `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Enchant_EnchantGenResponse) Reset()      { *m = Enchant_EnchantGenResponse{} }
func (*Enchant_EnchantGenResponse) ProtoMessage() {}
func (*Enchant_EnchantGenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0, 3}
}
func (m *Enchant_EnchantGenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant_EnchantGenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant_EnchantGenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant_EnchantGenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant_EnchantGenResponse.Merge(m, src)
}
func (m *Enchant_EnchantGenResponse) XXX_Size() int {
	return m.Size()
}
func (m *Enchant_EnchantGenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant_EnchantGenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant_EnchantGenResponse proto.InternalMessageInfo

func (m *Enchant_EnchantGenResponse) GetInfo() *models.Affix {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*Enchant_EnchantGenResponse) XXX_MessageName() string {
	return "service.Enchant.EnchantGenResponse"
}

// 替换现有位置的附魔
type Enchant_EnchantReplaceRequest struct {
}

func (m *Enchant_EnchantReplaceRequest) Reset()      { *m = Enchant_EnchantReplaceRequest{} }
func (*Enchant_EnchantReplaceRequest) ProtoMessage() {}
func (*Enchant_EnchantReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0, 4}
}
func (m *Enchant_EnchantReplaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant_EnchantReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant_EnchantReplaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant_EnchantReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant_EnchantReplaceRequest.Merge(m, src)
}
func (m *Enchant_EnchantReplaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *Enchant_EnchantReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant_EnchantReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant_EnchantReplaceRequest proto.InternalMessageInfo

func (*Enchant_EnchantReplaceRequest) XXX_MessageName() string {
	return "service.Enchant.EnchantReplaceRequest"
}

type Enchant_EnchantReplaceResponse struct {
	Hero *models.Hero `protobuf:"bytes,1,opt,name=hero,proto3" json:"hero,omitempty"`
}

func (m *Enchant_EnchantReplaceResponse) Reset()      { *m = Enchant_EnchantReplaceResponse{} }
func (*Enchant_EnchantReplaceResponse) ProtoMessage() {}
func (*Enchant_EnchantReplaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0, 5}
}
func (m *Enchant_EnchantReplaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant_EnchantReplaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant_EnchantReplaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant_EnchantReplaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant_EnchantReplaceResponse.Merge(m, src)
}
func (m *Enchant_EnchantReplaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *Enchant_EnchantReplaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant_EnchantReplaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant_EnchantReplaceResponse proto.InternalMessageInfo

func (m *Enchant_EnchantReplaceResponse) GetHero() *models.Hero {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (*Enchant_EnchantReplaceResponse) XXX_MessageName() string {
	return "service.Enchant.EnchantReplaceResponse"
}

// 丢弃附魔
type Enchant_EnchantDropRequest struct {
}

func (m *Enchant_EnchantDropRequest) Reset()      { *m = Enchant_EnchantDropRequest{} }
func (*Enchant_EnchantDropRequest) ProtoMessage() {}
func (*Enchant_EnchantDropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0, 6}
}
func (m *Enchant_EnchantDropRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant_EnchantDropRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant_EnchantDropRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant_EnchantDropRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant_EnchantDropRequest.Merge(m, src)
}
func (m *Enchant_EnchantDropRequest) XXX_Size() int {
	return m.Size()
}
func (m *Enchant_EnchantDropRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant_EnchantDropRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant_EnchantDropRequest proto.InternalMessageInfo

func (*Enchant_EnchantDropRequest) XXX_MessageName() string {
	return "service.Enchant.EnchantDropRequest"
}

type Enchant_EnchantDropResponse struct {
}

func (m *Enchant_EnchantDropResponse) Reset()      { *m = Enchant_EnchantDropResponse{} }
func (*Enchant_EnchantDropResponse) ProtoMessage() {}
func (*Enchant_EnchantDropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_39660f0bf3935eb2, []int{0, 7}
}
func (m *Enchant_EnchantDropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant_EnchantDropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant_EnchantDropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant_EnchantDropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant_EnchantDropResponse.Merge(m, src)
}
func (m *Enchant_EnchantDropResponse) XXX_Size() int {
	return m.Size()
}
func (m *Enchant_EnchantDropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant_EnchantDropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant_EnchantDropResponse proto.InternalMessageInfo

func (*Enchant_EnchantDropResponse) XXX_MessageName() string {
	return "service.Enchant.EnchantDropResponse"
}
func init() {
	proto.RegisterEnum("service.EnchantErrorCode", EnchantErrorCode_name, EnchantErrorCode_value)
	proto.RegisterType((*Enchant)(nil), "service.Enchant")
	proto.RegisterType((*Enchant_EnchantInfoRequest)(nil), "service.Enchant.EnchantInfoRequest")
	proto.RegisterType((*Enchant_EnchantInfoResponse)(nil), "service.Enchant.EnchantInfoResponse")
	proto.RegisterType((*Enchant_EnchantGenRequest)(nil), "service.Enchant.EnchantGenRequest")
	proto.RegisterType((*Enchant_EnchantGenResponse)(nil), "service.Enchant.EnchantGenResponse")
	proto.RegisterType((*Enchant_EnchantReplaceRequest)(nil), "service.Enchant.EnchantReplaceRequest")
	proto.RegisterType((*Enchant_EnchantReplaceResponse)(nil), "service.Enchant.EnchantReplaceResponse")
	proto.RegisterType((*Enchant_EnchantDropRequest)(nil), "service.Enchant.EnchantDropRequest")
	proto.RegisterType((*Enchant_EnchantDropResponse)(nil), "service.Enchant.EnchantDropResponse")
}

func init() { proto.RegisterFile("proto/service/enchant.proto", fileDescriptor_39660f0bf3935eb2) }

var fileDescriptor_39660f0bf3935eb2 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6b, 0x13, 0x41,
	0x1c, 0xc5, 0x77, 0xbb, 0xb5, 0x85, 0xa9, 0x62, 0x3a, 0x36, 0x66, 0x99, 0xca, 0x98, 0x8a, 0x87,
	0x22, 0xb4, 0x01, 0x3d, 0x88, 0x3f, 0x2e, 0x55, 0x83, 0x06, 0x6d, 0x0f, 0x11, 0x2f, 0x5e, 0x64,
	0xbb, 0x3b, 0x6b, 0x56, 0x92, 0x99, 0x74, 0x76, 0x23, 0x3d, 0x7a, 0xa8, 0x20, 0x6b, 0x02, 0x51,
	0x44, 0x2c, 0xd6, 0x83, 0x27, 0x8b, 0xd8, 0x82, 0x48, 0x24, 0x1e, 0x7a, 0xef, 0xb1, 0xc7, 0x1e,
	0x75, 0xf3, 0x83, 0xe4, 0xe6, 0x9f, 0x20, 0xbb, 0x3b, 0x9b, 0x34, 0xd1, 0x5c, 0xbc, 0xed, 0xbc,
	0x37, 0xef, 0xf3, 0x7d, 0x33, 0xcb, 0x80, 0xd9, 0x22, 0x67, 0x0e, 0x4b, 0xd9, 0x84, 0x3f, 0xb5,
	0x74, 0x92, 0x22, 0x54, 0xcf, 0x69, 0xd4, 0x59, 0x0c, 0x54, 0x38, 0x29, 0x64, 0x94, 0x08, 0x77,
	0x15, 0x98, 0x41, 0xf2, 0x76, 0x6a, 0x55, 0xb3, 0x49, 0xb8, 0x03, 0x9d, 0x19, 0x30, 0xc8, 0x5a,
	0xc9, 0x2a, 0x16, 0x48, 0x94, 0x1f, 0x8a, 0xe5, 0x08, 0x67, 0xa1, 0x71, 0x6e, 0x57, 0x01, 0x93,
	0xe9, 0x70, 0x14, 0x9a, 0x01, 0x50, 0x7c, 0x66, 0xa8, 0xc9, 0xb2, 0x64, 0xad, 0x44, 0x6c, 0x07,
	0x3d, 0x01, 0xa7, 0x06, 0x54, 0xbb, 0xc8, 0xa8, 0x4d, 0x60, 0x02, 0x4c, 0xfa, 0x98, 0x47, 0x96,
	0xa1, 0xca, 0x49, 0x79, 0x5e, 0xc9, 0x4e, 0xf8, 0xcb, 0x8c, 0xe1, 0x1b, 0x76, 0x9e, 0x39, 0xbe,
	0x31, 0x16, 0x1a, 0xfe, 0x32, 0x63, 0xc0, 0x39, 0x30, 0x6e, 0x51, 0x93, 0xa9, 0x4a, 0x52, 0x9e,
	0x9f, 0xba, 0x78, 0x62, 0x31, 0x2c, 0xb3, 0xb8, 0x64, 0x9a, 0xd6, 0x7a, 0x36, 0xb0, 0x90, 0x09,
	0xa6, 0xc5, 0xac, 0xdb, 0x84, 0x8a, 0x02, 0xff, 0x31, 0xe9, 0x2c, 0x98, 0x2a, 0x68, 0x0e, 0xe1,
	0x96, 0x96, 0xf7, 0x4d, 0x25, 0x30, 0x41, 0x24, 0x65, 0x0c, 0x74, 0xb9, 0x77, 0xd2, 0x60, 0x8e,
	0x38, 0x52, 0x54, 0x50, 0x1e, 0x5d, 0x30, 0x01, 0xe2, 0x22, 0x98, 0x25, 0xc5, 0xbc, 0xa6, 0x93,
	0xe8, 0x96, 0xae, 0x82, 0xd3, 0xc3, 0x86, 0xa0, 0x26, 0xc1, 0xb8, 0xdf, 0x57, 0x50, 0x8f, 0x47,
	0xd4, 0x3b, 0x84, 0xb3, 0x6c, 0xe0, 0x1c, 0xb9, 0xf7, 0x5b, 0x9c, 0x15, 0x23, 0x62, 0xbc, 0x77,
	0xef, 0xa1, 0x1a, 0xe2, 0x2e, 0xbc, 0x52, 0x40, 0x4c, 0xe8, 0x69, 0xce, 0x19, 0xbf, 0xc9, 0x0c,
	0x02, 0xaf, 0x01, 0x94, 0xe6, 0x5c, 0xc8, 0xcb, 0xe2, 0x9c, 0x2b, 0xcc, 0x49, 0xaf, 0x5b, 0xb6,
	0x13, 0x93, 0xd0, 0xac, 0x5b, 0x53, 0x13, 0x30, 0xde, 0xdd, 0xdc, 0xe8, 0xee, 0xbc, 0x69, 0x7f,
	0xa8, 0xb6, 0xdf, 0x6e, 0x36, 0xeb, 0x95, 0xd6, 0xce, 0xbb, 0xd6, 0xd6, 0x36, 0xbc, 0x02, 0x66,
	0xff, 0x1d, 0xa6, 0xac, 0xf4, 0x38, 0x17, 0x93, 0x91, 0xea, 0xd6, 0xd4, 0x19, 0x08, 0x87, 0xd2,
	0x9d, 0xef, 0xdf, 0xe0, 0x75, 0xa0, 0xf6, 0xa3, 0xf7, 0x34, 0xdb, 0x79, 0x40, 0x4d, 0x8b, 0x5a,
	0x76, 0x8e, 0x18, 0xb1, 0x31, 0x84, 0xdd, 0x9a, 0x8a, 0xa0, 0xda, 0xac, 0xbb, 0xcd, 0xfa, 0xb3,
	0xf6, 0x97, 0x8f, 0x02, 0xb0, 0xf5, 0xb9, 0xb5, 0x5b, 0x6e, 0xbf, 0xa8, 0xc2, 0x05, 0x00, 0xfb,
	0xe9, 0x5e, 0x5b, 0x05, 0xc5, 0xdd, 0x9a, 0x3a, 0x0d, 0x4f, 0x86, 0xdb, 0xfb, 0x3d, 0xef, 0x82,
	0xb9, 0xbf, 0x7b, 0x2e, 0x51, 0xe3, 0x7e, 0x9e, 0xf9, 0xe9, 0x65, 0xcd, 0xd1, 0x73, 0xb1, 0x71,
	0x74, 0xde, 0xad, 0xa9, 0x49, 0x88, 0x8f, 0xb6, 0x6d, 0xbd, 0x2e, 0xb7, 0x3f, 0xed, 0x35, 0xf7,
	0x2a, 0x3e, 0xac, 0xfc, 0xa3, 0xfb, 0xbc, 0x32, 0x12, 0xe6, 0xff, 0x96, 0x1e, 0xec, 0xd8, 0x08,
	0x58, 0xe7, 0xe5, 0xd7, 0xee, 0xfb, 0x8d, 0x1e, 0xec, 0xc6, 0xca, 0xe1, 0x2f, 0x2c, 0x6d, 0x7b,
	0x58, 0xde, 0xf7, 0xb0, 0x7c, 0xe0, 0x61, 0xf9, 0xa7, 0x87, 0xe5, 0x8e, 0x87, 0xa5, 0xdf, 0x1e,
	0x96, 0xab, 0x0d, 0x2c, 0xed, 0x37, 0xb0, 0x7c, 0xd0, 0xc0, 0xd2, 0x61, 0x03, 0x4b, 0x0f, 0x93,
	0x3a, 0xb3, 0xe8, 0x82, 0xff, 0xa0, 0x09, 0x4f, 0xe9, 0xac, 0x50, 0x60, 0x34, 0x35, 0xf0, 0xf6,
	0x57, 0x27, 0x82, 0xe5, 0xa5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x80, 0xfc, 0x92, 0x13,
	0x04, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant_EnchantInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant_EnchantInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant_EnchantGenRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant_EnchantGenResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant_EnchantReplaceRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant_EnchantReplaceResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant_EnchantDropRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant_EnchantDropResponse.Get().(proto.Message)
	})
}

var poolEnchant = &sync.Pool{New: func() interface{} { return &Enchant{} }}

func (m *Enchant) ReleasePool() { m.Reset(); poolEnchant.Put(m); m = nil }

var poolEnchant_EnchantInfoRequest = &sync.Pool{New: func() interface{} { return &Enchant_EnchantInfoRequest{} }}

func (m *Enchant_EnchantInfoRequest) ReleasePool() {
	m.Reset()
	poolEnchant_EnchantInfoRequest.Put(m)
	m = nil
}

var poolEnchant_EnchantInfoResponse = &sync.Pool{New: func() interface{} { return &Enchant_EnchantInfoResponse{} }}

func (m *Enchant_EnchantInfoResponse) ReleasePool() {
	m.Reset()
	poolEnchant_EnchantInfoResponse.Put(m)
	m = nil
}

var poolEnchant_EnchantGenRequest = &sync.Pool{New: func() interface{} { return &Enchant_EnchantGenRequest{} }}

func (m *Enchant_EnchantGenRequest) ReleasePool() {
	m.Reset()
	poolEnchant_EnchantGenRequest.Put(m)
	m = nil
}

var poolEnchant_EnchantGenResponse = &sync.Pool{New: func() interface{} { return &Enchant_EnchantGenResponse{} }}

func (m *Enchant_EnchantGenResponse) ReleasePool() {
	m.Reset()
	poolEnchant_EnchantGenResponse.Put(m)
	m = nil
}

var poolEnchant_EnchantReplaceRequest = &sync.Pool{New: func() interface{} { return &Enchant_EnchantReplaceRequest{} }}

func (m *Enchant_EnchantReplaceRequest) ReleasePool() {
	m.Reset()
	poolEnchant_EnchantReplaceRequest.Put(m)
	m = nil
}

var poolEnchant_EnchantReplaceResponse = &sync.Pool{New: func() interface{} { return &Enchant_EnchantReplaceResponse{} }}

func (m *Enchant_EnchantReplaceResponse) ReleasePool() {
	m.Reset()
	poolEnchant_EnchantReplaceResponse.Put(m)
	m = nil
}

var poolEnchant_EnchantDropRequest = &sync.Pool{New: func() interface{} { return &Enchant_EnchantDropRequest{} }}

func (m *Enchant_EnchantDropRequest) ReleasePool() {
	m.Reset()
	poolEnchant_EnchantDropRequest.Put(m)
	m = nil
}

var poolEnchant_EnchantDropResponse = &sync.Pool{New: func() interface{} { return &Enchant_EnchantDropResponse{} }}

func (m *Enchant_EnchantDropResponse) ReleasePool() {
	m.Reset()
	poolEnchant_EnchantDropResponse.Put(m)
	m = nil
}
func (x EnchantErrorCode) String() string {
	s, ok := EnchantErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Enchant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant)
	if !ok {
		that2, ok := that.(Enchant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Enchant_EnchantInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant_EnchantInfoRequest)
	if !ok {
		that2, ok := that.(Enchant_EnchantInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Enchant_EnchantInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant_EnchantInfoResponse)
	if !ok {
		that2, ok := that.(Enchant_EnchantInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *Enchant_EnchantGenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant_EnchantGenRequest)
	if !ok {
		that2, ok := that.(Enchant_EnchantGenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	if this.MaterialId != that1.MaterialId {
		return false
	}
	return true
}
func (this *Enchant_EnchantGenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant_EnchantGenResponse)
	if !ok {
		that2, ok := that.(Enchant_EnchantGenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *Enchant_EnchantReplaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant_EnchantReplaceRequest)
	if !ok {
		that2, ok := that.(Enchant_EnchantReplaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Enchant_EnchantReplaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant_EnchantReplaceResponse)
	if !ok {
		that2, ok := that.(Enchant_EnchantReplaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hero.Equal(that1.Hero) {
		return false
	}
	return true
}
func (this *Enchant_EnchantDropRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant_EnchantDropRequest)
	if !ok {
		that2, ok := that.(Enchant_EnchantDropRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Enchant_EnchantDropResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant_EnchantDropResponse)
	if !ok {
		that2, ok := that.(Enchant_EnchantDropResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Enchant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Enchant_EnchantInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant_EnchantInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant_EnchantInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Enchant_EnchantInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant_EnchantInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant_EnchantInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEnchant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SlotId != 0 {
		i = encodeVarintEnchant(dAtA, i, uint64(m.SlotId))
		i--
		dAtA[i] = 0x10
	}
	if m.HeroId != 0 {
		i = encodeVarintEnchant(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Enchant_EnchantGenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant_EnchantGenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant_EnchantGenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaterialId != 0 {
		i = encodeVarintEnchant(dAtA, i, uint64(m.MaterialId))
		i--
		dAtA[i] = 0x18
	}
	if m.SlotId != 0 {
		i = encodeVarintEnchant(dAtA, i, uint64(m.SlotId))
		i--
		dAtA[i] = 0x10
	}
	if m.HeroId != 0 {
		i = encodeVarintEnchant(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Enchant_EnchantGenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant_EnchantGenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant_EnchantGenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEnchant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Enchant_EnchantReplaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant_EnchantReplaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant_EnchantReplaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Enchant_EnchantReplaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant_EnchantReplaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant_EnchantReplaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		{
			size, err := m.Hero.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEnchant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Enchant_EnchantDropRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant_EnchantDropRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant_EnchantDropRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Enchant_EnchantDropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant_EnchantDropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant_EnchantDropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintEnchant(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnchant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Enchant) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Enchant_EnchantInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Enchant_EnchantInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.HeroId != 0 {
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if m.SlotId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("slot_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SlotId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Enchant_EnchantGenRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.HeroId != 0 {
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if m.SlotId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("slot_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SlotId))
		needWriteComma = true
	}
	if m.MaterialId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("material_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaterialId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Enchant_EnchantGenResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Enchant_EnchantReplaceRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Enchant_EnchantReplaceResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("hero")
	w.RawByte('"')
	w.RawByte(':')
	m.Hero.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Enchant_EnchantDropRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Enchant_EnchantDropResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Enchant) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant) GoString() string {
	return m.String()
}

func (m *Enchant_EnchantInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant_EnchantInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant_EnchantInfoRequest) GoString() string {
	return m.String()
}

func (m *Enchant_EnchantInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant_EnchantInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant_EnchantInfoResponse) GoString() string {
	return m.String()
}

func (m *Enchant_EnchantGenRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant_EnchantGenRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant_EnchantGenRequest) GoString() string {
	return m.String()
}

func (m *Enchant_EnchantGenResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant_EnchantGenResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant_EnchantGenResponse) GoString() string {
	return m.String()
}

func (m *Enchant_EnchantReplaceRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant_EnchantReplaceRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant_EnchantReplaceRequest) GoString() string {
	return m.String()
}

func (m *Enchant_EnchantReplaceResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant_EnchantReplaceResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant_EnchantReplaceResponse) GoString() string {
	return m.String()
}

func (m *Enchant_EnchantDropRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant_EnchantDropRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant_EnchantDropRequest) GoString() string {
	return m.String()
}

func (m *Enchant_EnchantDropResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant_EnchantDropResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant_EnchantDropResponse) GoString() string {
	return m.String()
}

func (m *Enchant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Enchant_EnchantInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Enchant_EnchantInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovEnchant(uint64(m.HeroId))
	}
	if m.SlotId != 0 {
		n += 1 + sovEnchant(uint64(m.SlotId))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovEnchant(uint64(l))
	}
	return n
}

func (m *Enchant_EnchantGenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovEnchant(uint64(m.HeroId))
	}
	if m.SlotId != 0 {
		n += 1 + sovEnchant(uint64(m.SlotId))
	}
	if m.MaterialId != 0 {
		n += 1 + sovEnchant(uint64(m.MaterialId))
	}
	return n
}

func (m *Enchant_EnchantGenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovEnchant(uint64(l))
	}
	return n
}

func (m *Enchant_EnchantReplaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Enchant_EnchantReplaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovEnchant(uint64(l))
	}
	return n
}

func (m *Enchant_EnchantDropRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Enchant_EnchantDropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovEnchant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnchant(x uint64) (n int) {
	return sovEnchant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Enchant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Enchant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Enchant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enchant_EnchantInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnchantInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnchantInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enchant_EnchantInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnchantInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnchantInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnchant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.Affix{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enchant_EnchantGenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnchantGenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnchantGenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialId", wireType)
			}
			m.MaterialId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaterialId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enchant_EnchantGenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnchantGenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnchantGenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnchant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.Affix{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enchant_EnchantReplaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnchantReplaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnchantReplaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enchant_EnchantReplaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnchantReplaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnchantReplaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnchant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &models.Hero{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enchant_EnchantDropRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnchantDropRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnchantDropRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enchant_EnchantDropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnchantDropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnchantDropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnchant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnchant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnchant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnchant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnchant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnchant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnchant = fmt.Errorf("proto: unexpected end of group")
)
