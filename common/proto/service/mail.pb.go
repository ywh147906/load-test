// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/mail.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MailErrorCode int32

const (
	MailErrorCode_ErrMailNotFound  MailErrorCode = 0
	MailErrorCode_ErrReadMailFirst MailErrorCode = 1
)

var MailErrorCode_name = map[int32]string{
	0: "ErrMailNotFound",
	1: "ErrReadMailFirst",
}

var MailErrorCode_value = map[string]int32{
	"ErrMailNotFound":  0,
	"ErrReadMailFirst": 1,
}

func (MailErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0}
}

type Mail struct {
}

func (m *Mail) Reset()      { *m = Mail{} }
func (*Mail) ProtoMessage() {}
func (*Mail) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0}
}
func (m *Mail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail.Merge(m, src)
}
func (m *Mail) XXX_Size() int {
	return m.Size()
}
func (m *Mail) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail.DiscardUnknown(m)
}

var xxx_messageInfo_Mail proto.InternalMessageInfo

func (*Mail) XXX_MessageName() string {
	return "service.Mail"
}

// 邮件列表
type Mail_MailListRequest struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Mail_MailListRequest) Reset()      { *m = Mail_MailListRequest{} }
func (*Mail_MailListRequest) ProtoMessage() {}
func (*Mail_MailListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 0}
}
func (m *Mail_MailListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_MailListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_MailListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_MailListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_MailListRequest.Merge(m, src)
}
func (m *Mail_MailListRequest) XXX_Size() int {
	return m.Size()
}
func (m *Mail_MailListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_MailListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_MailListRequest proto.InternalMessageInfo

func (m *Mail_MailListRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (*Mail_MailListRequest) XXX_MessageName() string {
	return "service.Mail.MailListRequest"
}

type Mail_MailListResponse struct {
	Unread map[string]*models.Mail `protobuf:"bytes,1,rep,name=unread,proto3" json:"unread,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Read   map[string]*models.Mail `protobuf:"bytes,2,rep,name=read,proto3" json:"read,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Mail_MailListResponse) Reset()      { *m = Mail_MailListResponse{} }
func (*Mail_MailListResponse) ProtoMessage() {}
func (*Mail_MailListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 1}
}
func (m *Mail_MailListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_MailListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_MailListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_MailListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_MailListResponse.Merge(m, src)
}
func (m *Mail_MailListResponse) XXX_Size() int {
	return m.Size()
}
func (m *Mail_MailListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_MailListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_MailListResponse proto.InternalMessageInfo

func (m *Mail_MailListResponse) GetUnread() map[string]*models.Mail {
	if m != nil {
		return m.Unread
	}
	return nil
}

func (m *Mail_MailListResponse) GetRead() map[string]*models.Mail {
	if m != nil {
		return m.Read
	}
	return nil
}

func (*Mail_MailListResponse) XXX_MessageName() string {
	return "service.Mail.MailListResponse"
}

// 阅读单封邮件
type Mail_ReadMailRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Mail_ReadMailRequest) Reset()      { *m = Mail_ReadMailRequest{} }
func (*Mail_ReadMailRequest) ProtoMessage() {}
func (*Mail_ReadMailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 2}
}
func (m *Mail_ReadMailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_ReadMailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_ReadMailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_ReadMailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_ReadMailRequest.Merge(m, src)
}
func (m *Mail_ReadMailRequest) XXX_Size() int {
	return m.Size()
}
func (m *Mail_ReadMailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_ReadMailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_ReadMailRequest proto.InternalMessageInfo

func (m *Mail_ReadMailRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*Mail_ReadMailRequest) XXX_MessageName() string {
	return "service.Mail.ReadMailRequest"
}

type Mail_ReadMailResponse struct {
}

func (m *Mail_ReadMailResponse) Reset()      { *m = Mail_ReadMailResponse{} }
func (*Mail_ReadMailResponse) ProtoMessage() {}
func (*Mail_ReadMailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 3}
}
func (m *Mail_ReadMailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_ReadMailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_ReadMailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_ReadMailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_ReadMailResponse.Merge(m, src)
}
func (m *Mail_ReadMailResponse) XXX_Size() int {
	return m.Size()
}
func (m *Mail_ReadMailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_ReadMailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_ReadMailResponse proto.InternalMessageInfo

func (*Mail_ReadMailResponse) XXX_MessageName() string {
	return "service.Mail.ReadMailResponse"
}

// 一键阅读所有（未读）邮件
type Mail_ReadAllMailRequest struct {
}

func (m *Mail_ReadAllMailRequest) Reset()      { *m = Mail_ReadAllMailRequest{} }
func (*Mail_ReadAllMailRequest) ProtoMessage() {}
func (*Mail_ReadAllMailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 4}
}
func (m *Mail_ReadAllMailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_ReadAllMailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_ReadAllMailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_ReadAllMailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_ReadAllMailRequest.Merge(m, src)
}
func (m *Mail_ReadAllMailRequest) XXX_Size() int {
	return m.Size()
}
func (m *Mail_ReadAllMailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_ReadAllMailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_ReadAllMailRequest proto.InternalMessageInfo

func (*Mail_ReadAllMailRequest) XXX_MessageName() string {
	return "service.Mail.ReadAllMailRequest"
}

type Mail_ReadAllMailResponse struct {
}

func (m *Mail_ReadAllMailResponse) Reset()      { *m = Mail_ReadAllMailResponse{} }
func (*Mail_ReadAllMailResponse) ProtoMessage() {}
func (*Mail_ReadAllMailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 5}
}
func (m *Mail_ReadAllMailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_ReadAllMailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_ReadAllMailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_ReadAllMailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_ReadAllMailResponse.Merge(m, src)
}
func (m *Mail_ReadAllMailResponse) XXX_Size() int {
	return m.Size()
}
func (m *Mail_ReadAllMailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_ReadAllMailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_ReadAllMailResponse proto.InternalMessageInfo

func (*Mail_ReadAllMailResponse) XXX_MessageName() string {
	return "service.Mail.ReadAllMailResponse"
}

// 删除单封（已读）邮件
type Mail_DeleteMailRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Mail_DeleteMailRequest) Reset()      { *m = Mail_DeleteMailRequest{} }
func (*Mail_DeleteMailRequest) ProtoMessage() {}
func (*Mail_DeleteMailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 6}
}
func (m *Mail_DeleteMailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_DeleteMailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_DeleteMailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_DeleteMailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_DeleteMailRequest.Merge(m, src)
}
func (m *Mail_DeleteMailRequest) XXX_Size() int {
	return m.Size()
}
func (m *Mail_DeleteMailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_DeleteMailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_DeleteMailRequest proto.InternalMessageInfo

func (m *Mail_DeleteMailRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*Mail_DeleteMailRequest) XXX_MessageName() string {
	return "service.Mail.DeleteMailRequest"
}

type Mail_DeleteMailResponse struct {
}

func (m *Mail_DeleteMailResponse) Reset()      { *m = Mail_DeleteMailResponse{} }
func (*Mail_DeleteMailResponse) ProtoMessage() {}
func (*Mail_DeleteMailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 7}
}
func (m *Mail_DeleteMailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_DeleteMailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_DeleteMailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_DeleteMailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_DeleteMailResponse.Merge(m, src)
}
func (m *Mail_DeleteMailResponse) XXX_Size() int {
	return m.Size()
}
func (m *Mail_DeleteMailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_DeleteMailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_DeleteMailResponse proto.InternalMessageInfo

func (*Mail_DeleteMailResponse) XXX_MessageName() string {
	return "service.Mail.DeleteMailResponse"
}

// 一键删除所有已读邮件
type Mail_DeleteAllMailRequest struct {
}

func (m *Mail_DeleteAllMailRequest) Reset()      { *m = Mail_DeleteAllMailRequest{} }
func (*Mail_DeleteAllMailRequest) ProtoMessage() {}
func (*Mail_DeleteAllMailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 8}
}
func (m *Mail_DeleteAllMailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_DeleteAllMailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_DeleteAllMailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_DeleteAllMailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_DeleteAllMailRequest.Merge(m, src)
}
func (m *Mail_DeleteAllMailRequest) XXX_Size() int {
	return m.Size()
}
func (m *Mail_DeleteAllMailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_DeleteAllMailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_DeleteAllMailRequest proto.InternalMessageInfo

func (*Mail_DeleteAllMailRequest) XXX_MessageName() string {
	return "service.Mail.DeleteAllMailRequest"
}

type Mail_DeleteAllMailResponse struct {
}

func (m *Mail_DeleteAllMailResponse) Reset()      { *m = Mail_DeleteAllMailResponse{} }
func (*Mail_DeleteAllMailResponse) ProtoMessage() {}
func (*Mail_DeleteAllMailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 9}
}
func (m *Mail_DeleteAllMailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_DeleteAllMailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_DeleteAllMailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_DeleteAllMailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_DeleteAllMailResponse.Merge(m, src)
}
func (m *Mail_DeleteAllMailResponse) XXX_Size() int {
	return m.Size()
}
func (m *Mail_DeleteAllMailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_DeleteAllMailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_DeleteAllMailResponse proto.InternalMessageInfo

func (*Mail_DeleteAllMailResponse) XXX_MessageName() string {
	return "service.Mail.DeleteAllMailResponse"
}

type Mail_CheatAddMailRequest struct {
	Sender     string         `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	TextId     int64          `protobuf:"varint,2,opt,name=text_id,json=textId,proto3" json:"text_id,omitempty"`
	Title      string         `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content    string         `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Hi         string         `protobuf:"bytes,5,opt,name=hi,proto3" json:"hi,omitempty"`
	Args       []string       `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
	Attachment []*models.Item `protobuf:"bytes,7,rep,name=attachment,proto3" json:"attachment,omitempty"`
	Expire     int64          `protobuf:"varint,8,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (m *Mail_CheatAddMailRequest) Reset()      { *m = Mail_CheatAddMailRequest{} }
func (*Mail_CheatAddMailRequest) ProtoMessage() {}
func (*Mail_CheatAddMailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 10}
}
func (m *Mail_CheatAddMailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_CheatAddMailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_CheatAddMailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_CheatAddMailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_CheatAddMailRequest.Merge(m, src)
}
func (m *Mail_CheatAddMailRequest) XXX_Size() int {
	return m.Size()
}
func (m *Mail_CheatAddMailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_CheatAddMailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_CheatAddMailRequest proto.InternalMessageInfo

func (m *Mail_CheatAddMailRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Mail_CheatAddMailRequest) GetTextId() int64 {
	if m != nil {
		return m.TextId
	}
	return 0
}

func (m *Mail_CheatAddMailRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Mail_CheatAddMailRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Mail_CheatAddMailRequest) GetHi() string {
	if m != nil {
		return m.Hi
	}
	return ""
}

func (m *Mail_CheatAddMailRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Mail_CheatAddMailRequest) GetAttachment() []*models.Item {
	if m != nil {
		return m.Attachment
	}
	return nil
}

func (m *Mail_CheatAddMailRequest) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (*Mail_CheatAddMailRequest) XXX_MessageName() string {
	return "service.Mail.CheatAddMailRequest"
}

type Mail_CheatAddMailResponse struct {
}

func (m *Mail_CheatAddMailResponse) Reset()      { *m = Mail_CheatAddMailResponse{} }
func (*Mail_CheatAddMailResponse) ProtoMessage() {}
func (*Mail_CheatAddMailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9569a1a678496cf8, []int{0, 11}
}
func (m *Mail_CheatAddMailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail_CheatAddMailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail_CheatAddMailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail_CheatAddMailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail_CheatAddMailResponse.Merge(m, src)
}
func (m *Mail_CheatAddMailResponse) XXX_Size() int {
	return m.Size()
}
func (m *Mail_CheatAddMailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail_CheatAddMailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Mail_CheatAddMailResponse proto.InternalMessageInfo

func (*Mail_CheatAddMailResponse) XXX_MessageName() string {
	return "service.Mail.CheatAddMailResponse"
}
func init() {
	proto.RegisterEnum("service.MailErrorCode", MailErrorCode_name, MailErrorCode_value)
	proto.RegisterType((*Mail)(nil), "service.Mail")
	proto.RegisterType((*Mail_MailListRequest)(nil), "service.Mail.MailListRequest")
	proto.RegisterType((*Mail_MailListResponse)(nil), "service.Mail.MailListResponse")
	proto.RegisterMapType((map[string]*models.Mail)(nil), "service.Mail.MailListResponse.ReadEntry")
	proto.RegisterMapType((map[string]*models.Mail)(nil), "service.Mail.MailListResponse.UnreadEntry")
	proto.RegisterType((*Mail_ReadMailRequest)(nil), "service.Mail.ReadMailRequest")
	proto.RegisterType((*Mail_ReadMailResponse)(nil), "service.Mail.ReadMailResponse")
	proto.RegisterType((*Mail_ReadAllMailRequest)(nil), "service.Mail.ReadAllMailRequest")
	proto.RegisterType((*Mail_ReadAllMailResponse)(nil), "service.Mail.ReadAllMailResponse")
	proto.RegisterType((*Mail_DeleteMailRequest)(nil), "service.Mail.DeleteMailRequest")
	proto.RegisterType((*Mail_DeleteMailResponse)(nil), "service.Mail.DeleteMailResponse")
	proto.RegisterType((*Mail_DeleteAllMailRequest)(nil), "service.Mail.DeleteAllMailRequest")
	proto.RegisterType((*Mail_DeleteAllMailResponse)(nil), "service.Mail.DeleteAllMailResponse")
	proto.RegisterType((*Mail_CheatAddMailRequest)(nil), "service.Mail.CheatAddMailRequest")
	proto.RegisterType((*Mail_CheatAddMailResponse)(nil), "service.Mail.CheatAddMailResponse")
}

func init() { proto.RegisterFile("proto/service/mail.proto", fileDescriptor_9569a1a678496cf8) }

var fileDescriptor_9569a1a678496cf8 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x4f, 0x13, 0x4f,
	0x14, 0xee, 0xb4, 0xa5, 0xfd, 0xf1, 0xf8, 0x69, 0xcb, 0x50, 0xe8, 0x64, 0x4d, 0x36, 0x0d, 0xa7,
	0x8a, 0xb2, 0x4d, 0xf0, 0x62, 0x88, 0x31, 0x01, 0x2c, 0x86, 0x44, 0x39, 0x6c, 0xe2, 0xc5, 0x8b,
	0x59, 0xba, 0x13, 0x3a, 0x61, 0xbb, 0x83, 0xb3, 0x53, 0x02, 0x57, 0x12, 0x12, 0x43, 0x62, 0xe2,
	0x91, 0x83, 0x47, 0x0f, 0x5c, 0x94, 0x53, 0xd5, 0x84, 0x7f, 0x80, 0x23, 0x47, 0x8e, 0xd8, 0x42,
	0x02, 0x37, 0xfd, 0x0f, 0xcc, 0xec, 0x0c, 0xd0, 0xae, 0x51, 0x2f, 0x9e, 0x3a, 0xdf, 0xf7, 0xbe,
	0xf7, 0xf5, 0x7b, 0x6f, 0xa6, 0x05, 0xb2, 0x2e, 0xb8, 0xe4, 0xb5, 0x88, 0x8a, 0x0d, 0xd6, 0xa0,
	0xb5, 0x96, 0xc7, 0x02, 0x27, 0xa6, 0x70, 0xde, 0x70, 0x56, 0x59, 0x4b, 0x5a, 0xdc, 0xa7, 0x41,
	0xd4, 0xa7, 0x48, 0x14, 0x56, 0xbc, 0x88, 0x9a, 0xc2, 0x44, 0xa2, 0xb0, 0xaa, 0xf9, 0xc9, 0x1f,
	0x39, 0xc8, 0x3e, 0xf7, 0x58, 0x60, 0xdd, 0x83, 0x82, 0xfa, 0x7c, 0xc6, 0x22, 0xe9, 0xd2, 0xd7,
	0x6d, 0x1a, 0x49, 0x4c, 0x20, 0xbf, 0x41, 0x45, 0xc4, 0x78, 0x48, 0x50, 0x05, 0x55, 0x87, 0xdd,
	0x2b, 0x68, 0x7d, 0x48, 0x43, 0xf1, 0x46, 0x1d, 0xad, 0xf3, 0x30, 0xa2, 0x78, 0x1e, 0x72, 0xed,
	0x50, 0x50, 0xcf, 0x27, 0xa8, 0x92, 0xa9, 0x8e, 0xcc, 0x4c, 0x39, 0x26, 0xae, 0xa3, 0xa4, 0x4e,
	0x52, 0xef, 0xbc, 0x88, 0xc5, 0xf5, 0x50, 0x8a, 0x2d, 0xd7, 0x74, 0xe2, 0x47, 0x90, 0x8d, 0x1d,
	0xd2, 0xb1, 0x43, 0xf5, 0x2f, 0x0e, 0xee, 0x75, 0x7f, 0xdc, 0x65, 0x3d, 0x85, 0x91, 0x3e, 0x53,
	0x5c, 0x84, 0xcc, 0x1a, 0xdd, 0x32, 0xd9, 0xd5, 0x11, 0x4f, 0xc2, 0xd0, 0x86, 0x17, 0xb4, 0x29,
	0x49, 0x57, 0x50, 0x75, 0x64, 0xe6, 0x7f, 0x47, 0xef, 0x23, 0x76, 0x76, 0x75, 0x69, 0x36, 0xfd,
	0x10, 0x59, 0x75, 0x18, 0x76, 0xff, 0x81, 0xcd, 0x63, 0x28, 0x28, 0x9b, 0x98, 0x36, 0x3b, 0xbd,
	0x0d, 0x69, 0xe6, 0x1b, 0xaf, 0x34, 0xf3, 0x67, 0xef, 0x6c, 0x77, 0x48, 0x19, 0xb2, 0xea, 0x0a,
	0x71, 0xa1, 0x2e, 0x84, 0xd2, 0x2e, 0x73, 0xb9, 0xc8, 0xdb, 0xa1, 0x6f, 0x61, 0x28, 0xde, 0xf4,
	0xeb, 0x99, 0xad, 0x12, 0x60, 0xc5, 0xcd, 0x05, 0x41, 0x9f, 0xad, 0x35, 0x0e, 0x63, 0x03, 0xac,
	0x11, 0xbb, 0x30, 0xfa, 0x84, 0x06, 0x54, 0xd2, 0x3f, 0x45, 0x98, 0xde, 0xee, 0x90, 0xbb, 0xbf,
	0x89, 0x80, 0x8b, 0x75, 0x21, 0xae, 0x32, 0x2c, 0x32, 0x11, 0x49, 0x15, 0xa0, 0xdf, 0xd3, 0x7c,
	0xd3, 0x04, 0x94, 0x34, 0x9b, 0x08, 0x56, 0x86, 0xf1, 0x04, 0x6f, 0x1a, 0x4e, 0x11, 0x8c, 0x2d,
	0x34, 0xa9, 0x27, 0xe7, 0xfc, 0x81, 0x05, 0x4d, 0x40, 0x2e, 0xa2, 0xa1, 0x4f, 0x85, 0x49, 0x68,
	0x10, 0x2e, 0x43, 0x5e, 0xd2, 0x4d, 0xf9, 0x8a, 0xf9, 0xf1, 0xd6, 0x33, 0x6e, 0x4e, 0xc1, 0x25,
	0x1f, 0x97, 0x60, 0x48, 0x32, 0x19, 0x50, 0x92, 0x89, 0xf5, 0x1a, 0xa8, 0xb7, 0xdb, 0xe0, 0xa1,
	0xa4, 0xa1, 0x24, 0x59, 0xfd, 0x76, 0x0d, 0x54, 0xe3, 0x37, 0x19, 0x19, 0xd2, 0xe3, 0x37, 0x19,
	0xc6, 0x90, 0xf5, 0xc4, 0x6a, 0x44, 0x72, 0x95, 0x4c, 0x75, 0xd8, 0x8d, 0xcf, 0xf8, 0x3e, 0x80,
	0x27, 0xa5, 0xd7, 0x68, 0xb6, 0x94, 0x41, 0x3e, 0x7e, 0x8c, 0xd7, 0xb7, 0xbc, 0x24, 0x69, 0xcb,
	0xed, 0xab, 0xab, 0xc8, 0x74, 0x73, 0x9d, 0x09, 0x4a, 0xfe, 0xd3, 0xc9, 0x34, 0x52, 0x3b, 0x19,
	0x9c, 0x50, 0x8f, 0x3e, 0xb5, 0x06, 0xb7, 0x14, 0xae, 0x0b, 0xc1, 0xc5, 0x02, 0xf7, 0x29, 0x9e,
	0x82, 0xe4, 0xde, 0x8b, 0x29, 0x6b, 0x7c, 0xb7, 0x43, 0x46, 0x71, 0xe1, 0x72, 0xfb, 0xd3, 0xd9,
	0xe1, 0xe7, 0xb3, 0xaf, 0x6f, 0xcf, 0x3f, 0xee, 0x9d, 0xbf, 0xdf, 0xc7, 0x0e, 0xfc, 0x72, 0x25,
	0x45, 0x64, 0x91, 0xdd, 0x0e, 0x29, 0x61, 0x7c, 0x71, 0xf0, 0xe5, 0x7c, 0xe7, 0xcd, 0xe5, 0xde,
	0xce, 0xc5, 0xc1, 0xa1, 0x6e, 0x9c, 0x5f, 0x3e, 0xf9, 0x66, 0xa7, 0xf6, 0xbb, 0x36, 0x3a, 0xea,
	0xda, 0xe8, 0xb8, 0x6b, 0xa3, 0xd3, 0xae, 0x8d, 0x2e, 0xba, 0x76, 0xea, 0x7b, 0xd7, 0x46, 0xef,
	0x7a, 0x76, 0xea, 0xa8, 0x67, 0xa3, 0xe3, 0x9e, 0x9d, 0x3a, 0xe9, 0xd9, 0xa9, 0x97, 0x95, 0x06,
	0x67, 0xe1, 0xb4, 0xfa, 0xd5, 0x51, 0x51, 0x6b, 0xf0, 0x56, 0x8b, 0x87, 0xb5, 0x81, 0xbf, 0xa3,
	0x95, 0x5c, 0x0c, 0x1f, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x48, 0x21, 0x4b, 0xa6, 0x04,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_MailListRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_MailListResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_ReadMailRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_ReadMailResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_ReadAllMailRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_ReadAllMailResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_DeleteMailRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_DeleteMailResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_DeleteAllMailRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_DeleteAllMailResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_CheatAddMailRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail_CheatAddMailResponse.Get().(proto.Message)
	})
}

var poolMail = &sync.Pool{New: func() interface{} { return &Mail{} }}

func (m *Mail) ReleasePool() { m.Reset(); poolMail.Put(m); m = nil }

var poolMail_MailListRequest = &sync.Pool{New: func() interface{} { return &Mail_MailListRequest{} }}

func (m *Mail_MailListRequest) ReleasePool() { m.Reset(); poolMail_MailListRequest.Put(m); m = nil }

var poolMail_MailListResponse = &sync.Pool{New: func() interface{} { return &Mail_MailListResponse{} }}

func (m *Mail_MailListResponse) ReleasePool() { m.Reset(); poolMail_MailListResponse.Put(m); m = nil }

var poolMail_ReadMailRequest = &sync.Pool{New: func() interface{} { return &Mail_ReadMailRequest{} }}

func (m *Mail_ReadMailRequest) ReleasePool() { m.Reset(); poolMail_ReadMailRequest.Put(m); m = nil }

var poolMail_ReadMailResponse = &sync.Pool{New: func() interface{} { return &Mail_ReadMailResponse{} }}

func (m *Mail_ReadMailResponse) ReleasePool() { m.Reset(); poolMail_ReadMailResponse.Put(m); m = nil }

var poolMail_ReadAllMailRequest = &sync.Pool{New: func() interface{} { return &Mail_ReadAllMailRequest{} }}

func (m *Mail_ReadAllMailRequest) ReleasePool() {
	m.Reset()
	poolMail_ReadAllMailRequest.Put(m)
	m = nil
}

var poolMail_ReadAllMailResponse = &sync.Pool{New: func() interface{} { return &Mail_ReadAllMailResponse{} }}

func (m *Mail_ReadAllMailResponse) ReleasePool() {
	m.Reset()
	poolMail_ReadAllMailResponse.Put(m)
	m = nil
}

var poolMail_DeleteMailRequest = &sync.Pool{New: func() interface{} { return &Mail_DeleteMailRequest{} }}

func (m *Mail_DeleteMailRequest) ReleasePool() { m.Reset(); poolMail_DeleteMailRequest.Put(m); m = nil }

var poolMail_DeleteMailResponse = &sync.Pool{New: func() interface{} { return &Mail_DeleteMailResponse{} }}

func (m *Mail_DeleteMailResponse) ReleasePool() {
	m.Reset()
	poolMail_DeleteMailResponse.Put(m)
	m = nil
}

var poolMail_DeleteAllMailRequest = &sync.Pool{New: func() interface{} { return &Mail_DeleteAllMailRequest{} }}

func (m *Mail_DeleteAllMailRequest) ReleasePool() {
	m.Reset()
	poolMail_DeleteAllMailRequest.Put(m)
	m = nil
}

var poolMail_DeleteAllMailResponse = &sync.Pool{New: func() interface{} { return &Mail_DeleteAllMailResponse{} }}

func (m *Mail_DeleteAllMailResponse) ReleasePool() {
	m.Reset()
	poolMail_DeleteAllMailResponse.Put(m)
	m = nil
}

var poolMail_CheatAddMailRequest = &sync.Pool{New: func() interface{} { return &Mail_CheatAddMailRequest{} }}

func (m *Mail_CheatAddMailRequest) ReleasePool() {
	m.Reset()
	poolMail_CheatAddMailRequest.Put(m)
	m = nil
}

var poolMail_CheatAddMailResponse = &sync.Pool{New: func() interface{} { return &Mail_CheatAddMailResponse{} }}

func (m *Mail_CheatAddMailResponse) ReleasePool() {
	m.Reset()
	poolMail_CheatAddMailResponse.Put(m)
	m = nil
}
func (x MailErrorCode) String() string {
	s, ok := MailErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Mail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail)
	if !ok {
		that2, ok := that.(Mail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Mail_MailListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_MailListRequest)
	if !ok {
		that2, ok := that.(Mail_MailListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *Mail_MailListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_MailListResponse)
	if !ok {
		that2, ok := that.(Mail_MailListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Unread) != len(that1.Unread) {
		return false
	}
	for i := range this.Unread {
		if !this.Unread[i].Equal(that1.Unread[i]) {
			return false
		}
	}
	if len(this.Read) != len(that1.Read) {
		return false
	}
	for i := range this.Read {
		if !this.Read[i].Equal(that1.Read[i]) {
			return false
		}
	}
	return true
}
func (this *Mail_ReadMailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_ReadMailRequest)
	if !ok {
		that2, ok := that.(Mail_ReadMailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Mail_ReadMailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_ReadMailResponse)
	if !ok {
		that2, ok := that.(Mail_ReadMailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Mail_ReadAllMailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_ReadAllMailRequest)
	if !ok {
		that2, ok := that.(Mail_ReadAllMailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Mail_ReadAllMailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_ReadAllMailResponse)
	if !ok {
		that2, ok := that.(Mail_ReadAllMailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Mail_DeleteMailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_DeleteMailRequest)
	if !ok {
		that2, ok := that.(Mail_DeleteMailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Mail_DeleteMailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_DeleteMailResponse)
	if !ok {
		that2, ok := that.(Mail_DeleteMailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Mail_DeleteAllMailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_DeleteAllMailRequest)
	if !ok {
		that2, ok := that.(Mail_DeleteAllMailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Mail_DeleteAllMailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_DeleteAllMailResponse)
	if !ok {
		that2, ok := that.(Mail_DeleteAllMailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Mail_CheatAddMailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_CheatAddMailRequest)
	if !ok {
		that2, ok := that.(Mail_CheatAddMailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.TextId != that1.TextId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.Hi != that1.Hi {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if this.Args[i] != that1.Args[i] {
			return false
		}
	}
	if len(this.Attachment) != len(that1.Attachment) {
		return false
	}
	for i := range this.Attachment {
		if !this.Attachment[i].Equal(that1.Attachment[i]) {
			return false
		}
	}
	if this.Expire != that1.Expire {
		return false
	}
	return true
}
func (this *Mail_CheatAddMailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail_CheatAddMailResponse)
	if !ok {
		that2, ok := that.(Mail_CheatAddMailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Mail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Mail_MailListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_MailListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_MailListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Mail_MailListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_MailListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_MailListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Read) > 0 {
		for k := range m.Read {
			v := m.Read[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMail(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMail(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMail(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Unread) > 0 {
		for k := range m.Unread {
			v := m.Unread[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMail(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMail(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMail(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Mail_ReadMailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_ReadMailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_ReadMailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Mail_ReadMailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_ReadMailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_ReadMailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Mail_ReadAllMailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_ReadAllMailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_ReadAllMailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Mail_ReadAllMailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_ReadAllMailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_ReadAllMailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Mail_DeleteMailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_DeleteMailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_DeleteMailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Mail_DeleteMailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_DeleteMailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_DeleteMailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Mail_DeleteAllMailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_DeleteAllMailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_DeleteAllMailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Mail_DeleteAllMailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_DeleteAllMailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_DeleteAllMailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Mail_CheatAddMailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_CheatAddMailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_CheatAddMailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expire != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Attachment) > 0 {
		for iNdEx := len(m.Attachment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMail(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintMail(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Hi) > 0 {
		i -= len(m.Hi)
		copy(dAtA[i:], m.Hi)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Hi)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TextId != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.TextId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Mail_CheatAddMailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail_CheatAddMailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail_CheatAddMailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMail(dAtA []byte, offset int, v uint64) int {
	offset -= sovMail(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Mail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Mail_MailListRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Version != "" {
		w.RawByte('"')
		w.RawString("version")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Version)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Mail_MailListResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("unread")
	w.RawByte('"')
	w.RawByte(':')
	if m.Unread == nil {
		w.RawString("null")
	} else if len(m.Unread) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlUnread := len(m.Unread)
		for k, v := range m.Unread {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlUnread--
			if mlUnread != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("read")
	w.RawByte('"')
	w.RawByte(':')
	if m.Read == nil {
		w.RawString("null")
	} else if len(m.Read) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRead := len(m.Read)
		for k, v := range m.Read {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlRead--
			if mlRead != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Mail_ReadMailRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Mail_ReadMailResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Mail_ReadAllMailRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Mail_ReadAllMailResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Mail_DeleteMailRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Mail_DeleteMailResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Mail_DeleteAllMailRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Mail_DeleteAllMailResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Mail_CheatAddMailRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Sender != "" {
		w.RawByte('"')
		w.RawString("sender")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Sender)
		needWriteComma = true
	}
	if m.TextId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("text_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TextId))
		needWriteComma = true
	}
	if m.Title != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Title)
		needWriteComma = true
	}
	if m.Content != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("content")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Content)
		needWriteComma = true
	}
	if m.Hi != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hi")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Hi)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("args")
	w.RawByte('"')
	w.RawByte(':')
	if m.Args == nil {
		w.RawString("null")
	} else if len(m.Args) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Args {
			w.String(v)
			if i != len(m.Args)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attachment")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attachment == nil {
		w.RawString("null")
	} else if len(m.Attachment) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Attachment {
			v.JsonBytes(w)
			if i != len(m.Attachment)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Expire != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expire")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Expire))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Mail_CheatAddMailResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Mail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail) GoString() string {
	return m.String()
}

func (m *Mail_MailListRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_MailListRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_MailListRequest) GoString() string {
	return m.String()
}

func (m *Mail_MailListResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_MailListResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_MailListResponse) GoString() string {
	return m.String()
}

func (m *Mail_ReadMailRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_ReadMailRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_ReadMailRequest) GoString() string {
	return m.String()
}

func (m *Mail_ReadMailResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_ReadMailResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_ReadMailResponse) GoString() string {
	return m.String()
}

func (m *Mail_ReadAllMailRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_ReadAllMailRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_ReadAllMailRequest) GoString() string {
	return m.String()
}

func (m *Mail_ReadAllMailResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_ReadAllMailResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_ReadAllMailResponse) GoString() string {
	return m.String()
}

func (m *Mail_DeleteMailRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_DeleteMailRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_DeleteMailRequest) GoString() string {
	return m.String()
}

func (m *Mail_DeleteMailResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_DeleteMailResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_DeleteMailResponse) GoString() string {
	return m.String()
}

func (m *Mail_DeleteAllMailRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_DeleteAllMailRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_DeleteAllMailRequest) GoString() string {
	return m.String()
}

func (m *Mail_DeleteAllMailResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_DeleteAllMailResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_DeleteAllMailResponse) GoString() string {
	return m.String()
}

func (m *Mail_CheatAddMailRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_CheatAddMailRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_CheatAddMailRequest) GoString() string {
	return m.String()
}

func (m *Mail_CheatAddMailResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail_CheatAddMailResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail_CheatAddMailResponse) GoString() string {
	return m.String()
}

func (m *Mail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Mail_MailListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *Mail_MailListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unread) > 0 {
		for k, v := range m.Unread {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMail(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMail(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMail(uint64(mapEntrySize))
		}
	}
	if len(m.Read) > 0 {
		for k, v := range m.Read {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMail(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMail(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMail(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Mail_ReadMailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *Mail_ReadMailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Mail_ReadAllMailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Mail_ReadAllMailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Mail_DeleteMailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *Mail_DeleteMailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Mail_DeleteAllMailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Mail_DeleteAllMailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Mail_CheatAddMailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.TextId != 0 {
		n += 1 + sovMail(uint64(m.TextId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Hi)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if len(m.Attachment) > 0 {
		for _, e := range m.Attachment {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if m.Expire != 0 {
		n += 1 + sovMail(uint64(m.Expire))
	}
	return n
}

func (m *Mail_CheatAddMailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMail(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMail(x uint64) (n int) {
	return sovMail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_MailListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_MailListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unread == nil {
				m.Unread = make(map[string]*models.Mail)
			}
			var mapkey string
			var mapvalue *models.Mail
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMail
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMail
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMail
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMail
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.Mail{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMail(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMail
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Unread[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Read == nil {
				m.Read = make(map[string]*models.Mail)
			}
			var mapkey string
			var mapvalue *models.Mail
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMail
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMail
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMail
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMail
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.Mail{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMail(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMail
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Read[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_ReadMailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadMailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadMailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_ReadMailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadMailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadMailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_ReadAllMailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadAllMailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadAllMailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_ReadAllMailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadAllMailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadAllMailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_DeleteMailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_DeleteMailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_DeleteAllMailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAllMailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAllMailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_DeleteAllMailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAllMailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAllMailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_CheatAddMailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddMailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddMailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextId", wireType)
			}
			m.TextId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachment = append(m.Attachment, &models.Item{})
			if err := m.Attachment[len(m.Attachment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail_CheatAddMailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddMailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddMailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMail
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMail
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMail
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMail        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMail          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMail = fmt.Errorf("proto: unexpected end of group")
)
