// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/user.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserErrorCode int32

const (
	UserErrorCode_ErrUserCannotDrawTitleReward UserErrorCode = 0
	UserErrorCode_ErrMedicineHpMax             UserErrorCode = 1
	UserErrorCode_ErrMedicineMpMax             UserErrorCode = 2
	UserErrorCode_ErrCdKeyIsNotExist           UserErrorCode = 3
	UserErrorCode_ErrCdKeyIsUsed               UserErrorCode = 4
	UserErrorCode_ErrCdKeyNotActive            UserErrorCode = 5
	UserErrorCode_ErrPlayerNameExist           UserErrorCode = 6
)

var UserErrorCode_name = map[int32]string{
	0: "ErrUserCannotDrawTitleReward",
	1: "ErrMedicineHpMax",
	2: "ErrMedicineMpMax",
	3: "ErrCdKeyIsNotExist",
	4: "ErrCdKeyIsUsed",
	5: "ErrCdKeyNotActive",
	6: "ErrPlayerNameExist",
}

var UserErrorCode_value = map[string]int32{
	"ErrUserCannotDrawTitleReward": 0,
	"ErrMedicineHpMax":             1,
	"ErrMedicineMpMax":             2,
	"ErrCdKeyIsNotExist":           3,
	"ErrCdKeyIsUsed":               4,
	"ErrCdKeyNotActive":            5,
	"ErrPlayerNameExist":           6,
}

func (UserErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0}
}

type User struct {
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (*User) XXX_MessageName() string {
	return "service.User"
}

type User_LoginPush struct {
	IsRegister bool `protobuf:"varint,1,opt,name=is_register,json=isRegister,proto3" json:"is_register,omitempty"`
}

func (m *User_LoginPush) Reset()      { *m = User_LoginPush{} }
func (*User_LoginPush) ProtoMessage() {}
func (*User_LoginPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 0}
}
func (m *User_LoginPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_LoginPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_LoginPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_LoginPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_LoginPush.Merge(m, src)
}
func (m *User_LoginPush) XXX_Size() int {
	return m.Size()
}
func (m *User_LoginPush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_LoginPush.DiscardUnknown(m)
}

var xxx_messageInfo_User_LoginPush proto.InternalMessageInfo

func (m *User_LoginPush) GetIsRegister() bool {
	if m != nil {
		return m.IsRegister
	}
	return false
}

func (*User_LoginPush) XXX_MessageName() string {
	return "service.User.LoginPush"
}

type User_LogoutPush struct {
}

func (m *User_LogoutPush) Reset()      { *m = User_LogoutPush{} }
func (*User_LogoutPush) ProtoMessage() {}
func (*User_LogoutPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 1}
}
func (m *User_LogoutPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_LogoutPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_LogoutPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_LogoutPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_LogoutPush.Merge(m, src)
}
func (m *User_LogoutPush) XXX_Size() int {
	return m.Size()
}
func (m *User_LogoutPush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_LogoutPush.DiscardUnknown(m)
}

var xxx_messageInfo_User_LogoutPush proto.InternalMessageInfo

func (*User_LogoutPush) XXX_MessageName() string {
	return "service.User.LogoutPush"
}

type User_LevelChangeEvent struct {
	Level int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *User_LevelChangeEvent) Reset()      { *m = User_LevelChangeEvent{} }
func (*User_LevelChangeEvent) ProtoMessage() {}
func (*User_LevelChangeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 2}
}
func (m *User_LevelChangeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_LevelChangeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_LevelChangeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_LevelChangeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_LevelChangeEvent.Merge(m, src)
}
func (m *User_LevelChangeEvent) XXX_Size() int {
	return m.Size()
}
func (m *User_LevelChangeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_User_LevelChangeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_User_LevelChangeEvent proto.InternalMessageInfo

func (m *User_LevelChangeEvent) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (*User_LevelChangeEvent) XXX_MessageName() string {
	return "service.User.LevelChangeEvent"
}

type User_CheatModifyTimeRequest struct {
	TimeOffset int64 `protobuf:"varint,1,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
}

func (m *User_CheatModifyTimeRequest) Reset()      { *m = User_CheatModifyTimeRequest{} }
func (*User_CheatModifyTimeRequest) ProtoMessage() {}
func (*User_CheatModifyTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 3}
}
func (m *User_CheatModifyTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatModifyTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatModifyTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatModifyTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatModifyTimeRequest.Merge(m, src)
}
func (m *User_CheatModifyTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatModifyTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatModifyTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatModifyTimeRequest proto.InternalMessageInfo

func (m *User_CheatModifyTimeRequest) GetTimeOffset() int64 {
	if m != nil {
		return m.TimeOffset
	}
	return 0
}

func (*User_CheatModifyTimeRequest) XXX_MessageName() string {
	return "service.User.CheatModifyTimeRequest"
}

type User_CheatModifyTimeResponse struct {
}

func (m *User_CheatModifyTimeResponse) Reset()      { *m = User_CheatModifyTimeResponse{} }
func (*User_CheatModifyTimeResponse) ProtoMessage() {}
func (*User_CheatModifyTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 4}
}
func (m *User_CheatModifyTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatModifyTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatModifyTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatModifyTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatModifyTimeResponse.Merge(m, src)
}
func (m *User_CheatModifyTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatModifyTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatModifyTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatModifyTimeResponse proto.InternalMessageInfo

func (*User_CheatModifyTimeResponse) XXX_MessageName() string {
	return "service.User.CheatModifyTimeResponse"
}

type User_CheatModifyCreateTimeRequest struct {
	CreateAt int64 `protobuf:"varint,1,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (m *User_CheatModifyCreateTimeRequest) Reset()      { *m = User_CheatModifyCreateTimeRequest{} }
func (*User_CheatModifyCreateTimeRequest) ProtoMessage() {}
func (*User_CheatModifyCreateTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 5}
}
func (m *User_CheatModifyCreateTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatModifyCreateTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatModifyCreateTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatModifyCreateTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatModifyCreateTimeRequest.Merge(m, src)
}
func (m *User_CheatModifyCreateTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatModifyCreateTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatModifyCreateTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatModifyCreateTimeRequest proto.InternalMessageInfo

func (m *User_CheatModifyCreateTimeRequest) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (*User_CheatModifyCreateTimeRequest) XXX_MessageName() string {
	return "service.User.CheatModifyCreateTimeRequest"
}

type User_CheatModifyCreateTimeResponse struct {
}

func (m *User_CheatModifyCreateTimeResponse) Reset()      { *m = User_CheatModifyCreateTimeResponse{} }
func (*User_CheatModifyCreateTimeResponse) ProtoMessage() {}
func (*User_CheatModifyCreateTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 6}
}
func (m *User_CheatModifyCreateTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_CheatModifyCreateTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_CheatModifyCreateTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_CheatModifyCreateTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CheatModifyCreateTimeResponse.Merge(m, src)
}
func (m *User_CheatModifyCreateTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_CheatModifyCreateTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CheatModifyCreateTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_CheatModifyCreateTimeResponse proto.InternalMessageInfo

func (*User_CheatModifyCreateTimeResponse) XXX_MessageName() string {
	return "service.User.CheatModifyCreateTimeResponse"
}

// 突破副本战斗结束事件（只有成功通过副本才发该请求）
type User_AdvanceDungeonFinishEvent struct {
	DungeonId int64 `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (m *User_AdvanceDungeonFinishEvent) Reset()      { *m = User_AdvanceDungeonFinishEvent{} }
func (*User_AdvanceDungeonFinishEvent) ProtoMessage() {}
func (*User_AdvanceDungeonFinishEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 7}
}
func (m *User_AdvanceDungeonFinishEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_AdvanceDungeonFinishEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_AdvanceDungeonFinishEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_AdvanceDungeonFinishEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_AdvanceDungeonFinishEvent.Merge(m, src)
}
func (m *User_AdvanceDungeonFinishEvent) XXX_Size() int {
	return m.Size()
}
func (m *User_AdvanceDungeonFinishEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_User_AdvanceDungeonFinishEvent.DiscardUnknown(m)
}

var xxx_messageInfo_User_AdvanceDungeonFinishEvent proto.InternalMessageInfo

func (m *User_AdvanceDungeonFinishEvent) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (*User_AdvanceDungeonFinishEvent) XXX_MessageName() string {
	return "service.User.AdvanceDungeonFinishEvent"
}

type User_GetBattleSettingDataRequest struct {
}

func (m *User_GetBattleSettingDataRequest) Reset()      { *m = User_GetBattleSettingDataRequest{} }
func (*User_GetBattleSettingDataRequest) ProtoMessage() {}
func (*User_GetBattleSettingDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 8}
}
func (m *User_GetBattleSettingDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetBattleSettingDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetBattleSettingDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetBattleSettingDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetBattleSettingDataRequest.Merge(m, src)
}
func (m *User_GetBattleSettingDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetBattleSettingDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetBattleSettingDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetBattleSettingDataRequest proto.InternalMessageInfo

func (*User_GetBattleSettingDataRequest) XXX_MessageName() string {
	return "service.User.GetBattleSettingDataRequest"
}

type User_GetBattleSettingDataResponse struct {
	Data *models.BattleSettingData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *User_GetBattleSettingDataResponse) Reset()      { *m = User_GetBattleSettingDataResponse{} }
func (*User_GetBattleSettingDataResponse) ProtoMessage() {}
func (*User_GetBattleSettingDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 9}
}
func (m *User_GetBattleSettingDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetBattleSettingDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetBattleSettingDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetBattleSettingDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetBattleSettingDataResponse.Merge(m, src)
}
func (m *User_GetBattleSettingDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetBattleSettingDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetBattleSettingDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetBattleSettingDataResponse proto.InternalMessageInfo

func (m *User_GetBattleSettingDataResponse) GetData() *models.BattleSettingData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*User_GetBattleSettingDataResponse) XXX_MessageName() string {
	return "service.User.GetBattleSettingDataResponse"
}

type User_UpdateBattleSettingDataRequest struct {
	Data *models.BattleSettingData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *User_UpdateBattleSettingDataRequest) Reset()      { *m = User_UpdateBattleSettingDataRequest{} }
func (*User_UpdateBattleSettingDataRequest) ProtoMessage() {}
func (*User_UpdateBattleSettingDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 10}
}
func (m *User_UpdateBattleSettingDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UpdateBattleSettingDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UpdateBattleSettingDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UpdateBattleSettingDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UpdateBattleSettingDataRequest.Merge(m, src)
}
func (m *User_UpdateBattleSettingDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_UpdateBattleSettingDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UpdateBattleSettingDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_UpdateBattleSettingDataRequest proto.InternalMessageInfo

func (m *User_UpdateBattleSettingDataRequest) GetData() *models.BattleSettingData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*User_UpdateBattleSettingDataRequest) XXX_MessageName() string {
	return "service.User.UpdateBattleSettingDataRequest"
}

type User_UpdateBattleSettingDataResponse struct {
}

func (m *User_UpdateBattleSettingDataResponse) Reset()      { *m = User_UpdateBattleSettingDataResponse{} }
func (*User_UpdateBattleSettingDataResponse) ProtoMessage() {}
func (*User_UpdateBattleSettingDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 11}
}
func (m *User_UpdateBattleSettingDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UpdateBattleSettingDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UpdateBattleSettingDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UpdateBattleSettingDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UpdateBattleSettingDataResponse.Merge(m, src)
}
func (m *User_UpdateBattleSettingDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_UpdateBattleSettingDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UpdateBattleSettingDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_UpdateBattleSettingDataResponse proto.InternalMessageInfo

func (*User_UpdateBattleSettingDataResponse) XXX_MessageName() string {
	return "service.User.UpdateBattleSettingDataResponse"
}

// 获取头衔奖励信息
type User_GetTitleRewardsInfoRequest struct {
}

func (m *User_GetTitleRewardsInfoRequest) Reset()      { *m = User_GetTitleRewardsInfoRequest{} }
func (*User_GetTitleRewardsInfoRequest) ProtoMessage() {}
func (*User_GetTitleRewardsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 12}
}
func (m *User_GetTitleRewardsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetTitleRewardsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetTitleRewardsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetTitleRewardsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetTitleRewardsInfoRequest.Merge(m, src)
}
func (m *User_GetTitleRewardsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetTitleRewardsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetTitleRewardsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetTitleRewardsInfoRequest proto.InternalMessageInfo

func (*User_GetTitleRewardsInfoRequest) XXX_MessageName() string {
	return "service.User.GetTitleRewardsInfoRequest"
}

type User_GetTitleRewardsInfoResponse struct {
	Info *models.TitleRewards `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *User_GetTitleRewardsInfoResponse) Reset()      { *m = User_GetTitleRewardsInfoResponse{} }
func (*User_GetTitleRewardsInfoResponse) ProtoMessage() {}
func (*User_GetTitleRewardsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 13}
}
func (m *User_GetTitleRewardsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetTitleRewardsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetTitleRewardsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetTitleRewardsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetTitleRewardsInfoResponse.Merge(m, src)
}
func (m *User_GetTitleRewardsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetTitleRewardsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetTitleRewardsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetTitleRewardsInfoResponse proto.InternalMessageInfo

func (m *User_GetTitleRewardsInfoResponse) GetInfo() *models.TitleRewards {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*User_GetTitleRewardsInfoResponse) XXX_MessageName() string {
	return "service.User.GetTitleRewardsInfoResponse"
}

// 领取头衔奖励
type User_DrawTitleRewardsRequest struct {
	Title int64 `protobuf:"varint,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *User_DrawTitleRewardsRequest) Reset()      { *m = User_DrawTitleRewardsRequest{} }
func (*User_DrawTitleRewardsRequest) ProtoMessage() {}
func (*User_DrawTitleRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 14}
}
func (m *User_DrawTitleRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_DrawTitleRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_DrawTitleRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_DrawTitleRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_DrawTitleRewardsRequest.Merge(m, src)
}
func (m *User_DrawTitleRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_DrawTitleRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_DrawTitleRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_DrawTitleRewardsRequest proto.InternalMessageInfo

func (m *User_DrawTitleRewardsRequest) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (*User_DrawTitleRewardsRequest) XXX_MessageName() string {
	return "service.User.DrawTitleRewardsRequest"
}

type User_DrawTitleRewardsResponse struct {
	Title int64          `protobuf:"varint,1,opt,name=title,proto3" json:"title,omitempty"`
	Items []*models.Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *User_DrawTitleRewardsResponse) Reset()      { *m = User_DrawTitleRewardsResponse{} }
func (*User_DrawTitleRewardsResponse) ProtoMessage() {}
func (*User_DrawTitleRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 15}
}
func (m *User_DrawTitleRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_DrawTitleRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_DrawTitleRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_DrawTitleRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_DrawTitleRewardsResponse.Merge(m, src)
}
func (m *User_DrawTitleRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_DrawTitleRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_DrawTitleRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_DrawTitleRewardsResponse proto.InternalMessageInfo

func (m *User_DrawTitleRewardsResponse) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *User_DrawTitleRewardsResponse) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*User_DrawTitleRewardsResponse) XXX_MessageName() string {
	return "service.User.DrawTitleRewardsResponse"
}

type User_OtherLoginPush struct {
	LoginTime int64 `protobuf:"varint,1,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`
}

func (m *User_OtherLoginPush) Reset()      { *m = User_OtherLoginPush{} }
func (*User_OtherLoginPush) ProtoMessage() {}
func (*User_OtherLoginPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 16}
}
func (m *User_OtherLoginPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_OtherLoginPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_OtherLoginPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_OtherLoginPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_OtherLoginPush.Merge(m, src)
}
func (m *User_OtherLoginPush) XXX_Size() int {
	return m.Size()
}
func (m *User_OtherLoginPush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_OtherLoginPush.DiscardUnknown(m)
}

var xxx_messageInfo_User_OtherLoginPush proto.InternalMessageInfo

func (m *User_OtherLoginPush) GetLoginTime() int64 {
	if m != nil {
		return m.LoginTime
	}
	return 0
}

func (*User_OtherLoginPush) XXX_MessageName() string {
	return "service.User.OtherLoginPush"
}

// 获取开场动画Id
type User_GetCutSceneIdRequest struct {
}

func (m *User_GetCutSceneIdRequest) Reset()      { *m = User_GetCutSceneIdRequest{} }
func (*User_GetCutSceneIdRequest) ProtoMessage() {}
func (*User_GetCutSceneIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 17}
}
func (m *User_GetCutSceneIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetCutSceneIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetCutSceneIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetCutSceneIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetCutSceneIdRequest.Merge(m, src)
}
func (m *User_GetCutSceneIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetCutSceneIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetCutSceneIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetCutSceneIdRequest proto.InternalMessageInfo

func (*User_GetCutSceneIdRequest) XXX_MessageName() string {
	return "service.User.GetCutSceneIdRequest"
}

type User_GetCutSceneIdResponse struct {
	CutId int64  `protobuf:"varint,1,opt,name=cut_id,json=cutId,proto3" json:"cut_id,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *User_GetCutSceneIdResponse) Reset()      { *m = User_GetCutSceneIdResponse{} }
func (*User_GetCutSceneIdResponse) ProtoMessage() {}
func (*User_GetCutSceneIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 18}
}
func (m *User_GetCutSceneIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetCutSceneIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetCutSceneIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetCutSceneIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetCutSceneIdResponse.Merge(m, src)
}
func (m *User_GetCutSceneIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetCutSceneIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetCutSceneIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetCutSceneIdResponse proto.InternalMessageInfo

func (m *User_GetCutSceneIdResponse) GetCutId() int64 {
	if m != nil {
		return m.CutId
	}
	return 0
}

func (m *User_GetCutSceneIdResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (*User_GetCutSceneIdResponse) XXX_MessageName() string {
	return "service.User.GetCutSceneIdResponse"
}

// 设置开场动画Id
type User_SetCutSceneIdRequest struct {
	CutId int64  `protobuf:"varint,1,opt,name=cut_id,json=cutId,proto3" json:"cut_id,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *User_SetCutSceneIdRequest) Reset()      { *m = User_SetCutSceneIdRequest{} }
func (*User_SetCutSceneIdRequest) ProtoMessage() {}
func (*User_SetCutSceneIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 19}
}
func (m *User_SetCutSceneIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetCutSceneIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetCutSceneIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetCutSceneIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetCutSceneIdRequest.Merge(m, src)
}
func (m *User_SetCutSceneIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_SetCutSceneIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetCutSceneIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetCutSceneIdRequest proto.InternalMessageInfo

func (m *User_SetCutSceneIdRequest) GetCutId() int64 {
	if m != nil {
		return m.CutId
	}
	return 0
}

func (m *User_SetCutSceneIdRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (*User_SetCutSceneIdRequest) XXX_MessageName() string {
	return "service.User.SetCutSceneIdRequest"
}

type User_SetCutSceneIdResponse struct {
}

func (m *User_SetCutSceneIdResponse) Reset()      { *m = User_SetCutSceneIdResponse{} }
func (*User_SetCutSceneIdResponse) ProtoMessage() {}
func (*User_SetCutSceneIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 20}
}
func (m *User_SetCutSceneIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_SetCutSceneIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_SetCutSceneIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_SetCutSceneIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_SetCutSceneIdResponse.Merge(m, src)
}
func (m *User_SetCutSceneIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_SetCutSceneIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_SetCutSceneIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_SetCutSceneIdResponse proto.InternalMessageInfo

func (*User_SetCutSceneIdResponse) XXX_MessageName() string {
	return "service.User.SetCutSceneIdResponse"
}

// 获取特殊技能加成
type User_GetExtraSkillCntRequest struct {
	TypId int64 `protobuf:"varint,1,opt,name=typ_id,json=typId,proto3" json:"typ_id,omitempty"`
}

func (m *User_GetExtraSkillCntRequest) Reset()      { *m = User_GetExtraSkillCntRequest{} }
func (*User_GetExtraSkillCntRequest) ProtoMessage() {}
func (*User_GetExtraSkillCntRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 21}
}
func (m *User_GetExtraSkillCntRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetExtraSkillCntRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetExtraSkillCntRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetExtraSkillCntRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetExtraSkillCntRequest.Merge(m, src)
}
func (m *User_GetExtraSkillCntRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_GetExtraSkillCntRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetExtraSkillCntRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetExtraSkillCntRequest proto.InternalMessageInfo

func (m *User_GetExtraSkillCntRequest) GetTypId() int64 {
	if m != nil {
		return m.TypId
	}
	return 0
}

func (*User_GetExtraSkillCntRequest) XXX_MessageName() string {
	return "service.User.GetExtraSkillCntRequest"
}

type User_GetExtraSkillCntResponse struct {
	Cnt map[int64]int64 `protobuf:"bytes,1,rep,name=cnt,proto3" json:"cnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *User_GetExtraSkillCntResponse) Reset()      { *m = User_GetExtraSkillCntResponse{} }
func (*User_GetExtraSkillCntResponse) ProtoMessage() {}
func (*User_GetExtraSkillCntResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 22}
}
func (m *User_GetExtraSkillCntResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_GetExtraSkillCntResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_GetExtraSkillCntResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_GetExtraSkillCntResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_GetExtraSkillCntResponse.Merge(m, src)
}
func (m *User_GetExtraSkillCntResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_GetExtraSkillCntResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_GetExtraSkillCntResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_GetExtraSkillCntResponse proto.InternalMessageInfo

func (m *User_GetExtraSkillCntResponse) GetCnt() map[int64]int64 {
	if m != nil {
		return m.Cnt
	}
	return nil
}

func (*User_GetExtraSkillCntResponse) XXX_MessageName() string {
	return "service.User.GetExtraSkillCntResponse"
}

// 使用兑换码
type User_UseCdKeyRequest struct {
	CdKey string `protobuf:"bytes,1,opt,name=cd_key,json=cdKey,proto3" json:"cd_key,omitempty"`
}

func (m *User_UseCdKeyRequest) Reset()      { *m = User_UseCdKeyRequest{} }
func (*User_UseCdKeyRequest) ProtoMessage() {}
func (*User_UseCdKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 23}
}
func (m *User_UseCdKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UseCdKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UseCdKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UseCdKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UseCdKeyRequest.Merge(m, src)
}
func (m *User_UseCdKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_UseCdKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UseCdKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_UseCdKeyRequest proto.InternalMessageInfo

func (m *User_UseCdKeyRequest) GetCdKey() string {
	if m != nil {
		return m.CdKey
	}
	return ""
}

func (*User_UseCdKeyRequest) XXX_MessageName() string {
	return "service.User.UseCdKeyRequest"
}

type User_UseCdKeyResponse struct {
	Items []*models.Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *User_UseCdKeyResponse) Reset()      { *m = User_UseCdKeyResponse{} }
func (*User_UseCdKeyResponse) ProtoMessage() {}
func (*User_UseCdKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 24}
}
func (m *User_UseCdKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UseCdKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UseCdKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UseCdKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UseCdKeyResponse.Merge(m, src)
}
func (m *User_UseCdKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_UseCdKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UseCdKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_UseCdKeyResponse proto.InternalMessageInfo

func (m *User_UseCdKeyResponse) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*User_UseCdKeyResponse) XXX_MessageName() string {
	return "service.User.UseCdKeyResponse"
}

// 玩家昵称是否存在
type User_PlayerNameExistRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *User_PlayerNameExistRequest) Reset()      { *m = User_PlayerNameExistRequest{} }
func (*User_PlayerNameExistRequest) ProtoMessage() {}
func (*User_PlayerNameExistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 25}
}
func (m *User_PlayerNameExistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_PlayerNameExistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_PlayerNameExistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_PlayerNameExistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_PlayerNameExistRequest.Merge(m, src)
}
func (m *User_PlayerNameExistRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_PlayerNameExistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_PlayerNameExistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_PlayerNameExistRequest proto.InternalMessageInfo

func (m *User_PlayerNameExistRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (*User_PlayerNameExistRequest) XXX_MessageName() string {
	return "service.User.PlayerNameExistRequest"
}

type User_PlayerNameExistResponse struct {
	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *User_PlayerNameExistResponse) Reset()      { *m = User_PlayerNameExistResponse{} }
func (*User_PlayerNameExistResponse) ProtoMessage() {}
func (*User_PlayerNameExistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 26}
}
func (m *User_PlayerNameExistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_PlayerNameExistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_PlayerNameExistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_PlayerNameExistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_PlayerNameExistResponse.Merge(m, src)
}
func (m *User_PlayerNameExistResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_PlayerNameExistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_PlayerNameExistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_PlayerNameExistResponse proto.InternalMessageInfo

func (m *User_PlayerNameExistResponse) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

func (*User_PlayerNameExistResponse) XXX_MessageName() string {
	return "service.User.PlayerNameExistResponse"
}

// 更新玩家（一些）货币，>0增加 <0减少
type User_UpdateUserCurrencyRequest struct {
	Currency map[int64]int64 `protobuf:"bytes,1,rep,name=currency,proto3" json:"currency,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *User_UpdateUserCurrencyRequest) Reset()      { *m = User_UpdateUserCurrencyRequest{} }
func (*User_UpdateUserCurrencyRequest) ProtoMessage() {}
func (*User_UpdateUserCurrencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 27}
}
func (m *User_UpdateUserCurrencyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UpdateUserCurrencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UpdateUserCurrencyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UpdateUserCurrencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UpdateUserCurrencyRequest.Merge(m, src)
}
func (m *User_UpdateUserCurrencyRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_UpdateUserCurrencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UpdateUserCurrencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_UpdateUserCurrencyRequest proto.InternalMessageInfo

func (m *User_UpdateUserCurrencyRequest) GetCurrency() map[int64]int64 {
	if m != nil {
		return m.Currency
	}
	return nil
}

func (*User_UpdateUserCurrencyRequest) XXX_MessageName() string {
	return "service.User.UpdateUserCurrencyRequest"
}

type User_UpdateUserCurrencyResponse struct {
}

func (m *User_UpdateUserCurrencyResponse) Reset()      { *m = User_UpdateUserCurrencyResponse{} }
func (*User_UpdateUserCurrencyResponse) ProtoMessage() {}
func (*User_UpdateUserCurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 28}
}
func (m *User_UpdateUserCurrencyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UpdateUserCurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UpdateUserCurrencyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UpdateUserCurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UpdateUserCurrencyResponse.Merge(m, src)
}
func (m *User_UpdateUserCurrencyResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_UpdateUserCurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UpdateUserCurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_UpdateUserCurrencyResponse proto.InternalMessageInfo

func (*User_UpdateUserCurrencyResponse) XXX_MessageName() string {
	return "service.User.UpdateUserCurrencyResponse"
}

// 突破头衔推送
type User_TitleRewardsPush struct {
	Info *models.TitleRewards `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *User_TitleRewardsPush) Reset()      { *m = User_TitleRewardsPush{} }
func (*User_TitleRewardsPush) ProtoMessage() {}
func (*User_TitleRewardsPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 29}
}
func (m *User_TitleRewardsPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_TitleRewardsPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_TitleRewardsPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_TitleRewardsPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_TitleRewardsPush.Merge(m, src)
}
func (m *User_TitleRewardsPush) XXX_Size() int {
	return m.Size()
}
func (m *User_TitleRewardsPush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_TitleRewardsPush.DiscardUnknown(m)
}

var xxx_messageInfo_User_TitleRewardsPush proto.InternalMessageInfo

func (m *User_TitleRewardsPush) GetInfo() *models.TitleRewards {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*User_TitleRewardsPush) XXX_MessageName() string {
	return "service.User.TitleRewardsPush"
}

// 玩家总战斗力变化推送
type User_UserCombatValueChangePush struct {
	Old int64 `protobuf:"varint,1,opt,name=old,proto3" json:"old,omitempty"`
	Cur int64 `protobuf:"varint,2,opt,name=cur,proto3" json:"cur,omitempty"`
}

func (m *User_UserCombatValueChangePush) Reset()      { *m = User_UserCombatValueChangePush{} }
func (*User_UserCombatValueChangePush) ProtoMessage() {}
func (*User_UserCombatValueChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 30}
}
func (m *User_UserCombatValueChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_UserCombatValueChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_UserCombatValueChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_UserCombatValueChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_UserCombatValueChangePush.Merge(m, src)
}
func (m *User_UserCombatValueChangePush) XXX_Size() int {
	return m.Size()
}
func (m *User_UserCombatValueChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_UserCombatValueChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_User_UserCombatValueChangePush proto.InternalMessageInfo

func (m *User_UserCombatValueChangePush) GetOld() int64 {
	if m != nil {
		return m.Old
	}
	return 0
}

func (m *User_UserCombatValueChangePush) GetCur() int64 {
	if m != nil {
		return m.Cur
	}
	return 0
}

func (*User_UserCombatValueChangePush) XXX_MessageName() string {
	return "service.User.UserCombatValueChangePush"
}

type User_KickOffUserRequest struct {
	KickoffSeconds int64 `protobuf:"varint,1,opt,name=kickoff_seconds,json=kickoffSeconds,proto3" json:"kickoff_seconds,omitempty"`
	Status         int64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *User_KickOffUserRequest) Reset()      { *m = User_KickOffUserRequest{} }
func (*User_KickOffUserRequest) ProtoMessage() {}
func (*User_KickOffUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 31}
}
func (m *User_KickOffUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_KickOffUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_KickOffUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_KickOffUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_KickOffUserRequest.Merge(m, src)
}
func (m *User_KickOffUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *User_KickOffUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_User_KickOffUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_User_KickOffUserRequest proto.InternalMessageInfo

func (m *User_KickOffUserRequest) GetKickoffSeconds() int64 {
	if m != nil {
		return m.KickoffSeconds
	}
	return 0
}

func (m *User_KickOffUserRequest) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (*User_KickOffUserRequest) XXX_MessageName() string {
	return "service.User.KickOffUserRequest"
}

type User_KickOffUserResponse struct {
}

func (m *User_KickOffUserResponse) Reset()      { *m = User_KickOffUserResponse{} }
func (*User_KickOffUserResponse) ProtoMessage() {}
func (*User_KickOffUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 32}
}
func (m *User_KickOffUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_KickOffUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_KickOffUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_KickOffUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_KickOffUserResponse.Merge(m, src)
}
func (m *User_KickOffUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *User_KickOffUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_User_KickOffUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_User_KickOffUserResponse proto.InternalMessageInfo

func (*User_KickOffUserResponse) XXX_MessageName() string {
	return "service.User.KickOffUserResponse"
}

type User_KickOffSelfPush struct {
	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *User_KickOffSelfPush) Reset()      { *m = User_KickOffSelfPush{} }
func (*User_KickOffSelfPush) ProtoMessage() {}
func (*User_KickOffSelfPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 33}
}
func (m *User_KickOffSelfPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_KickOffSelfPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_KickOffSelfPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_KickOffSelfPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_KickOffSelfPush.Merge(m, src)
}
func (m *User_KickOffSelfPush) XXX_Size() int {
	return m.Size()
}
func (m *User_KickOffSelfPush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_KickOffSelfPush.DiscardUnknown(m)
}

var xxx_messageInfo_User_KickOffSelfPush proto.InternalMessageInfo

func (m *User_KickOffSelfPush) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (*User_KickOffSelfPush) XXX_MessageName() string {
	return "service.User.KickOffSelfPush"
}

type User_RechargeChangePush struct {
	Old int64 `protobuf:"varint,1,opt,name=old,proto3" json:"old,omitempty"`
	New int64 `protobuf:"varint,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (m *User_RechargeChangePush) Reset()      { *m = User_RechargeChangePush{} }
func (*User_RechargeChangePush) ProtoMessage() {}
func (*User_RechargeChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_166a6c2df65212df, []int{0, 34}
}
func (m *User_RechargeChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User_RechargeChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User_RechargeChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User_RechargeChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_RechargeChangePush.Merge(m, src)
}
func (m *User_RechargeChangePush) XXX_Size() int {
	return m.Size()
}
func (m *User_RechargeChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_User_RechargeChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_User_RechargeChangePush proto.InternalMessageInfo

func (m *User_RechargeChangePush) GetOld() int64 {
	if m != nil {
		return m.Old
	}
	return 0
}

func (m *User_RechargeChangePush) GetNew() int64 {
	if m != nil {
		return m.New
	}
	return 0
}

func (*User_RechargeChangePush) XXX_MessageName() string {
	return "service.User.RechargeChangePush"
}
func init() {
	proto.RegisterEnum("service.UserErrorCode", UserErrorCode_name, UserErrorCode_value)
	proto.RegisterType((*User)(nil), "service.User")
	proto.RegisterType((*User_LoginPush)(nil), "service.User.LoginPush")
	proto.RegisterType((*User_LogoutPush)(nil), "service.User.LogoutPush")
	proto.RegisterType((*User_LevelChangeEvent)(nil), "service.User.LevelChangeEvent")
	proto.RegisterType((*User_CheatModifyTimeRequest)(nil), "service.User.CheatModifyTimeRequest")
	proto.RegisterType((*User_CheatModifyTimeResponse)(nil), "service.User.CheatModifyTimeResponse")
	proto.RegisterType((*User_CheatModifyCreateTimeRequest)(nil), "service.User.CheatModifyCreateTimeRequest")
	proto.RegisterType((*User_CheatModifyCreateTimeResponse)(nil), "service.User.CheatModifyCreateTimeResponse")
	proto.RegisterType((*User_AdvanceDungeonFinishEvent)(nil), "service.User.AdvanceDungeonFinishEvent")
	proto.RegisterType((*User_GetBattleSettingDataRequest)(nil), "service.User.GetBattleSettingDataRequest")
	proto.RegisterType((*User_GetBattleSettingDataResponse)(nil), "service.User.GetBattleSettingDataResponse")
	proto.RegisterType((*User_UpdateBattleSettingDataRequest)(nil), "service.User.UpdateBattleSettingDataRequest")
	proto.RegisterType((*User_UpdateBattleSettingDataResponse)(nil), "service.User.UpdateBattleSettingDataResponse")
	proto.RegisterType((*User_GetTitleRewardsInfoRequest)(nil), "service.User.GetTitleRewardsInfoRequest")
	proto.RegisterType((*User_GetTitleRewardsInfoResponse)(nil), "service.User.GetTitleRewardsInfoResponse")
	proto.RegisterType((*User_DrawTitleRewardsRequest)(nil), "service.User.DrawTitleRewardsRequest")
	proto.RegisterType((*User_DrawTitleRewardsResponse)(nil), "service.User.DrawTitleRewardsResponse")
	proto.RegisterType((*User_OtherLoginPush)(nil), "service.User.OtherLoginPush")
	proto.RegisterType((*User_GetCutSceneIdRequest)(nil), "service.User.GetCutSceneIdRequest")
	proto.RegisterType((*User_GetCutSceneIdResponse)(nil), "service.User.GetCutSceneIdResponse")
	proto.RegisterType((*User_SetCutSceneIdRequest)(nil), "service.User.SetCutSceneIdRequest")
	proto.RegisterType((*User_SetCutSceneIdResponse)(nil), "service.User.SetCutSceneIdResponse")
	proto.RegisterType((*User_GetExtraSkillCntRequest)(nil), "service.User.GetExtraSkillCntRequest")
	proto.RegisterType((*User_GetExtraSkillCntResponse)(nil), "service.User.GetExtraSkillCntResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.User.GetExtraSkillCntResponse.CntEntry")
	proto.RegisterType((*User_UseCdKeyRequest)(nil), "service.User.UseCdKeyRequest")
	proto.RegisterType((*User_UseCdKeyResponse)(nil), "service.User.UseCdKeyResponse")
	proto.RegisterType((*User_PlayerNameExistRequest)(nil), "service.User.PlayerNameExistRequest")
	proto.RegisterType((*User_PlayerNameExistResponse)(nil), "service.User.PlayerNameExistResponse")
	proto.RegisterType((*User_UpdateUserCurrencyRequest)(nil), "service.User.UpdateUserCurrencyRequest")
	proto.RegisterMapType((map[int64]int64)(nil), "service.User.UpdateUserCurrencyRequest.CurrencyEntry")
	proto.RegisterType((*User_UpdateUserCurrencyResponse)(nil), "service.User.UpdateUserCurrencyResponse")
	proto.RegisterType((*User_TitleRewardsPush)(nil), "service.User.TitleRewardsPush")
	proto.RegisterType((*User_UserCombatValueChangePush)(nil), "service.User.UserCombatValueChangePush")
	proto.RegisterType((*User_KickOffUserRequest)(nil), "service.User.KickOffUserRequest")
	proto.RegisterType((*User_KickOffUserResponse)(nil), "service.User.KickOffUserResponse")
	proto.RegisterType((*User_KickOffSelfPush)(nil), "service.User.KickOffSelfPush")
	proto.RegisterType((*User_RechargeChangePush)(nil), "service.User.RechargeChangePush")
}

func init() { proto.RegisterFile("proto/service/user.proto", fileDescriptor_166a6c2df65212df) }

var fileDescriptor_166a6c2df65212df = []byte{
	// 1243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6f, 0x13, 0x47,
	0x14, 0xcf, 0xc6, 0x49, 0x9a, 0x3c, 0x3e, 0x62, 0xb6, 0xf9, 0x70, 0x86, 0x64, 0x09, 0xf4, 0x40,
	0x5a, 0x81, 0x8d, 0xa8, 0x8a, 0x28, 0xb4, 0x6a, 0x83, 0x71, 0x53, 0x0b, 0x92, 0x50, 0x9b, 0xf4,
	0xd0, 0x8b, 0xb5, 0xec, 0x3e, 0x3b, 0xab, 0xd8, 0xb3, 0xe9, 0xcc, 0x38, 0xc1, 0xb7, 0x56, 0x15,
	0x1f, 0xb2, 0x14, 0x85, 0xaa, 0x80, 0x40, 0x6a, 0xa5, 0x82, 0xa8, 0x8a, 0x54, 0x55, 0x94, 0xaa,
	0x69, 0xb9, 0x14, 0xae, 0x1c, 0x39, 0x72, 0x6c, 0x13, 0x36, 0x1f, 0xb7, 0xfe, 0x09, 0xd5, 0xec,
	0xce, 0x26, 0x8e, 0x13, 0xab, 0xcd, 0x6d, 0xe7, 0xf7, 0xde, 0xef, 0xf7, 0x3e, 0xe6, 0xbd, 0xb1,
	0x21, 0x36, 0xcd, 0x5c, 0xe1, 0x26, 0x38, 0xb2, 0x19, 0xc7, 0xc2, 0x44, 0x99, 0x23, 0x8b, 0xfb,
	0x90, 0xfe, 0x9a, 0xc2, 0x48, 0x6f, 0xe0, 0x52, 0x72, 0x6d, 0x2c, 0xf2, 0x1a, 0x8f, 0x3a, 0xc3,
	0x25, 0x93, 0xa3, 0x32, 0xf4, 0xd4, 0x19, 0x0a, 0x01, 0x7e, 0xe8, 0x69, 0x27, 0xb4, 0x4c, 0x70,
	0x64, 0xe4, 0x08, 0x74, 0x9c, 0x77, 0x0b, 0x0e, 0xbd, 0x50, 0xe6, 0x93, 0xfa, 0x01, 0xd8, 0xe5,
	0xf0, 0x1c, 0xc3, 0x82, 0xc3, 0x05, 0xb2, 0x98, 0x36, 0xa8, 0x0d, 0xb5, 0x67, 0xc0, 0xe1, 0x19,
	0x85, 0x90, 0xdd, 0x00, 0xe7, 0xdd, 0x82, 0x5b, 0x16, 0xd2, 0x9d, 0x0c, 0x41, 0xf4, 0x3c, 0xce,
	0x60, 0x31, 0x39, 0x69, 0xd2, 0x02, 0xa6, 0x66, 0x90, 0x0a, 0xbd, 0x0b, 0x5a, 0x8b, 0x12, 0xf3,
	0xc9, 0x91, 0x4c, 0x70, 0x20, 0xef, 0x42, 0x4f, 0x72, 0x12, 0x4d, 0x31, 0xea, 0xda, 0x4e, 0xbe,
	0x72, 0xd1, 0x29, 0x61, 0x06, 0x3f, 0x2f, 0x23, 0x17, 0x32, 0xa4, 0x70, 0x4a, 0x98, 0x73, 0xf3,
	0x79, 0x8e, 0x42, 0xb1, 0x40, 0x42, 0xe3, 0x3e, 0x42, 0xfa, 0xa0, 0x77, 0x0b, 0x95, 0x4f, 0xbb,
	0x94, 0x23, 0x39, 0x0d, 0xfd, 0x35, 0xa6, 0x24, 0x43, 0x53, 0x60, 0xad, 0xf6, 0x7e, 0xe8, 0xb0,
	0x7c, 0x30, 0x67, 0x86, 0xca, 0xed, 0x01, 0x30, 0x2c, 0xc8, 0x01, 0x18, 0x68, 0x40, 0x56, 0xea,
	0xa7, 0xa0, 0x6f, 0xd8, 0x9e, 0x31, 0xa9, 0x85, 0x67, 0xcb, 0xb4, 0x80, 0x2e, 0xfd, 0xc8, 0xa1,
	0x0e, 0x9f, 0x0c, 0xca, 0x1c, 0x00, 0xb0, 0x03, 0x34, 0xe7, 0xd8, 0x4a, 0xbb, 0x43, 0x21, 0x69,
	0x9b, 0x0c, 0xc0, 0xfe, 0x11, 0x14, 0x67, 0x4c, 0x21, 0x8a, 0x98, 0x45, 0x21, 0x1c, 0x5a, 0x38,
	0x6b, 0x0a, 0x53, 0x25, 0x46, 0x46, 0xa1, 0x7f, 0x7b, 0x73, 0x10, 0x5a, 0x3f, 0x0a, 0x2d, 0xb6,
	0x29, 0x4c, 0x5f, 0x77, 0xd7, 0xf1, 0xbe, 0x78, 0x70, 0x7d, 0xf1, 0xad, 0x04, 0xdf, 0x8d, 0x8c,
	0x83, 0x31, 0x31, 0x6d, 0x9b, 0x02, 0x1b, 0x05, 0xdc, 0xa9, 0xe0, 0x41, 0x38, 0xd0, 0x50, 0x50,
	0x75, 0xa7, 0x1f, 0xc8, 0x08, 0x8a, 0x8b, 0x8e, 0x28, 0x62, 0x06, 0x67, 0x4d, 0x66, 0xf3, 0x34,
	0xcd, 0xbb, 0x61, 0x81, 0x23, 0x7e, 0xfd, 0x5b, 0xad, 0xaa, 0xbe, 0x21, 0x68, 0x71, 0x68, 0xde,
	0x55, 0xe9, 0x74, 0x85, 0xe9, 0xd4, 0xfa, 0x67, 0x7c, 0x0f, 0x92, 0x80, 0xde, 0xb3, 0xcc, 0x9c,
	0xdd, 0x64, 0x51, 0x35, 0x75, 0x41, 0xab, 0x90, 0x70, 0x38, 0x69, 0xfe, 0x81, 0x5c, 0x84, 0xd8,
	0x56, 0x82, 0x0a, 0xbb, 0x2d, 0x43, 0x3f, 0x04, 0xad, 0x8e, 0xc0, 0x12, 0x8f, 0x35, 0x0f, 0x46,
	0x86, 0x76, 0x1d, 0xdf, 0x1d, 0x66, 0x93, 0x16, 0x58, 0xca, 0x04, 0x26, 0x92, 0x80, 0xbd, 0xe3,
	0x62, 0x12, 0xd9, 0xc6, 0xaa, 0x0c, 0x00, 0x14, 0xe5, 0x21, 0x27, 0x47, 0x35, 0x1c, 0x00, 0x1f,
	0x91, 0x43, 0x44, 0x7a, 0xa0, 0x6b, 0x04, 0x45, 0xb2, 0x2c, 0xb2, 0x16, 0x52, 0x4c, 0xdb, 0x61,
	0x63, 0xce, 0x40, 0x77, 0x1d, 0xae, 0x72, 0xeb, 0x86, 0x36, 0xab, 0x2c, 0x36, 0x86, 0xa9, 0xd5,
	0x2a, 0x8b, 0xb4, 0xad, 0xeb, 0xea, 0xe2, 0x9a, 0x07, 0xb5, 0xa1, 0x0e, 0x75, 0x3b, 0xc3, 0xd0,
	0x95, 0xdd, 0x46, 0x7b, 0x27, 0x12, 0xbd, 0xd0, 0x9d, 0xdd, 0x2e, 0x0d, 0x72, 0x0c, 0x7a, 0x47,
	0x50, 0xa4, 0x2e, 0x0b, 0x66, 0x66, 0xa7, 0x9c, 0x62, 0x31, 0x49, 0x45, 0x8d, 0xbc, 0xa8, 0x4c,
	0xd7, 0xc8, 0x8b, 0xca, 0x74, 0xda, 0x26, 0xb7, 0x34, 0x88, 0x6d, 0xa5, 0xa8, 0xaa, 0x86, 0x21,
	0x62, 0x51, 0xb9, 0x7b, 0xb2, 0xb3, 0x89, 0xb8, 0x7a, 0xc7, 0xe2, 0xf2, 0xe5, 0x89, 0x37, 0x22,
	0xc5, 0x93, 0x54, 0xa4, 0xa8, 0x60, 0x95, 0x8c, 0xe4, 0x92, 0x13, 0xd0, 0x1e, 0x02, 0x7a, 0x14,
	0x22, 0x53, 0x58, 0x51, 0xf1, 0xe5, 0xa7, 0xbc, 0xd2, 0x19, 0xb3, 0x58, 0x46, 0xbf, 0xba, 0x48,
	0x26, 0x38, 0x9c, 0x6a, 0x3e, 0xa9, 0x91, 0x21, 0xe8, 0x9c, 0xe0, 0x98, 0xb4, 0xcf, 0x61, 0xa5,
	0xb6, 0x41, 0x76, 0x2e, 0x54, 0xe8, 0xc8, 0xb4, 0x5a, 0xd2, 0x4a, 0x4e, 0x40, 0x74, 0xc3, 0x53,
	0x25, 0xbe, 0x3e, 0x14, 0x5a, 0xe3, 0xa1, 0x38, 0x02, 0x3d, 0x17, 0x8a, 0x66, 0x05, 0xd9, 0x98,
	0x59, 0xc2, 0xd4, 0x65, 0x87, 0xaf, 0xb7, 0x4a, 0x87, 0x16, 0x6a, 0xaa, 0xb1, 0xe8, 0xc8, 0xf8,
	0xdf, 0x72, 0x92, 0xb7, 0x78, 0x6f, 0xcc, 0x25, 0x4a, 0x40, 0x3d, 0xb8, 0xc1, 0x81, 0xfc, 0xa4,
	0x41, 0x5f, 0xb0, 0x85, 0xb2, 0x5d, 0xc9, 0x32, 0x63, 0x48, 0xad, 0xf5, 0x5a, 0x3e, 0x81, 0x76,
	0x4b, 0x41, 0x2a, 0xc7, 0x77, 0x36, 0xb7, 0xb7, 0x21, 0x35, 0x1e, 0x9e, 0x83, 0x26, 0xaf, 0xcb,
	0x90, 0xd3, 0xb0, 0x67, 0x93, 0x69, 0x47, 0xed, 0xee, 0x07, 0xb2, 0x5d, 0x44, 0x35, 0x56, 0xef,
	0x41, 0xb4, 0x76, 0x23, 0xfd, 0x0d, 0xfa, 0xff, 0x8f, 0xc0, 0x07, 0xd0, 0xe7, 0xab, 0xba, 0xa5,
	0x4b, 0xa6, 0xf8, 0x54, 0x86, 0x0c, 0x7e, 0x71, 0x7c, 0x99, 0x28, 0x44, 0xdc, 0x62, 0x38, 0x93,
	0xf2, 0x53, 0x22, 0x56, 0x99, 0xa9, 0x14, 0xe5, 0x27, 0x99, 0x00, 0xfd, 0x9c, 0x63, 0x4d, 0x8d,
	0xe7, 0xf3, 0x52, 0x27, 0x6c, 0xe1, 0x61, 0xe8, 0x9c, 0x72, 0xac, 0x29, 0x37, 0x9f, 0xcf, 0x71,
	0xb4, 0x5c, 0x6a, 0x73, 0xa5, 0xb2, 0x57, 0xc1, 0xd9, 0x00, 0xd5, 0x7b, 0xa0, 0x8d, 0x0b, 0x53,
	0x94, 0xb9, 0xd2, 0x54, 0x27, 0xd2, 0x0d, 0xaf, 0x6f, 0x92, 0x55, 0xc5, 0xbe, 0x09, 0x9d, 0x0a,
	0xce, 0x62, 0x31, 0xef, 0x27, 0xb9, 0xa1, 0xa0, 0x6d, 0x52, 0x38, 0x09, 0x7a, 0x06, 0xad, 0x49,
	0x93, 0x15, 0xfe, 0xb3, 0x24, 0x8a, 0xb3, 0x61, 0x49, 0x14, 0x67, 0xdf, 0x9a, 0x8f, 0xc0, 0x1e,
	0x19, 0x35, 0xc5, 0x98, 0xcb, 0x92, 0xae, 0x8d, 0xfa, 0x87, 0xd0, 0x9f, 0x62, 0xcc, 0x6f, 0x94,
	0x49, 0xa9, 0x2b, 0xea, 0x9e, 0xc1, 0x68, 0x13, 0x31, 0xaa, 0x0b, 0x31, 0xa2, 0xc7, 0x5e, 0x3d,
	0x99, 0xf3, 0xe6, 0x1f, 0xad, 0xdd, 0xbf, 0xea, 0xcd, 0xdf, 0xf6, 0x1e, 0xfc, 0xb6, 0x7a, 0xef,
	0xa6, 0xf7, 0xc3, 0x6d, 0xaf, 0xfa, 0x58, 0x7f, 0x1f, 0xa2, 0x29, 0xc6, 0x46, 0xd1, 0x76, 0x2c,
	0x87, 0xe2, 0xc7, 0xd3, 0xa3, 0xe6, 0xe5, 0xa8, 0x46, 0x0e, 0x57, 0x17, 0x62, 0x6f, 0xe8, 0x07,
	0xbd, 0x1b, 0x5f, 0xad, 0xce, 0x3d, 0x5a, 0xbd, 0xf7, 0xc5, 0xda, 0xb5, 0xf9, 0x95, 0xbb, 0x4f,
	0xbd, 0xeb, 0x57, 0x97, 0x1f, 0xdd, 0x5c, 0xfd, 0xfd, 0xca, 0xea, 0xb3, 0x6b, 0xaf, 0x9e, 0x54,
	0xd7, 0xee, 0xde, 0xa8, 0xa3, 0x8f, 0xfa, 0xf4, 0xe6, 0x3a, 0xfa, 0x37, 0xdf, 0x35, 0xa4, 0x1f,
	0x03, 0x3d, 0xc5, 0x98, 0xbf, 0x86, 0x69, 0x3e, 0xe6, 0x0a, 0x7f, 0x47, 0xa2, 0x11, 0x12, 0xab,
	0x2e, 0xc4, 0xba, 0x74, 0xdd, 0xbb, 0xf2, 0xf5, 0xf2, 0xdc, 0xfd, 0x95, 0xef, 0xbf, 0x94, 0xe9,
	0xff, 0x7c, 0xc7, 0xfb, 0xf6, 0xa1, 0x9e, 0x80, 0xbd, 0x1b, 0x8c, 0x09, 0x8e, 0x76, 0xb4, 0x85,
	0xec, 0xaf, 0x2e, 0xc4, 0x7a, 0xf5, 0xee, 0x75, 0xef, 0xb5, 0x6b, 0x73, 0xde, 0x83, 0xb9, 0x57,
	0x7f, 0x3e, 0x5b, 0xb9, 0xf9, 0x50, 0x3f, 0x02, 0xfb, 0x42, 0xc2, 0x98, 0x2b, 0x86, 0x2d, 0xe1,
	0xcc, 0x60, 0xb4, 0x95, 0x74, 0x57, 0x17, 0x62, 0xfb, 0xf4, 0xce, 0x75, 0x8e, 0xf7, 0xe0, 0xf1,
	0xf2, 0xad, 0xeb, 0xfa, 0x51, 0x3f, 0xa1, 0xba, 0xa5, 0x8d, 0xb6, 0x85, 0xee, 0xcb, 0x77, 0x16,
	0x56, 0x7e, 0xfc, 0xc5, 0xfb, 0xe3, 0xd7, 0x20, 0x9b, 0x33, 0x63, 0x2f, 0xff, 0x36, 0x9a, 0x1e,
	0x2e, 0x1a, 0xda, 0xf3, 0x45, 0x43, 0x7b, 0xb1, 0x68, 0x68, 0x7f, 0x2d, 0x1a, 0xda, 0xea, 0xa2,
	0xd1, 0xf4, 0xcf, 0xa2, 0xa1, 0xdd, 0x58, 0x32, 0x9a, 0x9e, 0x2f, 0x19, 0xda, 0x8b, 0x25, 0xa3,
	0xe9, 0xe5, 0x92, 0xd1, 0xf4, 0xd9, 0xa0, 0xe5, 0x3a, 0xf4, 0xa8, 0xdc, 0x58, 0x64, 0x09, 0xcb,
	0x2d, 0x95, 0x5c, 0x9a, 0xd8, 0xf4, 0x07, 0xf0, 0x52, 0x9b, 0x7f, 0x7c, 0xfb, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x0c, 0x12, 0x32, 0x28, 0x18, 0x0a, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_LoginPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_LogoutPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_LevelChangeEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatModifyTimeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatModifyTimeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatModifyCreateTimeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_CheatModifyCreateTimeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_AdvanceDungeonFinishEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetBattleSettingDataRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetBattleSettingDataResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UpdateBattleSettingDataRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UpdateBattleSettingDataResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetTitleRewardsInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetTitleRewardsInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_DrawTitleRewardsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_DrawTitleRewardsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_OtherLoginPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetCutSceneIdRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetCutSceneIdResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetCutSceneIdRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_SetCutSceneIdResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetExtraSkillCntRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_GetExtraSkillCntResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UseCdKeyRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UseCdKeyResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_PlayerNameExistRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_PlayerNameExistResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UpdateUserCurrencyRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UpdateUserCurrencyResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_TitleRewardsPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_UserCombatValueChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_KickOffUserRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_KickOffUserResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_KickOffSelfPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser_RechargeChangePush.Get().(proto.Message)
	})
}

var poolUser = &sync.Pool{New: func() interface{} { return &User{} }}

func (m *User) ReleasePool() { m.Reset(); poolUser.Put(m); m = nil }

var poolUser_LoginPush = &sync.Pool{New: func() interface{} { return &User_LoginPush{} }}

func (m *User_LoginPush) ReleasePool() { m.Reset(); poolUser_LoginPush.Put(m); m = nil }

var poolUser_LogoutPush = &sync.Pool{New: func() interface{} { return &User_LogoutPush{} }}

func (m *User_LogoutPush) ReleasePool() { m.Reset(); poolUser_LogoutPush.Put(m); m = nil }

var poolUser_LevelChangeEvent = &sync.Pool{New: func() interface{} { return &User_LevelChangeEvent{} }}

func (m *User_LevelChangeEvent) ReleasePool() { m.Reset(); poolUser_LevelChangeEvent.Put(m); m = nil }

var poolUser_CheatModifyTimeRequest = &sync.Pool{New: func() interface{} { return &User_CheatModifyTimeRequest{} }}

func (m *User_CheatModifyTimeRequest) ReleasePool() {
	m.Reset()
	poolUser_CheatModifyTimeRequest.Put(m)
	m = nil
}

var poolUser_CheatModifyTimeResponse = &sync.Pool{New: func() interface{} { return &User_CheatModifyTimeResponse{} }}

func (m *User_CheatModifyTimeResponse) ReleasePool() {
	m.Reset()
	poolUser_CheatModifyTimeResponse.Put(m)
	m = nil
}

var poolUser_CheatModifyCreateTimeRequest = &sync.Pool{New: func() interface{} { return &User_CheatModifyCreateTimeRequest{} }}

func (m *User_CheatModifyCreateTimeRequest) ReleasePool() {
	m.Reset()
	poolUser_CheatModifyCreateTimeRequest.Put(m)
	m = nil
}

var poolUser_CheatModifyCreateTimeResponse = &sync.Pool{New: func() interface{} { return &User_CheatModifyCreateTimeResponse{} }}

func (m *User_CheatModifyCreateTimeResponse) ReleasePool() {
	m.Reset()
	poolUser_CheatModifyCreateTimeResponse.Put(m)
	m = nil
}

var poolUser_AdvanceDungeonFinishEvent = &sync.Pool{New: func() interface{} { return &User_AdvanceDungeonFinishEvent{} }}

func (m *User_AdvanceDungeonFinishEvent) ReleasePool() {
	m.Reset()
	poolUser_AdvanceDungeonFinishEvent.Put(m)
	m = nil
}

var poolUser_GetBattleSettingDataRequest = &sync.Pool{New: func() interface{} { return &User_GetBattleSettingDataRequest{} }}

func (m *User_GetBattleSettingDataRequest) ReleasePool() {
	m.Reset()
	poolUser_GetBattleSettingDataRequest.Put(m)
	m = nil
}

var poolUser_GetBattleSettingDataResponse = &sync.Pool{New: func() interface{} { return &User_GetBattleSettingDataResponse{} }}

func (m *User_GetBattleSettingDataResponse) ReleasePool() {
	m.Reset()
	poolUser_GetBattleSettingDataResponse.Put(m)
	m = nil
}

var poolUser_UpdateBattleSettingDataRequest = &sync.Pool{New: func() interface{} { return &User_UpdateBattleSettingDataRequest{} }}

func (m *User_UpdateBattleSettingDataRequest) ReleasePool() {
	m.Reset()
	poolUser_UpdateBattleSettingDataRequest.Put(m)
	m = nil
}

var poolUser_UpdateBattleSettingDataResponse = &sync.Pool{New: func() interface{} { return &User_UpdateBattleSettingDataResponse{} }}

func (m *User_UpdateBattleSettingDataResponse) ReleasePool() {
	m.Reset()
	poolUser_UpdateBattleSettingDataResponse.Put(m)
	m = nil
}

var poolUser_GetTitleRewardsInfoRequest = &sync.Pool{New: func() interface{} { return &User_GetTitleRewardsInfoRequest{} }}

func (m *User_GetTitleRewardsInfoRequest) ReleasePool() {
	m.Reset()
	poolUser_GetTitleRewardsInfoRequest.Put(m)
	m = nil
}

var poolUser_GetTitleRewardsInfoResponse = &sync.Pool{New: func() interface{} { return &User_GetTitleRewardsInfoResponse{} }}

func (m *User_GetTitleRewardsInfoResponse) ReleasePool() {
	m.Reset()
	poolUser_GetTitleRewardsInfoResponse.Put(m)
	m = nil
}

var poolUser_DrawTitleRewardsRequest = &sync.Pool{New: func() interface{} { return &User_DrawTitleRewardsRequest{} }}

func (m *User_DrawTitleRewardsRequest) ReleasePool() {
	m.Reset()
	poolUser_DrawTitleRewardsRequest.Put(m)
	m = nil
}

var poolUser_DrawTitleRewardsResponse = &sync.Pool{New: func() interface{} { return &User_DrawTitleRewardsResponse{} }}

func (m *User_DrawTitleRewardsResponse) ReleasePool() {
	m.Reset()
	poolUser_DrawTitleRewardsResponse.Put(m)
	m = nil
}

var poolUser_OtherLoginPush = &sync.Pool{New: func() interface{} { return &User_OtherLoginPush{} }}

func (m *User_OtherLoginPush) ReleasePool() { m.Reset(); poolUser_OtherLoginPush.Put(m); m = nil }

var poolUser_GetCutSceneIdRequest = &sync.Pool{New: func() interface{} { return &User_GetCutSceneIdRequest{} }}

func (m *User_GetCutSceneIdRequest) ReleasePool() {
	m.Reset()
	poolUser_GetCutSceneIdRequest.Put(m)
	m = nil
}

var poolUser_GetCutSceneIdResponse = &sync.Pool{New: func() interface{} { return &User_GetCutSceneIdResponse{} }}

func (m *User_GetCutSceneIdResponse) ReleasePool() {
	m.Reset()
	poolUser_GetCutSceneIdResponse.Put(m)
	m = nil
}

var poolUser_SetCutSceneIdRequest = &sync.Pool{New: func() interface{} { return &User_SetCutSceneIdRequest{} }}

func (m *User_SetCutSceneIdRequest) ReleasePool() {
	m.Reset()
	poolUser_SetCutSceneIdRequest.Put(m)
	m = nil
}

var poolUser_SetCutSceneIdResponse = &sync.Pool{New: func() interface{} { return &User_SetCutSceneIdResponse{} }}

func (m *User_SetCutSceneIdResponse) ReleasePool() {
	m.Reset()
	poolUser_SetCutSceneIdResponse.Put(m)
	m = nil
}

var poolUser_GetExtraSkillCntRequest = &sync.Pool{New: func() interface{} { return &User_GetExtraSkillCntRequest{} }}

func (m *User_GetExtraSkillCntRequest) ReleasePool() {
	m.Reset()
	poolUser_GetExtraSkillCntRequest.Put(m)
	m = nil
}

var poolUser_GetExtraSkillCntResponse = &sync.Pool{New: func() interface{} { return &User_GetExtraSkillCntResponse{} }}

func (m *User_GetExtraSkillCntResponse) ReleasePool() {
	m.Reset()
	poolUser_GetExtraSkillCntResponse.Put(m)
	m = nil
}

var poolUser_UseCdKeyRequest = &sync.Pool{New: func() interface{} { return &User_UseCdKeyRequest{} }}

func (m *User_UseCdKeyRequest) ReleasePool() { m.Reset(); poolUser_UseCdKeyRequest.Put(m); m = nil }

var poolUser_UseCdKeyResponse = &sync.Pool{New: func() interface{} { return &User_UseCdKeyResponse{} }}

func (m *User_UseCdKeyResponse) ReleasePool() { m.Reset(); poolUser_UseCdKeyResponse.Put(m); m = nil }

var poolUser_PlayerNameExistRequest = &sync.Pool{New: func() interface{} { return &User_PlayerNameExistRequest{} }}

func (m *User_PlayerNameExistRequest) ReleasePool() {
	m.Reset()
	poolUser_PlayerNameExistRequest.Put(m)
	m = nil
}

var poolUser_PlayerNameExistResponse = &sync.Pool{New: func() interface{} { return &User_PlayerNameExistResponse{} }}

func (m *User_PlayerNameExistResponse) ReleasePool() {
	m.Reset()
	poolUser_PlayerNameExistResponse.Put(m)
	m = nil
}

var poolUser_UpdateUserCurrencyRequest = &sync.Pool{New: func() interface{} { return &User_UpdateUserCurrencyRequest{} }}

func (m *User_UpdateUserCurrencyRequest) ReleasePool() {
	m.Reset()
	poolUser_UpdateUserCurrencyRequest.Put(m)
	m = nil
}

var poolUser_UpdateUserCurrencyResponse = &sync.Pool{New: func() interface{} { return &User_UpdateUserCurrencyResponse{} }}

func (m *User_UpdateUserCurrencyResponse) ReleasePool() {
	m.Reset()
	poolUser_UpdateUserCurrencyResponse.Put(m)
	m = nil
}

var poolUser_TitleRewardsPush = &sync.Pool{New: func() interface{} { return &User_TitleRewardsPush{} }}

func (m *User_TitleRewardsPush) ReleasePool() { m.Reset(); poolUser_TitleRewardsPush.Put(m); m = nil }

var poolUser_UserCombatValueChangePush = &sync.Pool{New: func() interface{} { return &User_UserCombatValueChangePush{} }}

func (m *User_UserCombatValueChangePush) ReleasePool() {
	m.Reset()
	poolUser_UserCombatValueChangePush.Put(m)
	m = nil
}

var poolUser_KickOffUserRequest = &sync.Pool{New: func() interface{} { return &User_KickOffUserRequest{} }}

func (m *User_KickOffUserRequest) ReleasePool() {
	m.Reset()
	poolUser_KickOffUserRequest.Put(m)
	m = nil
}

var poolUser_KickOffUserResponse = &sync.Pool{New: func() interface{} { return &User_KickOffUserResponse{} }}

func (m *User_KickOffUserResponse) ReleasePool() {
	m.Reset()
	poolUser_KickOffUserResponse.Put(m)
	m = nil
}

var poolUser_KickOffSelfPush = &sync.Pool{New: func() interface{} { return &User_KickOffSelfPush{} }}

func (m *User_KickOffSelfPush) ReleasePool() { m.Reset(); poolUser_KickOffSelfPush.Put(m); m = nil }

var poolUser_RechargeChangePush = &sync.Pool{New: func() interface{} { return &User_RechargeChangePush{} }}

func (m *User_RechargeChangePush) ReleasePool() {
	m.Reset()
	poolUser_RechargeChangePush.Put(m)
	m = nil
}
func (x UserErrorCode) String() string {
	s, ok := UserErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_LoginPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_LoginPush)
	if !ok {
		that2, ok := that.(User_LoginPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsRegister != that1.IsRegister {
		return false
	}
	return true
}
func (this *User_LogoutPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_LogoutPush)
	if !ok {
		that2, ok := that.(User_LogoutPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_LevelChangeEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_LevelChangeEvent)
	if !ok {
		that2, ok := that.(User_LevelChangeEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *User_CheatModifyTimeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatModifyTimeRequest)
	if !ok {
		that2, ok := that.(User_CheatModifyTimeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeOffset != that1.TimeOffset {
		return false
	}
	return true
}
func (this *User_CheatModifyTimeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatModifyTimeResponse)
	if !ok {
		that2, ok := that.(User_CheatModifyTimeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_CheatModifyCreateTimeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatModifyCreateTimeRequest)
	if !ok {
		that2, ok := that.(User_CheatModifyCreateTimeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreateAt != that1.CreateAt {
		return false
	}
	return true
}
func (this *User_CheatModifyCreateTimeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_CheatModifyCreateTimeResponse)
	if !ok {
		that2, ok := that.(User_CheatModifyCreateTimeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_AdvanceDungeonFinishEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_AdvanceDungeonFinishEvent)
	if !ok {
		that2, ok := that.(User_AdvanceDungeonFinishEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	return true
}
func (this *User_GetBattleSettingDataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetBattleSettingDataRequest)
	if !ok {
		that2, ok := that.(User_GetBattleSettingDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetBattleSettingDataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetBattleSettingDataResponse)
	if !ok {
		that2, ok := that.(User_GetBattleSettingDataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *User_UpdateBattleSettingDataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UpdateBattleSettingDataRequest)
	if !ok {
		that2, ok := that.(User_UpdateBattleSettingDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *User_UpdateBattleSettingDataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UpdateBattleSettingDataResponse)
	if !ok {
		that2, ok := that.(User_UpdateBattleSettingDataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetTitleRewardsInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetTitleRewardsInfoRequest)
	if !ok {
		that2, ok := that.(User_GetTitleRewardsInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetTitleRewardsInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetTitleRewardsInfoResponse)
	if !ok {
		that2, ok := that.(User_GetTitleRewardsInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *User_DrawTitleRewardsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_DrawTitleRewardsRequest)
	if !ok {
		that2, ok := that.(User_DrawTitleRewardsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *User_DrawTitleRewardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_DrawTitleRewardsResponse)
	if !ok {
		that2, ok := that.(User_DrawTitleRewardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *User_OtherLoginPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_OtherLoginPush)
	if !ok {
		that2, ok := that.(User_OtherLoginPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoginTime != that1.LoginTime {
		return false
	}
	return true
}
func (this *User_GetCutSceneIdRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetCutSceneIdRequest)
	if !ok {
		that2, ok := that.(User_GetCutSceneIdRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetCutSceneIdResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetCutSceneIdResponse)
	if !ok {
		that2, ok := that.(User_GetCutSceneIdResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CutId != that1.CutId {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *User_SetCutSceneIdRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetCutSceneIdRequest)
	if !ok {
		that2, ok := that.(User_SetCutSceneIdRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CutId != that1.CutId {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *User_SetCutSceneIdResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_SetCutSceneIdResponse)
	if !ok {
		that2, ok := that.(User_SetCutSceneIdResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_GetExtraSkillCntRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetExtraSkillCntRequest)
	if !ok {
		that2, ok := that.(User_GetExtraSkillCntRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TypId != that1.TypId {
		return false
	}
	return true
}
func (this *User_GetExtraSkillCntResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_GetExtraSkillCntResponse)
	if !ok {
		that2, ok := that.(User_GetExtraSkillCntResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cnt) != len(that1.Cnt) {
		return false
	}
	for i := range this.Cnt {
		if this.Cnt[i] != that1.Cnt[i] {
			return false
		}
	}
	return true
}
func (this *User_UseCdKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UseCdKeyRequest)
	if !ok {
		that2, ok := that.(User_UseCdKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CdKey != that1.CdKey {
		return false
	}
	return true
}
func (this *User_UseCdKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UseCdKeyResponse)
	if !ok {
		that2, ok := that.(User_UseCdKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *User_PlayerNameExistRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_PlayerNameExistRequest)
	if !ok {
		that2, ok := that.(User_PlayerNameExistRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *User_PlayerNameExistResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_PlayerNameExistResponse)
	if !ok {
		that2, ok := that.(User_PlayerNameExistResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exist != that1.Exist {
		return false
	}
	return true
}
func (this *User_UpdateUserCurrencyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UpdateUserCurrencyRequest)
	if !ok {
		that2, ok := that.(User_UpdateUserCurrencyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Currency) != len(that1.Currency) {
		return false
	}
	for i := range this.Currency {
		if this.Currency[i] != that1.Currency[i] {
			return false
		}
	}
	return true
}
func (this *User_UpdateUserCurrencyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UpdateUserCurrencyResponse)
	if !ok {
		that2, ok := that.(User_UpdateUserCurrencyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_TitleRewardsPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_TitleRewardsPush)
	if !ok {
		that2, ok := that.(User_TitleRewardsPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *User_UserCombatValueChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_UserCombatValueChangePush)
	if !ok {
		that2, ok := that.(User_UserCombatValueChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Old != that1.Old {
		return false
	}
	if this.Cur != that1.Cur {
		return false
	}
	return true
}
func (this *User_KickOffUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_KickOffUserRequest)
	if !ok {
		that2, ok := that.(User_KickOffUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KickoffSeconds != that1.KickoffSeconds {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *User_KickOffUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_KickOffUserResponse)
	if !ok {
		that2, ok := that.(User_KickOffUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User_KickOffSelfPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_KickOffSelfPush)
	if !ok {
		that2, ok := that.(User_KickOffSelfPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *User_RechargeChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User_RechargeChangePush)
	if !ok {
		that2, ok := that.(User_RechargeChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Old != that1.Old {
		return false
	}
	if this.New != that1.New {
		return false
	}
	return true
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_LoginPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_LoginPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_LoginPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegister {
		i--
		if m.IsRegister {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_LogoutPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_LogoutPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_LogoutPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_LevelChangeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_LevelChangeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_LevelChangeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatModifyTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatModifyTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatModifyTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeOffset != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TimeOffset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatModifyTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatModifyTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatModifyTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_CheatModifyCreateTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatModifyCreateTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatModifyCreateTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateAt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_CheatModifyCreateTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_CheatModifyCreateTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_CheatModifyCreateTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_AdvanceDungeonFinishEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_AdvanceDungeonFinishEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AdvanceDungeonFinishEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DungeonId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.DungeonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_GetBattleSettingDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetBattleSettingDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetBattleSettingDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetBattleSettingDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetBattleSettingDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetBattleSettingDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_UpdateBattleSettingDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UpdateBattleSettingDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UpdateBattleSettingDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_UpdateBattleSettingDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UpdateBattleSettingDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UpdateBattleSettingDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetTitleRewardsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetTitleRewardsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetTitleRewardsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetTitleRewardsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetTitleRewardsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetTitleRewardsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_DrawTitleRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_DrawTitleRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_DrawTitleRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Title != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_DrawTitleRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_DrawTitleRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_DrawTitleRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Title != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_OtherLoginPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_OtherLoginPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_OtherLoginPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoginTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LoginTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_GetCutSceneIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetCutSceneIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetCutSceneIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetCutSceneIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetCutSceneIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetCutSceneIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.CutId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CutId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_SetCutSceneIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetCutSceneIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetCutSceneIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.CutId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CutId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_SetCutSceneIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_SetCutSceneIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_SetCutSceneIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_GetExtraSkillCntRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetExtraSkillCntRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetExtraSkillCntRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.TypId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_GetExtraSkillCntResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_GetExtraSkillCntResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_GetExtraSkillCntResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cnt) > 0 {
		for k := range m.Cnt {
			v := m.Cnt[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_UseCdKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UseCdKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UseCdKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CdKey) > 0 {
		i -= len(m.CdKey)
		copy(dAtA[i:], m.CdKey)
		i = encodeVarintUser(dAtA, i, uint64(len(m.CdKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_UseCdKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UseCdKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UseCdKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_PlayerNameExistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_PlayerNameExistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_PlayerNameExistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_PlayerNameExistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_PlayerNameExistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_PlayerNameExistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_UpdateUserCurrencyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UpdateUserCurrencyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UpdateUserCurrencyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Currency) > 0 {
		for k := range m.Currency {
			v := m.Currency[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_UpdateUserCurrencyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UpdateUserCurrencyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UpdateUserCurrencyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_TitleRewardsPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_TitleRewardsPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_TitleRewardsPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User_UserCombatValueChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_UserCombatValueChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_UserCombatValueChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cur != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Cur))
		i--
		dAtA[i] = 0x10
	}
	if m.Old != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Old))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_KickOffUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_KickOffUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_KickOffUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.KickoffSeconds != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.KickoffSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_KickOffUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_KickOffUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_KickOffUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User_KickOffSelfPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_KickOffSelfPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_KickOffSelfPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User_RechargeChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User_RechargeChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_RechargeChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.New != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.New))
		i--
		dAtA[i] = 0x10
	}
	if m.Old != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Old))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *User) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_LoginPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsRegister {
		w.RawByte('"')
		w.RawString("is_register")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRegister)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_LogoutPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_LevelChangeEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Level != 0 {
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatModifyTimeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TimeOffset != 0 {
		w.RawByte('"')
		w.RawString("time_offset")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TimeOffset))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatModifyTimeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_CheatModifyCreateTimeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CreateAt != 0 {
		w.RawByte('"')
		w.RawString("create_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreateAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_CheatModifyCreateTimeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_AdvanceDungeonFinishEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DungeonId != 0 {
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetBattleSettingDataRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetBattleSettingDataResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	m.Data.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UpdateBattleSettingDataRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	m.Data.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UpdateBattleSettingDataResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetTitleRewardsInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetTitleRewardsInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_DrawTitleRewardsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Title != 0 {
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_DrawTitleRewardsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Title != 0 {
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_OtherLoginPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.LoginTime != 0 {
		w.RawByte('"')
		w.RawString("login_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LoginTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetCutSceneIdRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetCutSceneIdResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CutId != 0 {
		w.RawByte('"')
		w.RawString("cut_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CutId))
		needWriteComma = true
	}
	if m.Data != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("data")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Data)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetCutSceneIdRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CutId != 0 {
		w.RawByte('"')
		w.RawString("cut_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CutId))
		needWriteComma = true
	}
	if m.Data != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("data")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Data)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_SetCutSceneIdResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_GetExtraSkillCntRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TypId != 0 {
		w.RawByte('"')
		w.RawString("typ_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TypId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_GetExtraSkillCntResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("cnt")
	w.RawByte('"')
	w.RawByte(':')
	if m.Cnt == nil {
		w.RawString("null")
	} else if len(m.Cnt) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCnt := len(m.Cnt)
		for k, v := range m.Cnt {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCnt--
			if mlCnt != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UseCdKeyRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CdKey != "" {
		w.RawByte('"')
		w.RawString("cd_key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.CdKey)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UseCdKeyResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_PlayerNameExistRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Name != "" {
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_PlayerNameExistResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Exist {
		w.RawByte('"')
		w.RawString("exist")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Exist)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UpdateUserCurrencyRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("currency")
	w.RawByte('"')
	w.RawByte(':')
	if m.Currency == nil {
		w.RawString("null")
	} else if len(m.Currency) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCurrency := len(m.Currency)
		for k, v := range m.Currency {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCurrency--
			if mlCurrency != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UpdateUserCurrencyResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_TitleRewardsPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_UserCombatValueChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Old != 0 {
		w.RawByte('"')
		w.RawString("old")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Old))
		needWriteComma = true
	}
	if m.Cur != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cur))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_KickOffUserRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.KickoffSeconds != 0 {
		w.RawByte('"')
		w.RawString("kickoff_seconds")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.KickoffSeconds))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_KickOffUserResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *User_KickOffSelfPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Status != 0 {
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User_RechargeChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Old != 0 {
		w.RawByte('"')
		w.RawString("old")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Old))
		needWriteComma = true
	}
	if m.New != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("new")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.New))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User) GoString() string {
	return m.String()
}

func (m *User_LoginPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_LoginPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_LoginPush) GoString() string {
	return m.String()
}

func (m *User_LogoutPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_LogoutPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_LogoutPush) GoString() string {
	return m.String()
}

func (m *User_LevelChangeEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_LevelChangeEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_LevelChangeEvent) GoString() string {
	return m.String()
}

func (m *User_CheatModifyTimeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatModifyTimeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatModifyTimeRequest) GoString() string {
	return m.String()
}

func (m *User_CheatModifyTimeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatModifyTimeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatModifyTimeResponse) GoString() string {
	return m.String()
}

func (m *User_CheatModifyCreateTimeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatModifyCreateTimeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatModifyCreateTimeRequest) GoString() string {
	return m.String()
}

func (m *User_CheatModifyCreateTimeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_CheatModifyCreateTimeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_CheatModifyCreateTimeResponse) GoString() string {
	return m.String()
}

func (m *User_AdvanceDungeonFinishEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_AdvanceDungeonFinishEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_AdvanceDungeonFinishEvent) GoString() string {
	return m.String()
}

func (m *User_GetBattleSettingDataRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetBattleSettingDataRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetBattleSettingDataRequest) GoString() string {
	return m.String()
}

func (m *User_GetBattleSettingDataResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetBattleSettingDataResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetBattleSettingDataResponse) GoString() string {
	return m.String()
}

func (m *User_UpdateBattleSettingDataRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UpdateBattleSettingDataRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UpdateBattleSettingDataRequest) GoString() string {
	return m.String()
}

func (m *User_UpdateBattleSettingDataResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UpdateBattleSettingDataResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UpdateBattleSettingDataResponse) GoString() string {
	return m.String()
}

func (m *User_GetTitleRewardsInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetTitleRewardsInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetTitleRewardsInfoRequest) GoString() string {
	return m.String()
}

func (m *User_GetTitleRewardsInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetTitleRewardsInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetTitleRewardsInfoResponse) GoString() string {
	return m.String()
}

func (m *User_DrawTitleRewardsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_DrawTitleRewardsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_DrawTitleRewardsRequest) GoString() string {
	return m.String()
}

func (m *User_DrawTitleRewardsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_DrawTitleRewardsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_DrawTitleRewardsResponse) GoString() string {
	return m.String()
}

func (m *User_OtherLoginPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_OtherLoginPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_OtherLoginPush) GoString() string {
	return m.String()
}

func (m *User_GetCutSceneIdRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetCutSceneIdRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetCutSceneIdRequest) GoString() string {
	return m.String()
}

func (m *User_GetCutSceneIdResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetCutSceneIdResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetCutSceneIdResponse) GoString() string {
	return m.String()
}

func (m *User_SetCutSceneIdRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetCutSceneIdRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetCutSceneIdRequest) GoString() string {
	return m.String()
}

func (m *User_SetCutSceneIdResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_SetCutSceneIdResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_SetCutSceneIdResponse) GoString() string {
	return m.String()
}

func (m *User_GetExtraSkillCntRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetExtraSkillCntRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetExtraSkillCntRequest) GoString() string {
	return m.String()
}

func (m *User_GetExtraSkillCntResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_GetExtraSkillCntResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_GetExtraSkillCntResponse) GoString() string {
	return m.String()
}

func (m *User_UseCdKeyRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UseCdKeyRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UseCdKeyRequest) GoString() string {
	return m.String()
}

func (m *User_UseCdKeyResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UseCdKeyResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UseCdKeyResponse) GoString() string {
	return m.String()
}

func (m *User_PlayerNameExistRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_PlayerNameExistRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_PlayerNameExistRequest) GoString() string {
	return m.String()
}

func (m *User_PlayerNameExistResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_PlayerNameExistResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_PlayerNameExistResponse) GoString() string {
	return m.String()
}

func (m *User_UpdateUserCurrencyRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UpdateUserCurrencyRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UpdateUserCurrencyRequest) GoString() string {
	return m.String()
}

func (m *User_UpdateUserCurrencyResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UpdateUserCurrencyResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UpdateUserCurrencyResponse) GoString() string {
	return m.String()
}

func (m *User_TitleRewardsPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_TitleRewardsPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_TitleRewardsPush) GoString() string {
	return m.String()
}

func (m *User_UserCombatValueChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_UserCombatValueChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_UserCombatValueChangePush) GoString() string {
	return m.String()
}

func (m *User_KickOffUserRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_KickOffUserRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_KickOffUserRequest) GoString() string {
	return m.String()
}

func (m *User_KickOffUserResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_KickOffUserResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_KickOffUserResponse) GoString() string {
	return m.String()
}

func (m *User_KickOffSelfPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_KickOffSelfPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_KickOffSelfPush) GoString() string {
	return m.String()
}

func (m *User_RechargeChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User_RechargeChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User_RechargeChangePush) GoString() string {
	return m.String()
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_LoginPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegister {
		n += 2
	}
	return n
}

func (m *User_LogoutPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_LevelChangeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	return n
}

func (m *User_CheatModifyTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeOffset != 0 {
		n += 1 + sovUser(uint64(m.TimeOffset))
	}
	return n
}

func (m *User_CheatModifyTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_CheatModifyCreateTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateAt != 0 {
		n += 1 + sovUser(uint64(m.CreateAt))
	}
	return n
}

func (m *User_CheatModifyCreateTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_AdvanceDungeonFinishEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DungeonId != 0 {
		n += 1 + sovUser(uint64(m.DungeonId))
	}
	return n
}

func (m *User_GetBattleSettingDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetBattleSettingDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_UpdateBattleSettingDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_UpdateBattleSettingDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetTitleRewardsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetTitleRewardsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_DrawTitleRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != 0 {
		n += 1 + sovUser(uint64(m.Title))
	}
	return n
}

func (m *User_DrawTitleRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != 0 {
		n += 1 + sovUser(uint64(m.Title))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *User_OtherLoginPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LoginTime != 0 {
		n += 1 + sovUser(uint64(m.LoginTime))
	}
	return n
}

func (m *User_GetCutSceneIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetCutSceneIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CutId != 0 {
		n += 1 + sovUser(uint64(m.CutId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_SetCutSceneIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CutId != 0 {
		n += 1 + sovUser(uint64(m.CutId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_SetCutSceneIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_GetExtraSkillCntRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypId != 0 {
		n += 1 + sovUser(uint64(m.TypId))
	}
	return n
}

func (m *User_GetExtraSkillCntResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cnt) > 0 {
		for k, v := range m.Cnt {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *User_UseCdKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CdKey)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_UseCdKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *User_PlayerNameExistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_PlayerNameExistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	return n
}

func (m *User_UpdateUserCurrencyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Currency) > 0 {
		for k, v := range m.Currency {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *User_UpdateUserCurrencyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_TitleRewardsPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *User_UserCombatValueChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Old != 0 {
		n += 1 + sovUser(uint64(m.Old))
	}
	if m.Cur != 0 {
		n += 1 + sovUser(uint64(m.Cur))
	}
	return n
}

func (m *User_KickOffUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KickoffSeconds != 0 {
		n += 1 + sovUser(uint64(m.KickoffSeconds))
	}
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	return n
}

func (m *User_KickOffUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User_KickOffSelfPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	return n
}

func (m *User_RechargeChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Old != 0 {
		n += 1 + sovUser(uint64(m.Old))
	}
	if m.New != 0 {
		n += 1 + sovUser(uint64(m.New))
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_LoginPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegister", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegister = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_LogoutPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_LevelChangeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelChangeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelChangeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatModifyTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatModifyTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatModifyTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOffset", wireType)
			}
			m.TimeOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatModifyTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatModifyTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatModifyTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatModifyCreateTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatModifyCreateTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatModifyCreateTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_CheatModifyCreateTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatModifyCreateTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatModifyCreateTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_AdvanceDungeonFinishEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvanceDungeonFinishEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvanceDungeonFinishEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetBattleSettingDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBattleSettingDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBattleSettingDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetBattleSettingDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBattleSettingDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBattleSettingDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &models.BattleSettingData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UpdateBattleSettingDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBattleSettingDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBattleSettingDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &models.BattleSettingData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UpdateBattleSettingDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBattleSettingDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBattleSettingDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetTitleRewardsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitleRewardsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitleRewardsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetTitleRewardsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTitleRewardsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTitleRewardsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.TitleRewards{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_DrawTitleRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawTitleRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawTitleRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_DrawTitleRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawTitleRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawTitleRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_OtherLoginPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherLoginPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherLoginPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			m.LoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetCutSceneIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCutSceneIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCutSceneIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetCutSceneIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCutSceneIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCutSceneIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutId", wireType)
			}
			m.CutId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CutId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetCutSceneIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCutSceneIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCutSceneIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutId", wireType)
			}
			m.CutId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CutId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_SetCutSceneIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCutSceneIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCutSceneIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetExtraSkillCntRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExtraSkillCntRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExtraSkillCntRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypId", wireType)
			}
			m.TypId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_GetExtraSkillCntResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExtraSkillCntResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExtraSkillCntResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cnt == nil {
				m.Cnt = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Cnt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UseCdKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseCdKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseCdKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CdKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UseCdKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseCdKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseCdKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_PlayerNameExistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerNameExistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerNameExistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_PlayerNameExistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerNameExistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerNameExistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UpdateUserCurrencyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserCurrencyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserCurrencyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Currency == nil {
				m.Currency = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Currency[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UpdateUserCurrencyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserCurrencyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserCurrencyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_TitleRewardsPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleRewardsPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleRewardsPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.TitleRewards{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_UserCombatValueChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCombatValueChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCombatValueChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			m.Old = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Old |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cur", wireType)
			}
			m.Cur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cur |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_KickOffUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickOffUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickOffUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickoffSeconds", wireType)
			}
			m.KickoffSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickoffSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_KickOffUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickOffUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickOffUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_KickOffSelfPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickOffSelfPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickOffSelfPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User_RechargeChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RechargeChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RechargeChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Old", wireType)
			}
			m.Old = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Old |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			m.New = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.New |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
