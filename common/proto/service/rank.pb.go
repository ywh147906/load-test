// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/rank.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RankErrorCode int32

const (
	RankErrorCode_ErrRankIdNotExist RankErrorCode = 0
)

var RankErrorCode_name = map[int32]string{
	0: "ErrRankIdNotExist",
}

var RankErrorCode_value = map[string]int32{
	"ErrRankIdNotExist": 0,
}

func (RankErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6c8bb998251e2ed8, []int{0}
}

type Rank struct {
}

func (m *Rank) Reset()      { *m = Rank{} }
func (*Rank) ProtoMessage() {}
func (*Rank) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c8bb998251e2ed8, []int{0}
}
func (m *Rank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rank.Merge(m, src)
}
func (m *Rank) XXX_Size() int {
	return m.Size()
}
func (m *Rank) XXX_DiscardUnknown() {
	xxx_messageInfo_Rank.DiscardUnknown(m)
}

var xxx_messageInfo_Rank proto.InternalMessageInfo

func (*Rank) XXX_MessageName() string {
	return "service.Rank"
}

// 获取百人排行榜
type Rank_GetTopRankRequest struct {
	Title int64 `protobuf:"varint,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *Rank_GetTopRankRequest) Reset()      { *m = Rank_GetTopRankRequest{} }
func (*Rank_GetTopRankRequest) ProtoMessage() {}
func (*Rank_GetTopRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c8bb998251e2ed8, []int{0, 0}
}
func (m *Rank_GetTopRankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rank_GetTopRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rank_GetTopRankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rank_GetTopRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rank_GetTopRankRequest.Merge(m, src)
}
func (m *Rank_GetTopRankRequest) XXX_Size() int {
	return m.Size()
}
func (m *Rank_GetTopRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Rank_GetTopRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Rank_GetTopRankRequest proto.InternalMessageInfo

func (m *Rank_GetTopRankRequest) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (*Rank_GetTopRankRequest) XXX_MessageName() string {
	return "service.Rank.GetTopRankRequest"
}

type Rank_GetTopRankResponse struct {
	List  []*models.RankItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Title int64              `protobuf:"varint,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *Rank_GetTopRankResponse) Reset()      { *m = Rank_GetTopRankResponse{} }
func (*Rank_GetTopRankResponse) ProtoMessage() {}
func (*Rank_GetTopRankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c8bb998251e2ed8, []int{0, 1}
}
func (m *Rank_GetTopRankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rank_GetTopRankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rank_GetTopRankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rank_GetTopRankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rank_GetTopRankResponse.Merge(m, src)
}
func (m *Rank_GetTopRankResponse) XXX_Size() int {
	return m.Size()
}
func (m *Rank_GetTopRankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Rank_GetTopRankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Rank_GetTopRankResponse proto.InternalMessageInfo

func (m *Rank_GetTopRankResponse) GetList() []*models.RankItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *Rank_GetTopRankResponse) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (*Rank_GetTopRankResponse) XXX_MessageName() string {
	return "service.Rank.GetTopRankResponse"
}
func init() {
	proto.RegisterEnum("service.RankErrorCode", RankErrorCode_name, RankErrorCode_value)
	proto.RegisterType((*Rank)(nil), "service.Rank")
	proto.RegisterType((*Rank_GetTopRankRequest)(nil), "service.Rank.GetTopRankRequest")
	proto.RegisterType((*Rank_GetTopRankResponse)(nil), "service.Rank.GetTopRankResponse")
}

func init() { proto.RegisterFile("proto/service/rank.proto", fileDescriptor_6c8bb998251e2ed8) }

var fileDescriptor_6c8bb998251e2ed8 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2f, 0x4a, 0xcc, 0xcb, 0xd6, 0x03,
	0x0b, 0x09, 0xb1, 0x43, 0xc5, 0xa4, 0xc4, 0x21, 0x4a, 0x72, 0xf3, 0x53, 0x52, 0x73, 0x8a, 0xf5,
	0x93, 0x12, 0x8b, 0x53, 0x21, 0x2a, 0xd0, 0x24, 0x10, 0x5a, 0x95, 0x9a, 0x19, 0xb9, 0x58, 0x82,
	0x12, 0xf3, 0xb2, 0xa5, 0x34, 0xb9, 0x04, 0xdd, 0x53, 0x4b, 0x42, 0xf2, 0x0b, 0x40, 0xbc, 0xa0,
	0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x11, 0x2e, 0xd6, 0x92, 0xcc, 0x92, 0x9c, 0x54, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x08, 0x47, 0x2a, 0x80, 0x4b, 0x08, 0x59, 0x69, 0x71, 0x41,
	0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x0a, 0x17, 0x4b, 0x4e, 0x66, 0x71, 0x89, 0x04, 0xa3, 0x02, 0xb3,
	0x06, 0xb7, 0x91, 0x80, 0x1e, 0xc4, 0x2e, 0x3d, 0x90, 0x1a, 0xcf, 0x92, 0xd4, 0xdc, 0x20, 0xb0,
	0x2c, 0xc2, 0x44, 0x26, 0x24, 0x13, 0xb5, 0x9c, 0xb9, 0x78, 0x41, 0xea, 0x5c, 0x8b, 0x8a, 0xf2,
	0x8b, 0x9c, 0xf3, 0x53, 0x52, 0x85, 0x8c, 0xb8, 0x04, 0x5d, 0x8b, 0x8a, 0xc0, 0x7a, 0x53, 0xfc,
	0xf2, 0x4b, 0x5c, 0x2b, 0x32, 0x8b, 0x4b, 0x04, 0x18, 0xa4, 0xa4, 0xbb, 0xb6, 0x4a, 0x88, 0x0b,
	0x89, 0xbe, 0x58, 0xbf, 0xf4, 0x59, 0xdf, 0xa4, 0x17, 0x0b, 0x7b, 0x9e, 0x2d, 0x9b, 0xf3, 0x64,
	0x47, 0xef, 0xd3, 0xb5, 0x33, 0x9e, 0xce, 0x59, 0xe1, 0xe4, 0x77, 0xe3, 0xa1, 0x1c, 0xc3, 0x8a,
	0x47, 0x72, 0x8c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3,
	0x8b, 0x47, 0x72, 0x0c, 0x1f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe2, 0xb1, 0x1c,
	0xe3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x29, 0x24, 0xe7, 0x67, 0xe6, 0xe9,
	0x82, 0x02, 0x2e, 0xb5, 0x48, 0x3f, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x4f, 0x1f, 0x25, 0x80, 0x93,
	0xd8, 0xc0, 0x5c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x51, 0x81, 0x0d, 0x78, 0x01,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRank.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRank_GetTopRankRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRank_GetTopRankResponse.Get().(proto.Message)
	})
}

var poolRank = &sync.Pool{New: func() interface{} { return &Rank{} }}

func (m *Rank) ReleasePool() { m.Reset(); poolRank.Put(m); m = nil }

var poolRank_GetTopRankRequest = &sync.Pool{New: func() interface{} { return &Rank_GetTopRankRequest{} }}

func (m *Rank_GetTopRankRequest) ReleasePool() { m.Reset(); poolRank_GetTopRankRequest.Put(m); m = nil }

var poolRank_GetTopRankResponse = &sync.Pool{New: func() interface{} { return &Rank_GetTopRankResponse{} }}

func (m *Rank_GetTopRankResponse) ReleasePool() {
	m.Reset()
	poolRank_GetTopRankResponse.Put(m)
	m = nil
}
func (x RankErrorCode) String() string {
	s, ok := RankErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Rank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rank)
	if !ok {
		that2, ok := that.(Rank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Rank_GetTopRankRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rank_GetTopRankRequest)
	if !ok {
		that2, ok := that.(Rank_GetTopRankRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *Rank_GetTopRankResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rank_GetTopRankResponse)
	if !ok {
		that2, ok := that.(Rank_GetTopRankResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (m *Rank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Rank_GetTopRankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rank_GetTopRankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rank_GetTopRankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Title != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Rank_GetTopRankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rank_GetTopRankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rank_GetTopRankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Title != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Rank) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Rank_GetTopRankRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Title != 0 {
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Rank_GetTopRankResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("list")
	w.RawByte('"')
	w.RawByte(':')
	if m.List == nil {
		w.RawString("null")
	} else if len(m.List) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.List {
			v.JsonBytes(w)
			if i != len(m.List)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Rank) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Rank) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Rank) GoString() string {
	return m.String()
}

func (m *Rank_GetTopRankRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Rank_GetTopRankRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Rank_GetTopRankRequest) GoString() string {
	return m.String()
}

func (m *Rank_GetTopRankResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Rank_GetTopRankResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Rank_GetTopRankResponse) GoString() string {
	return m.String()
}

func (m *Rank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Rank_GetTopRankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != 0 {
		n += 1 + sovRank(uint64(m.Title))
	}
	return n
}

func (m *Rank_GetTopRankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if m.Title != 0 {
		n += 1 + sovRank(uint64(m.Title))
	}
	return n
}

func sovRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRank(x uint64) (n int) {
	return sovRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rank_GetTopRankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopRankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopRankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rank_GetTopRankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTopRankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTopRankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &models.RankItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRank = fmt.Errorf("proto: unexpected end of group")
)
