// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/roguelike.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Roguelike struct {
}

func (m *Roguelike) Reset()      { *m = Roguelike{} }
func (*Roguelike) ProtoMessage() {}
func (*Roguelike) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d642284dfe6cb22, []int{0}
}
func (m *Roguelike) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Roguelike) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Roguelike.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Roguelike) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roguelike.Merge(m, src)
}
func (m *Roguelike) XXX_Size() int {
	return m.Size()
}
func (m *Roguelike) XXX_DiscardUnknown() {
	xxx_messageInfo_Roguelike.DiscardUnknown(m)
}

var xxx_messageInfo_Roguelike proto.InternalMessageInfo

func (*Roguelike) XXX_MessageName() string {
	return "service.Roguelike"
}

//
type Roguelike_GetRLDoneRequest struct {
}

func (m *Roguelike_GetRLDoneRequest) Reset()      { *m = Roguelike_GetRLDoneRequest{} }
func (*Roguelike_GetRLDoneRequest) ProtoMessage() {}
func (*Roguelike_GetRLDoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d642284dfe6cb22, []int{0, 0}
}
func (m *Roguelike_GetRLDoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Roguelike_GetRLDoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Roguelike_GetRLDoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Roguelike_GetRLDoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roguelike_GetRLDoneRequest.Merge(m, src)
}
func (m *Roguelike_GetRLDoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *Roguelike_GetRLDoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Roguelike_GetRLDoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Roguelike_GetRLDoneRequest proto.InternalMessageInfo

func (*Roguelike_GetRLDoneRequest) XXX_MessageName() string {
	return "service.Roguelike.GetRLDoneRequest"
}

type Roguelike_GetRLDoneResponse struct {
	DoneMap map[int64]bool `protobuf:"bytes,1,rep,name=done_map,json=doneMap,proto3" json:"done_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Roguelike_GetRLDoneResponse) Reset()      { *m = Roguelike_GetRLDoneResponse{} }
func (*Roguelike_GetRLDoneResponse) ProtoMessage() {}
func (*Roguelike_GetRLDoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d642284dfe6cb22, []int{0, 1}
}
func (m *Roguelike_GetRLDoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Roguelike_GetRLDoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Roguelike_GetRLDoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Roguelike_GetRLDoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roguelike_GetRLDoneResponse.Merge(m, src)
}
func (m *Roguelike_GetRLDoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *Roguelike_GetRLDoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Roguelike_GetRLDoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Roguelike_GetRLDoneResponse proto.InternalMessageInfo

func (m *Roguelike_GetRLDoneResponse) GetDoneMap() map[int64]bool {
	if m != nil {
		return m.DoneMap
	}
	return nil
}

func (*Roguelike_GetRLDoneResponse) XXX_MessageName() string {
	return "service.Roguelike.GetRLDoneResponse"
}

//----------------------push----------------------//
type Roguelike_RLDoneChangePush struct {
	DoneMap map[int64]bool `protobuf:"bytes,1,rep,name=done_map,json=doneMap,proto3" json:"done_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Roguelike_RLDoneChangePush) Reset()      { *m = Roguelike_RLDoneChangePush{} }
func (*Roguelike_RLDoneChangePush) ProtoMessage() {}
func (*Roguelike_RLDoneChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d642284dfe6cb22, []int{0, 2}
}
func (m *Roguelike_RLDoneChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Roguelike_RLDoneChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Roguelike_RLDoneChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Roguelike_RLDoneChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roguelike_RLDoneChangePush.Merge(m, src)
}
func (m *Roguelike_RLDoneChangePush) XXX_Size() int {
	return m.Size()
}
func (m *Roguelike_RLDoneChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Roguelike_RLDoneChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_Roguelike_RLDoneChangePush proto.InternalMessageInfo

func (m *Roguelike_RLDoneChangePush) GetDoneMap() map[int64]bool {
	if m != nil {
		return m.DoneMap
	}
	return nil
}

func (*Roguelike_RLDoneChangePush) XXX_MessageName() string {
	return "service.Roguelike.RLDoneChangePush"
}

//----------------------cheat----------------------//
type Roguelike_CheatAllRlDoneRequest struct {
}

func (m *Roguelike_CheatAllRlDoneRequest) Reset()      { *m = Roguelike_CheatAllRlDoneRequest{} }
func (*Roguelike_CheatAllRlDoneRequest) ProtoMessage() {}
func (*Roguelike_CheatAllRlDoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d642284dfe6cb22, []int{0, 3}
}
func (m *Roguelike_CheatAllRlDoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Roguelike_CheatAllRlDoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Roguelike_CheatAllRlDoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Roguelike_CheatAllRlDoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roguelike_CheatAllRlDoneRequest.Merge(m, src)
}
func (m *Roguelike_CheatAllRlDoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *Roguelike_CheatAllRlDoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Roguelike_CheatAllRlDoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Roguelike_CheatAllRlDoneRequest proto.InternalMessageInfo

func (*Roguelike_CheatAllRlDoneRequest) XXX_MessageName() string {
	return "service.Roguelike.CheatAllRlDoneRequest"
}

type Roguelike_CheatAllRlDoneResponse struct {
}

func (m *Roguelike_CheatAllRlDoneResponse) Reset()      { *m = Roguelike_CheatAllRlDoneResponse{} }
func (*Roguelike_CheatAllRlDoneResponse) ProtoMessage() {}
func (*Roguelike_CheatAllRlDoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d642284dfe6cb22, []int{0, 4}
}
func (m *Roguelike_CheatAllRlDoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Roguelike_CheatAllRlDoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Roguelike_CheatAllRlDoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Roguelike_CheatAllRlDoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roguelike_CheatAllRlDoneResponse.Merge(m, src)
}
func (m *Roguelike_CheatAllRlDoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *Roguelike_CheatAllRlDoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Roguelike_CheatAllRlDoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Roguelike_CheatAllRlDoneResponse proto.InternalMessageInfo

func (*Roguelike_CheatAllRlDoneResponse) XXX_MessageName() string {
	return "service.Roguelike.CheatAllRlDoneResponse"
}
func init() {
	proto.RegisterType((*Roguelike)(nil), "service.Roguelike")
	proto.RegisterType((*Roguelike_GetRLDoneRequest)(nil), "service.Roguelike.GetRLDoneRequest")
	proto.RegisterType((*Roguelike_GetRLDoneResponse)(nil), "service.Roguelike.GetRLDoneResponse")
	proto.RegisterMapType((map[int64]bool)(nil), "service.Roguelike.GetRLDoneResponse.DoneMapEntry")
	proto.RegisterType((*Roguelike_RLDoneChangePush)(nil), "service.Roguelike.RLDoneChangePush")
	proto.RegisterMapType((map[int64]bool)(nil), "service.Roguelike.RLDoneChangePush.DoneMapEntry")
	proto.RegisterType((*Roguelike_CheatAllRlDoneRequest)(nil), "service.Roguelike.CheatAllRlDoneRequest")
	proto.RegisterType((*Roguelike_CheatAllRlDoneResponse)(nil), "service.Roguelike.CheatAllRlDoneResponse")
}

func init() { proto.RegisterFile("proto/service/roguelike.proto", fileDescriptor_3d642284dfe6cb22) }

var fileDescriptor_3d642284dfe6cb22 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2f, 0xca, 0x4f, 0x2f, 0x4d, 0xcd,
	0xc9, 0xcc, 0x4e, 0xd5, 0x03, 0x8b, 0x0b, 0xb1, 0x43, 0x25, 0x94, 0x26, 0x30, 0x73, 0x71, 0x06,
	0xc1, 0x24, 0xa5, 0x84, 0xb8, 0x04, 0xdc, 0x53, 0x4b, 0x82, 0x7c, 0x5c, 0xf2, 0xf3, 0x52, 0x83,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0xe6, 0x32, 0x72, 0x09, 0x22, 0x09, 0x16, 0x17, 0xe4,
	0xe7, 0x15, 0xa7, 0x0a, 0xf9, 0x70, 0x71, 0xa4, 0xe4, 0xe7, 0xa5, 0xc6, 0xe7, 0x26, 0x16, 0x48,
	0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0x19, 0xea, 0x41, 0xcd, 0xd4, 0x83, 0x9b, 0xa7, 0x87, 0xa1,
	0x4f, 0x0f, 0xc4, 0xf1, 0x4d, 0x2c, 0x70, 0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0x62, 0x4f, 0x81, 0xf0,
	0xa4, 0xac, 0xb8, 0x78, 0x90, 0x25, 0x84, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x98, 0x83, 0x40, 0x4c, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09,
	0x26, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x08, 0xc7, 0x8a, 0xc9, 0x82, 0x51, 0x6a, 0x36, 0x23, 0x97,
	0x00, 0xc4, 0x12, 0xe7, 0x8c, 0xc4, 0xbc, 0xf4, 0xd4, 0x80, 0xd2, 0xe2, 0x0c, 0x21, 0x6f, 0x0c,
	0xe7, 0x19, 0x60, 0x71, 0x1e, 0xba, 0x36, 0x1a, 0xb8, 0x4e, 0x9c, 0x4b, 0xd4, 0x39, 0x23, 0x35,
	0xb1, 0xc4, 0x31, 0x27, 0x27, 0x28, 0x07, 0x39, 0x58, 0x25, 0xb8, 0xc4, 0xd0, 0x25, 0x20, 0x41,
	0xe4, 0xe4, 0x77, 0xe3, 0xa1, 0x1c, 0xc3, 0x8a, 0x47, 0x72, 0x8c, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72, 0x0c, 0x1f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe2, 0xb1, 0x1c, 0xe3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb,
	0x31, 0x44, 0x29, 0x24, 0xe7, 0x67, 0xe6, 0xe9, 0x82, 0xfc, 0x96, 0x5a, 0xa4, 0x9f, 0x9c, 0x9f,
	0x9b, 0x9b, 0x9f, 0xa7, 0x8f, 0x12, 0xf7, 0x49, 0x6c, 0x60, 0xae, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x89, 0x77, 0xb8, 0x57, 0x13, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelike.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelike_GetRLDoneRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelike_GetRLDoneResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelike_RLDoneChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelike_CheatAllRlDoneRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelike_CheatAllRlDoneResponse.Get().(proto.Message)
	})
}

var poolRoguelike = &sync.Pool{New: func() interface{} { return &Roguelike{} }}

func (m *Roguelike) ReleasePool() { m.Reset(); poolRoguelike.Put(m); m = nil }

var poolRoguelike_GetRLDoneRequest = &sync.Pool{New: func() interface{} { return &Roguelike_GetRLDoneRequest{} }}

func (m *Roguelike_GetRLDoneRequest) ReleasePool() {
	m.Reset()
	poolRoguelike_GetRLDoneRequest.Put(m)
	m = nil
}

var poolRoguelike_GetRLDoneResponse = &sync.Pool{New: func() interface{} { return &Roguelike_GetRLDoneResponse{} }}

func (m *Roguelike_GetRLDoneResponse) ReleasePool() {
	m.Reset()
	poolRoguelike_GetRLDoneResponse.Put(m)
	m = nil
}

var poolRoguelike_RLDoneChangePush = &sync.Pool{New: func() interface{} { return &Roguelike_RLDoneChangePush{} }}

func (m *Roguelike_RLDoneChangePush) ReleasePool() {
	m.Reset()
	poolRoguelike_RLDoneChangePush.Put(m)
	m = nil
}

var poolRoguelike_CheatAllRlDoneRequest = &sync.Pool{New: func() interface{} { return &Roguelike_CheatAllRlDoneRequest{} }}

func (m *Roguelike_CheatAllRlDoneRequest) ReleasePool() {
	m.Reset()
	poolRoguelike_CheatAllRlDoneRequest.Put(m)
	m = nil
}

var poolRoguelike_CheatAllRlDoneResponse = &sync.Pool{New: func() interface{} { return &Roguelike_CheatAllRlDoneResponse{} }}

func (m *Roguelike_CheatAllRlDoneResponse) ReleasePool() {
	m.Reset()
	poolRoguelike_CheatAllRlDoneResponse.Put(m)
	m = nil
}
func (this *Roguelike) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Roguelike)
	if !ok {
		that2, ok := that.(Roguelike)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Roguelike_GetRLDoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Roguelike_GetRLDoneRequest)
	if !ok {
		that2, ok := that.(Roguelike_GetRLDoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Roguelike_GetRLDoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Roguelike_GetRLDoneResponse)
	if !ok {
		that2, ok := that.(Roguelike_GetRLDoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DoneMap) != len(that1.DoneMap) {
		return false
	}
	for i := range this.DoneMap {
		if this.DoneMap[i] != that1.DoneMap[i] {
			return false
		}
	}
	return true
}
func (this *Roguelike_RLDoneChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Roguelike_RLDoneChangePush)
	if !ok {
		that2, ok := that.(Roguelike_RLDoneChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DoneMap) != len(that1.DoneMap) {
		return false
	}
	for i := range this.DoneMap {
		if this.DoneMap[i] != that1.DoneMap[i] {
			return false
		}
	}
	return true
}
func (this *Roguelike_CheatAllRlDoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Roguelike_CheatAllRlDoneRequest)
	if !ok {
		that2, ok := that.(Roguelike_CheatAllRlDoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Roguelike_CheatAllRlDoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Roguelike_CheatAllRlDoneResponse)
	if !ok {
		that2, ok := that.(Roguelike_CheatAllRlDoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Roguelike) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Roguelike) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Roguelike) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Roguelike_GetRLDoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Roguelike_GetRLDoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Roguelike_GetRLDoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Roguelike_GetRLDoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Roguelike_GetRLDoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Roguelike_GetRLDoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DoneMap) > 0 {
		for k := range m.DoneMap {
			v := m.DoneMap[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintRoguelike(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRoguelike(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Roguelike_RLDoneChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Roguelike_RLDoneChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Roguelike_RLDoneChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DoneMap) > 0 {
		for k := range m.DoneMap {
			v := m.DoneMap[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintRoguelike(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRoguelike(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Roguelike_CheatAllRlDoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Roguelike_CheatAllRlDoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Roguelike_CheatAllRlDoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Roguelike_CheatAllRlDoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Roguelike_CheatAllRlDoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Roguelike_CheatAllRlDoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRoguelike(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoguelike(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Roguelike) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Roguelike_GetRLDoneRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Roguelike_GetRLDoneResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("done_map")
	w.RawByte('"')
	w.RawByte(':')
	if m.DoneMap == nil {
		w.RawString("null")
	} else if len(m.DoneMap) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDoneMap := len(m.DoneMap)
		for k, v := range m.DoneMap {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlDoneMap--
			if mlDoneMap != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Roguelike_RLDoneChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("done_map")
	w.RawByte('"')
	w.RawByte(':')
	if m.DoneMap == nil {
		w.RawString("null")
	} else if len(m.DoneMap) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDoneMap := len(m.DoneMap)
		for k, v := range m.DoneMap {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlDoneMap--
			if mlDoneMap != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Roguelike_CheatAllRlDoneRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Roguelike_CheatAllRlDoneResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Roguelike) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Roguelike) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Roguelike) GoString() string {
	return m.String()
}

func (m *Roguelike_GetRLDoneRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Roguelike_GetRLDoneRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Roguelike_GetRLDoneRequest) GoString() string {
	return m.String()
}

func (m *Roguelike_GetRLDoneResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Roguelike_GetRLDoneResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Roguelike_GetRLDoneResponse) GoString() string {
	return m.String()
}

func (m *Roguelike_RLDoneChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Roguelike_RLDoneChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Roguelike_RLDoneChangePush) GoString() string {
	return m.String()
}

func (m *Roguelike_CheatAllRlDoneRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Roguelike_CheatAllRlDoneRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Roguelike_CheatAllRlDoneRequest) GoString() string {
	return m.String()
}

func (m *Roguelike_CheatAllRlDoneResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Roguelike_CheatAllRlDoneResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Roguelike_CheatAllRlDoneResponse) GoString() string {
	return m.String()
}

func (m *Roguelike) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Roguelike_GetRLDoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Roguelike_GetRLDoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DoneMap) > 0 {
		for k, v := range m.DoneMap {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRoguelike(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovRoguelike(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Roguelike_RLDoneChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DoneMap) > 0 {
		for k, v := range m.DoneMap {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRoguelike(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovRoguelike(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Roguelike_CheatAllRlDoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Roguelike_CheatAllRlDoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRoguelike(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoguelike(x uint64) (n int) {
	return sovRoguelike(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Roguelike) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Roguelike: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Roguelike: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Roguelike_GetRLDoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRLDoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRLDoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Roguelike_GetRLDoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRLDoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRLDoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DoneMap == nil {
				m.DoneMap = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoguelike
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoguelike(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRoguelike
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DoneMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Roguelike_RLDoneChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RLDoneChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RLDoneChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DoneMap == nil {
				m.DoneMap = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoguelike
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoguelike(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRoguelike
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DoneMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Roguelike_CheatAllRlDoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAllRlDoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAllRlDoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Roguelike_CheatAllRlDoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAllRlDoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAllRlDoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoguelike(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoguelike
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoguelike
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoguelike
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoguelike        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoguelike          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoguelike = fmt.Errorf("proto: unexpected end of group")
)
