// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/npc.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Npc struct {
}

func (m *Npc) Reset()      { *m = Npc{} }
func (*Npc) ProtoMessage() {}
func (*Npc) Descriptor() ([]byte, []int) {
	return fileDescriptor_a232663d685978ac, []int{0}
}
func (m *Npc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Npc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Npc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Npc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc.Merge(m, src)
}
func (m *Npc) XXX_Size() int {
	return m.Size()
}
func (m *Npc) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc.DiscardUnknown(m)
}

var xxx_messageInfo_Npc proto.InternalMessageInfo

func (*Npc) XXX_MessageName() string {
	return "service.Npc"
}

type Npc_TalkRequest struct {
	DialogId int64           `protobuf:"varint,1,opt,name=dialog_id,json=dialogId,proto3" json:"dialog_id,omitempty"`
	Opt      int64           `protobuf:"varint,2,opt,name=opt,proto3" json:"opt,omitempty"`
	TaskId   int64           `protobuf:"varint,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Kind     models.TaskKind `protobuf:"varint,4,opt,name=kind,proto3,enum=models.TaskKind" json:"kind,omitempty"`
	Typ      models.TaskType `protobuf:"varint,5,opt,name=Typ,proto3,enum=models.TaskType" json:"Typ,omitempty"`
}

func (m *Npc_TalkRequest) Reset()      { *m = Npc_TalkRequest{} }
func (*Npc_TalkRequest) ProtoMessage() {}
func (*Npc_TalkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a232663d685978ac, []int{0, 0}
}
func (m *Npc_TalkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Npc_TalkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Npc_TalkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Npc_TalkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc_TalkRequest.Merge(m, src)
}
func (m *Npc_TalkRequest) XXX_Size() int {
	return m.Size()
}
func (m *Npc_TalkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc_TalkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Npc_TalkRequest proto.InternalMessageInfo

func (m *Npc_TalkRequest) GetDialogId() int64 {
	if m != nil {
		return m.DialogId
	}
	return 0
}

func (m *Npc_TalkRequest) GetOpt() int64 {
	if m != nil {
		return m.Opt
	}
	return 0
}

func (m *Npc_TalkRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Npc_TalkRequest) GetKind() models.TaskKind {
	if m != nil {
		return m.Kind
	}
	return models.TaskKind_Daily
}

func (m *Npc_TalkRequest) GetTyp() models.TaskType {
	if m != nil {
		return m.Typ
	}
	return models.TaskType_TaskLogin
}

func (*Npc_TalkRequest) XXX_MessageName() string {
	return "service.Npc.TalkRequest"
}

type Npc_TalkResponse struct {
}

func (m *Npc_TalkResponse) Reset()      { *m = Npc_TalkResponse{} }
func (*Npc_TalkResponse) ProtoMessage() {}
func (*Npc_TalkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a232663d685978ac, []int{0, 1}
}
func (m *Npc_TalkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Npc_TalkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Npc_TalkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Npc_TalkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc_TalkResponse.Merge(m, src)
}
func (m *Npc_TalkResponse) XXX_Size() int {
	return m.Size()
}
func (m *Npc_TalkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc_TalkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Npc_TalkResponse proto.InternalMessageInfo

func (*Npc_TalkResponse) XXX_MessageName() string {
	return "service.Npc.TalkResponse"
}

// NPC副本开始
type Npc_NPCDungeonStartRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Npc_NPCDungeonStartRequest) Reset()      { *m = Npc_NPCDungeonStartRequest{} }
func (*Npc_NPCDungeonStartRequest) ProtoMessage() {}
func (*Npc_NPCDungeonStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a232663d685978ac, []int{0, 2}
}
func (m *Npc_NPCDungeonStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Npc_NPCDungeonStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Npc_NPCDungeonStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Npc_NPCDungeonStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc_NPCDungeonStartRequest.Merge(m, src)
}
func (m *Npc_NPCDungeonStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *Npc_NPCDungeonStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc_NPCDungeonStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Npc_NPCDungeonStartRequest proto.InternalMessageInfo

func (m *Npc_NPCDungeonStartRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (*Npc_NPCDungeonStartRequest) XXX_MessageName() string {
	return "service.Npc.NPCDungeonStartRequest"
}

type Npc_NPCDungeonStartResponse struct {
	BattleId int64                     `protobuf:"varint,3,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	Sbp      *models.SingleBattleParam `protobuf:"bytes,4,opt,name=sbp,proto3" json:"sbp,omitempty"`
}

func (m *Npc_NPCDungeonStartResponse) Reset()      { *m = Npc_NPCDungeonStartResponse{} }
func (*Npc_NPCDungeonStartResponse) ProtoMessage() {}
func (*Npc_NPCDungeonStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a232663d685978ac, []int{0, 3}
}
func (m *Npc_NPCDungeonStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Npc_NPCDungeonStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Npc_NPCDungeonStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Npc_NPCDungeonStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc_NPCDungeonStartResponse.Merge(m, src)
}
func (m *Npc_NPCDungeonStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *Npc_NPCDungeonStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc_NPCDungeonStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Npc_NPCDungeonStartResponse proto.InternalMessageInfo

func (m *Npc_NPCDungeonStartResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *Npc_NPCDungeonStartResponse) GetSbp() *models.SingleBattleParam {
	if m != nil {
		return m.Sbp
	}
	return nil
}

func (*Npc_NPCDungeonStartResponse) XXX_MessageName() string {
	return "service.Npc.NPCDungeonStartResponse"
}

// NPC副本结束
type Npc_NPCDungeonFinishRequest struct {
	Id        int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsSuccess bool            `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Typ       models.TaskType `protobuf:"varint,3,opt,name=Typ,proto3,enum=models.TaskType" json:"Typ,omitempty"`
}

func (m *Npc_NPCDungeonFinishRequest) Reset()      { *m = Npc_NPCDungeonFinishRequest{} }
func (*Npc_NPCDungeonFinishRequest) ProtoMessage() {}
func (*Npc_NPCDungeonFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a232663d685978ac, []int{0, 4}
}
func (m *Npc_NPCDungeonFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Npc_NPCDungeonFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Npc_NPCDungeonFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Npc_NPCDungeonFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc_NPCDungeonFinishRequest.Merge(m, src)
}
func (m *Npc_NPCDungeonFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *Npc_NPCDungeonFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc_NPCDungeonFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Npc_NPCDungeonFinishRequest proto.InternalMessageInfo

func (m *Npc_NPCDungeonFinishRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Npc_NPCDungeonFinishRequest) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *Npc_NPCDungeonFinishRequest) GetTyp() models.TaskType {
	if m != nil {
		return m.Typ
	}
	return models.TaskType_TaskLogin
}

func (*Npc_NPCDungeonFinishRequest) XXX_MessageName() string {
	return "service.Npc.NPCDungeonFinishRequest"
}

type Npc_NPCDungeonFinishResponse struct {
}

func (m *Npc_NPCDungeonFinishResponse) Reset()      { *m = Npc_NPCDungeonFinishResponse{} }
func (*Npc_NPCDungeonFinishResponse) ProtoMessage() {}
func (*Npc_NPCDungeonFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a232663d685978ac, []int{0, 5}
}
func (m *Npc_NPCDungeonFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Npc_NPCDungeonFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Npc_NPCDungeonFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Npc_NPCDungeonFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc_NPCDungeonFinishResponse.Merge(m, src)
}
func (m *Npc_NPCDungeonFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *Npc_NPCDungeonFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc_NPCDungeonFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Npc_NPCDungeonFinishResponse proto.InternalMessageInfo

func (*Npc_NPCDungeonFinishResponse) XXX_MessageName() string {
	return "service.Npc.NPCDungeonFinishResponse"
}

//----------------------event----------------------//
type Npc_TalkRewardEvent struct {
	Reward map[int64]int64 `protobuf:"bytes,1,rep,name=reward,proto3" json:"reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Npc_TalkRewardEvent) Reset()      { *m = Npc_TalkRewardEvent{} }
func (*Npc_TalkRewardEvent) ProtoMessage() {}
func (*Npc_TalkRewardEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a232663d685978ac, []int{0, 6}
}
func (m *Npc_TalkRewardEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Npc_TalkRewardEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Npc_TalkRewardEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Npc_TalkRewardEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Npc_TalkRewardEvent.Merge(m, src)
}
func (m *Npc_TalkRewardEvent) XXX_Size() int {
	return m.Size()
}
func (m *Npc_TalkRewardEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_Npc_TalkRewardEvent.DiscardUnknown(m)
}

var xxx_messageInfo_Npc_TalkRewardEvent proto.InternalMessageInfo

func (m *Npc_TalkRewardEvent) GetReward() map[int64]int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (*Npc_TalkRewardEvent) XXX_MessageName() string {
	return "service.Npc.TalkRewardEvent"
}
func init() {
	proto.RegisterType((*Npc)(nil), "service.Npc")
	proto.RegisterType((*Npc_TalkRequest)(nil), "service.Npc.TalkRequest")
	proto.RegisterType((*Npc_TalkResponse)(nil), "service.Npc.TalkResponse")
	proto.RegisterType((*Npc_NPCDungeonStartRequest)(nil), "service.Npc.NPCDungeonStartRequest")
	proto.RegisterType((*Npc_NPCDungeonStartResponse)(nil), "service.Npc.NPCDungeonStartResponse")
	proto.RegisterType((*Npc_NPCDungeonFinishRequest)(nil), "service.Npc.NPCDungeonFinishRequest")
	proto.RegisterType((*Npc_NPCDungeonFinishResponse)(nil), "service.Npc.NPCDungeonFinishResponse")
	proto.RegisterType((*Npc_TalkRewardEvent)(nil), "service.Npc.TalkRewardEvent")
	proto.RegisterMapType((map[int64]int64)(nil), "service.Npc.TalkRewardEvent.RewardEntry")
}

func init() { proto.RegisterFile("proto/service/npc.proto", fileDescriptor_a232663d685978ac) }

var fileDescriptor_a232663d685978ac = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0xae, 0x9b, 0xae, 0xeb, 0xde, 0xa2, 0x32, 0x59, 0x88, 0x66, 0x41, 0x58, 0xd5, 0xc4, 0xa1,
	0x12, 0x22, 0x95, 0xca, 0x05, 0x38, 0xa1, 0xf1, 0x21, 0x55, 0x48, 0xd5, 0x94, 0xf6, 0xc4, 0x65,
	0x72, 0x63, 0xab, 0x58, 0x49, 0xec, 0x10, 0x3b, 0x45, 0xfd, 0x13, 0x88, 0x7f, 0xc0, 0x95, 0x9f,
	0xb2, 0xe3, 0x8e, 0x3b, 0xb2, 0xf4, 0xc2, 0x91, 0x9f, 0x80, 0x12, 0xa7, 0xb0, 0xad, 0x62, 0xb7,
	0xf7, 0xf9, 0x48, 0xfc, 0xf8, 0xd1, 0x6b, 0xe8, 0xa7, 0x99, 0x32, 0x6a, 0xa4, 0x79, 0xb6, 0x12,
	0x21, 0x1f, 0xc9, 0x34, 0xf4, 0x2b, 0x06, 0xef, 0xd7, 0x94, 0x57, 0x3b, 0x12, 0xc5, 0x78, 0xac,
	0x47, 0x0b, 0xaa, 0xb9, 0x75, 0x78, 0x47, 0xb7, 0x04, 0x63, 0xe2, 0xad, 0xe4, 0xde, 0x90, 0xb8,
	0xcc, 0x13, 0x6d, 0x95, 0xe3, 0xab, 0x16, 0x38, 0xd3, 0x34, 0xf4, 0xbe, 0x23, 0xe8, 0xce, 0x69,
	0x1c, 0x05, 0xfc, 0x73, 0xce, 0xb5, 0xc1, 0x8f, 0xe0, 0x80, 0x09, 0x1a, 0xab, 0xe5, 0x99, 0x60,
	0x2e, 0x1a, 0xa0, 0xa1, 0x13, 0x74, 0x2c, 0x31, 0x61, 0xf8, 0x10, 0x1c, 0x95, 0x1a, 0xb7, 0x59,
	0xd1, 0xe5, 0x88, 0xfb, 0xb0, 0x6f, 0xa8, 0x8e, 0x4a, 0xb3, 0x53, 0xb1, 0xed, 0x12, 0x4e, 0x18,
	0x7e, 0x02, 0xad, 0x48, 0x48, 0xe6, 0xb6, 0x06, 0x68, 0xd8, 0x1b, 0x1f, 0xfa, 0x36, 0x82, 0x3f,
	0xa7, 0x3a, 0xfa, 0x20, 0x24, 0x0b, 0x2a, 0x15, 0x1f, 0x83, 0x33, 0x5f, 0xa7, 0xee, 0xde, 0xae,
	0x69, 0xbe, 0x4e, 0x79, 0x50, 0x8a, 0x5e, 0x0f, 0xee, 0xd9, 0x80, 0x3a, 0x55, 0x52, 0x73, 0x6f,
	0x08, 0x0f, 0xa7, 0xa7, 0x6f, 0xde, 0xe6, 0x72, 0xc9, 0x95, 0x9c, 0x19, 0x9a, 0x99, 0x6d, 0xf6,
	0x1e, 0x34, 0xff, 0x86, 0x6e, 0x0a, 0xe6, 0x85, 0xd0, 0xdf, 0x71, 0xda, 0x9f, 0x94, 0xd7, 0xb4,
	0x45, 0xfd, 0x4b, 0xde, 0xb1, 0xc4, 0x84, 0xe1, 0xa7, 0xe0, 0xe8, 0x45, 0x5a, 0x45, 0xef, 0x8e,
	0x8f, 0xb6, 0xa9, 0x66, 0x42, 0x2e, 0x63, 0x7e, 0x52, 0x99, 0x4e, 0x69, 0x46, 0x93, 0xa0, 0x74,
	0x79, 0xf1, 0xf5, 0x43, 0xde, 0x0b, 0x29, 0xf4, 0xa7, 0xff, 0xe4, 0xc1, 0x8f, 0x01, 0x84, 0x3e,
	0xd3, 0x79, 0x18, 0x72, 0xad, 0xab, 0x16, 0x3b, 0xc1, 0x81, 0xd0, 0x33, 0x4b, 0x6c, 0xcb, 0x70,
	0xee, 0x2a, 0xc3, 0x03, 0x77, 0xf7, 0xb4, 0xba, 0x98, 0xaf, 0x08, 0xee, 0xdb, 0xa6, 0xbe, 0xd0,
	0x8c, 0xbd, 0x5b, 0x71, 0x69, 0xf0, 0x6b, 0x68, 0x67, 0x15, 0x74, 0xd1, 0xc0, 0x19, 0x76, 0xc7,
	0x43, 0xbf, 0x5e, 0x27, 0x7f, 0x9a, 0x86, 0xfe, 0x2d, 0xb7, 0x5f, 0xcf, 0xd2, 0x64, 0xeb, 0xa0,
	0xfe, 0xce, 0x7b, 0x09, 0xdd, 0x6b, 0x74, 0xb9, 0x02, 0x11, 0x5f, 0xd7, 0x97, 0x2a, 0x47, 0xfc,
	0x00, 0xf6, 0x56, 0x34, 0xce, 0x79, 0xbd, 0x16, 0x16, 0xbc, 0x6a, 0xbe, 0x40, 0x27, 0xd3, 0xcb,
	0x2b, 0xd2, 0xf8, 0x51, 0x10, 0x74, 0x5e, 0x10, 0x74, 0x51, 0x10, 0xf4, 0xb3, 0x20, 0xe8, 0x57,
	0x41, 0x1a, 0xbf, 0x0b, 0x82, 0xbe, 0x6d, 0x48, 0xe3, 0x7c, 0x43, 0xd0, 0xc5, 0x86, 0x34, 0x2e,
	0x37, 0xa4, 0xf1, 0x71, 0x10, 0x2a, 0x21, 0x9f, 0x95, 0xf1, 0x78, 0x36, 0x0a, 0x55, 0x92, 0x28,
	0x39, 0xba, 0xf1, 0x28, 0x16, 0xed, 0x0a, 0x3e, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x80,
	0x57, 0x2a, 0x2c, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpc.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpc_TalkRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpc_TalkResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpc_NPCDungeonStartRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpc_NPCDungeonStartResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpc_NPCDungeonFinishRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpc_NPCDungeonFinishResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpc_TalkRewardEvent.Get().(proto.Message)
	})
}

var poolNpc = &sync.Pool{New: func() interface{} { return &Npc{} }}

func (m *Npc) ReleasePool() { m.Reset(); poolNpc.Put(m); m = nil }

var poolNpc_TalkRequest = &sync.Pool{New: func() interface{} { return &Npc_TalkRequest{} }}

func (m *Npc_TalkRequest) ReleasePool() { m.Reset(); poolNpc_TalkRequest.Put(m); m = nil }

var poolNpc_TalkResponse = &sync.Pool{New: func() interface{} { return &Npc_TalkResponse{} }}

func (m *Npc_TalkResponse) ReleasePool() { m.Reset(); poolNpc_TalkResponse.Put(m); m = nil }

var poolNpc_NPCDungeonStartRequest = &sync.Pool{New: func() interface{} { return &Npc_NPCDungeonStartRequest{} }}

func (m *Npc_NPCDungeonStartRequest) ReleasePool() {
	m.Reset()
	poolNpc_NPCDungeonStartRequest.Put(m)
	m = nil
}

var poolNpc_NPCDungeonStartResponse = &sync.Pool{New: func() interface{} { return &Npc_NPCDungeonStartResponse{} }}

func (m *Npc_NPCDungeonStartResponse) ReleasePool() {
	m.Reset()
	poolNpc_NPCDungeonStartResponse.Put(m)
	m = nil
}

var poolNpc_NPCDungeonFinishRequest = &sync.Pool{New: func() interface{} { return &Npc_NPCDungeonFinishRequest{} }}

func (m *Npc_NPCDungeonFinishRequest) ReleasePool() {
	m.Reset()
	poolNpc_NPCDungeonFinishRequest.Put(m)
	m = nil
}

var poolNpc_NPCDungeonFinishResponse = &sync.Pool{New: func() interface{} { return &Npc_NPCDungeonFinishResponse{} }}

func (m *Npc_NPCDungeonFinishResponse) ReleasePool() {
	m.Reset()
	poolNpc_NPCDungeonFinishResponse.Put(m)
	m = nil
}

var poolNpc_TalkRewardEvent = &sync.Pool{New: func() interface{} { return &Npc_TalkRewardEvent{} }}

func (m *Npc_TalkRewardEvent) ReleasePool() { m.Reset(); poolNpc_TalkRewardEvent.Put(m); m = nil }
func (this *Npc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Npc)
	if !ok {
		that2, ok := that.(Npc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Npc_TalkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Npc_TalkRequest)
	if !ok {
		that2, ok := that.(Npc_TalkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DialogId != that1.DialogId {
		return false
	}
	if this.Opt != that1.Opt {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *Npc_TalkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Npc_TalkResponse)
	if !ok {
		that2, ok := that.(Npc_TalkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Npc_NPCDungeonStartRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Npc_NPCDungeonStartRequest)
	if !ok {
		that2, ok := that.(Npc_NPCDungeonStartRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Npc_NPCDungeonStartResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Npc_NPCDungeonStartResponse)
	if !ok {
		that2, ok := that.(Npc_NPCDungeonStartResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if !this.Sbp.Equal(that1.Sbp) {
		return false
	}
	return true
}
func (this *Npc_NPCDungeonFinishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Npc_NPCDungeonFinishRequest)
	if !ok {
		that2, ok := that.(Npc_NPCDungeonFinishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.IsSuccess != that1.IsSuccess {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *Npc_NPCDungeonFinishResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Npc_NPCDungeonFinishResponse)
	if !ok {
		that2, ok := that.(Npc_NPCDungeonFinishResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Npc_TalkRewardEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Npc_TalkRewardEvent)
	if !ok {
		that2, ok := that.(Npc_TalkRewardEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	return true
}
func (m *Npc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Npc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Npc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Npc_TalkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Npc_TalkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Npc_TalkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x28
	}
	if m.Kind != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x20
	}
	if m.TaskId != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x18
	}
	if m.Opt != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Opt))
		i--
		dAtA[i] = 0x10
	}
	if m.DialogId != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.DialogId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Npc_TalkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Npc_TalkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Npc_TalkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Npc_NPCDungeonStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Npc_NPCDungeonStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Npc_NPCDungeonStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Npc_NPCDungeonStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Npc_NPCDungeonStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Npc_NPCDungeonStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sbp != nil {
		{
			size, err := m.Sbp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BattleId != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *Npc_NPCDungeonFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Npc_NPCDungeonFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Npc_NPCDungeonFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x18
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintNpc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Npc_NPCDungeonFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Npc_NPCDungeonFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Npc_NPCDungeonFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Npc_TalkRewardEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Npc_TalkRewardEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Npc_TalkRewardEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for k := range m.Reward {
			v := m.Reward[k]
			baseI := i
			i = encodeVarintNpc(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintNpc(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovNpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Npc) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Npc_TalkRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DialogId != 0 {
		w.RawByte('"')
		w.RawString("dialog_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DialogId))
		needWriteComma = true
	}
	if m.Opt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("opt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Opt))
		needWriteComma = true
	}
	if m.TaskId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.Kind != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kind")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Kind))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Npc_TalkResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Npc_NPCDungeonStartRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Npc_NPCDungeonStartResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("sbp")
	w.RawByte('"')
	w.RawByte(':')
	m.Sbp.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Npc_NPCDungeonFinishRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.IsSuccess {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSuccess)
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Npc_NPCDungeonFinishResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Npc_TalkRewardEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlReward := len(m.Reward)
		for k, v := range m.Reward {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlReward--
			if mlReward != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Npc) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Npc) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Npc) GoString() string {
	return m.String()
}

func (m *Npc_TalkRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Npc_TalkRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Npc_TalkRequest) GoString() string {
	return m.String()
}

func (m *Npc_TalkResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Npc_TalkResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Npc_TalkResponse) GoString() string {
	return m.String()
}

func (m *Npc_NPCDungeonStartRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Npc_NPCDungeonStartRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Npc_NPCDungeonStartRequest) GoString() string {
	return m.String()
}

func (m *Npc_NPCDungeonStartResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Npc_NPCDungeonStartResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Npc_NPCDungeonStartResponse) GoString() string {
	return m.String()
}

func (m *Npc_NPCDungeonFinishRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Npc_NPCDungeonFinishRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Npc_NPCDungeonFinishRequest) GoString() string {
	return m.String()
}

func (m *Npc_NPCDungeonFinishResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Npc_NPCDungeonFinishResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Npc_NPCDungeonFinishResponse) GoString() string {
	return m.String()
}

func (m *Npc_TalkRewardEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Npc_TalkRewardEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Npc_TalkRewardEvent) GoString() string {
	return m.String()
}

func (m *Npc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Npc_TalkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DialogId != 0 {
		n += 1 + sovNpc(uint64(m.DialogId))
	}
	if m.Opt != 0 {
		n += 1 + sovNpc(uint64(m.Opt))
	}
	if m.TaskId != 0 {
		n += 1 + sovNpc(uint64(m.TaskId))
	}
	if m.Kind != 0 {
		n += 1 + sovNpc(uint64(m.Kind))
	}
	if m.Typ != 0 {
		n += 1 + sovNpc(uint64(m.Typ))
	}
	return n
}

func (m *Npc_TalkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Npc_NPCDungeonStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNpc(uint64(m.Id))
	}
	return n
}

func (m *Npc_NPCDungeonStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovNpc(uint64(m.BattleId))
	}
	if m.Sbp != nil {
		l = m.Sbp.Size()
		n += 1 + l + sovNpc(uint64(l))
	}
	return n
}

func (m *Npc_NPCDungeonFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNpc(uint64(m.Id))
	}
	if m.IsSuccess {
		n += 2
	}
	if m.Typ != 0 {
		n += 1 + sovNpc(uint64(m.Typ))
	}
	return n
}

func (m *Npc_NPCDungeonFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Npc_TalkRewardEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for k, v := range m.Reward {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNpc(uint64(k)) + 1 + sovNpc(uint64(v))
			n += mapEntrySize + 1 + sovNpc(uint64(mapEntrySize))
		}
	}
	return n
}

func sovNpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNpc(x uint64) (n int) {
	return sovNpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Npc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Npc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Npc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Npc_TalkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogId", wireType)
			}
			m.DialogId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DialogId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			m.Opt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= models.TaskKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Npc_TalkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Npc_NPCDungeonStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NPCDungeonStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NPCDungeonStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Npc_NPCDungeonStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NPCDungeonStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NPCDungeonStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sbp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sbp == nil {
				m.Sbp = &models.SingleBattleParam{}
			}
			if err := m.Sbp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Npc_NPCDungeonFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NPCDungeonFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NPCDungeonFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Npc_NPCDungeonFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NPCDungeonFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NPCDungeonFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Npc_TalkRewardEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalkRewardEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalkRewardEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reward[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNpc = fmt.Errorf("proto: unexpected end of group")
)
