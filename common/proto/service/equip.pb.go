// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/equip.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EquipErrorCode int32

const (
	EquipErrorCode_ErrEquipNotExist EquipErrorCode = 0
)

var EquipErrorCode_name = map[int32]string{
	0: "ErrEquipNotExist",
}

var EquipErrorCode_value = map[string]int32{
	"ErrEquipNotExist": 0,
}

func (EquipErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a6b1209dff2967e, []int{0}
}

type Equip struct {
}

func (m *Equip) Reset()      { *m = Equip{} }
func (*Equip) ProtoMessage() {}
func (*Equip) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a6b1209dff2967e, []int{0}
}
func (m *Equip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Equip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Equip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Equip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Equip.Merge(m, src)
}
func (m *Equip) XXX_Size() int {
	return m.Size()
}
func (m *Equip) XXX_DiscardUnknown() {
	xxx_messageInfo_Equip.DiscardUnknown(m)
}

var xxx_messageInfo_Equip proto.InternalMessageInfo

func (*Equip) XXX_MessageName() string {
	return "service.Equip"
}

// 获取装备详情
type Equip_EquipDetailRequest struct {
	EquipId []string `protobuf:"bytes,1,rep,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"`
	RoleId  string   `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *Equip_EquipDetailRequest) Reset()      { *m = Equip_EquipDetailRequest{} }
func (*Equip_EquipDetailRequest) ProtoMessage() {}
func (*Equip_EquipDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a6b1209dff2967e, []int{0, 0}
}
func (m *Equip_EquipDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Equip_EquipDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Equip_EquipDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Equip_EquipDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Equip_EquipDetailRequest.Merge(m, src)
}
func (m *Equip_EquipDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *Equip_EquipDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Equip_EquipDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Equip_EquipDetailRequest proto.InternalMessageInfo

func (m *Equip_EquipDetailRequest) GetEquipId() []string {
	if m != nil {
		return m.EquipId
	}
	return nil
}

func (m *Equip_EquipDetailRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*Equip_EquipDetailRequest) XXX_MessageName() string {
	return "service.Equip.EquipDetailRequest"
}

type Equip_EquipDetailResponse struct {
	Equip []*models.Equipment `protobuf:"bytes,1,rep,name=equip,proto3" json:"equip,omitempty"`
}

func (m *Equip_EquipDetailResponse) Reset()      { *m = Equip_EquipDetailResponse{} }
func (*Equip_EquipDetailResponse) ProtoMessage() {}
func (*Equip_EquipDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a6b1209dff2967e, []int{0, 1}
}
func (m *Equip_EquipDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Equip_EquipDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Equip_EquipDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Equip_EquipDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Equip_EquipDetailResponse.Merge(m, src)
}
func (m *Equip_EquipDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *Equip_EquipDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Equip_EquipDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Equip_EquipDetailResponse proto.InternalMessageInfo

func (m *Equip_EquipDetailResponse) GetEquip() []*models.Equipment {
	if m != nil {
		return m.Equip
	}
	return nil
}

func (*Equip_EquipDetailResponse) XXX_MessageName() string {
	return "service.Equip.EquipDetailResponse"
}
func init() {
	proto.RegisterEnum("service.EquipErrorCode", EquipErrorCode_name, EquipErrorCode_value)
	proto.RegisterType((*Equip)(nil), "service.Equip")
	proto.RegisterType((*Equip_EquipDetailRequest)(nil), "service.Equip.EquipDetailRequest")
	proto.RegisterType((*Equip_EquipDetailResponse)(nil), "service.Equip.EquipDetailResponse")
}

func init() { proto.RegisterFile("proto/service/equip.proto", fileDescriptor_4a6b1209dff2967e) }

var fileDescriptor_4a6b1209dff2967e = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x4f, 0x2d, 0x2c, 0xcd, 0x2c, 0xd0,
	0x03, 0x8b, 0x09, 0xb1, 0x43, 0x05, 0xa5, 0xc4, 0x21, 0x6a, 0x72, 0xf3, 0x53, 0x52, 0x73, 0x8a,
	0xf5, 0x93, 0x12, 0x8b, 0x53, 0x21, 0x2a, 0xa4, 0x64, 0x50, 0x24, 0xc0, 0x7a, 0x73, 0x53, 0xf3,
	0x4a, 0x20, 0xb2, 0x4a, 0x13, 0x19, 0xb9, 0x58, 0x5d, 0x41, 0x62, 0x52, 0x1e, 0x5c, 0x42, 0x60,
	0x86, 0x4b, 0x6a, 0x49, 0x62, 0x66, 0x4e, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x24,
	0x17, 0x07, 0x58, 0x4b, 0x7c, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0x67, 0x10, 0x3b, 0x98,
	0xef, 0x99, 0x22, 0x24, 0xce, 0xc5, 0x5e, 0x94, 0x9f, 0x93, 0x0a, 0x92, 0x61, 0x52, 0x60, 0xd4,
	0xe0, 0x0c, 0x62, 0x03, 0x71, 0x3d, 0x53, 0xa4, 0xec, 0xb8, 0x84, 0x51, 0x4c, 0x2a, 0x2e, 0xc8,
	0xcf, 0x2b, 0x4e, 0x15, 0x52, 0xe7, 0x62, 0x05, 0x6b, 0x05, 0x9b, 0xc3, 0x6d, 0x24, 0xa8, 0x07,
	0x71, 0x92, 0x9e, 0x2b, 0xcc, 0x49, 0x41, 0x10, 0x79, 0x2d, 0x5b, 0x2e, 0x3e, 0xb0, 0x98, 0x6b,
	0x51, 0x51, 0x7e, 0x91, 0x73, 0x7e, 0x4a, 0xaa, 0x90, 0x36, 0x97, 0x80, 0x6b, 0x51, 0x11, 0x58,
	0xd0, 0x2f, 0xbf, 0xc4, 0xb5, 0x22, 0xb3, 0xb8, 0x44, 0x80, 0x41, 0x4a, 0xb4, 0x6b, 0xab, 0x84,
	0xa0, 0x10, 0xff, 0x8b, 0xc5, 0xad, 0x4f, 0x97, 0xb4, 0x3f, 0xd9, 0xd1, 0xfb, 0x74, 0xed, 0x8c,
	0xa7, 0x73, 0x56, 0x38, 0xf9, 0xdd, 0x78, 0x28, 0xc7, 0xb0, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x9c, 0x78, 0x2c, 0xc7, 0x78, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x0a, 0xc9, 0xf9, 0x99, 0x79, 0xba, 0xa0, 0x50, 0x4c, 0x2d, 0xd2,
	0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x47, 0x09, 0xee, 0x24, 0x36, 0x30, 0xd7, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x71, 0x98, 0x58, 0xa8, 0x86, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquip.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquip_EquipDetailRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquip_EquipDetailResponse.Get().(proto.Message)
	})
}

var poolEquip = &sync.Pool{New: func() interface{} { return &Equip{} }}

func (m *Equip) ReleasePool() { m.Reset(); poolEquip.Put(m); m = nil }

var poolEquip_EquipDetailRequest = &sync.Pool{New: func() interface{} { return &Equip_EquipDetailRequest{} }}

func (m *Equip_EquipDetailRequest) ReleasePool() {
	m.Reset()
	poolEquip_EquipDetailRequest.Put(m)
	m = nil
}

var poolEquip_EquipDetailResponse = &sync.Pool{New: func() interface{} { return &Equip_EquipDetailResponse{} }}

func (m *Equip_EquipDetailResponse) ReleasePool() {
	m.Reset()
	poolEquip_EquipDetailResponse.Put(m)
	m = nil
}
func (x EquipErrorCode) String() string {
	s, ok := EquipErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Equip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Equip)
	if !ok {
		that2, ok := that.(Equip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Equip_EquipDetailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Equip_EquipDetailRequest)
	if !ok {
		that2, ok := that.(Equip_EquipDetailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EquipId) != len(that1.EquipId) {
		return false
	}
	for i := range this.EquipId {
		if this.EquipId[i] != that1.EquipId[i] {
			return false
		}
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *Equip_EquipDetailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Equip_EquipDetailResponse)
	if !ok {
		that2, ok := that.(Equip_EquipDetailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Equip) != len(that1.Equip) {
		return false
	}
	for i := range this.Equip {
		if !this.Equip[i].Equal(that1.Equip[i]) {
			return false
		}
	}
	return true
}
func (m *Equip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Equip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Equip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Equip_EquipDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Equip_EquipDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Equip_EquipDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintEquip(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EquipId) > 0 {
		for iNdEx := len(m.EquipId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EquipId[iNdEx])
			copy(dAtA[i:], m.EquipId[iNdEx])
			i = encodeVarintEquip(dAtA, i, uint64(len(m.EquipId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Equip_EquipDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Equip_EquipDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Equip_EquipDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Equip) > 0 {
		for iNdEx := len(m.Equip) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equip[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEquip(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEquip(dAtA []byte, offset int, v uint64) int {
	offset -= sovEquip(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Equip) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Equip_EquipDetailRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("equip_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.EquipId == nil {
		w.RawString("null")
	} else if len(m.EquipId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.EquipId {
			w.String(v)
			if i != len(m.EquipId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Equip_EquipDetailResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("equip")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equip == nil {
		w.RawString("null")
	} else if len(m.Equip) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Equip {
			v.JsonBytes(w)
			if i != len(m.Equip)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Equip) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Equip) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Equip) GoString() string {
	return m.String()
}

func (m *Equip_EquipDetailRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Equip_EquipDetailRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Equip_EquipDetailRequest) GoString() string {
	return m.String()
}

func (m *Equip_EquipDetailResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Equip_EquipDetailResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Equip_EquipDetailResponse) GoString() string {
	return m.String()
}

func (m *Equip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Equip_EquipDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EquipId) > 0 {
		for _, s := range m.EquipId {
			l = len(s)
			n += 1 + l + sovEquip(uint64(l))
		}
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovEquip(uint64(l))
	}
	return n
}

func (m *Equip_EquipDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equip) > 0 {
		for _, e := range m.Equip {
			l = e.Size()
			n += 1 + l + sovEquip(uint64(l))
		}
	}
	return n
}

func sovEquip(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEquip(x uint64) (n int) {
	return sovEquip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Equip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Equip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Equip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Equip_EquipDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipId = append(m.EquipId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Equip_EquipDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equip = append(m.Equip, &models.Equipment{})
			if err := m.Equip[len(m.Equip)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEquip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEquip
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEquip
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEquip
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEquip        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEquip          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEquip = fmt.Errorf("proto: unexpected end of group")
)
