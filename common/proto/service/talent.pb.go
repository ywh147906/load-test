// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/talent.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TalentErrorCode int32

const (
	TalentErrorCode_ErrTalentNotExist        TalentErrorCode = 0
	TalentErrorCode_ErrTalentNoLevel         TalentErrorCode = 1
	TalentErrorCode_ErrTalentAlreadyActive   TalentErrorCode = 2
	TalentErrorCode_ErrTalentIllegal         TalentErrorCode = 3
	TalentErrorCode_ErrPointsNotEnough       TalentErrorCode = 4
	TalentErrorCode_ErrBuildIsChoose         TalentErrorCode = 5
	TalentErrorCode_ErrBuildIsNotChoose      TalentErrorCode = 6
	TalentErrorCode_ErrBuildIsNotExist       TalentErrorCode = 7
	TalentErrorCode_ErrPreTalentNotActive    TalentErrorCode = 8
	TalentErrorCode_ErrSkillStoneNotExist    TalentErrorCode = 9
	TalentErrorCode_ErrStoneInHole           TalentErrorCode = 10
	TalentErrorCode_ErrStoneNotInHole        TalentErrorCode = 11
	TalentErrorCode_ErrHoleNotMatch          TalentErrorCode = 12
	TalentErrorCode_ErrSkillStoneNotEnough   TalentErrorCode = 13
	TalentErrorCode_ErrComposeSketchWrong    TalentErrorCode = 14
	TalentErrorCode_ErrSkillStoneCantCompose TalentErrorCode = 15
	TalentErrorCode_ErrSkillStoneIsLock      TalentErrorCode = 16
	TalentErrorCode_ErrSkillEquipNotActive   TalentErrorCode = 17
	TalentErrorCode_ErrPlateNotEnough        TalentErrorCode = 18
	TalentErrorCode_ErrPlateUnlock           TalentErrorCode = 19
	TalentErrorCode_ErrPlateNotInlay         TalentErrorCode = 20
	TalentErrorCode_ErrPlateAlreadyInlay     TalentErrorCode = 21
	TalentErrorCode_ErrPlateAlreadyUnlock    TalentErrorCode = 22
)

var TalentErrorCode_name = map[int32]string{
	0:  "ErrTalentNotExist",
	1:  "ErrTalentNoLevel",
	2:  "ErrTalentAlreadyActive",
	3:  "ErrTalentIllegal",
	4:  "ErrPointsNotEnough",
	5:  "ErrBuildIsChoose",
	6:  "ErrBuildIsNotChoose",
	7:  "ErrBuildIsNotExist",
	8:  "ErrPreTalentNotActive",
	9:  "ErrSkillStoneNotExist",
	10: "ErrStoneInHole",
	11: "ErrStoneNotInHole",
	12: "ErrHoleNotMatch",
	13: "ErrSkillStoneNotEnough",
	14: "ErrComposeSketchWrong",
	15: "ErrSkillStoneCantCompose",
	16: "ErrSkillStoneIsLock",
	17: "ErrSkillEquipNotActive",
	18: "ErrPlateNotEnough",
	19: "ErrPlateUnlock",
	20: "ErrPlateNotInlay",
	21: "ErrPlateAlreadyInlay",
	22: "ErrPlateAlreadyUnlock",
}

var TalentErrorCode_value = map[string]int32{
	"ErrTalentNotExist":        0,
	"ErrTalentNoLevel":         1,
	"ErrTalentAlreadyActive":   2,
	"ErrTalentIllegal":         3,
	"ErrPointsNotEnough":       4,
	"ErrBuildIsChoose":         5,
	"ErrBuildIsNotChoose":      6,
	"ErrBuildIsNotExist":       7,
	"ErrPreTalentNotActive":    8,
	"ErrSkillStoneNotExist":    9,
	"ErrStoneInHole":           10,
	"ErrStoneNotInHole":        11,
	"ErrHoleNotMatch":          12,
	"ErrSkillStoneNotEnough":   13,
	"ErrComposeSketchWrong":    14,
	"ErrSkillStoneCantCompose": 15,
	"ErrSkillStoneIsLock":      16,
	"ErrSkillEquipNotActive":   17,
	"ErrPlateNotEnough":        18,
	"ErrPlateUnlock":           19,
	"ErrPlateNotInlay":         20,
	"ErrPlateAlreadyInlay":     21,
	"ErrPlateAlreadyUnlock":    22,
}

func (TalentErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0}
}

type Talent struct {
}

func (m *Talent) Reset()      { *m = Talent{} }
func (*Talent) ProtoMessage() {}
func (*Talent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0}
}
func (m *Talent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent.Merge(m, src)
}
func (m *Talent) XXX_Size() int {
	return m.Size()
}
func (m *Talent) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent.DiscardUnknown(m)
}

var xxx_messageInfo_Talent proto.InternalMessageInfo

func (*Talent) XXX_MessageName() string {
	return "service.Talent"
}

// 天赋盘解锁
type Talent_PlateUnlockRequest struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	PlateIdx int64 `protobuf:"varint,2,opt,name=plate_idx,json=plateIdx,proto3" json:"plate_idx,omitempty"`
	Loc      int64 `protobuf:"varint,3,opt,name=loc,proto3" json:"loc,omitempty"`
}

func (m *Talent_PlateUnlockRequest) Reset()      { *m = Talent_PlateUnlockRequest{} }
func (*Talent_PlateUnlockRequest) ProtoMessage() {}
func (*Talent_PlateUnlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 0}
}
func (m *Talent_PlateUnlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_PlateUnlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_PlateUnlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_PlateUnlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_PlateUnlockRequest.Merge(m, src)
}
func (m *Talent_PlateUnlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_PlateUnlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_PlateUnlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_PlateUnlockRequest proto.InternalMessageInfo

func (m *Talent_PlateUnlockRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_PlateUnlockRequest) GetPlateIdx() int64 {
	if m != nil {
		return m.PlateIdx
	}
	return 0
}

func (m *Talent_PlateUnlockRequest) GetLoc() int64 {
	if m != nil {
		return m.Loc
	}
	return 0
}

func (*Talent_PlateUnlockRequest) XXX_MessageName() string {
	return "service.Talent.PlateUnlockRequest"
}

type Talent_PlateUnlockResponse struct {
}

func (m *Talent_PlateUnlockResponse) Reset()      { *m = Talent_PlateUnlockResponse{} }
func (*Talent_PlateUnlockResponse) ProtoMessage() {}
func (*Talent_PlateUnlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 1}
}
func (m *Talent_PlateUnlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_PlateUnlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_PlateUnlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_PlateUnlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_PlateUnlockResponse.Merge(m, src)
}
func (m *Talent_PlateUnlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_PlateUnlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_PlateUnlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_PlateUnlockResponse proto.InternalMessageInfo

func (*Talent_PlateUnlockResponse) XXX_MessageName() string {
	return "service.Talent.PlateUnlockResponse"
}

// 符文升级
type Talent_RuneLevelUpRequest struct {
	RuneId     string   `protobuf:"bytes,1,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	UseRuneIds []string `protobuf:"bytes,2,rep,name=use_rune_ids,json=useRuneIds,proto3" json:"use_rune_ids,omitempty"`
}

func (m *Talent_RuneLevelUpRequest) Reset()      { *m = Talent_RuneLevelUpRequest{} }
func (*Talent_RuneLevelUpRequest) ProtoMessage() {}
func (*Talent_RuneLevelUpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 2}
}
func (m *Talent_RuneLevelUpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RuneLevelUpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RuneLevelUpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RuneLevelUpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RuneLevelUpRequest.Merge(m, src)
}
func (m *Talent_RuneLevelUpRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RuneLevelUpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RuneLevelUpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RuneLevelUpRequest proto.InternalMessageInfo

func (m *Talent_RuneLevelUpRequest) GetRuneId() string {
	if m != nil {
		return m.RuneId
	}
	return ""
}

func (m *Talent_RuneLevelUpRequest) GetUseRuneIds() []string {
	if m != nil {
		return m.UseRuneIds
	}
	return nil
}

func (*Talent_RuneLevelUpRequest) XXX_MessageName() string {
	return "service.Talent.RuneLevelUpRequest"
}

type Talent_RuneLevelUpResponse struct {
}

func (m *Talent_RuneLevelUpResponse) Reset()      { *m = Talent_RuneLevelUpResponse{} }
func (*Talent_RuneLevelUpResponse) ProtoMessage() {}
func (*Talent_RuneLevelUpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 3}
}
func (m *Talent_RuneLevelUpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RuneLevelUpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RuneLevelUpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RuneLevelUpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RuneLevelUpResponse.Merge(m, src)
}
func (m *Talent_RuneLevelUpResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RuneLevelUpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RuneLevelUpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RuneLevelUpResponse proto.InternalMessageInfo

func (*Talent_RuneLevelUpResponse) XXX_MessageName() string {
	return "service.Talent.RuneLevelUpResponse"
}

// 符文粉尘升级
type Talent_RuneLevelUpUseDustRequest struct {
	RuneId  string `protobuf:"bytes,1,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	DustCnt int64  `protobuf:"varint,2,opt,name=dust_cnt,json=dustCnt,proto3" json:"dust_cnt,omitempty"`
}

func (m *Talent_RuneLevelUpUseDustRequest) Reset()      { *m = Talent_RuneLevelUpUseDustRequest{} }
func (*Talent_RuneLevelUpUseDustRequest) ProtoMessage() {}
func (*Talent_RuneLevelUpUseDustRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 4}
}
func (m *Talent_RuneLevelUpUseDustRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RuneLevelUpUseDustRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RuneLevelUpUseDustRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RuneLevelUpUseDustRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RuneLevelUpUseDustRequest.Merge(m, src)
}
func (m *Talent_RuneLevelUpUseDustRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RuneLevelUpUseDustRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RuneLevelUpUseDustRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RuneLevelUpUseDustRequest proto.InternalMessageInfo

func (m *Talent_RuneLevelUpUseDustRequest) GetRuneId() string {
	if m != nil {
		return m.RuneId
	}
	return ""
}

func (m *Talent_RuneLevelUpUseDustRequest) GetDustCnt() int64 {
	if m != nil {
		return m.DustCnt
	}
	return 0
}

func (*Talent_RuneLevelUpUseDustRequest) XXX_MessageName() string {
	return "service.Talent.RuneLevelUpUseDustRequest"
}

type Talent_RuneLevelUpUseDustResponse struct {
}

func (m *Talent_RuneLevelUpUseDustResponse) Reset()      { *m = Talent_RuneLevelUpUseDustResponse{} }
func (*Talent_RuneLevelUpUseDustResponse) ProtoMessage() {}
func (*Talent_RuneLevelUpUseDustResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 5}
}
func (m *Talent_RuneLevelUpUseDustResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RuneLevelUpUseDustResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RuneLevelUpUseDustResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RuneLevelUpUseDustResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RuneLevelUpUseDustResponse.Merge(m, src)
}
func (m *Talent_RuneLevelUpUseDustResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RuneLevelUpUseDustResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RuneLevelUpUseDustResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RuneLevelUpUseDustResponse proto.InternalMessageInfo

func (*Talent_RuneLevelUpUseDustResponse) XXX_MessageName() string {
	return "service.Talent.RuneLevelUpUseDustResponse"
}

// 镶嵌 or 取下 符文
type Talent_RuneInlayRequest struct {
	ConfigId int64  `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	PlateIdx int64  `protobuf:"varint,2,opt,name=plate_idx,json=plateIdx,proto3" json:"plate_idx,omitempty"`
	Loc      int64  `protobuf:"varint,3,opt,name=loc,proto3" json:"loc,omitempty"`
	RuneId   string `protobuf:"bytes,4,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	IsInlay  bool   `protobuf:"varint,5,opt,name=is_inlay,json=isInlay,proto3" json:"is_inlay,omitempty"`
}

func (m *Talent_RuneInlayRequest) Reset()      { *m = Talent_RuneInlayRequest{} }
func (*Talent_RuneInlayRequest) ProtoMessage() {}
func (*Talent_RuneInlayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 6}
}
func (m *Talent_RuneInlayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RuneInlayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RuneInlayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RuneInlayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RuneInlayRequest.Merge(m, src)
}
func (m *Talent_RuneInlayRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RuneInlayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RuneInlayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RuneInlayRequest proto.InternalMessageInfo

func (m *Talent_RuneInlayRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_RuneInlayRequest) GetPlateIdx() int64 {
	if m != nil {
		return m.PlateIdx
	}
	return 0
}

func (m *Talent_RuneInlayRequest) GetLoc() int64 {
	if m != nil {
		return m.Loc
	}
	return 0
}

func (m *Talent_RuneInlayRequest) GetRuneId() string {
	if m != nil {
		return m.RuneId
	}
	return ""
}

func (m *Talent_RuneInlayRequest) GetIsInlay() bool {
	if m != nil {
		return m.IsInlay
	}
	return false
}

func (*Talent_RuneInlayRequest) XXX_MessageName() string {
	return "service.Talent.RuneInlayRequest"
}

type Talent_RuneInlayResponse struct {
}

func (m *Talent_RuneInlayResponse) Reset()      { *m = Talent_RuneInlayResponse{} }
func (*Talent_RuneInlayResponse) ProtoMessage() {}
func (*Talent_RuneInlayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 7}
}
func (m *Talent_RuneInlayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RuneInlayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RuneInlayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RuneInlayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RuneInlayResponse.Merge(m, src)
}
func (m *Talent_RuneInlayResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RuneInlayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RuneInlayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RuneInlayResponse proto.InternalMessageInfo

func (*Talent_RuneInlayResponse) XXX_MessageName() string {
	return "service.Talent.RuneInlayResponse"
}

// 移动符文
type Talent_RuneMoveRequest struct {
	ConfigId int64  `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	PlateIdx int64  `protobuf:"varint,2,opt,name=plate_idx,json=plateIdx,proto3" json:"plate_idx,omitempty"`
	OldLoc   int64  `protobuf:"varint,3,opt,name=old_loc,json=oldLoc,proto3" json:"old_loc,omitempty"`
	NewLoc   int64  `protobuf:"varint,4,opt,name=new_loc,json=newLoc,proto3" json:"new_loc,omitempty"`
	RuneId   string `protobuf:"bytes,5,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
}

func (m *Talent_RuneMoveRequest) Reset()      { *m = Talent_RuneMoveRequest{} }
func (*Talent_RuneMoveRequest) ProtoMessage() {}
func (*Talent_RuneMoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 8}
}
func (m *Talent_RuneMoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RuneMoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RuneMoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RuneMoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RuneMoveRequest.Merge(m, src)
}
func (m *Talent_RuneMoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RuneMoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RuneMoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RuneMoveRequest proto.InternalMessageInfo

func (m *Talent_RuneMoveRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_RuneMoveRequest) GetPlateIdx() int64 {
	if m != nil {
		return m.PlateIdx
	}
	return 0
}

func (m *Talent_RuneMoveRequest) GetOldLoc() int64 {
	if m != nil {
		return m.OldLoc
	}
	return 0
}

func (m *Talent_RuneMoveRequest) GetNewLoc() int64 {
	if m != nil {
		return m.NewLoc
	}
	return 0
}

func (m *Talent_RuneMoveRequest) GetRuneId() string {
	if m != nil {
		return m.RuneId
	}
	return ""
}

func (*Talent_RuneMoveRequest) XXX_MessageName() string {
	return "service.Talent.RuneMoveRequest"
}

type Talent_RuneMoveResponse struct {
}

func (m *Talent_RuneMoveResponse) Reset()      { *m = Talent_RuneMoveResponse{} }
func (*Talent_RuneMoveResponse) ProtoMessage() {}
func (*Talent_RuneMoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 9}
}
func (m *Talent_RuneMoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RuneMoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RuneMoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RuneMoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RuneMoveResponse.Merge(m, src)
}
func (m *Talent_RuneMoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RuneMoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RuneMoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RuneMoveResponse proto.InternalMessageInfo

func (*Talent_RuneMoveResponse) XXX_MessageName() string {
	return "service.Talent.RuneMoveResponse"
}

// 技能升级
type Talent_SkillLevelUpRequest struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	SkillId  int64 `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (m *Talent_SkillLevelUpRequest) Reset()      { *m = Talent_SkillLevelUpRequest{} }
func (*Talent_SkillLevelUpRequest) ProtoMessage() {}
func (*Talent_SkillLevelUpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 10}
}
func (m *Talent_SkillLevelUpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_SkillLevelUpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_SkillLevelUpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_SkillLevelUpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_SkillLevelUpRequest.Merge(m, src)
}
func (m *Talent_SkillLevelUpRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_SkillLevelUpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_SkillLevelUpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_SkillLevelUpRequest proto.InternalMessageInfo

func (m *Talent_SkillLevelUpRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_SkillLevelUpRequest) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (*Talent_SkillLevelUpRequest) XXX_MessageName() string {
	return "service.Talent.SkillLevelUpRequest"
}

type Talent_SkillLevelUpResponse struct {
	ConfigId int64               `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Skill    *models.SkillDetail `protobuf:"bytes,3,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (m *Talent_SkillLevelUpResponse) Reset()      { *m = Talent_SkillLevelUpResponse{} }
func (*Talent_SkillLevelUpResponse) ProtoMessage() {}
func (*Talent_SkillLevelUpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 11}
}
func (m *Talent_SkillLevelUpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_SkillLevelUpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_SkillLevelUpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_SkillLevelUpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_SkillLevelUpResponse.Merge(m, src)
}
func (m *Talent_SkillLevelUpResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_SkillLevelUpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_SkillLevelUpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_SkillLevelUpResponse proto.InternalMessageInfo

func (m *Talent_SkillLevelUpResponse) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_SkillLevelUpResponse) GetSkill() *models.SkillDetail {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (*Talent_SkillLevelUpResponse) XXX_MessageName() string {
	return "service.Talent.SkillLevelUpResponse"
}

// 技能选择
type Talent_SkillChooseRequest struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Idx      int64 `protobuf:"varint,2,opt,name=idx,proto3" json:"idx,omitempty"`
	SkillId  int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (m *Talent_SkillChooseRequest) Reset()      { *m = Talent_SkillChooseRequest{} }
func (*Talent_SkillChooseRequest) ProtoMessage() {}
func (*Talent_SkillChooseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 12}
}
func (m *Talent_SkillChooseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_SkillChooseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_SkillChooseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_SkillChooseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_SkillChooseRequest.Merge(m, src)
}
func (m *Talent_SkillChooseRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_SkillChooseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_SkillChooseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_SkillChooseRequest proto.InternalMessageInfo

func (m *Talent_SkillChooseRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_SkillChooseRequest) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *Talent_SkillChooseRequest) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (*Talent_SkillChooseRequest) XXX_MessageName() string {
	return "service.Talent.SkillChooseRequest"
}

type Talent_SkillChooseResponse struct {
	Talent *models.HeroTalent `protobuf:"bytes,1,opt,name=talent,proto3" json:"talent,omitempty"`
}

func (m *Talent_SkillChooseResponse) Reset()      { *m = Talent_SkillChooseResponse{} }
func (*Talent_SkillChooseResponse) ProtoMessage() {}
func (*Talent_SkillChooseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 13}
}
func (m *Talent_SkillChooseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_SkillChooseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_SkillChooseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_SkillChooseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_SkillChooseResponse.Merge(m, src)
}
func (m *Talent_SkillChooseResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_SkillChooseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_SkillChooseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_SkillChooseResponse proto.InternalMessageInfo

func (m *Talent_SkillChooseResponse) GetTalent() *models.HeroTalent {
	if m != nil {
		return m.Talent
	}
	return nil
}

func (*Talent_SkillChooseResponse) XXX_MessageName() string {
	return "service.Talent.SkillChooseResponse"
}

// 获取天赋列表
type Talent_GetsRequest struct {
}

func (m *Talent_GetsRequest) Reset()      { *m = Talent_GetsRequest{} }
func (*Talent_GetsRequest) ProtoMessage() {}
func (*Talent_GetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 14}
}
func (m *Talent_GetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_GetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_GetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_GetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_GetsRequest.Merge(m, src)
}
func (m *Talent_GetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_GetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_GetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_GetsRequest proto.InternalMessageInfo

func (*Talent_GetsRequest) XXX_MessageName() string {
	return "service.Talent.GetsRequest"
}

type Talent_GetsResponse struct {
	CommonPoints int64                `protobuf:"varint,1,opt,name=common_points,json=commonPoints,proto3" json:"common_points,omitempty"`
	Talents      []*models.HeroTalent `protobuf:"bytes,2,rep,name=talents,proto3" json:"talents,omitempty"`
	LockStoneIds []int64              `protobuf:"varint,3,rep,packed,name=lock_stone_ids,json=lockStoneIds,proto3" json:"lock_stone_ids,omitempty"`
}

func (m *Talent_GetsResponse) Reset()      { *m = Talent_GetsResponse{} }
func (*Talent_GetsResponse) ProtoMessage() {}
func (*Talent_GetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 15}
}
func (m *Talent_GetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_GetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_GetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_GetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_GetsResponse.Merge(m, src)
}
func (m *Talent_GetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_GetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_GetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_GetsResponse proto.InternalMessageInfo

func (m *Talent_GetsResponse) GetCommonPoints() int64 {
	if m != nil {
		return m.CommonPoints
	}
	return 0
}

func (m *Talent_GetsResponse) GetTalents() []*models.HeroTalent {
	if m != nil {
		return m.Talents
	}
	return nil
}

func (m *Talent_GetsResponse) GetLockStoneIds() []int64 {
	if m != nil {
		return m.LockStoneIds
	}
	return nil
}

func (*Talent_GetsResponse) XXX_MessageName() string {
	return "service.Talent.GetsResponse"
}

// 重置天赋
type Talent_ResetRequest struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	PlateIdx int64 `protobuf:"varint,2,opt,name=plate_idx,json=plateIdx,proto3" json:"plate_idx,omitempty"`
}

func (m *Talent_ResetRequest) Reset()      { *m = Talent_ResetRequest{} }
func (*Talent_ResetRequest) ProtoMessage() {}
func (*Talent_ResetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 16}
}
func (m *Talent_ResetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_ResetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_ResetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_ResetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_ResetRequest.Merge(m, src)
}
func (m *Talent_ResetRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_ResetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_ResetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_ResetRequest proto.InternalMessageInfo

func (m *Talent_ResetRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_ResetRequest) GetPlateIdx() int64 {
	if m != nil {
		return m.PlateIdx
	}
	return 0
}

func (*Talent_ResetRequest) XXX_MessageName() string {
	return "service.Talent.ResetRequest"
}

type Talent_ResetResponse struct {
}

func (m *Talent_ResetResponse) Reset()      { *m = Talent_ResetResponse{} }
func (*Talent_ResetResponse) ProtoMessage() {}
func (*Talent_ResetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 17}
}
func (m *Talent_ResetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_ResetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_ResetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_ResetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_ResetResponse.Merge(m, src)
}
func (m *Talent_ResetResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_ResetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_ResetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_ResetResponse proto.InternalMessageInfo

func (*Talent_ResetResponse) XXX_MessageName() string {
	return "service.Talent.ResetResponse"
}

// 镶嵌宝石
type Talent_InlayStoneRequest struct {
	ConfigId     int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	SkillId      int64 `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillStoneId int64 `protobuf:"varint,3,opt,name=skill_stone_id,json=skillStoneId,proto3" json:"skill_stone_id,omitempty"`
	HoleIdx      int64 `protobuf:"varint,4,opt,name=hole_idx,json=holeIdx,proto3" json:"hole_idx,omitempty"`
}

func (m *Talent_InlayStoneRequest) Reset()      { *m = Talent_InlayStoneRequest{} }
func (*Talent_InlayStoneRequest) ProtoMessage() {}
func (*Talent_InlayStoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 18}
}
func (m *Talent_InlayStoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_InlayStoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_InlayStoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_InlayStoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_InlayStoneRequest.Merge(m, src)
}
func (m *Talent_InlayStoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_InlayStoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_InlayStoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_InlayStoneRequest proto.InternalMessageInfo

func (m *Talent_InlayStoneRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_InlayStoneRequest) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *Talent_InlayStoneRequest) GetSkillStoneId() int64 {
	if m != nil {
		return m.SkillStoneId
	}
	return 0
}

func (m *Talent_InlayStoneRequest) GetHoleIdx() int64 {
	if m != nil {
		return m.HoleIdx
	}
	return 0
}

func (*Talent_InlayStoneRequest) XXX_MessageName() string {
	return "service.Talent.InlayStoneRequest"
}

type Talent_InlayStoneResponse struct {
	ConfigId int64               `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Skill    *models.SkillDetail `protobuf:"bytes,2,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (m *Talent_InlayStoneResponse) Reset()      { *m = Talent_InlayStoneResponse{} }
func (*Talent_InlayStoneResponse) ProtoMessage() {}
func (*Talent_InlayStoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 19}
}
func (m *Talent_InlayStoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_InlayStoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_InlayStoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_InlayStoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_InlayStoneResponse.Merge(m, src)
}
func (m *Talent_InlayStoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_InlayStoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_InlayStoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_InlayStoneResponse proto.InternalMessageInfo

func (m *Talent_InlayStoneResponse) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_InlayStoneResponse) GetSkill() *models.SkillDetail {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (*Talent_InlayStoneResponse) XXX_MessageName() string {
	return "service.Talent.InlayStoneResponse"
}

// 移除宝石
type Talent_RemoveStoneRequest struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	SkillId  int64 `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	HoleIdx  int64 `protobuf:"varint,3,opt,name=hole_idx,json=holeIdx,proto3" json:"hole_idx,omitempty"`
}

func (m *Talent_RemoveStoneRequest) Reset()      { *m = Talent_RemoveStoneRequest{} }
func (*Talent_RemoveStoneRequest) ProtoMessage() {}
func (*Talent_RemoveStoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 20}
}
func (m *Talent_RemoveStoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RemoveStoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RemoveStoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RemoveStoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RemoveStoneRequest.Merge(m, src)
}
func (m *Talent_RemoveStoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RemoveStoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RemoveStoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RemoveStoneRequest proto.InternalMessageInfo

func (m *Talent_RemoveStoneRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_RemoveStoneRequest) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *Talent_RemoveStoneRequest) GetHoleIdx() int64 {
	if m != nil {
		return m.HoleIdx
	}
	return 0
}

func (*Talent_RemoveStoneRequest) XXX_MessageName() string {
	return "service.Talent.RemoveStoneRequest"
}

type Talent_RemoveStoneResponse struct {
	ConfigId int64               `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Skill    *models.SkillDetail `protobuf:"bytes,2,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (m *Talent_RemoveStoneResponse) Reset()      { *m = Talent_RemoveStoneResponse{} }
func (*Talent_RemoveStoneResponse) ProtoMessage() {}
func (*Talent_RemoveStoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 21}
}
func (m *Talent_RemoveStoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RemoveStoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RemoveStoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RemoveStoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RemoveStoneResponse.Merge(m, src)
}
func (m *Talent_RemoveStoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RemoveStoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RemoveStoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RemoveStoneResponse proto.InternalMessageInfo

func (m *Talent_RemoveStoneResponse) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_RemoveStoneResponse) GetSkill() *models.SkillDetail {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (*Talent_RemoveStoneResponse) XXX_MessageName() string {
	return "service.Talent.RemoveStoneResponse"
}

// 移除所有宝石
type Talent_RemoveAllStoneRequest struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	SkillId  int64 `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (m *Talent_RemoveAllStoneRequest) Reset()      { *m = Talent_RemoveAllStoneRequest{} }
func (*Talent_RemoveAllStoneRequest) ProtoMessage() {}
func (*Talent_RemoveAllStoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 22}
}
func (m *Talent_RemoveAllStoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RemoveAllStoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RemoveAllStoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RemoveAllStoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RemoveAllStoneRequest.Merge(m, src)
}
func (m *Talent_RemoveAllStoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RemoveAllStoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RemoveAllStoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RemoveAllStoneRequest proto.InternalMessageInfo

func (m *Talent_RemoveAllStoneRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_RemoveAllStoneRequest) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (*Talent_RemoveAllStoneRequest) XXX_MessageName() string {
	return "service.Talent.RemoveAllStoneRequest"
}

type Talent_RemoveAllStoneResponse struct {
	ConfigId int64               `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Skill    *models.SkillDetail `protobuf:"bytes,2,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (m *Talent_RemoveAllStoneResponse) Reset()      { *m = Talent_RemoveAllStoneResponse{} }
func (*Talent_RemoveAllStoneResponse) ProtoMessage() {}
func (*Talent_RemoveAllStoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 23}
}
func (m *Talent_RemoveAllStoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_RemoveAllStoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_RemoveAllStoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_RemoveAllStoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_RemoveAllStoneResponse.Merge(m, src)
}
func (m *Talent_RemoveAllStoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_RemoveAllStoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_RemoveAllStoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_RemoveAllStoneResponse proto.InternalMessageInfo

func (m *Talent_RemoveAllStoneResponse) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_RemoveAllStoneResponse) GetSkill() *models.SkillDetail {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (*Talent_RemoveAllStoneResponse) XXX_MessageName() string {
	return "service.Talent.RemoveAllStoneResponse"
}

// 合成宝石
type Talent_ComposeStoneRequest struct {
	MainId       int64   `protobuf:"varint,1,opt,name=main_id,json=mainId,proto3" json:"main_id,omitempty"`
	SacrificeIds []int64 `protobuf:"varint,2,rep,packed,name=sacrifice_ids,json=sacrificeIds,proto3" json:"sacrifice_ids,omitempty"`
}

func (m *Talent_ComposeStoneRequest) Reset()      { *m = Talent_ComposeStoneRequest{} }
func (*Talent_ComposeStoneRequest) ProtoMessage() {}
func (*Talent_ComposeStoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 24}
}
func (m *Talent_ComposeStoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_ComposeStoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_ComposeStoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_ComposeStoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_ComposeStoneRequest.Merge(m, src)
}
func (m *Talent_ComposeStoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_ComposeStoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_ComposeStoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_ComposeStoneRequest proto.InternalMessageInfo

func (m *Talent_ComposeStoneRequest) GetMainId() int64 {
	if m != nil {
		return m.MainId
	}
	return 0
}

func (m *Talent_ComposeStoneRequest) GetSacrificeIds() []int64 {
	if m != nil {
		return m.SacrificeIds
	}
	return nil
}

func (*Talent_ComposeStoneRequest) XXX_MessageName() string {
	return "service.Talent.ComposeStoneRequest"
}

type Talent_ComposeStoneResponse struct {
}

func (m *Talent_ComposeStoneResponse) Reset()      { *m = Talent_ComposeStoneResponse{} }
func (*Talent_ComposeStoneResponse) ProtoMessage() {}
func (*Talent_ComposeStoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 25}
}
func (m *Talent_ComposeStoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_ComposeStoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_ComposeStoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_ComposeStoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_ComposeStoneResponse.Merge(m, src)
}
func (m *Talent_ComposeStoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_ComposeStoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_ComposeStoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_ComposeStoneResponse proto.InternalMessageInfo

func (*Talent_ComposeStoneResponse) XXX_MessageName() string {
	return "service.Talent.ComposeStoneResponse"
}

// 解锁或上锁宝石
type Talent_LockStoneRequest struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	IsLock bool  `protobuf:"varint,2,opt,name=is_lock,json=isLock,proto3" json:"is_lock,omitempty"`
}

func (m *Talent_LockStoneRequest) Reset()      { *m = Talent_LockStoneRequest{} }
func (*Talent_LockStoneRequest) ProtoMessage() {}
func (*Talent_LockStoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 26}
}
func (m *Talent_LockStoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_LockStoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_LockStoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_LockStoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_LockStoneRequest.Merge(m, src)
}
func (m *Talent_LockStoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_LockStoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_LockStoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_LockStoneRequest proto.InternalMessageInfo

func (m *Talent_LockStoneRequest) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Talent_LockStoneRequest) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

func (*Talent_LockStoneRequest) XXX_MessageName() string {
	return "service.Talent.LockStoneRequest"
}

type Talent_LockStoneResponse struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	IsLock bool  `protobuf:"varint,2,opt,name=is_lock,json=isLock,proto3" json:"is_lock,omitempty"`
}

func (m *Talent_LockStoneResponse) Reset()      { *m = Talent_LockStoneResponse{} }
func (*Talent_LockStoneResponse) ProtoMessage() {}
func (*Talent_LockStoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 27}
}
func (m *Talent_LockStoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_LockStoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_LockStoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_LockStoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_LockStoneResponse.Merge(m, src)
}
func (m *Talent_LockStoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_LockStoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_LockStoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_LockStoneResponse proto.InternalMessageInfo

func (m *Talent_LockStoneResponse) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Talent_LockStoneResponse) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

func (*Talent_LockStoneResponse) XXX_MessageName() string {
	return "service.Talent.LockStoneResponse"
}

//----------------------push----------------------//
// 天赋点数改变
type Talent_TalentPointChangePush struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Points   int64 `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
}

func (m *Talent_TalentPointChangePush) Reset()      { *m = Talent_TalentPointChangePush{} }
func (*Talent_TalentPointChangePush) ProtoMessage() {}
func (*Talent_TalentPointChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 28}
}
func (m *Talent_TalentPointChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_TalentPointChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_TalentPointChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_TalentPointChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_TalentPointChangePush.Merge(m, src)
}
func (m *Talent_TalentPointChangePush) XXX_Size() int {
	return m.Size()
}
func (m *Talent_TalentPointChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_TalentPointChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_TalentPointChangePush proto.InternalMessageInfo

func (m *Talent_TalentPointChangePush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_TalentPointChangePush) GetPoints() int64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (*Talent_TalentPointChangePush) XXX_MessageName() string {
	return "service.Talent.TalentPointChangePush"
}

// 天赋技能改变
type Talent_TalentSkillChangePush struct {
	ConfigId int64              `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Data     *models.HeroTalent `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Talent_TalentSkillChangePush) Reset()      { *m = Talent_TalentSkillChangePush{} }
func (*Talent_TalentSkillChangePush) ProtoMessage() {}
func (*Talent_TalentSkillChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 29}
}
func (m *Talent_TalentSkillChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_TalentSkillChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_TalentSkillChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_TalentSkillChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_TalentSkillChangePush.Merge(m, src)
}
func (m *Talent_TalentSkillChangePush) XXX_Size() int {
	return m.Size()
}
func (m *Talent_TalentSkillChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_TalentSkillChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_TalentSkillChangePush proto.InternalMessageInfo

func (m *Talent_TalentSkillChangePush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_TalentSkillChangePush) GetData() *models.HeroTalent {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*Talent_TalentSkillChangePush) XXX_MessageName() string {
	return "service.Talent.TalentSkillChangePush"
}

// 天赋盘改变
type Talent_PlateChangePush struct {
	ConfigId int64               `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	PlateIdx int64               `protobuf:"varint,2,opt,name=plate_idx,json=plateIdx,proto3" json:"plate_idx,omitempty"`
	Plate    *models.TalentPlate `protobuf:"bytes,3,opt,name=plate,proto3" json:"plate,omitempty"`
}

func (m *Talent_PlateChangePush) Reset()      { *m = Talent_PlateChangePush{} }
func (*Talent_PlateChangePush) ProtoMessage() {}
func (*Talent_PlateChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 30}
}
func (m *Talent_PlateChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_PlateChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_PlateChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_PlateChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_PlateChangePush.Merge(m, src)
}
func (m *Talent_PlateChangePush) XXX_Size() int {
	return m.Size()
}
func (m *Talent_PlateChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_PlateChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_PlateChangePush proto.InternalMessageInfo

func (m *Talent_PlateChangePush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_PlateChangePush) GetPlateIdx() int64 {
	if m != nil {
		return m.PlateIdx
	}
	return 0
}

func (m *Talent_PlateChangePush) GetPlate() *models.TalentPlate {
	if m != nil {
		return m.Plate
	}
	return nil
}

func (*Talent_PlateChangePush) XXX_MessageName() string {
	return "service.Talent.PlateChangePush"
}

//----------------------cheat----------------------//
type Talent_CheatAddCommonRequest struct {
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Talent_CheatAddCommonRequest) Reset()      { *m = Talent_CheatAddCommonRequest{} }
func (*Talent_CheatAddCommonRequest) ProtoMessage() {}
func (*Talent_CheatAddCommonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 31}
}
func (m *Talent_CheatAddCommonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_CheatAddCommonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_CheatAddCommonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_CheatAddCommonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_CheatAddCommonRequest.Merge(m, src)
}
func (m *Talent_CheatAddCommonRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_CheatAddCommonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_CheatAddCommonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_CheatAddCommonRequest proto.InternalMessageInfo

func (m *Talent_CheatAddCommonRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*Talent_CheatAddCommonRequest) XXX_MessageName() string {
	return "service.Talent.CheatAddCommonRequest"
}

type Talent_CheatAddCommonResponse struct {
}

func (m *Talent_CheatAddCommonResponse) Reset()      { *m = Talent_CheatAddCommonResponse{} }
func (*Talent_CheatAddCommonResponse) ProtoMessage() {}
func (*Talent_CheatAddCommonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 32}
}
func (m *Talent_CheatAddCommonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_CheatAddCommonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_CheatAddCommonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_CheatAddCommonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_CheatAddCommonResponse.Merge(m, src)
}
func (m *Talent_CheatAddCommonResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_CheatAddCommonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_CheatAddCommonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_CheatAddCommonResponse proto.InternalMessageInfo

func (*Talent_CheatAddCommonResponse) XXX_MessageName() string {
	return "service.Talent.CheatAddCommonResponse"
}

type Talent_CheatAddParticularRequest struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Num      int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Talent_CheatAddParticularRequest) Reset()      { *m = Talent_CheatAddParticularRequest{} }
func (*Talent_CheatAddParticularRequest) ProtoMessage() {}
func (*Talent_CheatAddParticularRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 33}
}
func (m *Talent_CheatAddParticularRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_CheatAddParticularRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_CheatAddParticularRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_CheatAddParticularRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_CheatAddParticularRequest.Merge(m, src)
}
func (m *Talent_CheatAddParticularRequest) XXX_Size() int {
	return m.Size()
}
func (m *Talent_CheatAddParticularRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_CheatAddParticularRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_CheatAddParticularRequest proto.InternalMessageInfo

func (m *Talent_CheatAddParticularRequest) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *Talent_CheatAddParticularRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*Talent_CheatAddParticularRequest) XXX_MessageName() string {
	return "service.Talent.CheatAddParticularRequest"
}

type Talent_CheatAddParticularResponse struct {
}

func (m *Talent_CheatAddParticularResponse) Reset()      { *m = Talent_CheatAddParticularResponse{} }
func (*Talent_CheatAddParticularResponse) ProtoMessage() {}
func (*Talent_CheatAddParticularResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a5dd5530e4951e9, []int{0, 34}
}
func (m *Talent_CheatAddParticularResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_CheatAddParticularResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_CheatAddParticularResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_CheatAddParticularResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_CheatAddParticularResponse.Merge(m, src)
}
func (m *Talent_CheatAddParticularResponse) XXX_Size() int {
	return m.Size()
}
func (m *Talent_CheatAddParticularResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_CheatAddParticularResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_CheatAddParticularResponse proto.InternalMessageInfo

func (*Talent_CheatAddParticularResponse) XXX_MessageName() string {
	return "service.Talent.CheatAddParticularResponse"
}
func init() {
	proto.RegisterEnum("service.TalentErrorCode", TalentErrorCode_name, TalentErrorCode_value)
	proto.RegisterType((*Talent)(nil), "service.Talent")
	proto.RegisterType((*Talent_PlateUnlockRequest)(nil), "service.Talent.PlateUnlockRequest")
	proto.RegisterType((*Talent_PlateUnlockResponse)(nil), "service.Talent.PlateUnlockResponse")
	proto.RegisterType((*Talent_RuneLevelUpRequest)(nil), "service.Talent.RuneLevelUpRequest")
	proto.RegisterType((*Talent_RuneLevelUpResponse)(nil), "service.Talent.RuneLevelUpResponse")
	proto.RegisterType((*Talent_RuneLevelUpUseDustRequest)(nil), "service.Talent.RuneLevelUpUseDustRequest")
	proto.RegisterType((*Talent_RuneLevelUpUseDustResponse)(nil), "service.Talent.RuneLevelUpUseDustResponse")
	proto.RegisterType((*Talent_RuneInlayRequest)(nil), "service.Talent.RuneInlayRequest")
	proto.RegisterType((*Talent_RuneInlayResponse)(nil), "service.Talent.RuneInlayResponse")
	proto.RegisterType((*Talent_RuneMoveRequest)(nil), "service.Talent.RuneMoveRequest")
	proto.RegisterType((*Talent_RuneMoveResponse)(nil), "service.Talent.RuneMoveResponse")
	proto.RegisterType((*Talent_SkillLevelUpRequest)(nil), "service.Talent.SkillLevelUpRequest")
	proto.RegisterType((*Talent_SkillLevelUpResponse)(nil), "service.Talent.SkillLevelUpResponse")
	proto.RegisterType((*Talent_SkillChooseRequest)(nil), "service.Talent.SkillChooseRequest")
	proto.RegisterType((*Talent_SkillChooseResponse)(nil), "service.Talent.SkillChooseResponse")
	proto.RegisterType((*Talent_GetsRequest)(nil), "service.Talent.GetsRequest")
	proto.RegisterType((*Talent_GetsResponse)(nil), "service.Talent.GetsResponse")
	proto.RegisterType((*Talent_ResetRequest)(nil), "service.Talent.ResetRequest")
	proto.RegisterType((*Talent_ResetResponse)(nil), "service.Talent.ResetResponse")
	proto.RegisterType((*Talent_InlayStoneRequest)(nil), "service.Talent.InlayStoneRequest")
	proto.RegisterType((*Talent_InlayStoneResponse)(nil), "service.Talent.InlayStoneResponse")
	proto.RegisterType((*Talent_RemoveStoneRequest)(nil), "service.Talent.RemoveStoneRequest")
	proto.RegisterType((*Talent_RemoveStoneResponse)(nil), "service.Talent.RemoveStoneResponse")
	proto.RegisterType((*Talent_RemoveAllStoneRequest)(nil), "service.Talent.RemoveAllStoneRequest")
	proto.RegisterType((*Talent_RemoveAllStoneResponse)(nil), "service.Talent.RemoveAllStoneResponse")
	proto.RegisterType((*Talent_ComposeStoneRequest)(nil), "service.Talent.ComposeStoneRequest")
	proto.RegisterType((*Talent_ComposeStoneResponse)(nil), "service.Talent.ComposeStoneResponse")
	proto.RegisterType((*Talent_LockStoneRequest)(nil), "service.Talent.LockStoneRequest")
	proto.RegisterType((*Talent_LockStoneResponse)(nil), "service.Talent.LockStoneResponse")
	proto.RegisterType((*Talent_TalentPointChangePush)(nil), "service.Talent.TalentPointChangePush")
	proto.RegisterType((*Talent_TalentSkillChangePush)(nil), "service.Talent.TalentSkillChangePush")
	proto.RegisterType((*Talent_PlateChangePush)(nil), "service.Talent.PlateChangePush")
	proto.RegisterType((*Talent_CheatAddCommonRequest)(nil), "service.Talent.CheatAddCommonRequest")
	proto.RegisterType((*Talent_CheatAddCommonResponse)(nil), "service.Talent.CheatAddCommonResponse")
	proto.RegisterType((*Talent_CheatAddParticularRequest)(nil), "service.Talent.CheatAddParticularRequest")
	proto.RegisterType((*Talent_CheatAddParticularResponse)(nil), "service.Talent.CheatAddParticularResponse")
}

func init() { proto.RegisterFile("proto/service/talent.proto", fileDescriptor_8a5dd5530e4951e9) }

var fileDescriptor_8a5dd5530e4951e9 = []byte{
	// 1552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdd, 0x4f, 0x14, 0xe7,
	0x1a, 0x67, 0x59, 0xd8, 0x85, 0x87, 0xaf, 0xe1, 0x5d, 0x16, 0x96, 0xd1, 0xb3, 0xe1, 0x7c, 0xe4,
	0x04, 0x8d, 0xc2, 0x11, 0xcf, 0x39, 0xb6, 0x4d, 0x6f, 0x70, 0x25, 0x75, 0x1b, 0x44, 0xb2, 0xd4,
	0x34, 0x69, 0xac, 0xeb, 0xb8, 0xf3, 0xca, 0x4e, 0x98, 0x9d, 0x17, 0x67, 0x66, 0x51, 0xef, 0xa4,
	0xa6, 0x51, 0x29, 0xa4, 0xa6, 0xa1, 0x86, 0x5a, 0x5a, 0x63, 0x5b, 0x53, 0x6b, 0xab, 0xa4, 0xe8,
	0x0a, 0x86, 0x50, 0x6f, 0xbd, 0xf4, 0xa2, 0x17, 0x5e, 0xb6, 0xc0, 0x2e, 0xcb, 0x5d, 0xff, 0x84,
	0xe6, 0xfd, 0x98, 0xdd, 0x1d, 0x44, 0xc4, 0x60, 0xef, 0xe6, 0x7d, 0xbe, 0x7e, 0xbf, 0xe7, 0xeb,
	0x7d, 0x77, 0x41, 0x1e, 0x36, 0x89, 0x4d, 0x3a, 0x2d, 0x6c, 0x8e, 0x68, 0x09, 0xdc, 0x69, 0x2b,
	0x3a, 0x36, 0xec, 0x0e, 0x26, 0x44, 0x7e, 0x21, 0x95, 0x5b, 0xb9, 0x51, 0x8a, 0xa8, 0x58, 0xb7,
	0x5c, 0x36, 0x72, 0x8b, 0x4b, 0x75, 0x4a, 0xb1, 0x30, 0x57, 0xfc, 0xe3, 0x4e, 0x13, 0xf8, 0xde,
	0x63, 0x96, 0xf2, 0x49, 0x40, 0xfd, 0xba, 0x62, 0xe3, 0x63, 0x86, 0x4e, 0x12, 0x43, 0x31, 0x7c,
	0x26, 0x8d, 0x2d, 0x1b, 0xed, 0x80, 0xea, 0x04, 0x31, 0x4e, 0x6b, 0x83, 0x71, 0x4d, 0x0d, 0x79,
	0xda, 0x3c, 0xed, 0xde, 0x58, 0x15, 0x17, 0x44, 0x55, 0xaa, 0x1c, 0xa6, 0x2e, 0x71, 0x4d, 0x3d,
	0x17, 0x2a, 0xe7, 0x4a, 0x26, 0x88, 0xaa, 0xe7, 0x90, 0x04, 0x5e, 0x9d, 0x24, 0x42, 0x5e, 0x26,
	0xa6, 0x9f, 0x72, 0x10, 0x02, 0x2e, 0x04, 0x6b, 0x98, 0x18, 0x16, 0x96, 0x8f, 0x02, 0x8a, 0xa5,
	0x0d, 0xdc, 0x8b, 0x47, 0xb0, 0x7e, 0x6c, 0xd8, 0x01, 0x6e, 0x01, 0xbf, 0x99, 0x36, 0xb0, 0x03,
	0x5b, 0x1d, 0xf3, 0xd1, 0x63, 0x54, 0x45, 0x6d, 0x50, 0x9b, 0xb6, 0x70, 0x5c, 0x28, 0xad, 0x50,
	0x79, 0x9b, 0xb7, 0xbd, 0x3a, 0x06, 0x69, 0x0b, 0xc7, 0x98, 0x81, 0x45, 0x71, 0x5c, 0x01, 0x0b,
	0x38, 0xad, 0x25, 0xe2, 0x63, 0x16, 0x3e, 0x94, 0xb6, 0xec, 0x97, 0xc2, 0xb5, 0x42, 0x95, 0x9a,
	0xb6, 0xec, 0x78, 0xc2, 0xb0, 0x45, 0x8a, 0x7e, 0x7a, 0x8e, 0x18, 0xb6, 0xbc, 0x13, 0xe4, 0x8d,
	0x02, 0x0a, 0xb8, 0xcf, 0x3c, 0x20, 0x31, 0x46, 0x86, 0xae, 0x9c, 0xff, 0x0b, 0xca, 0x59, 0x4a,
	0xb9, 0x62, 0x3d, 0x65, 0xcd, 0x8a, 0x6b, 0x14, 0x37, 0x54, 0xd9, 0xe6, 0x69, 0xaf, 0x8a, 0xf9,
	0x35, 0x8b, 0xd1, 0x90, 0x03, 0xd0, 0x58, 0xc2, 0x49, 0x30, 0xbd, 0xe6, 0x81, 0x06, 0x2a, 0x3d,
	0x42, 0x46, 0xf0, 0xf6, 0x89, 0xb6, 0x80, 0x9f, 0xe8, 0x6a, 0xbc, 0x48, 0xd6, 0x47, 0x74, 0xb5,
	0x97, 0xf3, 0x35, 0xf0, 0x59, 0xa6, 0xa8, 0xe0, 0x0a, 0x03, 0x9f, 0xed, 0x75, 0x27, 0x52, 0x59,
	0x9a, 0x88, 0x8c, 0x78, 0x05, 0x39, 0x2f, 0x41, 0xf6, 0x08, 0x04, 0x06, 0x86, 0x34, 0x5d, 0x5f,
	0x37, 0x2e, 0x9b, 0xf2, 0x6d, 0x85, 0x2a, 0x8b, 0xfa, 0x50, 0x9d, 0xe8, 0x21, 0x3b, 0x47, 0x55,
	0xf9, 0x04, 0x34, 0xb9, 0xc3, 0x71, 0x98, 0xcd, 0xe3, 0xed, 0x82, 0x4a, 0xe6, 0xcf, 0x12, 0xac,
	0xe9, 0x0a, 0x74, 0xf0, 0xc5, 0xea, 0x60, 0x91, 0x0e, 0x61, 0x5b, 0xd1, 0xf4, 0x18, 0xb7, 0x90,
	0x4f, 0x00, 0x62, 0xd2, 0x48, 0x92, 0x10, 0x6b, 0x6b, 0xd5, 0x95, 0xc0, 0x5b, 0xac, 0x2b, 0xfd,
	0x74, 0xf1, 0xf7, 0xba, 0xf9, 0x77, 0x8b, 0x72, 0x38, 0xf1, 0x05, 0xfd, 0xdd, 0xe0, 0xe3, 0x17,
	0x00, 0x8b, 0x5e, 0xd3, 0x85, 0x1c, 0x8a, 0x87, 0xb1, 0x49, 0xf8, 0xc2, 0xc7, 0x84, 0x85, 0x5c,
	0x07, 0x35, 0xef, 0x60, 0xdb, 0x12, 0xdc, 0xe4, 0x4b, 0x1e, 0xa8, 0xe5, 0x67, 0x11, 0xeb, 0x9f,
	0x50, 0x97, 0x20, 0xa9, 0x14, 0x31, 0xe2, 0xc3, 0x44, 0x33, 0x6c, 0x4b, 0x10, 0xae, 0xe5, 0xc2,
	0x7e, 0x26, 0x43, 0x7b, 0xc0, 0xcf, 0xc3, 0xf1, 0x85, 0xdc, 0x18, 0xd1, 0x31, 0x41, 0xff, 0x82,
	0x7a, 0x7a, 0x05, 0xc4, 0x2d, 0x9b, 0x88, 0x2d, 0xf6, 0xb6, 0x79, 0x69, 0x4c, 0x2a, 0x1d, 0xa0,
	0x42, 0xba, 0xc7, 0x87, 0xa1, 0x36, 0x86, 0x2d, 0x6c, 0x6f, 0x7b, 0x26, 0xe5, 0x06, 0xa8, 0x13,
	0x91, 0xc4, 0x14, 0x8d, 0x7b, 0xa0, 0x91, 0x2d, 0x01, 0x03, 0xdb, 0xe6, 0x10, 0xd1, 0x74, 0xb8,
	0xca, 0xc9, 0x47, 0x74, 0xa9, 0x96, 0x49, 0x45, 0x3e, 0x34, 0x40, 0x92, 0xe8, 0x9c, 0x20, 0x5f,
	0x00, 0x3f, 0x3d, 0x53, 0x7e, 0xc7, 0x01, 0x95, 0xb2, 0x79, 0xa5, 0x19, 0x2c, 0x7f, 0xe9, 0x0c,
	0x0e, 0x02, 0x8a, 0xe1, 0x14, 0x19, 0xc1, 0xaf, 0x25, 0xd9, 0xd2, 0x34, 0xbc, 0xee, 0x34, 0x3e,
	0x84, 0x80, 0x0b, 0xe8, 0x35, 0xe7, 0x71, 0x14, 0x82, 0x3c, 0x7c, 0xb7, 0x28, 0xea, 0x76, 0x97,
	0xff, 0x24, 0x34, 0xaf, 0x0f, 0xf8, 0x9a, 0x29, 0x0f, 0x40, 0x20, 0x42, 0x52, 0xc3, 0xc4, 0x72,
	0xd7, 0xbe, 0x05, 0xfc, 0x29, 0x45, 0x33, 0x8a, 0xc1, 0x7d, 0xf4, 0x18, 0x55, 0xe9, 0xae, 0x59,
	0x4a, 0xc2, 0xd4, 0x4e, 0x6b, 0x89, 0xe2, 0xeb, 0x46, 0x07, 0xc9, 0x11, 0xd2, 0xbd, 0x68, 0x86,
	0x26, 0x77, 0x50, 0x31, 0xd4, 0x87, 0x40, 0xea, 0x75, 0xf6, 0xa7, 0x04, 0x49, 0xb3, 0x71, 0xaa,
	0x04, 0x89, 0x1e, 0xa3, 0x2a, 0x53, 0x58, 0xf4, 0x32, 0x1e, 0x62, 0x69, 0x54, 0xc5, 0x7c, 0x9a,
	0x45, 0xbd, 0xe5, 0x1e, 0x68, 0x2c, 0x89, 0x22, 0xea, 0xf1, 0xea, 0x61, 0x7a, 0x21, 0xc8, 0xb7,
	0x9e, 0x5d, 0x10, 0x91, 0xa4, 0x62, 0x0c, 0xe2, 0xfe, 0xb4, 0x95, 0xdc, 0xbc, 0xb4, 0xcd, 0xe0,
	0x13, 0x97, 0x0c, 0x6f, 0x95, 0x38, 0xc9, 0xc7, 0x9d, 0x68, 0xe2, 0xb2, 0xdb, 0x5a, 0xb4, 0x7f,
	0x43, 0x85, 0xaa, 0xd8, 0x8a, 0xe8, 0xd3, 0x46, 0x37, 0x12, 0xd3, 0xcb, 0x23, 0xd0, 0xc0, 0x7e,
	0x98, 0x6c, 0x35, 0xee, 0xa6, 0xef, 0xdf, 0x2e, 0xa8, 0x64, 0xdf, 0xeb, 0x1f, 0x07, 0x51, 0x0d,
	0xaa, 0x8a, 0x71, 0x0b, 0x79, 0x17, 0x04, 0x23, 0x49, 0xac, 0xd8, 0xdd, 0xaa, 0x1a, 0x61, 0x97,
	0xa9, 0xd3, 0x35, 0x09, 0xbc, 0x46, 0x3a, 0x25, 0x70, 0xe9, 0xa7, 0x1c, 0x82, 0xe6, 0xf5, 0xa6,
	0xa2, 0xeb, 0xef, 0x42, 0xab, 0xa3, 0xe9, 0x57, 0x4c, 0x5b, 0x4b, 0xa4, 0x75, 0xc5, 0xdc, 0xea,
	0x43, 0x43, 0x51, 0xca, 0x8b, 0x28, 0x3b, 0x41, 0xde, 0x28, 0x16, 0x47, 0xda, 0xfd, 0x6b, 0x35,
	0x34, 0xf0, 0x2c, 0x7a, 0x4c, 0x93, 0x98, 0x11, 0xa2, 0x62, 0xb4, 0x07, 0x1a, 0x7b, 0x4c, 0x93,
	0x4b, 0xfb, 0x88, 0xdd, 0x73, 0x4e, 0xb3, 0x6c, 0xa9, 0x4c, 0x0e, 0x8e, 0x65, 0x42, 0x8d, 0xa8,
	0x21, 0xfb, 0xdd, 0x0f, 0xf9, 0xcc, 0x27, 0x2b, 0xf3, 0x13, 0xd9, 0xbb, 0x53, 0xd9, 0xe9, 0xdb,
	0xa8, 0x1d, 0xa4, 0x12, 0x6b, 0xf6, 0xe6, 0x4a, 0x1e, 0x19, 0x8d, 0x65, 0x42, 0xf5, 0xa8, 0x96,
	0x1b, 0x67, 0xe7, 0x66, 0x73, 0x0b, 0x37, 0xd1, 0x3e, 0x68, 0x2e, 0x58, 0x76, 0xeb, 0x26, 0x56,
	0xd4, 0xf3, 0xdd, 0x09, 0x5b, 0x1b, 0xc1, 0x52, 0xb9, 0x3b, 0x38, 0xb5, 0x7f, 0x7c, 0x21, 0xf7,
	0x60, 0x01, 0xed, 0x2b, 0x09, 0x1e, 0xd5, 0x75, 0x3c, 0xa8, 0xe8, 0x92, 0x57, 0xde, 0x31, 0x96,
	0x09, 0xb5, 0xa0, 0xe0, 0xca, 0xfc, 0x44, 0x6e, 0x6a, 0x26, 0x37, 0xfd, 0x53, 0x7e, 0x74, 0x7c,
	0x65, 0xfe, 0x3a, 0xf7, 0x45, 0x7b, 0x01, 0xf5, 0x98, 0x26, 0x7f, 0xc2, 0x28, 0x7b, 0x83, 0xa4,
	0x07, 0x93, 0x52, 0x85, 0x1b, 0x61, 0xf5, 0xa3, 0x47, 0x2b, 0xf3, 0x13, 0xf9, 0x87, 0xf7, 0x51,
	0x07, 0x43, 0x38, 0x98, 0xd6, 0x74, 0x35, 0x6a, 0xf1, 0x17, 0x57, 0xaa, 0x94, 0x43, 0x63, 0x99,
	0x50, 0x13, 0x42, 0xd9, 0xb9, 0xd9, 0xd5, 0x85, 0x4f, 0x39, 0x97, 0x5c, 0x66, 0x34, 0xf7, 0xe0,
	0x17, 0xf4, 0x16, 0x04, 0x8a, 0xf6, 0x7d, 0xc4, 0x16, 0x2e, 0x3e, 0xf9, 0xef, 0x63, 0x99, 0xd0,
	0xdf, 0xd0, 0x8e, 0xfc, 0xcc, 0x2d, 0x4e, 0x27, 0xff, 0x78, 0x2a, 0x37, 0x7b, 0xd3, 0xe5, 0xfb,
	0x1f, 0x46, 0xad, 0xe8, 0xcb, 0x2b, 0xeb, 0x77, 0xd0, 0xf2, 0x33, 0xb7, 0xb8, 0x61, 0xb1, 0xb8,
	0xff, 0x87, 0x20, 0x4d, 0xc6, 0xc4, 0x85, 0x6e, 0x88, 0x8a, 0x55, 0x39, 0x45, 0xc8, 0x5e, 0x99,
	0x58, 0x5d, 0xbc, 0xc7, 0xb3, 0xca, 0x4d, 0xdf, 0x11, 0x75, 0xdb, 0xcf, 0xfc, 0x06, 0x0a, 0x4f,
	0x55, 0x01, 0xac, 0xda, 0x01, 0xcb, 0x8d, 0x5d, 0xc8, 0x5f, 0x5c, 0x5c, 0xbd, 0x71, 0xbf, 0x08,
	0xd6, 0x05, 0xf5, 0xd4, 0x89, 0x3d, 0x6d, 0xc6, 0x61, 0xa2, 0x63, 0x09, 0xe4, 0xf0, 0x58, 0x26,
	0x24, 0xa3, 0x90, 0xe8, 0xcb, 0xdd, 0x49, 0x51, 0x91, 0xe9, 0x2b, 0xd9, 0x7b, 0x5f, 0xad, 0xde,
	0xb8, 0x8f, 0xfe, 0xc7, 0x66, 0xc5, 0xc1, 0x10, 0x6e, 0x35, 0xcf, 0xb9, 0xad, 0x5d, 0x1a, 0xa7,
	0xc5, 0x28, 0xb8, 0xed, 0x87, 0x86, 0x1e, 0xd3, 0xa4, 0xc6, 0x7d, 0xc4, 0x3e, 0xa2, 0xd8, 0x89,
	0xa4, 0x54, 0xfb, 0x9c, 0xd3, 0xea, 0xcf, 0x0b, 0xd9, 0xaf, 0xd9, 0xa4, 0x8d, 0x3f, 0x5a, 0xfb,
	0x78, 0x42, 0xcc, 0x8f, 0x3b, 0x29, 0xde, 0xdd, 0x3a, 0xa7, 0xbb, 0xa5, 0x59, 0xd1, 0xee, 0xf2,
	0x3a, 0x38, 0x37, 0xeb, 0x10, 0xb6, 0x13, 0xc9, 0xf7, 0x4d, 0x62, 0x0c, 0x4a, 0xf5, 0x85, 0x16,
	0x5f, 0xbd, 0x9c, 0xbb, 0x7c, 0x35, 0x77, 0xed, 0x51, 0xee, 0xe6, 0xe5, 0xb5, 0xc9, 0x2f, 0xf2,
	0x33, 0x33, 0xe8, 0x6d, 0x08, 0xb9, 0x70, 0x22, 0x8a, 0x61, 0x8b, 0x10, 0x52, 0x83, 0xc3, 0x92,
	0x36, 0xab, 0x14, 0xec, 0xe2, 0x22, 0x8f, 0x84, 0x0e, 0xb0, 0x01, 0x29, 0x7a, 0x47, 0xd9, 0xdd,
	0x29, 0x49, 0x1b, 0x39, 0x66, 0xe7, 0x66, 0xf3, 0xdf, 0xfc, 0xb8, 0x36, 0x39, 0x9a, 0xbd, 0x77,
	0x1d, 0x1d, 0x28, 0xa6, 0xd7, 0x73, 0x26, 0xad, 0x0d, 0x17, 0x9b, 0xdd, 0xe8, 0x34, 0x9b, 0x3b,
	0xae, 0x2c, 0xd2, 0x96, 0x17, 0x9b, 0xdd, 0xc5, 0x7a, 0xc0, 0x6e, 0xa1, 0x62, 0x49, 0x50, 0x61,
	0x40, 0xf8, 0xc0, 0x7f, 0x39, 0xc5, 0xdd, 0x44, 0x61, 0x78, 0xaf, 0x4b, 0xfe, 0xba, 0x49, 0x01,
	0x77, 0xfd, 0x0b, 0x0e, 0xb9, 0xe9, 0x3b, 0xf9, 0xef, 0xbf, 0x5d, 0x9b, 0x1c, 0x45, 0xff, 0x65,
	0xab, 0xe2, 0xe0, 0xb0, 0x1f, 0x37, 0x52, 0xd3, 0x8b, 0xbd, 0xd6, 0x3e, 0x7f, 0x98, 0xcd, 0x8c,
	0xa3, 0x37, 0xa0, 0xc9, 0xf1, 0x12, 0x4b, 0xcf, 0x3d, 0x83, 0x2f, 0xf0, 0xcc, 0xce, 0xcd, 0x0a,
	0xcf, 0x37, 0xf9, 0xf0, 0x97, 0x78, 0x0a, 0xaa, 0xcd, 0x2f, 0x76, 0xe5, 0x54, 0x0f, 0xf6, 0x3d,
	0xfb, 0x3d, 0x5c, 0x76, 0x7b, 0x29, 0xec, 0x79, 0xb2, 0x14, 0xf6, 0x3c, 0x5d, 0x0a, 0x7b, 0x7e,
	0x5b, 0x0a, 0x7b, 0xf2, 0x4b, 0xe1, 0xb2, 0x3f, 0x96, 0xc2, 0x9e, 0xab, 0xcb, 0xe1, 0xb2, 0x27,
	0xcb, 0x61, 0xcf, 0xd3, 0xe5, 0x70, 0xd9, 0xb3, 0xe5, 0x70, 0xd9, 0x07, 0x6d, 0x09, 0xa2, 0x19,
	0x7b, 0xe9, 0x7f, 0x6e, 0x6c, 0x76, 0xf2, 0x9f, 0xc0, 0x9d, 0xae, 0x7f, 0xe7, 0xa7, 0x7c, 0xec,
	0xb8, 0xff, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x90, 0xeb, 0x64, 0xb5, 0x0f, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_PlateUnlockRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_PlateUnlockResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RuneLevelUpRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RuneLevelUpResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RuneLevelUpUseDustRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RuneLevelUpUseDustResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RuneInlayRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RuneInlayResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RuneMoveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RuneMoveResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_SkillLevelUpRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_SkillLevelUpResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_SkillChooseRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_SkillChooseResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_GetsRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_GetsResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_ResetRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_ResetResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_InlayStoneRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_InlayStoneResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RemoveStoneRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RemoveStoneResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RemoveAllStoneRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_RemoveAllStoneResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_ComposeStoneRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_ComposeStoneResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_LockStoneRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_LockStoneResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_TalentPointChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_TalentSkillChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_PlateChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_CheatAddCommonRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_CheatAddCommonResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_CheatAddParticularRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent_CheatAddParticularResponse.Get().(proto.Message)
	})
}

var poolTalent = &sync.Pool{New: func() interface{} { return &Talent{} }}

func (m *Talent) ReleasePool() { m.Reset(); poolTalent.Put(m); m = nil }

var poolTalent_PlateUnlockRequest = &sync.Pool{New: func() interface{} { return &Talent_PlateUnlockRequest{} }}

func (m *Talent_PlateUnlockRequest) ReleasePool() {
	m.Reset()
	poolTalent_PlateUnlockRequest.Put(m)
	m = nil
}

var poolTalent_PlateUnlockResponse = &sync.Pool{New: func() interface{} { return &Talent_PlateUnlockResponse{} }}

func (m *Talent_PlateUnlockResponse) ReleasePool() {
	m.Reset()
	poolTalent_PlateUnlockResponse.Put(m)
	m = nil
}

var poolTalent_RuneLevelUpRequest = &sync.Pool{New: func() interface{} { return &Talent_RuneLevelUpRequest{} }}

func (m *Talent_RuneLevelUpRequest) ReleasePool() {
	m.Reset()
	poolTalent_RuneLevelUpRequest.Put(m)
	m = nil
}

var poolTalent_RuneLevelUpResponse = &sync.Pool{New: func() interface{} { return &Talent_RuneLevelUpResponse{} }}

func (m *Talent_RuneLevelUpResponse) ReleasePool() {
	m.Reset()
	poolTalent_RuneLevelUpResponse.Put(m)
	m = nil
}

var poolTalent_RuneLevelUpUseDustRequest = &sync.Pool{New: func() interface{} { return &Talent_RuneLevelUpUseDustRequest{} }}

func (m *Talent_RuneLevelUpUseDustRequest) ReleasePool() {
	m.Reset()
	poolTalent_RuneLevelUpUseDustRequest.Put(m)
	m = nil
}

var poolTalent_RuneLevelUpUseDustResponse = &sync.Pool{New: func() interface{} { return &Talent_RuneLevelUpUseDustResponse{} }}

func (m *Talent_RuneLevelUpUseDustResponse) ReleasePool() {
	m.Reset()
	poolTalent_RuneLevelUpUseDustResponse.Put(m)
	m = nil
}

var poolTalent_RuneInlayRequest = &sync.Pool{New: func() interface{} { return &Talent_RuneInlayRequest{} }}

func (m *Talent_RuneInlayRequest) ReleasePool() {
	m.Reset()
	poolTalent_RuneInlayRequest.Put(m)
	m = nil
}

var poolTalent_RuneInlayResponse = &sync.Pool{New: func() interface{} { return &Talent_RuneInlayResponse{} }}

func (m *Talent_RuneInlayResponse) ReleasePool() {
	m.Reset()
	poolTalent_RuneInlayResponse.Put(m)
	m = nil
}

var poolTalent_RuneMoveRequest = &sync.Pool{New: func() interface{} { return &Talent_RuneMoveRequest{} }}

func (m *Talent_RuneMoveRequest) ReleasePool() { m.Reset(); poolTalent_RuneMoveRequest.Put(m); m = nil }

var poolTalent_RuneMoveResponse = &sync.Pool{New: func() interface{} { return &Talent_RuneMoveResponse{} }}

func (m *Talent_RuneMoveResponse) ReleasePool() {
	m.Reset()
	poolTalent_RuneMoveResponse.Put(m)
	m = nil
}

var poolTalent_SkillLevelUpRequest = &sync.Pool{New: func() interface{} { return &Talent_SkillLevelUpRequest{} }}

func (m *Talent_SkillLevelUpRequest) ReleasePool() {
	m.Reset()
	poolTalent_SkillLevelUpRequest.Put(m)
	m = nil
}

var poolTalent_SkillLevelUpResponse = &sync.Pool{New: func() interface{} { return &Talent_SkillLevelUpResponse{} }}

func (m *Talent_SkillLevelUpResponse) ReleasePool() {
	m.Reset()
	poolTalent_SkillLevelUpResponse.Put(m)
	m = nil
}

var poolTalent_SkillChooseRequest = &sync.Pool{New: func() interface{} { return &Talent_SkillChooseRequest{} }}

func (m *Talent_SkillChooseRequest) ReleasePool() {
	m.Reset()
	poolTalent_SkillChooseRequest.Put(m)
	m = nil
}

var poolTalent_SkillChooseResponse = &sync.Pool{New: func() interface{} { return &Talent_SkillChooseResponse{} }}

func (m *Talent_SkillChooseResponse) ReleasePool() {
	m.Reset()
	poolTalent_SkillChooseResponse.Put(m)
	m = nil
}

var poolTalent_GetsRequest = &sync.Pool{New: func() interface{} { return &Talent_GetsRequest{} }}

func (m *Talent_GetsRequest) ReleasePool() { m.Reset(); poolTalent_GetsRequest.Put(m); m = nil }

var poolTalent_GetsResponse = &sync.Pool{New: func() interface{} { return &Talent_GetsResponse{} }}

func (m *Talent_GetsResponse) ReleasePool() { m.Reset(); poolTalent_GetsResponse.Put(m); m = nil }

var poolTalent_ResetRequest = &sync.Pool{New: func() interface{} { return &Talent_ResetRequest{} }}

func (m *Talent_ResetRequest) ReleasePool() { m.Reset(); poolTalent_ResetRequest.Put(m); m = nil }

var poolTalent_ResetResponse = &sync.Pool{New: func() interface{} { return &Talent_ResetResponse{} }}

func (m *Talent_ResetResponse) ReleasePool() { m.Reset(); poolTalent_ResetResponse.Put(m); m = nil }

var poolTalent_InlayStoneRequest = &sync.Pool{New: func() interface{} { return &Talent_InlayStoneRequest{} }}

func (m *Talent_InlayStoneRequest) ReleasePool() {
	m.Reset()
	poolTalent_InlayStoneRequest.Put(m)
	m = nil
}

var poolTalent_InlayStoneResponse = &sync.Pool{New: func() interface{} { return &Talent_InlayStoneResponse{} }}

func (m *Talent_InlayStoneResponse) ReleasePool() {
	m.Reset()
	poolTalent_InlayStoneResponse.Put(m)
	m = nil
}

var poolTalent_RemoveStoneRequest = &sync.Pool{New: func() interface{} { return &Talent_RemoveStoneRequest{} }}

func (m *Talent_RemoveStoneRequest) ReleasePool() {
	m.Reset()
	poolTalent_RemoveStoneRequest.Put(m)
	m = nil
}

var poolTalent_RemoveStoneResponse = &sync.Pool{New: func() interface{} { return &Talent_RemoveStoneResponse{} }}

func (m *Talent_RemoveStoneResponse) ReleasePool() {
	m.Reset()
	poolTalent_RemoveStoneResponse.Put(m)
	m = nil
}

var poolTalent_RemoveAllStoneRequest = &sync.Pool{New: func() interface{} { return &Talent_RemoveAllStoneRequest{} }}

func (m *Talent_RemoveAllStoneRequest) ReleasePool() {
	m.Reset()
	poolTalent_RemoveAllStoneRequest.Put(m)
	m = nil
}

var poolTalent_RemoveAllStoneResponse = &sync.Pool{New: func() interface{} { return &Talent_RemoveAllStoneResponse{} }}

func (m *Talent_RemoveAllStoneResponse) ReleasePool() {
	m.Reset()
	poolTalent_RemoveAllStoneResponse.Put(m)
	m = nil
}

var poolTalent_ComposeStoneRequest = &sync.Pool{New: func() interface{} { return &Talent_ComposeStoneRequest{} }}

func (m *Talent_ComposeStoneRequest) ReleasePool() {
	m.Reset()
	poolTalent_ComposeStoneRequest.Put(m)
	m = nil
}

var poolTalent_ComposeStoneResponse = &sync.Pool{New: func() interface{} { return &Talent_ComposeStoneResponse{} }}

func (m *Talent_ComposeStoneResponse) ReleasePool() {
	m.Reset()
	poolTalent_ComposeStoneResponse.Put(m)
	m = nil
}

var poolTalent_LockStoneRequest = &sync.Pool{New: func() interface{} { return &Talent_LockStoneRequest{} }}

func (m *Talent_LockStoneRequest) ReleasePool() {
	m.Reset()
	poolTalent_LockStoneRequest.Put(m)
	m = nil
}

var poolTalent_LockStoneResponse = &sync.Pool{New: func() interface{} { return &Talent_LockStoneResponse{} }}

func (m *Talent_LockStoneResponse) ReleasePool() {
	m.Reset()
	poolTalent_LockStoneResponse.Put(m)
	m = nil
}

var poolTalent_TalentPointChangePush = &sync.Pool{New: func() interface{} { return &Talent_TalentPointChangePush{} }}

func (m *Talent_TalentPointChangePush) ReleasePool() {
	m.Reset()
	poolTalent_TalentPointChangePush.Put(m)
	m = nil
}

var poolTalent_TalentSkillChangePush = &sync.Pool{New: func() interface{} { return &Talent_TalentSkillChangePush{} }}

func (m *Talent_TalentSkillChangePush) ReleasePool() {
	m.Reset()
	poolTalent_TalentSkillChangePush.Put(m)
	m = nil
}

var poolTalent_PlateChangePush = &sync.Pool{New: func() interface{} { return &Talent_PlateChangePush{} }}

func (m *Talent_PlateChangePush) ReleasePool() { m.Reset(); poolTalent_PlateChangePush.Put(m); m = nil }

var poolTalent_CheatAddCommonRequest = &sync.Pool{New: func() interface{} { return &Talent_CheatAddCommonRequest{} }}

func (m *Talent_CheatAddCommonRequest) ReleasePool() {
	m.Reset()
	poolTalent_CheatAddCommonRequest.Put(m)
	m = nil
}

var poolTalent_CheatAddCommonResponse = &sync.Pool{New: func() interface{} { return &Talent_CheatAddCommonResponse{} }}

func (m *Talent_CheatAddCommonResponse) ReleasePool() {
	m.Reset()
	poolTalent_CheatAddCommonResponse.Put(m)
	m = nil
}

var poolTalent_CheatAddParticularRequest = &sync.Pool{New: func() interface{} { return &Talent_CheatAddParticularRequest{} }}

func (m *Talent_CheatAddParticularRequest) ReleasePool() {
	m.Reset()
	poolTalent_CheatAddParticularRequest.Put(m)
	m = nil
}

var poolTalent_CheatAddParticularResponse = &sync.Pool{New: func() interface{} { return &Talent_CheatAddParticularResponse{} }}

func (m *Talent_CheatAddParticularResponse) ReleasePool() {
	m.Reset()
	poolTalent_CheatAddParticularResponse.Put(m)
	m = nil
}
func (x TalentErrorCode) String() string {
	s, ok := TalentErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Talent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent)
	if !ok {
		that2, ok := that.(Talent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_PlateUnlockRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_PlateUnlockRequest)
	if !ok {
		that2, ok := that.(Talent_PlateUnlockRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.PlateIdx != that1.PlateIdx {
		return false
	}
	if this.Loc != that1.Loc {
		return false
	}
	return true
}
func (this *Talent_PlateUnlockResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_PlateUnlockResponse)
	if !ok {
		that2, ok := that.(Talent_PlateUnlockResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_RuneLevelUpRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RuneLevelUpRequest)
	if !ok {
		that2, ok := that.(Talent_RuneLevelUpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RuneId != that1.RuneId {
		return false
	}
	if len(this.UseRuneIds) != len(that1.UseRuneIds) {
		return false
	}
	for i := range this.UseRuneIds {
		if this.UseRuneIds[i] != that1.UseRuneIds[i] {
			return false
		}
	}
	return true
}
func (this *Talent_RuneLevelUpResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RuneLevelUpResponse)
	if !ok {
		that2, ok := that.(Talent_RuneLevelUpResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_RuneLevelUpUseDustRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RuneLevelUpUseDustRequest)
	if !ok {
		that2, ok := that.(Talent_RuneLevelUpUseDustRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RuneId != that1.RuneId {
		return false
	}
	if this.DustCnt != that1.DustCnt {
		return false
	}
	return true
}
func (this *Talent_RuneLevelUpUseDustResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RuneLevelUpUseDustResponse)
	if !ok {
		that2, ok := that.(Talent_RuneLevelUpUseDustResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_RuneInlayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RuneInlayRequest)
	if !ok {
		that2, ok := that.(Talent_RuneInlayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.PlateIdx != that1.PlateIdx {
		return false
	}
	if this.Loc != that1.Loc {
		return false
	}
	if this.RuneId != that1.RuneId {
		return false
	}
	if this.IsInlay != that1.IsInlay {
		return false
	}
	return true
}
func (this *Talent_RuneInlayResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RuneInlayResponse)
	if !ok {
		that2, ok := that.(Talent_RuneInlayResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_RuneMoveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RuneMoveRequest)
	if !ok {
		that2, ok := that.(Talent_RuneMoveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.PlateIdx != that1.PlateIdx {
		return false
	}
	if this.OldLoc != that1.OldLoc {
		return false
	}
	if this.NewLoc != that1.NewLoc {
		return false
	}
	if this.RuneId != that1.RuneId {
		return false
	}
	return true
}
func (this *Talent_RuneMoveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RuneMoveResponse)
	if !ok {
		that2, ok := that.(Talent_RuneMoveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_SkillLevelUpRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_SkillLevelUpRequest)
	if !ok {
		that2, ok := that.(Talent_SkillLevelUpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	return true
}
func (this *Talent_SkillLevelUpResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_SkillLevelUpResponse)
	if !ok {
		that2, ok := that.(Talent_SkillLevelUpResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if !this.Skill.Equal(that1.Skill) {
		return false
	}
	return true
}
func (this *Talent_SkillChooseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_SkillChooseRequest)
	if !ok {
		that2, ok := that.(Talent_SkillChooseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.Idx != that1.Idx {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	return true
}
func (this *Talent_SkillChooseResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_SkillChooseResponse)
	if !ok {
		that2, ok := that.(Talent_SkillChooseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Talent.Equal(that1.Talent) {
		return false
	}
	return true
}
func (this *Talent_GetsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_GetsRequest)
	if !ok {
		that2, ok := that.(Talent_GetsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_GetsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_GetsResponse)
	if !ok {
		that2, ok := that.(Talent_GetsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommonPoints != that1.CommonPoints {
		return false
	}
	if len(this.Talents) != len(that1.Talents) {
		return false
	}
	for i := range this.Talents {
		if !this.Talents[i].Equal(that1.Talents[i]) {
			return false
		}
	}
	if len(this.LockStoneIds) != len(that1.LockStoneIds) {
		return false
	}
	for i := range this.LockStoneIds {
		if this.LockStoneIds[i] != that1.LockStoneIds[i] {
			return false
		}
	}
	return true
}
func (this *Talent_ResetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_ResetRequest)
	if !ok {
		that2, ok := that.(Talent_ResetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.PlateIdx != that1.PlateIdx {
		return false
	}
	return true
}
func (this *Talent_ResetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_ResetResponse)
	if !ok {
		that2, ok := that.(Talent_ResetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_InlayStoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_InlayStoneRequest)
	if !ok {
		that2, ok := that.(Talent_InlayStoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.SkillStoneId != that1.SkillStoneId {
		return false
	}
	if this.HoleIdx != that1.HoleIdx {
		return false
	}
	return true
}
func (this *Talent_InlayStoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_InlayStoneResponse)
	if !ok {
		that2, ok := that.(Talent_InlayStoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if !this.Skill.Equal(that1.Skill) {
		return false
	}
	return true
}
func (this *Talent_RemoveStoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RemoveStoneRequest)
	if !ok {
		that2, ok := that.(Talent_RemoveStoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.HoleIdx != that1.HoleIdx {
		return false
	}
	return true
}
func (this *Talent_RemoveStoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RemoveStoneResponse)
	if !ok {
		that2, ok := that.(Talent_RemoveStoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if !this.Skill.Equal(that1.Skill) {
		return false
	}
	return true
}
func (this *Talent_RemoveAllStoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RemoveAllStoneRequest)
	if !ok {
		that2, ok := that.(Talent_RemoveAllStoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	return true
}
func (this *Talent_RemoveAllStoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_RemoveAllStoneResponse)
	if !ok {
		that2, ok := that.(Talent_RemoveAllStoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if !this.Skill.Equal(that1.Skill) {
		return false
	}
	return true
}
func (this *Talent_ComposeStoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_ComposeStoneRequest)
	if !ok {
		that2, ok := that.(Talent_ComposeStoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MainId != that1.MainId {
		return false
	}
	if len(this.SacrificeIds) != len(that1.SacrificeIds) {
		return false
	}
	for i := range this.SacrificeIds {
		if this.SacrificeIds[i] != that1.SacrificeIds[i] {
			return false
		}
	}
	return true
}
func (this *Talent_ComposeStoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_ComposeStoneResponse)
	if !ok {
		that2, ok := that.(Talent_ComposeStoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_LockStoneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_LockStoneRequest)
	if !ok {
		that2, ok := that.(Talent_LockStoneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.IsLock != that1.IsLock {
		return false
	}
	return true
}
func (this *Talent_LockStoneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_LockStoneResponse)
	if !ok {
		that2, ok := that.(Talent_LockStoneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.IsLock != that1.IsLock {
		return false
	}
	return true
}
func (this *Talent_TalentPointChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_TalentPointChangePush)
	if !ok {
		that2, ok := that.(Talent_TalentPointChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.Points != that1.Points {
		return false
	}
	return true
}
func (this *Talent_TalentSkillChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_TalentSkillChangePush)
	if !ok {
		that2, ok := that.(Talent_TalentSkillChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *Talent_PlateChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_PlateChangePush)
	if !ok {
		that2, ok := that.(Talent_PlateChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.PlateIdx != that1.PlateIdx {
		return false
	}
	if !this.Plate.Equal(that1.Plate) {
		return false
	}
	return true
}
func (this *Talent_CheatAddCommonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_CheatAddCommonRequest)
	if !ok {
		that2, ok := that.(Talent_CheatAddCommonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *Talent_CheatAddCommonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_CheatAddCommonResponse)
	if !ok {
		that2, ok := that.(Talent_CheatAddCommonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Talent_CheatAddParticularRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_CheatAddParticularRequest)
	if !ok {
		that2, ok := that.(Talent_CheatAddParticularRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *Talent_CheatAddParticularResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent_CheatAddParticularResponse)
	if !ok {
		that2, ok := that.(Talent_CheatAddParticularResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Talent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_PlateUnlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_PlateUnlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_PlateUnlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Loc != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Loc))
		i--
		dAtA[i] = 0x18
	}
	if m.PlateIdx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.PlateIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_PlateUnlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_PlateUnlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_PlateUnlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_RuneLevelUpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RuneLevelUpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RuneLevelUpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UseRuneIds) > 0 {
		for iNdEx := len(m.UseRuneIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UseRuneIds[iNdEx])
			copy(dAtA[i:], m.UseRuneIds[iNdEx])
			i = encodeVarintTalent(dAtA, i, uint64(len(m.UseRuneIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RuneId) > 0 {
		i -= len(m.RuneId)
		copy(dAtA[i:], m.RuneId)
		i = encodeVarintTalent(dAtA, i, uint64(len(m.RuneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Talent_RuneLevelUpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RuneLevelUpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RuneLevelUpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_RuneLevelUpUseDustRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RuneLevelUpUseDustRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RuneLevelUpUseDustRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DustCnt != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.DustCnt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RuneId) > 0 {
		i -= len(m.RuneId)
		copy(dAtA[i:], m.RuneId)
		i = encodeVarintTalent(dAtA, i, uint64(len(m.RuneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Talent_RuneLevelUpUseDustResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RuneLevelUpUseDustResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RuneLevelUpUseDustResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_RuneInlayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RuneInlayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RuneInlayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsInlay {
		i--
		if m.IsInlay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RuneId) > 0 {
		i -= len(m.RuneId)
		copy(dAtA[i:], m.RuneId)
		i = encodeVarintTalent(dAtA, i, uint64(len(m.RuneId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Loc != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Loc))
		i--
		dAtA[i] = 0x18
	}
	if m.PlateIdx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.PlateIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_RuneInlayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RuneInlayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RuneInlayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_RuneMoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RuneMoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RuneMoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RuneId) > 0 {
		i -= len(m.RuneId)
		copy(dAtA[i:], m.RuneId)
		i = encodeVarintTalent(dAtA, i, uint64(len(m.RuneId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NewLoc != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.NewLoc))
		i--
		dAtA[i] = 0x20
	}
	if m.OldLoc != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.OldLoc))
		i--
		dAtA[i] = 0x18
	}
	if m.PlateIdx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.PlateIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_RuneMoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RuneMoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RuneMoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_SkillLevelUpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_SkillLevelUpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_SkillLevelUpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkillId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_SkillLevelUpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_SkillLevelUpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_SkillLevelUpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Skill != nil {
		{
			size, err := m.Skill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTalent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_SkillChooseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_SkillChooseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_SkillChooseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkillId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if m.Idx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_SkillChooseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_SkillChooseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_SkillChooseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Talent != nil {
		{
			size, err := m.Talent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTalent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Talent_GetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_GetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_GetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_GetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_GetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_GetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockStoneIds) > 0 {
		dAtA4 := make([]byte, len(m.LockStoneIds)*10)
		var j3 int
		for _, num1 := range m.LockStoneIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTalent(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Talents) > 0 {
		for iNdEx := len(m.Talents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Talents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTalent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CommonPoints != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.CommonPoints))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_ResetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_ResetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_ResetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlateIdx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.PlateIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_ResetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_ResetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_ResetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_InlayStoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_InlayStoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_InlayStoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HoleIdx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.HoleIdx))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillStoneId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.SkillStoneId))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_InlayStoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_InlayStoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_InlayStoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Skill != nil {
		{
			size, err := m.Skill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTalent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_RemoveStoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RemoveStoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RemoveStoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HoleIdx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.HoleIdx))
		i--
		dAtA[i] = 0x18
	}
	if m.SkillId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_RemoveStoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RemoveStoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RemoveStoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Skill != nil {
		{
			size, err := m.Skill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTalent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_RemoveAllStoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RemoveAllStoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RemoveAllStoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkillId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_RemoveAllStoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_RemoveAllStoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_RemoveAllStoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Skill != nil {
		{
			size, err := m.Skill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTalent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_ComposeStoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_ComposeStoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_ComposeStoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SacrificeIds) > 0 {
		dAtA9 := make([]byte, len(m.SacrificeIds)*10)
		var j8 int
		for _, num1 := range m.SacrificeIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTalent(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x12
	}
	if m.MainId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.MainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_ComposeStoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_ComposeStoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_ComposeStoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_LockStoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_LockStoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_LockStoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLock {
		i--
		if m.IsLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_LockStoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_LockStoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_LockStoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLock {
		i--
		if m.IsLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_TalentPointChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_TalentPointChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_TalentPointChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Points != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_TalentSkillChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_TalentSkillChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_TalentSkillChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTalent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_PlateChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_PlateChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_PlateChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Plate != nil {
		{
			size, err := m.Plate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTalent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PlateIdx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.PlateIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_CheatAddCommonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_CheatAddCommonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_CheatAddCommonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_CheatAddCommonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_CheatAddCommonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_CheatAddCommonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Talent_CheatAddParticularRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_CheatAddParticularRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_CheatAddParticularRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_CheatAddParticularResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_CheatAddParticularResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_CheatAddParticularResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTalent(dAtA []byte, offset int, v uint64) int {
	offset -= sovTalent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Talent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_PlateUnlockRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.PlateIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("plate_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PlateIdx))
		needWriteComma = true
	}
	if m.Loc != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("loc")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Loc))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_PlateUnlockResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_RuneLevelUpRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RuneId != "" {
		w.RawByte('"')
		w.RawString("rune_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RuneId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("use_rune_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.UseRuneIds == nil {
		w.RawString("null")
	} else if len(m.UseRuneIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.UseRuneIds {
			w.String(v)
			if i != len(m.UseRuneIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_RuneLevelUpResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_RuneLevelUpUseDustRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RuneId != "" {
		w.RawByte('"')
		w.RawString("rune_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RuneId)
		needWriteComma = true
	}
	if m.DustCnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dust_cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DustCnt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_RuneLevelUpUseDustResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_RuneInlayRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.PlateIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("plate_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PlateIdx))
		needWriteComma = true
	}
	if m.Loc != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("loc")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Loc))
		needWriteComma = true
	}
	if m.RuneId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rune_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RuneId)
		needWriteComma = true
	}
	if m.IsInlay {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_inlay")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsInlay)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_RuneInlayResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_RuneMoveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.PlateIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("plate_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PlateIdx))
		needWriteComma = true
	}
	if m.OldLoc != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("old_loc")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OldLoc))
		needWriteComma = true
	}
	if m.NewLoc != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("new_loc")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NewLoc))
		needWriteComma = true
	}
	if m.RuneId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rune_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RuneId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_RuneMoveResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_SkillLevelUpRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_SkillLevelUpResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill")
	w.RawByte('"')
	w.RawByte(':')
	m.Skill.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_SkillChooseRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.Idx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Idx))
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_SkillChooseResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("talent")
	w.RawByte('"')
	w.RawByte(':')
	m.Talent.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_GetsRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_GetsResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CommonPoints != 0 {
		w.RawByte('"')
		w.RawString("common_points")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CommonPoints))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("talents")
	w.RawByte('"')
	w.RawByte(':')
	if m.Talents == nil {
		w.RawString("null")
	} else if len(m.Talents) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Talents {
			v.JsonBytes(w)
			if i != len(m.Talents)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("lock_stone_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.LockStoneIds == nil {
		w.RawString("null")
	} else if len(m.LockStoneIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.LockStoneIds {
			w.Int64(int64(v))
			if i != len(m.LockStoneIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_ResetRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.PlateIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("plate_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PlateIdx))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_ResetResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_InlayStoneRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.SkillStoneId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_stone_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillStoneId))
		needWriteComma = true
	}
	if m.HoleIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hole_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HoleIdx))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_InlayStoneResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill")
	w.RawByte('"')
	w.RawByte(':')
	m.Skill.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_RemoveStoneRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.HoleIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hole_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HoleIdx))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_RemoveStoneResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill")
	w.RawByte('"')
	w.RawByte(':')
	m.Skill.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_RemoveAllStoneRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_RemoveAllStoneResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill")
	w.RawByte('"')
	w.RawByte(':')
	m.Skill.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_ComposeStoneRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MainId != 0 {
		w.RawByte('"')
		w.RawString("main_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MainId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("sacrifice_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.SacrificeIds == nil {
		w.RawString("null")
	} else if len(m.SacrificeIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.SacrificeIds {
			w.Int64(int64(v))
			if i != len(m.SacrificeIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_ComposeStoneResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_LockStoneRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.IsLock {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_lock")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsLock)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_LockStoneResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.IsLock {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_lock")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsLock)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_TalentPointChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.Points != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("points")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Points))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_TalentSkillChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	m.Data.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_PlateChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.PlateIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("plate_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PlateIdx))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("plate")
	w.RawByte('"')
	w.RawByte(':')
	m.Plate.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_CheatAddCommonRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Num != 0 {
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_CheatAddCommonResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent_CheatAddParticularRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.Num != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent_CheatAddParticularResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Talent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent) GoString() string {
	return m.String()
}

func (m *Talent_PlateUnlockRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_PlateUnlockRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_PlateUnlockRequest) GoString() string {
	return m.String()
}

func (m *Talent_PlateUnlockResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_PlateUnlockResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_PlateUnlockResponse) GoString() string {
	return m.String()
}

func (m *Talent_RuneLevelUpRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RuneLevelUpRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RuneLevelUpRequest) GoString() string {
	return m.String()
}

func (m *Talent_RuneLevelUpResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RuneLevelUpResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RuneLevelUpResponse) GoString() string {
	return m.String()
}

func (m *Talent_RuneLevelUpUseDustRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RuneLevelUpUseDustRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RuneLevelUpUseDustRequest) GoString() string {
	return m.String()
}

func (m *Talent_RuneLevelUpUseDustResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RuneLevelUpUseDustResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RuneLevelUpUseDustResponse) GoString() string {
	return m.String()
}

func (m *Talent_RuneInlayRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RuneInlayRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RuneInlayRequest) GoString() string {
	return m.String()
}

func (m *Talent_RuneInlayResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RuneInlayResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RuneInlayResponse) GoString() string {
	return m.String()
}

func (m *Talent_RuneMoveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RuneMoveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RuneMoveRequest) GoString() string {
	return m.String()
}

func (m *Talent_RuneMoveResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RuneMoveResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RuneMoveResponse) GoString() string {
	return m.String()
}

func (m *Talent_SkillLevelUpRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_SkillLevelUpRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_SkillLevelUpRequest) GoString() string {
	return m.String()
}

func (m *Talent_SkillLevelUpResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_SkillLevelUpResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_SkillLevelUpResponse) GoString() string {
	return m.String()
}

func (m *Talent_SkillChooseRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_SkillChooseRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_SkillChooseRequest) GoString() string {
	return m.String()
}

func (m *Talent_SkillChooseResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_SkillChooseResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_SkillChooseResponse) GoString() string {
	return m.String()
}

func (m *Talent_GetsRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_GetsRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_GetsRequest) GoString() string {
	return m.String()
}

func (m *Talent_GetsResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_GetsResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_GetsResponse) GoString() string {
	return m.String()
}

func (m *Talent_ResetRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_ResetRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_ResetRequest) GoString() string {
	return m.String()
}

func (m *Talent_ResetResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_ResetResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_ResetResponse) GoString() string {
	return m.String()
}

func (m *Talent_InlayStoneRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_InlayStoneRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_InlayStoneRequest) GoString() string {
	return m.String()
}

func (m *Talent_InlayStoneResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_InlayStoneResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_InlayStoneResponse) GoString() string {
	return m.String()
}

func (m *Talent_RemoveStoneRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RemoveStoneRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RemoveStoneRequest) GoString() string {
	return m.String()
}

func (m *Talent_RemoveStoneResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RemoveStoneResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RemoveStoneResponse) GoString() string {
	return m.String()
}

func (m *Talent_RemoveAllStoneRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RemoveAllStoneRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RemoveAllStoneRequest) GoString() string {
	return m.String()
}

func (m *Talent_RemoveAllStoneResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_RemoveAllStoneResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_RemoveAllStoneResponse) GoString() string {
	return m.String()
}

func (m *Talent_ComposeStoneRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_ComposeStoneRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_ComposeStoneRequest) GoString() string {
	return m.String()
}

func (m *Talent_ComposeStoneResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_ComposeStoneResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_ComposeStoneResponse) GoString() string {
	return m.String()
}

func (m *Talent_LockStoneRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_LockStoneRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_LockStoneRequest) GoString() string {
	return m.String()
}

func (m *Talent_LockStoneResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_LockStoneResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_LockStoneResponse) GoString() string {
	return m.String()
}

func (m *Talent_TalentPointChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_TalentPointChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_TalentPointChangePush) GoString() string {
	return m.String()
}

func (m *Talent_TalentSkillChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_TalentSkillChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_TalentSkillChangePush) GoString() string {
	return m.String()
}

func (m *Talent_PlateChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_PlateChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_PlateChangePush) GoString() string {
	return m.String()
}

func (m *Talent_CheatAddCommonRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_CheatAddCommonRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_CheatAddCommonRequest) GoString() string {
	return m.String()
}

func (m *Talent_CheatAddCommonResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_CheatAddCommonResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_CheatAddCommonResponse) GoString() string {
	return m.String()
}

func (m *Talent_CheatAddParticularRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_CheatAddParticularRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_CheatAddParticularRequest) GoString() string {
	return m.String()
}

func (m *Talent_CheatAddParticularResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent_CheatAddParticularResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent_CheatAddParticularResponse) GoString() string {
	return m.String()
}

func (m *Talent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_PlateUnlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.PlateIdx != 0 {
		n += 1 + sovTalent(uint64(m.PlateIdx))
	}
	if m.Loc != 0 {
		n += 1 + sovTalent(uint64(m.Loc))
	}
	return n
}

func (m *Talent_PlateUnlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_RuneLevelUpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuneId)
	if l > 0 {
		n += 1 + l + sovTalent(uint64(l))
	}
	if len(m.UseRuneIds) > 0 {
		for _, s := range m.UseRuneIds {
			l = len(s)
			n += 1 + l + sovTalent(uint64(l))
		}
	}
	return n
}

func (m *Talent_RuneLevelUpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_RuneLevelUpUseDustRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuneId)
	if l > 0 {
		n += 1 + l + sovTalent(uint64(l))
	}
	if m.DustCnt != 0 {
		n += 1 + sovTalent(uint64(m.DustCnt))
	}
	return n
}

func (m *Talent_RuneLevelUpUseDustResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_RuneInlayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.PlateIdx != 0 {
		n += 1 + sovTalent(uint64(m.PlateIdx))
	}
	if m.Loc != 0 {
		n += 1 + sovTalent(uint64(m.Loc))
	}
	l = len(m.RuneId)
	if l > 0 {
		n += 1 + l + sovTalent(uint64(l))
	}
	if m.IsInlay {
		n += 2
	}
	return n
}

func (m *Talent_RuneInlayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_RuneMoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.PlateIdx != 0 {
		n += 1 + sovTalent(uint64(m.PlateIdx))
	}
	if m.OldLoc != 0 {
		n += 1 + sovTalent(uint64(m.OldLoc))
	}
	if m.NewLoc != 0 {
		n += 1 + sovTalent(uint64(m.NewLoc))
	}
	l = len(m.RuneId)
	if l > 0 {
		n += 1 + l + sovTalent(uint64(l))
	}
	return n
}

func (m *Talent_RuneMoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_SkillLevelUpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.SkillId != 0 {
		n += 1 + sovTalent(uint64(m.SkillId))
	}
	return n
}

func (m *Talent_SkillLevelUpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.Skill != nil {
		l = m.Skill.Size()
		n += 1 + l + sovTalent(uint64(l))
	}
	return n
}

func (m *Talent_SkillChooseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.Idx != 0 {
		n += 1 + sovTalent(uint64(m.Idx))
	}
	if m.SkillId != 0 {
		n += 1 + sovTalent(uint64(m.SkillId))
	}
	return n
}

func (m *Talent_SkillChooseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Talent != nil {
		l = m.Talent.Size()
		n += 1 + l + sovTalent(uint64(l))
	}
	return n
}

func (m *Talent_GetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_GetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonPoints != 0 {
		n += 1 + sovTalent(uint64(m.CommonPoints))
	}
	if len(m.Talents) > 0 {
		for _, e := range m.Talents {
			l = e.Size()
			n += 1 + l + sovTalent(uint64(l))
		}
	}
	if len(m.LockStoneIds) > 0 {
		l = 0
		for _, e := range m.LockStoneIds {
			l += sovTalent(uint64(e))
		}
		n += 1 + sovTalent(uint64(l)) + l
	}
	return n
}

func (m *Talent_ResetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.PlateIdx != 0 {
		n += 1 + sovTalent(uint64(m.PlateIdx))
	}
	return n
}

func (m *Talent_ResetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_InlayStoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.SkillId != 0 {
		n += 1 + sovTalent(uint64(m.SkillId))
	}
	if m.SkillStoneId != 0 {
		n += 1 + sovTalent(uint64(m.SkillStoneId))
	}
	if m.HoleIdx != 0 {
		n += 1 + sovTalent(uint64(m.HoleIdx))
	}
	return n
}

func (m *Talent_InlayStoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.Skill != nil {
		l = m.Skill.Size()
		n += 1 + l + sovTalent(uint64(l))
	}
	return n
}

func (m *Talent_RemoveStoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.SkillId != 0 {
		n += 1 + sovTalent(uint64(m.SkillId))
	}
	if m.HoleIdx != 0 {
		n += 1 + sovTalent(uint64(m.HoleIdx))
	}
	return n
}

func (m *Talent_RemoveStoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.Skill != nil {
		l = m.Skill.Size()
		n += 1 + l + sovTalent(uint64(l))
	}
	return n
}

func (m *Talent_RemoveAllStoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.SkillId != 0 {
		n += 1 + sovTalent(uint64(m.SkillId))
	}
	return n
}

func (m *Talent_RemoveAllStoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.Skill != nil {
		l = m.Skill.Size()
		n += 1 + l + sovTalent(uint64(l))
	}
	return n
}

func (m *Talent_ComposeStoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MainId != 0 {
		n += 1 + sovTalent(uint64(m.MainId))
	}
	if len(m.SacrificeIds) > 0 {
		l = 0
		for _, e := range m.SacrificeIds {
			l += sovTalent(uint64(e))
		}
		n += 1 + sovTalent(uint64(l)) + l
	}
	return n
}

func (m *Talent_ComposeStoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_LockStoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovTalent(uint64(m.ItemId))
	}
	if m.IsLock {
		n += 2
	}
	return n
}

func (m *Talent_LockStoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovTalent(uint64(m.ItemId))
	}
	if m.IsLock {
		n += 2
	}
	return n
}

func (m *Talent_TalentPointChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.Points != 0 {
		n += 1 + sovTalent(uint64(m.Points))
	}
	return n
}

func (m *Talent_TalentSkillChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTalent(uint64(l))
	}
	return n
}

func (m *Talent_PlateChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.PlateIdx != 0 {
		n += 1 + sovTalent(uint64(m.PlateIdx))
	}
	if m.Plate != nil {
		l = m.Plate.Size()
		n += 1 + l + sovTalent(uint64(l))
	}
	return n
}

func (m *Talent_CheatAddCommonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovTalent(uint64(m.Num))
	}
	return n
}

func (m *Talent_CheatAddCommonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Talent_CheatAddParticularRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.Num != 0 {
		n += 1 + sovTalent(uint64(m.Num))
	}
	return n
}

func (m *Talent_CheatAddParticularResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTalent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTalent(x uint64) (n int) {
	return sovTalent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Talent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Talent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Talent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_PlateUnlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlateUnlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlateUnlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlateIdx", wireType)
			}
			m.PlateIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlateIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			m.Loc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_PlateUnlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlateUnlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlateUnlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RuneLevelUpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneLevelUpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneLevelUpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseRuneIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UseRuneIds = append(m.UseRuneIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RuneLevelUpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneLevelUpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneLevelUpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RuneLevelUpUseDustRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneLevelUpUseDustRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneLevelUpUseDustRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustCnt", wireType)
			}
			m.DustCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DustCnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RuneLevelUpUseDustResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneLevelUpUseDustResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneLevelUpUseDustResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RuneInlayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneInlayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneInlayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlateIdx", wireType)
			}
			m.PlateIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlateIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			m.Loc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInlay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInlay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RuneInlayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneInlayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneInlayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RuneMoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneMoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneMoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlateIdx", wireType)
			}
			m.PlateIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlateIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldLoc", wireType)
			}
			m.OldLoc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldLoc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLoc", wireType)
			}
			m.NewLoc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewLoc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RuneMoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneMoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneMoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_SkillLevelUpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillLevelUpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillLevelUpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_SkillLevelUpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillLevelUpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillLevelUpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skill == nil {
				m.Skill = &models.SkillDetail{}
			}
			if err := m.Skill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_SkillChooseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillChooseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillChooseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_SkillChooseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillChooseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillChooseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Talent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Talent == nil {
				m.Talent = &models.HeroTalent{}
			}
			if err := m.Talent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_GetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_GetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonPoints", wireType)
			}
			m.CommonPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonPoints |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Talents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Talents = append(m.Talents, &models.HeroTalent{})
			if err := m.Talents[len(m.Talents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LockStoneIds = append(m.LockStoneIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTalent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTalent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LockStoneIds) == 0 {
					m.LockStoneIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LockStoneIds = append(m.LockStoneIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LockStoneIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_ResetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlateIdx", wireType)
			}
			m.PlateIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlateIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_ResetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_InlayStoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlayStoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlayStoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillStoneId", wireType)
			}
			m.SkillStoneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillStoneId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoleIdx", wireType)
			}
			m.HoleIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoleIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_InlayStoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlayStoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlayStoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skill == nil {
				m.Skill = &models.SkillDetail{}
			}
			if err := m.Skill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RemoveStoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveStoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveStoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoleIdx", wireType)
			}
			m.HoleIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoleIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RemoveStoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveStoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveStoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skill == nil {
				m.Skill = &models.SkillDetail{}
			}
			if err := m.Skill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RemoveAllStoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAllStoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAllStoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_RemoveAllStoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAllStoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAllStoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skill == nil {
				m.Skill = &models.SkillDetail{}
			}
			if err := m.Skill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_ComposeStoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComposeStoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComposeStoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainId", wireType)
			}
			m.MainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SacrificeIds = append(m.SacrificeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTalent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTalent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SacrificeIds) == 0 {
					m.SacrificeIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SacrificeIds = append(m.SacrificeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SacrificeIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_ComposeStoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComposeStoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComposeStoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_LockStoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockStoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockStoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_LockStoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockStoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockStoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_TalentPointChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalentPointChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalentPointChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_TalentSkillChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalentSkillChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalentSkillChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &models.HeroTalent{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_PlateChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlateChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlateChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlateIdx", wireType)
			}
			m.PlateIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlateIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plate == nil {
				m.Plate = &models.TalentPlate{}
			}
			if err := m.Plate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_CheatAddCommonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddCommonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddCommonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_CheatAddCommonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddCommonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddCommonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_CheatAddParticularRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddParticularRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddParticularRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_CheatAddParticularResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddParticularResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddParticularResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTalent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTalent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTalent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTalent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTalent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTalent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTalent = fmt.Errorf("proto: unexpected end of group")
)
