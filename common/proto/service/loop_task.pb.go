// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/loop_task.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoopTaskErrorCode int32

const (
	LoopTaskErrorCode_ErrLoopTaskNotFinish     LoopTaskErrorCode = 0
	LoopTaskErrorCode_ErrLoopTaskLock          LoopTaskErrorCode = 1
	LoopTaskErrorCode_ErrLoopTaskAlreadyGet    LoopTaskErrorCode = 2
	LoopTaskErrorCode_ErrLoopTaskInvalidType   LoopTaskErrorCode = 3
	LoopTaskErrorCode_ErrLoopTaskNotExist      LoopTaskErrorCode = 4
	LoopTaskErrorCode_ErrLoopTaskAlreadyFinish LoopTaskErrorCode = 5
)

var LoopTaskErrorCode_name = map[int32]string{
	0: "ErrLoopTaskNotFinish",
	1: "ErrLoopTaskLock",
	2: "ErrLoopTaskAlreadyGet",
	3: "ErrLoopTaskInvalidType",
	4: "ErrLoopTaskNotExist",
	5: "ErrLoopTaskAlreadyFinish",
}

var LoopTaskErrorCode_value = map[string]int32{
	"ErrLoopTaskNotFinish":     0,
	"ErrLoopTaskLock":          1,
	"ErrLoopTaskAlreadyGet":    2,
	"ErrLoopTaskInvalidType":   3,
	"ErrLoopTaskNotExist":      4,
	"ErrLoopTaskAlreadyFinish": 5,
}

func (LoopTaskErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0}
}

//-----------------------------------------------------可重复完成的任务--------------------------------------------------//
type LoopTask struct {
}

func (m *LoopTask) Reset()      { *m = LoopTask{} }
func (*LoopTask) ProtoMessage() {}
func (*LoopTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0}
}
func (m *LoopTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask.Merge(m, src)
}
func (m *LoopTask) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask proto.InternalMessageInfo

func (*LoopTask) XXX_MessageName() string {
	return "service.LoopTask"
}

type LoopTask_GetTaskRequest struct {
}

func (m *LoopTask_GetTaskRequest) Reset()      { *m = LoopTask_GetTaskRequest{} }
func (*LoopTask_GetTaskRequest) ProtoMessage() {}
func (*LoopTask_GetTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 0}
}
func (m *LoopTask_GetTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_GetTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_GetTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_GetTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_GetTaskRequest.Merge(m, src)
}
func (m *LoopTask_GetTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_GetTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_GetTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_GetTaskRequest proto.InternalMessageInfo

func (*LoopTask_GetTaskRequest) XXX_MessageName() string {
	return "service.LoopTask.GetTaskRequest"
}

type LoopTask_GetTaskResponse struct {
	Tasks  []*models.LoopTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Daily  map[int64]bool     `protobuf:"bytes,2,rep,name=daily,proto3" json:"daily,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Weekly map[int64]bool     `protobuf:"bytes,3,rep,name=weekly,proto3" json:"weekly,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *LoopTask_GetTaskResponse) Reset()      { *m = LoopTask_GetTaskResponse{} }
func (*LoopTask_GetTaskResponse) ProtoMessage() {}
func (*LoopTask_GetTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 1}
}
func (m *LoopTask_GetTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_GetTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_GetTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_GetTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_GetTaskResponse.Merge(m, src)
}
func (m *LoopTask_GetTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_GetTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_GetTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_GetTaskResponse proto.InternalMessageInfo

func (m *LoopTask_GetTaskResponse) GetTasks() []*models.LoopTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *LoopTask_GetTaskResponse) GetDaily() map[int64]bool {
	if m != nil {
		return m.Daily
	}
	return nil
}

func (m *LoopTask_GetTaskResponse) GetWeekly() map[int64]bool {
	if m != nil {
		return m.Weekly
	}
	return nil
}

func (*LoopTask_GetTaskResponse) XXX_MessageName() string {
	return "service.LoopTask.GetTaskResponse"
}

type LoopTask_ClearLoopTaskRequest struct {
	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *LoopTask_ClearLoopTaskRequest) Reset()      { *m = LoopTask_ClearLoopTaskRequest{} }
func (*LoopTask_ClearLoopTaskRequest) ProtoMessage() {}
func (*LoopTask_ClearLoopTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 2}
}
func (m *LoopTask_ClearLoopTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_ClearLoopTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_ClearLoopTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_ClearLoopTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_ClearLoopTaskRequest.Merge(m, src)
}
func (m *LoopTask_ClearLoopTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_ClearLoopTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_ClearLoopTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_ClearLoopTaskRequest proto.InternalMessageInfo

func (m *LoopTask_ClearLoopTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (*LoopTask_ClearLoopTaskRequest) XXX_MessageName() string {
	return "service.LoopTask.ClearLoopTaskRequest"
}

type LoopTask_ClearLoopTaskResponse struct {
	Reward map[int64]int64 `protobuf:"bytes,1,rep,name=reward,proto3" json:"reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *LoopTask_ClearLoopTaskResponse) Reset()      { *m = LoopTask_ClearLoopTaskResponse{} }
func (*LoopTask_ClearLoopTaskResponse) ProtoMessage() {}
func (*LoopTask_ClearLoopTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 3}
}
func (m *LoopTask_ClearLoopTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_ClearLoopTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_ClearLoopTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_ClearLoopTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_ClearLoopTaskResponse.Merge(m, src)
}
func (m *LoopTask_ClearLoopTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_ClearLoopTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_ClearLoopTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_ClearLoopTaskResponse proto.InternalMessageInfo

func (m *LoopTask_ClearLoopTaskResponse) GetReward() map[int64]int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (*LoopTask_ClearLoopTaskResponse) XXX_MessageName() string {
	return "service.LoopTask.ClearLoopTaskResponse"
}

type LoopTask_DrawStageRewardRequest struct {
	StageId int64 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (m *LoopTask_DrawStageRewardRequest) Reset()      { *m = LoopTask_DrawStageRewardRequest{} }
func (*LoopTask_DrawStageRewardRequest) ProtoMessage() {}
func (*LoopTask_DrawStageRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 4}
}
func (m *LoopTask_DrawStageRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_DrawStageRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_DrawStageRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_DrawStageRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_DrawStageRewardRequest.Merge(m, src)
}
func (m *LoopTask_DrawStageRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_DrawStageRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_DrawStageRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_DrawStageRewardRequest proto.InternalMessageInfo

func (m *LoopTask_DrawStageRewardRequest) GetStageId() int64 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (*LoopTask_DrawStageRewardRequest) XXX_MessageName() string {
	return "service.LoopTask.DrawStageRewardRequest"
}

type LoopTask_DrawStageRewardResponse struct {
	Rewards map[int64]int64 `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *LoopTask_DrawStageRewardResponse) Reset()      { *m = LoopTask_DrawStageRewardResponse{} }
func (*LoopTask_DrawStageRewardResponse) ProtoMessage() {}
func (*LoopTask_DrawStageRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 5}
}
func (m *LoopTask_DrawStageRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_DrawStageRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_DrawStageRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_DrawStageRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_DrawStageRewardResponse.Merge(m, src)
}
func (m *LoopTask_DrawStageRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_DrawStageRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_DrawStageRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_DrawStageRewardResponse proto.InternalMessageInfo

func (m *LoopTask_DrawStageRewardResponse) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*LoopTask_DrawStageRewardResponse) XXX_MessageName() string {
	return "service.LoopTask.DrawStageRewardResponse"
}

//----------------------cheat----------------------//
type LoopTask_CheatFinishTaskRequest struct {
}

func (m *LoopTask_CheatFinishTaskRequest) Reset()      { *m = LoopTask_CheatFinishTaskRequest{} }
func (*LoopTask_CheatFinishTaskRequest) ProtoMessage() {}
func (*LoopTask_CheatFinishTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 6}
}
func (m *LoopTask_CheatFinishTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_CheatFinishTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_CheatFinishTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_CheatFinishTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_CheatFinishTaskRequest.Merge(m, src)
}
func (m *LoopTask_CheatFinishTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_CheatFinishTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_CheatFinishTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_CheatFinishTaskRequest proto.InternalMessageInfo

func (*LoopTask_CheatFinishTaskRequest) XXX_MessageName() string {
	return "service.LoopTask.CheatFinishTaskRequest"
}

type LoopTask_CheatFinishTaskResponse struct {
}

func (m *LoopTask_CheatFinishTaskResponse) Reset()      { *m = LoopTask_CheatFinishTaskResponse{} }
func (*LoopTask_CheatFinishTaskResponse) ProtoMessage() {}
func (*LoopTask_CheatFinishTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 7}
}
func (m *LoopTask_CheatFinishTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_CheatFinishTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_CheatFinishTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_CheatFinishTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_CheatFinishTaskResponse.Merge(m, src)
}
func (m *LoopTask_CheatFinishTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_CheatFinishTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_CheatFinishTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_CheatFinishTaskResponse proto.InternalMessageInfo

func (*LoopTask_CheatFinishTaskResponse) XXX_MessageName() string {
	return "service.LoopTask.CheatFinishTaskResponse"
}

type LoopTask_CheatResetLoopTaskRequest struct {
	Kind models.TaskKind `protobuf:"varint,1,opt,name=kind,proto3,enum=models.TaskKind" json:"kind,omitempty"`
}

func (m *LoopTask_CheatResetLoopTaskRequest) Reset()      { *m = LoopTask_CheatResetLoopTaskRequest{} }
func (*LoopTask_CheatResetLoopTaskRequest) ProtoMessage() {}
func (*LoopTask_CheatResetLoopTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 8}
}
func (m *LoopTask_CheatResetLoopTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_CheatResetLoopTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_CheatResetLoopTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_CheatResetLoopTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_CheatResetLoopTaskRequest.Merge(m, src)
}
func (m *LoopTask_CheatResetLoopTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_CheatResetLoopTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_CheatResetLoopTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_CheatResetLoopTaskRequest proto.InternalMessageInfo

func (m *LoopTask_CheatResetLoopTaskRequest) GetKind() models.TaskKind {
	if m != nil {
		return m.Kind
	}
	return models.TaskKind_Daily
}

func (*LoopTask_CheatResetLoopTaskRequest) XXX_MessageName() string {
	return "service.LoopTask.CheatResetLoopTaskRequest"
}

type LoopTask_CheatResetLoopTaskResponse struct {
}

func (m *LoopTask_CheatResetLoopTaskResponse) Reset()      { *m = LoopTask_CheatResetLoopTaskResponse{} }
func (*LoopTask_CheatResetLoopTaskResponse) ProtoMessage() {}
func (*LoopTask_CheatResetLoopTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 9}
}
func (m *LoopTask_CheatResetLoopTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_CheatResetLoopTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_CheatResetLoopTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_CheatResetLoopTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_CheatResetLoopTaskResponse.Merge(m, src)
}
func (m *LoopTask_CheatResetLoopTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_CheatResetLoopTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_CheatResetLoopTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_CheatResetLoopTaskResponse proto.InternalMessageInfo

func (*LoopTask_CheatResetLoopTaskResponse) XXX_MessageName() string {
	return "service.LoopTask.CheatResetLoopTaskResponse"
}

//----------------------push----------------------//
type LoopTask_TaskUpdatePush struct {
	TaskId   int64             `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NpcId    int64             `protobuf:"varint,2,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	Status   models.TaskStatus `protobuf:"varint,3,opt,name=status,proto3,enum=models.TaskStatus" json:"status,omitempty"`
	Progress int64             `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (m *LoopTask_TaskUpdatePush) Reset()      { *m = LoopTask_TaskUpdatePush{} }
func (*LoopTask_TaskUpdatePush) ProtoMessage() {}
func (*LoopTask_TaskUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_59f732dde0b691d9, []int{0, 10}
}
func (m *LoopTask_TaskUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask_TaskUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask_TaskUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask_TaskUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask_TaskUpdatePush.Merge(m, src)
}
func (m *LoopTask_TaskUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask_TaskUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask_TaskUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask_TaskUpdatePush proto.InternalMessageInfo

func (m *LoopTask_TaskUpdatePush) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *LoopTask_TaskUpdatePush) GetNpcId() int64 {
	if m != nil {
		return m.NpcId
	}
	return 0
}

func (m *LoopTask_TaskUpdatePush) GetStatus() models.TaskStatus {
	if m != nil {
		return m.Status
	}
	return models.TaskStatus_NotStarted
}

func (m *LoopTask_TaskUpdatePush) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (*LoopTask_TaskUpdatePush) XXX_MessageName() string {
	return "service.LoopTask.TaskUpdatePush"
}
func init() {
	proto.RegisterEnum("service.LoopTaskErrorCode", LoopTaskErrorCode_name, LoopTaskErrorCode_value)
	proto.RegisterType((*LoopTask)(nil), "service.LoopTask")
	proto.RegisterType((*LoopTask_GetTaskRequest)(nil), "service.LoopTask.GetTaskRequest")
	proto.RegisterType((*LoopTask_GetTaskResponse)(nil), "service.LoopTask.GetTaskResponse")
	proto.RegisterMapType((map[int64]bool)(nil), "service.LoopTask.GetTaskResponse.DailyEntry")
	proto.RegisterMapType((map[int64]bool)(nil), "service.LoopTask.GetTaskResponse.WeeklyEntry")
	proto.RegisterType((*LoopTask_ClearLoopTaskRequest)(nil), "service.LoopTask.ClearLoopTaskRequest")
	proto.RegisterType((*LoopTask_ClearLoopTaskResponse)(nil), "service.LoopTask.ClearLoopTaskResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.LoopTask.ClearLoopTaskResponse.RewardEntry")
	proto.RegisterType((*LoopTask_DrawStageRewardRequest)(nil), "service.LoopTask.DrawStageRewardRequest")
	proto.RegisterType((*LoopTask_DrawStageRewardResponse)(nil), "service.LoopTask.DrawStageRewardResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.LoopTask.DrawStageRewardResponse.RewardsEntry")
	proto.RegisterType((*LoopTask_CheatFinishTaskRequest)(nil), "service.LoopTask.CheatFinishTaskRequest")
	proto.RegisterType((*LoopTask_CheatFinishTaskResponse)(nil), "service.LoopTask.CheatFinishTaskResponse")
	proto.RegisterType((*LoopTask_CheatResetLoopTaskRequest)(nil), "service.LoopTask.CheatResetLoopTaskRequest")
	proto.RegisterType((*LoopTask_CheatResetLoopTaskResponse)(nil), "service.LoopTask.CheatResetLoopTaskResponse")
	proto.RegisterType((*LoopTask_TaskUpdatePush)(nil), "service.LoopTask.TaskUpdatePush")
}

func init() { proto.RegisterFile("proto/service/loop_task.proto", fileDescriptor_59f732dde0b691d9) }

var fileDescriptor_59f732dde0b691d9 = []byte{
	// 837 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdf, 0x8b, 0x13, 0x57,
	0x14, 0xce, 0x4d, 0x76, 0xb3, 0xe9, 0x51, 0xb2, 0xe3, 0xed, 0x26, 0x99, 0xbd, 0xb5, 0x43, 0x28,
	0xa5, 0x5d, 0xa4, 0x4e, 0x4a, 0x03, 0xad, 0xdd, 0x37, 0x5d, 0x53, 0x09, 0x8a, 0xc8, 0x68, 0x29,
	0xf4, 0x45, 0xc6, 0xcc, 0x65, 0x77, 0xc8, 0x64, 0xee, 0x38, 0x77, 0xb2, 0xdb, 0x3c, 0xb6, 0x94,
	0x22, 0x69, 0x4b, 0x7d, 0x28, 0xb6, 0x88, 0xf4, 0xf7, 0x0f, 0x29, 0x28, 0x28, 0x04, 0x5b, 0x96,
	0xbe, 0xfb, 0xe8, 0xa3, 0x8f, 0x6d, 0xe2, 0xc4, 0xfa, 0xd6, 0x3f, 0x41, 0x66, 0xee, 0x4d, 0x76,
	0xf2, 0x63, 0x11, 0xdf, 0xe6, 0x7c, 0xdf, 0x39, 0xdf, 0x3d, 0xe7, 0xbb, 0xf7, 0x30, 0xf0, 0xb2,
	0xe7, 0xb3, 0x80, 0x55, 0x38, 0xf5, 0xb7, 0xed, 0x06, 0xad, 0x38, 0x8c, 0x79, 0x17, 0x03, 0x93,
	0x37, 0xf5, 0x18, 0xc7, 0x4b, 0x92, 0x20, 0x87, 0x45, 0x5e, 0x8b, 0x59, 0xd4, 0xe1, 0xd3, 0x69,
	0xa4, 0x34, 0xc1, 0x5e, 0x32, 0x39, 0x95, 0x44, 0x71, 0x8a, 0xd8, 0x94, 0xb8, 0x3a, 0x81, 0x53,
	0xb7, 0xdd, 0xe2, 0x82, 0x79, 0xe5, 0xe7, 0x17, 0x20, 0x77, 0x86, 0x31, 0xef, 0x82, 0xc9, 0x9b,
	0x44, 0x81, 0xfc, 0x29, 0x1a, 0x44, 0x9f, 0x06, 0xbd, 0xdc, 0xa6, 0x3c, 0x20, 0x7f, 0xa5, 0x61,
	0x79, 0x0c, 0x71, 0x8f, 0xb9, 0x9c, 0xe2, 0xd7, 0x60, 0x31, 0xea, 0x85, 0xab, 0xa8, 0x9c, 0x59,
	0x3b, 0xf0, 0x96, 0xa2, 0x0b, 0x59, 0x7d, 0x24, 0x63, 0x08, 0x1a, 0x9f, 0x80, 0x45, 0xcb, 0xb4,
	0x9d, 0x8e, 0x9a, 0x8e, 0xf3, 0xde, 0xd0, 0xe5, 0x70, 0xe3, 0x44, 0x7d, 0x4a, 0x59, 0x3f, 0x19,
	0xa5, 0xd7, 0xdc, 0xc0, 0xef, 0x18, 0xa2, 0x14, 0xd7, 0x20, 0xbb, 0x43, 0x69, 0xd3, 0xe9, 0xa8,
	0x99, 0x58, 0xe4, 0xe8, 0xb3, 0x45, 0x3e, 0x88, 0xf3, 0x85, 0x8a, 0x2c, 0x26, 0xc7, 0x00, 0xf6,
	0xb4, 0xb1, 0x02, 0x99, 0x26, 0xed, 0xa8, 0xa8, 0x8c, 0xd6, 0x32, 0x46, 0xf4, 0x89, 0x57, 0x60,
	0x71, 0xdb, 0x74, 0xda, 0x54, 0x4d, 0x97, 0xd1, 0x5a, 0xce, 0x10, 0xc1, 0x7a, 0xfa, 0x18, 0x22,
	0xef, 0xc2, 0x81, 0x84, 0xe0, 0x73, 0x95, 0xfe, 0x86, 0x60, 0x65, 0xc3, 0xa1, 0xa6, 0x3f, 0x36,
	0x46, 0x98, 0x8a, 0x4b, 0xb0, 0x14, 0x39, 0x74, 0xd1, 0xb6, 0xa4, 0x50, 0x36, 0x0a, 0xeb, 0xd6,
	0x7a, 0xfb, 0x93, 0x9e, 0x7a, 0x19, 0x16, 0xa2, 0x08, 0x17, 0x6b, 0xfe, 0xb8, 0xb0, 0xee, 0x6e,
	0x9b, 0x8e, 0x6d, 0x5d, 0xe8, 0x78, 0x14, 0xbf, 0x98, 0xc0, 0xcf, 0xb2, 0xa0, 0xf6, 0x91, 0xcd,
	0x03, 0xbc, 0x9c, 0x00, 0xcf, 0xb0, 0x46, 0x13, 0x17, 0x12, 0xc0, 0x71, 0xc7, 0xa7, 0xa6, 0xd5,
	0x39, 0x45, 0x03, 0xbc, 0x32, 0x59, 0xfc, 0x9e, 0xed, 0xda, 0x7c, 0x8b, 0x7c, 0x8f, 0xa0, 0x30,
	0xd5, 0xa8, 0xbc, 0xea, 0xd3, 0x90, 0xf5, 0xe9, 0x8e, 0xe9, 0x5b, 0xf2, 0xae, 0xab, 0xb3, 0xf6,
	0xcf, 0x2d, 0xd4, 0x8d, 0xb8, 0x4a, 0x5e, 0x82, 0x90, 0x88, 0xac, 0x4c, 0xc0, 0xcf, 0xb2, 0x32,
	0x93, 0xb4, 0xb2, 0x0a, 0xc5, 0x93, 0xbe, 0xb9, 0x73, 0x3e, 0x30, 0x37, 0xa9, 0xd0, 0x18, 0x79,
	0xb9, 0x0a, 0x39, 0x1e, 0xa1, 0x7b, 0x66, 0x2e, 0xc5, 0x71, 0xdd, 0x22, 0xbf, 0x23, 0x28, 0xcd,
	0x54, 0xc9, 0xc1, 0xce, 0xc1, 0x92, 0xe8, 0x6a, 0xf4, 0x8a, 0xdf, 0x9e, 0x9d, 0x6c, 0x9f, 0x5a,
	0x39, 0x1b, 0x17, 0xc3, 0x8d, 0x64, 0xc8, 0x3a, 0x1c, 0x4c, 0x12, 0xcf, 0x35, 0x9e, 0x0a, 0xc5,
	0x8d, 0x2d, 0x6a, 0xca, 0xfb, 0x48, 0xee, 0xdf, 0x2a, 0x94, 0x66, 0x18, 0xd1, 0x06, 0x39, 0x0e,
	0xab, 0x31, 0x65, 0x50, 0x4e, 0x83, 0xe9, 0x27, 0xf6, 0x2a, 0x2c, 0x34, 0x6d, 0x57, 0x58, 0x92,
	0xdf, 0x5b, 0xd1, 0x28, 0xe5, 0xb4, 0xed, 0x5a, 0x46, 0xcc, 0x92, 0xc3, 0x40, 0xe6, 0x49, 0xc8,
	0x03, 0xae, 0x20, 0xc8, 0x47, 0xc0, 0xfb, 0x9e, 0x65, 0x06, 0xf4, 0x5c, 0x9b, 0x6f, 0xed, 0xfb,
	0x72, 0x71, 0x01, 0xb2, 0xae, 0xd7, 0x88, 0x70, 0x39, 0x9c, 0xeb, 0x35, 0xea, 0x16, 0x3e, 0x02,
	0x59, 0x1e, 0x98, 0x41, 0x9b, 0xab, 0x99, 0xb8, 0x11, 0x9c, 0x6c, 0xe4, 0x7c, 0xcc, 0x18, 0x32,
	0x03, 0x13, 0xc8, 0x79, 0x3e, 0xdb, 0xf4, 0x29, 0xe7, 0xea, 0x42, 0x2c, 0x32, 0x8e, 0x8f, 0xfc,
	0x9d, 0x86, 0x43, 0xa3, 0xfe, 0x6a, 0xbe, 0xcf, 0xfc, 0x0d, 0x66, 0x51, 0x5c, 0x81, 0xb9, 0xef,
	0x59, 0x49, 0x91, 0x42, 0xb7, 0xa7, 0x1e, 0xc2, 0xcb, 0x8f, 0x76, 0x77, 0xc3, 0xee, 0x8f, 0xc3,
	0x1b, 0x7f, 0x84, 0xb7, 0xbf, 0x18, 0x5e, 0xb9, 0x8a, 0x5f, 0x87, 0xe9, 0x45, 0x51, 0x10, 0xc1,
	0xdd, 0x9e, 0x9a, 0xc7, 0x07, 0x45, 0xee, 0x93, 0xaf, 0x3f, 0x0e, 0x6f, 0x5f, 0xc7, 0x6f, 0xc2,
	0xfc, 0x05, 0x52, 0xd2, 0x23, 0xe9, 0xf0, 0xd7, 0x6b, 0x61, 0xf7, 0x4e, 0x78, 0xef, 0xee, 0x93,
	0x9f, 0x3e, 0x0b, 0xbf, 0xba, 0x86, 0xdf, 0x81, 0x7d, 0x16, 0x56, 0xc9, 0x90, 0x97, 0xba, 0x3d,
	0xb5, 0x84, 0x0b, 0xc3, 0x6f, 0x7e, 0x18, 0xde, 0xfa, 0xe5, 0xf1, 0x9d, 0xdd, 0xf0, 0xbb, 0xcf,
	0x1f, 0x5f, 0xff, 0x54, 0x1c, 0x88, 0x75, 0x98, 0xb7, 0xd1, 0xca, 0xc2, 0xe4, 0x0c, 0x8f, 0xfe,
	0xfc, 0x32, 0xbc, 0xf5, 0x6d, 0x78, 0xe3, 0x26, 0xae, 0x82, 0x3a, 0xdb, 0x9a, 0x1c, 0x7c, 0x71,
	0xb2, 0x28, 0xbc, 0x77, 0x57, 0x0c, 0x7e, 0xe2, 0xec, 0xc3, 0x7f, 0xb5, 0xd4, 0xcd, 0xbe, 0x86,
	0xee, 0xf7, 0x35, 0xf4, 0xa0, 0xaf, 0xa1, 0x7f, 0xfa, 0x1a, 0xfa, 0xaf, 0xaf, 0xa5, 0xfe, 0xef,
	0x6b, 0xe8, 0xea, 0x40, 0x4b, 0xdd, 0x1f, 0x68, 0xe8, 0xc1, 0x40, 0x4b, 0x3d, 0x1c, 0x68, 0xa9,
	0x0f, 0xcb, 0x0d, 0x66, 0xbb, 0x47, 0xa3, 0x7d, 0xa0, 0x7e, 0xa5, 0xc1, 0x5a, 0x2d, 0xe6, 0x56,
	0x26, 0xfe, 0x5b, 0x97, 0xb2, 0x71, 0x58, 0x7d, 0x1a, 0x00, 0x00, 0xff, 0xff, 0x47, 0xad, 0x8e,
	0xec, 0xcf, 0x06, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_GetTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_GetTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_ClearLoopTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_ClearLoopTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_DrawStageRewardRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_DrawStageRewardResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_CheatFinishTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_CheatFinishTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_CheatResetLoopTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_CheatResetLoopTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask_TaskUpdatePush.Get().(proto.Message)
	})
}

var poolLoopTask = &sync.Pool{New: func() interface{} { return &LoopTask{} }}

func (m *LoopTask) ReleasePool() { m.Reset(); poolLoopTask.Put(m); m = nil }

var poolLoopTask_GetTaskRequest = &sync.Pool{New: func() interface{} { return &LoopTask_GetTaskRequest{} }}

func (m *LoopTask_GetTaskRequest) ReleasePool() {
	m.Reset()
	poolLoopTask_GetTaskRequest.Put(m)
	m = nil
}

var poolLoopTask_GetTaskResponse = &sync.Pool{New: func() interface{} { return &LoopTask_GetTaskResponse{} }}

func (m *LoopTask_GetTaskResponse) ReleasePool() {
	m.Reset()
	poolLoopTask_GetTaskResponse.Put(m)
	m = nil
}

var poolLoopTask_ClearLoopTaskRequest = &sync.Pool{New: func() interface{} { return &LoopTask_ClearLoopTaskRequest{} }}

func (m *LoopTask_ClearLoopTaskRequest) ReleasePool() {
	m.Reset()
	poolLoopTask_ClearLoopTaskRequest.Put(m)
	m = nil
}

var poolLoopTask_ClearLoopTaskResponse = &sync.Pool{New: func() interface{} { return &LoopTask_ClearLoopTaskResponse{} }}

func (m *LoopTask_ClearLoopTaskResponse) ReleasePool() {
	m.Reset()
	poolLoopTask_ClearLoopTaskResponse.Put(m)
	m = nil
}

var poolLoopTask_DrawStageRewardRequest = &sync.Pool{New: func() interface{} { return &LoopTask_DrawStageRewardRequest{} }}

func (m *LoopTask_DrawStageRewardRequest) ReleasePool() {
	m.Reset()
	poolLoopTask_DrawStageRewardRequest.Put(m)
	m = nil
}

var poolLoopTask_DrawStageRewardResponse = &sync.Pool{New: func() interface{} { return &LoopTask_DrawStageRewardResponse{} }}

func (m *LoopTask_DrawStageRewardResponse) ReleasePool() {
	m.Reset()
	poolLoopTask_DrawStageRewardResponse.Put(m)
	m = nil
}

var poolLoopTask_CheatFinishTaskRequest = &sync.Pool{New: func() interface{} { return &LoopTask_CheatFinishTaskRequest{} }}

func (m *LoopTask_CheatFinishTaskRequest) ReleasePool() {
	m.Reset()
	poolLoopTask_CheatFinishTaskRequest.Put(m)
	m = nil
}

var poolLoopTask_CheatFinishTaskResponse = &sync.Pool{New: func() interface{} { return &LoopTask_CheatFinishTaskResponse{} }}

func (m *LoopTask_CheatFinishTaskResponse) ReleasePool() {
	m.Reset()
	poolLoopTask_CheatFinishTaskResponse.Put(m)
	m = nil
}

var poolLoopTask_CheatResetLoopTaskRequest = &sync.Pool{New: func() interface{} { return &LoopTask_CheatResetLoopTaskRequest{} }}

func (m *LoopTask_CheatResetLoopTaskRequest) ReleasePool() {
	m.Reset()
	poolLoopTask_CheatResetLoopTaskRequest.Put(m)
	m = nil
}

var poolLoopTask_CheatResetLoopTaskResponse = &sync.Pool{New: func() interface{} { return &LoopTask_CheatResetLoopTaskResponse{} }}

func (m *LoopTask_CheatResetLoopTaskResponse) ReleasePool() {
	m.Reset()
	poolLoopTask_CheatResetLoopTaskResponse.Put(m)
	m = nil
}

var poolLoopTask_TaskUpdatePush = &sync.Pool{New: func() interface{} { return &LoopTask_TaskUpdatePush{} }}

func (m *LoopTask_TaskUpdatePush) ReleasePool() {
	m.Reset()
	poolLoopTask_TaskUpdatePush.Put(m)
	m = nil
}
func (x LoopTaskErrorCode) String() string {
	s, ok := LoopTaskErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LoopTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask)
	if !ok {
		that2, ok := that.(LoopTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LoopTask_GetTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_GetTaskRequest)
	if !ok {
		that2, ok := that.(LoopTask_GetTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LoopTask_GetTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_GetTaskResponse)
	if !ok {
		that2, ok := that.(LoopTask_GetTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	if len(this.Daily) != len(that1.Daily) {
		return false
	}
	for i := range this.Daily {
		if this.Daily[i] != that1.Daily[i] {
			return false
		}
	}
	if len(this.Weekly) != len(that1.Weekly) {
		return false
	}
	for i := range this.Weekly {
		if this.Weekly[i] != that1.Weekly[i] {
			return false
		}
	}
	return true
}
func (this *LoopTask_ClearLoopTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_ClearLoopTaskRequest)
	if !ok {
		that2, ok := that.(LoopTask_ClearLoopTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *LoopTask_ClearLoopTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_ClearLoopTaskResponse)
	if !ok {
		that2, ok := that.(LoopTask_ClearLoopTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	return true
}
func (this *LoopTask_DrawStageRewardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_DrawStageRewardRequest)
	if !ok {
		that2, ok := that.(LoopTask_DrawStageRewardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	return true
}
func (this *LoopTask_DrawStageRewardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_DrawStageRewardResponse)
	if !ok {
		that2, ok := that.(LoopTask_DrawStageRewardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *LoopTask_CheatFinishTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_CheatFinishTaskRequest)
	if !ok {
		that2, ok := that.(LoopTask_CheatFinishTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LoopTask_CheatFinishTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_CheatFinishTaskResponse)
	if !ok {
		that2, ok := that.(LoopTask_CheatFinishTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LoopTask_CheatResetLoopTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_CheatResetLoopTaskRequest)
	if !ok {
		that2, ok := that.(LoopTask_CheatResetLoopTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *LoopTask_CheatResetLoopTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_CheatResetLoopTaskResponse)
	if !ok {
		that2, ok := that.(LoopTask_CheatResetLoopTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LoopTask_TaskUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask_TaskUpdatePush)
	if !ok {
		that2, ok := that.(LoopTask_TaskUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.NpcId != that1.NpcId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Progress != that1.Progress {
		return false
	}
	return true
}
func (m *LoopTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LoopTask_GetTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_GetTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_GetTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LoopTask_GetTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_GetTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_GetTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weekly) > 0 {
		for k := range m.Weekly {
			v := m.Weekly[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintLoopTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLoopTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Daily) > 0 {
		for k := range m.Daily {
			v := m.Daily[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintLoopTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLoopTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLoopTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LoopTask_ClearLoopTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_ClearLoopTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_ClearLoopTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoopTask_ClearLoopTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_ClearLoopTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_ClearLoopTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for k := range m.Reward {
			v := m.Reward[k]
			baseI := i
			i = encodeVarintLoopTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintLoopTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLoopTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LoopTask_DrawStageRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_DrawStageRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_DrawStageRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.StageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoopTask_DrawStageRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_DrawStageRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_DrawStageRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintLoopTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintLoopTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLoopTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LoopTask_CheatFinishTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_CheatFinishTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_CheatFinishTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LoopTask_CheatFinishTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_CheatFinishTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_CheatFinishTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LoopTask_CheatResetLoopTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_CheatResetLoopTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_CheatResetLoopTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoopTask_CheatResetLoopTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_CheatResetLoopTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_CheatResetLoopTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LoopTask_TaskUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask_TaskUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask_TaskUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Progress != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.NpcId != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.NpcId))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoopTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoopTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *LoopTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *LoopTask_GetTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *LoopTask_GetTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("tasks")
	w.RawByte('"')
	w.RawByte(':')
	if m.Tasks == nil {
		w.RawString("null")
	} else if len(m.Tasks) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Tasks {
			v.JsonBytes(w)
			if i != len(m.Tasks)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("daily")
	w.RawByte('"')
	w.RawByte(':')
	if m.Daily == nil {
		w.RawString("null")
	} else if len(m.Daily) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDaily := len(m.Daily)
		for k, v := range m.Daily {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlDaily--
			if mlDaily != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("weekly")
	w.RawByte('"')
	w.RawByte(':')
	if m.Weekly == nil {
		w.RawString("null")
	} else if len(m.Weekly) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlWeekly := len(m.Weekly)
		for k, v := range m.Weekly {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlWeekly--
			if mlWeekly != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoopTask_ClearLoopTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoopTask_ClearLoopTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlReward := len(m.Reward)
		for k, v := range m.Reward {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlReward--
			if mlReward != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoopTask_DrawStageRewardRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.StageId != 0 {
		w.RawByte('"')
		w.RawString("stage_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StageId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoopTask_DrawStageRewardResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoopTask_CheatFinishTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *LoopTask_CheatFinishTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *LoopTask_CheatResetLoopTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Kind != 0 {
		w.RawByte('"')
		w.RawString("kind")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Kind))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoopTask_CheatResetLoopTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *LoopTask_TaskUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.NpcId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("npc_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NpcId))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.Progress != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("progress")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Progress))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoopTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask) GoString() string {
	return m.String()
}

func (m *LoopTask_GetTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_GetTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_GetTaskRequest) GoString() string {
	return m.String()
}

func (m *LoopTask_GetTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_GetTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_GetTaskResponse) GoString() string {
	return m.String()
}

func (m *LoopTask_ClearLoopTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_ClearLoopTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_ClearLoopTaskRequest) GoString() string {
	return m.String()
}

func (m *LoopTask_ClearLoopTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_ClearLoopTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_ClearLoopTaskResponse) GoString() string {
	return m.String()
}

func (m *LoopTask_DrawStageRewardRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_DrawStageRewardRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_DrawStageRewardRequest) GoString() string {
	return m.String()
}

func (m *LoopTask_DrawStageRewardResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_DrawStageRewardResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_DrawStageRewardResponse) GoString() string {
	return m.String()
}

func (m *LoopTask_CheatFinishTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_CheatFinishTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_CheatFinishTaskRequest) GoString() string {
	return m.String()
}

func (m *LoopTask_CheatFinishTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_CheatFinishTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_CheatFinishTaskResponse) GoString() string {
	return m.String()
}

func (m *LoopTask_CheatResetLoopTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_CheatResetLoopTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_CheatResetLoopTaskRequest) GoString() string {
	return m.String()
}

func (m *LoopTask_CheatResetLoopTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_CheatResetLoopTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_CheatResetLoopTaskResponse) GoString() string {
	return m.String()
}

func (m *LoopTask_TaskUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask_TaskUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask_TaskUpdatePush) GoString() string {
	return m.String()
}

func (m *LoopTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LoopTask_GetTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LoopTask_GetTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovLoopTask(uint64(l))
		}
	}
	if len(m.Daily) > 0 {
		for k, v := range m.Daily {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLoopTask(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovLoopTask(uint64(mapEntrySize))
		}
	}
	if len(m.Weekly) > 0 {
		for k, v := range m.Weekly {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLoopTask(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovLoopTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LoopTask_ClearLoopTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovLoopTask(uint64(m.TaskId))
	}
	return n
}

func (m *LoopTask_ClearLoopTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for k, v := range m.Reward {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLoopTask(uint64(k)) + 1 + sovLoopTask(uint64(v))
			n += mapEntrySize + 1 + sovLoopTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LoopTask_DrawStageRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovLoopTask(uint64(m.StageId))
	}
	return n
}

func (m *LoopTask_DrawStageRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLoopTask(uint64(k)) + 1 + sovLoopTask(uint64(v))
			n += mapEntrySize + 1 + sovLoopTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LoopTask_CheatFinishTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LoopTask_CheatFinishTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LoopTask_CheatResetLoopTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovLoopTask(uint64(m.Kind))
	}
	return n
}

func (m *LoopTask_CheatResetLoopTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LoopTask_TaskUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovLoopTask(uint64(m.TaskId))
	}
	if m.NpcId != 0 {
		n += 1 + sovLoopTask(uint64(m.NpcId))
	}
	if m.Status != 0 {
		n += 1 + sovLoopTask(uint64(m.Status))
	}
	if m.Progress != 0 {
		n += 1 + sovLoopTask(uint64(m.Progress))
	}
	return n
}

func sovLoopTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoopTask(x uint64) (n int) {
	return sovLoopTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoopTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoopTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoopTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_GetTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_GetTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &models.LoopTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daily", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Daily == nil {
				m.Daily = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLoopTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLoopTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLoopTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Daily[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weekly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weekly == nil {
				m.Weekly = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLoopTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLoopTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLoopTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Weekly[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_ClearLoopTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearLoopTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearLoopTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_ClearLoopTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearLoopTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearLoopTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLoopTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLoopTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLoopTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reward[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_DrawStageRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawStageRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawStageRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_DrawStageRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawStageRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawStageRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLoopTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLoopTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLoopTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_CheatFinishTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatFinishTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatFinishTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_CheatFinishTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatFinishTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatFinishTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_CheatResetLoopTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatResetLoopTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatResetLoopTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= models.TaskKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_CheatResetLoopTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatResetLoopTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatResetLoopTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoopTask_TaskUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			m.NpcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NpcId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= models.TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoopTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoopTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoopTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoopTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoopTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoopTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoopTask = fmt.Errorf("proto: unexpected end of group")
)
