// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/equip_forge.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EquipForgeErrorCode int32

const (
	EquipForgeErrorCode_ErrForgeRecipeNotExist    EquipForgeErrorCode = 0
	EquipForgeErrorCode_ErrForgeLevelNotEnough    EquipForgeErrorCode = 1
	EquipForgeErrorCode_ErrForgeInvalidSupplement EquipForgeErrorCode = 2
)

var EquipForgeErrorCode_name = map[int32]string{
	0: "ErrForgeRecipeNotExist",
	1: "ErrForgeLevelNotEnough",
	2: "ErrForgeInvalidSupplement",
}

var EquipForgeErrorCode_value = map[string]int32{
	"ErrForgeRecipeNotExist":    0,
	"ErrForgeLevelNotEnough":    1,
	"ErrForgeInvalidSupplement": 2,
}

func (EquipForgeErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0}
}

type EquipForge struct {
}

func (m *EquipForge) Reset()      { *m = EquipForge{} }
func (*EquipForge) ProtoMessage() {}
func (*EquipForge) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0}
}
func (m *EquipForge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge.Merge(m, src)
}
func (m *EquipForge) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge proto.InternalMessageInfo

func (*EquipForge) XXX_MessageName() string {
	return "service.EquipForge"
}

// 获取玩家装备打造信息
type EquipForge_EquipForgeInfoRequest struct {
}

func (m *EquipForge_EquipForgeInfoRequest) Reset()      { *m = EquipForge_EquipForgeInfoRequest{} }
func (*EquipForge_EquipForgeInfoRequest) ProtoMessage() {}
func (*EquipForge_EquipForgeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0, 0}
}
func (m *EquipForge_EquipForgeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge_EquipForgeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge_EquipForgeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge_EquipForgeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge_EquipForgeInfoRequest.Merge(m, src)
}
func (m *EquipForge_EquipForgeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge_EquipForgeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge_EquipForgeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge_EquipForgeInfoRequest proto.InternalMessageInfo

func (*EquipForge_EquipForgeInfoRequest) XXX_MessageName() string {
	return "service.EquipForge.EquipForgeInfoRequest"
}

type EquipForge_EquipForgeInfoResponse struct {
	ForgeInfo *models.EquipForge `protobuf:"bytes,1,opt,name=forge_info,json=forgeInfo,proto3" json:"forge_info,omitempty"`
}

func (m *EquipForge_EquipForgeInfoResponse) Reset()      { *m = EquipForge_EquipForgeInfoResponse{} }
func (*EquipForge_EquipForgeInfoResponse) ProtoMessage() {}
func (*EquipForge_EquipForgeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0, 1}
}
func (m *EquipForge_EquipForgeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge_EquipForgeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge_EquipForgeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge_EquipForgeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge_EquipForgeInfoResponse.Merge(m, src)
}
func (m *EquipForge_EquipForgeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge_EquipForgeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge_EquipForgeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge_EquipForgeInfoResponse proto.InternalMessageInfo

func (m *EquipForge_EquipForgeInfoResponse) GetForgeInfo() *models.EquipForge {
	if m != nil {
		return m.ForgeInfo
	}
	return nil
}

func (*EquipForge_EquipForgeInfoResponse) XXX_MessageName() string {
	return "service.EquipForge.EquipForgeInfoResponse"
}

// 打造装备
type EquipForge_ForgeRequest struct {
	RecipeId     int64 `protobuf:"varint,1,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	SupplementId int64 `protobuf:"varint,2,opt,name=supplement_id,json=supplementId,proto3" json:"supplement_id,omitempty"`
}

func (m *EquipForge_ForgeRequest) Reset()      { *m = EquipForge_ForgeRequest{} }
func (*EquipForge_ForgeRequest) ProtoMessage() {}
func (*EquipForge_ForgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0, 2}
}
func (m *EquipForge_ForgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge_ForgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge_ForgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge_ForgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge_ForgeRequest.Merge(m, src)
}
func (m *EquipForge_ForgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge_ForgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge_ForgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge_ForgeRequest proto.InternalMessageInfo

func (m *EquipForge_ForgeRequest) GetRecipeId() int64 {
	if m != nil {
		return m.RecipeId
	}
	return 0
}

func (m *EquipForge_ForgeRequest) GetSupplementId() int64 {
	if m != nil {
		return m.SupplementId
	}
	return 0
}

func (*EquipForge_ForgeRequest) XXX_MessageName() string {
	return "service.EquipForge.ForgeRequest"
}

type EquipForge_ForgeResponse struct {
	Equip     *models.Equipment  `protobuf:"bytes,1,opt,name=equip,proto3" json:"equip,omitempty"`
	ForgeInfo *models.EquipForge `protobuf:"bytes,2,opt,name=forge_info,json=forgeInfo,proto3" json:"forge_info,omitempty"`
}

func (m *EquipForge_ForgeResponse) Reset()      { *m = EquipForge_ForgeResponse{} }
func (*EquipForge_ForgeResponse) ProtoMessage() {}
func (*EquipForge_ForgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0, 3}
}
func (m *EquipForge_ForgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge_ForgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge_ForgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge_ForgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge_ForgeResponse.Merge(m, src)
}
func (m *EquipForge_ForgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge_ForgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge_ForgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge_ForgeResponse proto.InternalMessageInfo

func (m *EquipForge_ForgeResponse) GetEquip() *models.Equipment {
	if m != nil {
		return m.Equip
	}
	return nil
}

func (m *EquipForge_ForgeResponse) GetForgeInfo() *models.EquipForge {
	if m != nil {
		return m.ForgeInfo
	}
	return nil
}

func (*EquipForge_ForgeResponse) XXX_MessageName() string {
	return "service.EquipForge.ForgeResponse"
}

type EquipForge_CheatAddAllRecipeRequest struct {
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *EquipForge_CheatAddAllRecipeRequest) Reset()      { *m = EquipForge_CheatAddAllRecipeRequest{} }
func (*EquipForge_CheatAddAllRecipeRequest) ProtoMessage() {}
func (*EquipForge_CheatAddAllRecipeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0, 4}
}
func (m *EquipForge_CheatAddAllRecipeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge_CheatAddAllRecipeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge_CheatAddAllRecipeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge_CheatAddAllRecipeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge_CheatAddAllRecipeRequest.Merge(m, src)
}
func (m *EquipForge_CheatAddAllRecipeRequest) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge_CheatAddAllRecipeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge_CheatAddAllRecipeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge_CheatAddAllRecipeRequest proto.InternalMessageInfo

func (m *EquipForge_CheatAddAllRecipeRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*EquipForge_CheatAddAllRecipeRequest) XXX_MessageName() string {
	return "service.EquipForge.CheatAddAllRecipeRequest"
}

type EquipForge_CheatAddAllRecipeResponse struct {
}

func (m *EquipForge_CheatAddAllRecipeResponse) Reset()      { *m = EquipForge_CheatAddAllRecipeResponse{} }
func (*EquipForge_CheatAddAllRecipeResponse) ProtoMessage() {}
func (*EquipForge_CheatAddAllRecipeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0, 5}
}
func (m *EquipForge_CheatAddAllRecipeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge_CheatAddAllRecipeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge_CheatAddAllRecipeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge_CheatAddAllRecipeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge_CheatAddAllRecipeResponse.Merge(m, src)
}
func (m *EquipForge_CheatAddAllRecipeResponse) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge_CheatAddAllRecipeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge_CheatAddAllRecipeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge_CheatAddAllRecipeResponse proto.InternalMessageInfo

func (*EquipForge_CheatAddAllRecipeResponse) XXX_MessageName() string {
	return "service.EquipForge.CheatAddAllRecipeResponse"
}

// 修改打造等级并将打造经验置为0
type EquipForge_CheatUpdateForgeLevelRequest struct {
	Level int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *EquipForge_CheatUpdateForgeLevelRequest) Reset() {
	*m = EquipForge_CheatUpdateForgeLevelRequest{}
}
func (*EquipForge_CheatUpdateForgeLevelRequest) ProtoMessage() {}
func (*EquipForge_CheatUpdateForgeLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0, 6}
}
func (m *EquipForge_CheatUpdateForgeLevelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge_CheatUpdateForgeLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge_CheatUpdateForgeLevelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge_CheatUpdateForgeLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge_CheatUpdateForgeLevelRequest.Merge(m, src)
}
func (m *EquipForge_CheatUpdateForgeLevelRequest) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge_CheatUpdateForgeLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge_CheatUpdateForgeLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge_CheatUpdateForgeLevelRequest proto.InternalMessageInfo

func (m *EquipForge_CheatUpdateForgeLevelRequest) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (*EquipForge_CheatUpdateForgeLevelRequest) XXX_MessageName() string {
	return "service.EquipForge.CheatUpdateForgeLevelRequest"
}

type EquipForge_CheatUpdateForgeLevelResponse struct {
	ForgeInfo *models.EquipForge `protobuf:"bytes,1,opt,name=forge_info,json=forgeInfo,proto3" json:"forge_info,omitempty"`
}

func (m *EquipForge_CheatUpdateForgeLevelResponse) Reset() {
	*m = EquipForge_CheatUpdateForgeLevelResponse{}
}
func (*EquipForge_CheatUpdateForgeLevelResponse) ProtoMessage() {}
func (*EquipForge_CheatUpdateForgeLevelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f52e427179f0424, []int{0, 7}
}
func (m *EquipForge_CheatUpdateForgeLevelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge_CheatUpdateForgeLevelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge_CheatUpdateForgeLevelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge_CheatUpdateForgeLevelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge_CheatUpdateForgeLevelResponse.Merge(m, src)
}
func (m *EquipForge_CheatUpdateForgeLevelResponse) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge_CheatUpdateForgeLevelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge_CheatUpdateForgeLevelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge_CheatUpdateForgeLevelResponse proto.InternalMessageInfo

func (m *EquipForge_CheatUpdateForgeLevelResponse) GetForgeInfo() *models.EquipForge {
	if m != nil {
		return m.ForgeInfo
	}
	return nil
}

func (*EquipForge_CheatUpdateForgeLevelResponse) XXX_MessageName() string {
	return "service.EquipForge.CheatUpdateForgeLevelResponse"
}
func init() {
	proto.RegisterEnum("service.EquipForgeErrorCode", EquipForgeErrorCode_name, EquipForgeErrorCode_value)
	proto.RegisterType((*EquipForge)(nil), "service.EquipForge")
	proto.RegisterType((*EquipForge_EquipForgeInfoRequest)(nil), "service.EquipForge.EquipForgeInfoRequest")
	proto.RegisterType((*EquipForge_EquipForgeInfoResponse)(nil), "service.EquipForge.EquipForgeInfoResponse")
	proto.RegisterType((*EquipForge_ForgeRequest)(nil), "service.EquipForge.ForgeRequest")
	proto.RegisterType((*EquipForge_ForgeResponse)(nil), "service.EquipForge.ForgeResponse")
	proto.RegisterType((*EquipForge_CheatAddAllRecipeRequest)(nil), "service.EquipForge.CheatAddAllRecipeRequest")
	proto.RegisterType((*EquipForge_CheatAddAllRecipeResponse)(nil), "service.EquipForge.CheatAddAllRecipeResponse")
	proto.RegisterType((*EquipForge_CheatUpdateForgeLevelRequest)(nil), "service.EquipForge.CheatUpdateForgeLevelRequest")
	proto.RegisterType((*EquipForge_CheatUpdateForgeLevelResponse)(nil), "service.EquipForge.CheatUpdateForgeLevelResponse")
}

func init() { proto.RegisterFile("proto/service/equip_forge.proto", fileDescriptor_9f52e427179f0424) }

var fileDescriptor_9f52e427179f0424 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x77, 0x5a, 0xab, 0xf6, 0xd9, 0x62, 0x3a, 0x36, 0xcd, 0x76, 0x52, 0xc7, 0xa2, 0x07,
	0x45, 0x34, 0x41, 0xed, 0xc9, 0x5b, 0x2d, 0x11, 0x82, 0x52, 0x64, 0xc5, 0x8b, 0x97, 0x90, 0x66,
	0x27, 0xed, 0xe2, 0x66, 0x67, 0x3b, 0xbb, 0x09, 0x1e, 0x3d, 0x58, 0xb1, 0x81, 0x42, 0x41, 0xfc,
	0xad, 0x50, 0x4f, 0x16, 0xa4, 0x27, 0x89, 0x84, 0x1c, 0x3c, 0xf7, 0xd8, 0x63, 0x8f, 0xba, 0x69,
	0x92, 0x7a, 0xf3, 0x4f, 0x90, 0x99, 0xdd, 0x18, 0xd2, 0x2a, 0x88, 0xb7, 0x7d, 0xef, 0xfb, 0xbe,
	0xdf, 0xf9, 0xbc, 0x1d, 0x06, 0xce, 0xb8, 0x82, 0xfb, 0x3c, 0xed, 0x31, 0x51, 0xb1, 0x0a, 0x2c,
	0xcd, 0x96, 0xcb, 0x96, 0x9b, 0x2b, 0x72, 0xb1, 0xc8, 0x52, 0x4a, 0xc1, 0xc7, 0x22, 0x89, 0x24,
	0xc2, 0xc9, 0x12, 0x37, 0x99, 0xed, 0xa5, 0x17, 0xf2, 0x5e, 0x34, 0x41, 0x68, 0x9f, 0x70, 0x28,
	0x81, 0x4c, 0x1d, 0xd6, 0x4b, 0xcc, 0xf1, 0x43, 0xf5, 0xec, 0x93, 0x23, 0x00, 0x19, 0xd9, 0xbb,
	0x29, 0x2d, 0x24, 0x01, 0xf1, 0x5e, 0x95, 0x75, 0x8a, 0xdc, 0x60, 0xcb, 0x65, 0xe6, 0xf9, 0xe4,
	0x16, 0x4c, 0x1c, 0x14, 0x3c, 0x97, 0x3b, 0x1e, 0xc3, 0x57, 0x00, 0xd4, 0x71, 0x39, 0xcb, 0x29,
	0x72, 0x1d, 0x4d, 0xa3, 0x0b, 0x27, 0xae, 0xe2, 0x54, 0x78, 0x5c, 0xaa, 0xe7, 0x31, 0x86, 0x8b,
	0x5d, 0x2b, 0xb9, 0x03, 0x23, 0x61, 0x2f, 0x0c, 0xc7, 0x49, 0x18, 0x16, 0xac, 0x60, 0xb9, 0x2c,
	0x67, 0x99, 0x2a, 0x61, 0xd0, 0x38, 0x1e, 0x36, 0xb2, 0x26, 0x3e, 0x07, 0xa3, 0x5e, 0xd9, 0x75,
	0x6d, 0x26, 0xa9, 0xe5, 0xc0, 0x80, 0x1a, 0x18, 0xe9, 0x35, 0xb3, 0x26, 0x79, 0x00, 0xa3, 0x51,
	0x62, 0x44, 0x75, 0x1e, 0x86, 0xd4, 0xaa, 0x11, 0xd0, 0x58, 0x1f, 0x90, 0x34, 0x19, 0xa1, 0x7e,
	0x00, 0x7f, 0xe0, 0x5f, 0xf0, 0x2f, 0x81, 0x3e, 0xb7, 0xc4, 0xf2, 0xfe, 0xac, 0x69, 0xce, 0xda,
	0xb6, 0xa1, 0x40, 0xbb, 0xab, 0xc4, 0x60, 0xd0, 0x29, 0x97, 0xa2, 0x25, 0xe4, 0x27, 0x49, 0xc2,
	0xe4, 0x1f, 0xa6, 0x43, 0x4c, 0x32, 0x03, 0x53, 0x4a, 0xbc, 0xe7, 0x9a, 0x79, 0x9f, 0xa9, 0x93,
	0x6e, 0xb3, 0x0a, 0xb3, 0xbb, 0x71, 0xe3, 0x30, 0x64, 0xcb, 0x3a, 0x0a, 0x0c, 0x0b, 0x62, 0xc0,
	0xe9, 0xbf, 0xb8, 0xfe, 0xfb, 0x4e, 0x2e, 0x36, 0x10, 0x9c, 0xea, 0x29, 0x19, 0x21, 0xb8, 0x98,
	0xe3, 0xa6, 0x8c, 0x9a, 0xc8, 0x08, 0x11, 0xfd, 0x5c, 0xc9, 0x3e, 0xcf, 0xfd, 0xcc, 0x43, 0xcb,
	0xf3, 0x63, 0x1a, 0x89, 0x57, 0x6b, 0xfa, 0x18, 0x3e, 0xd9, 0x7a, 0xfb, 0xb5, 0xd3, 0xa8, 0xef,
	0xd5, 0xd7, 0x5a, 0x5b, 0xaf, 0x5a, 0xef, 0x36, 0xf1, 0x4c, 0xcf, 0xa2, 0xb0, 0xa4, 0xc3, 0xe1,
	0xe5, 0xc5, 0xa5, 0x18, 0x22, 0x7a, 0xb5, 0xa6, 0x8f, 0x63, 0xdc, 0x5e, 0x7d, 0xf6, 0xe3, 0xd1,
	0x46, 0x67, 0x6b, 0xb5, 0xd3, 0xf8, 0xb8, 0x57, 0x5f, 0xdb, 0xff, 0xf2, 0x19, 0x5f, 0x87, 0xc9,
	0xae, 0x2b, 0xeb, 0x54, 0xf2, 0xb6, 0x65, 0xde, 0xfd, 0x7d, 0xc3, 0xb1, 0x01, 0x92, 0xac, 0xd6,
	0xf4, 0x04, 0x8e, 0xb7, 0x5f, 0x6e, 0xb4, 0x9f, 0x3f, 0xed, 0xbc, 0x79, 0xdc, 0xfa, 0xf0, 0xa9,
	0xb5, 0xb2, 0xd2, 0x7e, 0xbf, 0xde, 0x7e, 0xf1, 0xfa, 0xc6, 0xfc, 0xee, 0x77, 0xaa, 0x6d, 0x06,
	0x14, 0x6d, 0x07, 0x14, 0xed, 0x04, 0x14, 0x7d, 0x0b, 0x28, 0xda, 0x0f, 0xa8, 0xf6, 0x33, 0xa0,
	0x68, 0xbd, 0x49, 0xb5, 0xed, 0x26, 0x45, 0x3b, 0x4d, 0xaa, 0xed, 0x36, 0xa9, 0x76, 0x7f, 0xba,
	0xc0, 0x2d, 0xe7, 0xb2, 0x7c, 0x58, 0x4c, 0xa4, 0x0b, 0xbc, 0x54, 0xe2, 0x4e, 0xba, 0xef, 0x1d,
	0x2e, 0x1c, 0x55, 0xe5, 0xb5, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x93, 0x31, 0xf0, 0x9f,
	0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge_EquipForgeInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge_EquipForgeInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge_ForgeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge_ForgeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge_CheatAddAllRecipeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge_CheatAddAllRecipeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge_CheatUpdateForgeLevelRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge_CheatUpdateForgeLevelResponse.Get().(proto.Message)
	})
}

var poolEquipForge = &sync.Pool{New: func() interface{} { return &EquipForge{} }}

func (m *EquipForge) ReleasePool() { m.Reset(); poolEquipForge.Put(m); m = nil }

var poolEquipForge_EquipForgeInfoRequest = &sync.Pool{New: func() interface{} { return &EquipForge_EquipForgeInfoRequest{} }}

func (m *EquipForge_EquipForgeInfoRequest) ReleasePool() {
	m.Reset()
	poolEquipForge_EquipForgeInfoRequest.Put(m)
	m = nil
}

var poolEquipForge_EquipForgeInfoResponse = &sync.Pool{New: func() interface{} { return &EquipForge_EquipForgeInfoResponse{} }}

func (m *EquipForge_EquipForgeInfoResponse) ReleasePool() {
	m.Reset()
	poolEquipForge_EquipForgeInfoResponse.Put(m)
	m = nil
}

var poolEquipForge_ForgeRequest = &sync.Pool{New: func() interface{} { return &EquipForge_ForgeRequest{} }}

func (m *EquipForge_ForgeRequest) ReleasePool() {
	m.Reset()
	poolEquipForge_ForgeRequest.Put(m)
	m = nil
}

var poolEquipForge_ForgeResponse = &sync.Pool{New: func() interface{} { return &EquipForge_ForgeResponse{} }}

func (m *EquipForge_ForgeResponse) ReleasePool() {
	m.Reset()
	poolEquipForge_ForgeResponse.Put(m)
	m = nil
}

var poolEquipForge_CheatAddAllRecipeRequest = &sync.Pool{New: func() interface{} { return &EquipForge_CheatAddAllRecipeRequest{} }}

func (m *EquipForge_CheatAddAllRecipeRequest) ReleasePool() {
	m.Reset()
	poolEquipForge_CheatAddAllRecipeRequest.Put(m)
	m = nil
}

var poolEquipForge_CheatAddAllRecipeResponse = &sync.Pool{New: func() interface{} { return &EquipForge_CheatAddAllRecipeResponse{} }}

func (m *EquipForge_CheatAddAllRecipeResponse) ReleasePool() {
	m.Reset()
	poolEquipForge_CheatAddAllRecipeResponse.Put(m)
	m = nil
}

var poolEquipForge_CheatUpdateForgeLevelRequest = &sync.Pool{New: func() interface{} { return &EquipForge_CheatUpdateForgeLevelRequest{} }}

func (m *EquipForge_CheatUpdateForgeLevelRequest) ReleasePool() {
	m.Reset()
	poolEquipForge_CheatUpdateForgeLevelRequest.Put(m)
	m = nil
}

var poolEquipForge_CheatUpdateForgeLevelResponse = &sync.Pool{New: func() interface{} { return &EquipForge_CheatUpdateForgeLevelResponse{} }}

func (m *EquipForge_CheatUpdateForgeLevelResponse) ReleasePool() {
	m.Reset()
	poolEquipForge_CheatUpdateForgeLevelResponse.Put(m)
	m = nil
}
func (x EquipForgeErrorCode) String() string {
	s, ok := EquipForgeErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *EquipForge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge)
	if !ok {
		that2, ok := that.(EquipForge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EquipForge_EquipForgeInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge_EquipForgeInfoRequest)
	if !ok {
		that2, ok := that.(EquipForge_EquipForgeInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EquipForge_EquipForgeInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge_EquipForgeInfoResponse)
	if !ok {
		that2, ok := that.(EquipForge_EquipForgeInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForgeInfo.Equal(that1.ForgeInfo) {
		return false
	}
	return true
}
func (this *EquipForge_ForgeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge_ForgeRequest)
	if !ok {
		that2, ok := that.(EquipForge_ForgeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RecipeId != that1.RecipeId {
		return false
	}
	if this.SupplementId != that1.SupplementId {
		return false
	}
	return true
}
func (this *EquipForge_ForgeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge_ForgeResponse)
	if !ok {
		that2, ok := that.(EquipForge_ForgeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Equip.Equal(that1.Equip) {
		return false
	}
	if !this.ForgeInfo.Equal(that1.ForgeInfo) {
		return false
	}
	return true
}
func (this *EquipForge_CheatAddAllRecipeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge_CheatAddAllRecipeRequest)
	if !ok {
		that2, ok := that.(EquipForge_CheatAddAllRecipeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *EquipForge_CheatAddAllRecipeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge_CheatAddAllRecipeResponse)
	if !ok {
		that2, ok := that.(EquipForge_CheatAddAllRecipeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EquipForge_CheatUpdateForgeLevelRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge_CheatUpdateForgeLevelRequest)
	if !ok {
		that2, ok := that.(EquipForge_CheatUpdateForgeLevelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *EquipForge_CheatUpdateForgeLevelResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge_CheatUpdateForgeLevelResponse)
	if !ok {
		that2, ok := that.(EquipForge_CheatUpdateForgeLevelResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForgeInfo.Equal(that1.ForgeInfo) {
		return false
	}
	return true
}
func (m *EquipForge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EquipForge_EquipForgeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge_EquipForgeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge_EquipForgeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EquipForge_EquipForgeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge_EquipForgeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge_EquipForgeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForgeInfo != nil {
		{
			size, err := m.ForgeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEquipForge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EquipForge_ForgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge_ForgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge_ForgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SupplementId != 0 {
		i = encodeVarintEquipForge(dAtA, i, uint64(m.SupplementId))
		i--
		dAtA[i] = 0x10
	}
	if m.RecipeId != 0 {
		i = encodeVarintEquipForge(dAtA, i, uint64(m.RecipeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EquipForge_ForgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge_ForgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge_ForgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForgeInfo != nil {
		{
			size, err := m.ForgeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEquipForge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Equip != nil {
		{
			size, err := m.Equip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEquipForge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EquipForge_CheatAddAllRecipeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge_CheatAddAllRecipeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge_CheatAddAllRecipeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintEquipForge(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EquipForge_CheatAddAllRecipeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge_CheatAddAllRecipeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge_CheatAddAllRecipeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EquipForge_CheatUpdateForgeLevelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge_CheatUpdateForgeLevelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge_CheatUpdateForgeLevelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintEquipForge(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EquipForge_CheatUpdateForgeLevelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge_CheatUpdateForgeLevelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge_CheatUpdateForgeLevelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForgeInfo != nil {
		{
			size, err := m.ForgeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEquipForge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEquipForge(dAtA []byte, offset int, v uint64) int {
	offset -= sovEquipForge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *EquipForge) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *EquipForge_EquipForgeInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *EquipForge_EquipForgeInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("forge_info")
	w.RawByte('"')
	w.RawByte(':')
	m.ForgeInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EquipForge_ForgeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RecipeId != 0 {
		w.RawByte('"')
		w.RawString("recipe_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RecipeId))
		needWriteComma = true
	}
	if m.SupplementId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("supplement_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SupplementId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EquipForge_ForgeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("equip")
	w.RawByte('"')
	w.RawByte(':')
	m.Equip.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("forge_info")
	w.RawByte('"')
	w.RawByte(':')
	m.ForgeInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EquipForge_CheatAddAllRecipeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Num != 0 {
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EquipForge_CheatAddAllRecipeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *EquipForge_CheatUpdateForgeLevelRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Level != 0 {
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EquipForge_CheatUpdateForgeLevelResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("forge_info")
	w.RawByte('"')
	w.RawByte(':')
	m.ForgeInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EquipForge) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge) GoString() string {
	return m.String()
}

func (m *EquipForge_EquipForgeInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge_EquipForgeInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge_EquipForgeInfoRequest) GoString() string {
	return m.String()
}

func (m *EquipForge_EquipForgeInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge_EquipForgeInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge_EquipForgeInfoResponse) GoString() string {
	return m.String()
}

func (m *EquipForge_ForgeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge_ForgeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge_ForgeRequest) GoString() string {
	return m.String()
}

func (m *EquipForge_ForgeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge_ForgeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge_ForgeResponse) GoString() string {
	return m.String()
}

func (m *EquipForge_CheatAddAllRecipeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge_CheatAddAllRecipeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge_CheatAddAllRecipeRequest) GoString() string {
	return m.String()
}

func (m *EquipForge_CheatAddAllRecipeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge_CheatAddAllRecipeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge_CheatAddAllRecipeResponse) GoString() string {
	return m.String()
}

func (m *EquipForge_CheatUpdateForgeLevelRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge_CheatUpdateForgeLevelRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge_CheatUpdateForgeLevelRequest) GoString() string {
	return m.String()
}

func (m *EquipForge_CheatUpdateForgeLevelResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge_CheatUpdateForgeLevelResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge_CheatUpdateForgeLevelResponse) GoString() string {
	return m.String()
}

func (m *EquipForge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EquipForge_EquipForgeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EquipForge_EquipForgeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForgeInfo != nil {
		l = m.ForgeInfo.Size()
		n += 1 + l + sovEquipForge(uint64(l))
	}
	return n
}

func (m *EquipForge_ForgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecipeId != 0 {
		n += 1 + sovEquipForge(uint64(m.RecipeId))
	}
	if m.SupplementId != 0 {
		n += 1 + sovEquipForge(uint64(m.SupplementId))
	}
	return n
}

func (m *EquipForge_ForgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Equip != nil {
		l = m.Equip.Size()
		n += 1 + l + sovEquipForge(uint64(l))
	}
	if m.ForgeInfo != nil {
		l = m.ForgeInfo.Size()
		n += 1 + l + sovEquipForge(uint64(l))
	}
	return n
}

func (m *EquipForge_CheatAddAllRecipeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovEquipForge(uint64(m.Num))
	}
	return n
}

func (m *EquipForge_CheatAddAllRecipeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EquipForge_CheatUpdateForgeLevelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovEquipForge(uint64(m.Level))
	}
	return n
}

func (m *EquipForge_CheatUpdateForgeLevelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForgeInfo != nil {
		l = m.ForgeInfo.Size()
		n += 1 + l + sovEquipForge(uint64(l))
	}
	return n
}

func sovEquipForge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEquipForge(x uint64) (n int) {
	return sovEquipForge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EquipForge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipForge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipForge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipForge_EquipForgeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipForgeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipForgeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipForge_EquipForgeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipForgeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipForgeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForgeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquipForge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquipForge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForgeInfo == nil {
				m.ForgeInfo = &models.EquipForge{}
			}
			if err := m.ForgeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipForge_ForgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipeId", wireType)
			}
			m.RecipeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecipeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplementId", wireType)
			}
			m.SupplementId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupplementId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipForge_ForgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquipForge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquipForge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equip == nil {
				m.Equip = &models.Equipment{}
			}
			if err := m.Equip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForgeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquipForge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquipForge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForgeInfo == nil {
				m.ForgeInfo = &models.EquipForge{}
			}
			if err := m.ForgeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipForge_CheatAddAllRecipeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddAllRecipeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddAllRecipeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipForge_CheatAddAllRecipeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddAllRecipeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddAllRecipeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipForge_CheatUpdateForgeLevelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatUpdateForgeLevelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatUpdateForgeLevelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipForge_CheatUpdateForgeLevelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatUpdateForgeLevelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatUpdateForgeLevelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForgeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquipForge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquipForge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForgeInfo == nil {
				m.ForgeInfo = &models.EquipForge{}
			}
			if err := m.ForgeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEquipForge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEquipForge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEquipForge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEquipForge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEquipForge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEquipForge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEquipForge = fmt.Errorf("proto: unexpected end of group")
)
