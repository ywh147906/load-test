// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/main_task.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MainTaskErrorCode int32

const (
	MainTaskErrorCode_ErrMainTaskUnfinished            MainTaskErrorCode = 0
	MainTaskErrorCode_ErrMainTaskStatusIsNotUnAccepted MainTaskErrorCode = 1
	MainTaskErrorCode_ErrMainTaskAccepted              MainTaskErrorCode = 2
	MainTaskErrorCode_ErrMainTaskNotUnlock             MainTaskErrorCode = 3
	MainTaskErrorCode_ErrChapterRewardCantGet          MainTaskErrorCode = 4
	MainTaskErrorCode_ErrMainTaskCantChoose            MainTaskErrorCode = 5
	MainTaskErrorCode_ErrMainTaskNotExist              MainTaskErrorCode = 6
)

var MainTaskErrorCode_name = map[int32]string{
	0: "ErrMainTaskUnfinished",
	1: "ErrMainTaskStatusIsNotUnAccepted",
	2: "ErrMainTaskAccepted",
	3: "ErrMainTaskNotUnlock",
	4: "ErrChapterRewardCantGet",
	5: "ErrMainTaskCantChoose",
	6: "ErrMainTaskNotExist",
}

var MainTaskErrorCode_value = map[string]int32{
	"ErrMainTaskUnfinished":            0,
	"ErrMainTaskStatusIsNotUnAccepted": 1,
	"ErrMainTaskAccepted":              2,
	"ErrMainTaskNotUnlock":             3,
	"ErrChapterRewardCantGet":          4,
	"ErrMainTaskCantChoose":            5,
	"ErrMainTaskNotExist":              6,
}

func (MainTaskErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0}
}

type MainTask struct {
}

func (m *MainTask) Reset()      { *m = MainTask{} }
func (*MainTask) ProtoMessage() {}
func (*MainTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0}
}
func (m *MainTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask.Merge(m, src)
}
func (m *MainTask) XXX_Size() int {
	return m.Size()
}
func (m *MainTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask proto.InternalMessageInfo

func (*MainTask) XXX_MessageName() string {
	return "service.MainTask"
}

// 获取主线任务
type MainTask_GetMainTaskRequest struct {
}

func (m *MainTask_GetMainTaskRequest) Reset()      { *m = MainTask_GetMainTaskRequest{} }
func (*MainTask_GetMainTaskRequest) ProtoMessage() {}
func (*MainTask_GetMainTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 0}
}
func (m *MainTask_GetMainTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_GetMainTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_GetMainTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_GetMainTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_GetMainTaskRequest.Merge(m, src)
}
func (m *MainTask_GetMainTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_GetMainTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_GetMainTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_GetMainTaskRequest proto.InternalMessageInfo

func (*MainTask_GetMainTaskRequest) XXX_MessageName() string {
	return "service.MainTask.GetMainTaskRequest"
}

type MainTask_GetMainTaskResponse struct {
	Task     *models.MainTask       `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Finished *models.MainTaskFinish `protobuf:"bytes,2,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (m *MainTask_GetMainTaskResponse) Reset()      { *m = MainTask_GetMainTaskResponse{} }
func (*MainTask_GetMainTaskResponse) ProtoMessage() {}
func (*MainTask_GetMainTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 1}
}
func (m *MainTask_GetMainTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_GetMainTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_GetMainTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_GetMainTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_GetMainTaskResponse.Merge(m, src)
}
func (m *MainTask_GetMainTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_GetMainTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_GetMainTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_GetMainTaskResponse proto.InternalMessageInfo

func (m *MainTask_GetMainTaskResponse) GetTask() *models.MainTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *MainTask_GetMainTaskResponse) GetFinished() *models.MainTaskFinish {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (*MainTask_GetMainTaskResponse) XXX_MessageName() string {
	return "service.MainTask.GetMainTaskResponse"
}

// 接受主线任务
type MainTask_AcceptMainTaskRequest struct {
}

func (m *MainTask_AcceptMainTaskRequest) Reset()      { *m = MainTask_AcceptMainTaskRequest{} }
func (*MainTask_AcceptMainTaskRequest) ProtoMessage() {}
func (*MainTask_AcceptMainTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 2}
}
func (m *MainTask_AcceptMainTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_AcceptMainTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_AcceptMainTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_AcceptMainTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_AcceptMainTaskRequest.Merge(m, src)
}
func (m *MainTask_AcceptMainTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_AcceptMainTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_AcceptMainTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_AcceptMainTaskRequest proto.InternalMessageInfo

func (*MainTask_AcceptMainTaskRequest) XXX_MessageName() string {
	return "service.MainTask.AcceptMainTaskRequest"
}

type MainTask_AcceptMainTaskResponse struct {
	Task *models.MainTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *MainTask_AcceptMainTaskResponse) Reset()      { *m = MainTask_AcceptMainTaskResponse{} }
func (*MainTask_AcceptMainTaskResponse) ProtoMessage() {}
func (*MainTask_AcceptMainTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 3}
}
func (m *MainTask_AcceptMainTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_AcceptMainTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_AcceptMainTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_AcceptMainTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_AcceptMainTaskResponse.Merge(m, src)
}
func (m *MainTask_AcceptMainTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_AcceptMainTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_AcceptMainTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_AcceptMainTaskResponse proto.InternalMessageInfo

func (m *MainTask_AcceptMainTaskResponse) GetTask() *models.MainTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (*MainTask_AcceptMainTaskResponse) XXX_MessageName() string {
	return "service.MainTask.AcceptMainTaskResponse"
}

// 提交主线任务
type MainTask_SubmitMainTaskRequest struct {
	Choose int64 `protobuf:"varint,1,opt,name=choose,proto3" json:"choose,omitempty"`
}

func (m *MainTask_SubmitMainTaskRequest) Reset()      { *m = MainTask_SubmitMainTaskRequest{} }
func (*MainTask_SubmitMainTaskRequest) ProtoMessage() {}
func (*MainTask_SubmitMainTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 4}
}
func (m *MainTask_SubmitMainTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_SubmitMainTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_SubmitMainTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_SubmitMainTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_SubmitMainTaskRequest.Merge(m, src)
}
func (m *MainTask_SubmitMainTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_SubmitMainTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_SubmitMainTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_SubmitMainTaskRequest proto.InternalMessageInfo

func (m *MainTask_SubmitMainTaskRequest) GetChoose() int64 {
	if m != nil {
		return m.Choose
	}
	return 0
}

func (*MainTask_SubmitMainTaskRequest) XXX_MessageName() string {
	return "service.MainTask.SubmitMainTaskRequest"
}

type MainTask_SubmitMainTaskResponse struct {
	Task     *models.MainTask       `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Finished *models.MainTaskFinish `protobuf:"bytes,2,opt,name=finished,proto3" json:"finished,omitempty"`
	Rewards  map[int64]int64        `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *MainTask_SubmitMainTaskResponse) Reset()      { *m = MainTask_SubmitMainTaskResponse{} }
func (*MainTask_SubmitMainTaskResponse) ProtoMessage() {}
func (*MainTask_SubmitMainTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 5}
}
func (m *MainTask_SubmitMainTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_SubmitMainTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_SubmitMainTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_SubmitMainTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_SubmitMainTaskResponse.Merge(m, src)
}
func (m *MainTask_SubmitMainTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_SubmitMainTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_SubmitMainTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_SubmitMainTaskResponse proto.InternalMessageInfo

func (m *MainTask_SubmitMainTaskResponse) GetTask() *models.MainTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *MainTask_SubmitMainTaskResponse) GetFinished() *models.MainTaskFinish {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *MainTask_SubmitMainTaskResponse) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*MainTask_SubmitMainTaskResponse) XXX_MessageName() string {
	return "service.MainTask.SubmitMainTaskResponse"
}

type MainTask_GetChapterRewardRequest struct {
	Chapter int64 `protobuf:"varint,1,opt,name=chapter,proto3" json:"chapter,omitempty"`
	Idx     int64 `protobuf:"varint,2,opt,name=idx,proto3" json:"idx,omitempty"`
}

func (m *MainTask_GetChapterRewardRequest) Reset()      { *m = MainTask_GetChapterRewardRequest{} }
func (*MainTask_GetChapterRewardRequest) ProtoMessage() {}
func (*MainTask_GetChapterRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 6}
}
func (m *MainTask_GetChapterRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_GetChapterRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_GetChapterRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_GetChapterRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_GetChapterRewardRequest.Merge(m, src)
}
func (m *MainTask_GetChapterRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_GetChapterRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_GetChapterRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_GetChapterRewardRequest proto.InternalMessageInfo

func (m *MainTask_GetChapterRewardRequest) GetChapter() int64 {
	if m != nil {
		return m.Chapter
	}
	return 0
}

func (m *MainTask_GetChapterRewardRequest) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (*MainTask_GetChapterRewardRequest) XXX_MessageName() string {
	return "service.MainTask.GetChapterRewardRequest"
}

type MainTask_GetChapterRewardResponse struct {
	Finished *models.MainTaskFinish `protobuf:"bytes,1,opt,name=finished,proto3" json:"finished,omitempty"`
	Rewards  map[int64]int64        `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *MainTask_GetChapterRewardResponse) Reset()      { *m = MainTask_GetChapterRewardResponse{} }
func (*MainTask_GetChapterRewardResponse) ProtoMessage() {}
func (*MainTask_GetChapterRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 7}
}
func (m *MainTask_GetChapterRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_GetChapterRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_GetChapterRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_GetChapterRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_GetChapterRewardResponse.Merge(m, src)
}
func (m *MainTask_GetChapterRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_GetChapterRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_GetChapterRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_GetChapterRewardResponse proto.InternalMessageInfo

func (m *MainTask_GetChapterRewardResponse) GetFinished() *models.MainTaskFinish {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *MainTask_GetChapterRewardResponse) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*MainTask_GetChapterRewardResponse) XXX_MessageName() string {
	return "service.MainTask.GetChapterRewardResponse"
}

// 主线任务更新推送
type MainTask_MainTaskUpdatePush struct {
	Task *models.MainTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *MainTask_MainTaskUpdatePush) Reset()      { *m = MainTask_MainTaskUpdatePush{} }
func (*MainTask_MainTaskUpdatePush) ProtoMessage() {}
func (*MainTask_MainTaskUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 8}
}
func (m *MainTask_MainTaskUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_MainTaskUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_MainTaskUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_MainTaskUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_MainTaskUpdatePush.Merge(m, src)
}
func (m *MainTask_MainTaskUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_MainTaskUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_MainTaskUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_MainTaskUpdatePush proto.InternalMessageInfo

func (m *MainTask_MainTaskUpdatePush) GetTask() *models.MainTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (*MainTask_MainTaskUpdatePush) XXX_MessageName() string {
	return "service.MainTask.MainTaskUpdatePush"
}

// 作弊设置当前主线任务为完成状态
type MainTask_CheatFinishMainTaskRequest struct {
}

func (m *MainTask_CheatFinishMainTaskRequest) Reset()      { *m = MainTask_CheatFinishMainTaskRequest{} }
func (*MainTask_CheatFinishMainTaskRequest) ProtoMessage() {}
func (*MainTask_CheatFinishMainTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 9}
}
func (m *MainTask_CheatFinishMainTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_CheatFinishMainTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_CheatFinishMainTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_CheatFinishMainTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_CheatFinishMainTaskRequest.Merge(m, src)
}
func (m *MainTask_CheatFinishMainTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_CheatFinishMainTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_CheatFinishMainTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_CheatFinishMainTaskRequest proto.InternalMessageInfo

func (*MainTask_CheatFinishMainTaskRequest) XXX_MessageName() string {
	return "service.MainTask.CheatFinishMainTaskRequest"
}

type MainTask_CheatFinishMainTaskResponse struct {
}

func (m *MainTask_CheatFinishMainTaskResponse) Reset()      { *m = MainTask_CheatFinishMainTaskResponse{} }
func (*MainTask_CheatFinishMainTaskResponse) ProtoMessage() {}
func (*MainTask_CheatFinishMainTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 10}
}
func (m *MainTask_CheatFinishMainTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_CheatFinishMainTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_CheatFinishMainTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_CheatFinishMainTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_CheatFinishMainTaskResponse.Merge(m, src)
}
func (m *MainTask_CheatFinishMainTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_CheatFinishMainTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_CheatFinishMainTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_CheatFinishMainTaskResponse proto.InternalMessageInfo

func (*MainTask_CheatFinishMainTaskResponse) XXX_MessageName() string {
	return "service.MainTask.CheatFinishMainTaskResponse"
}

type MainTask_CheatSetMainTaskRequest struct {
	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *MainTask_CheatSetMainTaskRequest) Reset()      { *m = MainTask_CheatSetMainTaskRequest{} }
func (*MainTask_CheatSetMainTaskRequest) ProtoMessage() {}
func (*MainTask_CheatSetMainTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 11}
}
func (m *MainTask_CheatSetMainTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_CheatSetMainTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_CheatSetMainTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_CheatSetMainTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_CheatSetMainTaskRequest.Merge(m, src)
}
func (m *MainTask_CheatSetMainTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_CheatSetMainTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_CheatSetMainTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_CheatSetMainTaskRequest proto.InternalMessageInfo

func (m *MainTask_CheatSetMainTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (*MainTask_CheatSetMainTaskRequest) XXX_MessageName() string {
	return "service.MainTask.CheatSetMainTaskRequest"
}

type MainTask_CheatSetMainTaskResponse struct {
}

func (m *MainTask_CheatSetMainTaskResponse) Reset()      { *m = MainTask_CheatSetMainTaskResponse{} }
func (*MainTask_CheatSetMainTaskResponse) ProtoMessage() {}
func (*MainTask_CheatSetMainTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 12}
}
func (m *MainTask_CheatSetMainTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_CheatSetMainTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_CheatSetMainTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_CheatSetMainTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_CheatSetMainTaskResponse.Merge(m, src)
}
func (m *MainTask_CheatSetMainTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_CheatSetMainTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_CheatSetMainTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_CheatSetMainTaskResponse proto.InternalMessageInfo

func (*MainTask_CheatSetMainTaskResponse) XXX_MessageName() string {
	return "service.MainTask.CheatSetMainTaskResponse"
}

// 作弊重置主线任务
type MainTask_CheatResetMainTaskRequest struct {
}

func (m *MainTask_CheatResetMainTaskRequest) Reset()      { *m = MainTask_CheatResetMainTaskRequest{} }
func (*MainTask_CheatResetMainTaskRequest) ProtoMessage() {}
func (*MainTask_CheatResetMainTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 13}
}
func (m *MainTask_CheatResetMainTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_CheatResetMainTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_CheatResetMainTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_CheatResetMainTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_CheatResetMainTaskRequest.Merge(m, src)
}
func (m *MainTask_CheatResetMainTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_CheatResetMainTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_CheatResetMainTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_CheatResetMainTaskRequest proto.InternalMessageInfo

func (*MainTask_CheatResetMainTaskRequest) XXX_MessageName() string {
	return "service.MainTask.CheatResetMainTaskRequest"
}

type MainTask_CheatResetMainTaskResponse struct {
}

func (m *MainTask_CheatResetMainTaskResponse) Reset()      { *m = MainTask_CheatResetMainTaskResponse{} }
func (*MainTask_CheatResetMainTaskResponse) ProtoMessage() {}
func (*MainTask_CheatResetMainTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff91101e23e00bee, []int{0, 14}
}
func (m *MainTask_CheatResetMainTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MainTask_CheatResetMainTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MainTask_CheatResetMainTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MainTask_CheatResetMainTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MainTask_CheatResetMainTaskResponse.Merge(m, src)
}
func (m *MainTask_CheatResetMainTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MainTask_CheatResetMainTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MainTask_CheatResetMainTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MainTask_CheatResetMainTaskResponse proto.InternalMessageInfo

func (*MainTask_CheatResetMainTaskResponse) XXX_MessageName() string {
	return "service.MainTask.CheatResetMainTaskResponse"
}
func init() {
	proto.RegisterEnum("service.MainTaskErrorCode", MainTaskErrorCode_name, MainTaskErrorCode_value)
	proto.RegisterType((*MainTask)(nil), "service.MainTask")
	proto.RegisterType((*MainTask_GetMainTaskRequest)(nil), "service.MainTask.GetMainTaskRequest")
	proto.RegisterType((*MainTask_GetMainTaskResponse)(nil), "service.MainTask.GetMainTaskResponse")
	proto.RegisterType((*MainTask_AcceptMainTaskRequest)(nil), "service.MainTask.AcceptMainTaskRequest")
	proto.RegisterType((*MainTask_AcceptMainTaskResponse)(nil), "service.MainTask.AcceptMainTaskResponse")
	proto.RegisterType((*MainTask_SubmitMainTaskRequest)(nil), "service.MainTask.SubmitMainTaskRequest")
	proto.RegisterType((*MainTask_SubmitMainTaskResponse)(nil), "service.MainTask.SubmitMainTaskResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.MainTask.SubmitMainTaskResponse.RewardsEntry")
	proto.RegisterType((*MainTask_GetChapterRewardRequest)(nil), "service.MainTask.GetChapterRewardRequest")
	proto.RegisterType((*MainTask_GetChapterRewardResponse)(nil), "service.MainTask.GetChapterRewardResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.MainTask.GetChapterRewardResponse.RewardsEntry")
	proto.RegisterType((*MainTask_MainTaskUpdatePush)(nil), "service.MainTask.MainTaskUpdatePush")
	proto.RegisterType((*MainTask_CheatFinishMainTaskRequest)(nil), "service.MainTask.CheatFinishMainTaskRequest")
	proto.RegisterType((*MainTask_CheatFinishMainTaskResponse)(nil), "service.MainTask.CheatFinishMainTaskResponse")
	proto.RegisterType((*MainTask_CheatSetMainTaskRequest)(nil), "service.MainTask.CheatSetMainTaskRequest")
	proto.RegisterType((*MainTask_CheatSetMainTaskResponse)(nil), "service.MainTask.CheatSetMainTaskResponse")
	proto.RegisterType((*MainTask_CheatResetMainTaskRequest)(nil), "service.MainTask.CheatResetMainTaskRequest")
	proto.RegisterType((*MainTask_CheatResetMainTaskResponse)(nil), "service.MainTask.CheatResetMainTaskResponse")
}

func init() { proto.RegisterFile("proto/service/main_task.proto", fileDescriptor_ff91101e23e00bee) }

var fileDescriptor_ff91101e23e00bee = []byte{
	// 806 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6b, 0x3b, 0x55,
	0x14, 0xcd, 0x24, 0xbf, 0x5f, 0xd3, 0xde, 0x0a, 0x4e, 0x5f, 0xf3, 0x31, 0xbe, 0xb6, 0x43, 0x10,
	0x17, 0x45, 0x68, 0x02, 0x29, 0xa5, 0x92, 0x42, 0x41, 0x43, 0x2c, 0x5d, 0x58, 0x35, 0xb5, 0x20,
	0x22, 0x94, 0xe9, 0xcc, 0xd3, 0x0c, 0x49, 0x66, 0xe2, 0xbc, 0x97, 0xda, 0xee, 0xb4, 0x82, 0x60,
	0x44, 0x53, 0x41, 0xaa, 0x8b, 0x2e, 0xfc, 0x2a, 0x56, 0x45, 0x44, 0x21, 0x58, 0x5a, 0xc4, 0x6d,
	0x97, 0x5d, 0x76, 0x23, 0x68, 0x92, 0x49, 0xd3, 0x9d, 0xff, 0x81, 0x32, 0x5f, 0x31, 0x99, 0x44,
	0xac, 0x8b, 0xee, 0xe6, 0xde, 0x7b, 0xce, 0x79, 0xf7, 0x9e, 0xbc, 0x77, 0x03, 0x73, 0x15, 0x43,
	0x67, 0x7a, 0x8a, 0x12, 0x63, 0x57, 0x95, 0x49, 0xaa, 0x2c, 0xa9, 0xda, 0x36, 0x93, 0x68, 0x31,
	0x69, 0xe7, 0x51, 0xd8, 0x2d, 0xe0, 0xb8, 0x83, 0x2b, 0xeb, 0x0a, 0x29, 0xd1, 0xd4, 0x8e, 0x44,
	0x89, 0x83, 0xc0, 0xb3, 0x03, 0x05, 0x1f, 0x1f, 0xc7, 0x7c, 0xb4, 0xd7, 0x9d, 0xfc, 0xe3, 0xad,
	0x09, 0x18, 0x7f, 0x4e, 0x52, 0xb5, 0x97, 0x24, 0x5a, 0xc4, 0x11, 0x40, 0x6b, 0x84, 0x79, 0x61,
	0x9e, 0xbc, 0x51, 0x25, 0x94, 0x61, 0x1d, 0xa6, 0x07, 0xb2, 0xb4, 0xa2, 0x6b, 0x94, 0xa0, 0x27,
	0xe0, 0x81, 0xa5, 0x2f, 0x70, 0x09, 0x6e, 0x7e, 0x32, 0xcd, 0x27, 0x1d, 0xe9, 0x64, 0x0f, 0x67,
	0x57, 0x51, 0x1a, 0xc6, 0x5f, 0x53, 0x35, 0x95, 0x16, 0x88, 0x22, 0x04, 0x6d, 0x64, 0xcc, 0x8f,
	0x7c, 0xd6, 0xae, 0xe7, 0x7b, 0x38, 0x5c, 0x85, 0xe8, 0xd3, 0xb2, 0x4c, 0x2a, 0xfe, 0x4e, 0x32,
	0xaf, 0x1e, 0x34, 0x84, 0x97, 0x61, 0xc2, 0x9a, 0x6d, 0xc1, 0x56, 0x9f, 0xce, 0x19, 0x86, 0x07,
	0x72, 0x28, 0x44, 0x41, 0x89, 0xbe, 0xe4, 0x26, 0x93, 0x58, 0x95, 0xae, 0xd3, 0x0d, 0x9d, 0x6d,
	0x69, 0x3d, 0x44, 0xa4, 0x0f, 0x61, 0x57, 0x4a, 0xba, 0x5c, 0xc4, 0xab, 0x10, 0xf3, 0x1f, 0xfb,
	0x7f, 0x46, 0xc5, 0x25, 0x88, 0x6e, 0x56, 0x77, 0xca, 0xaa, 0xbf, 0x6d, 0x14, 0x83, 0x31, 0xb9,
	0xa0, 0xeb, 0x94, 0xd8, 0x02, 0xa1, 0xbc, 0x1b, 0x65, 0x56, 0x0e, 0x1a, 0xc2, 0x72, 0xff, 0x38,
	0xd1, 0xbe, 0xbe, 0xb6, 0x34, 0xcf, 0x8f, 0x81, 0x29, 0x37, 0x74, 0x96, 0xdb, 0x53, 0x29, 0xc3,
	0x7f, 0x71, 0x10, 0xf3, 0x1f, 0x77, 0xdf, 0xbf, 0x0c, 0x7a, 0x1e, 0xc2, 0x06, 0x79, 0x53, 0x32,
	0x14, 0x2a, 0x84, 0x12, 0xa1, 0xf9, 0xc9, 0xf4, 0x52, 0xd2, 0xbd, 0x97, 0x3d, 0x4e, 0x72, 0x74,
	0x53, 0xc9, 0xbc, 0xc3, 0xcb, 0x69, 0xcc, 0xd8, 0xcf, 0x7b, 0x2a, 0x38, 0x03, 0x8f, 0xf4, 0x17,
	0x10, 0x0f, 0xa1, 0x22, 0xd9, 0x77, 0x7d, 0xb2, 0x3e, 0x51, 0x04, 0x1e, 0xee, 0x4a, 0xa5, 0x2a,
	0xb1, 0x7b, 0x0c, 0xe5, 0x9d, 0x20, 0x13, 0x7c, 0x8a, 0xc3, 0x39, 0x88, 0xaf, 0x11, 0x96, 0x2d,
	0x48, 0x15, 0x46, 0x0c, 0x47, 0xc5, 0x73, 0x5c, 0x80, 0xb0, 0xec, 0xe4, 0x5d, 0x29, 0x2f, 0xb4,
	0x0e, 0x50, 0x95, 0x3d, 0x57, 0xcc, 0xfa, 0xc4, 0xbf, 0x71, 0x20, 0x0c, 0xeb, 0xb8, 0x56, 0xf6,
	0x9b, 0xc4, 0xdd, 0xd1, 0xa4, 0x17, 0xff, 0x31, 0x29, 0x68, 0x9b, 0xb4, 0x3c, 0x6c, 0xd2, 0xbf,
	0x1d, 0x78, 0x0f, 0x36, 0x65, 0x00, 0xf5, 0xee, 0x54, 0x45, 0x91, 0x18, 0x79, 0xa1, 0x4a, 0x0b,
	0x77, 0xbc, 0xd2, 0xb3, 0x80, 0xb3, 0x05, 0x22, 0x31, 0x67, 0x46, 0xff, 0x62, 0x98, 0x83, 0x99,
	0x91, 0x55, 0x67, 0x14, 0x9c, 0x86, 0xb8, 0x5d, 0xde, 0x1c, 0x5a, 0x29, 0x28, 0x0e, 0x61, 0x4b,
	0x7f, 0x5b, 0x55, 0xbc, 0x27, 0x61, 0x85, 0xeb, 0x0a, 0xc6, 0x20, 0x0c, 0x73, 0x5c, 0xbd, 0x19,
	0x78, 0xcc, 0xae, 0xe5, 0x09, 0x1d, 0x5e, 0x52, 0x5e, 0xa7, 0xbe, 0xa2, 0x43, 0x7d, 0xf2, 0xa3,
	0x10, 0x4c, 0x79, 0xc9, 0x9c, 0x61, 0xe8, 0x46, 0x56, 0x57, 0x08, 0x5a, 0x84, 0xd1, 0x0f, 0x8e,
	0x0f, 0x60, 0xa1, 0xd6, 0x10, 0x22, 0x08, 0xb5, 0x2f, 0x2e, 0xcc, 0xda, 0xe7, 0xed, 0xb3, 0x0f,
	0xba, 0xef, 0xfc, 0xd2, 0xa9, 0x1f, 0xb6, 0xcf, 0xbf, 0x42, 0xab, 0xf0, 0x9f, 0xfb, 0x85, 0xe7,
	0x86, 0xf8, 0x66, 0xfd, 0x87, 0xce, 0x87, 0x27, 0x66, 0xfd, 0x13, 0x94, 0x84, 0x51, 0x4b, 0x8b,
	0x0f, 0xe2, 0x68, 0xad, 0x21, 0x4c, 0xa1, 0x47, 0x1d, 0x8a, 0xf9, 0xf3, 0x4f, 0x2e, 0x7e, 0x09,
	0x46, 0x6e, 0x2b, 0x3e, 0x84, 0x67, 0x6a, 0x0d, 0x21, 0x8e, 0xa2, 0xed, 0xb3, 0x8b, 0x9b, 0xf3,
	0x5f, 0x1d, 0x5a, 0xe7, 0xf8, 0xdb, 0xee, 0xd7, 0x5f, 0xde, 0x7e, 0xfc, 0x36, 0x5a, 0x81, 0x78,
	0xce, 0x30, 0x06, 0xee, 0x58, 0x56, 0xd2, 0xd8, 0x1a, 0x61, 0xfc, 0x03, 0x2c, 0xd6, 0x1a, 0x02,
	0x46, 0xc2, 0xcd, 0x77, 0x9f, 0x75, 0x6b, 0x07, 0xe6, 0xc9, 0x91, 0x59, 0xfb, 0xd1, 0x99, 0xf1,
	0xf6, 0x8b, 0x77, 0xcd, 0xfa, 0x91, 0xcf, 0x18, 0x8b, 0x97, 0xb5, 0x37, 0x16, 0xff, 0x70, 0x94,
	0x31, 0xb7, 0x6f, 0xbd, 0xd7, 0x79, 0xff, 0x1b, 0xdf, 0x60, 0xde, 0x9e, 0xe2, 0xc7, 0x06, 0x07,
	0xb3, 0xbc, 0xf8, 0xfe, 0x53, 0xf3, 0xf8, 0xf4, 0x99, 0x8d, 0xeb, 0x3f, 0xc4, 0xc0, 0x69, 0x53,
	0xe4, 0x2e, 0x9b, 0x22, 0x77, 0xd5, 0x14, 0xb9, 0xdf, 0x9b, 0x22, 0xd7, 0x6d, 0x8a, 0x81, 0x3f,
	0x9b, 0x22, 0x77, 0xd8, 0x12, 0x03, 0x97, 0x2d, 0x91, 0xbb, 0x6a, 0x89, 0x81, 0xeb, 0x96, 0x18,
	0x78, 0x25, 0x21, 0xeb, 0xaa, 0xb6, 0x60, 0xbd, 0x23, 0x62, 0xa4, 0x64, 0xbd, 0x5c, 0xd6, 0xb5,
	0xd4, 0xc0, 0x3f, 0xe6, 0xce, 0x98, 0x1d, 0x2e, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xed, 0x0f,
	0xc4, 0xf9, 0x49, 0x07, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_GetMainTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_GetMainTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_AcceptMainTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_AcceptMainTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_SubmitMainTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_SubmitMainTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_GetChapterRewardRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_GetChapterRewardResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_MainTaskUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_CheatFinishMainTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_CheatFinishMainTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_CheatSetMainTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_CheatSetMainTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_CheatResetMainTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMainTask_CheatResetMainTaskResponse.Get().(proto.Message)
	})
}

var poolMainTask = &sync.Pool{New: func() interface{} { return &MainTask{} }}

func (m *MainTask) ReleasePool() { m.Reset(); poolMainTask.Put(m); m = nil }

var poolMainTask_GetMainTaskRequest = &sync.Pool{New: func() interface{} { return &MainTask_GetMainTaskRequest{} }}

func (m *MainTask_GetMainTaskRequest) ReleasePool() {
	m.Reset()
	poolMainTask_GetMainTaskRequest.Put(m)
	m = nil
}

var poolMainTask_GetMainTaskResponse = &sync.Pool{New: func() interface{} { return &MainTask_GetMainTaskResponse{} }}

func (m *MainTask_GetMainTaskResponse) ReleasePool() {
	m.Reset()
	poolMainTask_GetMainTaskResponse.Put(m)
	m = nil
}

var poolMainTask_AcceptMainTaskRequest = &sync.Pool{New: func() interface{} { return &MainTask_AcceptMainTaskRequest{} }}

func (m *MainTask_AcceptMainTaskRequest) ReleasePool() {
	m.Reset()
	poolMainTask_AcceptMainTaskRequest.Put(m)
	m = nil
}

var poolMainTask_AcceptMainTaskResponse = &sync.Pool{New: func() interface{} { return &MainTask_AcceptMainTaskResponse{} }}

func (m *MainTask_AcceptMainTaskResponse) ReleasePool() {
	m.Reset()
	poolMainTask_AcceptMainTaskResponse.Put(m)
	m = nil
}

var poolMainTask_SubmitMainTaskRequest = &sync.Pool{New: func() interface{} { return &MainTask_SubmitMainTaskRequest{} }}

func (m *MainTask_SubmitMainTaskRequest) ReleasePool() {
	m.Reset()
	poolMainTask_SubmitMainTaskRequest.Put(m)
	m = nil
}

var poolMainTask_SubmitMainTaskResponse = &sync.Pool{New: func() interface{} { return &MainTask_SubmitMainTaskResponse{} }}

func (m *MainTask_SubmitMainTaskResponse) ReleasePool() {
	m.Reset()
	poolMainTask_SubmitMainTaskResponse.Put(m)
	m = nil
}

var poolMainTask_GetChapterRewardRequest = &sync.Pool{New: func() interface{} { return &MainTask_GetChapterRewardRequest{} }}

func (m *MainTask_GetChapterRewardRequest) ReleasePool() {
	m.Reset()
	poolMainTask_GetChapterRewardRequest.Put(m)
	m = nil
}

var poolMainTask_GetChapterRewardResponse = &sync.Pool{New: func() interface{} { return &MainTask_GetChapterRewardResponse{} }}

func (m *MainTask_GetChapterRewardResponse) ReleasePool() {
	m.Reset()
	poolMainTask_GetChapterRewardResponse.Put(m)
	m = nil
}

var poolMainTask_MainTaskUpdatePush = &sync.Pool{New: func() interface{} { return &MainTask_MainTaskUpdatePush{} }}

func (m *MainTask_MainTaskUpdatePush) ReleasePool() {
	m.Reset()
	poolMainTask_MainTaskUpdatePush.Put(m)
	m = nil
}

var poolMainTask_CheatFinishMainTaskRequest = &sync.Pool{New: func() interface{} { return &MainTask_CheatFinishMainTaskRequest{} }}

func (m *MainTask_CheatFinishMainTaskRequest) ReleasePool() {
	m.Reset()
	poolMainTask_CheatFinishMainTaskRequest.Put(m)
	m = nil
}

var poolMainTask_CheatFinishMainTaskResponse = &sync.Pool{New: func() interface{} { return &MainTask_CheatFinishMainTaskResponse{} }}

func (m *MainTask_CheatFinishMainTaskResponse) ReleasePool() {
	m.Reset()
	poolMainTask_CheatFinishMainTaskResponse.Put(m)
	m = nil
}

var poolMainTask_CheatSetMainTaskRequest = &sync.Pool{New: func() interface{} { return &MainTask_CheatSetMainTaskRequest{} }}

func (m *MainTask_CheatSetMainTaskRequest) ReleasePool() {
	m.Reset()
	poolMainTask_CheatSetMainTaskRequest.Put(m)
	m = nil
}

var poolMainTask_CheatSetMainTaskResponse = &sync.Pool{New: func() interface{} { return &MainTask_CheatSetMainTaskResponse{} }}

func (m *MainTask_CheatSetMainTaskResponse) ReleasePool() {
	m.Reset()
	poolMainTask_CheatSetMainTaskResponse.Put(m)
	m = nil
}

var poolMainTask_CheatResetMainTaskRequest = &sync.Pool{New: func() interface{} { return &MainTask_CheatResetMainTaskRequest{} }}

func (m *MainTask_CheatResetMainTaskRequest) ReleasePool() {
	m.Reset()
	poolMainTask_CheatResetMainTaskRequest.Put(m)
	m = nil
}

var poolMainTask_CheatResetMainTaskResponse = &sync.Pool{New: func() interface{} { return &MainTask_CheatResetMainTaskResponse{} }}

func (m *MainTask_CheatResetMainTaskResponse) ReleasePool() {
	m.Reset()
	poolMainTask_CheatResetMainTaskResponse.Put(m)
	m = nil
}
func (x MainTaskErrorCode) String() string {
	s, ok := MainTaskErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MainTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask)
	if !ok {
		that2, ok := that.(MainTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MainTask_GetMainTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_GetMainTaskRequest)
	if !ok {
		that2, ok := that.(MainTask_GetMainTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MainTask_GetMainTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_GetMainTaskResponse)
	if !ok {
		that2, ok := that.(MainTask_GetMainTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	if !this.Finished.Equal(that1.Finished) {
		return false
	}
	return true
}
func (this *MainTask_AcceptMainTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_AcceptMainTaskRequest)
	if !ok {
		that2, ok := that.(MainTask_AcceptMainTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MainTask_AcceptMainTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_AcceptMainTaskResponse)
	if !ok {
		that2, ok := that.(MainTask_AcceptMainTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *MainTask_SubmitMainTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_SubmitMainTaskRequest)
	if !ok {
		that2, ok := that.(MainTask_SubmitMainTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Choose != that1.Choose {
		return false
	}
	return true
}
func (this *MainTask_SubmitMainTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_SubmitMainTaskResponse)
	if !ok {
		that2, ok := that.(MainTask_SubmitMainTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	if !this.Finished.Equal(that1.Finished) {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *MainTask_GetChapterRewardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_GetChapterRewardRequest)
	if !ok {
		that2, ok := that.(MainTask_GetChapterRewardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Chapter != that1.Chapter {
		return false
	}
	if this.Idx != that1.Idx {
		return false
	}
	return true
}
func (this *MainTask_GetChapterRewardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_GetChapterRewardResponse)
	if !ok {
		that2, ok := that.(MainTask_GetChapterRewardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Finished.Equal(that1.Finished) {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *MainTask_MainTaskUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_MainTaskUpdatePush)
	if !ok {
		that2, ok := that.(MainTask_MainTaskUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *MainTask_CheatFinishMainTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_CheatFinishMainTaskRequest)
	if !ok {
		that2, ok := that.(MainTask_CheatFinishMainTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MainTask_CheatFinishMainTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_CheatFinishMainTaskResponse)
	if !ok {
		that2, ok := that.(MainTask_CheatFinishMainTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MainTask_CheatSetMainTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_CheatSetMainTaskRequest)
	if !ok {
		that2, ok := that.(MainTask_CheatSetMainTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *MainTask_CheatSetMainTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_CheatSetMainTaskResponse)
	if !ok {
		that2, ok := that.(MainTask_CheatSetMainTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MainTask_CheatResetMainTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_CheatResetMainTaskRequest)
	if !ok {
		that2, ok := that.(MainTask_CheatResetMainTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MainTask_CheatResetMainTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MainTask_CheatResetMainTaskResponse)
	if !ok {
		that2, ok := that.(MainTask_CheatResetMainTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *MainTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MainTask_GetMainTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_GetMainTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_GetMainTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MainTask_GetMainTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_GetMainTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_GetMainTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Finished != nil {
		{
			size, err := m.Finished.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMainTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMainTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MainTask_AcceptMainTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_AcceptMainTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_AcceptMainTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MainTask_AcceptMainTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_AcceptMainTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_AcceptMainTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMainTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MainTask_SubmitMainTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_SubmitMainTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_SubmitMainTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choose != 0 {
		i = encodeVarintMainTask(dAtA, i, uint64(m.Choose))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MainTask_SubmitMainTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_SubmitMainTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_SubmitMainTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintMainTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMainTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMainTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Finished != nil {
		{
			size, err := m.Finished.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMainTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMainTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MainTask_GetChapterRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_GetChapterRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_GetChapterRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Idx != 0 {
		i = encodeVarintMainTask(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x10
	}
	if m.Chapter != 0 {
		i = encodeVarintMainTask(dAtA, i, uint64(m.Chapter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MainTask_GetChapterRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_GetChapterRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_GetChapterRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintMainTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMainTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMainTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Finished != nil {
		{
			size, err := m.Finished.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMainTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MainTask_MainTaskUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_MainTaskUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_MainTaskUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMainTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MainTask_CheatFinishMainTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_CheatFinishMainTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_CheatFinishMainTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MainTask_CheatFinishMainTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_CheatFinishMainTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_CheatFinishMainTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MainTask_CheatSetMainTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_CheatSetMainTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_CheatSetMainTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintMainTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MainTask_CheatSetMainTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_CheatSetMainTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_CheatSetMainTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MainTask_CheatResetMainTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_CheatResetMainTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_CheatResetMainTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MainTask_CheatResetMainTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MainTask_CheatResetMainTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MainTask_CheatResetMainTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMainTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovMainTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MainTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MainTask_GetMainTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MainTask_GetMainTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("finished")
	w.RawByte('"')
	w.RawByte(':')
	m.Finished.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MainTask_AcceptMainTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MainTask_AcceptMainTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MainTask_SubmitMainTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Choose != 0 {
		w.RawByte('"')
		w.RawString("choose")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Choose))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MainTask_SubmitMainTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("finished")
	w.RawByte('"')
	w.RawByte(':')
	m.Finished.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MainTask_GetChapterRewardRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Chapter != 0 {
		w.RawByte('"')
		w.RawString("chapter")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Chapter))
		needWriteComma = true
	}
	if m.Idx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Idx))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MainTask_GetChapterRewardResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("finished")
	w.RawByte('"')
	w.RawByte(':')
	m.Finished.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MainTask_MainTaskUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MainTask_CheatFinishMainTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MainTask_CheatFinishMainTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MainTask_CheatSetMainTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MainTask_CheatSetMainTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MainTask_CheatResetMainTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MainTask_CheatResetMainTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MainTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask) GoString() string {
	return m.String()
}

func (m *MainTask_GetMainTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_GetMainTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_GetMainTaskRequest) GoString() string {
	return m.String()
}

func (m *MainTask_GetMainTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_GetMainTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_GetMainTaskResponse) GoString() string {
	return m.String()
}

func (m *MainTask_AcceptMainTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_AcceptMainTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_AcceptMainTaskRequest) GoString() string {
	return m.String()
}

func (m *MainTask_AcceptMainTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_AcceptMainTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_AcceptMainTaskResponse) GoString() string {
	return m.String()
}

func (m *MainTask_SubmitMainTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_SubmitMainTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_SubmitMainTaskRequest) GoString() string {
	return m.String()
}

func (m *MainTask_SubmitMainTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_SubmitMainTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_SubmitMainTaskResponse) GoString() string {
	return m.String()
}

func (m *MainTask_GetChapterRewardRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_GetChapterRewardRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_GetChapterRewardRequest) GoString() string {
	return m.String()
}

func (m *MainTask_GetChapterRewardResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_GetChapterRewardResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_GetChapterRewardResponse) GoString() string {
	return m.String()
}

func (m *MainTask_MainTaskUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_MainTaskUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_MainTaskUpdatePush) GoString() string {
	return m.String()
}

func (m *MainTask_CheatFinishMainTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_CheatFinishMainTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_CheatFinishMainTaskRequest) GoString() string {
	return m.String()
}

func (m *MainTask_CheatFinishMainTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_CheatFinishMainTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_CheatFinishMainTaskResponse) GoString() string {
	return m.String()
}

func (m *MainTask_CheatSetMainTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_CheatSetMainTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_CheatSetMainTaskRequest) GoString() string {
	return m.String()
}

func (m *MainTask_CheatSetMainTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_CheatSetMainTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_CheatSetMainTaskResponse) GoString() string {
	return m.String()
}

func (m *MainTask_CheatResetMainTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_CheatResetMainTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_CheatResetMainTaskRequest) GoString() string {
	return m.String()
}

func (m *MainTask_CheatResetMainTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MainTask_CheatResetMainTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MainTask_CheatResetMainTaskResponse) GoString() string {
	return m.String()
}

func (m *MainTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MainTask_GetMainTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MainTask_GetMainTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovMainTask(uint64(l))
	}
	if m.Finished != nil {
		l = m.Finished.Size()
		n += 1 + l + sovMainTask(uint64(l))
	}
	return n
}

func (m *MainTask_AcceptMainTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MainTask_AcceptMainTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovMainTask(uint64(l))
	}
	return n
}

func (m *MainTask_SubmitMainTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choose != 0 {
		n += 1 + sovMainTask(uint64(m.Choose))
	}
	return n
}

func (m *MainTask_SubmitMainTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovMainTask(uint64(l))
	}
	if m.Finished != nil {
		l = m.Finished.Size()
		n += 1 + l + sovMainTask(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMainTask(uint64(k)) + 1 + sovMainTask(uint64(v))
			n += mapEntrySize + 1 + sovMainTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MainTask_GetChapterRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chapter != 0 {
		n += 1 + sovMainTask(uint64(m.Chapter))
	}
	if m.Idx != 0 {
		n += 1 + sovMainTask(uint64(m.Idx))
	}
	return n
}

func (m *MainTask_GetChapterRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Finished != nil {
		l = m.Finished.Size()
		n += 1 + l + sovMainTask(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMainTask(uint64(k)) + 1 + sovMainTask(uint64(v))
			n += mapEntrySize + 1 + sovMainTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MainTask_MainTaskUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovMainTask(uint64(l))
	}
	return n
}

func (m *MainTask_CheatFinishMainTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MainTask_CheatFinishMainTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MainTask_CheatSetMainTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovMainTask(uint64(m.TaskId))
	}
	return n
}

func (m *MainTask_CheatSetMainTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MainTask_CheatResetMainTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MainTask_CheatResetMainTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMainTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMainTask(x uint64) (n int) {
	return sovMainTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MainTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_GetMainTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMainTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMainTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_GetMainTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMainTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMainTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.MainTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finished == nil {
				m.Finished = &models.MainTaskFinish{}
			}
			if err := m.Finished.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_AcceptMainTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptMainTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptMainTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_AcceptMainTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptMainTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptMainTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.MainTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_SubmitMainTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitMainTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitMainTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choose", wireType)
			}
			m.Choose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Choose |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_SubmitMainTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitMainTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitMainTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.MainTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finished == nil {
				m.Finished = &models.MainTaskFinish{}
			}
			if err := m.Finished.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMainTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMainTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMainTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMainTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMainTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_GetChapterRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChapterRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChapterRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chapter", wireType)
			}
			m.Chapter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chapter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_GetChapterRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChapterRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChapterRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finished == nil {
				m.Finished = &models.MainTaskFinish{}
			}
			if err := m.Finished.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMainTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMainTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMainTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMainTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMainTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_MainTaskUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainTaskUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainTaskUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMainTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMainTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.MainTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_CheatFinishMainTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatFinishMainTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatFinishMainTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_CheatFinishMainTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatFinishMainTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatFinishMainTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_CheatSetMainTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSetMainTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSetMainTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_CheatSetMainTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatSetMainTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatSetMainTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_CheatResetMainTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatResetMainTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatResetMainTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MainTask_CheatResetMainTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatResetMainTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatResetMainTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMainTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMainTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMainTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMainTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMainTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMainTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMainTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMainTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMainTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMainTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMainTask = fmt.Errorf("proto: unexpected end of group")
)
