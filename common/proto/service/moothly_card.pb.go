// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/moothly_card.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MoonthlyCardErrorCode int32

const (
	MoonthlyCardErrorCode_ErrMoonthlyCardSystem         MoonthlyCardErrorCode = 0
	MoonthlyCardErrorCode_ErrMoonthlyCardNotData        MoonthlyCardErrorCode = 1
	MoonthlyCardErrorCode_ErrMoonthlyCardConfig         MoonthlyCardErrorCode = 2
	MoonthlyCardErrorCode_ErrMoonthlyCardNoStart        MoonthlyCardErrorCode = 3
	MoonthlyCardErrorCode_ErrMoonthlyCardTimeOver       MoonthlyCardErrorCode = 4
	MoonthlyCardErrorCode_ErrMoonthlyCardNoReward       MoonthlyCardErrorCode = 5
	MoonthlyCardErrorCode_ErrMoonthlyCardReceived       MoonthlyCardErrorCode = 6
	MoonthlyCardErrorCode_ErrMoonthlyCardNotComplete    MoonthlyCardErrorCode = 7
	MoonthlyCardErrorCode_ErrMoonthlyCardNotPurchase    MoonthlyCardErrorCode = 8
	MoonthlyCardErrorCode_ErrMoonthlyCardPurchaseType   MoonthlyCardErrorCode = 9
	MoonthlyCardErrorCode_ErrMoonthlyCardPurchaseNumber MoonthlyCardErrorCode = 10
	MoonthlyCardErrorCode_ErrMoonthlyCardNoCard         MoonthlyCardErrorCode = 11
)

var MoonthlyCardErrorCode_name = map[int32]string{
	0:  "ErrMoonthlyCardSystem",
	1:  "ErrMoonthlyCardNotData",
	2:  "ErrMoonthlyCardConfig",
	3:  "ErrMoonthlyCardNoStart",
	4:  "ErrMoonthlyCardTimeOver",
	5:  "ErrMoonthlyCardNoReward",
	6:  "ErrMoonthlyCardReceived",
	7:  "ErrMoonthlyCardNotComplete",
	8:  "ErrMoonthlyCardNotPurchase",
	9:  "ErrMoonthlyCardPurchaseType",
	10: "ErrMoonthlyCardPurchaseNumber",
	11: "ErrMoonthlyCardNoCard",
}

var MoonthlyCardErrorCode_value = map[string]int32{
	"ErrMoonthlyCardSystem":         0,
	"ErrMoonthlyCardNotData":        1,
	"ErrMoonthlyCardConfig":         2,
	"ErrMoonthlyCardNoStart":        3,
	"ErrMoonthlyCardTimeOver":       4,
	"ErrMoonthlyCardNoReward":       5,
	"ErrMoonthlyCardReceived":       6,
	"ErrMoonthlyCardNotComplete":    7,
	"ErrMoonthlyCardNotPurchase":    8,
	"ErrMoonthlyCardPurchaseType":   9,
	"ErrMoonthlyCardPurchaseNumber": 10,
	"ErrMoonthlyCardNoCard":         11,
}

func (MoonthlyCardErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0}
}

type MoonthlyCard struct {
}

func (m *MoonthlyCard) Reset()      { *m = MoonthlyCard{} }
func (*MoonthlyCard) ProtoMessage() {}
func (*MoonthlyCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0}
}
func (m *MoonthlyCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard.Merge(m, src)
}
func (m *MoonthlyCard) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard proto.InternalMessageInfo

func (*MoonthlyCard) XXX_MessageName() string {
	return "service.MoonthlyCard"
}

// 活动进程更新
type MoonthlyCard_MoonthlyCardProgressPush struct {
	Progress map[int64]*models.MoonthlyCardProgress `protobuf:"bytes,1,rep,name=progress,proto3" json:"progress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MoonthlyCard_MoonthlyCardProgressPush) Reset()      { *m = MoonthlyCard_MoonthlyCardProgressPush{} }
func (*MoonthlyCard_MoonthlyCardProgressPush) ProtoMessage() {}
func (*MoonthlyCard_MoonthlyCardProgressPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 0}
}
func (m *MoonthlyCard_MoonthlyCardProgressPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MoonthlyCardProgressPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MoonthlyCardProgressPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MoonthlyCardProgressPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardProgressPush.Merge(m, src)
}
func (m *MoonthlyCard_MoonthlyCardProgressPush) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MoonthlyCardProgressPush) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardProgressPush.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MoonthlyCardProgressPush proto.InternalMessageInfo

func (m *MoonthlyCard_MoonthlyCardProgressPush) GetProgress() map[int64]*models.MoonthlyCardProgress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (*MoonthlyCard_MoonthlyCardProgressPush) XXX_MessageName() string {
	return "service.MoonthlyCard.MoonthlyCardProgressPush"
}

// 获取月卡情况
type MoonthlyCard_MoonthlyCardInfoRequest struct {
}

func (m *MoonthlyCard_MoonthlyCardInfoRequest) Reset()      { *m = MoonthlyCard_MoonthlyCardInfoRequest{} }
func (*MoonthlyCard_MoonthlyCardInfoRequest) ProtoMessage() {}
func (*MoonthlyCard_MoonthlyCardInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 1}
}
func (m *MoonthlyCard_MoonthlyCardInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MoonthlyCardInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MoonthlyCardInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MoonthlyCardInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardInfoRequest.Merge(m, src)
}
func (m *MoonthlyCard_MoonthlyCardInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MoonthlyCardInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MoonthlyCardInfoRequest proto.InternalMessageInfo

func (*MoonthlyCard_MoonthlyCardInfoRequest) XXX_MessageName() string {
	return "service.MoonthlyCard.MoonthlyCardInfoRequest"
}

type MoonthlyCard_MoonthlyCardInfoResponse struct {
	Infos map[int64]*models.MoonthlyCardActivityInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MoonthlyCard_MoonthlyCardInfoResponse) Reset()      { *m = MoonthlyCard_MoonthlyCardInfoResponse{} }
func (*MoonthlyCard_MoonthlyCardInfoResponse) ProtoMessage() {}
func (*MoonthlyCard_MoonthlyCardInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 2}
}
func (m *MoonthlyCard_MoonthlyCardInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MoonthlyCardInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MoonthlyCardInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MoonthlyCardInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardInfoResponse.Merge(m, src)
}
func (m *MoonthlyCard_MoonthlyCardInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MoonthlyCardInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MoonthlyCardInfoResponse proto.InternalMessageInfo

func (m *MoonthlyCard_MoonthlyCardInfoResponse) GetInfos() map[int64]*models.MoonthlyCardActivityInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (*MoonthlyCard_MoonthlyCardInfoResponse) XXX_MessageName() string {
	return "service.MoonthlyCard.MoonthlyCardInfoResponse"
}

// 购买月卡
type MoonthlyCard_MoonthlyCardBuyRequest struct {
	Id         int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       models.MoonthlyCardType `protobuf:"varint,2,opt,name=type,proto3,enum=models.MoonthlyCardType" json:"type,omitempty"`
	Number     int64                   `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	ActivityId int64                   `protobuf:"varint,4,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ExpireTime int64                   `protobuf:"varint,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	IsSpecial  bool                    `protobuf:"varint,6,opt,name=is_special,json=isSpecial,proto3" json:"is_special,omitempty"`
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) Reset()      { *m = MoonthlyCard_MoonthlyCardBuyRequest{} }
func (*MoonthlyCard_MoonthlyCardBuyRequest) ProtoMessage() {}
func (*MoonthlyCard_MoonthlyCardBuyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 3}
}
func (m *MoonthlyCard_MoonthlyCardBuyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MoonthlyCardBuyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MoonthlyCardBuyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MoonthlyCardBuyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardBuyRequest.Merge(m, src)
}
func (m *MoonthlyCard_MoonthlyCardBuyRequest) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MoonthlyCardBuyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardBuyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MoonthlyCardBuyRequest proto.InternalMessageInfo

func (m *MoonthlyCard_MoonthlyCardBuyRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) GetType() models.MoonthlyCardType {
	if m != nil {
		return m.Type
	}
	return models.MoonthlyCardType_Free
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) GetIsSpecial() bool {
	if m != nil {
		return m.IsSpecial
	}
	return false
}

func (*MoonthlyCard_MoonthlyCardBuyRequest) XXX_MessageName() string {
	return "service.MoonthlyCard.MoonthlyCardBuyRequest"
}

type MoonthlyCard_MoonthlyCardBuyResponse struct {
	Info *models.MoonthlyCardActivityInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *MoonthlyCard_MoonthlyCardBuyResponse) Reset()      { *m = MoonthlyCard_MoonthlyCardBuyResponse{} }
func (*MoonthlyCard_MoonthlyCardBuyResponse) ProtoMessage() {}
func (*MoonthlyCard_MoonthlyCardBuyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 4}
}
func (m *MoonthlyCard_MoonthlyCardBuyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MoonthlyCardBuyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MoonthlyCardBuyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MoonthlyCardBuyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardBuyResponse.Merge(m, src)
}
func (m *MoonthlyCard_MoonthlyCardBuyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MoonthlyCardBuyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardBuyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MoonthlyCardBuyResponse proto.InternalMessageInfo

func (m *MoonthlyCard_MoonthlyCardBuyResponse) GetInfo() *models.MoonthlyCardActivityInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*MoonthlyCard_MoonthlyCardBuyResponse) XXX_MessageName() string {
	return "service.MoonthlyCard.MoonthlyCardBuyResponse"
}

// 领取月卡
type MoonthlyCard_MoonthlyCardReceiveRequest struct {
	Id         int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId int64 `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
}

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) Reset() {
	*m = MoonthlyCard_MoonthlyCardReceiveRequest{}
}
func (*MoonthlyCard_MoonthlyCardReceiveRequest) ProtoMessage() {}
func (*MoonthlyCard_MoonthlyCardReceiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 5}
}
func (m *MoonthlyCard_MoonthlyCardReceiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MoonthlyCardReceiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MoonthlyCardReceiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MoonthlyCardReceiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardReceiveRequest.Merge(m, src)
}
func (m *MoonthlyCard_MoonthlyCardReceiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MoonthlyCardReceiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardReceiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MoonthlyCardReceiveRequest proto.InternalMessageInfo

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (*MoonthlyCard_MoonthlyCardReceiveRequest) XXX_MessageName() string {
	return "service.MoonthlyCard.MoonthlyCardReceiveRequest"
}

type MoonthlyCard_MoonthlyCardReceiveResponse struct {
	Info  *models.MoonthlyCardInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Items []*models.Item           `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) Reset() {
	*m = MoonthlyCard_MoonthlyCardReceiveResponse{}
}
func (*MoonthlyCard_MoonthlyCardReceiveResponse) ProtoMessage() {}
func (*MoonthlyCard_MoonthlyCardReceiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 6}
}
func (m *MoonthlyCard_MoonthlyCardReceiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MoonthlyCardReceiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MoonthlyCardReceiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MoonthlyCardReceiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardReceiveResponse.Merge(m, src)
}
func (m *MoonthlyCard_MoonthlyCardReceiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MoonthlyCardReceiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardReceiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MoonthlyCardReceiveResponse proto.InternalMessageInfo

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) GetInfo() *models.MoonthlyCardInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*MoonthlyCard_MoonthlyCardReceiveResponse) XXX_MessageName() string {
	return "service.MoonthlyCard.MoonthlyCardReceiveResponse"
}

// 获取配置
type MoonthlyCard_MoonthlyCardCnfRequest struct {
}

func (m *MoonthlyCard_MoonthlyCardCnfRequest) Reset()      { *m = MoonthlyCard_MoonthlyCardCnfRequest{} }
func (*MoonthlyCard_MoonthlyCardCnfRequest) ProtoMessage() {}
func (*MoonthlyCard_MoonthlyCardCnfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 7}
}
func (m *MoonthlyCard_MoonthlyCardCnfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MoonthlyCardCnfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MoonthlyCardCnfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MoonthlyCardCnfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardCnfRequest.Merge(m, src)
}
func (m *MoonthlyCard_MoonthlyCardCnfRequest) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MoonthlyCardCnfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardCnfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MoonthlyCardCnfRequest proto.InternalMessageInfo

func (*MoonthlyCard_MoonthlyCardCnfRequest) XXX_MessageName() string {
	return "service.MoonthlyCard.MoonthlyCardCnfRequest"
}

type MoonthlyCard_MoonthlyCardCnfResponse struct {
	Cnf []*models.MoonthlyCardCnf `protobuf:"bytes,1,rep,name=cnf,proto3" json:"cnf,omitempty"`
}

func (m *MoonthlyCard_MoonthlyCardCnfResponse) Reset()      { *m = MoonthlyCard_MoonthlyCardCnfResponse{} }
func (*MoonthlyCard_MoonthlyCardCnfResponse) ProtoMessage() {}
func (*MoonthlyCard_MoonthlyCardCnfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 8}
}
func (m *MoonthlyCard_MoonthlyCardCnfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MoonthlyCardCnfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MoonthlyCardCnfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MoonthlyCardCnfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardCnfResponse.Merge(m, src)
}
func (m *MoonthlyCard_MoonthlyCardCnfResponse) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MoonthlyCardCnfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MoonthlyCardCnfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MoonthlyCardCnfResponse proto.InternalMessageInfo

func (m *MoonthlyCard_MoonthlyCardCnfResponse) GetCnf() []*models.MoonthlyCardCnf {
	if m != nil {
		return m.Cnf
	}
	return nil
}

func (*MoonthlyCard_MoonthlyCardCnfResponse) XXX_MessageName() string {
	return "service.MoonthlyCard.MoonthlyCardCnfResponse"
}

// gm修改月卡开始时间
type MoonthlyCard_CheatMoonthlyCardStartTimeRequest struct {
	Id         int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId int64 `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	StartTime  int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) Reset() {
	*m = MoonthlyCard_CheatMoonthlyCardStartTimeRequest{}
}
func (*MoonthlyCard_CheatMoonthlyCardStartTimeRequest) ProtoMessage() {}
func (*MoonthlyCard_CheatMoonthlyCardStartTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 9}
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_CheatMoonthlyCardStartTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_CheatMoonthlyCardStartTimeRequest.Merge(m, src)
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_CheatMoonthlyCardStartTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_CheatMoonthlyCardStartTimeRequest proto.InternalMessageInfo

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (*MoonthlyCard_CheatMoonthlyCardStartTimeRequest) XXX_MessageName() string {
	return "service.MoonthlyCard.CheatMoonthlyCardStartTimeRequest"
}

type MoonthlyCard_CheatMoonthlyCardStartTimeResponse struct {
	Info *models.MoonthlyCardInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) Reset() {
	*m = MoonthlyCard_CheatMoonthlyCardStartTimeResponse{}
}
func (*MoonthlyCard_CheatMoonthlyCardStartTimeResponse) ProtoMessage() {}
func (*MoonthlyCard_CheatMoonthlyCardStartTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 10}
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_CheatMoonthlyCardStartTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_CheatMoonthlyCardStartTimeResponse.Merge(m, src)
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_CheatMoonthlyCardStartTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_CheatMoonthlyCardStartTimeResponse proto.InternalMessageInfo

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) GetInfo() *models.MoonthlyCardInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*MoonthlyCard_CheatMoonthlyCardStartTimeResponse) XXX_MessageName() string {
	return "service.MoonthlyCard.CheatMoonthlyCardStartTimeResponse"
}

//-----------------push------------------------
type MoonthlyCard_MonthlyCardBuyPush struct {
	Id     int64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type   models.MoonthlyCardType          `protobuf:"varint,2,opt,name=type,proto3,enum=models.MoonthlyCardType" json:"type,omitempty"`
	Number int64                            `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Info   *models.MoonthlyCardActivityInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *MoonthlyCard_MonthlyCardBuyPush) Reset()      { *m = MoonthlyCard_MonthlyCardBuyPush{} }
func (*MoonthlyCard_MonthlyCardBuyPush) ProtoMessage() {}
func (*MoonthlyCard_MonthlyCardBuyPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ce502a601cd988c, []int{0, 11}
}
func (m *MoonthlyCard_MonthlyCardBuyPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCard_MonthlyCardBuyPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCard_MonthlyCardBuyPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCard_MonthlyCardBuyPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCard_MonthlyCardBuyPush.Merge(m, src)
}
func (m *MoonthlyCard_MonthlyCardBuyPush) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCard_MonthlyCardBuyPush) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCard_MonthlyCardBuyPush.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCard_MonthlyCardBuyPush proto.InternalMessageInfo

func (m *MoonthlyCard_MonthlyCardBuyPush) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MoonthlyCard_MonthlyCardBuyPush) GetType() models.MoonthlyCardType {
	if m != nil {
		return m.Type
	}
	return models.MoonthlyCardType_Free
}

func (m *MoonthlyCard_MonthlyCardBuyPush) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *MoonthlyCard_MonthlyCardBuyPush) GetInfo() *models.MoonthlyCardActivityInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*MoonthlyCard_MonthlyCardBuyPush) XXX_MessageName() string {
	return "service.MoonthlyCard.MonthlyCardBuyPush"
}
func init() {
	proto.RegisterEnum("service.MoonthlyCardErrorCode", MoonthlyCardErrorCode_name, MoonthlyCardErrorCode_value)
	proto.RegisterType((*MoonthlyCard)(nil), "service.MoonthlyCard")
	proto.RegisterType((*MoonthlyCard_MoonthlyCardProgressPush)(nil), "service.MoonthlyCard.MoonthlyCardProgressPush")
	proto.RegisterMapType((map[int64]*models.MoonthlyCardProgress)(nil), "service.MoonthlyCard.MoonthlyCardProgressPush.ProgressEntry")
	proto.RegisterType((*MoonthlyCard_MoonthlyCardInfoRequest)(nil), "service.MoonthlyCard.MoonthlyCardInfoRequest")
	proto.RegisterType((*MoonthlyCard_MoonthlyCardInfoResponse)(nil), "service.MoonthlyCard.MoonthlyCardInfoResponse")
	proto.RegisterMapType((map[int64]*models.MoonthlyCardActivityInfo)(nil), "service.MoonthlyCard.MoonthlyCardInfoResponse.InfosEntry")
	proto.RegisterType((*MoonthlyCard_MoonthlyCardBuyRequest)(nil), "service.MoonthlyCard.MoonthlyCardBuyRequest")
	proto.RegisterType((*MoonthlyCard_MoonthlyCardBuyResponse)(nil), "service.MoonthlyCard.MoonthlyCardBuyResponse")
	proto.RegisterType((*MoonthlyCard_MoonthlyCardReceiveRequest)(nil), "service.MoonthlyCard.MoonthlyCardReceiveRequest")
	proto.RegisterType((*MoonthlyCard_MoonthlyCardReceiveResponse)(nil), "service.MoonthlyCard.MoonthlyCardReceiveResponse")
	proto.RegisterType((*MoonthlyCard_MoonthlyCardCnfRequest)(nil), "service.MoonthlyCard.MoonthlyCardCnfRequest")
	proto.RegisterType((*MoonthlyCard_MoonthlyCardCnfResponse)(nil), "service.MoonthlyCard.MoonthlyCardCnfResponse")
	proto.RegisterType((*MoonthlyCard_CheatMoonthlyCardStartTimeRequest)(nil), "service.MoonthlyCard.CheatMoonthlyCardStartTimeRequest")
	proto.RegisterType((*MoonthlyCard_CheatMoonthlyCardStartTimeResponse)(nil), "service.MoonthlyCard.CheatMoonthlyCardStartTimeResponse")
	proto.RegisterType((*MoonthlyCard_MonthlyCardBuyPush)(nil), "service.MoonthlyCard.MonthlyCardBuyPush")
}

func init() { proto.RegisterFile("proto/service/moothly_card.proto", fileDescriptor_0ce502a601cd988c) }

var fileDescriptor_0ce502a601cd988c = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xbd, 0xfe, 0x91, 0x26, 0xe3, 0x90, 0x2e, 0x23, 0x92, 0x2c, 0x13, 0xba, 0x35, 0x39,
	0x05, 0x48, 0x1d, 0xc9, 0xa1, 0x08, 0x10, 0x17, 0xea, 0xe6, 0x90, 0x43, 0x9c, 0x68, 0xdb, 0x03,
	0xf4, 0x12, 0x6d, 0x76, 0xc7, 0xc9, 0x0a, 0xef, 0x8e, 0x99, 0x59, 0x1b, 0x7c, 0x43, 0x42, 0x85,
	0xe2, 0x36, 0x4a, 0x25, 0x28, 0x12, 0x52, 0xa0, 0x04, 0x21, 0x11, 0x55, 0x6a, 0x12, 0x02, 0x51,
	0x41, 0x86, 0x33, 0xbd, 0xb5, 0xc7, 0x1e, 0xc1, 0xc9, 0xae, 0xe3, 0x0b, 0xe2, 0xc0, 0x1f, 0x80,
	0xf6, 0x17, 0xdd, 0x75, 0x36, 0xfc, 0xa8, 0xd4, 0x8b, 0xe5, 0x99, 0xf7, 0x79, 0x3f, 0xbe, 0xef,
	0xbd, 0xb5, 0x17, 0xe4, 0xaa, 0x94, 0x98, 0x64, 0x8a, 0x61, 0x5a, 0xd7, 0x14, 0x3c, 0xa5, 0x13,
	0x62, 0xae, 0x54, 0x1a, 0x8b, 0x8a, 0x4c, 0xd5, 0xbc, 0x6b, 0x82, 0x27, 0x7c, 0x1b, 0x3a, 0xed,
	0xa1, 0x3a, 0x51, 0x71, 0x85, 0xc5, 0x90, 0x68, 0x34, 0x02, 0x2c, 0xc9, 0x0c, 0xfb, 0x86, 0xb1,
	0x88, 0x41, 0x56, 0x4c, 0xad, 0xae, 0x99, 0x0d, 0xdf, 0x38, 0xd2, 0xe3, 0xb5, 0xec, 0xdd, 0x8f,
	0xff, 0x09, 0xc0, 0xe0, 0x1c, 0x21, 0x86, 0x93, 0xa5, 0x28, 0x53, 0x15, 0xdd, 0xe3, 0x80, 0x10,
	0xbe, 0x58, 0xa0, 0x64, 0x99, 0x62, 0xc6, 0x16, 0x6a, 0x6c, 0x05, 0xbe, 0x01, 0xfa, 0xab, 0xfe,
	0x59, 0xe0, 0x72, 0xa9, 0x89, 0x6c, 0xe1, 0xb5, 0xbc, 0x5f, 0x78, 0x3e, 0xec, 0x94, 0x3f, 0x2e,
	0x42, 0x3e, 0x38, 0xcc, 0x18, 0x26, 0x6d, 0x48, 0x7f, 0x47, 0x43, 0x6f, 0x82, 0x27, 0x22, 0x26,
	0xc8, 0x83, 0xd4, 0x5b, 0xb8, 0x21, 0x70, 0x39, 0x6e, 0x22, 0x25, 0x39, 0x5f, 0x61, 0x01, 0x64,
	0xea, 0x72, 0xa5, 0x86, 0x85, 0x64, 0x8e, 0x9b, 0xc8, 0x16, 0x9e, 0xc9, 0x7b, 0x62, 0x62, 0x73,
	0x49, 0x1e, 0xfa, 0x6a, 0xf2, 0x65, 0x0e, 0x3d, 0x0d, 0x46, 0xc3, 0xc8, 0xac, 0x51, 0x26, 0x12,
	0x7e, 0xbb, 0x86, 0x99, 0x89, 0x7e, 0xe9, 0x11, 0xeb, 0xd9, 0x58, 0x95, 0x18, 0x0c, 0xc3, 0x79,
	0x90, 0xd1, 0x8c, 0x32, 0x09, 0x94, 0xbe, 0xf2, 0xef, 0x4a, 0xc3, 0xee, 0x79, 0xe7, 0xe0, 0xcb,
	0xf4, 0xe2, 0xa0, 0x4b, 0x00, 0x3c, 0xbc, 0x8c, 0x11, 0xf8, 0x52, 0x54, 0x60, 0x2e, 0x4e, 0xe0,
	0xeb, 0xfe, 0x58, 0xdd, 0x54, 0x21, 0x91, 0xf7, 0x38, 0x30, 0x12, 0xe6, 0xce, 0xd5, 0x1a, 0xbe,
	0x48, 0x38, 0x04, 0x92, 0x9a, 0xea, 0xe7, 0x49, 0x6a, 0x2a, 0x9c, 0x04, 0x69, 0xb3, 0x51, 0xf5,
	0xb2, 0x0c, 0x15, 0x84, 0xb8, 0x2c, 0x17, 0x1b, 0x55, 0x2c, 0xb9, 0x14, 0x1c, 0x01, 0x7d, 0x46,
	0x4d, 0x5f, 0xc2, 0x54, 0x48, 0xb9, 0x11, 0xfc, 0x13, 0x3c, 0x0d, 0xb2, 0xc1, 0x8a, 0x2d, 0x6a,
	0xaa, 0x90, 0x76, 0x8d, 0x20, 0xb8, 0x9a, 0x55, 0x1d, 0x00, 0xbf, 0x5b, 0xd5, 0x28, 0x5e, 0x34,
	0x35, 0x1d, 0x0b, 0x19, 0x0f, 0xf0, 0xae, 0x2e, 0x6a, 0x3a, 0x86, 0xa7, 0x00, 0xd0, 0xd8, 0x22,
	0xab, 0x62, 0x45, 0x93, 0x2b, 0x42, 0x5f, 0x8e, 0x9b, 0xe8, 0x97, 0x06, 0x34, 0x76, 0xc1, 0xbb,
	0x40, 0xf3, 0xd1, 0xb1, 0xb9, 0x82, 0xfc, 0xc9, 0xbc, 0x08, 0xd2, 0x4e, 0x47, 0x5d, 0x4d, 0xff,
	0xa5, 0x4f, 0x2e, 0x8d, 0xe6, 0x00, 0x0a, 0x13, 0x12, 0x56, 0xb0, 0x56, 0xc7, 0xc7, 0x75, 0xa9,
	0x47, 0x5f, 0xb2, 0x57, 0x1f, 0x22, 0x60, 0x2c, 0x36, 0x9c, 0x5f, 0xe3, 0x64, 0xa4, 0xc6, 0xd8,
	0x2e, 0x3f, 0xac, 0x0d, 0x8e, 0x83, 0x8c, 0x66, 0x62, 0x9d, 0x09, 0x49, 0x77, 0xd7, 0x06, 0x03,
	0x7c, 0xd6, 0xc4, 0xba, 0xe4, 0x99, 0x90, 0x10, 0x9d, 0x70, 0xd1, 0x28, 0x07, 0x6b, 0x7c, 0x3e,
	0xda, 0x2a, 0xd7, 0xe2, 0x97, 0xf1, 0x1c, 0x48, 0x29, 0x46, 0xd9, 0x5f, 0xe1, 0xd1, 0xb8, 0x2a,
	0x1c, 0xda, 0x61, 0x10, 0x03, 0xcf, 0x16, 0x57, 0xb0, 0x6c, 0x86, 0x8d, 0x17, 0x4c, 0x99, 0x9a,
	0xce, 0xb4, 0x1e, 0xb5, 0x4d, 0xce, 0x94, 0x99, 0x13, 0xc4, 0xdb, 0x02, 0x6f, 0x87, 0x06, 0x58,
	0x10, 0x16, 0x49, 0x60, 0xfc, 0x9f, 0x92, 0x3e, 0x4a, 0x33, 0xd1, 0x97, 0x1c, 0x80, 0x73, 0x91,
	0xcd, 0x71, 0x7f, 0xbc, 0x1e, 0xcf, 0x73, 0x10, 0xec, 0x62, 0xfa, 0xff, 0xec, 0xe2, 0xf3, 0xbf,
	0xa7, 0xc1, 0x70, 0x18, 0x99, 0xa1, 0x94, 0xd0, 0x22, 0x51, 0x31, 0x3c, 0x03, 0x86, 0x67, 0x28,
	0x8d, 0xb4, 0xa3, 0xc1, 0x4c, 0xac, 0xf3, 0x09, 0x04, 0x9b, 0x7b, 0xc2, 0x10, 0x1c, 0xec, 0x7c,
	0xd7, 0xea, 0xb4, 0x6e, 0x76, 0x3f, 0xf9, 0xec, 0x70, 0x7b, 0x1b, 0xe6, 0xc1, 0x48, 0x0f, 0x5e,
	0x22, 0xe6, 0x79, 0xd9, 0x94, 0x79, 0x2e, 0xe0, 0xed, 0xdd, 0x0d, 0x7b, 0xfd, 0x23, 0xfb, 0xc6,
	0x8e, 0xbd, 0xba, 0x15, 0x13, 0xbe, 0x48, 0x8c, 0xb2, 0xb6, 0xcc, 0x27, 0x03, 0xbc, 0x7b, 0x79,
	0xb5, 0xf3, 0xf3, 0x96, 0x1f, 0xfe, 0x85, 0x98, 0xf0, 0xee, 0x78, 0xf8, 0x14, 0x3a, 0xd9, 0xdc,
	0x13, 0xb2, 0x70, 0xc0, 0x5e, 0xbf, 0x65, 0xfd, 0xf4, 0x9e, 0xf5, 0xcd, 0x55, 0x38, 0x09, 0x46,
	0x7b, 0x60, 0x67, 0x88, 0xf3, 0x75, 0x4c, 0xf9, 0x74, 0x40, 0x5b, 0x77, 0x76, 0x3b, 0xad, 0x8f,
	0xed, 0xcf, 0x6f, 0xc2, 0xc2, 0x11, 0xba, 0x44, 0x24, 0xfc, 0x8e, 0x4c, 0x55, 0x3e, 0x83, 0x86,
	0x9b, 0x7b, 0xc2, 0x93, 0xf0, 0xa4, 0x75, 0x67, 0xd7, 0xba, 0xbc, 0xd9, 0x7d, 0x7f, 0xb3, 0xfb,
	0xd5, 0x07, 0xd6, 0xd6, 0xb5, 0x98, 0x0c, 0xfe, 0x63, 0xa7, 0xf2, 0x7d, 0xa1, 0x0c, 0x0e, 0xbd,
	0xf6, 0x29, 0x3c, 0x0b, 0xd0, 0xd1, 0xde, 0x14, 0x89, 0x5e, 0xad, 0x60, 0x13, 0xf3, 0x27, 0x82,
	0x24, 0x07, 0xad, 0x96, 0xd5, 0xdc, 0x70, 0x64, 0x6c, 0x5d, 0xb3, 0xaf, 0x5c, 0x87, 0x85, 0x38,
	0xb7, 0x85, 0x1a, 0x55, 0x56, 0x64, 0x86, 0xf9, 0xfe, 0xa0, 0x4f, 0x07, 0x3f, 0xac, 0x5a, 0x6b,
	0xdb, 0x87, 0xdf, 0xdf, 0x3e, 0xf8, 0x71, 0x07, 0x4e, 0x83, 0xb1, 0x1e, 0x9f, 0xc0, 0xc1, 0x59,
	0x21, 0x7e, 0x20, 0x70, 0xf2, 0xf0, 0xce, 0xb7, 0x2d, 0xeb, 0x8b, 0xab, 0xf0, 0x2c, 0x38, 0x75,
	0x8c, 0x53, 0xc9, 0xdd, 0x2d, 0x1e, 0x44, 0xdd, 0xec, 0x1b, 0x3b, 0xdd, 0x0f, 0xd7, 0xe0, 0xf4,
	0x91, 0x11, 0x96, 0x88, 0xf3, 0xc9, 0x67, 0x91, 0xd0, 0xdc, 0x13, 0x9e, 0x82, 0xd0, 0x5e, 0xbf,
	0xe5, 0x7b, 0xdc, 0xfe, 0xda, 0x5e, 0xbf, 0x62, 0xad, 0x6e, 0x9c, 0x2b, 0x3d, 0xf8, 0x4d, 0x4c,
	0x6c, 0xb6, 0x45, 0xee, 0x6e, 0x5b, 0xe4, 0xee, 0xb7, 0x45, 0xee, 0xd7, 0xb6, 0xc8, 0x1d, 0xb6,
	0xc5, 0xc4, 0x1f, 0x6d, 0x91, 0xbb, 0xbe, 0x2f, 0x26, 0xee, 0xee, 0x8b, 0xdc, 0xfd, 0x7d, 0x31,
	0xf1, 0x60, 0x5f, 0x4c, 0x5c, 0xca, 0x29, 0x44, 0x33, 0xce, 0x38, 0xff, 0x77, 0x98, 0x4e, 0x29,
	0x44, 0xd7, 0x89, 0x31, 0x15, 0x79, 0x85, 0x59, 0xea, 0x73, 0x8f, 0xd3, 0x7f, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x7a, 0x10, 0xc0, 0x88, 0xda, 0x08, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MoonthlyCardProgressPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MoonthlyCardInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MoonthlyCardInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MoonthlyCardBuyRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MoonthlyCardBuyResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MoonthlyCardReceiveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MoonthlyCardReceiveResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MoonthlyCardCnfRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MoonthlyCardCnfResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_CheatMoonthlyCardStartTimeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_CheatMoonthlyCardStartTimeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCard_MonthlyCardBuyPush.Get().(proto.Message)
	})
}

var poolMoonthlyCard = &sync.Pool{New: func() interface{} { return &MoonthlyCard{} }}

func (m *MoonthlyCard) ReleasePool() { m.Reset(); poolMoonthlyCard.Put(m); m = nil }

var poolMoonthlyCard_MoonthlyCardProgressPush = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MoonthlyCardProgressPush{} }}

func (m *MoonthlyCard_MoonthlyCardProgressPush) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MoonthlyCardProgressPush.Put(m)
	m = nil
}

var poolMoonthlyCard_MoonthlyCardInfoRequest = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MoonthlyCardInfoRequest{} }}

func (m *MoonthlyCard_MoonthlyCardInfoRequest) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MoonthlyCardInfoRequest.Put(m)
	m = nil
}

var poolMoonthlyCard_MoonthlyCardInfoResponse = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MoonthlyCardInfoResponse{} }}

func (m *MoonthlyCard_MoonthlyCardInfoResponse) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MoonthlyCardInfoResponse.Put(m)
	m = nil
}

var poolMoonthlyCard_MoonthlyCardBuyRequest = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MoonthlyCardBuyRequest{} }}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MoonthlyCardBuyRequest.Put(m)
	m = nil
}

var poolMoonthlyCard_MoonthlyCardBuyResponse = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MoonthlyCardBuyResponse{} }}

func (m *MoonthlyCard_MoonthlyCardBuyResponse) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MoonthlyCardBuyResponse.Put(m)
	m = nil
}

var poolMoonthlyCard_MoonthlyCardReceiveRequest = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MoonthlyCardReceiveRequest{} }}

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MoonthlyCardReceiveRequest.Put(m)
	m = nil
}

var poolMoonthlyCard_MoonthlyCardReceiveResponse = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MoonthlyCardReceiveResponse{} }}

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MoonthlyCardReceiveResponse.Put(m)
	m = nil
}

var poolMoonthlyCard_MoonthlyCardCnfRequest = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MoonthlyCardCnfRequest{} }}

func (m *MoonthlyCard_MoonthlyCardCnfRequest) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MoonthlyCardCnfRequest.Put(m)
	m = nil
}

var poolMoonthlyCard_MoonthlyCardCnfResponse = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MoonthlyCardCnfResponse{} }}

func (m *MoonthlyCard_MoonthlyCardCnfResponse) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MoonthlyCardCnfResponse.Put(m)
	m = nil
}

var poolMoonthlyCard_CheatMoonthlyCardStartTimeRequest = &sync.Pool{New: func() interface{} { return &MoonthlyCard_CheatMoonthlyCardStartTimeRequest{} }}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_CheatMoonthlyCardStartTimeRequest.Put(m)
	m = nil
}

var poolMoonthlyCard_CheatMoonthlyCardStartTimeResponse = &sync.Pool{New: func() interface{} { return &MoonthlyCard_CheatMoonthlyCardStartTimeResponse{} }}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_CheatMoonthlyCardStartTimeResponse.Put(m)
	m = nil
}

var poolMoonthlyCard_MonthlyCardBuyPush = &sync.Pool{New: func() interface{} { return &MoonthlyCard_MonthlyCardBuyPush{} }}

func (m *MoonthlyCard_MonthlyCardBuyPush) ReleasePool() {
	m.Reset()
	poolMoonthlyCard_MonthlyCardBuyPush.Put(m)
	m = nil
}
func (x MoonthlyCardErrorCode) String() string {
	s, ok := MoonthlyCardErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MoonthlyCard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard)
	if !ok {
		that2, ok := that.(MoonthlyCard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MoonthlyCard_MoonthlyCardProgressPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MoonthlyCardProgressPush)
	if !ok {
		that2, ok := that.(MoonthlyCard_MoonthlyCardProgressPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Progress) != len(that1.Progress) {
		return false
	}
	for i := range this.Progress {
		if !this.Progress[i].Equal(that1.Progress[i]) {
			return false
		}
	}
	return true
}
func (this *MoonthlyCard_MoonthlyCardInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MoonthlyCardInfoRequest)
	if !ok {
		that2, ok := that.(MoonthlyCard_MoonthlyCardInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MoonthlyCard_MoonthlyCardInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MoonthlyCardInfoResponse)
	if !ok {
		that2, ok := that.(MoonthlyCard_MoonthlyCardInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	return true
}
func (this *MoonthlyCard_MoonthlyCardBuyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MoonthlyCardBuyRequest)
	if !ok {
		that2, ok := that.(MoonthlyCard_MoonthlyCardBuyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	if this.IsSpecial != that1.IsSpecial {
		return false
	}
	return true
}
func (this *MoonthlyCard_MoonthlyCardBuyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MoonthlyCardBuyResponse)
	if !ok {
		that2, ok := that.(MoonthlyCard_MoonthlyCardBuyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *MoonthlyCard_MoonthlyCardReceiveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MoonthlyCardReceiveRequest)
	if !ok {
		that2, ok := that.(MoonthlyCard_MoonthlyCardReceiveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	return true
}
func (this *MoonthlyCard_MoonthlyCardReceiveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MoonthlyCardReceiveResponse)
	if !ok {
		that2, ok := that.(MoonthlyCard_MoonthlyCardReceiveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *MoonthlyCard_MoonthlyCardCnfRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MoonthlyCardCnfRequest)
	if !ok {
		that2, ok := that.(MoonthlyCard_MoonthlyCardCnfRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MoonthlyCard_MoonthlyCardCnfResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MoonthlyCardCnfResponse)
	if !ok {
		that2, ok := that.(MoonthlyCard_MoonthlyCardCnfResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cnf) != len(that1.Cnf) {
		return false
	}
	for i := range this.Cnf {
		if !this.Cnf[i].Equal(that1.Cnf[i]) {
			return false
		}
	}
	return true
}
func (this *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_CheatMoonthlyCardStartTimeRequest)
	if !ok {
		that2, ok := that.(MoonthlyCard_CheatMoonthlyCardStartTimeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	return true
}
func (this *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_CheatMoonthlyCardStartTimeResponse)
	if !ok {
		that2, ok := that.(MoonthlyCard_CheatMoonthlyCardStartTimeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *MoonthlyCard_MonthlyCardBuyPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCard_MonthlyCardBuyPush)
	if !ok {
		that2, ok := that.(MoonthlyCard_MonthlyCardBuyPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (m *MoonthlyCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MoonthlyCardProgressPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MoonthlyCardProgressPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MoonthlyCardProgressPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Progress) > 0 {
		for k := range m.Progress {
			v := m.Progress[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMoothlyCard(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMoothlyCard(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMoothlyCard(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MoonthlyCardInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MoonthlyCardInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MoonthlyCardInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MoonthlyCardInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MoonthlyCardInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MoonthlyCardInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for k := range m.Infos {
			v := m.Infos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMoothlyCard(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMoothlyCard(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMoothlyCard(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSpecial {
		i--
		if m.IsSpecial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ExpireTime != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x28
	}
	if m.ActivityId != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x20
	}
	if m.Number != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MoonthlyCardBuyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MoonthlyCardBuyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MoonthlyCardBuyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoothlyCard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMoothlyCard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoothlyCard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MoonthlyCardCnfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MoonthlyCardCnfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MoonthlyCardCnfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MoonthlyCardCnfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MoonthlyCardCnfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MoonthlyCardCnfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cnf) > 0 {
		for iNdEx := len(m.Cnf) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cnf[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMoothlyCard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoothlyCard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MoonthlyCard_MonthlyCardBuyPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCard_MonthlyCardBuyPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCard_MonthlyCardBuyPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMoothlyCard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Number != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMoothlyCard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMoothlyCard(dAtA []byte, offset int, v uint64) int {
	offset -= sovMoothlyCard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MoonthlyCard) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MoonthlyCard_MoonthlyCardProgressPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("progress")
	w.RawByte('"')
	w.RawByte(':')
	if m.Progress == nil {
		w.RawString("null")
	} else if len(m.Progress) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlProgress := len(m.Progress)
		for k, v := range m.Progress {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlProgress--
			if mlProgress != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard_MoonthlyCardInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MoonthlyCard_MoonthlyCardInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("infos")
	w.RawByte('"')
	w.RawByte(':')
	if m.Infos == nil {
		w.RawString("null")
	} else if len(m.Infos) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlInfos := len(m.Infos)
		for k, v := range m.Infos {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlInfos--
			if mlInfos != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.Number != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("number")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Number))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.ExpireTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expire_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpireTime))
		needWriteComma = true
	}
	if m.IsSpecial {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_special")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSpecial)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard_MoonthlyCardBuyResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard_MoonthlyCardCnfRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *MoonthlyCard_MoonthlyCardCnfResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("cnf")
	w.RawByte('"')
	w.RawByte(':')
	if m.Cnf == nil {
		w.RawString("null")
	} else if len(m.Cnf) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Cnf {
			v.JsonBytes(w)
			if i != len(m.Cnf)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.StartTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard_MonthlyCardBuyPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.Number != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("number")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Number))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCard) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MoonthlyCardProgressPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MoonthlyCardProgressPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MoonthlyCardProgressPush) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MoonthlyCardInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MoonthlyCardInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MoonthlyCardInfoRequest) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MoonthlyCardInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MoonthlyCardInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MoonthlyCardInfoResponse) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MoonthlyCardBuyRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MoonthlyCardBuyRequest) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MoonthlyCardBuyResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MoonthlyCardBuyResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MoonthlyCardBuyResponse) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MoonthlyCardReceiveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MoonthlyCardReceiveRequest) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MoonthlyCardReceiveResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MoonthlyCardReceiveResponse) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MoonthlyCardCnfRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MoonthlyCardCnfRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MoonthlyCardCnfRequest) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MoonthlyCardCnfResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MoonthlyCardCnfResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MoonthlyCardCnfResponse) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) GoString() string {
	return m.String()
}

func (m *MoonthlyCard_MonthlyCardBuyPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCard_MonthlyCardBuyPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCard_MonthlyCardBuyPush) GoString() string {
	return m.String()
}

func (m *MoonthlyCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MoonthlyCard_MoonthlyCardProgressPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Progress) > 0 {
		for k, v := range m.Progress {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMoothlyCard(uint64(l))
			}
			mapEntrySize := 1 + sovMoothlyCard(uint64(k)) + l
			n += mapEntrySize + 1 + sovMoothlyCard(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MoonthlyCard_MoonthlyCardInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MoonthlyCard_MoonthlyCardInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for k, v := range m.Infos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMoothlyCard(uint64(l))
			}
			mapEntrySize := 1 + sovMoothlyCard(uint64(k)) + l
			n += mapEntrySize + 1 + sovMoothlyCard(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MoonthlyCard_MoonthlyCardBuyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMoothlyCard(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovMoothlyCard(uint64(m.Type))
	}
	if m.Number != 0 {
		n += 1 + sovMoothlyCard(uint64(m.Number))
	}
	if m.ActivityId != 0 {
		n += 1 + sovMoothlyCard(uint64(m.ActivityId))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovMoothlyCard(uint64(m.ExpireTime))
	}
	if m.IsSpecial {
		n += 2
	}
	return n
}

func (m *MoonthlyCard_MoonthlyCardBuyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMoothlyCard(uint64(l))
	}
	return n
}

func (m *MoonthlyCard_MoonthlyCardReceiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMoothlyCard(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovMoothlyCard(uint64(m.ActivityId))
	}
	return n
}

func (m *MoonthlyCard_MoonthlyCardReceiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMoothlyCard(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMoothlyCard(uint64(l))
		}
	}
	return n
}

func (m *MoonthlyCard_MoonthlyCardCnfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MoonthlyCard_MoonthlyCardCnfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cnf) > 0 {
		for _, e := range m.Cnf {
			l = e.Size()
			n += 1 + l + sovMoothlyCard(uint64(l))
		}
	}
	return n
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMoothlyCard(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovMoothlyCard(uint64(m.ActivityId))
	}
	if m.StartTime != 0 {
		n += 1 + sovMoothlyCard(uint64(m.StartTime))
	}
	return n
}

func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMoothlyCard(uint64(l))
	}
	return n
}

func (m *MoonthlyCard_MonthlyCardBuyPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMoothlyCard(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovMoothlyCard(uint64(m.Type))
	}
	if m.Number != 0 {
		n += 1 + sovMoothlyCard(uint64(m.Number))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMoothlyCard(uint64(l))
	}
	return n
}

func sovMoothlyCard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMoothlyCard(x uint64) (n int) {
	return sovMoothlyCard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MoonthlyCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MoonthlyCardProgressPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardProgressPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardProgressPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = make(map[int64]*models.MoonthlyCardProgress)
			}
			var mapkey int64
			var mapvalue *models.MoonthlyCardProgress
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMoothlyCard
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMoothlyCard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMoothlyCard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMoothlyCard
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMoothlyCard
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.MoonthlyCardProgress{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMoothlyCard(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMoothlyCard
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Progress[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MoonthlyCardInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MoonthlyCardInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infos == nil {
				m.Infos = make(map[int64]*models.MoonthlyCardActivityInfo)
			}
			var mapkey int64
			var mapvalue *models.MoonthlyCardActivityInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMoothlyCard
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMoothlyCard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMoothlyCard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMoothlyCard
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMoothlyCard
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.MoonthlyCardActivityInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMoothlyCard(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMoothlyCard
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Infos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MoonthlyCardBuyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardBuyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardBuyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.MoonthlyCardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSpecial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSpecial = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MoonthlyCardBuyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardBuyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardBuyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.MoonthlyCardActivityInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MoonthlyCardReceiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardReceiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardReceiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MoonthlyCardReceiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardReceiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardReceiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.MoonthlyCardInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MoonthlyCardCnfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardCnfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardCnfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MoonthlyCardCnfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardCnfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardCnfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cnf = append(m.Cnf, &models.MoonthlyCardCnf{})
			if err := m.Cnf[len(m.Cnf)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatMoonthlyCardStartTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatMoonthlyCardStartTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_CheatMoonthlyCardStartTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatMoonthlyCardStartTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatMoonthlyCardStartTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.MoonthlyCardInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoonthlyCard_MonthlyCardBuyPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthlyCardBuyPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthlyCardBuyPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.MoonthlyCardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.MoonthlyCardActivityInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMoothlyCard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMoothlyCard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMoothlyCard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMoothlyCard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMoothlyCard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMoothlyCard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMoothlyCard = fmt.Errorf("proto: unexpected end of group")
)
