// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/relics.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RelicsErrorCode int32

const (
	RelicsErrorCode_ErrRelicsLevelMax          RelicsErrorCode = 0
	RelicsErrorCode_ErrRelicsStarMax           RelicsErrorCode = 1
	RelicsErrorCode_ErrRelicsExist             RelicsErrorCode = 2
	RelicsErrorCode_ErrRelicsFragmentNotEnough RelicsErrorCode = 3
)

var RelicsErrorCode_name = map[int32]string{
	0: "ErrRelicsLevelMax",
	1: "ErrRelicsStarMax",
	2: "ErrRelicsExist",
	3: "ErrRelicsFragmentNotEnough",
}

var RelicsErrorCode_value = map[string]int32{
	"ErrRelicsLevelMax":          0,
	"ErrRelicsStarMax":           1,
	"ErrRelicsExist":             2,
	"ErrRelicsFragmentNotEnough": 3,
}

func (RelicsErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0}
}

type Relics struct {
}

func (m *Relics) Reset()      { *m = Relics{} }
func (*Relics) ProtoMessage() {}
func (*Relics) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0}
}
func (m *Relics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics.Merge(m, src)
}
func (m *Relics) XXX_Size() int {
	return m.Size()
}
func (m *Relics) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics.DiscardUnknown(m)
}

var xxx_messageInfo_Relics proto.InternalMessageInfo

func (*Relics) XXX_MessageName() string {
	return "service.Relics"
}

type Relics_GetRelicsSuitRequest struct {
}

func (m *Relics_GetRelicsSuitRequest) Reset()      { *m = Relics_GetRelicsSuitRequest{} }
func (*Relics_GetRelicsSuitRequest) ProtoMessage() {}
func (*Relics_GetRelicsSuitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 0}
}
func (m *Relics_GetRelicsSuitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_GetRelicsSuitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_GetRelicsSuitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_GetRelicsSuitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_GetRelicsSuitRequest.Merge(m, src)
}
func (m *Relics_GetRelicsSuitRequest) XXX_Size() int {
	return m.Size()
}
func (m *Relics_GetRelicsSuitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_GetRelicsSuitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_GetRelicsSuitRequest proto.InternalMessageInfo

func (*Relics_GetRelicsSuitRequest) XXX_MessageName() string {
	return "service.Relics.GetRelicsSuitRequest"
}

type Relics_GetRelicsSuitResponse struct {
	Suit []*models.RelicsSuit `protobuf:"bytes,1,rep,name=suit,proto3" json:"suit,omitempty"`
}

func (m *Relics_GetRelicsSuitResponse) Reset()      { *m = Relics_GetRelicsSuitResponse{} }
func (*Relics_GetRelicsSuitResponse) ProtoMessage() {}
func (*Relics_GetRelicsSuitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 1}
}
func (m *Relics_GetRelicsSuitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_GetRelicsSuitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_GetRelicsSuitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_GetRelicsSuitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_GetRelicsSuitResponse.Merge(m, src)
}
func (m *Relics_GetRelicsSuitResponse) XXX_Size() int {
	return m.Size()
}
func (m *Relics_GetRelicsSuitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_GetRelicsSuitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_GetRelicsSuitResponse proto.InternalMessageInfo

func (m *Relics_GetRelicsSuitResponse) GetSuit() []*models.RelicsSuit {
	if m != nil {
		return m.Suit
	}
	return nil
}

func (*Relics_GetRelicsSuitResponse) XXX_MessageName() string {
	return "service.Relics.GetRelicsSuitResponse"
}

type Relics_RelicsLevelUpgradeRequest struct {
	RelicsId int64 `protobuf:"varint,1,opt,name=relics_id,json=relicsId,proto3" json:"relics_id,omitempty"`
}

func (m *Relics_RelicsLevelUpgradeRequest) Reset()      { *m = Relics_RelicsLevelUpgradeRequest{} }
func (*Relics_RelicsLevelUpgradeRequest) ProtoMessage() {}
func (*Relics_RelicsLevelUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 2}
}
func (m *Relics_RelicsLevelUpgradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_RelicsLevelUpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_RelicsLevelUpgradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_RelicsLevelUpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_RelicsLevelUpgradeRequest.Merge(m, src)
}
func (m *Relics_RelicsLevelUpgradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *Relics_RelicsLevelUpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_RelicsLevelUpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_RelicsLevelUpgradeRequest proto.InternalMessageInfo

func (m *Relics_RelicsLevelUpgradeRequest) GetRelicsId() int64 {
	if m != nil {
		return m.RelicsId
	}
	return 0
}

func (*Relics_RelicsLevelUpgradeRequest) XXX_MessageName() string {
	return "service.Relics.RelicsLevelUpgradeRequest"
}

type Relics_RelicsLevelUpgradeResponse struct {
}

func (m *Relics_RelicsLevelUpgradeResponse) Reset()      { *m = Relics_RelicsLevelUpgradeResponse{} }
func (*Relics_RelicsLevelUpgradeResponse) ProtoMessage() {}
func (*Relics_RelicsLevelUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 3}
}
func (m *Relics_RelicsLevelUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_RelicsLevelUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_RelicsLevelUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_RelicsLevelUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_RelicsLevelUpgradeResponse.Merge(m, src)
}
func (m *Relics_RelicsLevelUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *Relics_RelicsLevelUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_RelicsLevelUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_RelicsLevelUpgradeResponse proto.InternalMessageInfo

func (*Relics_RelicsLevelUpgradeResponse) XXX_MessageName() string {
	return "service.Relics.RelicsLevelUpgradeResponse"
}

type Relics_RelicsStarUpgradeRequest struct {
	RelicsId int64 `protobuf:"varint,1,opt,name=relics_id,json=relicsId,proto3" json:"relics_id,omitempty"`
}

func (m *Relics_RelicsStarUpgradeRequest) Reset()      { *m = Relics_RelicsStarUpgradeRequest{} }
func (*Relics_RelicsStarUpgradeRequest) ProtoMessage() {}
func (*Relics_RelicsStarUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 4}
}
func (m *Relics_RelicsStarUpgradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_RelicsStarUpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_RelicsStarUpgradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_RelicsStarUpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_RelicsStarUpgradeRequest.Merge(m, src)
}
func (m *Relics_RelicsStarUpgradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *Relics_RelicsStarUpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_RelicsStarUpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_RelicsStarUpgradeRequest proto.InternalMessageInfo

func (m *Relics_RelicsStarUpgradeRequest) GetRelicsId() int64 {
	if m != nil {
		return m.RelicsId
	}
	return 0
}

func (*Relics_RelicsStarUpgradeRequest) XXX_MessageName() string {
	return "service.Relics.RelicsStarUpgradeRequest"
}

type Relics_RelicsStarUpgradeResponse struct {
}

func (m *Relics_RelicsStarUpgradeResponse) Reset()      { *m = Relics_RelicsStarUpgradeResponse{} }
func (*Relics_RelicsStarUpgradeResponse) ProtoMessage() {}
func (*Relics_RelicsStarUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 5}
}
func (m *Relics_RelicsStarUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_RelicsStarUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_RelicsStarUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_RelicsStarUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_RelicsStarUpgradeResponse.Merge(m, src)
}
func (m *Relics_RelicsStarUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *Relics_RelicsStarUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_RelicsStarUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_RelicsStarUpgradeResponse proto.InternalMessageInfo

func (*Relics_RelicsStarUpgradeResponse) XXX_MessageName() string {
	return "service.Relics.RelicsStarUpgradeResponse"
}

type Relics_RelicsComposeRequest struct {
	RelicsId int64 `protobuf:"varint,1,opt,name=relics_id,json=relicsId,proto3" json:"relics_id,omitempty"`
}

func (m *Relics_RelicsComposeRequest) Reset()      { *m = Relics_RelicsComposeRequest{} }
func (*Relics_RelicsComposeRequest) ProtoMessage() {}
func (*Relics_RelicsComposeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 6}
}
func (m *Relics_RelicsComposeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_RelicsComposeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_RelicsComposeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_RelicsComposeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_RelicsComposeRequest.Merge(m, src)
}
func (m *Relics_RelicsComposeRequest) XXX_Size() int {
	return m.Size()
}
func (m *Relics_RelicsComposeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_RelicsComposeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_RelicsComposeRequest proto.InternalMessageInfo

func (m *Relics_RelicsComposeRequest) GetRelicsId() int64 {
	if m != nil {
		return m.RelicsId
	}
	return 0
}

func (*Relics_RelicsComposeRequest) XXX_MessageName() string {
	return "service.Relics.RelicsComposeRequest"
}

type Relics_RelicsComposeResponse struct {
}

func (m *Relics_RelicsComposeResponse) Reset()      { *m = Relics_RelicsComposeResponse{} }
func (*Relics_RelicsComposeResponse) ProtoMessage() {}
func (*Relics_RelicsComposeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 7}
}
func (m *Relics_RelicsComposeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_RelicsComposeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_RelicsComposeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_RelicsComposeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_RelicsComposeResponse.Merge(m, src)
}
func (m *Relics_RelicsComposeResponse) XXX_Size() int {
	return m.Size()
}
func (m *Relics_RelicsComposeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_RelicsComposeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_RelicsComposeResponse proto.InternalMessageInfo

func (*Relics_RelicsComposeResponse) XXX_MessageName() string {
	return "service.Relics.RelicsComposeResponse"
}

type Relics_RelicsReadRequest struct {
}

func (m *Relics_RelicsReadRequest) Reset()      { *m = Relics_RelicsReadRequest{} }
func (*Relics_RelicsReadRequest) ProtoMessage() {}
func (*Relics_RelicsReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 8}
}
func (m *Relics_RelicsReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_RelicsReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_RelicsReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_RelicsReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_RelicsReadRequest.Merge(m, src)
}
func (m *Relics_RelicsReadRequest) XXX_Size() int {
	return m.Size()
}
func (m *Relics_RelicsReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_RelicsReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_RelicsReadRequest proto.InternalMessageInfo

func (*Relics_RelicsReadRequest) XXX_MessageName() string {
	return "service.Relics.RelicsReadRequest"
}

type Relics_RelicsReadResponse struct {
}

func (m *Relics_RelicsReadResponse) Reset()      { *m = Relics_RelicsReadResponse{} }
func (*Relics_RelicsReadResponse) ProtoMessage() {}
func (*Relics_RelicsReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 9}
}
func (m *Relics_RelicsReadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_RelicsReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_RelicsReadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_RelicsReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_RelicsReadResponse.Merge(m, src)
}
func (m *Relics_RelicsReadResponse) XXX_Size() int {
	return m.Size()
}
func (m *Relics_RelicsReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_RelicsReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_RelicsReadResponse proto.InternalMessageInfo

func (*Relics_RelicsReadResponse) XXX_MessageName() string {
	return "service.Relics.RelicsReadResponse"
}

//--------------------------push--------------------------//
type Relics_RelicsSuitUpdatePush struct {
	Suit *models.RelicsSuit `protobuf:"bytes,1,opt,name=suit,proto3" json:"suit,omitempty"`
}

func (m *Relics_RelicsSuitUpdatePush) Reset()      { *m = Relics_RelicsSuitUpdatePush{} }
func (*Relics_RelicsSuitUpdatePush) ProtoMessage() {}
func (*Relics_RelicsSuitUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 10}
}
func (m *Relics_RelicsSuitUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_RelicsSuitUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_RelicsSuitUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_RelicsSuitUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_RelicsSuitUpdatePush.Merge(m, src)
}
func (m *Relics_RelicsSuitUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *Relics_RelicsSuitUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_RelicsSuitUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_RelicsSuitUpdatePush proto.InternalMessageInfo

func (m *Relics_RelicsSuitUpdatePush) GetSuit() *models.RelicsSuit {
	if m != nil {
		return m.Suit
	}
	return nil
}

func (*Relics_RelicsSuitUpdatePush) XXX_MessageName() string {
	return "service.Relics.RelicsSuitUpdatePush"
}

//----------------------cheat----------------------//
type Relics_CheatRelicsLevelMaxRequest struct {
}

func (m *Relics_CheatRelicsLevelMaxRequest) Reset()      { *m = Relics_CheatRelicsLevelMaxRequest{} }
func (*Relics_CheatRelicsLevelMaxRequest) ProtoMessage() {}
func (*Relics_CheatRelicsLevelMaxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 11}
}
func (m *Relics_CheatRelicsLevelMaxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_CheatRelicsLevelMaxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_CheatRelicsLevelMaxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_CheatRelicsLevelMaxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_CheatRelicsLevelMaxRequest.Merge(m, src)
}
func (m *Relics_CheatRelicsLevelMaxRequest) XXX_Size() int {
	return m.Size()
}
func (m *Relics_CheatRelicsLevelMaxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_CheatRelicsLevelMaxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_CheatRelicsLevelMaxRequest proto.InternalMessageInfo

func (*Relics_CheatRelicsLevelMaxRequest) XXX_MessageName() string {
	return "service.Relics.CheatRelicsLevelMaxRequest"
}

type Relics_CheatRelicsLevelMaxResponse struct {
}

func (m *Relics_CheatRelicsLevelMaxResponse) Reset()      { *m = Relics_CheatRelicsLevelMaxResponse{} }
func (*Relics_CheatRelicsLevelMaxResponse) ProtoMessage() {}
func (*Relics_CheatRelicsLevelMaxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_180ac5e2cc6b694c, []int{0, 12}
}
func (m *Relics_CheatRelicsLevelMaxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relics_CheatRelicsLevelMaxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relics_CheatRelicsLevelMaxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relics_CheatRelicsLevelMaxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relics_CheatRelicsLevelMaxResponse.Merge(m, src)
}
func (m *Relics_CheatRelicsLevelMaxResponse) XXX_Size() int {
	return m.Size()
}
func (m *Relics_CheatRelicsLevelMaxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Relics_CheatRelicsLevelMaxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Relics_CheatRelicsLevelMaxResponse proto.InternalMessageInfo

func (*Relics_CheatRelicsLevelMaxResponse) XXX_MessageName() string {
	return "service.Relics.CheatRelicsLevelMaxResponse"
}
func init() {
	proto.RegisterEnum("service.RelicsErrorCode", RelicsErrorCode_name, RelicsErrorCode_value)
	proto.RegisterType((*Relics)(nil), "service.Relics")
	proto.RegisterType((*Relics_GetRelicsSuitRequest)(nil), "service.Relics.GetRelicsSuitRequest")
	proto.RegisterType((*Relics_GetRelicsSuitResponse)(nil), "service.Relics.GetRelicsSuitResponse")
	proto.RegisterType((*Relics_RelicsLevelUpgradeRequest)(nil), "service.Relics.RelicsLevelUpgradeRequest")
	proto.RegisterType((*Relics_RelicsLevelUpgradeResponse)(nil), "service.Relics.RelicsLevelUpgradeResponse")
	proto.RegisterType((*Relics_RelicsStarUpgradeRequest)(nil), "service.Relics.RelicsStarUpgradeRequest")
	proto.RegisterType((*Relics_RelicsStarUpgradeResponse)(nil), "service.Relics.RelicsStarUpgradeResponse")
	proto.RegisterType((*Relics_RelicsComposeRequest)(nil), "service.Relics.RelicsComposeRequest")
	proto.RegisterType((*Relics_RelicsComposeResponse)(nil), "service.Relics.RelicsComposeResponse")
	proto.RegisterType((*Relics_RelicsReadRequest)(nil), "service.Relics.RelicsReadRequest")
	proto.RegisterType((*Relics_RelicsReadResponse)(nil), "service.Relics.RelicsReadResponse")
	proto.RegisterType((*Relics_RelicsSuitUpdatePush)(nil), "service.Relics.RelicsSuitUpdatePush")
	proto.RegisterType((*Relics_CheatRelicsLevelMaxRequest)(nil), "service.Relics.CheatRelicsLevelMaxRequest")
	proto.RegisterType((*Relics_CheatRelicsLevelMaxResponse)(nil), "service.Relics.CheatRelicsLevelMaxResponse")
}

func init() { proto.RegisterFile("proto/service/relics.proto", fileDescriptor_180ac5e2cc6b694c) }

var fileDescriptor_180ac5e2cc6b694c = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6b, 0x13, 0x41,
	0x14, 0xc6, 0x77, 0x4c, 0xa9, 0xfa, 0x04, 0x4d, 0xc7, 0xd4, 0x6e, 0x27, 0x75, 0x08, 0x1e, 0xa4,
	0x88, 0x26, 0x60, 0x15, 0x7b, 0x52, 0x30, 0x44, 0x11, 0xb4, 0x48, 0xa4, 0x17, 0x2f, 0xb2, 0xcd,
	0x0e, 0xc9, 0x42, 0x76, 0x27, 0xce, 0xcc, 0x96, 0x5e, 0x3d, 0x88, 0x24, 0xa0, 0xf6, 0x66, 0x05,
	0xa1, 0x20, 0x82, 0xf5, 0xd0, 0x4b, 0xa1, 0xb4, 0x28, 0xf4, 0xdc, 0x63, 0x8f, 0x3d, 0xea, 0xa6,
	0xdb, 0x6d, 0x6f, 0xfe, 0x09, 0x92, 0xcc, 0x26, 0x64, 0x43, 0x11, 0x3d, 0xce, 0xf7, 0xbd, 0xdf,
	0xf7, 0x76, 0x3f, 0x78, 0x40, 0x1a, 0x82, 0x2b, 0x5e, 0x90, 0x4c, 0x2c, 0x3a, 0x15, 0x56, 0x10,
	0xac, 0xee, 0x54, 0x64, 0xbe, 0x2b, 0xe2, 0xd3, 0xb1, 0x4a, 0x26, 0xf5, 0x90, 0xcb, 0x6d, 0x56,
	0x97, 0x89, 0x19, 0x32, 0x91, 0xb0, 0x16, 0x2c, 0xc9, 0x62, 0xc3, 0x4c, 0x18, 0xcc, 0xf3, 0xdd,
	0x18, 0xb9, 0xf2, 0x7a, 0x04, 0x46, 0xcb, 0xdd, 0x0c, 0x72, 0x09, 0x32, 0x0f, 0x99, 0xd2, 0x8f,
	0x67, 0xbe, 0xa3, 0xca, 0xec, 0xa5, 0xcf, 0xa4, 0x22, 0xf7, 0x60, 0x7c, 0x48, 0x97, 0x0d, 0xee,
	0x49, 0x86, 0xaf, 0xc2, 0x88, 0xf4, 0x1d, 0x65, 0xa2, 0x5c, 0x6a, 0xfa, 0xdc, 0x4d, 0x9c, 0xd7,
	0xf1, 0xf9, 0x81, 0xc9, 0xae, 0x4f, 0x66, 0x61, 0x52, 0x6b, 0x8f, 0xd9, 0x22, 0xab, 0xcf, 0x37,
	0xaa, 0xc2, 0xb2, 0x59, 0x9c, 0x8e, 0xb3, 0x70, 0x56, 0xff, 0xc3, 0x0b, 0xc7, 0x36, 0x51, 0x0e,
	0x4d, 0xa7, 0xca, 0x67, 0xb4, 0xf0, 0xc8, 0x26, 0x53, 0x40, 0x4e, 0x22, 0xf5, 0x7e, 0x72, 0x07,
	0xcc, 0x78, 0x97, 0xb2, 0xc4, 0xff, 0xc4, 0x66, 0x7b, 0x1f, 0x94, 0x00, 0xe3, 0xd4, 0x19, 0xc8,
	0x68, 0xb3, 0xc8, 0xdd, 0x06, 0x97, 0xff, 0x96, 0x38, 0x01, 0xe3, 0x43, 0x50, 0x9c, 0x76, 0x11,
	0xc6, 0xb4, 0x51, 0x66, 0x96, 0xdd, 0x6b, 0x34, 0x03, 0x78, 0x50, 0x8c, 0x47, 0xef, 0xf6, 0x16,
	0x77, 0xaa, 0x9b, 0x6f, 0xd8, 0x96, 0x62, 0x4f, 0x7d, 0x59, 0x1b, 0xa8, 0x19, 0xfd, 0xb5, 0xe6,
	0x29, 0x20, 0xc5, 0x1a, 0xb3, 0xd4, 0x40, 0x63, 0x4f, 0xac, 0xa5, 0xde, 0xce, 0xcb, 0x90, 0x3d,
	0xd1, 0xd5, 0xcb, 0xaf, 0x1d, 0x22, 0xb8, 0xa0, 0xad, 0x92, 0x10, 0x5c, 0x14, 0xb9, 0xcd, 0xf0,
	0x6d, 0x18, 0x2b, 0x09, 0x91, 0x04, 0xd2, 0x06, 0xa1, 0xad, 0x4d, 0x93, 0x60, 0xf3, 0xf8, 0xd5,
	0x87, 0xa8, 0xf9, 0x2d, 0x5a, 0x6f, 0x46, 0xdf, 0xbf, 0x86, 0x5b, 0x1b, 0x47, 0x3b, 0x3b, 0x07,
	0xdb, 0xad, 0xe3, 0x8f, 0xcb, 0xf8, 0x16, 0xa4, 0xfb, 0x58, 0xa7, 0xe0, 0x0e, 0x85, 0x92, 0xd4,
	0xe1, 0xca, 0xea, 0x30, 0x75, 0x1d, 0xce, 0xf7, 0xa9, 0xd2, 0x92, 0x23, 0x55, 0xfa, 0x14, 0x31,
	0x5b, 0x9b, 0x66, 0x06, 0x63, 0xcd, 0x84, 0x5b, 0x1b, 0xd1, 0x8f, 0xf7, 0xe1, 0xfa, 0x4a, 0xf8,
	0x69, 0x0d, 0xcf, 0x02, 0xe9, 0x4f, 0x3f, 0x10, 0x56, 0xd5, 0x65, 0x9e, 0x9a, 0xe3, 0xaa, 0xe4,
	0x71, 0xbf, 0x5a, 0x4b, 0xa7, 0x92, 0x64, 0xf4, 0xf9, 0x5d, 0xd4, 0x7c, 0x73, 0xb0, 0xfd, 0x36,
	0xfc, 0xb2, 0x7a, 0x7f, 0x6e, 0xff, 0x17, 0x35, 0xd6, 0x02, 0x8a, 0x76, 0x03, 0x8a, 0xf6, 0x02,
	0x8a, 0x7e, 0x06, 0x14, 0x1d, 0x05, 0xd4, 0xf8, 0x1d, 0x50, 0xb4, 0xdc, 0xa6, 0xc6, 0x6e, 0x9b,
	0xa2, 0xbd, 0x36, 0x35, 0xf6, 0xdb, 0xd4, 0x78, 0x9e, 0xab, 0x70, 0xc7, 0xbb, 0xd1, 0x39, 0x3d,
	0x26, 0x0a, 0x15, 0xee, 0xba, 0xdc, 0x2b, 0x24, 0x8e, 0x74, 0x61, 0xb4, 0xfb, 0x9c, 0xf9, 0x13,
	0x00, 0x00, 0xff, 0xff, 0xcd, 0x4b, 0x6b, 0x8e, 0xbc, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_GetRelicsSuitRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_GetRelicsSuitResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_RelicsLevelUpgradeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_RelicsLevelUpgradeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_RelicsStarUpgradeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_RelicsStarUpgradeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_RelicsComposeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_RelicsComposeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_RelicsReadRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_RelicsReadResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_RelicsSuitUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_CheatRelicsLevelMaxRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRelics_CheatRelicsLevelMaxResponse.Get().(proto.Message)
	})
}

var poolRelics = &sync.Pool{New: func() interface{} { return &Relics{} }}

func (m *Relics) ReleasePool() { m.Reset(); poolRelics.Put(m); m = nil }

var poolRelics_GetRelicsSuitRequest = &sync.Pool{New: func() interface{} { return &Relics_GetRelicsSuitRequest{} }}

func (m *Relics_GetRelicsSuitRequest) ReleasePool() {
	m.Reset()
	poolRelics_GetRelicsSuitRequest.Put(m)
	m = nil
}

var poolRelics_GetRelicsSuitResponse = &sync.Pool{New: func() interface{} { return &Relics_GetRelicsSuitResponse{} }}

func (m *Relics_GetRelicsSuitResponse) ReleasePool() {
	m.Reset()
	poolRelics_GetRelicsSuitResponse.Put(m)
	m = nil
}

var poolRelics_RelicsLevelUpgradeRequest = &sync.Pool{New: func() interface{} { return &Relics_RelicsLevelUpgradeRequest{} }}

func (m *Relics_RelicsLevelUpgradeRequest) ReleasePool() {
	m.Reset()
	poolRelics_RelicsLevelUpgradeRequest.Put(m)
	m = nil
}

var poolRelics_RelicsLevelUpgradeResponse = &sync.Pool{New: func() interface{} { return &Relics_RelicsLevelUpgradeResponse{} }}

func (m *Relics_RelicsLevelUpgradeResponse) ReleasePool() {
	m.Reset()
	poolRelics_RelicsLevelUpgradeResponse.Put(m)
	m = nil
}

var poolRelics_RelicsStarUpgradeRequest = &sync.Pool{New: func() interface{} { return &Relics_RelicsStarUpgradeRequest{} }}

func (m *Relics_RelicsStarUpgradeRequest) ReleasePool() {
	m.Reset()
	poolRelics_RelicsStarUpgradeRequest.Put(m)
	m = nil
}

var poolRelics_RelicsStarUpgradeResponse = &sync.Pool{New: func() interface{} { return &Relics_RelicsStarUpgradeResponse{} }}

func (m *Relics_RelicsStarUpgradeResponse) ReleasePool() {
	m.Reset()
	poolRelics_RelicsStarUpgradeResponse.Put(m)
	m = nil
}

var poolRelics_RelicsComposeRequest = &sync.Pool{New: func() interface{} { return &Relics_RelicsComposeRequest{} }}

func (m *Relics_RelicsComposeRequest) ReleasePool() {
	m.Reset()
	poolRelics_RelicsComposeRequest.Put(m)
	m = nil
}

var poolRelics_RelicsComposeResponse = &sync.Pool{New: func() interface{} { return &Relics_RelicsComposeResponse{} }}

func (m *Relics_RelicsComposeResponse) ReleasePool() {
	m.Reset()
	poolRelics_RelicsComposeResponse.Put(m)
	m = nil
}

var poolRelics_RelicsReadRequest = &sync.Pool{New: func() interface{} { return &Relics_RelicsReadRequest{} }}

func (m *Relics_RelicsReadRequest) ReleasePool() {
	m.Reset()
	poolRelics_RelicsReadRequest.Put(m)
	m = nil
}

var poolRelics_RelicsReadResponse = &sync.Pool{New: func() interface{} { return &Relics_RelicsReadResponse{} }}

func (m *Relics_RelicsReadResponse) ReleasePool() {
	m.Reset()
	poolRelics_RelicsReadResponse.Put(m)
	m = nil
}

var poolRelics_RelicsSuitUpdatePush = &sync.Pool{New: func() interface{} { return &Relics_RelicsSuitUpdatePush{} }}

func (m *Relics_RelicsSuitUpdatePush) ReleasePool() {
	m.Reset()
	poolRelics_RelicsSuitUpdatePush.Put(m)
	m = nil
}

var poolRelics_CheatRelicsLevelMaxRequest = &sync.Pool{New: func() interface{} { return &Relics_CheatRelicsLevelMaxRequest{} }}

func (m *Relics_CheatRelicsLevelMaxRequest) ReleasePool() {
	m.Reset()
	poolRelics_CheatRelicsLevelMaxRequest.Put(m)
	m = nil
}

var poolRelics_CheatRelicsLevelMaxResponse = &sync.Pool{New: func() interface{} { return &Relics_CheatRelicsLevelMaxResponse{} }}

func (m *Relics_CheatRelicsLevelMaxResponse) ReleasePool() {
	m.Reset()
	poolRelics_CheatRelicsLevelMaxResponse.Put(m)
	m = nil
}
func (x RelicsErrorCode) String() string {
	s, ok := RelicsErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Relics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics)
	if !ok {
		that2, ok := that.(Relics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Relics_GetRelicsSuitRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_GetRelicsSuitRequest)
	if !ok {
		that2, ok := that.(Relics_GetRelicsSuitRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Relics_GetRelicsSuitResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_GetRelicsSuitResponse)
	if !ok {
		that2, ok := that.(Relics_GetRelicsSuitResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Suit) != len(that1.Suit) {
		return false
	}
	for i := range this.Suit {
		if !this.Suit[i].Equal(that1.Suit[i]) {
			return false
		}
	}
	return true
}
func (this *Relics_RelicsLevelUpgradeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_RelicsLevelUpgradeRequest)
	if !ok {
		that2, ok := that.(Relics_RelicsLevelUpgradeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RelicsId != that1.RelicsId {
		return false
	}
	return true
}
func (this *Relics_RelicsLevelUpgradeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_RelicsLevelUpgradeResponse)
	if !ok {
		that2, ok := that.(Relics_RelicsLevelUpgradeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Relics_RelicsStarUpgradeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_RelicsStarUpgradeRequest)
	if !ok {
		that2, ok := that.(Relics_RelicsStarUpgradeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RelicsId != that1.RelicsId {
		return false
	}
	return true
}
func (this *Relics_RelicsStarUpgradeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_RelicsStarUpgradeResponse)
	if !ok {
		that2, ok := that.(Relics_RelicsStarUpgradeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Relics_RelicsComposeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_RelicsComposeRequest)
	if !ok {
		that2, ok := that.(Relics_RelicsComposeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RelicsId != that1.RelicsId {
		return false
	}
	return true
}
func (this *Relics_RelicsComposeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_RelicsComposeResponse)
	if !ok {
		that2, ok := that.(Relics_RelicsComposeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Relics_RelicsReadRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_RelicsReadRequest)
	if !ok {
		that2, ok := that.(Relics_RelicsReadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Relics_RelicsReadResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_RelicsReadResponse)
	if !ok {
		that2, ok := that.(Relics_RelicsReadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Relics_RelicsSuitUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_RelicsSuitUpdatePush)
	if !ok {
		that2, ok := that.(Relics_RelicsSuitUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Suit.Equal(that1.Suit) {
		return false
	}
	return true
}
func (this *Relics_CheatRelicsLevelMaxRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_CheatRelicsLevelMaxRequest)
	if !ok {
		that2, ok := that.(Relics_CheatRelicsLevelMaxRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Relics_CheatRelicsLevelMaxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Relics_CheatRelicsLevelMaxResponse)
	if !ok {
		that2, ok := that.(Relics_CheatRelicsLevelMaxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *Relics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Relics_GetRelicsSuitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_GetRelicsSuitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_GetRelicsSuitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Relics_GetRelicsSuitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_GetRelicsSuitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_GetRelicsSuitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suit) > 0 {
		for iNdEx := len(m.Suit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Suit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelics(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Relics_RelicsLevelUpgradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_RelicsLevelUpgradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_RelicsLevelUpgradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelicsId != 0 {
		i = encodeVarintRelics(dAtA, i, uint64(m.RelicsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Relics_RelicsLevelUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_RelicsLevelUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_RelicsLevelUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Relics_RelicsStarUpgradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_RelicsStarUpgradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_RelicsStarUpgradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelicsId != 0 {
		i = encodeVarintRelics(dAtA, i, uint64(m.RelicsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Relics_RelicsStarUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_RelicsStarUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_RelicsStarUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Relics_RelicsComposeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_RelicsComposeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_RelicsComposeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelicsId != 0 {
		i = encodeVarintRelics(dAtA, i, uint64(m.RelicsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Relics_RelicsComposeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_RelicsComposeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_RelicsComposeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Relics_RelicsReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_RelicsReadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_RelicsReadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Relics_RelicsReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_RelicsReadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_RelicsReadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Relics_RelicsSuitUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_RelicsSuitUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_RelicsSuitUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Suit != nil {
		{
			size, err := m.Suit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelics(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Relics_CheatRelicsLevelMaxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_CheatRelicsLevelMaxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_CheatRelicsLevelMaxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Relics_CheatRelicsLevelMaxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relics_CheatRelicsLevelMaxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relics_CheatRelicsLevelMaxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRelics(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelics(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Relics) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Relics_GetRelicsSuitRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Relics_GetRelicsSuitResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("suit")
	w.RawByte('"')
	w.RawByte(':')
	if m.Suit == nil {
		w.RawString("null")
	} else if len(m.Suit) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Suit {
			v.JsonBytes(w)
			if i != len(m.Suit)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Relics_RelicsLevelUpgradeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RelicsId != 0 {
		w.RawByte('"')
		w.RawString("relics_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RelicsId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Relics_RelicsLevelUpgradeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Relics_RelicsStarUpgradeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RelicsId != 0 {
		w.RawByte('"')
		w.RawString("relics_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RelicsId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Relics_RelicsStarUpgradeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Relics_RelicsComposeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RelicsId != 0 {
		w.RawByte('"')
		w.RawString("relics_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RelicsId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Relics_RelicsComposeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Relics_RelicsReadRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Relics_RelicsReadResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Relics_RelicsSuitUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("suit")
	w.RawByte('"')
	w.RawByte(':')
	m.Suit.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Relics_CheatRelicsLevelMaxRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Relics_CheatRelicsLevelMaxResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Relics) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics) GoString() string {
	return m.String()
}

func (m *Relics_GetRelicsSuitRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_GetRelicsSuitRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_GetRelicsSuitRequest) GoString() string {
	return m.String()
}

func (m *Relics_GetRelicsSuitResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_GetRelicsSuitResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_GetRelicsSuitResponse) GoString() string {
	return m.String()
}

func (m *Relics_RelicsLevelUpgradeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_RelicsLevelUpgradeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_RelicsLevelUpgradeRequest) GoString() string {
	return m.String()
}

func (m *Relics_RelicsLevelUpgradeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_RelicsLevelUpgradeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_RelicsLevelUpgradeResponse) GoString() string {
	return m.String()
}

func (m *Relics_RelicsStarUpgradeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_RelicsStarUpgradeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_RelicsStarUpgradeRequest) GoString() string {
	return m.String()
}

func (m *Relics_RelicsStarUpgradeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_RelicsStarUpgradeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_RelicsStarUpgradeResponse) GoString() string {
	return m.String()
}

func (m *Relics_RelicsComposeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_RelicsComposeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_RelicsComposeRequest) GoString() string {
	return m.String()
}

func (m *Relics_RelicsComposeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_RelicsComposeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_RelicsComposeResponse) GoString() string {
	return m.String()
}

func (m *Relics_RelicsReadRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_RelicsReadRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_RelicsReadRequest) GoString() string {
	return m.String()
}

func (m *Relics_RelicsReadResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_RelicsReadResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_RelicsReadResponse) GoString() string {
	return m.String()
}

func (m *Relics_RelicsSuitUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_RelicsSuitUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_RelicsSuitUpdatePush) GoString() string {
	return m.String()
}

func (m *Relics_CheatRelicsLevelMaxRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_CheatRelicsLevelMaxRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_CheatRelicsLevelMaxRequest) GoString() string {
	return m.String()
}

func (m *Relics_CheatRelicsLevelMaxResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Relics_CheatRelicsLevelMaxResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Relics_CheatRelicsLevelMaxResponse) GoString() string {
	return m.String()
}

func (m *Relics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Relics_GetRelicsSuitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Relics_GetRelicsSuitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Suit) > 0 {
		for _, e := range m.Suit {
			l = e.Size()
			n += 1 + l + sovRelics(uint64(l))
		}
	}
	return n
}

func (m *Relics_RelicsLevelUpgradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelicsId != 0 {
		n += 1 + sovRelics(uint64(m.RelicsId))
	}
	return n
}

func (m *Relics_RelicsLevelUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Relics_RelicsStarUpgradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelicsId != 0 {
		n += 1 + sovRelics(uint64(m.RelicsId))
	}
	return n
}

func (m *Relics_RelicsStarUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Relics_RelicsComposeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelicsId != 0 {
		n += 1 + sovRelics(uint64(m.RelicsId))
	}
	return n
}

func (m *Relics_RelicsComposeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Relics_RelicsReadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Relics_RelicsReadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Relics_RelicsSuitUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Suit != nil {
		l = m.Suit.Size()
		n += 1 + l + sovRelics(uint64(l))
	}
	return n
}

func (m *Relics_CheatRelicsLevelMaxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Relics_CheatRelicsLevelMaxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRelics(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelics(x uint64) (n int) {
	return sovRelics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Relics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_GetRelicsSuitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRelicsSuitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRelicsSuitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_GetRelicsSuitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRelicsSuitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRelicsSuitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suit = append(m.Suit, &models.RelicsSuit{})
			if err := m.Suit[len(m.Suit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_RelicsLevelUpgradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsLevelUpgradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsLevelUpgradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelicsId", wireType)
			}
			m.RelicsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelicsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_RelicsLevelUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsLevelUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsLevelUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_RelicsStarUpgradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsStarUpgradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsStarUpgradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelicsId", wireType)
			}
			m.RelicsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelicsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_RelicsStarUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsStarUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsStarUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_RelicsComposeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsComposeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsComposeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelicsId", wireType)
			}
			m.RelicsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelicsId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_RelicsComposeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsComposeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsComposeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_RelicsReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_RelicsReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_RelicsSuitUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelicsSuitUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelicsSuitUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Suit == nil {
				m.Suit = &models.RelicsSuit{}
			}
			if err := m.Suit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_CheatRelicsLevelMaxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatRelicsLevelMaxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatRelicsLevelMaxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relics_CheatRelicsLevelMaxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatRelicsLevelMaxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatRelicsLevelMaxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRelics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelics
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelics
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelics
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelics        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelics          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelics = fmt.Errorf("proto: unexpected end of group")
)
