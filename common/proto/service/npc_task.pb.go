// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/npc_task.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NpcTaskErrorCode int32

const (
	NpcTaskErrorCode_ErrNpcTaskUnfinished    NpcTaskErrorCode = 0
	NpcTaskErrorCode_ErrNpcTaskAlreadyFinish NpcTaskErrorCode = 1
	NpcTaskErrorCode_ErrNpcTaskRefreshed     NpcTaskErrorCode = 2
	NpcTaskErrorCode_ErrNpcTaskNotExist      NpcTaskErrorCode = 3
	NpcTaskErrorCode_ErrNpcTaskLevelLow      NpcTaskErrorCode = 4
)

var NpcTaskErrorCode_name = map[int32]string{
	0: "ErrNpcTaskUnfinished",
	1: "ErrNpcTaskAlreadyFinish",
	2: "ErrNpcTaskRefreshed",
	3: "ErrNpcTaskNotExist",
	4: "ErrNpcTaskLevelLow",
}

var NpcTaskErrorCode_value = map[string]int32{
	"ErrNpcTaskUnfinished":    0,
	"ErrNpcTaskAlreadyFinish": 1,
	"ErrNpcTaskRefreshed":     2,
	"ErrNpcTaskNotExist":      3,
	"ErrNpcTaskLevelLow":      4,
}

func (NpcTaskErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0}
}

type NpcTask struct {
}

func (m *NpcTask) Reset()      { *m = NpcTask{} }
func (*NpcTask) ProtoMessage() {}
func (*NpcTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0}
}
func (m *NpcTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask.Merge(m, src)
}
func (m *NpcTask) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask proto.InternalMessageInfo

func (*NpcTask) XXX_MessageName() string {
	return "service.NpcTask"
}

// 获取npc任务
type NpcTask_GetNpcTaskRequest struct {
}

func (m *NpcTask_GetNpcTaskRequest) Reset()      { *m = NpcTask_GetNpcTaskRequest{} }
func (*NpcTask_GetNpcTaskRequest) ProtoMessage() {}
func (*NpcTask_GetNpcTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0, 0}
}
func (m *NpcTask_GetNpcTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask_GetNpcTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask_GetNpcTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask_GetNpcTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask_GetNpcTaskRequest.Merge(m, src)
}
func (m *NpcTask_GetNpcTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask_GetNpcTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask_GetNpcTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask_GetNpcTaskRequest proto.InternalMessageInfo

func (*NpcTask_GetNpcTaskRequest) XXX_MessageName() string {
	return "service.NpcTask.GetNpcTaskRequest"
}

type NpcTask_GetNpcTaskResponse struct {
	Task []*models.NpcTask `protobuf:"bytes,1,rep,name=task,proto3" json:"task,omitempty"`
}

func (m *NpcTask_GetNpcTaskResponse) Reset()      { *m = NpcTask_GetNpcTaskResponse{} }
func (*NpcTask_GetNpcTaskResponse) ProtoMessage() {}
func (*NpcTask_GetNpcTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0, 1}
}
func (m *NpcTask_GetNpcTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask_GetNpcTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask_GetNpcTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask_GetNpcTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask_GetNpcTaskResponse.Merge(m, src)
}
func (m *NpcTask_GetNpcTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask_GetNpcTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask_GetNpcTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask_GetNpcTaskResponse proto.InternalMessageInfo

func (m *NpcTask_GetNpcTaskResponse) GetTask() []*models.NpcTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (*NpcTask_GetNpcTaskResponse) XXX_MessageName() string {
	return "service.NpcTask.GetNpcTaskResponse"
}

// 提交npc任务
type NpcTask_SubmitNpcTaskRequest struct {
	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *NpcTask_SubmitNpcTaskRequest) Reset()      { *m = NpcTask_SubmitNpcTaskRequest{} }
func (*NpcTask_SubmitNpcTaskRequest) ProtoMessage() {}
func (*NpcTask_SubmitNpcTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0, 2}
}
func (m *NpcTask_SubmitNpcTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask_SubmitNpcTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask_SubmitNpcTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask_SubmitNpcTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask_SubmitNpcTaskRequest.Merge(m, src)
}
func (m *NpcTask_SubmitNpcTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask_SubmitNpcTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask_SubmitNpcTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask_SubmitNpcTaskRequest proto.InternalMessageInfo

func (m *NpcTask_SubmitNpcTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (*NpcTask_SubmitNpcTaskRequest) XXX_MessageName() string {
	return "service.NpcTask.SubmitNpcTaskRequest"
}

type NpcTask_SubmitNpcTaskResponse struct {
	Task    *models.NpcTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Rewards map[int64]int64 `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *NpcTask_SubmitNpcTaskResponse) Reset()      { *m = NpcTask_SubmitNpcTaskResponse{} }
func (*NpcTask_SubmitNpcTaskResponse) ProtoMessage() {}
func (*NpcTask_SubmitNpcTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0, 3}
}
func (m *NpcTask_SubmitNpcTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask_SubmitNpcTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask_SubmitNpcTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask_SubmitNpcTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask_SubmitNpcTaskResponse.Merge(m, src)
}
func (m *NpcTask_SubmitNpcTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask_SubmitNpcTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask_SubmitNpcTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask_SubmitNpcTaskResponse proto.InternalMessageInfo

func (m *NpcTask_SubmitNpcTaskResponse) GetTask() *models.NpcTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *NpcTask_SubmitNpcTaskResponse) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*NpcTask_SubmitNpcTaskResponse) XXX_MessageName() string {
	return "service.NpcTask.SubmitNpcTaskResponse"
}

type NpcTask_QuickFinishRequest struct {
	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *NpcTask_QuickFinishRequest) Reset()      { *m = NpcTask_QuickFinishRequest{} }
func (*NpcTask_QuickFinishRequest) ProtoMessage() {}
func (*NpcTask_QuickFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0, 4}
}
func (m *NpcTask_QuickFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask_QuickFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask_QuickFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask_QuickFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask_QuickFinishRequest.Merge(m, src)
}
func (m *NpcTask_QuickFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask_QuickFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask_QuickFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask_QuickFinishRequest proto.InternalMessageInfo

func (m *NpcTask_QuickFinishRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (*NpcTask_QuickFinishRequest) XXX_MessageName() string {
	return "service.NpcTask.QuickFinishRequest"
}

type NpcTask_QuickFinishResponse struct {
	Task    *models.NpcTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Rewards map[int64]int64 `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *NpcTask_QuickFinishResponse) Reset()      { *m = NpcTask_QuickFinishResponse{} }
func (*NpcTask_QuickFinishResponse) ProtoMessage() {}
func (*NpcTask_QuickFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0, 5}
}
func (m *NpcTask_QuickFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask_QuickFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask_QuickFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask_QuickFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask_QuickFinishResponse.Merge(m, src)
}
func (m *NpcTask_QuickFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask_QuickFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask_QuickFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask_QuickFinishResponse proto.InternalMessageInfo

func (m *NpcTask_QuickFinishResponse) GetTask() *models.NpcTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *NpcTask_QuickFinishResponse) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*NpcTask_QuickFinishResponse) XXX_MessageName() string {
	return "service.NpcTask.QuickFinishResponse"
}

type NpcTask_CheatAddNpcTaskRequest struct {
	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *NpcTask_CheatAddNpcTaskRequest) Reset()      { *m = NpcTask_CheatAddNpcTaskRequest{} }
func (*NpcTask_CheatAddNpcTaskRequest) ProtoMessage() {}
func (*NpcTask_CheatAddNpcTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0, 6}
}
func (m *NpcTask_CheatAddNpcTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask_CheatAddNpcTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask_CheatAddNpcTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask_CheatAddNpcTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask_CheatAddNpcTaskRequest.Merge(m, src)
}
func (m *NpcTask_CheatAddNpcTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask_CheatAddNpcTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask_CheatAddNpcTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask_CheatAddNpcTaskRequest proto.InternalMessageInfo

func (m *NpcTask_CheatAddNpcTaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (*NpcTask_CheatAddNpcTaskRequest) XXX_MessageName() string {
	return "service.NpcTask.CheatAddNpcTaskRequest"
}

type NpcTask_CheatAddNpcTaskResponse struct {
}

func (m *NpcTask_CheatAddNpcTaskResponse) Reset()      { *m = NpcTask_CheatAddNpcTaskResponse{} }
func (*NpcTask_CheatAddNpcTaskResponse) ProtoMessage() {}
func (*NpcTask_CheatAddNpcTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0, 7}
}
func (m *NpcTask_CheatAddNpcTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask_CheatAddNpcTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask_CheatAddNpcTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask_CheatAddNpcTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask_CheatAddNpcTaskResponse.Merge(m, src)
}
func (m *NpcTask_CheatAddNpcTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask_CheatAddNpcTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask_CheatAddNpcTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask_CheatAddNpcTaskResponse proto.InternalMessageInfo

func (*NpcTask_CheatAddNpcTaskResponse) XXX_MessageName() string {
	return "service.NpcTask.CheatAddNpcTaskResponse"
}

// npc任务更新推送
type NpcTask_NpcTaskUpdatePush struct {
	Task *models.NpcTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *NpcTask_NpcTaskUpdatePush) Reset()      { *m = NpcTask_NpcTaskUpdatePush{} }
func (*NpcTask_NpcTaskUpdatePush) ProtoMessage() {}
func (*NpcTask_NpcTaskUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_00073fc18494348b, []int{0, 8}
}
func (m *NpcTask_NpcTaskUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask_NpcTaskUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask_NpcTaskUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask_NpcTaskUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask_NpcTaskUpdatePush.Merge(m, src)
}
func (m *NpcTask_NpcTaskUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask_NpcTaskUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask_NpcTaskUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask_NpcTaskUpdatePush proto.InternalMessageInfo

func (m *NpcTask_NpcTaskUpdatePush) GetTask() *models.NpcTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (*NpcTask_NpcTaskUpdatePush) XXX_MessageName() string {
	return "service.NpcTask.NpcTaskUpdatePush"
}
func init() {
	proto.RegisterEnum("service.NpcTaskErrorCode", NpcTaskErrorCode_name, NpcTaskErrorCode_value)
	proto.RegisterType((*NpcTask)(nil), "service.NpcTask")
	proto.RegisterType((*NpcTask_GetNpcTaskRequest)(nil), "service.NpcTask.GetNpcTaskRequest")
	proto.RegisterType((*NpcTask_GetNpcTaskResponse)(nil), "service.NpcTask.GetNpcTaskResponse")
	proto.RegisterType((*NpcTask_SubmitNpcTaskRequest)(nil), "service.NpcTask.SubmitNpcTaskRequest")
	proto.RegisterType((*NpcTask_SubmitNpcTaskResponse)(nil), "service.NpcTask.SubmitNpcTaskResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.NpcTask.SubmitNpcTaskResponse.RewardsEntry")
	proto.RegisterType((*NpcTask_QuickFinishRequest)(nil), "service.NpcTask.QuickFinishRequest")
	proto.RegisterType((*NpcTask_QuickFinishResponse)(nil), "service.NpcTask.QuickFinishResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.NpcTask.QuickFinishResponse.RewardsEntry")
	proto.RegisterType((*NpcTask_CheatAddNpcTaskRequest)(nil), "service.NpcTask.CheatAddNpcTaskRequest")
	proto.RegisterType((*NpcTask_CheatAddNpcTaskResponse)(nil), "service.NpcTask.CheatAddNpcTaskResponse")
	proto.RegisterType((*NpcTask_NpcTaskUpdatePush)(nil), "service.NpcTask.NpcTaskUpdatePush")
}

func init() { proto.RegisterFile("proto/service/npc_task.proto", fileDescriptor_00073fc18494348b) }

var fileDescriptor_00073fc18494348b = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x4f, 0x68, 0x13, 0x41,
	0x14, 0xc6, 0x77, 0x92, 0xda, 0xe0, 0x28, 0x74, 0x3b, 0x4d, 0xcd, 0x3a, 0xca, 0x50, 0xf4, 0x52,
	0x84, 0x6e, 0x68, 0x0b, 0x52, 0x7b, 0xab, 0x25, 0x8a, 0xda, 0x06, 0x1b, 0xf5, 0xe2, 0xa5, 0x6c,
	0x77, 0xa7, 0x74, 0x49, 0xb2, 0x1b, 0x67, 0x36, 0xad, 0x39, 0x59, 0xea, 0xa5, 0x04, 0x8b, 0xf1,
	0x22, 0x1e, 0x04, 0x11, 0x3c, 0x14, 0x44, 0x11, 0x21, 0xb4, 0x58, 0xc4, 0x83, 0x07, 0x7b, 0xec,
	0xb1, 0x47, 0xdd, 0x64, 0x43, 0xbd, 0x79, 0xf1, 0x2e, 0xfb, 0x27, 0xe4, 0x6f, 0x31, 0x1e, 0xbc,
	0xe5, 0x7d, 0xef, 0x7b, 0x1f, 0x6f, 0x7e, 0xfb, 0x08, 0x3c, 0x9f, 0x63, 0xa6, 0x65, 0xc6, 0x39,
	0x65, 0xab, 0xba, 0x4a, 0xe3, 0x46, 0x4e, 0x5d, 0xb4, 0x14, 0x9e, 0x96, 0x3d, 0x19, 0x45, 0x02,
	0x1d, 0xc7, 0x7c, 0x5b, 0xd6, 0xd4, 0x68, 0x86, 0xc7, 0x97, 0x14, 0x4e, 0x7d, 0x07, 0x3e, 0xd7,
	0xd2, 0x68, 0x1d, 0xbf, 0xf0, 0xbb, 0x1f, 0x46, 0x92, 0x39, 0xf5, 0xae, 0xc2, 0xd3, 0x78, 0x08,
	0x0e, 0x5e, 0xa7, 0x56, 0x50, 0xa5, 0xe8, 0x83, 0x3c, 0xe5, 0x16, 0xbe, 0x02, 0x51, 0xb3, 0xc8,
	0x73, 0xa6, 0xc1, 0x29, 0xba, 0x08, 0xfb, 0xdc, 0x10, 0x09, 0x8c, 0x84, 0x47, 0x4f, 0x4d, 0x0c,
	0xc8, 0x7e, 0xb8, 0x5c, 0xb7, 0x79, 0x4d, 0xfc, 0x08, 0x46, 0xef, 0xe4, 0x97, 0xb2, 0x7a, 0x5b,
	0x24, 0x8a, 0xc1, 0x88, 0xdb, 0x5f, 0xd4, 0x35, 0x09, 0x8c, 0x80, 0xd1, 0x70, 0xaa, 0xdf, 0x2d,
	0x6f, 0x68, 0xd3, 0xc9, 0x8d, 0xb2, 0x74, 0x13, 0x9e, 0xcc, 0x2a, 0xba, 0x31, 0xe6, 0x4a, 0x28,
	0x9a, 0x60, 0x2c, 0x18, 0xbe, 0x67, 0x2c, 0xeb, 0x86, 0xce, 0x57, 0xa8, 0x86, 0x86, 0x1a, 0x6a,
	0x8a, 0x2e, 0x33, 0xea, 0x89, 0xa8, 0x21, 0x26, 0x4d, 0x2b, 0xf1, 0x50, 0xe7, 0x16, 0xfe, 0x06,
	0xe0, 0x70, 0xdb, 0x06, 0x1d, 0xfb, 0x83, 0x63, 0xf7, 0x47, 0xf3, 0x30, 0xc2, 0xe8, 0x9a, 0xc2,
	0x34, 0x2e, 0x85, 0xbc, 0x77, 0x4e, 0xca, 0x01, 0xec, 0xba, 0x51, 0xee, 0x9a, 0x2e, 0xa7, 0xfc,
	0xa9, 0x84, 0x61, 0xb1, 0x42, 0xaa, 0x9e, 0x81, 0xa7, 0xe1, 0xe9, 0xe6, 0x06, 0x12, 0x61, 0x38,
	0x4d, 0x0b, 0x01, 0x02, 0xf7, 0x27, 0x8a, 0xc2, 0x13, 0xab, 0x4a, 0x26, 0x4f, 0xa5, 0x90, 0xa7,
	0xf9, 0xc5, 0x74, 0x68, 0x0a, 0xe0, 0x75, 0x00, 0xd1, 0x42, 0x5e, 0x57, 0xd3, 0xd7, 0x3c, 0x08,
	0x7f, 0x25, 0xb9, 0xb0, 0x51, 0x96, 0xe6, 0x9b, 0x49, 0xc6, 0x1a, 0x78, 0x66, 0x32, 0x8c, 0x2a,
	0x5a, 0xc1, 0x4f, 0xea, 0x1d, 0xe6, 0x57, 0x00, 0x87, 0x5a, 0x56, 0xf8, 0x17, 0x94, 0xb7, 0xda,
	0x51, 0x8e, 0x77, 0xa0, 0xec, 0x92, 0xfd, 0x1f, 0x40, 0x8e, 0xc3, 0x33, 0xb3, 0x2b, 0x54, 0xb1,
	0x66, 0x34, 0xad, 0xc7, 0xab, 0xc4, 0x67, 0x61, 0xac, 0x63, 0xc4, 0xdf, 0x0f, 0x4f, 0xc1, 0xc1,
	0xfa, 0x79, 0xe6, 0x34, 0xc5, 0xa2, 0xb7, 0xf3, 0x7c, 0xa5, 0x27, 0x20, 0x97, 0x9e, 0x85, 0xa0,
	0x18, 0x28, 0x09, 0xc6, 0x4c, 0x36, 0x6b, 0x6a, 0x14, 0x4d, 0xc0, 0xae, 0x07, 0x2f, 0x0a, 0x58,
	0x2a, 0x96, 0xa5, 0x28, 0x42, 0xd5, 0xbd, 0x3d, 0xa7, 0xf8, 0xba, 0xba, 0xbb, 0x75, 0xf4, 0xf8,
	0x73, 0xed, 0x69, 0xa9, 0xfa, 0xe9, 0x0d, 0x9a, 0x80, 0xc7, 0x7d, 0x5a, 0x11, 0xe0, 0xe1, 0x62,
	0x59, 0x1a, 0x44, 0x03, 0xfe, 0x98, 0xb3, 0xf3, 0xd1, 0x79, 0xff, 0xa4, 0xb6, 0x59, 0x42, 0x32,
	0xec, 0xf6, 0xd5, 0xc5, 0x50, 0xa7, 0x7f, 0x73, 0xa7, 0xf6, 0xfc, 0x03, 0x1a, 0x83, 0x5d, 0x0e,
	0x42, 0x0c, 0xb7, 0xda, 0xab, 0xbb, 0x5b, 0xce, 0xbb, 0x17, 0xce, 0xcb, 0x6d, 0x74, 0xb9, 0xd9,
	0x3e, 0x47, 0x57, 0x69, 0x66, 0xce, 0x5c, 0x13, 0xfb, 0x30, 0x29, 0x96, 0x25, 0x8c, 0xa4, 0xe6,
	0x47, 0x38, 0x5f, 0xde, 0xfe, 0x5c, 0x7f, 0xe5, 0x3f, 0xe5, 0x6a, 0xf2, 0xf0, 0x07, 0x11, 0xb6,
	0x6d, 0x02, 0xf6, 0x6d, 0x02, 0x0e, 0x6c, 0x02, 0xbe, 0xdb, 0x04, 0x1c, 0xd9, 0x44, 0xf8, 0x65,
	0x13, 0x50, 0xaa, 0x10, 0x61, 0xbf, 0x42, 0xc0, 0x41, 0x85, 0x08, 0x87, 0x15, 0x22, 0xdc, 0x1f,
	0x51, 0x4d, 0xdd, 0x18, 0x73, 0xaf, 0x88, 0xb2, 0xb8, 0x6a, 0x66, 0xb3, 0xa6, 0x11, 0x6f, 0xf9,
	0xa7, 0x5c, 0xea, 0xf7, 0xca, 0xc9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xde, 0xfc, 0xff, 0xc2,
	0x41, 0x05, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask_GetNpcTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask_GetNpcTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask_SubmitNpcTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask_SubmitNpcTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask_QuickFinishRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask_QuickFinishResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask_CheatAddNpcTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask_CheatAddNpcTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask_NpcTaskUpdatePush.Get().(proto.Message)
	})
}

var poolNpcTask = &sync.Pool{New: func() interface{} { return &NpcTask{} }}

func (m *NpcTask) ReleasePool() { m.Reset(); poolNpcTask.Put(m); m = nil }

var poolNpcTask_GetNpcTaskRequest = &sync.Pool{New: func() interface{} { return &NpcTask_GetNpcTaskRequest{} }}

func (m *NpcTask_GetNpcTaskRequest) ReleasePool() {
	m.Reset()
	poolNpcTask_GetNpcTaskRequest.Put(m)
	m = nil
}

var poolNpcTask_GetNpcTaskResponse = &sync.Pool{New: func() interface{} { return &NpcTask_GetNpcTaskResponse{} }}

func (m *NpcTask_GetNpcTaskResponse) ReleasePool() {
	m.Reset()
	poolNpcTask_GetNpcTaskResponse.Put(m)
	m = nil
}

var poolNpcTask_SubmitNpcTaskRequest = &sync.Pool{New: func() interface{} { return &NpcTask_SubmitNpcTaskRequest{} }}

func (m *NpcTask_SubmitNpcTaskRequest) ReleasePool() {
	m.Reset()
	poolNpcTask_SubmitNpcTaskRequest.Put(m)
	m = nil
}

var poolNpcTask_SubmitNpcTaskResponse = &sync.Pool{New: func() interface{} { return &NpcTask_SubmitNpcTaskResponse{} }}

func (m *NpcTask_SubmitNpcTaskResponse) ReleasePool() {
	m.Reset()
	poolNpcTask_SubmitNpcTaskResponse.Put(m)
	m = nil
}

var poolNpcTask_QuickFinishRequest = &sync.Pool{New: func() interface{} { return &NpcTask_QuickFinishRequest{} }}

func (m *NpcTask_QuickFinishRequest) ReleasePool() {
	m.Reset()
	poolNpcTask_QuickFinishRequest.Put(m)
	m = nil
}

var poolNpcTask_QuickFinishResponse = &sync.Pool{New: func() interface{} { return &NpcTask_QuickFinishResponse{} }}

func (m *NpcTask_QuickFinishResponse) ReleasePool() {
	m.Reset()
	poolNpcTask_QuickFinishResponse.Put(m)
	m = nil
}

var poolNpcTask_CheatAddNpcTaskRequest = &sync.Pool{New: func() interface{} { return &NpcTask_CheatAddNpcTaskRequest{} }}

func (m *NpcTask_CheatAddNpcTaskRequest) ReleasePool() {
	m.Reset()
	poolNpcTask_CheatAddNpcTaskRequest.Put(m)
	m = nil
}

var poolNpcTask_CheatAddNpcTaskResponse = &sync.Pool{New: func() interface{} { return &NpcTask_CheatAddNpcTaskResponse{} }}

func (m *NpcTask_CheatAddNpcTaskResponse) ReleasePool() {
	m.Reset()
	poolNpcTask_CheatAddNpcTaskResponse.Put(m)
	m = nil
}

var poolNpcTask_NpcTaskUpdatePush = &sync.Pool{New: func() interface{} { return &NpcTask_NpcTaskUpdatePush{} }}

func (m *NpcTask_NpcTaskUpdatePush) ReleasePool() {
	m.Reset()
	poolNpcTask_NpcTaskUpdatePush.Put(m)
	m = nil
}
func (x NpcTaskErrorCode) String() string {
	s, ok := NpcTaskErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NpcTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask)
	if !ok {
		that2, ok := that.(NpcTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NpcTask_GetNpcTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask_GetNpcTaskRequest)
	if !ok {
		that2, ok := that.(NpcTask_GetNpcTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NpcTask_GetNpcTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask_GetNpcTaskResponse)
	if !ok {
		that2, ok := that.(NpcTask_GetNpcTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Task) != len(that1.Task) {
		return false
	}
	for i := range this.Task {
		if !this.Task[i].Equal(that1.Task[i]) {
			return false
		}
	}
	return true
}
func (this *NpcTask_SubmitNpcTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask_SubmitNpcTaskRequest)
	if !ok {
		that2, ok := that.(NpcTask_SubmitNpcTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *NpcTask_SubmitNpcTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask_SubmitNpcTaskResponse)
	if !ok {
		that2, ok := that.(NpcTask_SubmitNpcTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *NpcTask_QuickFinishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask_QuickFinishRequest)
	if !ok {
		that2, ok := that.(NpcTask_QuickFinishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *NpcTask_QuickFinishResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask_QuickFinishResponse)
	if !ok {
		that2, ok := that.(NpcTask_QuickFinishResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *NpcTask_CheatAddNpcTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask_CheatAddNpcTaskRequest)
	if !ok {
		that2, ok := that.(NpcTask_CheatAddNpcTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *NpcTask_CheatAddNpcTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask_CheatAddNpcTaskResponse)
	if !ok {
		that2, ok := that.(NpcTask_CheatAddNpcTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NpcTask_NpcTaskUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask_NpcTaskUpdatePush)
	if !ok {
		that2, ok := that.(NpcTask_NpcTaskUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (m *NpcTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NpcTask_GetNpcTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask_GetNpcTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask_GetNpcTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NpcTask_GetNpcTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask_GetNpcTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask_GetNpcTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Task) > 0 {
		for iNdEx := len(m.Task) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Task[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNpcTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NpcTask_SubmitNpcTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask_SubmitNpcTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask_SubmitNpcTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintNpcTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NpcTask_SubmitNpcTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask_SubmitNpcTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask_SubmitNpcTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintNpcTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintNpcTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNpcTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNpcTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NpcTask_QuickFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask_QuickFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask_QuickFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintNpcTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NpcTask_QuickFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask_QuickFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask_QuickFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintNpcTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintNpcTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNpcTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNpcTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NpcTask_CheatAddNpcTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask_CheatAddNpcTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask_CheatAddNpcTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintNpcTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NpcTask_CheatAddNpcTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask_CheatAddNpcTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask_CheatAddNpcTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NpcTask_NpcTaskUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask_NpcTaskUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask_NpcTaskUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNpcTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNpcTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovNpcTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *NpcTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NpcTask_GetNpcTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NpcTask_GetNpcTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	if m.Task == nil {
		w.RawString("null")
	} else if len(m.Task) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Task {
			v.JsonBytes(w)
			if i != len(m.Task)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTask_SubmitNpcTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTask_SubmitNpcTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTask_QuickFinishRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTask_QuickFinishResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTask_CheatAddNpcTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTask_CheatAddNpcTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NpcTask_NpcTaskUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask) GoString() string {
	return m.String()
}

func (m *NpcTask_GetNpcTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask_GetNpcTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask_GetNpcTaskRequest) GoString() string {
	return m.String()
}

func (m *NpcTask_GetNpcTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask_GetNpcTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask_GetNpcTaskResponse) GoString() string {
	return m.String()
}

func (m *NpcTask_SubmitNpcTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask_SubmitNpcTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask_SubmitNpcTaskRequest) GoString() string {
	return m.String()
}

func (m *NpcTask_SubmitNpcTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask_SubmitNpcTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask_SubmitNpcTaskResponse) GoString() string {
	return m.String()
}

func (m *NpcTask_QuickFinishRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask_QuickFinishRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask_QuickFinishRequest) GoString() string {
	return m.String()
}

func (m *NpcTask_QuickFinishResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask_QuickFinishResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask_QuickFinishResponse) GoString() string {
	return m.String()
}

func (m *NpcTask_CheatAddNpcTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask_CheatAddNpcTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask_CheatAddNpcTaskRequest) GoString() string {
	return m.String()
}

func (m *NpcTask_CheatAddNpcTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask_CheatAddNpcTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask_CheatAddNpcTaskResponse) GoString() string {
	return m.String()
}

func (m *NpcTask_NpcTaskUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask_NpcTaskUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask_NpcTaskUpdatePush) GoString() string {
	return m.String()
}

func (m *NpcTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NpcTask_GetNpcTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NpcTask_GetNpcTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Task) > 0 {
		for _, e := range m.Task {
			l = e.Size()
			n += 1 + l + sovNpcTask(uint64(l))
		}
	}
	return n
}

func (m *NpcTask_SubmitNpcTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovNpcTask(uint64(m.TaskId))
	}
	return n
}

func (m *NpcTask_SubmitNpcTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovNpcTask(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNpcTask(uint64(k)) + 1 + sovNpcTask(uint64(v))
			n += mapEntrySize + 1 + sovNpcTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NpcTask_QuickFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovNpcTask(uint64(m.TaskId))
	}
	return n
}

func (m *NpcTask_QuickFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovNpcTask(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNpcTask(uint64(k)) + 1 + sovNpcTask(uint64(v))
			n += mapEntrySize + 1 + sovNpcTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NpcTask_CheatAddNpcTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovNpcTask(uint64(m.TaskId))
	}
	return n
}

func (m *NpcTask_CheatAddNpcTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NpcTask_NpcTaskUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovNpcTask(uint64(l))
	}
	return n
}

func sovNpcTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNpcTask(x uint64) (n int) {
	return sovNpcTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NpcTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NpcTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NpcTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTask_GetNpcTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNpcTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNpcTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTask_GetNpcTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNpcTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNpcTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Task = append(m.Task, &models.NpcTask{})
			if err := m.Task[len(m.Task)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTask_SubmitNpcTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitNpcTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitNpcTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTask_SubmitNpcTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitNpcTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitNpcTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.NpcTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNpcTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNpcTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNpcTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTask_QuickFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuickFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuickFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTask_QuickFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuickFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuickFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.NpcTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNpcTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNpcTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNpcTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTask_CheatAddNpcTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddNpcTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddNpcTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTask_CheatAddNpcTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddNpcTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddNpcTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTask_NpcTaskUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NpcTaskUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NpcTaskUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.NpcTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNpcTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNpcTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNpcTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNpcTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNpcTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNpcTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNpcTask = fmt.Errorf("proto: unexpected end of group")
)
