// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/system-unlock.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SystemErrorCode int32

const (
	SystemErrorCode_ErrSystemLock SystemErrorCode = 0
)

var SystemErrorCode_name = map[int32]string{
	0: "ErrSystemLock",
}

var SystemErrorCode_value = map[string]int32{
	"ErrSystemLock": 0,
}

func (SystemErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_855781227801c511, []int{0}
}

type SystemUnlock struct {
}

func (m *SystemUnlock) Reset()      { *m = SystemUnlock{} }
func (*SystemUnlock) ProtoMessage() {}
func (*SystemUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_855781227801c511, []int{0}
}
func (m *SystemUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUnlock.Merge(m, src)
}
func (m *SystemUnlock) XXX_Size() int {
	return m.Size()
}
func (m *SystemUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUnlock proto.InternalMessageInfo

func (*SystemUnlock) XXX_MessageName() string {
	return "service.SystemUnlock"
}

type SystemUnlock_GetSystemUnlockRequest struct {
}

func (m *SystemUnlock_GetSystemUnlockRequest) Reset()      { *m = SystemUnlock_GetSystemUnlockRequest{} }
func (*SystemUnlock_GetSystemUnlockRequest) ProtoMessage() {}
func (*SystemUnlock_GetSystemUnlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_855781227801c511, []int{0, 0}
}
func (m *SystemUnlock_GetSystemUnlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUnlock_GetSystemUnlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUnlock_GetSystemUnlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUnlock_GetSystemUnlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUnlock_GetSystemUnlockRequest.Merge(m, src)
}
func (m *SystemUnlock_GetSystemUnlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *SystemUnlock_GetSystemUnlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUnlock_GetSystemUnlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUnlock_GetSystemUnlockRequest proto.InternalMessageInfo

func (*SystemUnlock_GetSystemUnlockRequest) XXX_MessageName() string {
	return "service.SystemUnlock.GetSystemUnlockRequest"
}

type SystemUnlock_GetSystemUnlockResponse struct {
	SystemId []models.SystemType `protobuf:"varint,1,rep,packed,name=system_id,json=systemId,proto3,enum=models.SystemType" json:"system_id,omitempty"`
	ClickId  []models.SystemType `protobuf:"varint,2,rep,packed,name=click_id,json=clickId,proto3,enum=models.SystemType" json:"click_id,omitempty"`
}

func (m *SystemUnlock_GetSystemUnlockResponse) Reset()      { *m = SystemUnlock_GetSystemUnlockResponse{} }
func (*SystemUnlock_GetSystemUnlockResponse) ProtoMessage() {}
func (*SystemUnlock_GetSystemUnlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_855781227801c511, []int{0, 1}
}
func (m *SystemUnlock_GetSystemUnlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUnlock_GetSystemUnlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUnlock_GetSystemUnlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUnlock_GetSystemUnlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUnlock_GetSystemUnlockResponse.Merge(m, src)
}
func (m *SystemUnlock_GetSystemUnlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *SystemUnlock_GetSystemUnlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUnlock_GetSystemUnlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUnlock_GetSystemUnlockResponse proto.InternalMessageInfo

func (m *SystemUnlock_GetSystemUnlockResponse) GetSystemId() []models.SystemType {
	if m != nil {
		return m.SystemId
	}
	return nil
}

func (m *SystemUnlock_GetSystemUnlockResponse) GetClickId() []models.SystemType {
	if m != nil {
		return m.ClickId
	}
	return nil
}

func (*SystemUnlock_GetSystemUnlockResponse) XXX_MessageName() string {
	return "service.SystemUnlock.GetSystemUnlockResponse"
}

type SystemUnlock_UnlockSystemRequest struct {
	SystemId models.SystemType `protobuf:"varint,1,opt,name=system_id,json=systemId,proto3,enum=models.SystemType" json:"system_id,omitempty"`
}

func (m *SystemUnlock_UnlockSystemRequest) Reset()      { *m = SystemUnlock_UnlockSystemRequest{} }
func (*SystemUnlock_UnlockSystemRequest) ProtoMessage() {}
func (*SystemUnlock_UnlockSystemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_855781227801c511, []int{0, 2}
}
func (m *SystemUnlock_UnlockSystemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUnlock_UnlockSystemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUnlock_UnlockSystemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUnlock_UnlockSystemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUnlock_UnlockSystemRequest.Merge(m, src)
}
func (m *SystemUnlock_UnlockSystemRequest) XXX_Size() int {
	return m.Size()
}
func (m *SystemUnlock_UnlockSystemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUnlock_UnlockSystemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUnlock_UnlockSystemRequest proto.InternalMessageInfo

func (m *SystemUnlock_UnlockSystemRequest) GetSystemId() models.SystemType {
	if m != nil {
		return m.SystemId
	}
	return models.SystemType_SystemPadding
}

func (*SystemUnlock_UnlockSystemRequest) XXX_MessageName() string {
	return "service.SystemUnlock.UnlockSystemRequest"
}

type SystemUnlock_UnlockSystemResponse struct {
}

func (m *SystemUnlock_UnlockSystemResponse) Reset()      { *m = SystemUnlock_UnlockSystemResponse{} }
func (*SystemUnlock_UnlockSystemResponse) ProtoMessage() {}
func (*SystemUnlock_UnlockSystemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_855781227801c511, []int{0, 3}
}
func (m *SystemUnlock_UnlockSystemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUnlock_UnlockSystemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUnlock_UnlockSystemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUnlock_UnlockSystemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUnlock_UnlockSystemResponse.Merge(m, src)
}
func (m *SystemUnlock_UnlockSystemResponse) XXX_Size() int {
	return m.Size()
}
func (m *SystemUnlock_UnlockSystemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUnlock_UnlockSystemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUnlock_UnlockSystemResponse proto.InternalMessageInfo

func (*SystemUnlock_UnlockSystemResponse) XXX_MessageName() string {
	return "service.SystemUnlock.UnlockSystemResponse"
}

type SystemUnlock_SystemUnlockPush struct {
	SystemId []models.SystemType `protobuf:"varint,1,rep,packed,name=system_id,json=systemId,proto3,enum=models.SystemType" json:"system_id,omitempty"`
}

func (m *SystemUnlock_SystemUnlockPush) Reset()      { *m = SystemUnlock_SystemUnlockPush{} }
func (*SystemUnlock_SystemUnlockPush) ProtoMessage() {}
func (*SystemUnlock_SystemUnlockPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_855781227801c511, []int{0, 4}
}
func (m *SystemUnlock_SystemUnlockPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUnlock_SystemUnlockPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUnlock_SystemUnlockPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUnlock_SystemUnlockPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUnlock_SystemUnlockPush.Merge(m, src)
}
func (m *SystemUnlock_SystemUnlockPush) XXX_Size() int {
	return m.Size()
}
func (m *SystemUnlock_SystemUnlockPush) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUnlock_SystemUnlockPush.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUnlock_SystemUnlockPush proto.InternalMessageInfo

func (m *SystemUnlock_SystemUnlockPush) GetSystemId() []models.SystemType {
	if m != nil {
		return m.SystemId
	}
	return nil
}

func (*SystemUnlock_SystemUnlockPush) XXX_MessageName() string {
	return "service.SystemUnlock.SystemUnlockPush"
}

type SystemUnlock_CheatUnlockSystemRequest struct {
	SystemId models.SystemType `protobuf:"varint,1,opt,name=system_id,json=systemId,proto3,enum=models.SystemType" json:"system_id,omitempty"`
}

func (m *SystemUnlock_CheatUnlockSystemRequest) Reset()      { *m = SystemUnlock_CheatUnlockSystemRequest{} }
func (*SystemUnlock_CheatUnlockSystemRequest) ProtoMessage() {}
func (*SystemUnlock_CheatUnlockSystemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_855781227801c511, []int{0, 5}
}
func (m *SystemUnlock_CheatUnlockSystemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUnlock_CheatUnlockSystemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUnlock_CheatUnlockSystemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUnlock_CheatUnlockSystemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUnlock_CheatUnlockSystemRequest.Merge(m, src)
}
func (m *SystemUnlock_CheatUnlockSystemRequest) XXX_Size() int {
	return m.Size()
}
func (m *SystemUnlock_CheatUnlockSystemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUnlock_CheatUnlockSystemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUnlock_CheatUnlockSystemRequest proto.InternalMessageInfo

func (m *SystemUnlock_CheatUnlockSystemRequest) GetSystemId() models.SystemType {
	if m != nil {
		return m.SystemId
	}
	return models.SystemType_SystemPadding
}

func (*SystemUnlock_CheatUnlockSystemRequest) XXX_MessageName() string {
	return "service.SystemUnlock.CheatUnlockSystemRequest"
}

type SystemUnlock_CheatUnlockSystemResponse struct {
}

func (m *SystemUnlock_CheatUnlockSystemResponse) Reset() {
	*m = SystemUnlock_CheatUnlockSystemResponse{}
}
func (*SystemUnlock_CheatUnlockSystemResponse) ProtoMessage() {}
func (*SystemUnlock_CheatUnlockSystemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_855781227801c511, []int{0, 6}
}
func (m *SystemUnlock_CheatUnlockSystemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemUnlock_CheatUnlockSystemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemUnlock_CheatUnlockSystemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemUnlock_CheatUnlockSystemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUnlock_CheatUnlockSystemResponse.Merge(m, src)
}
func (m *SystemUnlock_CheatUnlockSystemResponse) XXX_Size() int {
	return m.Size()
}
func (m *SystemUnlock_CheatUnlockSystemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUnlock_CheatUnlockSystemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUnlock_CheatUnlockSystemResponse proto.InternalMessageInfo

func (*SystemUnlock_CheatUnlockSystemResponse) XXX_MessageName() string {
	return "service.SystemUnlock.CheatUnlockSystemResponse"
}
func init() {
	proto.RegisterEnum("service.SystemErrorCode", SystemErrorCode_name, SystemErrorCode_value)
	proto.RegisterType((*SystemUnlock)(nil), "service.SystemUnlock")
	proto.RegisterType((*SystemUnlock_GetSystemUnlockRequest)(nil), "service.SystemUnlock.GetSystemUnlockRequest")
	proto.RegisterType((*SystemUnlock_GetSystemUnlockResponse)(nil), "service.SystemUnlock.GetSystemUnlockResponse")
	proto.RegisterType((*SystemUnlock_UnlockSystemRequest)(nil), "service.SystemUnlock.UnlockSystemRequest")
	proto.RegisterType((*SystemUnlock_UnlockSystemResponse)(nil), "service.SystemUnlock.UnlockSystemResponse")
	proto.RegisterType((*SystemUnlock_SystemUnlockPush)(nil), "service.SystemUnlock.SystemUnlockPush")
	proto.RegisterType((*SystemUnlock_CheatUnlockSystemRequest)(nil), "service.SystemUnlock.CheatUnlockSystemRequest")
	proto.RegisterType((*SystemUnlock_CheatUnlockSystemResponse)(nil), "service.SystemUnlock.CheatUnlockSystemResponse")
}

func init() { proto.RegisterFile("proto/service/system-unlock.proto", fileDescriptor_855781227801c511) }

var fileDescriptor_855781227801c511 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2f, 0xae, 0x2c, 0x2e, 0x49, 0xcd,
	0xd5, 0x2d, 0xcd, 0xcb, 0xc9, 0x4f, 0xce, 0xd6, 0x03, 0xcb, 0x09, 0xb1, 0x43, 0x25, 0xa5, 0xc4,
	0x21, 0x6a, 0x73, 0xf3, 0x53, 0x52, 0x73, 0x8a, 0xf5, 0x93, 0x12, 0x8b, 0x53, 0x21, 0x2a, 0xa4,
	0x24, 0x50, 0x24, 0x52, 0xf3, 0x4a, 0x73, 0x8b, 0x21, 0x32, 0x4a, 0x9b, 0x98, 0xb9, 0x78, 0x82,
	0xc1, 0x66, 0x86, 0x82, 0x8d, 0x94, 0x92, 0xe0, 0x12, 0x73, 0x4f, 0x2d, 0x41, 0x16, 0x0a, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0xaa, 0xe4, 0x12, 0xc7, 0x90, 0x29, 0x2e, 0xc8, 0xcf, 0x2b,
	0x4e, 0x15, 0xd2, 0xe7, 0xe2, 0x84, 0x38, 0x2c, 0x3e, 0x33, 0x45, 0x82, 0x51, 0x81, 0x59, 0x83,
	0xcf, 0x48, 0x48, 0x0f, 0x62, 0x9b, 0x1e, 0x44, 0x43, 0x48, 0x65, 0x41, 0x6a, 0x10, 0x07, 0x44,
	0x91, 0x67, 0x8a, 0x90, 0x2e, 0x17, 0x47, 0x72, 0x4e, 0x66, 0x72, 0x36, 0x48, 0x3d, 0x13, 0x4e,
	0xf5, 0xec, 0x60, 0x35, 0x9e, 0x29, 0x52, 0x6e, 0x5c, 0xc2, 0x10, 0x1b, 0x21, 0x92, 0x50, 0x17,
	0xa1, 0x5b, 0xcb, 0x48, 0xc8, 0x5a, 0x29, 0x31, 0x2e, 0x11, 0x54, 0x73, 0x20, 0xee, 0x97, 0x72,
	0xe6, 0x12, 0x40, 0xf6, 0x57, 0x40, 0x69, 0x71, 0x06, 0xc9, 0x7e, 0x92, 0xf2, 0xe6, 0x92, 0x70,
	0xce, 0x48, 0x4d, 0x2c, 0xa1, 0x8a, 0x4b, 0xa5, 0xb9, 0x24, 0xb1, 0x18, 0x06, 0x71, 0xae, 0x96,
	0x35, 0x17, 0x3f, 0x44, 0xc4, 0xb5, 0xa8, 0x28, 0xbf, 0xc8, 0x39, 0x3f, 0x25, 0x55, 0x48, 0x83,
	0x8b, 0xd7, 0xb5, 0xa8, 0x08, 0x22, 0xea, 0x93, 0x9f, 0x9c, 0x2d, 0xc0, 0x20, 0x25, 0xda, 0xb5,
	0x55, 0x42, 0x50, 0x88, 0xff, 0xf9, 0xe6, 0xdd, 0xcf, 0x77, 0xcf, 0x7f, 0x36, 0x67, 0xd5, 0x8b,
	0xe5, 0x8b, 0x5f, 0x4e, 0x69, 0x74, 0xf2, 0xbb, 0xf1, 0x50, 0x8e, 0x61, 0xc5, 0x23, 0x39, 0xc6,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39,
	0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0x38, 0xf1, 0x58, 0x8e, 0xf1, 0xc2, 0x63,
	0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x14, 0x92, 0xf3, 0x33, 0xf3, 0x74, 0x41, 0x09, 0x2c,
	0xb5, 0x48, 0x3f, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x4f, 0x1f, 0x25, 0x45, 0x26, 0xb1, 0x81, 0xb9,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x31, 0x2a, 0x2e, 0xa9, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSystemUnlock.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSystemUnlock_GetSystemUnlockRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSystemUnlock_GetSystemUnlockResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSystemUnlock_UnlockSystemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSystemUnlock_UnlockSystemResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSystemUnlock_SystemUnlockPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSystemUnlock_CheatUnlockSystemRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSystemUnlock_CheatUnlockSystemResponse.Get().(proto.Message)
	})
}

var poolSystemUnlock = &sync.Pool{New: func() interface{} { return &SystemUnlock{} }}

func (m *SystemUnlock) ReleasePool() { m.Reset(); poolSystemUnlock.Put(m); m = nil }

var poolSystemUnlock_GetSystemUnlockRequest = &sync.Pool{New: func() interface{} { return &SystemUnlock_GetSystemUnlockRequest{} }}

func (m *SystemUnlock_GetSystemUnlockRequest) ReleasePool() {
	m.Reset()
	poolSystemUnlock_GetSystemUnlockRequest.Put(m)
	m = nil
}

var poolSystemUnlock_GetSystemUnlockResponse = &sync.Pool{New: func() interface{} { return &SystemUnlock_GetSystemUnlockResponse{} }}

func (m *SystemUnlock_GetSystemUnlockResponse) ReleasePool() {
	m.Reset()
	poolSystemUnlock_GetSystemUnlockResponse.Put(m)
	m = nil
}

var poolSystemUnlock_UnlockSystemRequest = &sync.Pool{New: func() interface{} { return &SystemUnlock_UnlockSystemRequest{} }}

func (m *SystemUnlock_UnlockSystemRequest) ReleasePool() {
	m.Reset()
	poolSystemUnlock_UnlockSystemRequest.Put(m)
	m = nil
}

var poolSystemUnlock_UnlockSystemResponse = &sync.Pool{New: func() interface{} { return &SystemUnlock_UnlockSystemResponse{} }}

func (m *SystemUnlock_UnlockSystemResponse) ReleasePool() {
	m.Reset()
	poolSystemUnlock_UnlockSystemResponse.Put(m)
	m = nil
}

var poolSystemUnlock_SystemUnlockPush = &sync.Pool{New: func() interface{} { return &SystemUnlock_SystemUnlockPush{} }}

func (m *SystemUnlock_SystemUnlockPush) ReleasePool() {
	m.Reset()
	poolSystemUnlock_SystemUnlockPush.Put(m)
	m = nil
}

var poolSystemUnlock_CheatUnlockSystemRequest = &sync.Pool{New: func() interface{} { return &SystemUnlock_CheatUnlockSystemRequest{} }}

func (m *SystemUnlock_CheatUnlockSystemRequest) ReleasePool() {
	m.Reset()
	poolSystemUnlock_CheatUnlockSystemRequest.Put(m)
	m = nil
}

var poolSystemUnlock_CheatUnlockSystemResponse = &sync.Pool{New: func() interface{} { return &SystemUnlock_CheatUnlockSystemResponse{} }}

func (m *SystemUnlock_CheatUnlockSystemResponse) ReleasePool() {
	m.Reset()
	poolSystemUnlock_CheatUnlockSystemResponse.Put(m)
	m = nil
}
func (x SystemErrorCode) String() string {
	s, ok := SystemErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SystemUnlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemUnlock)
	if !ok {
		that2, ok := that.(SystemUnlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SystemUnlock_GetSystemUnlockRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemUnlock_GetSystemUnlockRequest)
	if !ok {
		that2, ok := that.(SystemUnlock_GetSystemUnlockRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SystemUnlock_GetSystemUnlockResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemUnlock_GetSystemUnlockResponse)
	if !ok {
		that2, ok := that.(SystemUnlock_GetSystemUnlockResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SystemId) != len(that1.SystemId) {
		return false
	}
	for i := range this.SystemId {
		if this.SystemId[i] != that1.SystemId[i] {
			return false
		}
	}
	if len(this.ClickId) != len(that1.ClickId) {
		return false
	}
	for i := range this.ClickId {
		if this.ClickId[i] != that1.ClickId[i] {
			return false
		}
	}
	return true
}
func (this *SystemUnlock_UnlockSystemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemUnlock_UnlockSystemRequest)
	if !ok {
		that2, ok := that.(SystemUnlock_UnlockSystemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SystemId != that1.SystemId {
		return false
	}
	return true
}
func (this *SystemUnlock_UnlockSystemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemUnlock_UnlockSystemResponse)
	if !ok {
		that2, ok := that.(SystemUnlock_UnlockSystemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SystemUnlock_SystemUnlockPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemUnlock_SystemUnlockPush)
	if !ok {
		that2, ok := that.(SystemUnlock_SystemUnlockPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SystemId) != len(that1.SystemId) {
		return false
	}
	for i := range this.SystemId {
		if this.SystemId[i] != that1.SystemId[i] {
			return false
		}
	}
	return true
}
func (this *SystemUnlock_CheatUnlockSystemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemUnlock_CheatUnlockSystemRequest)
	if !ok {
		that2, ok := that.(SystemUnlock_CheatUnlockSystemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SystemId != that1.SystemId {
		return false
	}
	return true
}
func (this *SystemUnlock_CheatUnlockSystemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemUnlock_CheatUnlockSystemResponse)
	if !ok {
		that2, ok := that.(SystemUnlock_CheatUnlockSystemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *SystemUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemUnlock_GetSystemUnlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUnlock_GetSystemUnlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUnlock_GetSystemUnlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemUnlock_GetSystemUnlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUnlock_GetSystemUnlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUnlock_GetSystemUnlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClickId) > 0 {
		dAtA2 := make([]byte, len(m.ClickId)*10)
		var j1 int
		for _, num := range m.ClickId {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSystemUnlock(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SystemId) > 0 {
		dAtA4 := make([]byte, len(m.SystemId)*10)
		var j3 int
		for _, num := range m.SystemId {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSystemUnlock(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemUnlock_UnlockSystemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUnlock_UnlockSystemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUnlock_UnlockSystemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemId != 0 {
		i = encodeVarintSystemUnlock(dAtA, i, uint64(m.SystemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemUnlock_UnlockSystemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUnlock_UnlockSystemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUnlock_UnlockSystemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SystemUnlock_SystemUnlockPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUnlock_SystemUnlockPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUnlock_SystemUnlockPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SystemId) > 0 {
		dAtA6 := make([]byte, len(m.SystemId)*10)
		var j5 int
		for _, num := range m.SystemId {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintSystemUnlock(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemUnlock_CheatUnlockSystemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUnlock_CheatUnlockSystemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUnlock_CheatUnlockSystemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemId != 0 {
		i = encodeVarintSystemUnlock(dAtA, i, uint64(m.SystemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemUnlock_CheatUnlockSystemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemUnlock_CheatUnlockSystemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemUnlock_CheatUnlockSystemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintSystemUnlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovSystemUnlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *SystemUnlock) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *SystemUnlock_GetSystemUnlockRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *SystemUnlock_GetSystemUnlockResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("system_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.SystemId == nil {
		w.RawString("null")
	} else if len(m.SystemId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.SystemId {
			w.Int64(int64(v))
			if i != len(m.SystemId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("click_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.ClickId == nil {
		w.RawString("null")
	} else if len(m.ClickId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ClickId {
			w.Int64(int64(v))
			if i != len(m.ClickId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SystemUnlock_UnlockSystemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SystemId != 0 {
		w.RawByte('"')
		w.RawString("system_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SystemId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SystemUnlock_UnlockSystemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *SystemUnlock_SystemUnlockPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("system_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.SystemId == nil {
		w.RawString("null")
	} else if len(m.SystemId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.SystemId {
			w.Int64(int64(v))
			if i != len(m.SystemId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SystemUnlock_CheatUnlockSystemRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SystemId != 0 {
		w.RawByte('"')
		w.RawString("system_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SystemId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SystemUnlock_CheatUnlockSystemResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *SystemUnlock) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SystemUnlock) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SystemUnlock) GoString() string {
	return m.String()
}

func (m *SystemUnlock_GetSystemUnlockRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SystemUnlock_GetSystemUnlockRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SystemUnlock_GetSystemUnlockRequest) GoString() string {
	return m.String()
}

func (m *SystemUnlock_GetSystemUnlockResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SystemUnlock_GetSystemUnlockResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SystemUnlock_GetSystemUnlockResponse) GoString() string {
	return m.String()
}

func (m *SystemUnlock_UnlockSystemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SystemUnlock_UnlockSystemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SystemUnlock_UnlockSystemRequest) GoString() string {
	return m.String()
}

func (m *SystemUnlock_UnlockSystemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SystemUnlock_UnlockSystemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SystemUnlock_UnlockSystemResponse) GoString() string {
	return m.String()
}

func (m *SystemUnlock_SystemUnlockPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SystemUnlock_SystemUnlockPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SystemUnlock_SystemUnlockPush) GoString() string {
	return m.String()
}

func (m *SystemUnlock_CheatUnlockSystemRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SystemUnlock_CheatUnlockSystemRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SystemUnlock_CheatUnlockSystemRequest) GoString() string {
	return m.String()
}

func (m *SystemUnlock_CheatUnlockSystemResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SystemUnlock_CheatUnlockSystemResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SystemUnlock_CheatUnlockSystemResponse) GoString() string {
	return m.String()
}

func (m *SystemUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemUnlock_GetSystemUnlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemUnlock_GetSystemUnlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SystemId) > 0 {
		l = 0
		for _, e := range m.SystemId {
			l += sovSystemUnlock(uint64(e))
		}
		n += 1 + sovSystemUnlock(uint64(l)) + l
	}
	if len(m.ClickId) > 0 {
		l = 0
		for _, e := range m.ClickId {
			l += sovSystemUnlock(uint64(e))
		}
		n += 1 + sovSystemUnlock(uint64(l)) + l
	}
	return n
}

func (m *SystemUnlock_UnlockSystemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemId != 0 {
		n += 1 + sovSystemUnlock(uint64(m.SystemId))
	}
	return n
}

func (m *SystemUnlock_UnlockSystemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SystemUnlock_SystemUnlockPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SystemId) > 0 {
		l = 0
		for _, e := range m.SystemId {
			l += sovSystemUnlock(uint64(e))
		}
		n += 1 + sovSystemUnlock(uint64(l)) + l
	}
	return n
}

func (m *SystemUnlock_CheatUnlockSystemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemId != 0 {
		n += 1 + sovSystemUnlock(uint64(m.SystemId))
	}
	return n
}

func (m *SystemUnlock_CheatUnlockSystemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSystemUnlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSystemUnlock(x uint64) (n int) {
	return sovSystemUnlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemUnlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystemUnlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSystemUnlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemUnlock_GetSystemUnlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemUnlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSystemUnlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSystemUnlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystemUnlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSystemUnlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemUnlock_GetSystemUnlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemUnlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSystemUnlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSystemUnlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v models.SystemType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSystemUnlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= models.SystemType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SystemId = append(m.SystemId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSystemUnlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSystemUnlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSystemUnlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SystemId) == 0 {
					m.SystemId = make([]models.SystemType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v models.SystemType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSystemUnlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= models.SystemType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SystemId = append(m.SystemId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v models.SystemType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSystemUnlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= models.SystemType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ClickId = append(m.ClickId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSystemUnlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSystemUnlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSystemUnlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ClickId) == 0 {
					m.ClickId = make([]models.SystemType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v models.SystemType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSystemUnlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= models.SystemType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ClickId = append(m.ClickId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystemUnlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSystemUnlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemUnlock_UnlockSystemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemUnlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockSystemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockSystemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
			m.SystemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemUnlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemId |= models.SystemType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystemUnlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSystemUnlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemUnlock_UnlockSystemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemUnlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockSystemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockSystemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystemUnlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSystemUnlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemUnlock_SystemUnlockPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemUnlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemUnlockPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemUnlockPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v models.SystemType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSystemUnlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= models.SystemType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SystemId = append(m.SystemId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSystemUnlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSystemUnlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSystemUnlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SystemId) == 0 {
					m.SystemId = make([]models.SystemType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v models.SystemType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSystemUnlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= models.SystemType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SystemId = append(m.SystemId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystemUnlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSystemUnlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemUnlock_CheatUnlockSystemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemUnlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatUnlockSystemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatUnlockSystemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
			m.SystemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemUnlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemId |= models.SystemType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystemUnlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSystemUnlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemUnlock_CheatUnlockSystemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemUnlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatUnlockSystemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatUnlockSystemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystemUnlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSystemUnlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSystemUnlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSystemUnlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystemUnlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystemUnlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSystemUnlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSystemUnlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSystemUnlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSystemUnlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSystemUnlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSystemUnlock = fmt.Errorf("proto: unexpected end of group")
)
