// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/ritual_task.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RitualTaskErrorCode int32

const (
	RitualTaskErrorCode_ErrChaosRitualNotStart     RitualTaskErrorCode = 0
	RitualTaskErrorCode_ErrChaosRitualNotCompleted RitualTaskErrorCode = 1
)

var RitualTaskErrorCode_name = map[int32]string{
	0: "ErrChaosRitualNotStart",
	1: "ErrChaosRitualNotCompleted",
}

var RitualTaskErrorCode_value = map[string]int32{
	"ErrChaosRitualNotStart":     0,
	"ErrChaosRitualNotCompleted": 1,
}

func (RitualTaskErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0}
}

type RitualTask struct {
}

func (m *RitualTask) Reset()      { *m = RitualTask{} }
func (*RitualTask) ProtoMessage() {}
func (*RitualTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0}
}
func (m *RitualTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask.Merge(m, src)
}
func (m *RitualTask) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask proto.InternalMessageInfo

func (*RitualTask) XXX_MessageName() string {
	return "service.RitualTask"
}

// 获取仪式信息
type RitualTask_RitualInfoRequest struct {
}

func (m *RitualTask_RitualInfoRequest) Reset()      { *m = RitualTask_RitualInfoRequest{} }
func (*RitualTask_RitualInfoRequest) ProtoMessage() {}
func (*RitualTask_RitualInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 0}
}
func (m *RitualTask_RitualInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_RitualInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_RitualInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_RitualInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_RitualInfoRequest.Merge(m, src)
}
func (m *RitualTask_RitualInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_RitualInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_RitualInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_RitualInfoRequest proto.InternalMessageInfo

func (*RitualTask_RitualInfoRequest) XXX_MessageName() string {
	return "service.RitualTask.RitualInfoRequest"
}

type RitualTask_RitualInfoResponse struct {
	Info *models.ChaosRitual `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RitualTask_RitualInfoResponse) Reset()      { *m = RitualTask_RitualInfoResponse{} }
func (*RitualTask_RitualInfoResponse) ProtoMessage() {}
func (*RitualTask_RitualInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 1}
}
func (m *RitualTask_RitualInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_RitualInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_RitualInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_RitualInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_RitualInfoResponse.Merge(m, src)
}
func (m *RitualTask_RitualInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_RitualInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_RitualInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_RitualInfoResponse proto.InternalMessageInfo

func (m *RitualTask_RitualInfoResponse) GetInfo() *models.ChaosRitual {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*RitualTask_RitualInfoResponse) XXX_MessageName() string {
	return "service.RitualTask.RitualInfoResponse"
}

// 设置已播放CG
type RitualTask_PlayRitualCGRequest struct {
}

func (m *RitualTask_PlayRitualCGRequest) Reset()      { *m = RitualTask_PlayRitualCGRequest{} }
func (*RitualTask_PlayRitualCGRequest) ProtoMessage() {}
func (*RitualTask_PlayRitualCGRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 2}
}
func (m *RitualTask_PlayRitualCGRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_PlayRitualCGRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_PlayRitualCGRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_PlayRitualCGRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_PlayRitualCGRequest.Merge(m, src)
}
func (m *RitualTask_PlayRitualCGRequest) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_PlayRitualCGRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_PlayRitualCGRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_PlayRitualCGRequest proto.InternalMessageInfo

func (*RitualTask_PlayRitualCGRequest) XXX_MessageName() string {
	return "service.RitualTask.PlayRitualCGRequest"
}

type RitualTask_PlayRitualCGResponse struct {
}

func (m *RitualTask_PlayRitualCGResponse) Reset()      { *m = RitualTask_PlayRitualCGResponse{} }
func (*RitualTask_PlayRitualCGResponse) ProtoMessage() {}
func (*RitualTask_PlayRitualCGResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 3}
}
func (m *RitualTask_PlayRitualCGResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_PlayRitualCGResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_PlayRitualCGResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_PlayRitualCGResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_PlayRitualCGResponse.Merge(m, src)
}
func (m *RitualTask_PlayRitualCGResponse) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_PlayRitualCGResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_PlayRitualCGResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_PlayRitualCGResponse proto.InternalMessageInfo

func (*RitualTask_PlayRitualCGResponse) XXX_MessageName() string {
	return "service.RitualTask.PlayRitualCGResponse"
}

// 提交仪式任务
type RitualTask_SubmitRitualTaskRequest struct {
	SubTaskId int64 `protobuf:"varint,1,opt,name=sub_task_id,json=subTaskId,proto3" json:"sub_task_id,omitempty"`
}

func (m *RitualTask_SubmitRitualTaskRequest) Reset()      { *m = RitualTask_SubmitRitualTaskRequest{} }
func (*RitualTask_SubmitRitualTaskRequest) ProtoMessage() {}
func (*RitualTask_SubmitRitualTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 4}
}
func (m *RitualTask_SubmitRitualTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_SubmitRitualTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_SubmitRitualTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_SubmitRitualTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_SubmitRitualTaskRequest.Merge(m, src)
}
func (m *RitualTask_SubmitRitualTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_SubmitRitualTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_SubmitRitualTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_SubmitRitualTaskRequest proto.InternalMessageInfo

func (m *RitualTask_SubmitRitualTaskRequest) GetSubTaskId() int64 {
	if m != nil {
		return m.SubTaskId
	}
	return 0
}

func (*RitualTask_SubmitRitualTaskRequest) XXX_MessageName() string {
	return "service.RitualTask.SubmitRitualTaskRequest"
}

type RitualTask_SubmitRitualTaskResponse struct {
	Task    *models.RitualTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Rewards map[int64]int64    `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *RitualTask_SubmitRitualTaskResponse) Reset()      { *m = RitualTask_SubmitRitualTaskResponse{} }
func (*RitualTask_SubmitRitualTaskResponse) ProtoMessage() {}
func (*RitualTask_SubmitRitualTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 5}
}
func (m *RitualTask_SubmitRitualTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_SubmitRitualTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_SubmitRitualTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_SubmitRitualTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_SubmitRitualTaskResponse.Merge(m, src)
}
func (m *RitualTask_SubmitRitualTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_SubmitRitualTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_SubmitRitualTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_SubmitRitualTaskResponse proto.InternalMessageInfo

func (m *RitualTask_SubmitRitualTaskResponse) GetTask() *models.RitualTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *RitualTask_SubmitRitualTaskResponse) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*RitualTask_SubmitRitualTaskResponse) XXX_MessageName() string {
	return "service.RitualTask.SubmitRitualTaskResponse"
}

// 举行仪式
type RitualTask_PerformRitualRequest struct {
}

func (m *RitualTask_PerformRitualRequest) Reset()      { *m = RitualTask_PerformRitualRequest{} }
func (*RitualTask_PerformRitualRequest) ProtoMessage() {}
func (*RitualTask_PerformRitualRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 6}
}
func (m *RitualTask_PerformRitualRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_PerformRitualRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_PerformRitualRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_PerformRitualRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_PerformRitualRequest.Merge(m, src)
}
func (m *RitualTask_PerformRitualRequest) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_PerformRitualRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_PerformRitualRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_PerformRitualRequest proto.InternalMessageInfo

func (*RitualTask_PerformRitualRequest) XXX_MessageName() string {
	return "service.RitualTask.PerformRitualRequest"
}

type RitualTask_PerformRitualResponse struct {
	Info    *models.ChaosRitual `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	HeroId  int64               `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Rewards map[int64]int64     `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *RitualTask_PerformRitualResponse) Reset()      { *m = RitualTask_PerformRitualResponse{} }
func (*RitualTask_PerformRitualResponse) ProtoMessage() {}
func (*RitualTask_PerformRitualResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 7}
}
func (m *RitualTask_PerformRitualResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_PerformRitualResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_PerformRitualResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_PerformRitualResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_PerformRitualResponse.Merge(m, src)
}
func (m *RitualTask_PerformRitualResponse) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_PerformRitualResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_PerformRitualResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_PerformRitualResponse proto.InternalMessageInfo

func (m *RitualTask_PerformRitualResponse) GetInfo() *models.ChaosRitual {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *RitualTask_PerformRitualResponse) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *RitualTask_PerformRitualResponse) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*RitualTask_PerformRitualResponse) XXX_MessageName() string {
	return "service.RitualTask.PerformRitualResponse"
}

// 作弊完成任务
type RitualTask_CheatFinishTaskRequest struct {
	SubTaskId int64 `protobuf:"varint,1,opt,name=sub_task_id,json=subTaskId,proto3" json:"sub_task_id,omitempty"`
	IsAll     bool  `protobuf:"varint,2,opt,name=is_all,json=isAll,proto3" json:"is_all,omitempty"`
}

func (m *RitualTask_CheatFinishTaskRequest) Reset()      { *m = RitualTask_CheatFinishTaskRequest{} }
func (*RitualTask_CheatFinishTaskRequest) ProtoMessage() {}
func (*RitualTask_CheatFinishTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 8}
}
func (m *RitualTask_CheatFinishTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_CheatFinishTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_CheatFinishTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_CheatFinishTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_CheatFinishTaskRequest.Merge(m, src)
}
func (m *RitualTask_CheatFinishTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_CheatFinishTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_CheatFinishTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_CheatFinishTaskRequest proto.InternalMessageInfo

func (m *RitualTask_CheatFinishTaskRequest) GetSubTaskId() int64 {
	if m != nil {
		return m.SubTaskId
	}
	return 0
}

func (m *RitualTask_CheatFinishTaskRequest) GetIsAll() bool {
	if m != nil {
		return m.IsAll
	}
	return false
}

func (*RitualTask_CheatFinishTaskRequest) XXX_MessageName() string {
	return "service.RitualTask.CheatFinishTaskRequest"
}

type RitualTask_CheatFinishTaskResponse struct {
	Info *models.ChaosRitual `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RitualTask_CheatFinishTaskResponse) Reset()      { *m = RitualTask_CheatFinishTaskResponse{} }
func (*RitualTask_CheatFinishTaskResponse) ProtoMessage() {}
func (*RitualTask_CheatFinishTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 9}
}
func (m *RitualTask_CheatFinishTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_CheatFinishTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_CheatFinishTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_CheatFinishTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_CheatFinishTaskResponse.Merge(m, src)
}
func (m *RitualTask_CheatFinishTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_CheatFinishTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_CheatFinishTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_CheatFinishTaskResponse proto.InternalMessageInfo

func (m *RitualTask_CheatFinishTaskResponse) GetInfo() *models.ChaosRitual {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*RitualTask_CheatFinishTaskResponse) XXX_MessageName() string {
	return "service.RitualTask.CheatFinishTaskResponse"
}

// 仪式任务更新推送
type RitualTask_RitualTaskUpdatePush struct {
	Task *models.RitualTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *RitualTask_RitualTaskUpdatePush) Reset()      { *m = RitualTask_RitualTaskUpdatePush{} }
func (*RitualTask_RitualTaskUpdatePush) ProtoMessage() {}
func (*RitualTask_RitualTaskUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 10}
}
func (m *RitualTask_RitualTaskUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_RitualTaskUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_RitualTaskUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_RitualTaskUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_RitualTaskUpdatePush.Merge(m, src)
}
func (m *RitualTask_RitualTaskUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_RitualTaskUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_RitualTaskUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_RitualTaskUpdatePush proto.InternalMessageInfo

func (m *RitualTask_RitualTaskUpdatePush) GetTask() *models.RitualTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (*RitualTask_RitualTaskUpdatePush) XXX_MessageName() string {
	return "service.RitualTask.RitualTaskUpdatePush"
}

// 仪式解锁推送
type RitualTask_RitualUnlockPush struct {
	Info *models.ChaosRitual `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RitualTask_RitualUnlockPush) Reset()      { *m = RitualTask_RitualUnlockPush{} }
func (*RitualTask_RitualUnlockPush) ProtoMessage() {}
func (*RitualTask_RitualUnlockPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_da55aca63b6ca1f5, []int{0, 11}
}
func (m *RitualTask_RitualUnlockPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask_RitualUnlockPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask_RitualUnlockPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask_RitualUnlockPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask_RitualUnlockPush.Merge(m, src)
}
func (m *RitualTask_RitualUnlockPush) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask_RitualUnlockPush) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask_RitualUnlockPush.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask_RitualUnlockPush proto.InternalMessageInfo

func (m *RitualTask_RitualUnlockPush) GetInfo() *models.ChaosRitual {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*RitualTask_RitualUnlockPush) XXX_MessageName() string {
	return "service.RitualTask.RitualUnlockPush"
}
func init() {
	proto.RegisterEnum("service.RitualTaskErrorCode", RitualTaskErrorCode_name, RitualTaskErrorCode_value)
	proto.RegisterType((*RitualTask)(nil), "service.RitualTask")
	proto.RegisterType((*RitualTask_RitualInfoRequest)(nil), "service.RitualTask.RitualInfoRequest")
	proto.RegisterType((*RitualTask_RitualInfoResponse)(nil), "service.RitualTask.RitualInfoResponse")
	proto.RegisterType((*RitualTask_PlayRitualCGRequest)(nil), "service.RitualTask.PlayRitualCGRequest")
	proto.RegisterType((*RitualTask_PlayRitualCGResponse)(nil), "service.RitualTask.PlayRitualCGResponse")
	proto.RegisterType((*RitualTask_SubmitRitualTaskRequest)(nil), "service.RitualTask.SubmitRitualTaskRequest")
	proto.RegisterType((*RitualTask_SubmitRitualTaskResponse)(nil), "service.RitualTask.SubmitRitualTaskResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.RitualTask.SubmitRitualTaskResponse.RewardsEntry")
	proto.RegisterType((*RitualTask_PerformRitualRequest)(nil), "service.RitualTask.PerformRitualRequest")
	proto.RegisterType((*RitualTask_PerformRitualResponse)(nil), "service.RitualTask.PerformRitualResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.RitualTask.PerformRitualResponse.RewardsEntry")
	proto.RegisterType((*RitualTask_CheatFinishTaskRequest)(nil), "service.RitualTask.CheatFinishTaskRequest")
	proto.RegisterType((*RitualTask_CheatFinishTaskResponse)(nil), "service.RitualTask.CheatFinishTaskResponse")
	proto.RegisterType((*RitualTask_RitualTaskUpdatePush)(nil), "service.RitualTask.RitualTaskUpdatePush")
	proto.RegisterType((*RitualTask_RitualUnlockPush)(nil), "service.RitualTask.RitualUnlockPush")
}

func init() { proto.RegisterFile("proto/service/ritual_task.proto", fileDescriptor_da55aca63b6ca1f5) }

var fileDescriptor_da55aca63b6ca1f5 = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x4f, 0x13, 0x4f,
	0x14, 0xef, 0x50, 0xa0, 0xdf, 0xef, 0xc3, 0xc4, 0x32, 0xa5, 0xb4, 0x19, 0x93, 0x91, 0x78, 0x50,
	0x62, 0x62, 0x1b, 0x31, 0x31, 0x02, 0xd1, 0x44, 0x1a, 0x34, 0x5c, 0x90, 0x2c, 0x72, 0xf1, 0x42,
	0xa6, 0xdd, 0x21, 0xdd, 0x74, 0xbb, 0x53, 0x67, 0x66, 0x31, 0xdc, 0xb8, 0x98, 0x08, 0x9a, 0xc8,
	0x1f, 0xc0, 0xc5, 0x93, 0x86, 0x83, 0x27, 0x39, 0xc1, 0x1f, 0xc0, 0x91, 0xc4, 0x0b, 0x47, 0xdd,
	0xd2, 0xea, 0xd1, 0x3f, 0xc1, 0xec, 0xec, 0x92, 0x16, 0x8b, 0x09, 0x3d, 0x78, 0xdb, 0xf7, 0xde,
	0xe7, 0xc7, 0xdb, 0xcf, 0xbe, 0x2c, 0x5c, 0x6f, 0x48, 0xa1, 0x45, 0x51, 0x71, 0xb9, 0xee, 0x54,
	0x78, 0x51, 0x3a, 0xda, 0x67, 0xee, 0xaa, 0x66, 0xaa, 0x56, 0x30, 0x13, 0x9c, 0x8a, 0x47, 0x24,
	0x17, 0x21, 0xeb, 0xc2, 0xe6, 0xae, 0x2a, 0x96, 0x99, 0xe2, 0x11, 0x82, 0xd0, 0x73, 0x83, 0x1e,
	0x85, 0x1b, 0x5f, 0x52, 0x00, 0x96, 0xe9, 0x3e, 0x67, 0xaa, 0x46, 0x32, 0x30, 0x1a, 0x55, 0x0b,
	0xde, 0x9a, 0xb0, 0xf8, 0x4b, 0x9f, 0x2b, 0x4d, 0x1e, 0x02, 0xee, 0x6e, 0xaa, 0x86, 0xf0, 0x14,
	0xc7, 0xb7, 0x60, 0xd0, 0xf1, 0xd6, 0x44, 0x1e, 0x4d, 0xa0, 0xc9, 0x91, 0xa9, 0x4c, 0x21, 0xb2,
	0x28, 0x94, 0xaa, 0x4c, 0xa8, 0x08, 0x6e, 0x19, 0x00, 0xc9, 0x42, 0x66, 0xc9, 0x65, 0x1b, 0x51,
	0xaf, 0xf4, 0xf4, 0x4c, 0x75, 0x1c, 0xc6, 0xce, 0xb7, 0x23, 0x5d, 0x32, 0x0d, 0xb9, 0x65, 0xbf,
	0x5c, 0x77, 0x74, 0x67, 0xad, 0x98, 0x82, 0x29, 0x8c, 0x28, 0xbf, 0x6c, 0xd6, 0x5f, 0x75, 0x6c,
	0xe3, 0x9c, 0xb4, 0xfe, 0x57, 0x7e, 0x39, 0x04, 0x2d, 0xd8, 0xe4, 0x2b, 0x82, 0x7c, 0x2f, 0x37,
	0xde, 0xf7, 0x26, 0x0c, 0x86, 0xc4, 0x78, 0x5f, 0x7c, 0xb6, 0x6f, 0x17, 0xd2, 0xcc, 0xf1, 0x32,
	0xa4, 0x24, 0x7f, 0xc5, 0xa4, 0xad, 0xf2, 0x03, 0x13, 0xc9, 0xc9, 0x91, 0xa9, 0xe9, 0x42, 0x9c,
	0x72, 0x17, 0xb6, 0xf0, 0x37, 0x9b, 0x82, 0x15, 0x71, 0xe7, 0x3d, 0x2d, 0x37, 0xac, 0x33, 0x25,
	0x32, 0x03, 0x57, 0xba, 0x07, 0x38, 0x0d, 0xc9, 0x1a, 0xdf, 0x88, 0xdf, 0x20, 0x7c, 0xc4, 0x63,
	0x30, 0xb4, 0xce, 0x5c, 0x9f, 0xe7, 0x07, 0x4c, 0x2f, 0x2a, 0x66, 0x06, 0x1e, 0x20, 0x13, 0x14,
	0x97, 0x6b, 0x42, 0xd6, 0xe3, 0x58, 0xe3, 0x00, 0x7f, 0x20, 0xc8, 0xfe, 0x31, 0xe8, 0xf3, 0xd3,
	0xe0, 0x1c, 0xa4, 0xaa, 0x5c, 0x8a, 0x30, 0xcc, 0xc8, 0x76, 0x38, 0x2c, 0x17, 0x6c, 0xbc, 0xd4,
	0x09, 0x21, 0x69, 0x42, 0xb8, 0x7f, 0x51, 0x08, 0x17, 0xba, 0xff, 0x83, 0x04, 0x9e, 0xc1, 0x78,
	0xa9, 0xca, 0x99, 0x7e, 0xe2, 0x78, 0x8e, 0xaa, 0xf6, 0x71, 0x11, 0x38, 0x0b, 0xc3, 0x8e, 0x5a,
	0x65, 0xae, 0x6b, 0x44, 0xff, 0xb3, 0x86, 0x1c, 0xf5, 0xd8, 0x75, 0xc9, 0x1c, 0xe4, 0x7a, 0x04,
	0xfb, 0x3d, 0xeb, 0x47, 0x30, 0xd6, 0x89, 0x62, 0xa5, 0x61, 0x33, 0xcd, 0x97, 0x7c, 0x55, 0xbd,
	0xec, 0x9d, 0x91, 0x59, 0x48, 0x47, 0xbd, 0x15, 0xcf, 0x15, 0x95, 0x9a, 0xe1, 0x5e, 0xd6, 0xfc,
	0xf6, 0x6b, 0x04, 0x99, 0x8e, 0xe2, 0xbc, 0x94, 0x42, 0x96, 0x84, 0xcd, 0xf1, 0x5d, 0x18, 0x9f,
	0x97, 0xb2, 0x0b, 0xbf, 0x28, 0xf4, 0xb2, 0x66, 0x52, 0xa7, 0x13, 0x24, 0xbb, 0xbd, 0x9f, 0x1f,
	0xc5, 0x57, 0x4f, 0x0f, 0xf6, 0x5a, 0x87, 0xef, 0xdb, 0xbb, 0x7b, 0xad, 0xc3, 0xcd, 0xd6, 0xc7,
	0xb7, 0x78, 0x16, 0x48, 0x0f, 0xa5, 0x24, 0xea, 0x0d, 0x97, 0x6b, 0x6e, 0xa7, 0x11, 0xb9, 0xb6,
	0xbd, 0x9f, 0xcf, 0xe1, 0x6c, 0x48, 0xf8, 0xfc, 0xae, 0xfd, 0x66, 0xa7, 0xbd, 0xb5, 0xd9, 0xde,
	0xdd, 0x3a, 0x3d, 0x38, 0x68, 0x6d, 0x7f, 0x98, 0x5b, 0x3c, 0xf9, 0x4e, 0x13, 0x9f, 0x02, 0x8a,
	0x8e, 0x02, 0x8a, 0x8e, 0x03, 0x8a, 0xbe, 0x05, 0x14, 0xfd, 0x0c, 0x68, 0xe2, 0x57, 0x40, 0xd1,
	0x4e, 0x93, 0x26, 0x8e, 0x9a, 0x14, 0x1d, 0x37, 0x69, 0xe2, 0xa4, 0x49, 0x13, 0x2f, 0x26, 0x2a,
	0xc2, 0xf1, 0xee, 0x84, 0x87, 0xc4, 0x65, 0xb1, 0x22, 0xea, 0x75, 0xe1, 0x15, 0xcf, 0xfd, 0xe2,
	0xca, 0xc3, 0xa6, 0xbc, 0xf7, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x00, 0xe8, 0xb1, 0xfa, 0x04,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_RitualInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_RitualInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_PlayRitualCGRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_PlayRitualCGResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_SubmitRitualTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_SubmitRitualTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_PerformRitualRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_PerformRitualResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_CheatFinishTaskRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_CheatFinishTaskResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_RitualTaskUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask_RitualUnlockPush.Get().(proto.Message)
	})
}

var poolRitualTask = &sync.Pool{New: func() interface{} { return &RitualTask{} }}

func (m *RitualTask) ReleasePool() { m.Reset(); poolRitualTask.Put(m); m = nil }

var poolRitualTask_RitualInfoRequest = &sync.Pool{New: func() interface{} { return &RitualTask_RitualInfoRequest{} }}

func (m *RitualTask_RitualInfoRequest) ReleasePool() {
	m.Reset()
	poolRitualTask_RitualInfoRequest.Put(m)
	m = nil
}

var poolRitualTask_RitualInfoResponse = &sync.Pool{New: func() interface{} { return &RitualTask_RitualInfoResponse{} }}

func (m *RitualTask_RitualInfoResponse) ReleasePool() {
	m.Reset()
	poolRitualTask_RitualInfoResponse.Put(m)
	m = nil
}

var poolRitualTask_PlayRitualCGRequest = &sync.Pool{New: func() interface{} { return &RitualTask_PlayRitualCGRequest{} }}

func (m *RitualTask_PlayRitualCGRequest) ReleasePool() {
	m.Reset()
	poolRitualTask_PlayRitualCGRequest.Put(m)
	m = nil
}

var poolRitualTask_PlayRitualCGResponse = &sync.Pool{New: func() interface{} { return &RitualTask_PlayRitualCGResponse{} }}

func (m *RitualTask_PlayRitualCGResponse) ReleasePool() {
	m.Reset()
	poolRitualTask_PlayRitualCGResponse.Put(m)
	m = nil
}

var poolRitualTask_SubmitRitualTaskRequest = &sync.Pool{New: func() interface{} { return &RitualTask_SubmitRitualTaskRequest{} }}

func (m *RitualTask_SubmitRitualTaskRequest) ReleasePool() {
	m.Reset()
	poolRitualTask_SubmitRitualTaskRequest.Put(m)
	m = nil
}

var poolRitualTask_SubmitRitualTaskResponse = &sync.Pool{New: func() interface{} { return &RitualTask_SubmitRitualTaskResponse{} }}

func (m *RitualTask_SubmitRitualTaskResponse) ReleasePool() {
	m.Reset()
	poolRitualTask_SubmitRitualTaskResponse.Put(m)
	m = nil
}

var poolRitualTask_PerformRitualRequest = &sync.Pool{New: func() interface{} { return &RitualTask_PerformRitualRequest{} }}

func (m *RitualTask_PerformRitualRequest) ReleasePool() {
	m.Reset()
	poolRitualTask_PerformRitualRequest.Put(m)
	m = nil
}

var poolRitualTask_PerformRitualResponse = &sync.Pool{New: func() interface{} { return &RitualTask_PerformRitualResponse{} }}

func (m *RitualTask_PerformRitualResponse) ReleasePool() {
	m.Reset()
	poolRitualTask_PerformRitualResponse.Put(m)
	m = nil
}

var poolRitualTask_CheatFinishTaskRequest = &sync.Pool{New: func() interface{} { return &RitualTask_CheatFinishTaskRequest{} }}

func (m *RitualTask_CheatFinishTaskRequest) ReleasePool() {
	m.Reset()
	poolRitualTask_CheatFinishTaskRequest.Put(m)
	m = nil
}

var poolRitualTask_CheatFinishTaskResponse = &sync.Pool{New: func() interface{} { return &RitualTask_CheatFinishTaskResponse{} }}

func (m *RitualTask_CheatFinishTaskResponse) ReleasePool() {
	m.Reset()
	poolRitualTask_CheatFinishTaskResponse.Put(m)
	m = nil
}

var poolRitualTask_RitualTaskUpdatePush = &sync.Pool{New: func() interface{} { return &RitualTask_RitualTaskUpdatePush{} }}

func (m *RitualTask_RitualTaskUpdatePush) ReleasePool() {
	m.Reset()
	poolRitualTask_RitualTaskUpdatePush.Put(m)
	m = nil
}

var poolRitualTask_RitualUnlockPush = &sync.Pool{New: func() interface{} { return &RitualTask_RitualUnlockPush{} }}

func (m *RitualTask_RitualUnlockPush) ReleasePool() {
	m.Reset()
	poolRitualTask_RitualUnlockPush.Put(m)
	m = nil
}
func (x RitualTaskErrorCode) String() string {
	s, ok := RitualTaskErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RitualTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask)
	if !ok {
		that2, ok := that.(RitualTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RitualTask_RitualInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_RitualInfoRequest)
	if !ok {
		that2, ok := that.(RitualTask_RitualInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RitualTask_RitualInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_RitualInfoResponse)
	if !ok {
		that2, ok := that.(RitualTask_RitualInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *RitualTask_PlayRitualCGRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_PlayRitualCGRequest)
	if !ok {
		that2, ok := that.(RitualTask_PlayRitualCGRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RitualTask_PlayRitualCGResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_PlayRitualCGResponse)
	if !ok {
		that2, ok := that.(RitualTask_PlayRitualCGResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RitualTask_SubmitRitualTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_SubmitRitualTaskRequest)
	if !ok {
		that2, ok := that.(RitualTask_SubmitRitualTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubTaskId != that1.SubTaskId {
		return false
	}
	return true
}
func (this *RitualTask_SubmitRitualTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_SubmitRitualTaskResponse)
	if !ok {
		that2, ok := that.(RitualTask_SubmitRitualTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *RitualTask_PerformRitualRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_PerformRitualRequest)
	if !ok {
		that2, ok := that.(RitualTask_PerformRitualRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RitualTask_PerformRitualResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_PerformRitualResponse)
	if !ok {
		that2, ok := that.(RitualTask_PerformRitualResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *RitualTask_CheatFinishTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_CheatFinishTaskRequest)
	if !ok {
		that2, ok := that.(RitualTask_CheatFinishTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubTaskId != that1.SubTaskId {
		return false
	}
	if this.IsAll != that1.IsAll {
		return false
	}
	return true
}
func (this *RitualTask_CheatFinishTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_CheatFinishTaskResponse)
	if !ok {
		that2, ok := that.(RitualTask_CheatFinishTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *RitualTask_RitualTaskUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_RitualTaskUpdatePush)
	if !ok {
		that2, ok := that.(RitualTask_RitualTaskUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *RitualTask_RitualUnlockPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask_RitualUnlockPush)
	if !ok {
		that2, ok := that.(RitualTask_RitualUnlockPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (m *RitualTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RitualTask_RitualInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_RitualInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_RitualInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RitualTask_RitualInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_RitualInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_RitualInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRitualTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RitualTask_PlayRitualCGRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_PlayRitualCGRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_PlayRitualCGRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RitualTask_PlayRitualCGResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_PlayRitualCGResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_PlayRitualCGResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RitualTask_SubmitRitualTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_SubmitRitualTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_SubmitRitualTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubTaskId != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.SubTaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RitualTask_SubmitRitualTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_SubmitRitualTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_SubmitRitualTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintRitualTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintRitualTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRitualTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRitualTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RitualTask_PerformRitualRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_PerformRitualRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_PerformRitualRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RitualTask_PerformRitualResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_PerformRitualResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_PerformRitualResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintRitualTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintRitualTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRitualTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HeroId != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x10
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRitualTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RitualTask_CheatFinishTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_CheatFinishTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_CheatFinishTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAll {
		i--
		if m.IsAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SubTaskId != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.SubTaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RitualTask_CheatFinishTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_CheatFinishTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_CheatFinishTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRitualTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RitualTask_RitualTaskUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_RitualTaskUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_RitualTaskUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRitualTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RitualTask_RitualUnlockPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask_RitualUnlockPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask_RitualUnlockPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRitualTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRitualTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovRitualTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RitualTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RitualTask_RitualInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RitualTask_RitualInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RitualTask_PlayRitualCGRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RitualTask_PlayRitualCGResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RitualTask_SubmitRitualTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SubTaskId != 0 {
		w.RawByte('"')
		w.RawString("sub_task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SubTaskId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RitualTask_SubmitRitualTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RitualTask_PerformRitualRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RitualTask_PerformRitualResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	if m.HeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RitualTask_CheatFinishTaskRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SubTaskId != 0 {
		w.RawByte('"')
		w.RawString("sub_task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SubTaskId))
		needWriteComma = true
	}
	if m.IsAll {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_all")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAll)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RitualTask_CheatFinishTaskResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RitualTask_RitualTaskUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	m.Task.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RitualTask_RitualUnlockPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RitualTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask) GoString() string {
	return m.String()
}

func (m *RitualTask_RitualInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_RitualInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_RitualInfoRequest) GoString() string {
	return m.String()
}

func (m *RitualTask_RitualInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_RitualInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_RitualInfoResponse) GoString() string {
	return m.String()
}

func (m *RitualTask_PlayRitualCGRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_PlayRitualCGRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_PlayRitualCGRequest) GoString() string {
	return m.String()
}

func (m *RitualTask_PlayRitualCGResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_PlayRitualCGResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_PlayRitualCGResponse) GoString() string {
	return m.String()
}

func (m *RitualTask_SubmitRitualTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_SubmitRitualTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_SubmitRitualTaskRequest) GoString() string {
	return m.String()
}

func (m *RitualTask_SubmitRitualTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_SubmitRitualTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_SubmitRitualTaskResponse) GoString() string {
	return m.String()
}

func (m *RitualTask_PerformRitualRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_PerformRitualRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_PerformRitualRequest) GoString() string {
	return m.String()
}

func (m *RitualTask_PerformRitualResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_PerformRitualResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_PerformRitualResponse) GoString() string {
	return m.String()
}

func (m *RitualTask_CheatFinishTaskRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_CheatFinishTaskRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_CheatFinishTaskRequest) GoString() string {
	return m.String()
}

func (m *RitualTask_CheatFinishTaskResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_CheatFinishTaskResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_CheatFinishTaskResponse) GoString() string {
	return m.String()
}

func (m *RitualTask_RitualTaskUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_RitualTaskUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_RitualTaskUpdatePush) GoString() string {
	return m.String()
}

func (m *RitualTask_RitualUnlockPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask_RitualUnlockPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask_RitualUnlockPush) GoString() string {
	return m.String()
}

func (m *RitualTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RitualTask_RitualInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RitualTask_RitualInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovRitualTask(uint64(l))
	}
	return n
}

func (m *RitualTask_PlayRitualCGRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RitualTask_PlayRitualCGResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RitualTask_SubmitRitualTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubTaskId != 0 {
		n += 1 + sovRitualTask(uint64(m.SubTaskId))
	}
	return n
}

func (m *RitualTask_SubmitRitualTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovRitualTask(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRitualTask(uint64(k)) + 1 + sovRitualTask(uint64(v))
			n += mapEntrySize + 1 + sovRitualTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RitualTask_PerformRitualRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RitualTask_PerformRitualResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovRitualTask(uint64(l))
	}
	if m.HeroId != 0 {
		n += 1 + sovRitualTask(uint64(m.HeroId))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRitualTask(uint64(k)) + 1 + sovRitualTask(uint64(v))
			n += mapEntrySize + 1 + sovRitualTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RitualTask_CheatFinishTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubTaskId != 0 {
		n += 1 + sovRitualTask(uint64(m.SubTaskId))
	}
	if m.IsAll {
		n += 2
	}
	return n
}

func (m *RitualTask_CheatFinishTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovRitualTask(uint64(l))
	}
	return n
}

func (m *RitualTask_RitualTaskUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovRitualTask(uint64(l))
	}
	return n
}

func (m *RitualTask_RitualUnlockPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovRitualTask(uint64(l))
	}
	return n
}

func sovRitualTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRitualTask(x uint64) (n int) {
	return sovRitualTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RitualTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RitualTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RitualTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_RitualInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RitualInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RitualInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_RitualInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RitualInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RitualInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRitualTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRitualTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.ChaosRitual{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_PlayRitualCGRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayRitualCGRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayRitualCGRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_PlayRitualCGResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayRitualCGResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayRitualCGResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_SubmitRitualTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitRitualTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitRitualTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTaskId", wireType)
			}
			m.SubTaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubTaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_SubmitRitualTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitRitualTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitRitualTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRitualTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRitualTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.RitualTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRitualTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRitualTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRitualTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRitualTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRitualTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRitualTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRitualTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_PerformRitualRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerformRitualRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerformRitualRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_PerformRitualResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerformRitualResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerformRitualResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRitualTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRitualTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.ChaosRitual{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRitualTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRitualTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRitualTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRitualTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRitualTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRitualTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRitualTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_CheatFinishTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatFinishTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatFinishTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTaskId", wireType)
			}
			m.SubTaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubTaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAll = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_CheatFinishTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatFinishTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatFinishTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRitualTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRitualTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.ChaosRitual{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_RitualTaskUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RitualTaskUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RitualTaskUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRitualTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRitualTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &models.RitualTask{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RitualTask_RitualUnlockPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RitualUnlockPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RitualUnlockPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRitualTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRitualTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.ChaosRitual{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRitualTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRitualTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRitualTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRitualTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRitualTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRitualTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRitualTask = fmt.Errorf("proto: unexpected end of group")
)
