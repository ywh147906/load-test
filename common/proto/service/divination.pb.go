// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/divination.proto

package service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DivinationErrorCode int32

const (
	DivinationErrorCode_ErrTimesNotEnough     DivinationErrorCode = 0
	DivinationErrorCode_ErrItemNotEnough      DivinationErrorCode = 1
	DivinationErrorCode_ErrEnergyBallNotExist DivinationErrorCode = 2
	DivinationErrorCode_ErrEnergyBallNumLimit DivinationErrorCode = 3
)

var DivinationErrorCode_name = map[int32]string{
	0: "ErrTimesNotEnough",
	1: "ErrItemNotEnough",
	2: "ErrEnergyBallNotExist",
	3: "ErrEnergyBallNumLimit",
}

var DivinationErrorCode_value = map[string]int32{
	"ErrTimesNotEnough":     0,
	"ErrItemNotEnough":      1,
	"ErrEnergyBallNotExist": 2,
	"ErrEnergyBallNumLimit": 3,
}

func (DivinationErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0}
}

type Divination struct {
}

func (m *Divination) Reset()      { *m = Divination{} }
func (*Divination) ProtoMessage() {}
func (*Divination) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0}
}
func (m *Divination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination.Merge(m, src)
}
func (m *Divination) XXX_Size() int {
	return m.Size()
}
func (m *Divination) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination.DiscardUnknown(m)
}

var xxx_messageInfo_Divination proto.InternalMessageInfo

func (*Divination) XXX_MessageName() string {
	return "service.Divination"
}

// 获取占卜信息
type Divination_DivinationInfoRequest struct {
}

func (m *Divination_DivinationInfoRequest) Reset()      { *m = Divination_DivinationInfoRequest{} }
func (*Divination_DivinationInfoRequest) ProtoMessage() {}
func (*Divination_DivinationInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0, 0}
}
func (m *Divination_DivinationInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination_DivinationInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination_DivinationInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination_DivinationInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination_DivinationInfoRequest.Merge(m, src)
}
func (m *Divination_DivinationInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *Divination_DivinationInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination_DivinationInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Divination_DivinationInfoRequest proto.InternalMessageInfo

func (*Divination_DivinationInfoRequest) XXX_MessageName() string {
	return "service.Divination.DivinationInfoRequest"
}

type Divination_DivinationInfoResponse struct {
	Info *models.Divination `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Divination_DivinationInfoResponse) Reset()      { *m = Divination_DivinationInfoResponse{} }
func (*Divination_DivinationInfoResponse) ProtoMessage() {}
func (*Divination_DivinationInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0, 1}
}
func (m *Divination_DivinationInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination_DivinationInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination_DivinationInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination_DivinationInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination_DivinationInfoResponse.Merge(m, src)
}
func (m *Divination_DivinationInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *Divination_DivinationInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination_DivinationInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Divination_DivinationInfoResponse proto.InternalMessageInfo

func (m *Divination_DivinationInfoResponse) GetInfo() *models.Divination {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*Divination_DivinationInfoResponse) XXX_MessageName() string {
	return "service.Divination.DivinationInfoResponse"
}

// 占卜
type Divination_DivinationOnceRequest struct {
}

func (m *Divination_DivinationOnceRequest) Reset()      { *m = Divination_DivinationOnceRequest{} }
func (*Divination_DivinationOnceRequest) ProtoMessage() {}
func (*Divination_DivinationOnceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0, 2}
}
func (m *Divination_DivinationOnceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination_DivinationOnceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination_DivinationOnceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination_DivinationOnceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination_DivinationOnceRequest.Merge(m, src)
}
func (m *Divination_DivinationOnceRequest) XXX_Size() int {
	return m.Size()
}
func (m *Divination_DivinationOnceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination_DivinationOnceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Divination_DivinationOnceRequest proto.InternalMessageInfo

func (*Divination_DivinationOnceRequest) XXX_MessageName() string {
	return "service.Divination.DivinationOnceRequest"
}

type Divination_DivinationOnceResponse struct {
	Info        *models.Divination   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	EnergyBalls []*models.EnergyBall `protobuf:"bytes,4,rep,name=energy_balls,json=energyBalls,proto3" json:"energy_balls,omitempty"`
}

func (m *Divination_DivinationOnceResponse) Reset()      { *m = Divination_DivinationOnceResponse{} }
func (*Divination_DivinationOnceResponse) ProtoMessage() {}
func (*Divination_DivinationOnceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0, 3}
}
func (m *Divination_DivinationOnceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination_DivinationOnceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination_DivinationOnceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination_DivinationOnceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination_DivinationOnceResponse.Merge(m, src)
}
func (m *Divination_DivinationOnceResponse) XXX_Size() int {
	return m.Size()
}
func (m *Divination_DivinationOnceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination_DivinationOnceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Divination_DivinationOnceResponse proto.InternalMessageInfo

func (m *Divination_DivinationOnceResponse) GetInfo() *models.Divination {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Divination_DivinationOnceResponse) GetEnergyBalls() []*models.EnergyBall {
	if m != nil {
		return m.EnergyBalls
	}
	return nil
}

func (*Divination_DivinationOnceResponse) XXX_MessageName() string {
	return "service.Divination.DivinationOnceResponse"
}

// 重置占卜推送
type Divination_ResetDivinationPush struct {
	Info *models.Divination `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Divination_ResetDivinationPush) Reset()      { *m = Divination_ResetDivinationPush{} }
func (*Divination_ResetDivinationPush) ProtoMessage() {}
func (*Divination_ResetDivinationPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0, 4}
}
func (m *Divination_ResetDivinationPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination_ResetDivinationPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination_ResetDivinationPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination_ResetDivinationPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination_ResetDivinationPush.Merge(m, src)
}
func (m *Divination_ResetDivinationPush) XXX_Size() int {
	return m.Size()
}
func (m *Divination_ResetDivinationPush) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination_ResetDivinationPush.DiscardUnknown(m)
}

var xxx_messageInfo_Divination_ResetDivinationPush proto.InternalMessageInfo

func (m *Divination_ResetDivinationPush) GetInfo() *models.Divination {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*Divination_ResetDivinationPush) XXX_MessageName() string {
	return "service.Divination.ResetDivinationPush"
}

// 作弊器 重置占卜次数
type Divination_CheatResetDivinationRequest struct {
}

func (m *Divination_CheatResetDivinationRequest) Reset() {
	*m = Divination_CheatResetDivinationRequest{}
}
func (*Divination_CheatResetDivinationRequest) ProtoMessage() {}
func (*Divination_CheatResetDivinationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0, 5}
}
func (m *Divination_CheatResetDivinationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination_CheatResetDivinationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination_CheatResetDivinationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination_CheatResetDivinationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination_CheatResetDivinationRequest.Merge(m, src)
}
func (m *Divination_CheatResetDivinationRequest) XXX_Size() int {
	return m.Size()
}
func (m *Divination_CheatResetDivinationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination_CheatResetDivinationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Divination_CheatResetDivinationRequest proto.InternalMessageInfo

func (*Divination_CheatResetDivinationRequest) XXX_MessageName() string {
	return "service.Divination.CheatResetDivinationRequest"
}

type Divination_CheatResetDivinationResponse struct {
	Info *models.Divination `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Divination_CheatResetDivinationResponse) Reset() {
	*m = Divination_CheatResetDivinationResponse{}
}
func (*Divination_CheatResetDivinationResponse) ProtoMessage() {}
func (*Divination_CheatResetDivinationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0, 6}
}
func (m *Divination_CheatResetDivinationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination_CheatResetDivinationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination_CheatResetDivinationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination_CheatResetDivinationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination_CheatResetDivinationResponse.Merge(m, src)
}
func (m *Divination_CheatResetDivinationResponse) XXX_Size() int {
	return m.Size()
}
func (m *Divination_CheatResetDivinationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination_CheatResetDivinationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Divination_CheatResetDivinationResponse proto.InternalMessageInfo

func (m *Divination_CheatResetDivinationResponse) GetInfo() *models.Divination {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*Divination_CheatResetDivinationResponse) XXX_MessageName() string {
	return "service.Divination.CheatResetDivinationResponse"
}

// 作弊器 增加占卜次数上限
type Divination_CheatAddDivinationTotalRequest struct {
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Divination_CheatAddDivinationTotalRequest) Reset() {
	*m = Divination_CheatAddDivinationTotalRequest{}
}
func (*Divination_CheatAddDivinationTotalRequest) ProtoMessage() {}
func (*Divination_CheatAddDivinationTotalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0, 7}
}
func (m *Divination_CheatAddDivinationTotalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination_CheatAddDivinationTotalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination_CheatAddDivinationTotalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination_CheatAddDivinationTotalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination_CheatAddDivinationTotalRequest.Merge(m, src)
}
func (m *Divination_CheatAddDivinationTotalRequest) XXX_Size() int {
	return m.Size()
}
func (m *Divination_CheatAddDivinationTotalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination_CheatAddDivinationTotalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Divination_CheatAddDivinationTotalRequest proto.InternalMessageInfo

func (m *Divination_CheatAddDivinationTotalRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (*Divination_CheatAddDivinationTotalRequest) XXX_MessageName() string {
	return "service.Divination.CheatAddDivinationTotalRequest"
}

type Divination_CheatAddDivinationTotalResponse struct {
	Info *models.Divination `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Divination_CheatAddDivinationTotalResponse) Reset() {
	*m = Divination_CheatAddDivinationTotalResponse{}
}
func (*Divination_CheatAddDivinationTotalResponse) ProtoMessage() {}
func (*Divination_CheatAddDivinationTotalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b7dfbb40743a339, []int{0, 8}
}
func (m *Divination_CheatAddDivinationTotalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Divination_CheatAddDivinationTotalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Divination_CheatAddDivinationTotalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Divination_CheatAddDivinationTotalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Divination_CheatAddDivinationTotalResponse.Merge(m, src)
}
func (m *Divination_CheatAddDivinationTotalResponse) XXX_Size() int {
	return m.Size()
}
func (m *Divination_CheatAddDivinationTotalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Divination_CheatAddDivinationTotalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Divination_CheatAddDivinationTotalResponse proto.InternalMessageInfo

func (m *Divination_CheatAddDivinationTotalResponse) GetInfo() *models.Divination {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*Divination_CheatAddDivinationTotalResponse) XXX_MessageName() string {
	return "service.Divination.CheatAddDivinationTotalResponse"
}
func init() {
	proto.RegisterEnum("service.DivinationErrorCode", DivinationErrorCode_name, DivinationErrorCode_value)
	proto.RegisterType((*Divination)(nil), "service.Divination")
	proto.RegisterType((*Divination_DivinationInfoRequest)(nil), "service.Divination.DivinationInfoRequest")
	proto.RegisterType((*Divination_DivinationInfoResponse)(nil), "service.Divination.DivinationInfoResponse")
	proto.RegisterType((*Divination_DivinationOnceRequest)(nil), "service.Divination.DivinationOnceRequest")
	proto.RegisterType((*Divination_DivinationOnceResponse)(nil), "service.Divination.DivinationOnceResponse")
	proto.RegisterType((*Divination_ResetDivinationPush)(nil), "service.Divination.ResetDivinationPush")
	proto.RegisterType((*Divination_CheatResetDivinationRequest)(nil), "service.Divination.CheatResetDivinationRequest")
	proto.RegisterType((*Divination_CheatResetDivinationResponse)(nil), "service.Divination.CheatResetDivinationResponse")
	proto.RegisterType((*Divination_CheatAddDivinationTotalRequest)(nil), "service.Divination.CheatAddDivinationTotalRequest")
	proto.RegisterType((*Divination_CheatAddDivinationTotalResponse)(nil), "service.Divination.CheatAddDivinationTotalResponse")
}

func init() { proto.RegisterFile("proto/service/divination.proto", fileDescriptor_2b7dfbb40743a339) }

var fileDescriptor_2b7dfbb40743a339 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6b, 0x13, 0x4d,
	0x18, 0xc7, 0x77, 0xde, 0x84, 0x57, 0x98, 0x16, 0x59, 0xa7, 0xc6, 0x2c, 0x5b, 0x3b, 0x06, 0x0f,
	0x52, 0x05, 0xb3, 0xd0, 0xa2, 0x37, 0x41, 0x5b, 0x57, 0x08, 0x48, 0x95, 0xa5, 0x27, 0x2f, 0xb2,
	0xc9, 0x4e, 0x9b, 0x81, 0xdd, 0x99, 0x3a, 0x33, 0x5b, 0xf5, 0x28, 0x45, 0x94, 0x40, 0x31, 0x20,
	0x82, 0x82, 0x08, 0xde, 0x7a, 0x50, 0x28, 0x48, 0x34, 0x17, 0x7b, 0xee, 0xb1, 0x37, 0x7b, 0xd4,
	0x4d, 0x52, 0x93, 0x9b, 0x7f, 0x82, 0x64, 0xf3, 0x63, 0x9b, 0xa0, 0x60, 0x6e, 0x33, 0xf3, 0xf9,
	0x3e, 0x9f, 0x87, 0x67, 0x97, 0x07, 0xe2, 0x0d, 0xc1, 0x15, 0xb7, 0x24, 0x11, 0x9b, 0xb4, 0x44,
	0x2c, 0x8f, 0x6e, 0x52, 0xe6, 0x2a, 0xca, 0x59, 0x3e, 0x06, 0xe8, 0x44, 0x9f, 0x98, 0xd9, 0x5e,
	0x30, 0xe0, 0x1e, 0xf1, 0xa5, 0x55, 0x74, 0x25, 0xe9, 0x25, 0xcc, 0xb9, 0x11, 0x30, 0x2e, 0x38,
	0xff, 0x2e, 0x0d, 0xe1, 0xcd, 0xe1, 0xa3, 0x99, 0x85, 0x99, 0xe4, 0x56, 0x60, 0x6b, 0xdc, 0x21,
	0x0f, 0x42, 0x22, 0x95, 0x79, 0x1d, 0x9e, 0x19, 0x07, 0x72, 0x83, 0x33, 0x49, 0xd0, 0x05, 0x98,
	0xa6, 0x6c, 0x8d, 0x1b, 0x20, 0x07, 0xe6, 0xa7, 0x16, 0x50, 0xbe, 0xd7, 0x29, 0x9f, 0xa4, 0x9d,
	0x98, 0x8f, 0xaa, 0xef, 0xb0, 0x12, 0x19, 0xa8, 0x1f, 0x1e, 0x57, 0xf7, 0xc0, 0x64, 0x6a, 0x74,
	0x05, 0x4e, 0x13, 0x46, 0xc4, 0xfa, 0xe3, 0xfb, 0x45, 0xd7, 0xf7, 0xa5, 0x91, 0xce, 0xa5, 0x8e,
	0xe7, 0xed, 0x98, 0x2d, 0xb9, 0xbe, 0xef, 0x4c, 0x91, 0xe1, 0x59, 0x9a, 0xd7, 0xe0, 0x8c, 0x43,
	0x24, 0x51, 0x89, 0xef, 0x6e, 0x28, 0xcb, 0xff, 0x3c, 0xd0, 0x1c, 0x9c, 0x5d, 0x2e, 0x13, 0x57,
	0x8d, 0x39, 0x06, 0x63, 0xdd, 0x82, 0x67, 0xff, 0x8c, 0x27, 0xfc, 0x6e, 0x0b, 0x10, 0xc7, 0x9e,
	0x1b, 0x9e, 0x97, 0xb0, 0x55, 0xae, 0x5c, 0xbf, 0xdf, 0x09, 0xe9, 0x30, 0xc5, 0xc2, 0x20, 0x16,
	0xa5, 0x9c, 0xee, 0xd1, 0x2c, 0xc0, 0x73, 0x7f, 0xad, 0x99, 0xac, 0xfd, 0xa5, 0x6f, 0x00, 0xce,
	0x24, 0x8f, 0xb6, 0x10, 0x5c, 0x2c, 0x73, 0x8f, 0xa0, 0x8b, 0xf0, 0x94, 0x2d, 0xc4, 0x2a, 0x0d,
	0x88, 0x5c, 0xe1, 0xca, 0x66, 0x3c, 0x5c, 0x2f, 0xeb, 0x9a, 0x89, 0x2a, 0x35, 0xe3, 0x24, 0x9a,
	0x3e, 0xfa, 0xf0, 0xfe, 0xe8, 0xd5, 0x6e, 0xb3, 0xbe, 0xdd, 0xfe, 0xfc, 0x09, 0xcd, 0x43, 0xdd,
	0x16, 0xa2, 0xa0, 0x48, 0x90, 0x24, 0xc1, 0x20, 0xd9, 0x79, 0xf2, 0xb2, 0xf5, 0xf4, 0x4b, 0x3f,
	0xb9, 0x08, 0x33, 0xb6, 0x10, 0xc9, 0xff, 0xea, 0xe6, 0x1f, 0x51, 0xa9, 0xf4, 0xff, 0x4c, 0xa3,
	0x52, 0x33, 0x4e, 0x23, 0xd4, 0xde, 0xfa, 0xda, 0x79, 0xf6, 0xe2, 0x67, 0x75, 0xab, 0x59, 0xdf,
	0x6e, 0x7d, 0x7c, 0xdd, 0x7a, 0xbb, 0x83, 0xae, 0x8e, 0x17, 0x85, 0xc1, 0x6d, 0x1a, 0x50, 0xa5,
	0xa7, 0xcc, 0xd9, 0x4a, 0xcd, 0xc8, 0xa2, 0xcc, 0xb0, 0xa8, 0xbd, 0xb7, 0xd7, 0x7a, 0xbe, 0xdb,
	0xac, 0x57, 0x3a, 0x6f, 0xaa, 0x4b, 0x2b, 0x87, 0x3f, 0xb0, 0xb6, 0x13, 0x61, 0xb0, 0x1f, 0x61,
	0x70, 0x10, 0x61, 0xf0, 0x3d, 0xc2, 0xa0, 0x1d, 0x61, 0xed, 0x57, 0x84, 0x41, 0xb5, 0x81, 0xb5,
	0xfd, 0x06, 0x06, 0x07, 0x0d, 0xac, 0x1d, 0x36, 0xb0, 0x76, 0x2f, 0x57, 0xe2, 0x94, 0x5d, 0xee,
	0xae, 0x1b, 0x11, 0x56, 0x89, 0x07, 0x01, 0x67, 0xd6, 0xc8, 0x72, 0x16, 0xff, 0x8f, 0xaf, 0x8b,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x75, 0x30, 0x2a, 0xb4, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination_DivinationInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination_DivinationInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination_DivinationOnceRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination_DivinationOnceResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination_ResetDivinationPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination_CheatResetDivinationRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination_CheatResetDivinationResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination_CheatAddDivinationTotalRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDivination_CheatAddDivinationTotalResponse.Get().(proto.Message)
	})
}

var poolDivination = &sync.Pool{New: func() interface{} { return &Divination{} }}

func (m *Divination) ReleasePool() { m.Reset(); poolDivination.Put(m); m = nil }

var poolDivination_DivinationInfoRequest = &sync.Pool{New: func() interface{} { return &Divination_DivinationInfoRequest{} }}

func (m *Divination_DivinationInfoRequest) ReleasePool() {
	m.Reset()
	poolDivination_DivinationInfoRequest.Put(m)
	m = nil
}

var poolDivination_DivinationInfoResponse = &sync.Pool{New: func() interface{} { return &Divination_DivinationInfoResponse{} }}

func (m *Divination_DivinationInfoResponse) ReleasePool() {
	m.Reset()
	poolDivination_DivinationInfoResponse.Put(m)
	m = nil
}

var poolDivination_DivinationOnceRequest = &sync.Pool{New: func() interface{} { return &Divination_DivinationOnceRequest{} }}

func (m *Divination_DivinationOnceRequest) ReleasePool() {
	m.Reset()
	poolDivination_DivinationOnceRequest.Put(m)
	m = nil
}

var poolDivination_DivinationOnceResponse = &sync.Pool{New: func() interface{} { return &Divination_DivinationOnceResponse{} }}

func (m *Divination_DivinationOnceResponse) ReleasePool() {
	m.Reset()
	poolDivination_DivinationOnceResponse.Put(m)
	m = nil
}

var poolDivination_ResetDivinationPush = &sync.Pool{New: func() interface{} { return &Divination_ResetDivinationPush{} }}

func (m *Divination_ResetDivinationPush) ReleasePool() {
	m.Reset()
	poolDivination_ResetDivinationPush.Put(m)
	m = nil
}

var poolDivination_CheatResetDivinationRequest = &sync.Pool{New: func() interface{} { return &Divination_CheatResetDivinationRequest{} }}

func (m *Divination_CheatResetDivinationRequest) ReleasePool() {
	m.Reset()
	poolDivination_CheatResetDivinationRequest.Put(m)
	m = nil
}

var poolDivination_CheatResetDivinationResponse = &sync.Pool{New: func() interface{} { return &Divination_CheatResetDivinationResponse{} }}

func (m *Divination_CheatResetDivinationResponse) ReleasePool() {
	m.Reset()
	poolDivination_CheatResetDivinationResponse.Put(m)
	m = nil
}

var poolDivination_CheatAddDivinationTotalRequest = &sync.Pool{New: func() interface{} { return &Divination_CheatAddDivinationTotalRequest{} }}

func (m *Divination_CheatAddDivinationTotalRequest) ReleasePool() {
	m.Reset()
	poolDivination_CheatAddDivinationTotalRequest.Put(m)
	m = nil
}

var poolDivination_CheatAddDivinationTotalResponse = &sync.Pool{New: func() interface{} { return &Divination_CheatAddDivinationTotalResponse{} }}

func (m *Divination_CheatAddDivinationTotalResponse) ReleasePool() {
	m.Reset()
	poolDivination_CheatAddDivinationTotalResponse.Put(m)
	m = nil
}
func (x DivinationErrorCode) String() string {
	s, ok := DivinationErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Divination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination)
	if !ok {
		that2, ok := that.(Divination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Divination_DivinationInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination_DivinationInfoRequest)
	if !ok {
		that2, ok := that.(Divination_DivinationInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Divination_DivinationInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination_DivinationInfoResponse)
	if !ok {
		that2, ok := that.(Divination_DivinationInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *Divination_DivinationOnceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination_DivinationOnceRequest)
	if !ok {
		that2, ok := that.(Divination_DivinationOnceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Divination_DivinationOnceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination_DivinationOnceResponse)
	if !ok {
		that2, ok := that.(Divination_DivinationOnceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if len(this.EnergyBalls) != len(that1.EnergyBalls) {
		return false
	}
	for i := range this.EnergyBalls {
		if !this.EnergyBalls[i].Equal(that1.EnergyBalls[i]) {
			return false
		}
	}
	return true
}
func (this *Divination_ResetDivinationPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination_ResetDivinationPush)
	if !ok {
		that2, ok := that.(Divination_ResetDivinationPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *Divination_CheatResetDivinationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination_CheatResetDivinationRequest)
	if !ok {
		that2, ok := that.(Divination_CheatResetDivinationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Divination_CheatResetDivinationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination_CheatResetDivinationResponse)
	if !ok {
		that2, ok := that.(Divination_CheatResetDivinationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *Divination_CheatAddDivinationTotalRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination_CheatAddDivinationTotalRequest)
	if !ok {
		that2, ok := that.(Divination_CheatAddDivinationTotalRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *Divination_CheatAddDivinationTotalResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Divination_CheatAddDivinationTotalResponse)
	if !ok {
		that2, ok := that.(Divination_CheatAddDivinationTotalResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (m *Divination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Divination_DivinationInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination_DivinationInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination_DivinationInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Divination_DivinationInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination_DivinationInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination_DivinationInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDivination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Divination_DivinationOnceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination_DivinationOnceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination_DivinationOnceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Divination_DivinationOnceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination_DivinationOnceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination_DivinationOnceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnergyBalls) > 0 {
		for iNdEx := len(m.EnergyBalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnergyBalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDivination(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDivination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Divination_ResetDivinationPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination_ResetDivinationPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination_ResetDivinationPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDivination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Divination_CheatResetDivinationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination_CheatResetDivinationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination_CheatResetDivinationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Divination_CheatResetDivinationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination_CheatResetDivinationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination_CheatResetDivinationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDivination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Divination_CheatAddDivinationTotalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination_CheatAddDivinationTotalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination_CheatAddDivinationTotalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintDivination(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Divination_CheatAddDivinationTotalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Divination_CheatAddDivinationTotalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Divination_CheatAddDivinationTotalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDivination(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDivination(dAtA []byte, offset int, v uint64) int {
	offset -= sovDivination(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Divination) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Divination_DivinationInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Divination_DivinationInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Divination_DivinationOnceRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Divination_DivinationOnceResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("energy_balls")
	w.RawByte('"')
	w.RawByte(':')
	if m.EnergyBalls == nil {
		w.RawString("null")
	} else if len(m.EnergyBalls) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.EnergyBalls {
			v.JsonBytes(w)
			if i != len(m.EnergyBalls)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Divination_ResetDivinationPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Divination_CheatResetDivinationRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Divination_CheatResetDivinationResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Divination_CheatAddDivinationTotalRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Num != 0 {
		w.RawByte('"')
		w.RawString("num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Num))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Divination_CheatAddDivinationTotalResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Divination) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination) GoString() string {
	return m.String()
}

func (m *Divination_DivinationInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination_DivinationInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination_DivinationInfoRequest) GoString() string {
	return m.String()
}

func (m *Divination_DivinationInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination_DivinationInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination_DivinationInfoResponse) GoString() string {
	return m.String()
}

func (m *Divination_DivinationOnceRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination_DivinationOnceRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination_DivinationOnceRequest) GoString() string {
	return m.String()
}

func (m *Divination_DivinationOnceResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination_DivinationOnceResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination_DivinationOnceResponse) GoString() string {
	return m.String()
}

func (m *Divination_ResetDivinationPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination_ResetDivinationPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination_ResetDivinationPush) GoString() string {
	return m.String()
}

func (m *Divination_CheatResetDivinationRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination_CheatResetDivinationRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination_CheatResetDivinationRequest) GoString() string {
	return m.String()
}

func (m *Divination_CheatResetDivinationResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination_CheatResetDivinationResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination_CheatResetDivinationResponse) GoString() string {
	return m.String()
}

func (m *Divination_CheatAddDivinationTotalRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination_CheatAddDivinationTotalRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination_CheatAddDivinationTotalRequest) GoString() string {
	return m.String()
}

func (m *Divination_CheatAddDivinationTotalResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Divination_CheatAddDivinationTotalResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Divination_CheatAddDivinationTotalResponse) GoString() string {
	return m.String()
}

func (m *Divination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Divination_DivinationInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Divination_DivinationInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovDivination(uint64(l))
	}
	return n
}

func (m *Divination_DivinationOnceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Divination_DivinationOnceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovDivination(uint64(l))
	}
	if len(m.EnergyBalls) > 0 {
		for _, e := range m.EnergyBalls {
			l = e.Size()
			n += 1 + l + sovDivination(uint64(l))
		}
	}
	return n
}

func (m *Divination_ResetDivinationPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovDivination(uint64(l))
	}
	return n
}

func (m *Divination_CheatResetDivinationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Divination_CheatResetDivinationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovDivination(uint64(l))
	}
	return n
}

func (m *Divination_CheatAddDivinationTotalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovDivination(uint64(m.Num))
	}
	return n
}

func (m *Divination_CheatAddDivinationTotalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovDivination(uint64(l))
	}
	return n
}

func sovDivination(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDivination(x uint64) (n int) {
	return sovDivination(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Divination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Divination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Divination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Divination_DivinationInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DivinationInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DivinationInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Divination_DivinationInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DivinationInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DivinationInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDivination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDivination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDivination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.Divination{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Divination_DivinationOnceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DivinationOnceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DivinationOnceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Divination_DivinationOnceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DivinationOnceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DivinationOnceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDivination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDivination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDivination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.Divination{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyBalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDivination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDivination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDivination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnergyBalls = append(m.EnergyBalls, &models.EnergyBall{})
			if err := m.EnergyBalls[len(m.EnergyBalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Divination_ResetDivinationPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetDivinationPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetDivinationPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDivination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDivination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDivination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.Divination{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Divination_CheatResetDivinationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatResetDivinationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatResetDivinationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Divination_CheatResetDivinationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatResetDivinationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatResetDivinationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDivination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDivination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDivination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.Divination{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Divination_CheatAddDivinationTotalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddDivinationTotalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddDivinationTotalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDivination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Divination_CheatAddDivinationTotalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatAddDivinationTotalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatAddDivinationTotalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDivination
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDivination
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDivination
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.Divination{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDivination(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDivination
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDivination(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDivination
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDivination
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDivination
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDivination
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDivination
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDivination
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDivination        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDivination          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDivination = fmt.Errorf("proto: unexpected end of group")
)
