// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/rank-server/rank.proto

package rank_service

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RankServiceErrorCode int32

const (
	RankServiceErrorCode_ErrRankValueIsNil RankServiceErrorCode = 0
)

var RankServiceErrorCode_name = map[int32]string{
	0: "ErrRankValueIsNil",
}

var RankServiceErrorCode_value = map[string]int32{
	"ErrRankValueIsNil": 0,
}

func (RankServiceErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0}
}

type RankService struct {
}

func (m *RankService) Reset()      { *m = RankService{} }
func (*RankService) ProtoMessage() {}
func (*RankService) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0}
}
func (m *RankService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService.Merge(m, src)
}
func (m *RankService) XXX_Size() int {
	return m.Size()
}
func (m *RankService) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService.DiscardUnknown(m)
}

var xxx_messageInfo_RankService proto.InternalMessageInfo

func (*RankService) XXX_MessageName() string {
	return "rank_service.RankService"
}

//----------------------以下协议仅服务端之间调用----------------------//
// 创建排行榜
type RankService_CreateRankRequest struct {
	RankType int64  `protobuf:"varint,1,opt,name=rank_type,json=rankType,proto3" json:"rank_type,omitempty"`
	RankId   string `protobuf:"bytes,2,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
}

func (m *RankService_CreateRankRequest) Reset()      { *m = RankService_CreateRankRequest{} }
func (*RankService_CreateRankRequest) ProtoMessage() {}
func (*RankService_CreateRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 0}
}
func (m *RankService_CreateRankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_CreateRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_CreateRankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_CreateRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_CreateRankRequest.Merge(m, src)
}
func (m *RankService_CreateRankRequest) XXX_Size() int {
	return m.Size()
}
func (m *RankService_CreateRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_CreateRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_CreateRankRequest proto.InternalMessageInfo

func (m *RankService_CreateRankRequest) GetRankType() int64 {
	if m != nil {
		return m.RankType
	}
	return 0
}

func (m *RankService_CreateRankRequest) GetRankId() string {
	if m != nil {
		return m.RankId
	}
	return ""
}

func (*RankService_CreateRankRequest) XXX_MessageName() string {
	return "rank_service.RankService.CreateRankRequest"
}

type RankService_CreateRankResponse struct {
	RankId string `protobuf:"bytes,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
}

func (m *RankService_CreateRankResponse) Reset()      { *m = RankService_CreateRankResponse{} }
func (*RankService_CreateRankResponse) ProtoMessage() {}
func (*RankService_CreateRankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 1}
}
func (m *RankService_CreateRankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_CreateRankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_CreateRankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_CreateRankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_CreateRankResponse.Merge(m, src)
}
func (m *RankService_CreateRankResponse) XXX_Size() int {
	return m.Size()
}
func (m *RankService_CreateRankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_CreateRankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_CreateRankResponse proto.InternalMessageInfo

func (m *RankService_CreateRankResponse) GetRankId() string {
	if m != nil {
		return m.RankId
	}
	return ""
}

func (*RankService_CreateRankResponse) XXX_MessageName() string {
	return "rank_service.RankService.CreateRankResponse"
}

// 更新排行榜
type RankService_UpdateRankValueRequest struct {
	RankValue *models.RankValue `protobuf:"bytes,1,opt,name=rank_value,json=rankValue,proto3" json:"rank_value,omitempty"`
}

func (m *RankService_UpdateRankValueRequest) Reset()      { *m = RankService_UpdateRankValueRequest{} }
func (*RankService_UpdateRankValueRequest) ProtoMessage() {}
func (*RankService_UpdateRankValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 2}
}
func (m *RankService_UpdateRankValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_UpdateRankValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_UpdateRankValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_UpdateRankValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_UpdateRankValueRequest.Merge(m, src)
}
func (m *RankService_UpdateRankValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *RankService_UpdateRankValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_UpdateRankValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_UpdateRankValueRequest proto.InternalMessageInfo

func (m *RankService_UpdateRankValueRequest) GetRankValue() *models.RankValue {
	if m != nil {
		return m.RankValue
	}
	return nil
}

func (*RankService_UpdateRankValueRequest) XXX_MessageName() string {
	return "rank_service.RankService.UpdateRankValueRequest"
}

type RankService_UpdateRankValueResponse struct {
}

func (m *RankService_UpdateRankValueResponse) Reset()      { *m = RankService_UpdateRankValueResponse{} }
func (*RankService_UpdateRankValueResponse) ProtoMessage() {}
func (*RankService_UpdateRankValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 3}
}
func (m *RankService_UpdateRankValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_UpdateRankValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_UpdateRankValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_UpdateRankValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_UpdateRankValueResponse.Merge(m, src)
}
func (m *RankService_UpdateRankValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *RankService_UpdateRankValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_UpdateRankValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_UpdateRankValueResponse proto.InternalMessageInfo

func (*RankService_UpdateRankValueResponse) XXX_MessageName() string {
	return "rank_service.RankService.UpdateRankValueResponse"
}

// 更新排行榜
type RankService_BatchUpdateRankValueRequest struct {
	RankValue []*models.RankValue `protobuf:"bytes,1,rep,name=rank_value,json=rankValue,proto3" json:"rank_value,omitempty"`
}

func (m *RankService_BatchUpdateRankValueRequest) Reset() {
	*m = RankService_BatchUpdateRankValueRequest{}
}
func (*RankService_BatchUpdateRankValueRequest) ProtoMessage() {}
func (*RankService_BatchUpdateRankValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 4}
}
func (m *RankService_BatchUpdateRankValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_BatchUpdateRankValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_BatchUpdateRankValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_BatchUpdateRankValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_BatchUpdateRankValueRequest.Merge(m, src)
}
func (m *RankService_BatchUpdateRankValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *RankService_BatchUpdateRankValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_BatchUpdateRankValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_BatchUpdateRankValueRequest proto.InternalMessageInfo

func (m *RankService_BatchUpdateRankValueRequest) GetRankValue() []*models.RankValue {
	if m != nil {
		return m.RankValue
	}
	return nil
}

func (*RankService_BatchUpdateRankValueRequest) XXX_MessageName() string {
	return "rank_service.RankService.BatchUpdateRankValueRequest"
}

type RankService_BatchUpdateRankValueResponse struct {
}

func (m *RankService_BatchUpdateRankValueResponse) Reset() {
	*m = RankService_BatchUpdateRankValueResponse{}
}
func (*RankService_BatchUpdateRankValueResponse) ProtoMessage() {}
func (*RankService_BatchUpdateRankValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 5}
}
func (m *RankService_BatchUpdateRankValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_BatchUpdateRankValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_BatchUpdateRankValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_BatchUpdateRankValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_BatchUpdateRankValueResponse.Merge(m, src)
}
func (m *RankService_BatchUpdateRankValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *RankService_BatchUpdateRankValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_BatchUpdateRankValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_BatchUpdateRankValueResponse proto.InternalMessageInfo

func (*RankService_BatchUpdateRankValueResponse) XXX_MessageName() string {
	return "rank_service.RankService.BatchUpdateRankValueResponse"
}

type RankService_DeleteRankValueRequest struct {
	RankId  string `protobuf:"bytes,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	OwnerId string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *RankService_DeleteRankValueRequest) Reset()      { *m = RankService_DeleteRankValueRequest{} }
func (*RankService_DeleteRankValueRequest) ProtoMessage() {}
func (*RankService_DeleteRankValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 6}
}
func (m *RankService_DeleteRankValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_DeleteRankValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_DeleteRankValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_DeleteRankValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_DeleteRankValueRequest.Merge(m, src)
}
func (m *RankService_DeleteRankValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *RankService_DeleteRankValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_DeleteRankValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_DeleteRankValueRequest proto.InternalMessageInfo

func (m *RankService_DeleteRankValueRequest) GetRankId() string {
	if m != nil {
		return m.RankId
	}
	return ""
}

func (m *RankService_DeleteRankValueRequest) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (*RankService_DeleteRankValueRequest) XXX_MessageName() string {
	return "rank_service.RankService.DeleteRankValueRequest"
}

type RankService_DeleteRankValueResponse struct {
}

func (m *RankService_DeleteRankValueResponse) Reset()      { *m = RankService_DeleteRankValueResponse{} }
func (*RankService_DeleteRankValueResponse) ProtoMessage() {}
func (*RankService_DeleteRankValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 7}
}
func (m *RankService_DeleteRankValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_DeleteRankValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_DeleteRankValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_DeleteRankValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_DeleteRankValueResponse.Merge(m, src)
}
func (m *RankService_DeleteRankValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *RankService_DeleteRankValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_DeleteRankValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_DeleteRankValueResponse proto.InternalMessageInfo

func (*RankService_DeleteRankValueResponse) XXX_MessageName() string {
	return "rank_service.RankService.DeleteRankValueResponse"
}

// 获取排行榜
type RankService_GetValueByIndexRequest struct {
	RankId string `protobuf:"bytes,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	Start  int64  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End    int64  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *RankService_GetValueByIndexRequest) Reset()      { *m = RankService_GetValueByIndexRequest{} }
func (*RankService_GetValueByIndexRequest) ProtoMessage() {}
func (*RankService_GetValueByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 8}
}
func (m *RankService_GetValueByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_GetValueByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_GetValueByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_GetValueByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_GetValueByIndexRequest.Merge(m, src)
}
func (m *RankService_GetValueByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *RankService_GetValueByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_GetValueByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_GetValueByIndexRequest proto.InternalMessageInfo

func (m *RankService_GetValueByIndexRequest) GetRankId() string {
	if m != nil {
		return m.RankId
	}
	return ""
}

func (m *RankService_GetValueByIndexRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *RankService_GetValueByIndexRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (*RankService_GetValueByIndexRequest) XXX_MessageName() string {
	return "rank_service.RankService.GetValueByIndexRequest"
}

type RankService_GetValueByIndexResponse struct {
	RankValues []*models.RankValue `protobuf:"bytes,1,rep,name=rank_values,json=rankValues,proto3" json:"rank_values,omitempty"`
	Ending     bool                `protobuf:"varint,2,opt,name=ending,proto3" json:"ending,omitempty"`
}

func (m *RankService_GetValueByIndexResponse) Reset()      { *m = RankService_GetValueByIndexResponse{} }
func (*RankService_GetValueByIndexResponse) ProtoMessage() {}
func (*RankService_GetValueByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 9}
}
func (m *RankService_GetValueByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_GetValueByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_GetValueByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_GetValueByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_GetValueByIndexResponse.Merge(m, src)
}
func (m *RankService_GetValueByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *RankService_GetValueByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_GetValueByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_GetValueByIndexResponse proto.InternalMessageInfo

func (m *RankService_GetValueByIndexResponse) GetRankValues() []*models.RankValue {
	if m != nil {
		return m.RankValues
	}
	return nil
}

func (m *RankService_GetValueByIndexResponse) GetEnding() bool {
	if m != nil {
		return m.Ending
	}
	return false
}

func (*RankService_GetValueByIndexResponse) XXX_MessageName() string {
	return "rank_service.RankService.GetValueByIndexResponse"
}

type RankService_GetRankValueByOwnerIdRequest struct {
	RankId  string `protobuf:"bytes,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	OwnerId string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *RankService_GetRankValueByOwnerIdRequest) Reset() {
	*m = RankService_GetRankValueByOwnerIdRequest{}
}
func (*RankService_GetRankValueByOwnerIdRequest) ProtoMessage() {}
func (*RankService_GetRankValueByOwnerIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 10}
}
func (m *RankService_GetRankValueByOwnerIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_GetRankValueByOwnerIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_GetRankValueByOwnerIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_GetRankValueByOwnerIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_GetRankValueByOwnerIdRequest.Merge(m, src)
}
func (m *RankService_GetRankValueByOwnerIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *RankService_GetRankValueByOwnerIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_GetRankValueByOwnerIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_GetRankValueByOwnerIdRequest proto.InternalMessageInfo

func (m *RankService_GetRankValueByOwnerIdRequest) GetRankId() string {
	if m != nil {
		return m.RankId
	}
	return ""
}

func (m *RankService_GetRankValueByOwnerIdRequest) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (*RankService_GetRankValueByOwnerIdRequest) XXX_MessageName() string {
	return "rank_service.RankService.GetRankValueByOwnerIdRequest"
}

type RankService_GetRankValueByOwnerIdResponse struct {
	RankValue *models.RankValue `protobuf:"bytes,1,opt,name=rank_value,json=rankValue,proto3" json:"rank_value,omitempty"`
}

func (m *RankService_GetRankValueByOwnerIdResponse) Reset() {
	*m = RankService_GetRankValueByOwnerIdResponse{}
}
func (*RankService_GetRankValueByOwnerIdResponse) ProtoMessage() {}
func (*RankService_GetRankValueByOwnerIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 11}
}
func (m *RankService_GetRankValueByOwnerIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_GetRankValueByOwnerIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_GetRankValueByOwnerIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_GetRankValueByOwnerIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_GetRankValueByOwnerIdResponse.Merge(m, src)
}
func (m *RankService_GetRankValueByOwnerIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *RankService_GetRankValueByOwnerIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_GetRankValueByOwnerIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_GetRankValueByOwnerIdResponse proto.InternalMessageInfo

func (m *RankService_GetRankValueByOwnerIdResponse) GetRankValue() *models.RankValue {
	if m != nil {
		return m.RankValue
	}
	return nil
}

func (*RankService_GetRankValueByOwnerIdResponse) XXX_MessageName() string {
	return "rank_service.RankService.GetRankValueByOwnerIdResponse"
}

// 获取百人榜
type RankService_TopRankGetRequest struct {
	Title int64 `protobuf:"varint,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *RankService_TopRankGetRequest) Reset()      { *m = RankService_TopRankGetRequest{} }
func (*RankService_TopRankGetRequest) ProtoMessage() {}
func (*RankService_TopRankGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 12}
}
func (m *RankService_TopRankGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_TopRankGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_TopRankGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_TopRankGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_TopRankGetRequest.Merge(m, src)
}
func (m *RankService_TopRankGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *RankService_TopRankGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_TopRankGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_TopRankGetRequest proto.InternalMessageInfo

func (m *RankService_TopRankGetRequest) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (*RankService_TopRankGetRequest) XXX_MessageName() string {
	return "rank_service.RankService.TopRankGetRequest"
}

type RankService_TopRankGetResponse struct {
	RoleId []string `protobuf:"bytes,1,rep,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *RankService_TopRankGetResponse) Reset()      { *m = RankService_TopRankGetResponse{} }
func (*RankService_TopRankGetResponse) ProtoMessage() {}
func (*RankService_TopRankGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 13}
}
func (m *RankService_TopRankGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_TopRankGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_TopRankGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_TopRankGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_TopRankGetResponse.Merge(m, src)
}
func (m *RankService_TopRankGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *RankService_TopRankGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_TopRankGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_TopRankGetResponse proto.InternalMessageInfo

func (m *RankService_TopRankGetResponse) GetRoleId() []string {
	if m != nil {
		return m.RoleId
	}
	return nil
}

func (*RankService_TopRankGetResponse) XXX_MessageName() string {
	return "rank_service.RankService.TopRankGetResponse"
}

// 更新百人榜
type RankService_TopRankUpdateRequest struct {
	RoleId       string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	CombatValue  int64  `protobuf:"varint,2,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	LastTitle    int64  `protobuf:"varint,3,opt,name=last_title,json=lastTitle,proto3" json:"last_title,omitempty"`
	CurrentTitle int64  `protobuf:"varint,4,opt,name=current_title,json=currentTitle,proto3" json:"current_title,omitempty"`
}

func (m *RankService_TopRankUpdateRequest) Reset()      { *m = RankService_TopRankUpdateRequest{} }
func (*RankService_TopRankUpdateRequest) ProtoMessage() {}
func (*RankService_TopRankUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 14}
}
func (m *RankService_TopRankUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_TopRankUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_TopRankUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_TopRankUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_TopRankUpdateRequest.Merge(m, src)
}
func (m *RankService_TopRankUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RankService_TopRankUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_TopRankUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_TopRankUpdateRequest proto.InternalMessageInfo

func (m *RankService_TopRankUpdateRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RankService_TopRankUpdateRequest) GetCombatValue() int64 {
	if m != nil {
		return m.CombatValue
	}
	return 0
}

func (m *RankService_TopRankUpdateRequest) GetLastTitle() int64 {
	if m != nil {
		return m.LastTitle
	}
	return 0
}

func (m *RankService_TopRankUpdateRequest) GetCurrentTitle() int64 {
	if m != nil {
		return m.CurrentTitle
	}
	return 0
}

func (*RankService_TopRankUpdateRequest) XXX_MessageName() string {
	return "rank_service.RankService.TopRankUpdateRequest"
}

type RankService_TopRankUpdateResponse struct {
}

func (m *RankService_TopRankUpdateResponse) Reset()      { *m = RankService_TopRankUpdateResponse{} }
func (*RankService_TopRankUpdateResponse) ProtoMessage() {}
func (*RankService_TopRankUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_209637c9690c1f7f, []int{0, 15}
}
func (m *RankService_TopRankUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankService_TopRankUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankService_TopRankUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankService_TopRankUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankService_TopRankUpdateResponse.Merge(m, src)
}
func (m *RankService_TopRankUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *RankService_TopRankUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RankService_TopRankUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RankService_TopRankUpdateResponse proto.InternalMessageInfo

func (*RankService_TopRankUpdateResponse) XXX_MessageName() string {
	return "rank_service.RankService.TopRankUpdateResponse"
}
func init() {
	proto.RegisterEnum("rank_service.RankServiceErrorCode", RankServiceErrorCode_name, RankServiceErrorCode_value)
	proto.RegisterType((*RankService)(nil), "rank_service.RankService")
	proto.RegisterType((*RankService_CreateRankRequest)(nil), "rank_service.RankService.CreateRankRequest")
	proto.RegisterType((*RankService_CreateRankResponse)(nil), "rank_service.RankService.CreateRankResponse")
	proto.RegisterType((*RankService_UpdateRankValueRequest)(nil), "rank_service.RankService.UpdateRankValueRequest")
	proto.RegisterType((*RankService_UpdateRankValueResponse)(nil), "rank_service.RankService.UpdateRankValueResponse")
	proto.RegisterType((*RankService_BatchUpdateRankValueRequest)(nil), "rank_service.RankService.BatchUpdateRankValueRequest")
	proto.RegisterType((*RankService_BatchUpdateRankValueResponse)(nil), "rank_service.RankService.BatchUpdateRankValueResponse")
	proto.RegisterType((*RankService_DeleteRankValueRequest)(nil), "rank_service.RankService.DeleteRankValueRequest")
	proto.RegisterType((*RankService_DeleteRankValueResponse)(nil), "rank_service.RankService.DeleteRankValueResponse")
	proto.RegisterType((*RankService_GetValueByIndexRequest)(nil), "rank_service.RankService.GetValueByIndexRequest")
	proto.RegisterType((*RankService_GetValueByIndexResponse)(nil), "rank_service.RankService.GetValueByIndexResponse")
	proto.RegisterType((*RankService_GetRankValueByOwnerIdRequest)(nil), "rank_service.RankService.GetRankValueByOwnerIdRequest")
	proto.RegisterType((*RankService_GetRankValueByOwnerIdResponse)(nil), "rank_service.RankService.GetRankValueByOwnerIdResponse")
	proto.RegisterType((*RankService_TopRankGetRequest)(nil), "rank_service.RankService.TopRankGetRequest")
	proto.RegisterType((*RankService_TopRankGetResponse)(nil), "rank_service.RankService.TopRankGetResponse")
	proto.RegisterType((*RankService_TopRankUpdateRequest)(nil), "rank_service.RankService.TopRankUpdateRequest")
	proto.RegisterType((*RankService_TopRankUpdateResponse)(nil), "rank_service.RankService.TopRankUpdateResponse")
}

func init() { proto.RegisterFile("proto/rank-server/rank.proto", fileDescriptor_209637c9690c1f7f) }

var fileDescriptor_209637c9690c1f7f = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0xee, 0x58, 0x81, 0x72, 0x8a, 0x91, 0x4e, 0x4a, 0x5b, 0x16, 0x98, 0xa0, 0xc6, 0x04, 0x8d,
	0x80, 0xc1, 0x37, 0x28, 0x10, 0x52, 0x63, 0x24, 0x2e, 0x68, 0xa2, 0x37, 0x64, 0xd9, 0x3d, 0xd1,
	0x0d, 0xdb, 0x9d, 0x75, 0x76, 0x40, 0xfb, 0x0a, 0x5e, 0x79, 0xe5, 0x33, 0xe8, 0x03, 0x98, 0x18,
	0x12, 0xef, 0xb9, 0xe4, 0x92, 0x4b, 0xdd, 0x9a, 0xe8, 0xa5, 0x8f, 0x60, 0xe6, 0xa7, 0xdd, 0xf2,
	0xd3, 0xa0, 0xf1, 0x6e, 0xce, 0x37, 0xdf, 0x39, 0xdf, 0x39, 0xdf, 0xfc, 0xc0, 0x6c, 0x22, 0xb8,
	0xe4, 0xcb, 0xc2, 0x8b, 0xf7, 0x16, 0x53, 0x14, 0x07, 0x28, 0xf4, 0x7a, 0x49, 0xc3, 0x74, 0x42,
	0xad, 0x77, 0x14, 0x1e, 0xfa, 0xe8, 0xd4, 0x0d, 0xb7, 0xcd, 0x03, 0x8c, 0xd2, 0xe5, 0x5d, 0x2f,
	0x45, 0x43, 0x3b, 0xb3, 0x91, 0xe7, 0xdf, 0xfc, 0x5a, 0x82, 0xb2, 0xeb, 0xc5, 0x7b, 0x5b, 0xb6,
	0x42, 0x0b, 0x2a, 0xab, 0x02, 0x3d, 0x89, 0x0a, 0x74, 0xf1, 0xf5, 0x3e, 0xa6, 0x92, 0xce, 0xc0,
	0xb8, 0x96, 0x91, 0x9d, 0x04, 0x1b, 0x64, 0x9e, 0x2c, 0x14, 0xdd, 0x92, 0x02, 0xb6, 0x3b, 0x09,
	0xd2, 0x3a, 0x8c, 0xe9, 0xcd, 0x30, 0x68, 0x5c, 0x99, 0x27, 0x0b, 0xe3, 0xee, 0xa8, 0x0a, 0x5b,
	0x81, 0xb3, 0x08, 0x74, 0xb0, 0x54, 0x9a, 0xf0, 0x38, 0x3d, 0x45, 0x27, 0xa7, 0xe8, 0x0f, 0xa1,
	0xf6, 0x34, 0x09, 0x2c, 0xfd, 0x99, 0x17, 0xed, 0x63, 0x4f, 0xfe, 0x3e, 0x80, 0x4e, 0x39, 0x50,
	0xa0, 0xce, 0x2a, 0xaf, 0x54, 0x96, 0xcc, 0x2c, 0x4b, 0x39, 0x5b, 0xf7, 0xa8, 0x97, 0xce, 0x34,
	0xd4, 0xcf, 0xd5, 0x32, 0xfa, 0xce, 0x26, 0xcc, 0x34, 0x3d, 0xe9, 0xbf, 0xfa, 0x4b, 0xad, 0xe2,
	0xa5, 0x5a, 0x0c, 0x66, 0x2f, 0x2e, 0x68, 0x05, 0x1f, 0x41, 0x6d, 0x0d, 0x23, 0xbc, 0x40, 0x6b,
	0x98, 0x15, 0x74, 0x1a, 0x4a, 0xfc, 0x4d, 0x8c, 0x22, 0xf7, 0x74, 0x4c, 0xc7, 0xad, 0x40, 0x4d,
	0x76, 0xae, 0x9a, 0x15, 0x7a, 0x0e, 0xb5, 0x0d, 0x94, 0x1a, 0x6b, 0x76, 0x5a, 0x71, 0x80, 0x6f,
	0x2f, 0x15, 0xaa, 0xc2, 0x48, 0x2a, 0x3d, 0x21, 0xb5, 0x4a, 0xd1, 0x35, 0x01, 0x9d, 0x84, 0x22,
	0xc6, 0x41, 0xa3, 0xa8, 0x31, 0xb5, 0x74, 0x10, 0xea, 0xe7, 0x4a, 0xdb, 0xf3, 0x5c, 0x81, 0x72,
	0x6e, 0x58, 0x3a, 0xdc, 0x31, 0xe8, 0x3b, 0x96, 0xd2, 0x1a, 0x8c, 0x62, 0x1c, 0x84, 0xf1, 0x4b,
	0xad, 0x5b, 0x72, 0x6d, 0xe4, 0xb8, 0x30, 0xbb, 0x81, 0xb2, 0x9f, 0xd3, 0xec, 0x6c, 0x9a, 0xa9,
	0xff, 0xc7, 0xb0, 0x27, 0x30, 0x37, 0xa4, 0xa6, 0x1d, 0xe0, 0xdf, 0x6f, 0xd7, 0x1d, 0xa8, 0x6c,
	0xf3, 0x44, 0x6d, 0xa9, 0xca, 0xb6, 0xb7, 0x2a, 0x8c, 0xc8, 0x50, 0x46, 0xbd, 0xf7, 0x61, 0x02,
	0xf5, 0x06, 0x06, 0xa9, 0x03, 0x6f, 0x80, 0x47, 0x68, 0xe6, 0x28, 0xea, 0x39, 0x78, 0x84, 0xad,
	0xc0, 0xf9, 0x40, 0xa0, 0x6a, 0xf9, 0xf6, 0x3a, 0x0d, 0x4c, 0xde, 0xcf, 0x20, 0x79, 0x06, 0xbd,
	0x01, 0x13, 0x3e, 0x6f, 0xef, 0x7a, 0xd2, 0xf6, 0x6f, 0x0e, 0xb2, 0x6c, 0x30, 0xdd, 0x2e, 0x9d,
	0x03, 0x88, 0xbc, 0x54, 0xee, 0x98, 0xf6, 0xcc, 0xa9, 0x8e, 0x2b, 0x64, 0x5b, 0x01, 0xf4, 0x16,
	0x5c, 0xf3, 0xf7, 0x85, 0xc0, 0xb8, 0xc7, 0xb8, 0xaa, 0x19, 0x13, 0x16, 0xd4, 0x24, 0xa7, 0x0e,
	0x53, 0x67, 0xfa, 0x32, 0xa3, 0xdc, 0x5d, 0x83, 0xea, 0xc0, 0xf7, 0xb1, 0x2e, 0x04, 0x17, 0xab,
	0x3c, 0x40, 0x7a, 0x0f, 0x2a, 0xeb, 0x42, 0xf4, 0xed, 0x6b, 0xa5, 0x8f, 0xc3, 0x68, 0xb2, 0xe0,
	0x4c, 0xbd, 0xfb, 0xdc, 0xa8, 0xd0, 0xeb, 0x7d, 0x2f, 0x7f, 0x7c, 0x39, 0xfc, 0xf9, 0xe9, 0xb0,
	0xb9, 0x75, 0xf2, 0x9d, 0x15, 0x3e, 0x66, 0x8c, 0x1c, 0x65, 0x8c, 0x1c, 0x67, 0x8c, 0x7c, 0xcb,
	0x18, 0xf9, 0x95, 0xb1, 0xc2, 0xef, 0x8c, 0x91, 0xf7, 0x5d, 0x56, 0x38, 0xea, 0x32, 0x72, 0xdc,
	0x65, 0x85, 0x93, 0x2e, 0x2b, 0xbc, 0xb8, 0xed, 0xf3, 0x30, 0xee, 0xfd, 0x85, 0x3e, 0x6f, 0xb7,
	0x79, 0xbc, 0x9c, 0x7f, 0x92, 0xbd, 0xcf, 0x70, 0x77, 0x54, 0x63, 0x0f, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0x8d, 0x5c, 0x57, 0x41, 0x05, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_CreateRankRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_CreateRankResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_UpdateRankValueRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_UpdateRankValueResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_BatchUpdateRankValueRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_BatchUpdateRankValueResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_DeleteRankValueRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_DeleteRankValueResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_GetValueByIndexRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_GetValueByIndexResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_GetRankValueByOwnerIdRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_GetRankValueByOwnerIdResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_TopRankGetRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_TopRankGetResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_TopRankUpdateRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankService_TopRankUpdateResponse.Get().(proto.Message)
	})
}

var poolRankService = &sync.Pool{New: func() interface{} { return &RankService{} }}

func (m *RankService) ReleasePool() { m.Reset(); poolRankService.Put(m); m = nil }

var poolRankService_CreateRankRequest = &sync.Pool{New: func() interface{} { return &RankService_CreateRankRequest{} }}

func (m *RankService_CreateRankRequest) ReleasePool() {
	m.Reset()
	poolRankService_CreateRankRequest.Put(m)
	m = nil
}

var poolRankService_CreateRankResponse = &sync.Pool{New: func() interface{} { return &RankService_CreateRankResponse{} }}

func (m *RankService_CreateRankResponse) ReleasePool() {
	m.Reset()
	poolRankService_CreateRankResponse.Put(m)
	m = nil
}

var poolRankService_UpdateRankValueRequest = &sync.Pool{New: func() interface{} { return &RankService_UpdateRankValueRequest{} }}

func (m *RankService_UpdateRankValueRequest) ReleasePool() {
	m.Reset()
	poolRankService_UpdateRankValueRequest.Put(m)
	m = nil
}

var poolRankService_UpdateRankValueResponse = &sync.Pool{New: func() interface{} { return &RankService_UpdateRankValueResponse{} }}

func (m *RankService_UpdateRankValueResponse) ReleasePool() {
	m.Reset()
	poolRankService_UpdateRankValueResponse.Put(m)
	m = nil
}

var poolRankService_BatchUpdateRankValueRequest = &sync.Pool{New: func() interface{} { return &RankService_BatchUpdateRankValueRequest{} }}

func (m *RankService_BatchUpdateRankValueRequest) ReleasePool() {
	m.Reset()
	poolRankService_BatchUpdateRankValueRequest.Put(m)
	m = nil
}

var poolRankService_BatchUpdateRankValueResponse = &sync.Pool{New: func() interface{} { return &RankService_BatchUpdateRankValueResponse{} }}

func (m *RankService_BatchUpdateRankValueResponse) ReleasePool() {
	m.Reset()
	poolRankService_BatchUpdateRankValueResponse.Put(m)
	m = nil
}

var poolRankService_DeleteRankValueRequest = &sync.Pool{New: func() interface{} { return &RankService_DeleteRankValueRequest{} }}

func (m *RankService_DeleteRankValueRequest) ReleasePool() {
	m.Reset()
	poolRankService_DeleteRankValueRequest.Put(m)
	m = nil
}

var poolRankService_DeleteRankValueResponse = &sync.Pool{New: func() interface{} { return &RankService_DeleteRankValueResponse{} }}

func (m *RankService_DeleteRankValueResponse) ReleasePool() {
	m.Reset()
	poolRankService_DeleteRankValueResponse.Put(m)
	m = nil
}

var poolRankService_GetValueByIndexRequest = &sync.Pool{New: func() interface{} { return &RankService_GetValueByIndexRequest{} }}

func (m *RankService_GetValueByIndexRequest) ReleasePool() {
	m.Reset()
	poolRankService_GetValueByIndexRequest.Put(m)
	m = nil
}

var poolRankService_GetValueByIndexResponse = &sync.Pool{New: func() interface{} { return &RankService_GetValueByIndexResponse{} }}

func (m *RankService_GetValueByIndexResponse) ReleasePool() {
	m.Reset()
	poolRankService_GetValueByIndexResponse.Put(m)
	m = nil
}

var poolRankService_GetRankValueByOwnerIdRequest = &sync.Pool{New: func() interface{} { return &RankService_GetRankValueByOwnerIdRequest{} }}

func (m *RankService_GetRankValueByOwnerIdRequest) ReleasePool() {
	m.Reset()
	poolRankService_GetRankValueByOwnerIdRequest.Put(m)
	m = nil
}

var poolRankService_GetRankValueByOwnerIdResponse = &sync.Pool{New: func() interface{} { return &RankService_GetRankValueByOwnerIdResponse{} }}

func (m *RankService_GetRankValueByOwnerIdResponse) ReleasePool() {
	m.Reset()
	poolRankService_GetRankValueByOwnerIdResponse.Put(m)
	m = nil
}

var poolRankService_TopRankGetRequest = &sync.Pool{New: func() interface{} { return &RankService_TopRankGetRequest{} }}

func (m *RankService_TopRankGetRequest) ReleasePool() {
	m.Reset()
	poolRankService_TopRankGetRequest.Put(m)
	m = nil
}

var poolRankService_TopRankGetResponse = &sync.Pool{New: func() interface{} { return &RankService_TopRankGetResponse{} }}

func (m *RankService_TopRankGetResponse) ReleasePool() {
	m.Reset()
	poolRankService_TopRankGetResponse.Put(m)
	m = nil
}

var poolRankService_TopRankUpdateRequest = &sync.Pool{New: func() interface{} { return &RankService_TopRankUpdateRequest{} }}

func (m *RankService_TopRankUpdateRequest) ReleasePool() {
	m.Reset()
	poolRankService_TopRankUpdateRequest.Put(m)
	m = nil
}

var poolRankService_TopRankUpdateResponse = &sync.Pool{New: func() interface{} { return &RankService_TopRankUpdateResponse{} }}

func (m *RankService_TopRankUpdateResponse) ReleasePool() {
	m.Reset()
	poolRankService_TopRankUpdateResponse.Put(m)
	m = nil
}
func (x RankServiceErrorCode) String() string {
	s, ok := RankServiceErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RankService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService)
	if !ok {
		that2, ok := that.(RankService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RankService_CreateRankRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_CreateRankRequest)
	if !ok {
		that2, ok := that.(RankService_CreateRankRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankType != that1.RankType {
		return false
	}
	if this.RankId != that1.RankId {
		return false
	}
	return true
}
func (this *RankService_CreateRankResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_CreateRankResponse)
	if !ok {
		that2, ok := that.(RankService_CreateRankResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankId != that1.RankId {
		return false
	}
	return true
}
func (this *RankService_UpdateRankValueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_UpdateRankValueRequest)
	if !ok {
		that2, ok := that.(RankService_UpdateRankValueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RankValue.Equal(that1.RankValue) {
		return false
	}
	return true
}
func (this *RankService_UpdateRankValueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_UpdateRankValueResponse)
	if !ok {
		that2, ok := that.(RankService_UpdateRankValueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RankService_BatchUpdateRankValueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_BatchUpdateRankValueRequest)
	if !ok {
		that2, ok := that.(RankService_BatchUpdateRankValueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RankValue) != len(that1.RankValue) {
		return false
	}
	for i := range this.RankValue {
		if !this.RankValue[i].Equal(that1.RankValue[i]) {
			return false
		}
	}
	return true
}
func (this *RankService_BatchUpdateRankValueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_BatchUpdateRankValueResponse)
	if !ok {
		that2, ok := that.(RankService_BatchUpdateRankValueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RankService_DeleteRankValueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_DeleteRankValueRequest)
	if !ok {
		that2, ok := that.(RankService_DeleteRankValueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankId != that1.RankId {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	return true
}
func (this *RankService_DeleteRankValueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_DeleteRankValueResponse)
	if !ok {
		that2, ok := that.(RankService_DeleteRankValueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RankService_GetValueByIndexRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_GetValueByIndexRequest)
	if !ok {
		that2, ok := that.(RankService_GetValueByIndexRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankId != that1.RankId {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.End != that1.End {
		return false
	}
	return true
}
func (this *RankService_GetValueByIndexResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_GetValueByIndexResponse)
	if !ok {
		that2, ok := that.(RankService_GetValueByIndexResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RankValues) != len(that1.RankValues) {
		return false
	}
	for i := range this.RankValues {
		if !this.RankValues[i].Equal(that1.RankValues[i]) {
			return false
		}
	}
	if this.Ending != that1.Ending {
		return false
	}
	return true
}
func (this *RankService_GetRankValueByOwnerIdRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_GetRankValueByOwnerIdRequest)
	if !ok {
		that2, ok := that.(RankService_GetRankValueByOwnerIdRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankId != that1.RankId {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	return true
}
func (this *RankService_GetRankValueByOwnerIdResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_GetRankValueByOwnerIdResponse)
	if !ok {
		that2, ok := that.(RankService_GetRankValueByOwnerIdResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RankValue.Equal(that1.RankValue) {
		return false
	}
	return true
}
func (this *RankService_TopRankGetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_TopRankGetRequest)
	if !ok {
		that2, ok := that.(RankService_TopRankGetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *RankService_TopRankGetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_TopRankGetResponse)
	if !ok {
		that2, ok := that.(RankService_TopRankGetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RoleId) != len(that1.RoleId) {
		return false
	}
	for i := range this.RoleId {
		if this.RoleId[i] != that1.RoleId[i] {
			return false
		}
	}
	return true
}
func (this *RankService_TopRankUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_TopRankUpdateRequest)
	if !ok {
		that2, ok := that.(RankService_TopRankUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.CombatValue != that1.CombatValue {
		return false
	}
	if this.LastTitle != that1.LastTitle {
		return false
	}
	if this.CurrentTitle != that1.CurrentTitle {
		return false
	}
	return true
}
func (this *RankService_TopRankUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankService_TopRankUpdateResponse)
	if !ok {
		that2, ok := that.(RankService_TopRankUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *RankService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RankService_CreateRankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_CreateRankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_CreateRankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankId) > 0 {
		i -= len(m.RankId)
		copy(dAtA[i:], m.RankId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RankId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RankType != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.RankType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankService_CreateRankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_CreateRankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_CreateRankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankId) > 0 {
		i -= len(m.RankId)
		copy(dAtA[i:], m.RankId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RankId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankService_UpdateRankValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_UpdateRankValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_UpdateRankValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RankValue != nil {
		{
			size, err := m.RankValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankService_UpdateRankValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_UpdateRankValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_UpdateRankValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RankService_BatchUpdateRankValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_BatchUpdateRankValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_BatchUpdateRankValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankValue) > 0 {
		for iNdEx := len(m.RankValue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankValue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RankService_BatchUpdateRankValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_BatchUpdateRankValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_BatchUpdateRankValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RankService_DeleteRankValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_DeleteRankValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_DeleteRankValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RankId) > 0 {
		i -= len(m.RankId)
		copy(dAtA[i:], m.RankId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RankId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankService_DeleteRankValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_DeleteRankValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_DeleteRankValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RankService_GetValueByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_GetValueByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_GetValueByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x18
	}
	if m.Start != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RankId) > 0 {
		i -= len(m.RankId)
		copy(dAtA[i:], m.RankId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RankId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankService_GetValueByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_GetValueByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_GetValueByIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ending {
		i--
		if m.Ending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RankValues) > 0 {
		for iNdEx := len(m.RankValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RankValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RankService_GetRankValueByOwnerIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_GetRankValueByOwnerIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_GetRankValueByOwnerIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RankId) > 0 {
		i -= len(m.RankId)
		copy(dAtA[i:], m.RankId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RankId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankService_GetRankValueByOwnerIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_GetRankValueByOwnerIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_GetRankValueByOwnerIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RankValue != nil {
		{
			size, err := m.RankValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankService_TopRankGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_TopRankGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_TopRankGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Title != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankService_TopRankGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_TopRankGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_TopRankGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		for iNdEx := len(m.RoleId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleId[iNdEx])
			copy(dAtA[i:], m.RoleId[iNdEx])
			i = encodeVarintRank(dAtA, i, uint64(len(m.RoleId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RankService_TopRankUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_TopRankUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_TopRankUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentTitle != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.CurrentTitle))
		i--
		dAtA[i] = 0x20
	}
	if m.LastTitle != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.LastTitle))
		i--
		dAtA[i] = 0x18
	}
	if m.CombatValue != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.CombatValue))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankService_TopRankUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankService_TopRankUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankService_TopRankUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RankService) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RankService_CreateRankRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankType != 0 {
		w.RawByte('"')
		w.RawString("rank_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankType))
		needWriteComma = true
	}
	if m.RankId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rank_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_CreateRankResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankId != "" {
		w.RawByte('"')
		w.RawString("rank_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_UpdateRankValueRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rank_value")
	w.RawByte('"')
	w.RawByte(':')
	m.RankValue.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_UpdateRankValueResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RankService_BatchUpdateRankValueRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rank_value")
	w.RawByte('"')
	w.RawByte(':')
	if m.RankValue == nil {
		w.RawString("null")
	} else if len(m.RankValue) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RankValue {
			v.JsonBytes(w)
			if i != len(m.RankValue)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_BatchUpdateRankValueResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RankService_DeleteRankValueRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankId != "" {
		w.RawByte('"')
		w.RawString("rank_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankId)
		needWriteComma = true
	}
	if m.OwnerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_DeleteRankValueResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RankService_GetValueByIndexRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankId != "" {
		w.RawByte('"')
		w.RawString("rank_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankId)
		needWriteComma = true
	}
	if m.Start != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Start))
		needWriteComma = true
	}
	if m.End != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.End))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_GetValueByIndexResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rank_values")
	w.RawByte('"')
	w.RawByte(':')
	if m.RankValues == nil {
		w.RawString("null")
	} else if len(m.RankValues) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RankValues {
			v.JsonBytes(w)
			if i != len(m.RankValues)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Ending {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ending")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Ending)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_GetRankValueByOwnerIdRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankId != "" {
		w.RawByte('"')
		w.RawString("rank_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankId)
		needWriteComma = true
	}
	if m.OwnerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_GetRankValueByOwnerIdResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rank_value")
	w.RawByte('"')
	w.RawByte(':')
	m.RankValue.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_TopRankGetRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Title != 0 {
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_TopRankGetResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleId == nil {
		w.RawString("null")
	} else if len(m.RoleId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleId {
			w.String(v)
			if i != len(m.RoleId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_TopRankUpdateRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.CombatValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValue))
		needWriteComma = true
	}
	if m.LastTitle != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastTitle))
		needWriteComma = true
	}
	if m.CurrentTitle != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("current_title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurrentTitle))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankService_TopRankUpdateResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *RankService) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService) GoString() string {
	return m.String()
}

func (m *RankService_CreateRankRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_CreateRankRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_CreateRankRequest) GoString() string {
	return m.String()
}

func (m *RankService_CreateRankResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_CreateRankResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_CreateRankResponse) GoString() string {
	return m.String()
}

func (m *RankService_UpdateRankValueRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_UpdateRankValueRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_UpdateRankValueRequest) GoString() string {
	return m.String()
}

func (m *RankService_UpdateRankValueResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_UpdateRankValueResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_UpdateRankValueResponse) GoString() string {
	return m.String()
}

func (m *RankService_BatchUpdateRankValueRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_BatchUpdateRankValueRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_BatchUpdateRankValueRequest) GoString() string {
	return m.String()
}

func (m *RankService_BatchUpdateRankValueResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_BatchUpdateRankValueResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_BatchUpdateRankValueResponse) GoString() string {
	return m.String()
}

func (m *RankService_DeleteRankValueRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_DeleteRankValueRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_DeleteRankValueRequest) GoString() string {
	return m.String()
}

func (m *RankService_DeleteRankValueResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_DeleteRankValueResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_DeleteRankValueResponse) GoString() string {
	return m.String()
}

func (m *RankService_GetValueByIndexRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_GetValueByIndexRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_GetValueByIndexRequest) GoString() string {
	return m.String()
}

func (m *RankService_GetValueByIndexResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_GetValueByIndexResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_GetValueByIndexResponse) GoString() string {
	return m.String()
}

func (m *RankService_GetRankValueByOwnerIdRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_GetRankValueByOwnerIdRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_GetRankValueByOwnerIdRequest) GoString() string {
	return m.String()
}

func (m *RankService_GetRankValueByOwnerIdResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_GetRankValueByOwnerIdResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_GetRankValueByOwnerIdResponse) GoString() string {
	return m.String()
}

func (m *RankService_TopRankGetRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_TopRankGetRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_TopRankGetRequest) GoString() string {
	return m.String()
}

func (m *RankService_TopRankGetResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_TopRankGetResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_TopRankGetResponse) GoString() string {
	return m.String()
}

func (m *RankService_TopRankUpdateRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_TopRankUpdateRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_TopRankUpdateRequest) GoString() string {
	return m.String()
}

func (m *RankService_TopRankUpdateResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankService_TopRankUpdateResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankService_TopRankUpdateResponse) GoString() string {
	return m.String()
}

func (m *RankService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RankService_CreateRankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankType != 0 {
		n += 1 + sovRank(uint64(m.RankType))
	}
	l = len(m.RankId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	return n
}

func (m *RankService_CreateRankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	return n
}

func (m *RankService_UpdateRankValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankValue != nil {
		l = m.RankValue.Size()
		n += 1 + l + sovRank(uint64(l))
	}
	return n
}

func (m *RankService_UpdateRankValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RankService_BatchUpdateRankValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RankValue) > 0 {
		for _, e := range m.RankValue {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	return n
}

func (m *RankService_BatchUpdateRankValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RankService_DeleteRankValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	return n
}

func (m *RankService_DeleteRankValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RankService_GetValueByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovRank(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovRank(uint64(m.End))
	}
	return n
}

func (m *RankService_GetValueByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RankValues) > 0 {
		for _, e := range m.RankValues {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if m.Ending {
		n += 2
	}
	return n
}

func (m *RankService_GetRankValueByOwnerIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	return n
}

func (m *RankService_GetRankValueByOwnerIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankValue != nil {
		l = m.RankValue.Size()
		n += 1 + l + sovRank(uint64(l))
	}
	return n
}

func (m *RankService_TopRankGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != 0 {
		n += 1 + sovRank(uint64(m.Title))
	}
	return n
}

func (m *RankService_TopRankGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		for _, s := range m.RoleId {
			l = len(s)
			n += 1 + l + sovRank(uint64(l))
		}
	}
	return n
}

func (m *RankService_TopRankUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.CombatValue != 0 {
		n += 1 + sovRank(uint64(m.CombatValue))
	}
	if m.LastTitle != 0 {
		n += 1 + sovRank(uint64(m.LastTitle))
	}
	if m.CurrentTitle != 0 {
		n += 1 + sovRank(uint64(m.CurrentTitle))
	}
	return n
}

func (m *RankService_TopRankUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRank(x uint64) (n int) {
	return sovRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RankService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_CreateRankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankType", wireType)
			}
			m.RankType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_CreateRankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_UpdateRankValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRankValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRankValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankValue == nil {
				m.RankValue = &models.RankValue{}
			}
			if err := m.RankValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_UpdateRankValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRankValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRankValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_BatchUpdateRankValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchUpdateRankValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchUpdateRankValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankValue = append(m.RankValue, &models.RankValue{})
			if err := m.RankValue[len(m.RankValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_BatchUpdateRankValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchUpdateRankValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchUpdateRankValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_DeleteRankValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRankValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRankValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_DeleteRankValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRankValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRankValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_GetValueByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValueByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValueByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_GetValueByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValueByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValueByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankValues = append(m.RankValues, &models.RankValue{})
			if err := m.RankValues[len(m.RankValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ending = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_GetRankValueByOwnerIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRankValueByOwnerIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRankValueByOwnerIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_GetRankValueByOwnerIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRankValueByOwnerIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRankValueByOwnerIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankValue == nil {
				m.RankValue = &models.RankValue{}
			}
			if err := m.RankValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_TopRankGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopRankGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopRankGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_TopRankGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopRankGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopRankGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = append(m.RoleId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_TopRankUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopRankUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopRankUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			m.CombatValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTitle", wireType)
			}
			m.LastTitle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTitle |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTitle", wireType)
			}
			m.CurrentTitle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTitle |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankService_TopRankUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopRankUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopRankUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRank = fmt.Errorf("proto: unexpected end of group")
)
