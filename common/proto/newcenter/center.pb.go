// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/newcenter/center.proto

package newcenter

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NewCenter struct {
}

func (m *NewCenter) Reset()      { *m = NewCenter{} }
func (*NewCenter) ProtoMessage() {}
func (*NewCenter) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0}
}
func (m *NewCenter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter.Merge(m, src)
}
func (m *NewCenter) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter proto.InternalMessageInfo

func (*NewCenter) XXX_MessageName() string {
	return "newcenter.NewCenter"
}

type NewCenter_SelfAddrRequest struct {
}

func (m *NewCenter_SelfAddrRequest) Reset()      { *m = NewCenter_SelfAddrRequest{} }
func (*NewCenter_SelfAddrRequest) ProtoMessage() {}
func (*NewCenter_SelfAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 0}
}
func (m *NewCenter_SelfAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_SelfAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_SelfAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_SelfAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_SelfAddrRequest.Merge(m, src)
}
func (m *NewCenter_SelfAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_SelfAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_SelfAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_SelfAddrRequest proto.InternalMessageInfo

func (*NewCenter_SelfAddrRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.SelfAddrRequest"
}

type NewCenter_SelfAddrResponse struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *NewCenter_SelfAddrResponse) Reset()      { *m = NewCenter_SelfAddrResponse{} }
func (*NewCenter_SelfAddrResponse) ProtoMessage() {}
func (*NewCenter_SelfAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 1}
}
func (m *NewCenter_SelfAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_SelfAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_SelfAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_SelfAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_SelfAddrResponse.Merge(m, src)
}
func (m *NewCenter_SelfAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_SelfAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_SelfAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_SelfAddrResponse proto.InternalMessageInfo

func (m *NewCenter_SelfAddrResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (*NewCenter_SelfAddrResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.SelfAddrResponse"
}

type NewCenter_AuthEdgeRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Now   int64  `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
}

func (m *NewCenter_AuthEdgeRequest) Reset()      { *m = NewCenter_AuthEdgeRequest{} }
func (*NewCenter_AuthEdgeRequest) ProtoMessage() {}
func (*NewCenter_AuthEdgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 2}
}
func (m *NewCenter_AuthEdgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_AuthEdgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_AuthEdgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_AuthEdgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_AuthEdgeRequest.Merge(m, src)
}
func (m *NewCenter_AuthEdgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_AuthEdgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_AuthEdgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_AuthEdgeRequest proto.InternalMessageInfo

func (m *NewCenter_AuthEdgeRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NewCenter_AuthEdgeRequest) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (*NewCenter_AuthEdgeRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.AuthEdgeRequest"
}

type NewCenter_AuthEdgeResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Now   int64  `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
}

func (m *NewCenter_AuthEdgeResponse) Reset()      { *m = NewCenter_AuthEdgeResponse{} }
func (*NewCenter_AuthEdgeResponse) ProtoMessage() {}
func (*NewCenter_AuthEdgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 3}
}
func (m *NewCenter_AuthEdgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_AuthEdgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_AuthEdgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_AuthEdgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_AuthEdgeResponse.Merge(m, src)
}
func (m *NewCenter_AuthEdgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_AuthEdgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_AuthEdgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_AuthEdgeResponse proto.InternalMessageInfo

func (m *NewCenter_AuthEdgeResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NewCenter_AuthEdgeResponse) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (*NewCenter_AuthEdgeResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.AuthEdgeResponse"
}

type NewCenter_FindValidServerRequest struct {
	BattleType models.BattleType `protobuf:"varint,1,opt,name=battle_type,json=battleType,proto3,enum=models.BattleType" json:"battle_type,omitempty"`
	ServerId   int64             `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	MapConfig  int64             `protobuf:"varint,3,opt,name=map_config,json=mapConfig,proto3" json:"map_config,omitempty"`
}

func (m *NewCenter_FindValidServerRequest) Reset()      { *m = NewCenter_FindValidServerRequest{} }
func (*NewCenter_FindValidServerRequest) ProtoMessage() {}
func (*NewCenter_FindValidServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 4}
}
func (m *NewCenter_FindValidServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_FindValidServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_FindValidServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_FindValidServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_FindValidServerRequest.Merge(m, src)
}
func (m *NewCenter_FindValidServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_FindValidServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_FindValidServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_FindValidServerRequest proto.InternalMessageInfo

func (m *NewCenter_FindValidServerRequest) GetBattleType() models.BattleType {
	if m != nil {
		return m.BattleType
	}
	return models.BattleType_Unknown_
}

func (m *NewCenter_FindValidServerRequest) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *NewCenter_FindValidServerRequest) GetMapConfig() int64 {
	if m != nil {
		return m.MapConfig
	}
	return 0
}

func (*NewCenter_FindValidServerRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.FindValidServerRequest"
}

type NewCenter_FindValidServerResponse struct {
	ServerId int64 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (m *NewCenter_FindValidServerResponse) Reset()      { *m = NewCenter_FindValidServerResponse{} }
func (*NewCenter_FindValidServerResponse) ProtoMessage() {}
func (*NewCenter_FindValidServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 5}
}
func (m *NewCenter_FindValidServerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_FindValidServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_FindValidServerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_FindValidServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_FindValidServerResponse.Merge(m, src)
}
func (m *NewCenter_FindValidServerResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_FindValidServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_FindValidServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_FindValidServerResponse proto.InternalMessageInfo

func (m *NewCenter_FindValidServerResponse) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (*NewCenter_FindValidServerResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.FindValidServerResponse"
}

// 获取地图所有分线
type NewCenter_GetMapAllLinesRequest struct {
	MapId int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *NewCenter_GetMapAllLinesRequest) Reset()      { *m = NewCenter_GetMapAllLinesRequest{} }
func (*NewCenter_GetMapAllLinesRequest) ProtoMessage() {}
func (*NewCenter_GetMapAllLinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 6}
}
func (m *NewCenter_GetMapAllLinesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_GetMapAllLinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_GetMapAllLinesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_GetMapAllLinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_GetMapAllLinesRequest.Merge(m, src)
}
func (m *NewCenter_GetMapAllLinesRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_GetMapAllLinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_GetMapAllLinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_GetMapAllLinesRequest proto.InternalMessageInfo

func (m *NewCenter_GetMapAllLinesRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (*NewCenter_GetMapAllLinesRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.GetMapAllLinesRequest"
}

type NewCenter_GetMapAllLinesResponse struct {
	AllLineInfo *models.AllLineInfo `protobuf:"bytes,1,opt,name=all_line_info,json=allLineInfo,proto3" json:"all_line_info,omitempty"`
}

func (m *NewCenter_GetMapAllLinesResponse) Reset()      { *m = NewCenter_GetMapAllLinesResponse{} }
func (*NewCenter_GetMapAllLinesResponse) ProtoMessage() {}
func (*NewCenter_GetMapAllLinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 7}
}
func (m *NewCenter_GetMapAllLinesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_GetMapAllLinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_GetMapAllLinesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_GetMapAllLinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_GetMapAllLinesResponse.Merge(m, src)
}
func (m *NewCenter_GetMapAllLinesResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_GetMapAllLinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_GetMapAllLinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_GetMapAllLinesResponse proto.InternalMessageInfo

func (m *NewCenter_GetMapAllLinesResponse) GetAllLineInfo() *models.AllLineInfo {
	if m != nil {
		return m.AllLineInfo
	}
	return nil
}

func (*NewCenter_GetMapAllLinesResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.GetMapAllLinesResponse"
}

// 获取具体分线信息
type NewCenter_GetTargetLineRequest struct {
	MapId          int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64 `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *NewCenter_GetTargetLineRequest) Reset()      { *m = NewCenter_GetTargetLineRequest{} }
func (*NewCenter_GetTargetLineRequest) ProtoMessage() {}
func (*NewCenter_GetTargetLineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 8}
}
func (m *NewCenter_GetTargetLineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_GetTargetLineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_GetTargetLineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_GetTargetLineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_GetTargetLineRequest.Merge(m, src)
}
func (m *NewCenter_GetTargetLineRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_GetTargetLineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_GetTargetLineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_GetTargetLineRequest proto.InternalMessageInfo

func (m *NewCenter_GetTargetLineRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_GetTargetLineRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*NewCenter_GetTargetLineRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.GetTargetLineRequest"
}

type NewCenter_GetTargetLineResponse struct {
	LineInfo   *models.LineInfo `protobuf:"bytes,1,opt,name=line_info,json=lineInfo,proto3" json:"line_info,omitempty"`
	RoleInLine bool             `protobuf:"varint,2,opt,name=role_in_line,json=roleInLine,proto3" json:"role_in_line,omitempty"`
}

func (m *NewCenter_GetTargetLineResponse) Reset()      { *m = NewCenter_GetTargetLineResponse{} }
func (*NewCenter_GetTargetLineResponse) ProtoMessage() {}
func (*NewCenter_GetTargetLineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 9}
}
func (m *NewCenter_GetTargetLineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_GetTargetLineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_GetTargetLineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_GetTargetLineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_GetTargetLineResponse.Merge(m, src)
}
func (m *NewCenter_GetTargetLineResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_GetTargetLineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_GetTargetLineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_GetTargetLineResponse proto.InternalMessageInfo

func (m *NewCenter_GetTargetLineResponse) GetLineInfo() *models.LineInfo {
	if m != nil {
		return m.LineInfo
	}
	return nil
}

func (m *NewCenter_GetTargetLineResponse) GetRoleInLine() bool {
	if m != nil {
		return m.RoleInLine
	}
	return false
}

func (*NewCenter_GetTargetLineResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.GetTargetLineResponse"
}

// 检查目标分线是否满了，如果满了或者分线不可用则返回可用分线
type NewCenter_CheckLineRequest struct {
	MapId          int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64 `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *NewCenter_CheckLineRequest) Reset()      { *m = NewCenter_CheckLineRequest{} }
func (*NewCenter_CheckLineRequest) ProtoMessage() {}
func (*NewCenter_CheckLineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 10}
}
func (m *NewCenter_CheckLineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CheckLineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CheckLineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CheckLineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CheckLineRequest.Merge(m, src)
}
func (m *NewCenter_CheckLineRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CheckLineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CheckLineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CheckLineRequest proto.InternalMessageInfo

func (m *NewCenter_CheckLineRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_CheckLineRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*NewCenter_CheckLineRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.CheckLineRequest"
}

type NewCenter_CheckLineResponse struct {
	LineInfo *models.LineInfo `protobuf:"bytes,1,opt,name=line_info,json=lineInfo,proto3" json:"line_info,omitempty"`
}

func (m *NewCenter_CheckLineResponse) Reset()      { *m = NewCenter_CheckLineResponse{} }
func (*NewCenter_CheckLineResponse) ProtoMessage() {}
func (*NewCenter_CheckLineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 11}
}
func (m *NewCenter_CheckLineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CheckLineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CheckLineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CheckLineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CheckLineResponse.Merge(m, src)
}
func (m *NewCenter_CheckLineResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CheckLineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CheckLineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CheckLineResponse proto.InternalMessageInfo

func (m *NewCenter_CheckLineResponse) GetLineInfo() *models.LineInfo {
	if m != nil {
		return m.LineInfo
	}
	return nil
}

func (*NewCenter_CheckLineResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.CheckLineResponse"
}

type NewCenter_EdgeUser struct {
	RoleId  string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	AddTime int64  `protobuf:"varint,2,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
}

func (m *NewCenter_EdgeUser) Reset()      { *m = NewCenter_EdgeUser{} }
func (*NewCenter_EdgeUser) ProtoMessage() {}
func (*NewCenter_EdgeUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 12}
}
func (m *NewCenter_EdgeUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_EdgeUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_EdgeUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_EdgeUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_EdgeUser.Merge(m, src)
}
func (m *NewCenter_EdgeUser) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_EdgeUser) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_EdgeUser.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_EdgeUser proto.InternalMessageInfo

func (m *NewCenter_EdgeUser) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NewCenter_EdgeUser) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (*NewCenter_EdgeUser) XXX_MessageName() string {
	return "newcenter.NewCenter.EdgeUser"
}

type NewCenter_EdgeInfo struct {
	BattleId    int64                 `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapId       int64                 `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Roles       []*NewCenter_EdgeUser `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	IsAdd       bool                  `protobuf:"varint,4,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	IsEnd       bool                  `protobuf:"varint,5,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
	GuildBossId string                `protobuf:"bytes,6,opt,name=guild_boss_id,json=guildBossId,proto3" json:"guild_boss_id,omitempty"`
	RoomId      int64                 `protobuf:"varint,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BossHallId  int64                 `protobuf:"varint,8,opt,name=boss_hall_id,json=bossHallId,proto3" json:"boss_hall_id,omitempty"`
	LineId      int64                 `protobuf:"varint,9,opt,name=line_id,json=lineId,proto3" json:"line_id,omitempty"`
	CanNotEnter bool                  `protobuf:"varint,10,opt,name=can_not_enter,json=canNotEnter,proto3" json:"can_not_enter,omitempty"`
}

func (m *NewCenter_EdgeInfo) Reset()      { *m = NewCenter_EdgeInfo{} }
func (*NewCenter_EdgeInfo) ProtoMessage() {}
func (*NewCenter_EdgeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 13}
}
func (m *NewCenter_EdgeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_EdgeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_EdgeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_EdgeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_EdgeInfo.Merge(m, src)
}
func (m *NewCenter_EdgeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_EdgeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_EdgeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_EdgeInfo proto.InternalMessageInfo

func (m *NewCenter_EdgeInfo) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *NewCenter_EdgeInfo) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_EdgeInfo) GetRoles() []*NewCenter_EdgeUser {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *NewCenter_EdgeInfo) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (m *NewCenter_EdgeInfo) GetIsEnd() bool {
	if m != nil {
		return m.IsEnd
	}
	return false
}

func (m *NewCenter_EdgeInfo) GetGuildBossId() string {
	if m != nil {
		return m.GuildBossId
	}
	return ""
}

func (m *NewCenter_EdgeInfo) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *NewCenter_EdgeInfo) GetBossHallId() int64 {
	if m != nil {
		return m.BossHallId
	}
	return 0
}

func (m *NewCenter_EdgeInfo) GetLineId() int64 {
	if m != nil {
		return m.LineId
	}
	return 0
}

func (m *NewCenter_EdgeInfo) GetCanNotEnter() bool {
	if m != nil {
		return m.CanNotEnter
	}
	return false
}

func (*NewCenter_EdgeInfo) XXX_MessageName() string {
	return "newcenter.NewCenter.EdgeInfo"
}

type NewCenter_SyncEdgeInfoPush struct {
	Edges           []*NewCenter_EdgeInfo `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
	IsAll           bool                  `protobuf:"varint,2,opt,name=is_all,json=isAll,proto3" json:"is_all,omitempty"`
	RemainCpuWeight int64                 `protobuf:"varint,3,opt,name=remain_cpu_weight,json=remainCpuWeight,proto3" json:"remain_cpu_weight,omitempty"`
	Typ             models.EdgeType       `protobuf:"varint,4,opt,name=typ,proto3,enum=models.EdgeType" json:"typ,omitempty"`
}

func (m *NewCenter_SyncEdgeInfoPush) Reset()      { *m = NewCenter_SyncEdgeInfoPush{} }
func (*NewCenter_SyncEdgeInfoPush) ProtoMessage() {}
func (*NewCenter_SyncEdgeInfoPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 14}
}
func (m *NewCenter_SyncEdgeInfoPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_SyncEdgeInfoPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_SyncEdgeInfoPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_SyncEdgeInfoPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_SyncEdgeInfoPush.Merge(m, src)
}
func (m *NewCenter_SyncEdgeInfoPush) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_SyncEdgeInfoPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_SyncEdgeInfoPush.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_SyncEdgeInfoPush proto.InternalMessageInfo

func (m *NewCenter_SyncEdgeInfoPush) GetEdges() []*NewCenter_EdgeInfo {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *NewCenter_SyncEdgeInfoPush) GetIsAll() bool {
	if m != nil {
		return m.IsAll
	}
	return false
}

func (m *NewCenter_SyncEdgeInfoPush) GetRemainCpuWeight() int64 {
	if m != nil {
		return m.RemainCpuWeight
	}
	return 0
}

func (m *NewCenter_SyncEdgeInfoPush) GetTyp() models.EdgeType {
	if m != nil {
		return m.Typ
	}
	return models.EdgeType_StatelessServer
}

func (*NewCenter_SyncEdgeInfoPush) XXX_MessageName() string {
	return "newcenter.NewCenter.SyncEdgeInfoPush"
}

// 获取具体分线信息
type NewCenter_CurBattleInfoRequest struct {
	MapId          int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64 `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	HungUpServerId int64 `protobuf:"varint,3,opt,name=hung_up_server_id,json=hungUpServerId,proto3" json:"hung_up_server_id,omitempty"`
	HungUpMapId    int64 `protobuf:"varint,4,opt,name=hung_up_map_id,json=hungUpMapId,proto3" json:"hung_up_map_id,omitempty"`
}

func (m *NewCenter_CurBattleInfoRequest) Reset()      { *m = NewCenter_CurBattleInfoRequest{} }
func (*NewCenter_CurBattleInfoRequest) ProtoMessage() {}
func (*NewCenter_CurBattleInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 15}
}
func (m *NewCenter_CurBattleInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CurBattleInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CurBattleInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CurBattleInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CurBattleInfoRequest.Merge(m, src)
}
func (m *NewCenter_CurBattleInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CurBattleInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CurBattleInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CurBattleInfoRequest proto.InternalMessageInfo

func (m *NewCenter_CurBattleInfoRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_CurBattleInfoRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NewCenter_CurBattleInfoRequest) GetHungUpServerId() int64 {
	if m != nil {
		return m.HungUpServerId
	}
	return 0
}

func (m *NewCenter_CurBattleInfoRequest) GetHungUpMapId() int64 {
	if m != nil {
		return m.HungUpMapId
	}
	return 0
}

func (*NewCenter_CurBattleInfoRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.CurBattleInfoRequest"
}

type NewCenter_CurBattleInfoResponse struct {
	MapId          int64            `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64            `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	HungUpServerId int64            `protobuf:"varint,3,opt,name=hung_up_server_id,json=hungUpServerId,proto3" json:"hung_up_server_id,omitempty"`
	HungUpMapId    int64            `protobuf:"varint,4,opt,name=hung_up_map_id,json=hungUpMapId,proto3" json:"hung_up_map_id,omitempty"`
	LineInfo       *models.LineInfo `protobuf:"bytes,5,opt,name=line_info,json=lineInfo,proto3" json:"line_info,omitempty"`
}

func (m *NewCenter_CurBattleInfoResponse) Reset()      { *m = NewCenter_CurBattleInfoResponse{} }
func (*NewCenter_CurBattleInfoResponse) ProtoMessage() {}
func (*NewCenter_CurBattleInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 16}
}
func (m *NewCenter_CurBattleInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CurBattleInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CurBattleInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CurBattleInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CurBattleInfoResponse.Merge(m, src)
}
func (m *NewCenter_CurBattleInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CurBattleInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CurBattleInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CurBattleInfoResponse proto.InternalMessageInfo

func (m *NewCenter_CurBattleInfoResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_CurBattleInfoResponse) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NewCenter_CurBattleInfoResponse) GetHungUpServerId() int64 {
	if m != nil {
		return m.HungUpServerId
	}
	return 0
}

func (m *NewCenter_CurBattleInfoResponse) GetHungUpMapId() int64 {
	if m != nil {
		return m.HungUpMapId
	}
	return 0
}

func (m *NewCenter_CurBattleInfoResponse) GetLineInfo() *models.LineInfo {
	if m != nil {
		return m.LineInfo
	}
	return nil
}

func (*NewCenter_CurBattleInfoResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.CurBattleInfoResponse"
}

type NewCenter_CurGuildBossInfoRequest struct {
	MapId        int64            `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	UnionId      string           `protobuf:"bytes,2,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	UnionBossId  string           `protobuf:"bytes,3,opt,name=union_boss_id,json=unionBossId,proto3" json:"union_boss_id,omitempty"`
	TotalDamages int64            `protobuf:"varint,4,opt,name=total_damages,json=totalDamages,proto3" json:"total_damages,omitempty"`
	Damages      map[string]int64 `protobuf:"bytes,5,rep,name=damages,proto3" json:"damages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *NewCenter_CurGuildBossInfoRequest) Reset()      { *m = NewCenter_CurGuildBossInfoRequest{} }
func (*NewCenter_CurGuildBossInfoRequest) ProtoMessage() {}
func (*NewCenter_CurGuildBossInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 17}
}
func (m *NewCenter_CurGuildBossInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CurGuildBossInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CurGuildBossInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CurGuildBossInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CurGuildBossInfoRequest.Merge(m, src)
}
func (m *NewCenter_CurGuildBossInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CurGuildBossInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CurGuildBossInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CurGuildBossInfoRequest proto.InternalMessageInfo

func (m *NewCenter_CurGuildBossInfoRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_CurGuildBossInfoRequest) GetUnionId() string {
	if m != nil {
		return m.UnionId
	}
	return ""
}

func (m *NewCenter_CurGuildBossInfoRequest) GetUnionBossId() string {
	if m != nil {
		return m.UnionBossId
	}
	return ""
}

func (m *NewCenter_CurGuildBossInfoRequest) GetTotalDamages() int64 {
	if m != nil {
		return m.TotalDamages
	}
	return 0
}

func (m *NewCenter_CurGuildBossInfoRequest) GetDamages() map[string]int64 {
	if m != nil {
		return m.Damages
	}
	return nil
}

func (*NewCenter_CurGuildBossInfoRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.CurGuildBossInfoRequest"
}

type NewCenter_CurGuildBossInfoResponse struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	IsNew          bool  `protobuf:"varint,2,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
}

func (m *NewCenter_CurGuildBossInfoResponse) Reset()      { *m = NewCenter_CurGuildBossInfoResponse{} }
func (*NewCenter_CurGuildBossInfoResponse) ProtoMessage() {}
func (*NewCenter_CurGuildBossInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 18}
}
func (m *NewCenter_CurGuildBossInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CurGuildBossInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CurGuildBossInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CurGuildBossInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CurGuildBossInfoResponse.Merge(m, src)
}
func (m *NewCenter_CurGuildBossInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CurGuildBossInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CurGuildBossInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CurGuildBossInfoResponse proto.InternalMessageInfo

func (m *NewCenter_CurGuildBossInfoResponse) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NewCenter_CurGuildBossInfoResponse) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

func (*NewCenter_CurGuildBossInfoResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.CurGuildBossInfoResponse"
}

type NewCenter_UnionBossOnlineCountRequest struct {
	UnionBossId string `protobuf:"bytes,1,opt,name=union_boss_id,json=unionBossId,proto3" json:"union_boss_id,omitempty"`
}

func (m *NewCenter_UnionBossOnlineCountRequest) Reset()      { *m = NewCenter_UnionBossOnlineCountRequest{} }
func (*NewCenter_UnionBossOnlineCountRequest) ProtoMessage() {}
func (*NewCenter_UnionBossOnlineCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 19}
}
func (m *NewCenter_UnionBossOnlineCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_UnionBossOnlineCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_UnionBossOnlineCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_UnionBossOnlineCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_UnionBossOnlineCountRequest.Merge(m, src)
}
func (m *NewCenter_UnionBossOnlineCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_UnionBossOnlineCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_UnionBossOnlineCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_UnionBossOnlineCountRequest proto.InternalMessageInfo

func (m *NewCenter_UnionBossOnlineCountRequest) GetUnionBossId() string {
	if m != nil {
		return m.UnionBossId
	}
	return ""
}

func (*NewCenter_UnionBossOnlineCountRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.UnionBossOnlineCountRequest"
}

type NewCenter_UnionBossOnlineCountResponse struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *NewCenter_UnionBossOnlineCountResponse) Reset() {
	*m = NewCenter_UnionBossOnlineCountResponse{}
}
func (*NewCenter_UnionBossOnlineCountResponse) ProtoMessage() {}
func (*NewCenter_UnionBossOnlineCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 20}
}
func (m *NewCenter_UnionBossOnlineCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_UnionBossOnlineCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_UnionBossOnlineCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_UnionBossOnlineCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_UnionBossOnlineCountResponse.Merge(m, src)
}
func (m *NewCenter_UnionBossOnlineCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_UnionBossOnlineCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_UnionBossOnlineCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_UnionBossOnlineCountResponse proto.InternalMessageInfo

func (m *NewCenter_UnionBossOnlineCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*NewCenter_UnionBossOnlineCountResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.UnionBossOnlineCountResponse"
}

type NewCenter_CurBossHallRequest struct {
	BossId int64 `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
}

func (m *NewCenter_CurBossHallRequest) Reset()      { *m = NewCenter_CurBossHallRequest{} }
func (*NewCenter_CurBossHallRequest) ProtoMessage() {}
func (*NewCenter_CurBossHallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 21}
}
func (m *NewCenter_CurBossHallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CurBossHallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CurBossHallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CurBossHallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CurBossHallRequest.Merge(m, src)
}
func (m *NewCenter_CurBossHallRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CurBossHallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CurBossHallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CurBossHallRequest proto.InternalMessageInfo

func (m *NewCenter_CurBossHallRequest) GetBossId() int64 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (*NewCenter_CurBossHallRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.CurBossHallRequest"
}

type NewCenter_CurBossHallResponse struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	MapScenceId    int64 `protobuf:"varint,2,opt,name=map_scence_id,json=mapScenceId,proto3" json:"map_scence_id,omitempty"`
}

func (m *NewCenter_CurBossHallResponse) Reset()      { *m = NewCenter_CurBossHallResponse{} }
func (*NewCenter_CurBossHallResponse) ProtoMessage() {}
func (*NewCenter_CurBossHallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 22}
}
func (m *NewCenter_CurBossHallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CurBossHallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CurBossHallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CurBossHallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CurBossHallResponse.Merge(m, src)
}
func (m *NewCenter_CurBossHallResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CurBossHallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CurBossHallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CurBossHallResponse proto.InternalMessageInfo

func (m *NewCenter_CurBossHallResponse) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *NewCenter_CurBossHallResponse) GetMapScenceId() int64 {
	if m != nil {
		return m.MapScenceId
	}
	return 0
}

func (*NewCenter_CurBossHallResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.CurBossHallResponse"
}

//创建Roguelike副本
type NewCenter_CreateRoguelikeRequest struct {
	MapId          int64            `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	RoomId         int64            `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Bots           []*models.Bot    `protobuf:"bytes,3,rep,name=bots,proto3" json:"bots,omitempty"`
	MonsterEffects []int64          `protobuf:"varint,4,rep,packed,name=monster_effects,json=monsterEffects,proto3" json:"monster_effects,omitempty"`
	BossEffects    []int64          `protobuf:"varint,5,rep,packed,name=boss_effects,json=bossEffects,proto3" json:"boss_effects,omitempty"`
	CardMap        map[string]int64 `protobuf:"bytes,6,rep,name=card_map,json=cardMap,proto3" json:"card_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *NewCenter_CreateRoguelikeRequest) Reset()      { *m = NewCenter_CreateRoguelikeRequest{} }
func (*NewCenter_CreateRoguelikeRequest) ProtoMessage() {}
func (*NewCenter_CreateRoguelikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 23}
}
func (m *NewCenter_CreateRoguelikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CreateRoguelikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CreateRoguelikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CreateRoguelikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CreateRoguelikeRequest.Merge(m, src)
}
func (m *NewCenter_CreateRoguelikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CreateRoguelikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CreateRoguelikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CreateRoguelikeRequest proto.InternalMessageInfo

func (m *NewCenter_CreateRoguelikeRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_CreateRoguelikeRequest) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *NewCenter_CreateRoguelikeRequest) GetBots() []*models.Bot {
	if m != nil {
		return m.Bots
	}
	return nil
}

func (m *NewCenter_CreateRoguelikeRequest) GetMonsterEffects() []int64 {
	if m != nil {
		return m.MonsterEffects
	}
	return nil
}

func (m *NewCenter_CreateRoguelikeRequest) GetBossEffects() []int64 {
	if m != nil {
		return m.BossEffects
	}
	return nil
}

func (m *NewCenter_CreateRoguelikeRequest) GetCardMap() map[string]int64 {
	if m != nil {
		return m.CardMap
	}
	return nil
}

func (*NewCenter_CreateRoguelikeRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.CreateRoguelikeRequest"
}

type NewCenter_CreateRoguelikeResponse struct {
	MapId    int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	RoomId   int64 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	BattleId int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *NewCenter_CreateRoguelikeResponse) Reset()      { *m = NewCenter_CreateRoguelikeResponse{} }
func (*NewCenter_CreateRoguelikeResponse) ProtoMessage() {}
func (*NewCenter_CreateRoguelikeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 24}
}
func (m *NewCenter_CreateRoguelikeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_CreateRoguelikeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_CreateRoguelikeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_CreateRoguelikeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_CreateRoguelikeResponse.Merge(m, src)
}
func (m *NewCenter_CreateRoguelikeResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_CreateRoguelikeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_CreateRoguelikeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_CreateRoguelikeResponse proto.InternalMessageInfo

func (m *NewCenter_CreateRoguelikeResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_CreateRoguelikeResponse) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *NewCenter_CreateRoguelikeResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*NewCenter_CreateRoguelikeResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.CreateRoguelikeResponse"
}

//center web页面展示
type NewCenter_EdgeBattle struct {
	BattleId int64  `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapId    int64  `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	MapName  string `protobuf:"bytes,3,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
	CurNum   int64  `protobuf:"varint,4,opt,name=cur_num,json=curNum,proto3" json:"cur_num,omitempty"`
}

func (m *NewCenter_EdgeBattle) Reset()      { *m = NewCenter_EdgeBattle{} }
func (*NewCenter_EdgeBattle) ProtoMessage() {}
func (*NewCenter_EdgeBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 25}
}
func (m *NewCenter_EdgeBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_EdgeBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_EdgeBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_EdgeBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_EdgeBattle.Merge(m, src)
}
func (m *NewCenter_EdgeBattle) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_EdgeBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_EdgeBattle.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_EdgeBattle proto.InternalMessageInfo

func (m *NewCenter_EdgeBattle) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *NewCenter_EdgeBattle) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_EdgeBattle) GetMapName() string {
	if m != nil {
		return m.MapName
	}
	return ""
}

func (m *NewCenter_EdgeBattle) GetCurNum() int64 {
	if m != nil {
		return m.CurNum
	}
	return 0
}

func (*NewCenter_EdgeBattle) XXX_MessageName() string {
	return "newcenter.NewCenter.EdgeBattle"
}

type NewCenter_EdgeNode struct {
	Addr    string                  `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Battles []*NewCenter_EdgeBattle `protobuf:"bytes,2,rep,name=battles,proto3" json:"battles,omitempty"`
	Weight  int64                   `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Typ     models.EdgeType         `protobuf:"varint,4,opt,name=typ,proto3,enum=models.EdgeType" json:"typ,omitempty"`
}

func (m *NewCenter_EdgeNode) Reset()      { *m = NewCenter_EdgeNode{} }
func (*NewCenter_EdgeNode) ProtoMessage() {}
func (*NewCenter_EdgeNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 26}
}
func (m *NewCenter_EdgeNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_EdgeNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_EdgeNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_EdgeNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_EdgeNode.Merge(m, src)
}
func (m *NewCenter_EdgeNode) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_EdgeNode) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_EdgeNode.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_EdgeNode proto.InternalMessageInfo

func (m *NewCenter_EdgeNode) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NewCenter_EdgeNode) GetBattles() []*NewCenter_EdgeBattle {
	if m != nil {
		return m.Battles
	}
	return nil
}

func (m *NewCenter_EdgeNode) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *NewCenter_EdgeNode) GetTyp() models.EdgeType {
	if m != nil {
		return m.Typ
	}
	return models.EdgeType_StatelessServer
}

func (*NewCenter_EdgeNode) XXX_MessageName() string {
	return "newcenter.NewCenter.EdgeNode"
}

type NewCenter_EdgeViewInfo struct {
	Edges []*NewCenter_EdgeNode `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (m *NewCenter_EdgeViewInfo) Reset()      { *m = NewCenter_EdgeViewInfo{} }
func (*NewCenter_EdgeViewInfo) ProtoMessage() {}
func (*NewCenter_EdgeViewInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 27}
}
func (m *NewCenter_EdgeViewInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_EdgeViewInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_EdgeViewInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_EdgeViewInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_EdgeViewInfo.Merge(m, src)
}
func (m *NewCenter_EdgeViewInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_EdgeViewInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_EdgeViewInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_EdgeViewInfo proto.InternalMessageInfo

func (m *NewCenter_EdgeViewInfo) GetEdges() []*NewCenter_EdgeNode {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (*NewCenter_EdgeViewInfo) XXX_MessageName() string {
	return "newcenter.NewCenter.EdgeViewInfo"
}

type NewCenter_EdgeUpdateBossInfo struct {
	BattleId        int64        `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	BossId          int64        `protobuf:"varint,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	MapId           int64        `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	NextRefreshTime int64        `protobuf:"varint,4,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	Killer          string       `protobuf:"bytes,5,opt,name=killer,proto3" json:"killer,omitempty"`
	IsDead          bool         `protobuf:"varint,6,opt,name=is_dead,json=isDead,proto3" json:"is_dead,omitempty"`
	TransPort       *models.Vec2 `protobuf:"bytes,7,opt,name=trans_port,json=transPort,proto3" json:"trans_port,omitempty"`
}

func (m *NewCenter_EdgeUpdateBossInfo) Reset()      { *m = NewCenter_EdgeUpdateBossInfo{} }
func (*NewCenter_EdgeUpdateBossInfo) ProtoMessage() {}
func (*NewCenter_EdgeUpdateBossInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 28}
}
func (m *NewCenter_EdgeUpdateBossInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_EdgeUpdateBossInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_EdgeUpdateBossInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_EdgeUpdateBossInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_EdgeUpdateBossInfo.Merge(m, src)
}
func (m *NewCenter_EdgeUpdateBossInfo) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_EdgeUpdateBossInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_EdgeUpdateBossInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_EdgeUpdateBossInfo proto.InternalMessageInfo

func (m *NewCenter_EdgeUpdateBossInfo) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *NewCenter_EdgeUpdateBossInfo) GetBossId() int64 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (m *NewCenter_EdgeUpdateBossInfo) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *NewCenter_EdgeUpdateBossInfo) GetNextRefreshTime() int64 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (m *NewCenter_EdgeUpdateBossInfo) GetKiller() string {
	if m != nil {
		return m.Killer
	}
	return ""
}

func (m *NewCenter_EdgeUpdateBossInfo) GetIsDead() bool {
	if m != nil {
		return m.IsDead
	}
	return false
}

func (m *NewCenter_EdgeUpdateBossInfo) GetTransPort() *models.Vec2 {
	if m != nil {
		return m.TransPort
	}
	return nil
}

func (*NewCenter_EdgeUpdateBossInfo) XXX_MessageName() string {
	return "newcenter.NewCenter.EdgeUpdateBossInfo"
}

// 获取Boss信息
type NewCenter_GetBossInfoRequest struct {
	BossId int64 `protobuf:"varint,1,opt,name=BossId,proto3" json:"BossId,omitempty"`
	MaxCnt int32 `protobuf:"varint,2,opt,name=MaxCnt,proto3" json:"MaxCnt,omitempty"`
	LineId int32 `protobuf:"varint,3,opt,name=LineId,proto3" json:"LineId,omitempty"`
}

func (m *NewCenter_GetBossInfoRequest) Reset()      { *m = NewCenter_GetBossInfoRequest{} }
func (*NewCenter_GetBossInfoRequest) ProtoMessage() {}
func (*NewCenter_GetBossInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 29}
}
func (m *NewCenter_GetBossInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_GetBossInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_GetBossInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_GetBossInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_GetBossInfoRequest.Merge(m, src)
}
func (m *NewCenter_GetBossInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_GetBossInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_GetBossInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_GetBossInfoRequest proto.InternalMessageInfo

func (m *NewCenter_GetBossInfoRequest) GetBossId() int64 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (m *NewCenter_GetBossInfoRequest) GetMaxCnt() int32 {
	if m != nil {
		return m.MaxCnt
	}
	return 0
}

func (m *NewCenter_GetBossInfoRequest) GetLineId() int32 {
	if m != nil {
		return m.LineId
	}
	return 0
}

func (*NewCenter_GetBossInfoRequest) XXX_MessageName() string {
	return "newcenter.NewCenter.GetBossInfoRequest"
}

type NewCenter_GetBossInfoResponse struct {
	BossInfo []*models.BossBattleInfo `protobuf:"bytes,1,rep,name=boss_info,json=bossInfo,proto3" json:"boss_info,omitempty"`
}

func (m *NewCenter_GetBossInfoResponse) Reset()      { *m = NewCenter_GetBossInfoResponse{} }
func (*NewCenter_GetBossInfoResponse) ProtoMessage() {}
func (*NewCenter_GetBossInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 30}
}
func (m *NewCenter_GetBossInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_GetBossInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_GetBossInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_GetBossInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_GetBossInfoResponse.Merge(m, src)
}
func (m *NewCenter_GetBossInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_GetBossInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_GetBossInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_GetBossInfoResponse proto.InternalMessageInfo

func (m *NewCenter_GetBossInfoResponse) GetBossInfo() []*models.BossBattleInfo {
	if m != nil {
		return m.BossInfo
	}
	return nil
}

func (*NewCenter_GetBossInfoResponse) XXX_MessageName() string {
	return "newcenter.NewCenter.GetBossInfoResponse"
}

// 告诉EDGE ，当前恶魔秘境不再可进入
type NewCenter_NotCanEnterPush struct {
	BattleId int64 `protobuf:"varint,1,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	BossId   int64 `protobuf:"varint,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
}

func (m *NewCenter_NotCanEnterPush) Reset()      { *m = NewCenter_NotCanEnterPush{} }
func (*NewCenter_NotCanEnterPush) ProtoMessage() {}
func (*NewCenter_NotCanEnterPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59c3370e5972581, []int{0, 31}
}
func (m *NewCenter_NotCanEnterPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCenter_NotCanEnterPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCenter_NotCanEnterPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCenter_NotCanEnterPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCenter_NotCanEnterPush.Merge(m, src)
}
func (m *NewCenter_NotCanEnterPush) XXX_Size() int {
	return m.Size()
}
func (m *NewCenter_NotCanEnterPush) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCenter_NotCanEnterPush.DiscardUnknown(m)
}

var xxx_messageInfo_NewCenter_NotCanEnterPush proto.InternalMessageInfo

func (m *NewCenter_NotCanEnterPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *NewCenter_NotCanEnterPush) GetBossId() int64 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (*NewCenter_NotCanEnterPush) XXX_MessageName() string {
	return "newcenter.NewCenter.NotCanEnterPush"
}
func init() {
	proto.RegisterType((*NewCenter)(nil), "newcenter.NewCenter")
	proto.RegisterType((*NewCenter_SelfAddrRequest)(nil), "newcenter.NewCenter.SelfAddrRequest")
	proto.RegisterType((*NewCenter_SelfAddrResponse)(nil), "newcenter.NewCenter.SelfAddrResponse")
	proto.RegisterType((*NewCenter_AuthEdgeRequest)(nil), "newcenter.NewCenter.AuthEdgeRequest")
	proto.RegisterType((*NewCenter_AuthEdgeResponse)(nil), "newcenter.NewCenter.AuthEdgeResponse")
	proto.RegisterType((*NewCenter_FindValidServerRequest)(nil), "newcenter.NewCenter.FindValidServerRequest")
	proto.RegisterType((*NewCenter_FindValidServerResponse)(nil), "newcenter.NewCenter.FindValidServerResponse")
	proto.RegisterType((*NewCenter_GetMapAllLinesRequest)(nil), "newcenter.NewCenter.GetMapAllLinesRequest")
	proto.RegisterType((*NewCenter_GetMapAllLinesResponse)(nil), "newcenter.NewCenter.GetMapAllLinesResponse")
	proto.RegisterType((*NewCenter_GetTargetLineRequest)(nil), "newcenter.NewCenter.GetTargetLineRequest")
	proto.RegisterType((*NewCenter_GetTargetLineResponse)(nil), "newcenter.NewCenter.GetTargetLineResponse")
	proto.RegisterType((*NewCenter_CheckLineRequest)(nil), "newcenter.NewCenter.CheckLineRequest")
	proto.RegisterType((*NewCenter_CheckLineResponse)(nil), "newcenter.NewCenter.CheckLineResponse")
	proto.RegisterType((*NewCenter_EdgeUser)(nil), "newcenter.NewCenter.EdgeUser")
	proto.RegisterType((*NewCenter_EdgeInfo)(nil), "newcenter.NewCenter.EdgeInfo")
	proto.RegisterType((*NewCenter_SyncEdgeInfoPush)(nil), "newcenter.NewCenter.SyncEdgeInfoPush")
	proto.RegisterType((*NewCenter_CurBattleInfoRequest)(nil), "newcenter.NewCenter.CurBattleInfoRequest")
	proto.RegisterType((*NewCenter_CurBattleInfoResponse)(nil), "newcenter.NewCenter.CurBattleInfoResponse")
	proto.RegisterType((*NewCenter_CurGuildBossInfoRequest)(nil), "newcenter.NewCenter.CurGuildBossInfoRequest")
	proto.RegisterMapType((map[string]int64)(nil), "newcenter.NewCenter.CurGuildBossInfoRequest.DamagesEntry")
	proto.RegisterType((*NewCenter_CurGuildBossInfoResponse)(nil), "newcenter.NewCenter.CurGuildBossInfoResponse")
	proto.RegisterType((*NewCenter_UnionBossOnlineCountRequest)(nil), "newcenter.NewCenter.UnionBossOnlineCountRequest")
	proto.RegisterType((*NewCenter_UnionBossOnlineCountResponse)(nil), "newcenter.NewCenter.UnionBossOnlineCountResponse")
	proto.RegisterType((*NewCenter_CurBossHallRequest)(nil), "newcenter.NewCenter.CurBossHallRequest")
	proto.RegisterType((*NewCenter_CurBossHallResponse)(nil), "newcenter.NewCenter.CurBossHallResponse")
	proto.RegisterType((*NewCenter_CreateRoguelikeRequest)(nil), "newcenter.NewCenter.CreateRoguelikeRequest")
	proto.RegisterMapType((map[string]int64)(nil), "newcenter.NewCenter.CreateRoguelikeRequest.CardMapEntry")
	proto.RegisterType((*NewCenter_CreateRoguelikeResponse)(nil), "newcenter.NewCenter.CreateRoguelikeResponse")
	proto.RegisterType((*NewCenter_EdgeBattle)(nil), "newcenter.NewCenter.EdgeBattle")
	proto.RegisterType((*NewCenter_EdgeNode)(nil), "newcenter.NewCenter.EdgeNode")
	proto.RegisterType((*NewCenter_EdgeViewInfo)(nil), "newcenter.NewCenter.EdgeViewInfo")
	proto.RegisterType((*NewCenter_EdgeUpdateBossInfo)(nil), "newcenter.NewCenter.EdgeUpdateBossInfo")
	proto.RegisterType((*NewCenter_GetBossInfoRequest)(nil), "newcenter.NewCenter.GetBossInfoRequest")
	proto.RegisterType((*NewCenter_GetBossInfoResponse)(nil), "newcenter.NewCenter.GetBossInfoResponse")
	proto.RegisterType((*NewCenter_NotCanEnterPush)(nil), "newcenter.NewCenter.NotCanEnterPush")
}

func init() { proto.RegisterFile("proto/newcenter/center.proto", fileDescriptor_a59c3370e5972581) }

var fileDescriptor_a59c3370e5972581 = []byte{
	// 1493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4b, 0x6f, 0x1b, 0xd5,
	0x17, 0xcf, 0xd8, 0xf1, 0xeb, 0x38, 0xcf, 0x69, 0x9b, 0x38, 0xd3, 0xd6, 0xcd, 0x3f, 0x95, 0xfe,
	0x84, 0xa2, 0x3a, 0x52, 0x82, 0xa0, 0xed, 0x02, 0x29, 0x71, 0x43, 0x30, 0x22, 0xa1, 0x8c, 0xfb,
	0x90, 0x00, 0x69, 0x74, 0x33, 0xf7, 0xda, 0x1e, 0x65, 0xe6, 0xde, 0x61, 0xe6, 0x4e, 0xdd, 0x7c,
	0x04, 0x24, 0x16, 0x6c, 0xf8, 0x08, 0x08, 0x56, 0x7c, 0x03, 0xb6, 0xa8, 0xcb, 0xee, 0xe8, 0x12,
	0x92, 0x0d, 0x12, 0x1b, 0x3e, 0x02, 0xba, 0x8f, 0xb1, 0xc7, 0x8e, 0xdb, 0xb4, 0x55, 0x17, 0xac,
	0x3c, 0xf7, 0x77, 0xce, 0x3d, 0xaf, 0x7b, 0x5e, 0x86, 0x2b, 0x61, 0xc4, 0x38, 0xdb, 0xa0, 0xa4,
	0xef, 0x12, 0xca, 0x49, 0xb4, 0xa1, 0x7e, 0x1a, 0x12, 0x36, 0x2b, 0x03, 0xdc, 0x5a, 0x56, 0x8c,
	0x01, 0xc3, 0xc4, 0x8f, 0x37, 0x0e, 0x51, 0x4c, 0x14, 0x8f, 0xb5, 0x32, 0x46, 0xe0, 0xdc, 0x4f,
	0x49, 0xa3, 0x77, 0x08, 0xee, 0x6a, 0xc2, 0xda, 0x77, 0x57, 0xa1, 0x72, 0x40, 0xfa, 0x4d, 0x25,
	0x7a, 0x11, 0xe6, 0xdb, 0xc4, 0xef, 0x6c, 0x63, 0x1c, 0xd9, 0xe4, 0x9b, 0x84, 0xc4, 0xdc, 0xfa,
	0x3f, 0x2c, 0x0c, 0xa1, 0x38, 0x64, 0x34, 0x26, 0xa6, 0x09, 0xd3, 0x08, 0xe3, 0xa8, 0x66, 0xac,
	0x1a, 0xeb, 0x15, 0x5b, 0x7e, 0x5b, 0xb7, 0x61, 0x7e, 0x3b, 0xe1, 0xbd, 0x5d, 0xdc, 0x25, 0xfa,
	0xaa, 0x79, 0x11, 0x0a, 0x9c, 0x1d, 0x11, 0xaa, 0xf9, 0xd4, 0xc1, 0x5c, 0x80, 0x3c, 0x65, 0xfd,
	0x5a, 0x6e, 0xd5, 0x58, 0xcf, 0xdb, 0xe2, 0xd3, 0xba, 0x03, 0x0b, 0xc3, 0xab, 0x5a, 0xc5, 0xab,
	0xde, 0xfd, 0xd6, 0x80, 0xa5, 0x8f, 0x3d, 0x8a, 0x1f, 0x22, 0xdf, 0xc3, 0x6d, 0x12, 0x3d, 0x26,
	0xa9, 0xe5, 0xe6, 0x16, 0x54, 0x55, 0x0c, 0x1c, 0x7e, 0x1c, 0x12, 0x29, 0x68, 0x6e, 0xd3, 0x6c,
	0xa8, 0x18, 0x34, 0x76, 0x24, 0xe9, 0xfe, 0x71, 0x48, 0x6c, 0x38, 0x1c, 0x7c, 0x9b, 0x97, 0xa1,
	0x12, 0x4b, 0x29, 0x8e, 0x87, 0xb5, 0x9e, 0xb2, 0x02, 0x5a, 0xd8, 0xbc, 0x0a, 0x10, 0xa0, 0xd0,
	0x71, 0x19, 0xed, 0x78, 0xdd, 0x5a, 0x5e, 0x52, 0x2b, 0x01, 0x0a, 0x9b, 0x12, 0xb0, 0x3e, 0x80,
	0xe5, 0x33, 0xa6, 0x68, 0x77, 0x46, 0xc4, 0x1a, 0xa3, 0x62, 0xad, 0x06, 0x5c, 0xda, 0x23, 0x7c,
	0x1f, 0x85, 0xdb, 0xbe, 0xff, 0x99, 0x47, 0x49, 0x9c, 0x7a, 0x70, 0x09, 0x8a, 0x42, 0xdf, 0xe0,
	0x4a, 0x21, 0x40, 0x61, 0x0b, 0x5b, 0x5f, 0xc0, 0xd2, 0x38, 0xbf, 0x56, 0xf3, 0x21, 0xcc, 0x22,
	0xdf, 0x77, 0x7c, 0x8f, 0x12, 0xc7, 0xa3, 0x1d, 0x26, 0xef, 0x55, 0x37, 0x2f, 0xa4, 0x4e, 0xeb,
	0x0b, 0x2d, 0xda, 0x61, 0x76, 0x15, 0x0d, 0x0f, 0xd6, 0x23, 0xb8, 0xb8, 0x47, 0xf8, 0x7d, 0x14,
	0x75, 0x09, 0x17, 0xe0, 0xcb, 0x2d, 0x30, 0xd7, 0x61, 0x41, 0x87, 0x76, 0x3c, 0x58, 0x73, 0x0a,
	0x6f, 0xa7, 0xbe, 0xf5, 0xa4, 0x6f, 0x59, 0xc1, 0xda, 0xd4, 0x9b, 0x50, 0x19, 0x37, 0x73, 0x21,
	0x35, 0x73, 0x60, 0x63, 0xd9, 0xd7, 0x5f, 0xe6, 0x2a, 0xcc, 0x44, 0xcc, 0x17, 0xec, 0xd2, 0x3b,
	0xa9, 0xad, 0x6c, 0x83, 0xc0, 0x5a, 0x54, 0xf0, 0x5b, 0x6d, 0x58, 0x68, 0xf6, 0x88, 0x7b, 0xf4,
	0x56, 0xcd, 0xdf, 0x81, 0xc5, 0x8c, 0xd0, 0x37, 0x32, 0xdd, 0xfa, 0x08, 0xca, 0x22, 0xb5, 0x1f,
	0xc4, 0x24, 0x32, 0x97, 0xa1, 0xa4, 0xdc, 0xc0, 0x3a, 0xb1, 0x8b, 0xd2, 0x03, 0x6c, 0xae, 0x40,
	0x19, 0x61, 0xec, 0x70, 0x2f, 0x20, 0xda, 0x94, 0x12, 0xc2, 0xf8, 0xbe, 0x17, 0x10, 0xeb, 0xd7,
	0x9c, 0x12, 0x20, 0xe3, 0x70, 0x19, 0x2a, 0xda, 0xf4, 0x61, 0x22, 0x29, 0xa0, 0x85, 0x33, 0xee,
	0xe6, 0xb2, 0xee, 0x6e, 0x41, 0x41, 0x68, 0x89, 0x6b, 0xf9, 0xd5, 0xfc, 0x7a, 0x75, 0xf3, 0x6a,
	0x63, 0xd0, 0x4b, 0x1a, 0x83, 0xd2, 0x6f, 0xa4, 0x26, 0xda, 0x8a, 0x57, 0xc8, 0xf2, 0x62, 0x07,
	0x61, 0x5c, 0x9b, 0x96, 0xa1, 0x2e, 0x78, 0xf1, 0x36, 0xc6, 0x1a, 0x26, 0x14, 0xd7, 0x0a, 0x29,
	0xbc, 0x4b, 0xb1, 0xb9, 0x06, 0xb3, 0xdd, 0xc4, 0xf3, 0xb1, 0x73, 0xc8, 0xe2, 0x58, 0x18, 0x50,
	0x94, 0xde, 0x55, 0x25, 0xb8, 0xc3, 0xe2, 0xb8, 0x85, 0x95, 0xef, 0x2c, 0x10, 0xd4, 0x92, 0x34,
	0xaf, 0x28, 0x8e, 0x2d, 0x2c, 0xde, 0x56, 0x5e, 0xeb, 0x89, 0xdc, 0xf5, 0x70, 0xad, 0x2c, 0xa9,
	0x20, 0xb0, 0x4f, 0x90, 0xef, 0xab, 0xab, 0x2a, 0xe2, 0xb8, 0x56, 0x51, 0x57, 0x65, 0x74, 0xa5,
	0x5e, 0x17, 0x51, 0x87, 0x32, 0xee, 0x48, 0x37, 0x6a, 0x20, 0xad, 0xaa, 0xba, 0x88, 0x1e, 0x30,
	0xbe, 0x2b, 0x9b, 0xda, 0x2f, 0x06, 0x2c, 0xb4, 0x8f, 0xa9, 0x9b, 0xc6, 0xf0, 0x5e, 0x12, 0xf7,
	0x44, 0x4c, 0x44, 0x17, 0x8c, 0x6b, 0xc6, 0x39, 0x31, 0x91, 0x8f, 0xa9, 0x78, 0xd3, 0x98, 0xf8,
	0xbe, 0x4e, 0x3f, 0x11, 0x13, 0xdf, 0x37, 0x6f, 0xc0, 0x62, 0x44, 0x02, 0xe4, 0x51, 0xc7, 0x0d,
	0x13, 0xa7, 0x4f, 0xbc, 0x6e, 0x8f, 0xeb, 0xee, 0x30, 0xaf, 0x08, 0xcd, 0x30, 0x79, 0x24, 0x61,
	0x73, 0x0d, 0xf2, 0xfc, 0x38, 0x94, 0x31, 0x9d, 0x1b, 0x66, 0x8d, 0x50, 0x24, 0x5b, 0x91, 0x20,
	0x5a, 0x3f, 0x19, 0x70, 0xb1, 0x99, 0x44, 0xaa, 0x43, 0x49, 0xfd, 0x6f, 0x29, 0x9d, 0xcd, 0x77,
	0x61, 0xb1, 0x97, 0xd0, 0xae, 0x93, 0x84, 0x19, 0x56, 0x65, 0xe9, 0x9c, 0x20, 0x3c, 0x08, 0x07,
	0xac, 0xd7, 0x61, 0x2e, 0x65, 0xd5, 0x3a, 0xa7, 0x25, 0x5f, 0x55, 0xf1, 0xed, 0xcb, 0x4e, 0xf4,
	0xbb, 0x01, 0x97, 0xc6, 0x2c, 0xd5, 0x35, 0xf2, 0x5f, 0x33, 0x75, 0xb4, 0x68, 0x0b, 0xe7, 0x16,
	0xed, 0x8f, 0x39, 0x58, 0x6e, 0x26, 0xd1, 0xde, 0x20, 0x7f, 0xcf, 0x7f, 0x86, 0x15, 0x28, 0x27,
	0xd4, 0x63, 0x34, 0xf5, 0xa9, 0x62, 0x97, 0xe4, 0x59, 0xa5, 0xa9, 0x22, 0xa5, 0xe5, 0x91, 0x57,
	0xe5, 0x21, 0x41, 0x5d, 0x1e, 0xd7, 0x61, 0x96, 0x33, 0x8e, 0x7c, 0x07, 0xa3, 0x00, 0x89, 0xcc,
	0x54, 0x4e, 0xcc, 0x48, 0xf0, 0xae, 0xc2, 0xcc, 0x36, 0x94, 0x52, 0x72, 0x41, 0x26, 0xee, 0xed,
	0x89, 0x89, 0xfb, 0x02, 0xcb, 0x1b, 0x5a, 0xcc, 0x2e, 0xe5, 0xd1, 0xb1, 0x9d, 0x4a, 0xb2, 0xee,
	0xc0, 0x4c, 0x96, 0x20, 0xa6, 0xec, 0x11, 0x39, 0xd6, 0x0d, 0x4a, 0x7c, 0x8a, 0x69, 0xfc, 0x18,
	0xf9, 0x49, 0xda, 0x9a, 0xd4, 0xe1, 0x4e, 0xee, 0x96, 0x61, 0x7d, 0x05, 0xb5, 0xb3, 0xca, 0x74,
	0x0e, 0x4c, 0x7a, 0x6c, 0x63, 0xe2, 0x63, 0xab, 0xc2, 0xa2, 0xa4, 0x3f, 0x2c, 0xac, 0x03, 0xd2,
	0xb7, 0xb6, 0xe1, 0xf2, 0x83, 0x34, 0x42, 0x9f, 0x53, 0xf1, 0x36, 0x4d, 0x96, 0x50, 0x9e, 0xbe,
	0xc3, 0x99, 0xa8, 0x1a, 0x67, 0xa2, 0x6a, 0xbd, 0x0f, 0x57, 0x26, 0x8b, 0x18, 0xee, 0x19, 0xae,
	0x00, 0xd2, 0xa7, 0x94, 0x07, 0xeb, 0x26, 0x98, 0x22, 0xad, 0x75, 0x03, 0x4a, 0xf5, 0x2d, 0x43,
	0x29, 0xab, 0x29, 0x6f, 0x17, 0x0f, 0x95, 0x12, 0x17, 0x2e, 0x8c, 0xb0, 0xbf, 0xb6, 0xff, 0x6b,
	0x30, 0x2b, 0x32, 0x2a, 0x76, 0x09, 0x75, 0xc9, 0xb0, 0x26, 0xaa, 0x01, 0x0a, 0xdb, 0x12, 0x6b,
	0x61, 0xeb, 0xb7, 0x1c, 0x2c, 0x35, 0x23, 0x82, 0x38, 0xb1, 0x59, 0x37, 0x21, 0xbe, 0x77, 0x74,
	0xde, 0x98, 0xcb, 0x34, 0xdc, 0xdc, 0x48, 0xc3, 0xbd, 0x06, 0xd3, 0x87, 0x8c, 0xa7, 0xf3, 0xa0,
	0x3a, 0x58, 0x89, 0x18, 0xb7, 0x25, 0xc1, 0x7c, 0x07, 0xe6, 0x03, 0x46, 0x63, 0x4e, 0x22, 0x87,
	0x74, 0x3a, 0xc4, 0xe5, 0x22, 0x1b, 0xf3, 0xc2, 0x70, 0x0d, 0xef, 0x2a, 0xd4, 0xfc, 0x9f, 0x6e,
	0xdd, 0x29, 0x57, 0x41, 0x72, 0x55, 0x05, 0x96, 0xb2, 0xb4, 0xa1, 0xec, 0xa2, 0x08, 0x8b, 0xd2,
	0xac, 0x15, 0xa5, 0xc2, 0x5b, 0x93, 0x73, 0x76, 0xa2, 0x6f, 0x8d, 0x26, 0x8a, 0xf0, 0x3e, 0x0a,
	0x75, 0xca, 0xba, 0xea, 0x24, 0x52, 0x36, 0x4b, 0x78, 0xad, 0x94, 0xed, 0xc0, 0xf2, 0x19, 0x5d,
	0x2f, 0xef, 0x5a, 0x2f, 0x0c, 0xe4, 0xc8, 0x34, 0xc6, 0xa3, 0xd3, 0xd8, 0xe2, 0x00, 0xa2, 0xaf,
	0xab, 0xe6, 0xf8, 0x46, 0x83, 0x7b, 0x05, 0xca, 0x02, 0xa6, 0x28, 0x20, 0xba, 0x63, 0x94, 0x02,
	0x14, 0x1e, 0xa0, 0x80, 0x08, 0x93, 0xdc, 0x24, 0x72, 0x68, 0x12, 0xe8, 0x3e, 0x51, 0x74, 0x93,
	0xe8, 0x20, 0x09, 0xac, 0x1f, 0x0c, 0xb5, 0x2d, 0x1c, 0x30, 0x3c, 0x71, 0x51, 0x37, 0x6f, 0x43,
	0x49, 0xe9, 0x8d, 0x6b, 0x39, 0xf9, 0x1c, 0xd7, 0x5e, 0x38, 0xfb, 0x94, 0xe9, 0x76, 0xca, 0x6f,
	0x2e, 0x41, 0x71, 0x64, 0xba, 0xe9, 0xd3, 0x2b, 0x0d, 0xb5, 0x26, 0xcc, 0x08, 0xe0, 0xa1, 0x47,
	0xfa, 0x72, 0x91, 0x79, 0xe5, 0x01, 0x2c, 0x1c, 0xd1, 0x03, 0xd8, 0xfa, 0xdb, 0x00, 0x53, 0x2e,
	0x2a, 0x21, 0x46, 0x9c, 0xa4, 0x0d, 0xe7, 0xe5, 0xb1, 0xcd, 0x54, 0x6d, 0x2e, 0x5b, 0xb5, 0x99,
	0xa0, 0xe7, 0xb3, 0x41, 0xbf, 0x01, 0x8b, 0x94, 0x3c, 0xe1, 0x4e, 0x44, 0x3a, 0x11, 0x89, 0x7b,
	0x6a, 0x25, 0x53, 0x31, 0x9e, 0x17, 0x04, 0x5b, 0xe1, 0x62, 0x35, 0x13, 0x01, 0x39, 0xf2, 0x7c,
	0x9f, 0x44, 0x72, 0xa2, 0x54, 0x6c, 0x7d, 0x12, 0x3a, 0xbd, 0xd8, 0xc1, 0x04, 0xa9, 0x45, 0xa8,
	0x6c, 0x17, 0xbd, 0xf8, 0x2e, 0x41, 0xd8, 0x7c, 0x0f, 0x80, 0x47, 0x88, 0xc6, 0x4e, 0xc8, 0x22,
	0x2e, 0xd7, 0xa0, 0xea, 0xe6, 0x4c, 0x1a, 0xb0, 0x87, 0xc4, 0xdd, 0xb4, 0x2b, 0x92, 0x7e, 0x8f,
	0x45, 0xdc, 0xfa, 0x1a, 0xcc, 0x3d, 0xc2, 0xc7, 0xa7, 0xcf, 0x12, 0x14, 0x55, 0x6f, 0x4b, 0x9b,
	0x90, 0x9e, 0x1f, 0x4b, 0x50, 0xdc, 0x47, 0x4f, 0x9a, 0x94, 0x4b, 0x37, 0x0b, 0xb6, 0x3e, 0x09,
	0x5c, 0xce, 0x37, 0xe5, 0x66, 0xc1, 0xd6, 0x27, 0xeb, 0x53, 0xb8, 0x30, 0x22, 0x5d, 0x97, 0xc0,
	0x16, 0x54, 0x54, 0xb8, 0xd4, 0x72, 0x2b, 0xde, 0x66, 0x69, 0xd8, 0x20, 0xe2, 0x38, 0x33, 0xeb,
	0xcb, 0x87, 0xfa, 0xb2, 0xb5, 0x07, 0xf3, 0x07, 0x8c, 0x37, 0x11, 0x95, 0x1b, 0x97, 0x5c, 0xb0,
	0xde, 0xe8, 0x4d, 0x76, 0xee, 0x3d, 0xff, 0xb3, 0x3e, 0xf5, 0xf3, 0x49, 0xdd, 0x78, 0x7a, 0x52,
	0x37, 0x9e, 0x9d, 0xd4, 0x8d, 0x3f, 0x4e, 0xea, 0xc6, 0x5f, 0x27, 0xf5, 0xa9, 0x7f, 0x4e, 0xea,
	0xc6, 0xf7, 0xa7, 0xf5, 0xa9, 0xa7, 0xa7, 0x75, 0xe3, 0xd9, 0x69, 0x7d, 0xea, 0xf9, 0x69, 0x7d,
	0xea, 0xcb, 0x35, 0x97, 0x79, 0xf4, 0xa6, 0x6a, 0xae, 0x1b, 0x2e, 0x0b, 0x02, 0x46, 0x37, 0xc6,
	0xfe, 0x45, 0x1f, 0x16, 0x25, 0xb0, 0xf5, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x31, 0xd4, 0xc3,
	0x03, 0x5f, 0x0f, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_SelfAddrRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_SelfAddrResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_AuthEdgeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_AuthEdgeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_FindValidServerRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_FindValidServerResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_GetMapAllLinesRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_GetMapAllLinesResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_GetTargetLineRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_GetTargetLineResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CheckLineRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CheckLineResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_EdgeUser.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_EdgeInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_SyncEdgeInfoPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CurBattleInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CurBattleInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CurGuildBossInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CurGuildBossInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_UnionBossOnlineCountRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_UnionBossOnlineCountResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CurBossHallRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CurBossHallResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CreateRoguelikeRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_CreateRoguelikeResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_EdgeBattle.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_EdgeNode.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_EdgeViewInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_EdgeUpdateBossInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_GetBossInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_GetBossInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNewCenter_NotCanEnterPush.Get().(proto.Message)
	})
}

var poolNewCenter = &sync.Pool{New: func() interface{} { return &NewCenter{} }}

func (m *NewCenter) ReleasePool() { m.Reset(); poolNewCenter.Put(m); m = nil }

var poolNewCenter_SelfAddrRequest = &sync.Pool{New: func() interface{} { return &NewCenter_SelfAddrRequest{} }}

func (m *NewCenter_SelfAddrRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_SelfAddrRequest.Put(m)
	m = nil
}

var poolNewCenter_SelfAddrResponse = &sync.Pool{New: func() interface{} { return &NewCenter_SelfAddrResponse{} }}

func (m *NewCenter_SelfAddrResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_SelfAddrResponse.Put(m)
	m = nil
}

var poolNewCenter_AuthEdgeRequest = &sync.Pool{New: func() interface{} { return &NewCenter_AuthEdgeRequest{} }}

func (m *NewCenter_AuthEdgeRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_AuthEdgeRequest.Put(m)
	m = nil
}

var poolNewCenter_AuthEdgeResponse = &sync.Pool{New: func() interface{} { return &NewCenter_AuthEdgeResponse{} }}

func (m *NewCenter_AuthEdgeResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_AuthEdgeResponse.Put(m)
	m = nil
}

var poolNewCenter_FindValidServerRequest = &sync.Pool{New: func() interface{} { return &NewCenter_FindValidServerRequest{} }}

func (m *NewCenter_FindValidServerRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_FindValidServerRequest.Put(m)
	m = nil
}

var poolNewCenter_FindValidServerResponse = &sync.Pool{New: func() interface{} { return &NewCenter_FindValidServerResponse{} }}

func (m *NewCenter_FindValidServerResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_FindValidServerResponse.Put(m)
	m = nil
}

var poolNewCenter_GetMapAllLinesRequest = &sync.Pool{New: func() interface{} { return &NewCenter_GetMapAllLinesRequest{} }}

func (m *NewCenter_GetMapAllLinesRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_GetMapAllLinesRequest.Put(m)
	m = nil
}

var poolNewCenter_GetMapAllLinesResponse = &sync.Pool{New: func() interface{} { return &NewCenter_GetMapAllLinesResponse{} }}

func (m *NewCenter_GetMapAllLinesResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_GetMapAllLinesResponse.Put(m)
	m = nil
}

var poolNewCenter_GetTargetLineRequest = &sync.Pool{New: func() interface{} { return &NewCenter_GetTargetLineRequest{} }}

func (m *NewCenter_GetTargetLineRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_GetTargetLineRequest.Put(m)
	m = nil
}

var poolNewCenter_GetTargetLineResponse = &sync.Pool{New: func() interface{} { return &NewCenter_GetTargetLineResponse{} }}

func (m *NewCenter_GetTargetLineResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_GetTargetLineResponse.Put(m)
	m = nil
}

var poolNewCenter_CheckLineRequest = &sync.Pool{New: func() interface{} { return &NewCenter_CheckLineRequest{} }}

func (m *NewCenter_CheckLineRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_CheckLineRequest.Put(m)
	m = nil
}

var poolNewCenter_CheckLineResponse = &sync.Pool{New: func() interface{} { return &NewCenter_CheckLineResponse{} }}

func (m *NewCenter_CheckLineResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_CheckLineResponse.Put(m)
	m = nil
}

var poolNewCenter_EdgeUser = &sync.Pool{New: func() interface{} { return &NewCenter_EdgeUser{} }}

func (m *NewCenter_EdgeUser) ReleasePool() { m.Reset(); poolNewCenter_EdgeUser.Put(m); m = nil }

var poolNewCenter_EdgeInfo = &sync.Pool{New: func() interface{} { return &NewCenter_EdgeInfo{} }}

func (m *NewCenter_EdgeInfo) ReleasePool() { m.Reset(); poolNewCenter_EdgeInfo.Put(m); m = nil }

var poolNewCenter_SyncEdgeInfoPush = &sync.Pool{New: func() interface{} { return &NewCenter_SyncEdgeInfoPush{} }}

func (m *NewCenter_SyncEdgeInfoPush) ReleasePool() {
	m.Reset()
	poolNewCenter_SyncEdgeInfoPush.Put(m)
	m = nil
}

var poolNewCenter_CurBattleInfoRequest = &sync.Pool{New: func() interface{} { return &NewCenter_CurBattleInfoRequest{} }}

func (m *NewCenter_CurBattleInfoRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_CurBattleInfoRequest.Put(m)
	m = nil
}

var poolNewCenter_CurBattleInfoResponse = &sync.Pool{New: func() interface{} { return &NewCenter_CurBattleInfoResponse{} }}

func (m *NewCenter_CurBattleInfoResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_CurBattleInfoResponse.Put(m)
	m = nil
}

var poolNewCenter_CurGuildBossInfoRequest = &sync.Pool{New: func() interface{} { return &NewCenter_CurGuildBossInfoRequest{} }}

func (m *NewCenter_CurGuildBossInfoRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_CurGuildBossInfoRequest.Put(m)
	m = nil
}

var poolNewCenter_CurGuildBossInfoResponse = &sync.Pool{New: func() interface{} { return &NewCenter_CurGuildBossInfoResponse{} }}

func (m *NewCenter_CurGuildBossInfoResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_CurGuildBossInfoResponse.Put(m)
	m = nil
}

var poolNewCenter_UnionBossOnlineCountRequest = &sync.Pool{New: func() interface{} { return &NewCenter_UnionBossOnlineCountRequest{} }}

func (m *NewCenter_UnionBossOnlineCountRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_UnionBossOnlineCountRequest.Put(m)
	m = nil
}

var poolNewCenter_UnionBossOnlineCountResponse = &sync.Pool{New: func() interface{} { return &NewCenter_UnionBossOnlineCountResponse{} }}

func (m *NewCenter_UnionBossOnlineCountResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_UnionBossOnlineCountResponse.Put(m)
	m = nil
}

var poolNewCenter_CurBossHallRequest = &sync.Pool{New: func() interface{} { return &NewCenter_CurBossHallRequest{} }}

func (m *NewCenter_CurBossHallRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_CurBossHallRequest.Put(m)
	m = nil
}

var poolNewCenter_CurBossHallResponse = &sync.Pool{New: func() interface{} { return &NewCenter_CurBossHallResponse{} }}

func (m *NewCenter_CurBossHallResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_CurBossHallResponse.Put(m)
	m = nil
}

var poolNewCenter_CreateRoguelikeRequest = &sync.Pool{New: func() interface{} { return &NewCenter_CreateRoguelikeRequest{} }}

func (m *NewCenter_CreateRoguelikeRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_CreateRoguelikeRequest.Put(m)
	m = nil
}

var poolNewCenter_CreateRoguelikeResponse = &sync.Pool{New: func() interface{} { return &NewCenter_CreateRoguelikeResponse{} }}

func (m *NewCenter_CreateRoguelikeResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_CreateRoguelikeResponse.Put(m)
	m = nil
}

var poolNewCenter_EdgeBattle = &sync.Pool{New: func() interface{} { return &NewCenter_EdgeBattle{} }}

func (m *NewCenter_EdgeBattle) ReleasePool() { m.Reset(); poolNewCenter_EdgeBattle.Put(m); m = nil }

var poolNewCenter_EdgeNode = &sync.Pool{New: func() interface{} { return &NewCenter_EdgeNode{} }}

func (m *NewCenter_EdgeNode) ReleasePool() { m.Reset(); poolNewCenter_EdgeNode.Put(m); m = nil }

var poolNewCenter_EdgeViewInfo = &sync.Pool{New: func() interface{} { return &NewCenter_EdgeViewInfo{} }}

func (m *NewCenter_EdgeViewInfo) ReleasePool() { m.Reset(); poolNewCenter_EdgeViewInfo.Put(m); m = nil }

var poolNewCenter_EdgeUpdateBossInfo = &sync.Pool{New: func() interface{} { return &NewCenter_EdgeUpdateBossInfo{} }}

func (m *NewCenter_EdgeUpdateBossInfo) ReleasePool() {
	m.Reset()
	poolNewCenter_EdgeUpdateBossInfo.Put(m)
	m = nil
}

var poolNewCenter_GetBossInfoRequest = &sync.Pool{New: func() interface{} { return &NewCenter_GetBossInfoRequest{} }}

func (m *NewCenter_GetBossInfoRequest) ReleasePool() {
	m.Reset()
	poolNewCenter_GetBossInfoRequest.Put(m)
	m = nil
}

var poolNewCenter_GetBossInfoResponse = &sync.Pool{New: func() interface{} { return &NewCenter_GetBossInfoResponse{} }}

func (m *NewCenter_GetBossInfoResponse) ReleasePool() {
	m.Reset()
	poolNewCenter_GetBossInfoResponse.Put(m)
	m = nil
}

var poolNewCenter_NotCanEnterPush = &sync.Pool{New: func() interface{} { return &NewCenter_NotCanEnterPush{} }}

func (m *NewCenter_NotCanEnterPush) ReleasePool() {
	m.Reset()
	poolNewCenter_NotCanEnterPush.Put(m)
	m = nil
}
func (this *NewCenter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter)
	if !ok {
		that2, ok := that.(NewCenter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewCenter_SelfAddrRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_SelfAddrRequest)
	if !ok {
		that2, ok := that.(NewCenter_SelfAddrRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NewCenter_SelfAddrResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_SelfAddrResponse)
	if !ok {
		that2, ok := that.(NewCenter_SelfAddrResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	return true
}
func (this *NewCenter_AuthEdgeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_AuthEdgeRequest)
	if !ok {
		that2, ok := that.(NewCenter_AuthEdgeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Now != that1.Now {
		return false
	}
	return true
}
func (this *NewCenter_AuthEdgeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_AuthEdgeResponse)
	if !ok {
		that2, ok := that.(NewCenter_AuthEdgeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Now != that1.Now {
		return false
	}
	return true
}
func (this *NewCenter_FindValidServerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_FindValidServerRequest)
	if !ok {
		that2, ok := that.(NewCenter_FindValidServerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.MapConfig != that1.MapConfig {
		return false
	}
	return true
}
func (this *NewCenter_FindValidServerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_FindValidServerResponse)
	if !ok {
		that2, ok := that.(NewCenter_FindValidServerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	return true
}
func (this *NewCenter_GetMapAllLinesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_GetMapAllLinesRequest)
	if !ok {
		that2, ok := that.(NewCenter_GetMapAllLinesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *NewCenter_GetMapAllLinesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_GetMapAllLinesResponse)
	if !ok {
		that2, ok := that.(NewCenter_GetMapAllLinesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllLineInfo.Equal(that1.AllLineInfo) {
		return false
	}
	return true
}
func (this *NewCenter_GetTargetLineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_GetTargetLineRequest)
	if !ok {
		that2, ok := that.(NewCenter_GetTargetLineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *NewCenter_GetTargetLineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_GetTargetLineResponse)
	if !ok {
		that2, ok := that.(NewCenter_GetTargetLineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LineInfo.Equal(that1.LineInfo) {
		return false
	}
	if this.RoleInLine != that1.RoleInLine {
		return false
	}
	return true
}
func (this *NewCenter_CheckLineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CheckLineRequest)
	if !ok {
		that2, ok := that.(NewCenter_CheckLineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *NewCenter_CheckLineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CheckLineResponse)
	if !ok {
		that2, ok := that.(NewCenter_CheckLineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LineInfo.Equal(that1.LineInfo) {
		return false
	}
	return true
}
func (this *NewCenter_EdgeUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_EdgeUser)
	if !ok {
		that2, ok := that.(NewCenter_EdgeUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.AddTime != that1.AddTime {
		return false
	}
	return true
}
func (this *NewCenter_EdgeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_EdgeInfo)
	if !ok {
		that2, ok := that.(NewCenter_EdgeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if !this.Roles[i].Equal(that1.Roles[i]) {
			return false
		}
	}
	if this.IsAdd != that1.IsAdd {
		return false
	}
	if this.IsEnd != that1.IsEnd {
		return false
	}
	if this.GuildBossId != that1.GuildBossId {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.BossHallId != that1.BossHallId {
		return false
	}
	if this.LineId != that1.LineId {
		return false
	}
	if this.CanNotEnter != that1.CanNotEnter {
		return false
	}
	return true
}
func (this *NewCenter_SyncEdgeInfoPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_SyncEdgeInfoPush)
	if !ok {
		that2, ok := that.(NewCenter_SyncEdgeInfoPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if this.IsAll != that1.IsAll {
		return false
	}
	if this.RemainCpuWeight != that1.RemainCpuWeight {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *NewCenter_CurBattleInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CurBattleInfoRequest)
	if !ok {
		that2, ok := that.(NewCenter_CurBattleInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.HungUpServerId != that1.HungUpServerId {
		return false
	}
	if this.HungUpMapId != that1.HungUpMapId {
		return false
	}
	return true
}
func (this *NewCenter_CurBattleInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CurBattleInfoResponse)
	if !ok {
		that2, ok := that.(NewCenter_CurBattleInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.HungUpServerId != that1.HungUpServerId {
		return false
	}
	if this.HungUpMapId != that1.HungUpMapId {
		return false
	}
	if !this.LineInfo.Equal(that1.LineInfo) {
		return false
	}
	return true
}
func (this *NewCenter_CurGuildBossInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CurGuildBossInfoRequest)
	if !ok {
		that2, ok := that.(NewCenter_CurGuildBossInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.UnionId != that1.UnionId {
		return false
	}
	if this.UnionBossId != that1.UnionBossId {
		return false
	}
	if this.TotalDamages != that1.TotalDamages {
		return false
	}
	if len(this.Damages) != len(that1.Damages) {
		return false
	}
	for i := range this.Damages {
		if this.Damages[i] != that1.Damages[i] {
			return false
		}
	}
	return true
}
func (this *NewCenter_CurGuildBossInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CurGuildBossInfoResponse)
	if !ok {
		that2, ok := that.(NewCenter_CurGuildBossInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.IsNew != that1.IsNew {
		return false
	}
	return true
}
func (this *NewCenter_UnionBossOnlineCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_UnionBossOnlineCountRequest)
	if !ok {
		that2, ok := that.(NewCenter_UnionBossOnlineCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnionBossId != that1.UnionBossId {
		return false
	}
	return true
}
func (this *NewCenter_UnionBossOnlineCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_UnionBossOnlineCountResponse)
	if !ok {
		that2, ok := that.(NewCenter_UnionBossOnlineCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *NewCenter_CurBossHallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CurBossHallRequest)
	if !ok {
		that2, ok := that.(NewCenter_CurBossHallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	return true
}
func (this *NewCenter_CurBossHallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CurBossHallResponse)
	if !ok {
		that2, ok := that.(NewCenter_CurBossHallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.MapScenceId != that1.MapScenceId {
		return false
	}
	return true
}
func (this *NewCenter_CreateRoguelikeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CreateRoguelikeRequest)
	if !ok {
		that2, ok := that.(NewCenter_CreateRoguelikeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if len(this.Bots) != len(that1.Bots) {
		return false
	}
	for i := range this.Bots {
		if !this.Bots[i].Equal(that1.Bots[i]) {
			return false
		}
	}
	if len(this.MonsterEffects) != len(that1.MonsterEffects) {
		return false
	}
	for i := range this.MonsterEffects {
		if this.MonsterEffects[i] != that1.MonsterEffects[i] {
			return false
		}
	}
	if len(this.BossEffects) != len(that1.BossEffects) {
		return false
	}
	for i := range this.BossEffects {
		if this.BossEffects[i] != that1.BossEffects[i] {
			return false
		}
	}
	if len(this.CardMap) != len(that1.CardMap) {
		return false
	}
	for i := range this.CardMap {
		if this.CardMap[i] != that1.CardMap[i] {
			return false
		}
	}
	return true
}
func (this *NewCenter_CreateRoguelikeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_CreateRoguelikeResponse)
	if !ok {
		that2, ok := that.(NewCenter_CreateRoguelikeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *NewCenter_EdgeBattle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_EdgeBattle)
	if !ok {
		that2, ok := that.(NewCenter_EdgeBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.MapName != that1.MapName {
		return false
	}
	if this.CurNum != that1.CurNum {
		return false
	}
	return true
}
func (this *NewCenter_EdgeNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_EdgeNode)
	if !ok {
		that2, ok := that.(NewCenter_EdgeNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	if len(this.Battles) != len(that1.Battles) {
		return false
	}
	for i := range this.Battles {
		if !this.Battles[i].Equal(that1.Battles[i]) {
			return false
		}
	}
	if this.Weight != that1.Weight {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *NewCenter_EdgeViewInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_EdgeViewInfo)
	if !ok {
		that2, ok := that.(NewCenter_EdgeViewInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	return true
}
func (this *NewCenter_EdgeUpdateBossInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_EdgeUpdateBossInfo)
	if !ok {
		that2, ok := that.(NewCenter_EdgeUpdateBossInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.NextRefreshTime != that1.NextRefreshTime {
		return false
	}
	if this.Killer != that1.Killer {
		return false
	}
	if this.IsDead != that1.IsDead {
		return false
	}
	if !this.TransPort.Equal(that1.TransPort) {
		return false
	}
	return true
}
func (this *NewCenter_GetBossInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_GetBossInfoRequest)
	if !ok {
		that2, ok := that.(NewCenter_GetBossInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	if this.MaxCnt != that1.MaxCnt {
		return false
	}
	if this.LineId != that1.LineId {
		return false
	}
	return true
}
func (this *NewCenter_GetBossInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_GetBossInfoResponse)
	if !ok {
		that2, ok := that.(NewCenter_GetBossInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BossInfo) != len(that1.BossInfo) {
		return false
	}
	for i := range this.BossInfo {
		if !this.BossInfo[i].Equal(that1.BossInfo[i]) {
			return false
		}
	}
	return true
}
func (this *NewCenter_NotCanEnterPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCenter_NotCanEnterPush)
	if !ok {
		that2, ok := that.(NewCenter_NotCanEnterPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	return true
}
func (m *NewCenter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewCenter_SelfAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_SelfAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_SelfAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NewCenter_SelfAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_SelfAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_SelfAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_AuthEdgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_AuthEdgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_AuthEdgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Now != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.Now))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_AuthEdgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_AuthEdgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_AuthEdgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Now != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.Now))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_FindValidServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_FindValidServerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_FindValidServerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapConfig != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapConfig))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleType != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_FindValidServerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_FindValidServerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_FindValidServerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_GetMapAllLinesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_GetMapAllLinesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_GetMapAllLinesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_GetMapAllLinesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_GetMapAllLinesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_GetMapAllLinesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllLineInfo != nil {
		{
			size, err := m.AllLineInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_GetTargetLineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_GetTargetLineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_GetTargetLineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_GetTargetLineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_GetTargetLineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_GetTargetLineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoleInLine {
		i--
		if m.RoleInLine {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.LineInfo != nil {
		{
			size, err := m.LineInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CheckLineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CheckLineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CheckLineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CheckLineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CheckLineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CheckLineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LineInfo != nil {
		{
			size, err := m.LineInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_EdgeUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_EdgeUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_EdgeUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddTime != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.AddTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_EdgeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_EdgeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_EdgeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanNotEnter {
		i--
		if m.CanNotEnter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.LineId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.LineId))
		i--
		dAtA[i] = 0x48
	}
	if m.BossHallId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BossHallId))
		i--
		dAtA[i] = 0x40
	}
	if m.RoomId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.GuildBossId) > 0 {
		i -= len(m.GuildBossId)
		copy(dAtA[i:], m.GuildBossId)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.GuildBossId)))
		i--
		dAtA[i] = 0x32
	}
	if m.IsEnd {
		i--
		if m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsAdd {
		i--
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_SyncEdgeInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_SyncEdgeInfoPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_SyncEdgeInfoPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x20
	}
	if m.RemainCpuWeight != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.RemainCpuWeight))
		i--
		dAtA[i] = 0x18
	}
	if m.IsAll {
		i--
		if m.IsAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Edges) > 0 {
		for iNdEx := len(m.Edges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Edges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CurBattleInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CurBattleInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CurBattleInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HungUpMapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.HungUpMapId))
		i--
		dAtA[i] = 0x20
	}
	if m.HungUpServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.HungUpServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CurBattleInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CurBattleInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CurBattleInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LineInfo != nil {
		{
			size, err := m.LineInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.HungUpMapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.HungUpMapId))
		i--
		dAtA[i] = 0x20
	}
	if m.HungUpServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.HungUpServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CurGuildBossInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CurGuildBossInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CurGuildBossInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Damages) > 0 {
		for k := range m.Damages {
			v := m.Damages[k]
			baseI := i
			i = encodeVarintCenter(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCenter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCenter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TotalDamages != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.TotalDamages))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UnionBossId) > 0 {
		i -= len(m.UnionBossId)
		copy(dAtA[i:], m.UnionBossId)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.UnionBossId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UnionId) > 0 {
		i -= len(m.UnionId)
		copy(dAtA[i:], m.UnionId)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.UnionId)))
		i--
		dAtA[i] = 0x12
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CurGuildBossInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CurGuildBossInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CurGuildBossInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsNew {
		i--
		if m.IsNew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_UnionBossOnlineCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_UnionBossOnlineCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_UnionBossOnlineCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnionBossId) > 0 {
		i -= len(m.UnionBossId)
		copy(dAtA[i:], m.UnionBossId)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.UnionBossId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_UnionBossOnlineCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_UnionBossOnlineCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_UnionBossOnlineCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CurBossHallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CurBossHallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CurBossHallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BossId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CurBossHallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CurBossHallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CurBossHallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapScenceId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapScenceId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CreateRoguelikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CreateRoguelikeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CreateRoguelikeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardMap) > 0 {
		for k := range m.CardMap {
			v := m.CardMap[k]
			baseI := i
			i = encodeVarintCenter(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCenter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCenter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BossEffects) > 0 {
		dAtA6 := make([]byte, len(m.BossEffects)*10)
		var j5 int
		for _, num1 := range m.BossEffects {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintCenter(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MonsterEffects) > 0 {
		dAtA8 := make([]byte, len(m.MonsterEffects)*10)
		var j7 int
		for _, num1 := range m.MonsterEffects {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintCenter(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Bots) > 0 {
		for iNdEx := len(m.Bots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RoomId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_CreateRoguelikeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_CreateRoguelikeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_CreateRoguelikeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.RoomId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_EdgeBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_EdgeBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_EdgeBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurNum != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.CurNum))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MapName) > 0 {
		i -= len(m.MapName)
		copy(dAtA[i:], m.MapName)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.MapName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_EdgeNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_EdgeNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_EdgeNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x20
	}
	if m.Weight != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Battles) > 0 {
		for iNdEx := len(m.Battles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Battles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_EdgeViewInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_EdgeViewInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_EdgeViewInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for iNdEx := len(m.Edges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Edges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_EdgeUpdateBossInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_EdgeUpdateBossInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_EdgeUpdateBossInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransPort != nil {
		{
			size, err := m.TransPort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCenter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.IsDead {
		i--
		if m.IsDead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Killer) > 0 {
		i -= len(m.Killer)
		copy(dAtA[i:], m.Killer)
		i = encodeVarintCenter(dAtA, i, uint64(len(m.Killer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NextRefreshTime != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.NextRefreshTime))
		i--
		dAtA[i] = 0x20
	}
	if m.MapId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if m.BossId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_GetBossInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_GetBossInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_GetBossInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LineId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.LineId))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxCnt != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.MaxCnt))
		i--
		dAtA[i] = 0x10
	}
	if m.BossId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_GetBossInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_GetBossInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_GetBossInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BossInfo) > 0 {
		for iNdEx := len(m.BossInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BossInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCenter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewCenter_NotCanEnterPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCenter_NotCanEnterPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCenter_NotCanEnterPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BossId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCenter(dAtA []byte, offset int, v uint64) int {
	offset -= sovCenter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *NewCenter) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NewCenter_SelfAddrRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *NewCenter_SelfAddrResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Addr != "" {
		w.RawByte('"')
		w.RawString("addr")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Addr)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_AuthEdgeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Token != "" {
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.Now != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("now")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Now))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_AuthEdgeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Token != "" {
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.Now != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("now")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Now))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_FindValidServerRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleType != 0 {
		w.RawByte('"')
		w.RawString("battle_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleType))
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.MapConfig != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_config")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapConfig))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_FindValidServerResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ServerId != 0 {
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_GetMapAllLinesRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_GetMapAllLinesResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("all_line_info")
	w.RawByte('"')
	w.RawByte(':')
	m.AllLineInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_GetTargetLineRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_GetTargetLineResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("line_info")
	w.RawByte('"')
	w.RawByte(':')
	m.LineInfo.JsonBytes(w)
	needWriteComma = true
	if m.RoleInLine {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_in_line")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.RoleInLine)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CheckLineRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CheckLineResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("line_info")
	w.RawByte('"')
	w.RawByte(':')
	m.LineInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_EdgeUser) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.AddTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("add_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AddTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_EdgeInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			v.JsonBytes(w)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsAdd {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_add")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAdd)
		needWriteComma = true
	}
	if m.IsEnd {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_end")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsEnd)
		needWriteComma = true
	}
	if m.GuildBossId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildBossId)
		needWriteComma = true
	}
	if m.RoomId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.BossHallId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("boss_hall_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossHallId))
		needWriteComma = true
	}
	if m.LineId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("line_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LineId))
		needWriteComma = true
	}
	if m.CanNotEnter {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("can_not_enter")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.CanNotEnter)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_SyncEdgeInfoPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("edges")
	w.RawByte('"')
	w.RawByte(':')
	if m.Edges == nil {
		w.RawString("null")
	} else if len(m.Edges) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Edges {
			v.JsonBytes(w)
			if i != len(m.Edges)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsAll {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_all")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAll)
		needWriteComma = true
	}
	if m.RemainCpuWeight != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_cpu_weight")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainCpuWeight))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CurBattleInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.HungUpServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hung_up_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HungUpServerId))
		needWriteComma = true
	}
	if m.HungUpMapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hung_up_map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HungUpMapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CurBattleInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.HungUpServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hung_up_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HungUpServerId))
		needWriteComma = true
	}
	if m.HungUpMapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hung_up_map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HungUpMapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("line_info")
	w.RawByte('"')
	w.RawByte(':')
	m.LineInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CurGuildBossInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.UnionId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("union_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UnionId)
		needWriteComma = true
	}
	if m.UnionBossId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("union_boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UnionBossId)
		needWriteComma = true
	}
	if m.TotalDamages != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_damages")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDamages))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("damages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Damages == nil {
		w.RawString("null")
	} else if len(m.Damages) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDamages := len(m.Damages)
		for k, v := range m.Damages {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlDamages--
			if mlDamages != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CurGuildBossInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.IsNew {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_new")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsNew)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_UnionBossOnlineCountRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UnionBossId != "" {
		w.RawByte('"')
		w.RawString("union_boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UnionBossId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_UnionBossOnlineCountResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Count != 0 {
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CurBossHallRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BossId != 0 {
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CurBossHallResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.MapScenceId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_scence_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapScenceId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CreateRoguelikeRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.RoomId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("bots")
	w.RawByte('"')
	w.RawByte(':')
	if m.Bots == nil {
		w.RawString("null")
	} else if len(m.Bots) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Bots {
			v.JsonBytes(w)
			if i != len(m.Bots)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("monster_effects")
	w.RawByte('"')
	w.RawByte(':')
	if m.MonsterEffects == nil {
		w.RawString("null")
	} else if len(m.MonsterEffects) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.MonsterEffects {
			w.Int64(int64(v))
			if i != len(m.MonsterEffects)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_effects")
	w.RawByte('"')
	w.RawByte(':')
	if m.BossEffects == nil {
		w.RawString("null")
	} else if len(m.BossEffects) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BossEffects {
			w.Int64(int64(v))
			if i != len(m.BossEffects)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("card_map")
	w.RawByte('"')
	w.RawByte(':')
	if m.CardMap == nil {
		w.RawString("null")
	} else if len(m.CardMap) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCardMap := len(m.CardMap)
		for k, v := range m.CardMap {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCardMap--
			if mlCardMap != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_CreateRoguelikeResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.RoomId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_EdgeBattle) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.MapName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.MapName)
		needWriteComma = true
	}
	if m.CurNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurNum))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_EdgeNode) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Addr != "" {
		w.RawByte('"')
		w.RawString("addr")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Addr)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("battles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Battles == nil {
		w.RawString("null")
	} else if len(m.Battles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Battles {
			v.JsonBytes(w)
			if i != len(m.Battles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Weight != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("weight")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Weight))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_EdgeViewInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("edges")
	w.RawByte('"')
	w.RawByte(':')
	if m.Edges == nil {
		w.RawString("null")
	} else if len(m.Edges) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Edges {
			v.JsonBytes(w)
			if i != len(m.Edges)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_EdgeUpdateBossInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.BossId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.NextRefreshTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRefreshTime))
		needWriteComma = true
	}
	if m.Killer != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("killer")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Killer)
		needWriteComma = true
	}
	if m.IsDead {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_dead")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsDead)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("trans_port")
	w.RawByte('"')
	w.RawByte(':')
	m.TransPort.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_GetBossInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BossId != 0 {
		w.RawByte('"')
		w.RawString("BossId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossId))
		needWriteComma = true
	}
	if m.MaxCnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("MaxCnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxCnt))
		needWriteComma = true
	}
	if m.LineId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("LineId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LineId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_GetBossInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("boss_info")
	w.RawByte('"')
	w.RawByte(':')
	if m.BossInfo == nil {
		w.RawString("null")
	} else if len(m.BossInfo) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BossInfo {
			v.JsonBytes(w)
			if i != len(m.BossInfo)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter_NotCanEnterPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleId != 0 {
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.BossId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NewCenter) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter) GoString() string {
	return m.String()
}

func (m *NewCenter_SelfAddrRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_SelfAddrRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_SelfAddrRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_SelfAddrResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_SelfAddrResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_SelfAddrResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_AuthEdgeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_AuthEdgeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_AuthEdgeRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_AuthEdgeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_AuthEdgeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_AuthEdgeResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_FindValidServerRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_FindValidServerRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_FindValidServerRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_FindValidServerResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_FindValidServerResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_FindValidServerResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_GetMapAllLinesRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_GetMapAllLinesRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_GetMapAllLinesRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_GetMapAllLinesResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_GetMapAllLinesResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_GetMapAllLinesResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_GetTargetLineRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_GetTargetLineRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_GetTargetLineRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_GetTargetLineResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_GetTargetLineResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_GetTargetLineResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_CheckLineRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CheckLineRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CheckLineRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_CheckLineResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CheckLineResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CheckLineResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_EdgeUser) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_EdgeUser) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_EdgeUser) GoString() string {
	return m.String()
}

func (m *NewCenter_EdgeInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_EdgeInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_EdgeInfo) GoString() string {
	return m.String()
}

func (m *NewCenter_SyncEdgeInfoPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_SyncEdgeInfoPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_SyncEdgeInfoPush) GoString() string {
	return m.String()
}

func (m *NewCenter_CurBattleInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CurBattleInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CurBattleInfoRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_CurBattleInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CurBattleInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CurBattleInfoResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_CurGuildBossInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CurGuildBossInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CurGuildBossInfoRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_CurGuildBossInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CurGuildBossInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CurGuildBossInfoResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_UnionBossOnlineCountRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_UnionBossOnlineCountRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_UnionBossOnlineCountRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_UnionBossOnlineCountResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_UnionBossOnlineCountResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_UnionBossOnlineCountResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_CurBossHallRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CurBossHallRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CurBossHallRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_CurBossHallResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CurBossHallResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CurBossHallResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_CreateRoguelikeRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CreateRoguelikeRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CreateRoguelikeRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_CreateRoguelikeResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_CreateRoguelikeResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_CreateRoguelikeResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_EdgeBattle) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_EdgeBattle) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_EdgeBattle) GoString() string {
	return m.String()
}

func (m *NewCenter_EdgeNode) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_EdgeNode) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_EdgeNode) GoString() string {
	return m.String()
}

func (m *NewCenter_EdgeViewInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_EdgeViewInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_EdgeViewInfo) GoString() string {
	return m.String()
}

func (m *NewCenter_EdgeUpdateBossInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_EdgeUpdateBossInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_EdgeUpdateBossInfo) GoString() string {
	return m.String()
}

func (m *NewCenter_GetBossInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_GetBossInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_GetBossInfoRequest) GoString() string {
	return m.String()
}

func (m *NewCenter_GetBossInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_GetBossInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_GetBossInfoResponse) GoString() string {
	return m.String()
}

func (m *NewCenter_NotCanEnterPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NewCenter_NotCanEnterPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NewCenter_NotCanEnterPush) GoString() string {
	return m.String()
}

func (m *NewCenter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewCenter_SelfAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NewCenter_SelfAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	return n
}

func (m *NewCenter_AuthEdgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.Now != 0 {
		n += 1 + sovCenter(uint64(m.Now))
	}
	return n
}

func (m *NewCenter_AuthEdgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.Now != 0 {
		n += 1 + sovCenter(uint64(m.Now))
	}
	return n
}

func (m *NewCenter_FindValidServerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleType != 0 {
		n += 1 + sovCenter(uint64(m.BattleType))
	}
	if m.ServerId != 0 {
		n += 1 + sovCenter(uint64(m.ServerId))
	}
	if m.MapConfig != 0 {
		n += 1 + sovCenter(uint64(m.MapConfig))
	}
	return n
}

func (m *NewCenter_FindValidServerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerId != 0 {
		n += 1 + sovCenter(uint64(m.ServerId))
	}
	return n
}

func (m *NewCenter_GetMapAllLinesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	return n
}

func (m *NewCenter_GetMapAllLinesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllLineInfo != nil {
		l = m.AllLineInfo.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	return n
}

func (m *NewCenter_GetTargetLineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	return n
}

func (m *NewCenter_GetTargetLineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LineInfo != nil {
		l = m.LineInfo.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.RoleInLine {
		n += 2
	}
	return n
}

func (m *NewCenter_CheckLineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	return n
}

func (m *NewCenter_CheckLineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LineInfo != nil {
		l = m.LineInfo.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	return n
}

func (m *NewCenter_EdgeUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.AddTime != 0 {
		n += 1 + sovCenter(uint64(m.AddTime))
	}
	return n
}

func (m *NewCenter_EdgeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovCenter(uint64(m.BattleId))
	}
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if m.IsAdd {
		n += 2
	}
	if m.IsEnd {
		n += 2
	}
	l = len(m.GuildBossId)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovCenter(uint64(m.RoomId))
	}
	if m.BossHallId != 0 {
		n += 1 + sovCenter(uint64(m.BossHallId))
	}
	if m.LineId != 0 {
		n += 1 + sovCenter(uint64(m.LineId))
	}
	if m.CanNotEnter {
		n += 2
	}
	return n
}

func (m *NewCenter_SyncEdgeInfoPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if m.IsAll {
		n += 2
	}
	if m.RemainCpuWeight != 0 {
		n += 1 + sovCenter(uint64(m.RemainCpuWeight))
	}
	if m.Typ != 0 {
		n += 1 + sovCenter(uint64(m.Typ))
	}
	return n
}

func (m *NewCenter_CurBattleInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	if m.HungUpServerId != 0 {
		n += 1 + sovCenter(uint64(m.HungUpServerId))
	}
	if m.HungUpMapId != 0 {
		n += 1 + sovCenter(uint64(m.HungUpMapId))
	}
	return n
}

func (m *NewCenter_CurBattleInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	if m.HungUpServerId != 0 {
		n += 1 + sovCenter(uint64(m.HungUpServerId))
	}
	if m.HungUpMapId != 0 {
		n += 1 + sovCenter(uint64(m.HungUpMapId))
	}
	if m.LineInfo != nil {
		l = m.LineInfo.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	return n
}

func (m *NewCenter_CurGuildBossInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	l = len(m.UnionId)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	l = len(m.UnionBossId)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.TotalDamages != 0 {
		n += 1 + sovCenter(uint64(m.TotalDamages))
	}
	if len(m.Damages) > 0 {
		for k, v := range m.Damages {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCenter(uint64(len(k))) + 1 + sovCenter(uint64(v))
			n += mapEntrySize + 1 + sovCenter(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NewCenter_CurGuildBossInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	if m.IsNew {
		n += 2
	}
	return n
}

func (m *NewCenter_UnionBossOnlineCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UnionBossId)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	return n
}

func (m *NewCenter_UnionBossOnlineCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovCenter(uint64(m.Count))
	}
	return n
}

func (m *NewCenter_CurBossHallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossId != 0 {
		n += 1 + sovCenter(uint64(m.BossId))
	}
	return n
}

func (m *NewCenter_CurBossHallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCenter(uint64(m.BattleServerId))
	}
	if m.MapScenceId != 0 {
		n += 1 + sovCenter(uint64(m.MapScenceId))
	}
	return n
}

func (m *NewCenter_CreateRoguelikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.RoomId != 0 {
		n += 1 + sovCenter(uint64(m.RoomId))
	}
	if len(m.Bots) > 0 {
		for _, e := range m.Bots {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if len(m.MonsterEffects) > 0 {
		l = 0
		for _, e := range m.MonsterEffects {
			l += sovCenter(uint64(e))
		}
		n += 1 + sovCenter(uint64(l)) + l
	}
	if len(m.BossEffects) > 0 {
		l = 0
		for _, e := range m.BossEffects {
			l += sovCenter(uint64(e))
		}
		n += 1 + sovCenter(uint64(l)) + l
	}
	if len(m.CardMap) > 0 {
		for k, v := range m.CardMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCenter(uint64(len(k))) + 1 + sovCenter(uint64(v))
			n += mapEntrySize + 1 + sovCenter(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NewCenter_CreateRoguelikeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.RoomId != 0 {
		n += 1 + sovCenter(uint64(m.RoomId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCenter(uint64(m.BattleId))
	}
	return n
}

func (m *NewCenter_EdgeBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovCenter(uint64(m.BattleId))
	}
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	l = len(m.MapName)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.CurNum != 0 {
		n += 1 + sovCenter(uint64(m.CurNum))
	}
	return n
}

func (m *NewCenter_EdgeNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if len(m.Battles) > 0 {
		for _, e := range m.Battles {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	if m.Weight != 0 {
		n += 1 + sovCenter(uint64(m.Weight))
	}
	if m.Typ != 0 {
		n += 1 + sovCenter(uint64(m.Typ))
	}
	return n
}

func (m *NewCenter_EdgeViewInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	return n
}

func (m *NewCenter_EdgeUpdateBossInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovCenter(uint64(m.BattleId))
	}
	if m.BossId != 0 {
		n += 1 + sovCenter(uint64(m.BossId))
	}
	if m.MapId != 0 {
		n += 1 + sovCenter(uint64(m.MapId))
	}
	if m.NextRefreshTime != 0 {
		n += 1 + sovCenter(uint64(m.NextRefreshTime))
	}
	l = len(m.Killer)
	if l > 0 {
		n += 1 + l + sovCenter(uint64(l))
	}
	if m.IsDead {
		n += 2
	}
	if m.TransPort != nil {
		l = m.TransPort.Size()
		n += 1 + l + sovCenter(uint64(l))
	}
	return n
}

func (m *NewCenter_GetBossInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossId != 0 {
		n += 1 + sovCenter(uint64(m.BossId))
	}
	if m.MaxCnt != 0 {
		n += 1 + sovCenter(uint64(m.MaxCnt))
	}
	if m.LineId != 0 {
		n += 1 + sovCenter(uint64(m.LineId))
	}
	return n
}

func (m *NewCenter_GetBossInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BossInfo) > 0 {
		for _, e := range m.BossInfo {
			l = e.Size()
			n += 1 + l + sovCenter(uint64(l))
		}
	}
	return n
}

func (m *NewCenter_NotCanEnterPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleId != 0 {
		n += 1 + sovCenter(uint64(m.BattleId))
	}
	if m.BossId != 0 {
		n += 1 + sovCenter(uint64(m.BossId))
	}
	return n
}

func sovCenter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCenter(x uint64) (n int) {
	return sovCenter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewCenter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCenter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCenter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_SelfAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelfAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelfAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_SelfAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelfAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelfAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_AuthEdgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthEdgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthEdgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_AuthEdgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthEdgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthEdgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_FindValidServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindValidServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindValidServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= models.BattleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapConfig", wireType)
			}
			m.MapConfig = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapConfig |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_FindValidServerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindValidServerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindValidServerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_GetMapAllLinesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapAllLinesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapAllLinesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_GetMapAllLinesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMapAllLinesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMapAllLinesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllLineInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllLineInfo == nil {
				m.AllLineInfo = &models.AllLineInfo{}
			}
			if err := m.AllLineInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_GetTargetLineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTargetLineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTargetLineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_GetTargetLineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTargetLineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTargetLineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LineInfo == nil {
				m.LineInfo = &models.LineInfo{}
			}
			if err := m.LineInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInLine", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoleInLine = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CheckLineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CheckLineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LineInfo == nil {
				m.LineInfo = &models.LineInfo{}
			}
			if err := m.LineInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_EdgeUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTime", wireType)
			}
			m.AddTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_EdgeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &NewCenter_EdgeUser{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnd = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildBossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildBossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossHallId", wireType)
			}
			m.BossHallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossHallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineId", wireType)
			}
			m.LineId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanNotEnter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanNotEnter = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_SyncEdgeInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncEdgeInfoPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncEdgeInfoPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &NewCenter_EdgeInfo{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAll = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainCpuWeight", wireType)
			}
			m.RemainCpuWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainCpuWeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.EdgeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CurBattleInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurBattleInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurBattleInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HungUpServerId", wireType)
			}
			m.HungUpServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HungUpServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HungUpMapId", wireType)
			}
			m.HungUpMapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HungUpMapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CurBattleInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurBattleInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurBattleInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HungUpServerId", wireType)
			}
			m.HungUpServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HungUpServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HungUpMapId", wireType)
			}
			m.HungUpMapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HungUpMapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LineInfo == nil {
				m.LineInfo = &models.LineInfo{}
			}
			if err := m.LineInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CurGuildBossInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurGuildBossInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurGuildBossInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionBossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionBossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamages", wireType)
			}
			m.TotalDamages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDamages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Damages == nil {
				m.Damages = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCenter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCenter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCenter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCenter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCenter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Damages[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CurGuildBossInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurGuildBossInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurGuildBossInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNew = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_UnionBossOnlineCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnionBossOnlineCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnionBossOnlineCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionBossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionBossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_UnionBossOnlineCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnionBossOnlineCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnionBossOnlineCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CurBossHallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurBossHallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurBossHallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CurBossHallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurBossHallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurBossHallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapScenceId", wireType)
			}
			m.MapScenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapScenceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CreateRoguelikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoguelikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoguelikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bots = append(m.Bots, &models.Bot{})
			if err := m.Bots[len(m.Bots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCenter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MonsterEffects = append(m.MonsterEffects, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCenter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCenter
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCenter
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MonsterEffects) == 0 {
					m.MonsterEffects = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MonsterEffects = append(m.MonsterEffects, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterEffects", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCenter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BossEffects = append(m.BossEffects, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCenter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCenter
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCenter
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BossEffects) == 0 {
					m.BossEffects = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BossEffects = append(m.BossEffects, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BossEffects", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CardMap == nil {
				m.CardMap = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCenter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCenter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCenter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCenter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCenter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CardMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_CreateRoguelikeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoguelikeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoguelikeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_EdgeBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurNum", wireType)
			}
			m.CurNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_EdgeNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Battles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Battles = append(m.Battles, &NewCenter_EdgeBattle{})
			if err := m.Battles[len(m.Battles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.EdgeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_EdgeViewInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeViewInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeViewInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &NewCenter_EdgeNode{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_EdgeUpdateBossInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeUpdateBossInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeUpdateBossInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Killer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDead = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransPort == nil {
				m.TransPort = &models.Vec2{}
			}
			if err := m.TransPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_GetBossInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBossInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBossInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCnt", wireType)
			}
			m.MaxCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCnt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineId", wireType)
			}
			m.LineId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_GetBossInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBossInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBossInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BossInfo = append(m.BossInfo, &models.BossBattleInfo{})
			if err := m.BossInfo[len(m.BossInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCenter_NotCanEnterPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotCanEnterPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotCanEnterPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCenter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCenter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCenter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCenter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCenter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCenter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCenter = fmt.Errorf("proto: unexpected end of group")
)
