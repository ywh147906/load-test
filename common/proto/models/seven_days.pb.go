// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/seven_days.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SevenDayInfo struct {
	SignedInDay        int64   `protobuf:"varint,1,opt,name=signed_in_day,json=signedInDay,proto3" json:"signed_in_day,omitempty"`
	ReceivedRewardDays []int64 `protobuf:"varint,2,rep,packed,name=received_reward_days,json=receivedRewardDays,proto3" json:"received_reward_days,omitempty"`
	StartTime          int64   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ActivitId          int64   `protobuf:"varint,4,opt,name=activit_id,json=activitId,proto3" json:"activit_id,omitempty"`
}

func (m *SevenDayInfo) Reset()      { *m = SevenDayInfo{} }
func (*SevenDayInfo) ProtoMessage() {}
func (*SevenDayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d6f1c89943b8f47, []int{0}
}
func (m *SevenDayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SevenDayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SevenDayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SevenDayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SevenDayInfo.Merge(m, src)
}
func (m *SevenDayInfo) XXX_Size() int {
	return m.Size()
}
func (m *SevenDayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SevenDayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SevenDayInfo proto.InternalMessageInfo

func (m *SevenDayInfo) GetSignedInDay() int64 {
	if m != nil {
		return m.SignedInDay
	}
	return 0
}

func (m *SevenDayInfo) GetReceivedRewardDays() []int64 {
	if m != nil {
		return m.ReceivedRewardDays
	}
	return nil
}

func (m *SevenDayInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SevenDayInfo) GetActivitId() int64 {
	if m != nil {
		return m.ActivitId
	}
	return 0
}

func (*SevenDayInfo) XXX_MessageName() string {
	return "models.SevenDayInfo"
}

type SevenDayCnf struct {
	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TypId          int64   `protobuf:"varint,2,opt,name=typ_id,json=typId,proto3" json:"typ_id,omitempty"`
	Day            int64   `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	ActivityReward []int64 `protobuf:"varint,4,rep,packed,name=activity_reward,json=activityReward,proto3" json:"activity_reward,omitempty"`
}

func (m *SevenDayCnf) Reset()      { *m = SevenDayCnf{} }
func (*SevenDayCnf) ProtoMessage() {}
func (*SevenDayCnf) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d6f1c89943b8f47, []int{1}
}
func (m *SevenDayCnf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SevenDayCnf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SevenDayCnf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SevenDayCnf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SevenDayCnf.Merge(m, src)
}
func (m *SevenDayCnf) XXX_Size() int {
	return m.Size()
}
func (m *SevenDayCnf) XXX_DiscardUnknown() {
	xxx_messageInfo_SevenDayCnf.DiscardUnknown(m)
}

var xxx_messageInfo_SevenDayCnf proto.InternalMessageInfo

func (m *SevenDayCnf) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SevenDayCnf) GetTypId() int64 {
	if m != nil {
		return m.TypId
	}
	return 0
}

func (m *SevenDayCnf) GetDay() int64 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *SevenDayCnf) GetActivityReward() []int64 {
	if m != nil {
		return m.ActivityReward
	}
	return nil
}

func (*SevenDayCnf) XXX_MessageName() string {
	return "models.SevenDayCnf"
}
func init() {
	proto.RegisterType((*SevenDayInfo)(nil), "models.SevenDayInfo")
	proto.RegisterType((*SevenDayCnf)(nil), "models.SevenDayCnf")
}

func init() { proto.RegisterFile("proto/models/seven_days.proto", fileDescriptor_2d6f1c89943b8f47) }

var fileDescriptor_2d6f1c89943b8f47 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4e, 0xf3, 0x30,
	0x14, 0x80, 0xe3, 0xa4, 0x7f, 0xa5, 0xdf, 0x85, 0x82, 0x2c, 0x40, 0x51, 0x45, 0x4d, 0xd5, 0x85,
	0x2e, 0x10, 0x24, 0x6e, 0x00, 0x5d, 0x32, 0xb0, 0x14, 0x26, 0x96, 0xc8, 0x8d, 0xdd, 0xca, 0x12,
	0xb1, 0x2b, 0xdb, 0x0a, 0xca, 0x2d, 0x38, 0x03, 0x13, 0x47, 0xe9, 0xd8, 0xb1, 0x23, 0x24, 0x0b,
	0x23, 0x47, 0x40, 0xb6, 0x53, 0x89, 0x6e, 0xc9, 0xf7, 0xbd, 0xbc, 0xf7, 0x29, 0x70, 0xb8, 0x52,
	0xd2, 0xc8, 0xa4, 0x90, 0x94, 0xbd, 0xe8, 0x44, 0xb3, 0x92, 0x89, 0x8c, 0x92, 0x4a, 0x5f, 0x3b,
	0x8e, 0xba, 0x5e, 0x0c, 0xce, 0xf6, 0xc6, 0xe6, 0x64, 0xe9, 0xfd, 0xe0, 0x7c, 0x8f, 0x2f, 0xa4,
	0x2a, 0x88, 0xe1, 0x52, 0x78, 0x3b, 0x7e, 0x07, 0xf0, 0xe0, 0xd1, 0xae, 0x9c, 0x92, 0x2a, 0x15,
	0x0b, 0x89, 0xc6, 0xf0, 0x50, 0xf3, 0xa5, 0x60, 0x34, 0xe3, 0xee, 0x4c, 0x0c, 0x46, 0x60, 0x12,
	0xcd, 0x7a, 0x1e, 0xa6, 0x76, 0x0e, 0xdd, 0xc0, 0x13, 0xc5, 0x72, 0xc6, 0x4b, 0x46, 0x33, 0xc5,
	0x5e, 0x89, 0xa2, 0x2e, 0x28, 0x0e, 0x47, 0xd1, 0x24, 0x9a, 0xa1, 0x9d, 0x9b, 0x39, 0x35, 0x25,
	0x95, 0x46, 0x43, 0x08, 0xb5, 0x21, 0xca, 0x64, 0x86, 0x17, 0x2c, 0x8e, 0xdc, 0xca, 0xff, 0x8e,
	0x3c, 0xf1, 0x82, 0x59, 0x4d, 0x72, 0xc3, 0x4b, 0x6e, 0x32, 0x4e, 0xe3, 0x8e, 0xd7, 0x2d, 0x49,
	0xe9, 0x58, 0xc2, 0xde, 0xae, 0xf1, 0x5e, 0x2c, 0x50, 0x1f, 0x86, 0x9c, 0xb6, 0x5d, 0x21, 0xa7,
	0xe8, 0x14, 0x76, 0x4d, 0xb5, 0xb2, 0x5f, 0x86, 0x8e, 0xfd, 0x33, 0xd5, 0x2a, 0xa5, 0xe8, 0x18,
	0x46, 0xb6, 0xdf, 0x1f, 0xb3, 0x8f, 0xe8, 0x12, 0x1e, 0xb5, 0x4b, 0xab, 0xb6, 0x3b, 0xee, 0xb8,
	0xe4, 0xfe, 0x0e, 0xfb, 0xe4, 0xbb, 0x87, 0xed, 0x17, 0x0e, 0x3e, 0x6a, 0x0c, 0xd6, 0x35, 0x06,
	0x9b, 0x1a, 0x83, 0xcf, 0x1a, 0x83, 0xef, 0x1a, 0x07, 0x3f, 0x35, 0x06, 0x6f, 0x0d, 0x0e, 0xd6,
	0x0d, 0x06, 0x9b, 0x06, 0x07, 0xdb, 0x06, 0x07, 0xcf, 0x17, 0xb9, 0xe4, 0xe2, 0x4a, 0x33, 0x55,
	0x32, 0x95, 0xe4, 0xb2, 0x28, 0xa4, 0x48, 0xfe, 0xfe, 0xf4, 0x79, 0xd7, 0xbd, 0xdd, 0xfe, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xc9, 0x02, 0xb4, 0x00, 0xca, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSevenDayInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSevenDayCnf.Get().(proto.Message)
	})
}

var poolSevenDayInfo = &sync.Pool{New: func() interface{} { return &SevenDayInfo{} }}

func (m *SevenDayInfo) ReleasePool() { m.Reset(); poolSevenDayInfo.Put(m); m = nil }

var poolSevenDayCnf = &sync.Pool{New: func() interface{} { return &SevenDayCnf{} }}

func (m *SevenDayCnf) ReleasePool() { m.Reset(); poolSevenDayCnf.Put(m); m = nil }
func (this *SevenDayInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SevenDayInfo)
	if !ok {
		that2, ok := that.(SevenDayInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignedInDay != that1.SignedInDay {
		return false
	}
	if len(this.ReceivedRewardDays) != len(that1.ReceivedRewardDays) {
		return false
	}
	for i := range this.ReceivedRewardDays {
		if this.ReceivedRewardDays[i] != that1.ReceivedRewardDays[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.ActivitId != that1.ActivitId {
		return false
	}
	return true
}
func (this *SevenDayCnf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SevenDayCnf)
	if !ok {
		that2, ok := that.(SevenDayCnf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.TypId != that1.TypId {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if len(this.ActivityReward) != len(that1.ActivityReward) {
		return false
	}
	for i := range this.ActivityReward {
		if this.ActivityReward[i] != that1.ActivityReward[i] {
			return false
		}
	}
	return true
}
func (m *SevenDayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SevenDayInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SevenDayInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivitId != 0 {
		i = encodeVarintSevenDays(dAtA, i, uint64(m.ActivitId))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintSevenDays(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReceivedRewardDays) > 0 {
		dAtA2 := make([]byte, len(m.ReceivedRewardDays)*10)
		var j1 int
		for _, num1 := range m.ReceivedRewardDays {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSevenDays(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.SignedInDay != 0 {
		i = encodeVarintSevenDays(dAtA, i, uint64(m.SignedInDay))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SevenDayCnf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SevenDayCnf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SevenDayCnf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActivityReward) > 0 {
		dAtA4 := make([]byte, len(m.ActivityReward)*10)
		var j3 int
		for _, num1 := range m.ActivityReward {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSevenDays(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if m.Day != 0 {
		i = encodeVarintSevenDays(dAtA, i, uint64(m.Day))
		i--
		dAtA[i] = 0x18
	}
	if m.TypId != 0 {
		i = encodeVarintSevenDays(dAtA, i, uint64(m.TypId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSevenDays(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSevenDays(dAtA []byte, offset int, v uint64) int {
	offset -= sovSevenDays(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *SevenDayInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SignedInDay != 0 {
		w.RawByte('"')
		w.RawString("signed_in_day")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SignedInDay))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("received_reward_days")
	w.RawByte('"')
	w.RawByte(':')
	if m.ReceivedRewardDays == nil {
		w.RawString("null")
	} else if len(m.ReceivedRewardDays) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ReceivedRewardDays {
			w.Int64(int64(v))
			if i != len(m.ReceivedRewardDays)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.StartTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartTime))
		needWriteComma = true
	}
	if m.ActivitId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activit_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivitId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SevenDayCnf) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.TypId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TypId))
		needWriteComma = true
	}
	if m.Day != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("day")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Day))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("activity_reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.ActivityReward == nil {
		w.RawString("null")
	} else if len(m.ActivityReward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ActivityReward {
			w.Int64(int64(v))
			if i != len(m.ActivityReward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SevenDayInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SevenDayInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SevenDayInfo) GoString() string {
	return m.String()
}

func (m *SevenDayCnf) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SevenDayCnf) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SevenDayCnf) GoString() string {
	return m.String()
}

func (m *SevenDayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignedInDay != 0 {
		n += 1 + sovSevenDays(uint64(m.SignedInDay))
	}
	if len(m.ReceivedRewardDays) > 0 {
		l = 0
		for _, e := range m.ReceivedRewardDays {
			l += sovSevenDays(uint64(e))
		}
		n += 1 + sovSevenDays(uint64(l)) + l
	}
	if m.StartTime != 0 {
		n += 1 + sovSevenDays(uint64(m.StartTime))
	}
	if m.ActivitId != 0 {
		n += 1 + sovSevenDays(uint64(m.ActivitId))
	}
	return n
}

func (m *SevenDayCnf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSevenDays(uint64(m.Id))
	}
	if m.TypId != 0 {
		n += 1 + sovSevenDays(uint64(m.TypId))
	}
	if m.Day != 0 {
		n += 1 + sovSevenDays(uint64(m.Day))
	}
	if len(m.ActivityReward) > 0 {
		l = 0
		for _, e := range m.ActivityReward {
			l += sovSevenDays(uint64(e))
		}
		n += 1 + sovSevenDays(uint64(l)) + l
	}
	return n
}

func sovSevenDays(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSevenDays(x uint64) (n int) {
	return sovSevenDays(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SevenDayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSevenDays
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SevenDayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SevenDayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedInDay", wireType)
			}
			m.SignedInDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSevenDays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedInDay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSevenDays
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReceivedRewardDays = append(m.ReceivedRewardDays, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSevenDays
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSevenDays
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSevenDays
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReceivedRewardDays) == 0 {
					m.ReceivedRewardDays = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSevenDays
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReceivedRewardDays = append(m.ReceivedRewardDays, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedRewardDays", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSevenDays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivitId", wireType)
			}
			m.ActivitId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSevenDays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivitId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSevenDays(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSevenDays
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SevenDayCnf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSevenDays
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SevenDayCnf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SevenDayCnf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSevenDays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypId", wireType)
			}
			m.TypId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSevenDays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSevenDays
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSevenDays
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActivityReward = append(m.ActivityReward, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSevenDays
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSevenDays
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSevenDays
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActivityReward) == 0 {
					m.ActivityReward = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSevenDays
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActivityReward = append(m.ActivityReward, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityReward", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSevenDays(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSevenDays
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSevenDays(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSevenDays
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSevenDays
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSevenDays
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSevenDays
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSevenDays
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSevenDays
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSevenDays        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSevenDays          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSevenDays = fmt.Errorf("proto: unexpected end of group")
)
