// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/task.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CondCounter struct {
	Typ   int64           `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	Count map[int64]int64 `protobuf:"bytes,2,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *CondCounter) Reset()      { *m = CondCounter{} }
func (*CondCounter) ProtoMessage() {}
func (*CondCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab5369fde51a6d3, []int{0}
}
func (m *CondCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CondCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CondCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CondCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CondCounter.Merge(m, src)
}
func (m *CondCounter) XXX_Size() int {
	return m.Size()
}
func (m *CondCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_CondCounter.DiscardUnknown(m)
}

var xxx_messageInfo_CondCounter proto.InternalMessageInfo

func (m *CondCounter) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *CondCounter) GetCount() map[int64]int64 {
	if m != nil {
		return m.Count
	}
	return nil
}

func (*CondCounter) XXX_MessageName() string {
	return "models.CondCounter"
}

type TaskMapper struct {
	Id     int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mapper map[int64]int64 `protobuf:"bytes,2,rep,name=mapper,proto3" json:"mapper,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *TaskMapper) Reset()      { *m = TaskMapper{} }
func (*TaskMapper) ProtoMessage() {}
func (*TaskMapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab5369fde51a6d3, []int{1}
}
func (m *TaskMapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskMapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskMapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskMapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskMapper.Merge(m, src)
}
func (m *TaskMapper) XXX_Size() int {
	return m.Size()
}
func (m *TaskMapper) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskMapper.DiscardUnknown(m)
}

var xxx_messageInfo_TaskMapper proto.InternalMessageInfo

func (m *TaskMapper) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskMapper) GetMapper() map[int64]int64 {
	if m != nil {
		return m.Mapper
	}
	return nil
}

func (*TaskMapper) XXX_MessageName() string {
	return "models.TaskMapper"
}

type Task struct {
	TaskId   int64           `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Progress map[int64]int64 `protobuf:"bytes,2,rep,name=progress,proto3" json:"progress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Finish   map[int64]bool  `protobuf:"bytes,3,rep,name=finish,proto3" json:"finish,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Status   TaskStatus      `protobuf:"varint,4,opt,name=status,proto3,enum=models.TaskStatus" json:"status,omitempty"`
}

func (m *Task) Reset()      { *m = Task{} }
func (*Task) ProtoMessage() {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab5369fde51a6d3, []int{2}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Task) GetProgress() map[int64]int64 {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *Task) GetFinish() map[int64]bool {
	if m != nil {
		return m.Finish
	}
	return nil
}

func (m *Task) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_NotStarted
}

func (*Task) XXX_MessageName() string {
	return "models.Task"
}

type TaskUpdate struct {
	Typ     int64 `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	Id      int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Cnt     int64 `protobuf:"varint,3,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Replace bool  `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (m *TaskUpdate) Reset()      { *m = TaskUpdate{} }
func (*TaskUpdate) ProtoMessage() {}
func (*TaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab5369fde51a6d3, []int{3}
}
func (m *TaskUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskUpdate.Merge(m, src)
}
func (m *TaskUpdate) XXX_Size() int {
	return m.Size()
}
func (m *TaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TaskUpdate proto.InternalMessageInfo

func (m *TaskUpdate) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *TaskUpdate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskUpdate) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (m *TaskUpdate) GetReplace() bool {
	if m != nil {
		return m.Replace
	}
	return false
}

func (*TaskUpdate) XXX_MessageName() string {
	return "models.TaskUpdate"
}
func init() {
	proto.RegisterType((*CondCounter)(nil), "models.CondCounter")
	proto.RegisterMapType((map[int64]int64)(nil), "models.CondCounter.CountEntry")
	proto.RegisterType((*TaskMapper)(nil), "models.TaskMapper")
	proto.RegisterMapType((map[int64]int64)(nil), "models.TaskMapper.MapperEntry")
	proto.RegisterType((*Task)(nil), "models.Task")
	proto.RegisterMapType((map[int64]bool)(nil), "models.Task.FinishEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "models.Task.ProgressEntry")
	proto.RegisterType((*TaskUpdate)(nil), "models.TaskUpdate")
}

func init() { proto.RegisterFile("proto/models/task.proto", fileDescriptor_7ab5369fde51a6d3) }

var fileDescriptor_7ab5369fde51a6d3 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xce, 0x24, 0x6d, 0xba, 0xbc, 0xc5, 0x52, 0x06, 0xa1, 0x43, 0x0e, 0xe3, 0xe2, 0x69, 0x11,
	0x4c, 0xa4, 0x8a, 0x54, 0xbd, 0x59, 0x14, 0x3c, 0x14, 0x24, 0xea, 0xa5, 0x17, 0x89, 0xc9, 0xa8,
	0x21, 0x9b, 0x99, 0x30, 0x33, 0x29, 0xe4, 0x57, 0xe8, 0xcf, 0xf0, 0xe2, 0xff, 0xe8, 0xb1, 0xc7,
	0x1e, 0x35, 0xb9, 0x78, 0xf4, 0x27, 0xc8, 0xcc, 0xa4, 0xdb, 0xac, 0x08, 0xb2, 0xa7, 0xc9, 0x7b,
	0xdf, 0xf7, 0xbd, 0xf9, 0xde, 0x7b, 0x19, 0x38, 0x6c, 0xa4, 0xd0, 0x22, 0xa9, 0x45, 0xc1, 0x56,
	0x2a, 0xd1, 0x99, 0xaa, 0x62, 0x9b, 0xc1, 0xa1, 0x4b, 0x45, 0x64, 0x83, 0xc0, 0x78, 0x5b, 0x2b,
	0xc7, 0xb8, 0xfb, 0x05, 0xc1, 0xfc, 0x44, 0xf0, 0xe2, 0x44, 0xb4, 0x5c, 0x33, 0x89, 0x0f, 0x20,
	0xd0, 0x5d, 0x43, 0xd0, 0x02, 0x2d, 0x83, 0xd4, 0x7c, 0xe2, 0x47, 0xb0, 0x9b, 0x1b, 0x90, 0xf8,
	0x8b, 0x60, 0x39, 0x3f, 0xa2, 0xb1, 0xab, 0x12, 0x4f, 0x54, 0xb1, 0x3d, 0x5f, 0x70, 0x2d, 0xbb,
	0xd4, 0x91, 0xa3, 0x63, 0x80, 0x9b, 0xa4, 0xa9, 0x5a, 0xb1, 0xee, 0xba, 0x6a, 0xc5, 0x3a, 0x7c,
	0x1b, 0x76, 0xcf, 0xb3, 0x55, 0xcb, 0x88, 0x6f, 0x73, 0x2e, 0x78, 0xea, 0x1f, 0x23, 0xe3, 0x08,
	0xde, 0x66, 0xaa, 0x3a, 0xcd, 0x9a, 0x86, 0x49, 0xbc, 0x0f, 0x7e, 0x59, 0x8c, 0x4a, 0xbf, 0x2c,
	0xf0, 0x63, 0x08, 0x6b, 0x8b, 0xfc, 0xed, 0xe7, 0x46, 0x13, 0xbb, 0xc3, 0xf9, 0x19, 0xd9, 0xd1,
	0x13, 0x98, 0x4f, 0xd2, 0x5b, 0x39, 0xfa, 0xee, 0xc3, 0x8e, 0xa9, 0x8e, 0x0f, 0x61, 0xcf, 0x0c,
	0xf7, 0xfd, 0xda, 0x50, 0x68, 0xc2, 0x57, 0xc6, 0xd4, 0xac, 0x91, 0xe2, 0x93, 0x64, 0x4a, 0x8d,
	0xb6, 0xa2, 0xa9, 0xad, 0xf8, 0xf5, 0x08, 0x3a, 0x4b, 0x6b, 0x2e, 0x7e, 0x00, 0xe1, 0xc7, 0x92,
	0x97, 0xea, 0x33, 0x09, 0xac, 0x8a, 0x6c, 0xa8, 0x5e, 0x5a, 0x68, 0x6c, 0xc3, 0xf1, 0xf0, 0x3d,
	0x08, 0x95, 0xce, 0x74, 0xab, 0xc8, 0xce, 0x02, 0x2d, 0xf7, 0x8f, 0xf0, 0x54, 0xf1, 0xc6, 0x22,
	0xe9, 0xc8, 0x88, 0x9e, 0xc1, 0xad, 0x8d, 0x8b, 0xb7, 0x69, 0xda, 0xcc, 0x6b, 0x72, 0xff, 0xff,
	0xa4, 0xb3, 0xe9, 0xbc, 0xce, 0xdc, 0x02, 0xdf, 0x35, 0x45, 0xa6, 0xd9, 0x3f, 0xfe, 0x28, 0xb7,
	0x52, 0x7f, 0xbd, 0xd2, 0x03, 0x08, 0x72, 0xae, 0x49, 0xe0, 0x18, 0x39, 0xd7, 0x98, 0xc0, 0x9e,
	0x64, 0xcd, 0x2a, 0xcb, 0x99, 0x6d, 0x73, 0x96, 0x5e, 0x87, 0xcf, 0x4f, 0xaf, 0x7e, 0x52, 0xef,
	0x5b, 0x4f, 0xd1, 0x45, 0x4f, 0xd1, 0x65, 0x4f, 0xd1, 0x8f, 0x9e, 0xa2, 0x5f, 0x3d, 0xf5, 0x7e,
	0xf7, 0x14, 0x7d, 0x1d, 0xa8, 0x77, 0x31, 0x50, 0x74, 0x39, 0x50, 0xef, 0x6a, 0xa0, 0xde, 0xd9,
	0x9d, 0x5c, 0x94, 0xfc, 0xbe, 0x62, 0xf2, 0x9c, 0xc9, 0x24, 0x17, 0x75, 0x2d, 0x78, 0x32, 0x7d,
	0x0a, 0x1f, 0x42, 0x1b, 0x3d, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xa8, 0x26, 0xad, 0x42,
	0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCondCounter.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTaskMapper.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTaskUpdate.Get().(proto.Message)
	})
}

var poolCondCounter = &sync.Pool{New: func() interface{} { return &CondCounter{} }}

func (m *CondCounter) ReleasePool() { m.Reset(); poolCondCounter.Put(m); m = nil }

var poolTaskMapper = &sync.Pool{New: func() interface{} { return &TaskMapper{} }}

func (m *TaskMapper) ReleasePool() { m.Reset(); poolTaskMapper.Put(m); m = nil }

var poolTask = &sync.Pool{New: func() interface{} { return &Task{} }}

func (m *Task) ReleasePool() { m.Reset(); poolTask.Put(m); m = nil }

var poolTaskUpdate = &sync.Pool{New: func() interface{} { return &TaskUpdate{} }}

func (m *TaskUpdate) ReleasePool() { m.Reset(); poolTaskUpdate.Put(m); m = nil }
func (this *CondCounter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CondCounter)
	if !ok {
		that2, ok := that.(CondCounter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if len(this.Count) != len(that1.Count) {
		return false
	}
	for i := range this.Count {
		if this.Count[i] != that1.Count[i] {
			return false
		}
	}
	return true
}
func (this *TaskMapper) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskMapper)
	if !ok {
		that2, ok := that.(TaskMapper)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Mapper) != len(that1.Mapper) {
		return false
	}
	for i := range this.Mapper {
		if this.Mapper[i] != that1.Mapper[i] {
			return false
		}
	}
	return true
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if len(this.Progress) != len(that1.Progress) {
		return false
	}
	for i := range this.Progress {
		if this.Progress[i] != that1.Progress[i] {
			return false
		}
	}
	if len(this.Finish) != len(that1.Finish) {
		return false
	}
	for i := range this.Finish {
		if this.Finish[i] != that1.Finish[i] {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *TaskUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskUpdate)
	if !ok {
		that2, ok := that.(TaskUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Cnt != that1.Cnt {
		return false
	}
	if this.Replace != that1.Replace {
		return false
	}
	return true
}
func (m *CondCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CondCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CondCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Count) > 0 {
		for k := range m.Count {
			v := m.Count[k]
			baseI := i
			i = encodeVarintTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Typ != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskMapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskMapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskMapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mapper) > 0 {
		for k := range m.Mapper {
			v := m.Mapper[k]
			baseI := i
			i = encodeVarintTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Finish) > 0 {
		for k := range m.Finish {
			v := m.Finish[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Progress) > 0 {
		for k := range m.Progress {
			v := m.Progress[k]
			baseI := i
			i = encodeVarintTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TaskId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Replace {
		i--
		if m.Replace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Cnt != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Cnt))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Typ != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *CondCounter) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("count")
	w.RawByte('"')
	w.RawByte(':')
	if m.Count == nil {
		w.RawString("null")
	} else if len(m.Count) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCount := len(m.Count)
		for k, v := range m.Count {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCount--
			if mlCount != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TaskMapper) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("mapper")
	w.RawByte('"')
	w.RawByte(':')
	if m.Mapper == nil {
		w.RawString("null")
	} else if len(m.Mapper) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlMapper := len(m.Mapper)
		for k, v := range m.Mapper {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlMapper--
			if mlMapper != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Task) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("progress")
	w.RawByte('"')
	w.RawByte(':')
	if m.Progress == nil {
		w.RawString("null")
	} else if len(m.Progress) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlProgress := len(m.Progress)
		for k, v := range m.Progress {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlProgress--
			if mlProgress != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("finish")
	w.RawByte('"')
	w.RawByte(':')
	if m.Finish == nil {
		w.RawString("null")
	} else if len(m.Finish) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlFinish := len(m.Finish)
		for k, v := range m.Finish {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlFinish--
			if mlFinish != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TaskUpdate) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Id != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Cnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cnt))
		needWriteComma = true
	}
	if m.Replace {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("replace")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Replace)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CondCounter) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CondCounter) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CondCounter) GoString() string {
	return m.String()
}

func (m *TaskMapper) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TaskMapper) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TaskMapper) GoString() string {
	return m.String()
}

func (m *Task) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Task) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Task) GoString() string {
	return m.String()
}

func (m *TaskUpdate) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TaskUpdate) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TaskUpdate) GoString() string {
	return m.String()
}

func (m *CondCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovTask(uint64(m.Typ))
	}
	if len(m.Count) > 0 {
		for k, v := range m.Count {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTask(uint64(k)) + 1 + sovTask(uint64(v))
			n += mapEntrySize + 1 + sovTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TaskMapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if len(m.Mapper) > 0 {
		for k, v := range m.Mapper {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTask(uint64(k)) + 1 + sovTask(uint64(v))
			n += mapEntrySize + 1 + sovTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovTask(uint64(m.TaskId))
	}
	if len(m.Progress) > 0 {
		for k, v := range m.Progress {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTask(uint64(k)) + 1 + sovTask(uint64(v))
			n += mapEntrySize + 1 + sovTask(uint64(mapEntrySize))
		}
	}
	if len(m.Finish) > 0 {
		for k, v := range m.Finish {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTask(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovTask(uint64(mapEntrySize))
		}
	}
	if m.Status != 0 {
		n += 1 + sovTask(uint64(m.Status))
	}
	return n
}

func (m *TaskUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovTask(uint64(m.Typ))
	}
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.Cnt != 0 {
		n += 1 + sovTask(uint64(m.Cnt))
	}
	if m.Replace {
		n += 2
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CondCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CondCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CondCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Count == nil {
				m.Count = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Count[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskMapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskMapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskMapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mapper == nil {
				m.Mapper = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Mapper[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Progress[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finish", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finish == nil {
				m.Finish = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Finish[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replace = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
