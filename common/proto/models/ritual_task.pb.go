// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/ritual_task.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 仪式任务
type RitualTask struct {
	TaskId    int64      `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SubTaskId int64      `protobuf:"varint,2,opt,name=sub_task_id,json=subTaskId,proto3" json:"sub_task_id,omitempty"`
	Type      TaskType   `protobuf:"varint,3,opt,name=type,proto3,enum=models.TaskType" json:"type,omitempty"`
	Target    int64      `protobuf:"varint,4,opt,name=target,proto3" json:"target,omitempty"`
	Progress  int64      `protobuf:"varint,5,opt,name=progress,proto3" json:"progress,omitempty"`
	Status    TaskStatus `protobuf:"varint,6,opt,name=status,proto3,enum=models.TaskStatus" json:"status,omitempty"`
	ChoiceIdx int64      `protobuf:"varint,7,opt,name=choice_idx,json=choiceIdx,proto3" json:"choice_idx,omitempty"`
}

func (m *RitualTask) Reset()      { *m = RitualTask{} }
func (*RitualTask) ProtoMessage() {}
func (*RitualTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_282b0edece9f90a4, []int{0}
}
func (m *RitualTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RitualTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RitualTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RitualTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RitualTask.Merge(m, src)
}
func (m *RitualTask) XXX_Size() int {
	return m.Size()
}
func (m *RitualTask) XXX_DiscardUnknown() {
	xxx_messageInfo_RitualTask.DiscardUnknown(m)
}

var xxx_messageInfo_RitualTask proto.InternalMessageInfo

func (m *RitualTask) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *RitualTask) GetSubTaskId() int64 {
	if m != nil {
		return m.SubTaskId
	}
	return 0
}

func (m *RitualTask) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TaskType_TaskLogin
}

func (m *RitualTask) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *RitualTask) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *RitualTask) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_NotStarted
}

func (m *RitualTask) GetChoiceIdx() int64 {
	if m != nil {
		return m.ChoiceIdx
	}
	return 0
}

func (*RitualTask) XXX_MessageName() string {
	return "models.RitualTask"
}

// 混沌的仪式
type ChaosRitual struct {
	TargetId      int64                 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	IsCompleted   bool                  `protobuf:"varint,3,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	IsFinished    bool                  `protobuf:"varint,4,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	TargetTaskId  int64                 `protobuf:"varint,5,opt,name=target_task_id,json=targetTaskId,proto3" json:"target_task_id,omitempty"`
	TargetTaskIdx int64                 `protobuf:"varint,6,opt,name=target_task_idx,json=targetTaskIdx,proto3" json:"target_task_idx,omitempty"`
	Tasks         map[int64]*RitualTask `protobuf:"bytes,7,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsPlayedCg    bool                  `protobuf:"varint,8,opt,name=is_played_cg,json=isPlayedCg,proto3" json:"is_played_cg,omitempty"`
}

func (m *ChaosRitual) Reset()      { *m = ChaosRitual{} }
func (*ChaosRitual) ProtoMessage() {}
func (*ChaosRitual) Descriptor() ([]byte, []int) {
	return fileDescriptor_282b0edece9f90a4, []int{1}
}
func (m *ChaosRitual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChaosRitual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChaosRitual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChaosRitual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChaosRitual.Merge(m, src)
}
func (m *ChaosRitual) XXX_Size() int {
	return m.Size()
}
func (m *ChaosRitual) XXX_DiscardUnknown() {
	xxx_messageInfo_ChaosRitual.DiscardUnknown(m)
}

var xxx_messageInfo_ChaosRitual proto.InternalMessageInfo

func (m *ChaosRitual) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *ChaosRitual) GetIsCompleted() bool {
	if m != nil {
		return m.IsCompleted
	}
	return false
}

func (m *ChaosRitual) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

func (m *ChaosRitual) GetTargetTaskId() int64 {
	if m != nil {
		return m.TargetTaskId
	}
	return 0
}

func (m *ChaosRitual) GetTargetTaskIdx() int64 {
	if m != nil {
		return m.TargetTaskIdx
	}
	return 0
}

func (m *ChaosRitual) GetTasks() map[int64]*RitualTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *ChaosRitual) GetIsPlayedCg() bool {
	if m != nil {
		return m.IsPlayedCg
	}
	return false
}

func (*ChaosRitual) XXX_MessageName() string {
	return "models.ChaosRitual"
}
func init() {
	proto.RegisterType((*RitualTask)(nil), "models.RitualTask")
	proto.RegisterType((*ChaosRitual)(nil), "models.ChaosRitual")
	proto.RegisterMapType((map[int64]*RitualTask)(nil), "models.ChaosRitual.TasksEntry")
}

func init() { proto.RegisterFile("proto/models/ritual_task.proto", fileDescriptor_282b0edece9f90a4) }

var fileDescriptor_282b0edece9f90a4 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x26, 0x8d, 0xe3, 0x8e, 0x4b, 0xa9, 0xf6, 0x00, 0x56, 0x10, 0xdb, 0x50, 0x55, 0x28,
	0x42, 0x22, 0x91, 0x0a, 0x07, 0xc4, 0x91, 0x08, 0xa4, 0x48, 0x20, 0x21, 0x93, 0x13, 0x17, 0xcb,
	0xb1, 0x97, 0x64, 0x15, 0xdb, 0x6b, 0x79, 0xd6, 0x55, 0xfc, 0x17, 0x7c, 0x06, 0x9f, 0xd2, 0x63,
	0x8f, 0x3d, 0x82, 0x73, 0x41, 0x9c, 0xf8, 0x04, 0xe4, 0x5d, 0x9b, 0xa4, 0xb7, 0x9d, 0xf7, 0xde,
	0xcc, 0xce, 0x7b, 0xbb, 0xc0, 0xb2, 0x5c, 0x2a, 0x39, 0x4d, 0x64, 0xc4, 0x63, 0x9c, 0xe6, 0x42,
	0x15, 0x41, 0xec, 0xab, 0x00, 0x37, 0x13, 0x4d, 0x50, 0xcb, 0x30, 0x43, 0xf7, 0x9e, 0x8e, 0xa7,
	0x45, 0x82, 0x46, 0x71, 0xf1, 0x87, 0x00, 0x78, 0xba, 0x6f, 0x11, 0xe0, 0x86, 0x3e, 0x86, 0x41,
	0xdd, 0xee, 0x8b, 0xc8, 0x25, 0x23, 0x32, 0xee, 0x79, 0x56, 0x5d, 0xce, 0x23, 0xca, 0xc0, 0xc1,
	0x62, 0xe9, 0xb7, 0x64, 0x57, 0x93, 0xc7, 0x58, 0x2c, 0x17, 0x86, 0xbf, 0x84, 0x23, 0x55, 0x66,
	0xdc, 0xed, 0x8d, 0xc8, 0xf8, 0xf4, 0xea, 0x6c, 0x62, 0xae, 0x9a, 0xd4, 0xec, 0xa2, 0xcc, 0xb8,
	0xa7, 0x59, 0xfa, 0x08, 0x2c, 0x15, 0xe4, 0x2b, 0xae, 0xdc, 0xa3, 0x76, 0x7a, 0x5d, 0xd1, 0x21,
	0xd8, 0x59, 0x2e, 0x57, 0x39, 0x47, 0x74, 0xfb, 0x9a, 0xf9, 0x5f, 0xd3, 0x17, 0x60, 0xa1, 0x0a,
	0x54, 0x81, 0xae, 0xa5, 0x67, 0xd3, 0xc3, 0xd9, 0x5f, 0x34, 0xe3, 0x35, 0x0a, 0xfa, 0x14, 0x20,
	0x5c, 0x4b, 0x11, 0x72, 0x5f, 0x44, 0x5b, 0x77, 0x60, 0x96, 0x34, 0xc8, 0x3c, 0xda, 0x5e, 0x54,
	0x5d, 0x70, 0x66, 0xeb, 0x40, 0xa2, 0x71, 0x4c, 0x9f, 0xc0, 0xb1, 0x59, 0x60, 0x6f, 0xc9, 0x36,
	0xc0, 0x3c, 0xa2, 0xcf, 0xe0, 0x44, 0xa0, 0x1f, 0xca, 0x24, 0x8b, 0xb9, 0xe2, 0x91, 0x76, 0x66,
	0x7b, 0x8e, 0xc0, 0x59, 0x0b, 0xd1, 0x73, 0x70, 0x04, 0xfa, 0xdf, 0x44, 0x2a, 0x70, 0xcd, 0x23,
	0xed, 0xc9, 0xf6, 0x40, 0xe0, 0x87, 0x06, 0xa1, 0x97, 0x70, 0xda, 0x5c, 0xd0, 0x06, 0x67, 0xdc,
	0x9d, 0x18, 0xb4, 0xc9, 0xee, 0x39, 0x3c, 0xbc, 0xaf, 0xda, 0x6a, 0xab, 0x3d, 0xef, 0xc1, 0xa1,
	0x6c, 0x4b, 0x5f, 0x43, 0xbf, 0x16, 0xa0, 0x3b, 0x18, 0xf5, 0xc6, 0xce, 0x15, 0x6b, 0x83, 0x38,
	0xb0, 0xa4, 0x43, 0xc1, 0xf7, 0xa9, 0xca, 0x4b, 0xcf, 0x88, 0xe9, 0x48, 0xfb, 0xc8, 0xe2, 0xa0,
	0xe4, 0x91, 0x1f, 0xae, 0x5c, 0xbb, 0xdd, 0xf2, 0xb3, 0x86, 0x66, 0xab, 0xe1, 0x47, 0x80, 0x7d,
	0x1b, 0x3d, 0x83, 0xde, 0x86, 0x97, 0xcd, 0xf3, 0xd7, 0x47, 0x3a, 0x86, 0xfe, 0x75, 0x10, 0x17,
	0x5c, 0x47, 0xe4, 0xec, 0x1f, 0x60, 0xff, 0x6f, 0x3c, 0x23, 0x78, 0xdb, 0x7d, 0x43, 0xde, 0x7d,
	0xba, 0xfb, 0xc5, 0x3a, 0x3f, 0x2a, 0x46, 0x6e, 0x2a, 0x46, 0x6e, 0x2b, 0x46, 0x7e, 0x56, 0x8c,
	0xfc, 0xae, 0x58, 0xe7, 0x6f, 0xc5, 0xc8, 0xf7, 0x1d, 0xeb, 0xdc, 0xec, 0x18, 0xb9, 0xdd, 0xb1,
	0xce, 0xdd, 0x8e, 0x75, 0xbe, 0x9e, 0x87, 0x52, 0xa4, 0x2f, 0x91, 0xe7, 0xd7, 0x3c, 0x9f, 0x86,
	0x32, 0x49, 0x64, 0x3a, 0x3d, 0xfc, 0xac, 0x4b, 0x4b, 0x57, 0xaf, 0xfe, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x4e, 0xb7, 0x53, 0x1e, 0xeb, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRitualTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolChaosRitual.Get().(proto.Message)
	})
}

var poolRitualTask = &sync.Pool{New: func() interface{} { return &RitualTask{} }}

func (m *RitualTask) ReleasePool() { m.Reset(); poolRitualTask.Put(m); m = nil }

var poolChaosRitual = &sync.Pool{New: func() interface{} { return &ChaosRitual{} }}

func (m *ChaosRitual) ReleasePool() { m.Reset(); poolChaosRitual.Put(m); m = nil }
func (this *RitualTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RitualTask)
	if !ok {
		that2, ok := that.(RitualTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.SubTaskId != that1.SubTaskId {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if this.Progress != that1.Progress {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.ChoiceIdx != that1.ChoiceIdx {
		return false
	}
	return true
}
func (this *ChaosRitual) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChaosRitual)
	if !ok {
		that2, ok := that.(ChaosRitual)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TargetId != that1.TargetId {
		return false
	}
	if this.IsCompleted != that1.IsCompleted {
		return false
	}
	if this.IsFinished != that1.IsFinished {
		return false
	}
	if this.TargetTaskId != that1.TargetTaskId {
		return false
	}
	if this.TargetTaskIdx != that1.TargetTaskIdx {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	if this.IsPlayedCg != that1.IsPlayedCg {
		return false
	}
	return true
}
func (m *RitualTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RitualTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RitualTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChoiceIdx != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.ChoiceIdx))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Progress != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x28
	}
	if m.Target != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.Target))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.SubTaskId != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.SubTaskId))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChaosRitual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChaosRitual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChaosRitual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPlayedCg {
		i--
		if m.IsPlayedCg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Tasks) > 0 {
		for k := range m.Tasks {
			v := m.Tasks[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRitualTask(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRitualTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRitualTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TargetTaskIdx != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.TargetTaskIdx))
		i--
		dAtA[i] = 0x30
	}
	if m.TargetTaskId != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.TargetTaskId))
		i--
		dAtA[i] = 0x28
	}
	if m.IsFinished {
		i--
		if m.IsFinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsCompleted {
		i--
		if m.IsCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TargetId != 0 {
		i = encodeVarintRitualTask(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintRitualTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovRitualTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RitualTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.SubTaskId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sub_task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SubTaskId))
		needWriteComma = true
	}
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.Target != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("target")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Target))
		needWriteComma = true
	}
	if m.Progress != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("progress")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Progress))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.ChoiceIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("choice_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChoiceIdx))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ChaosRitual) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TargetId != 0 {
		w.RawByte('"')
		w.RawString("target_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TargetId))
		needWriteComma = true
	}
	if m.IsCompleted {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_completed")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsCompleted)
		needWriteComma = true
	}
	if m.IsFinished {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_finished")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsFinished)
		needWriteComma = true
	}
	if m.TargetTaskId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("target_task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TargetTaskId))
		needWriteComma = true
	}
	if m.TargetTaskIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("target_task_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TargetTaskIdx))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("tasks")
	w.RawByte('"')
	w.RawByte(':')
	if m.Tasks == nil {
		w.RawString("null")
	} else if len(m.Tasks) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlTasks := len(m.Tasks)
		for k, v := range m.Tasks {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlTasks--
			if mlTasks != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.IsPlayedCg {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_played_cg")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPlayedCg)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RitualTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RitualTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RitualTask) GoString() string {
	return m.String()
}

func (m *ChaosRitual) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ChaosRitual) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ChaosRitual) GoString() string {
	return m.String()
}

func (m *RitualTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovRitualTask(uint64(m.TaskId))
	}
	if m.SubTaskId != 0 {
		n += 1 + sovRitualTask(uint64(m.SubTaskId))
	}
	if m.Type != 0 {
		n += 1 + sovRitualTask(uint64(m.Type))
	}
	if m.Target != 0 {
		n += 1 + sovRitualTask(uint64(m.Target))
	}
	if m.Progress != 0 {
		n += 1 + sovRitualTask(uint64(m.Progress))
	}
	if m.Status != 0 {
		n += 1 + sovRitualTask(uint64(m.Status))
	}
	if m.ChoiceIdx != 0 {
		n += 1 + sovRitualTask(uint64(m.ChoiceIdx))
	}
	return n
}

func (m *ChaosRitual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetId != 0 {
		n += 1 + sovRitualTask(uint64(m.TargetId))
	}
	if m.IsCompleted {
		n += 2
	}
	if m.IsFinished {
		n += 2
	}
	if m.TargetTaskId != 0 {
		n += 1 + sovRitualTask(uint64(m.TargetTaskId))
	}
	if m.TargetTaskIdx != 0 {
		n += 1 + sovRitualTask(uint64(m.TargetTaskIdx))
	}
	if len(m.Tasks) > 0 {
		for k, v := range m.Tasks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRitualTask(uint64(l))
			}
			mapEntrySize := 1 + sovRitualTask(uint64(k)) + l
			n += mapEntrySize + 1 + sovRitualTask(uint64(mapEntrySize))
		}
	}
	if m.IsPlayedCg {
		n += 2
	}
	return n
}

func sovRitualTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRitualTask(x uint64) (n int) {
	return sovRitualTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RitualTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RitualTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RitualTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTaskId", wireType)
			}
			m.SubTaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubTaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChoiceIdx", wireType)
			}
			m.ChoiceIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChoiceIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChaosRitual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChaosRitual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChaosRitual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCompleted = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFinished = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTaskId", wireType)
			}
			m.TargetTaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetTaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTaskIdx", wireType)
			}
			m.TargetTaskIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetTaskIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRitualTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRitualTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tasks == nil {
				m.Tasks = make(map[int64]*RitualTask)
			}
			var mapkey int64
			var mapvalue *RitualTask
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRitualTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRitualTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRitualTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRitualTask
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRitualTask
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RitualTask{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRitualTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRitualTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tasks[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPlayedCg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPlayedCg = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRitualTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRitualTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRitualTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRitualTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRitualTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRitualTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRitualTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRitualTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRitualTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRitualTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRitualTask = fmt.Errorf("proto: unexpected end of group")
)
