// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/arena.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ArenaType int32

const (
	ArenaType_ArenaType_None    ArenaType = 0
	ArenaType_ArenaType_Default ArenaType = 1
)

var ArenaType_name = map[int32]string{
	0: "ArenaType_None",
	1: "ArenaType_Default",
}

var ArenaType_value = map[string]int32{
	"ArenaType_None":    0,
	"ArenaType_Default": 1,
}

func (ArenaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{0}
}

type ArenaRankData struct {
	RankId          string `protobuf:"bytes,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	PlayerNum       int32  `protobuf:"varint,2,opt,name=player_num,json=playerNum,proto3" json:"player_num,omitempty"`
	RobotNum        int32  `protobuf:"varint,3,opt,name=robot_num,json=robotNum,proto3" json:"robot_num,omitempty"`
	IsInit          bool   `protobuf:"varint,4,opt,name=is_init,json=isInit,proto3" json:"is_init,omitempty"`
	SeasonStartTime int64  `protobuf:"varint,5,opt,name=season_start_time,json=seasonStartTime,proto3" json:"season_start_time,omitempty"`
}

func (m *ArenaRankData) Reset()      { *m = ArenaRankData{} }
func (*ArenaRankData) ProtoMessage() {}
func (*ArenaRankData) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{0}
}
func (m *ArenaRankData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRankData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRankData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRankData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRankData.Merge(m, src)
}
func (m *ArenaRankData) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRankData) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRankData.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRankData proto.InternalMessageInfo

func (m *ArenaRankData) GetRankId() string {
	if m != nil {
		return m.RankId
	}
	return ""
}

func (m *ArenaRankData) GetPlayerNum() int32 {
	if m != nil {
		return m.PlayerNum
	}
	return 0
}

func (m *ArenaRankData) GetRobotNum() int32 {
	if m != nil {
		return m.RobotNum
	}
	return 0
}

func (m *ArenaRankData) GetIsInit() bool {
	if m != nil {
		return m.IsInit
	}
	return false
}

func (m *ArenaRankData) GetSeasonStartTime() int64 {
	if m != nil {
		return m.SeasonStartTime
	}
	return 0
}

func (*ArenaRankData) XXX_MessageName() string {
	return "models.ArenaRankData"
}

type ArenaInfo struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Nickname    string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level       int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId    int64  `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame int64  `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power       int64  `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	Title       int64  `protobuf:"varint,7,opt,name=title,proto3" json:"title,omitempty"`
	RankingId   int32  `protobuf:"varint,8,opt,name=ranking_id,json=rankingId,proto3" json:"ranking_id,omitempty"`
	GuildName   string `protobuf:"bytes,9,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	IsRobot     bool   `protobuf:"varint,10,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	Score       int64  `protobuf:"varint,11,opt,name=score,proto3" json:"score,omitempty"`
	HeroId      int64  `protobuf:"varint,12,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	HeroFashion int64  `protobuf:"varint,13,opt,name=hero_fashion,json=heroFashion,proto3" json:"hero_fashion,omitempty"`
}

func (m *ArenaInfo) Reset()      { *m = ArenaInfo{} }
func (*ArenaInfo) ProtoMessage() {}
func (*ArenaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{1}
}
func (m *ArenaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaInfo.Merge(m, src)
}
func (m *ArenaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ArenaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaInfo proto.InternalMessageInfo

func (m *ArenaInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ArenaInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *ArenaInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ArenaInfo) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *ArenaInfo) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *ArenaInfo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *ArenaInfo) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *ArenaInfo) GetRankingId() int32 {
	if m != nil {
		return m.RankingId
	}
	return 0
}

func (m *ArenaInfo) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *ArenaInfo) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *ArenaInfo) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ArenaInfo) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *ArenaInfo) GetHeroFashion() int64 {
	if m != nil {
		return m.HeroFashion
	}
	return 0
}

func (*ArenaInfo) XXX_MessageName() string {
	return "models.ArenaInfo"
}

type ArenaData struct {
	FightHero              *Assemble `protobuf:"bytes,1,opt,name=fight_hero,json=fightHero,proto3" json:"fight_hero,omitempty"`
	RankingIndex           string    `protobuf:"bytes,2,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
	LastRefreshTime        int64     `protobuf:"varint,3,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	FreeChallengeTimes     int64     `protobuf:"varint,4,opt,name=free_challenge_times,json=freeChallengeTimes,proto3" json:"free_challenge_times,omitempty"`
	LeftTicketPurchasesNum int64     `protobuf:"varint,5,opt,name=left_ticket_purchases_num,json=leftTicketPurchasesNum,proto3" json:"left_ticket_purchases_num,omitempty"`
	SeasonRewardIndex      uint64    `protobuf:"varint,6,opt,name=season_reward_index,json=seasonRewardIndex,proto3" json:"season_reward_index,omitempty"`
	DayRewardIndex         uint64    `protobuf:"varint,7,opt,name=day_reward_index,json=dayRewardIndex,proto3" json:"day_reward_index,omitempty"`
}

func (m *ArenaData) Reset()      { *m = ArenaData{} }
func (*ArenaData) ProtoMessage() {}
func (*ArenaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{2}
}
func (m *ArenaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaData.Merge(m, src)
}
func (m *ArenaData) XXX_Size() int {
	return m.Size()
}
func (m *ArenaData) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaData.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaData proto.InternalMessageInfo

func (m *ArenaData) GetFightHero() *Assemble {
	if m != nil {
		return m.FightHero
	}
	return nil
}

func (m *ArenaData) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ArenaData) GetLastRefreshTime() int64 {
	if m != nil {
		return m.LastRefreshTime
	}
	return 0
}

func (m *ArenaData) GetFreeChallengeTimes() int64 {
	if m != nil {
		return m.FreeChallengeTimes
	}
	return 0
}

func (m *ArenaData) GetLeftTicketPurchasesNum() int64 {
	if m != nil {
		return m.LeftTicketPurchasesNum
	}
	return 0
}

func (m *ArenaData) GetSeasonRewardIndex() uint64 {
	if m != nil {
		return m.SeasonRewardIndex
	}
	return 0
}

func (m *ArenaData) GetDayRewardIndex() uint64 {
	if m != nil {
		return m.DayRewardIndex
	}
	return 0
}

func (*ArenaData) XXX_MessageName() string {
	return "models.ArenaData"
}

type ArenaHistory struct {
	AttackerInfo         *ArenaInfo `protobuf:"bytes,1,opt,name=attacker_info,json=attackerInfo,proto3" json:"attacker_info,omitempty"`
	AttackerOldRankingId int64      `protobuf:"varint,2,opt,name=attacker_old_ranking_id,json=attackerOldRankingId,proto3" json:"attacker_old_ranking_id,omitempty"`
	AttackerNewRankingId int64      `protobuf:"varint,3,opt,name=attacker_new_ranking_id,json=attackerNewRankingId,proto3" json:"attacker_new_ranking_id,omitempty"`
	DefenderInfo         *ArenaInfo `protobuf:"bytes,4,opt,name=defender_info,json=defenderInfo,proto3" json:"defender_info,omitempty"`
	DefenderOldRankingId int64      `protobuf:"varint,5,opt,name=defender_old_ranking_id,json=defenderOldRankingId,proto3" json:"defender_old_ranking_id,omitempty"`
	DefenderNewRankingId int64      `protobuf:"varint,6,opt,name=defender_new_ranking_id,json=defenderNewRankingId,proto3" json:"defender_new_ranking_id,omitempty"`
	FightTime            int64      `protobuf:"varint,7,opt,name=fight_time,json=fightTime,proto3" json:"fight_time,omitempty"`
	ChallengeSuccess     bool       `protobuf:"varint,8,opt,name=challenge_success,json=challengeSuccess,proto3" json:"challenge_success,omitempty"`
}

func (m *ArenaHistory) Reset()      { *m = ArenaHistory{} }
func (*ArenaHistory) ProtoMessage() {}
func (*ArenaHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{3}
}
func (m *ArenaHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaHistory.Merge(m, src)
}
func (m *ArenaHistory) XXX_Size() int {
	return m.Size()
}
func (m *ArenaHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaHistory proto.InternalMessageInfo

func (m *ArenaHistory) GetAttackerInfo() *ArenaInfo {
	if m != nil {
		return m.AttackerInfo
	}
	return nil
}

func (m *ArenaHistory) GetAttackerOldRankingId() int64 {
	if m != nil {
		return m.AttackerOldRankingId
	}
	return 0
}

func (m *ArenaHistory) GetAttackerNewRankingId() int64 {
	if m != nil {
		return m.AttackerNewRankingId
	}
	return 0
}

func (m *ArenaHistory) GetDefenderInfo() *ArenaInfo {
	if m != nil {
		return m.DefenderInfo
	}
	return nil
}

func (m *ArenaHistory) GetDefenderOldRankingId() int64 {
	if m != nil {
		return m.DefenderOldRankingId
	}
	return 0
}

func (m *ArenaHistory) GetDefenderNewRankingId() int64 {
	if m != nil {
		return m.DefenderNewRankingId
	}
	return 0
}

func (m *ArenaHistory) GetFightTime() int64 {
	if m != nil {
		return m.FightTime
	}
	return 0
}

func (m *ArenaHistory) GetChallengeSuccess() bool {
	if m != nil {
		return m.ChallengeSuccess
	}
	return false
}

func (*ArenaHistory) XXX_MessageName() string {
	return "models.ArenaHistory"
}

type ArenaDataElement struct {
	RoleId           string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RankingId        int32  `protobuf:"varint,2,opt,name=ranking_id,json=rankingId,proto3" json:"ranking_id,omitempty"`
	IsRobot          bool   `protobuf:"varint,3,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	NickName         string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	IsFirstChallenge bool   `protobuf:"varint,5,opt,name=is_first_challenge,json=isFirstChallenge,proto3" json:"is_first_challenge,omitempty"`
}

func (m *ArenaDataElement) Reset()      { *m = ArenaDataElement{} }
func (*ArenaDataElement) ProtoMessage() {}
func (*ArenaDataElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{4}
}
func (m *ArenaDataElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaDataElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaDataElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaDataElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaDataElement.Merge(m, src)
}
func (m *ArenaDataElement) XXX_Size() int {
	return m.Size()
}
func (m *ArenaDataElement) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaDataElement.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaDataElement proto.InternalMessageInfo

func (m *ArenaDataElement) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ArenaDataElement) GetRankingId() int32 {
	if m != nil {
		return m.RankingId
	}
	return 0
}

func (m *ArenaDataElement) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *ArenaDataElement) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *ArenaDataElement) GetIsFirstChallenge() bool {
	if m != nil {
		return m.IsFirstChallenge
	}
	return false
}

func (*ArenaDataElement) XXX_MessageName() string {
	return "models.ArenaDataElement"
}

type RankingSwapInfo struct {
	Role_0OldRankingId int32 `protobuf:"varint,1,opt,name=role_0_old_ranking_id,json=role0OldRankingId,proto3" json:"role_0_old_ranking_id,omitempty"`
	Role_0NewRankingId int32 `protobuf:"varint,2,opt,name=role_0_new_ranking_id,json=role0NewRankingId,proto3" json:"role_0_new_ranking_id,omitempty"`
	Role_1OldRankingId int32 `protobuf:"varint,3,opt,name=role_1_old_ranking_id,json=role1OldRankingId,proto3" json:"role_1_old_ranking_id,omitempty"`
	Role_1NewRankingId int32 `protobuf:"varint,4,opt,name=role_1_new_ranking_id,json=role1NewRankingId,proto3" json:"role_1_new_ranking_id,omitempty"`
}

func (m *RankingSwapInfo) Reset()      { *m = RankingSwapInfo{} }
func (*RankingSwapInfo) ProtoMessage() {}
func (*RankingSwapInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{5}
}
func (m *RankingSwapInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankingSwapInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankingSwapInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankingSwapInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankingSwapInfo.Merge(m, src)
}
func (m *RankingSwapInfo) XXX_Size() int {
	return m.Size()
}
func (m *RankingSwapInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RankingSwapInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RankingSwapInfo proto.InternalMessageInfo

func (m *RankingSwapInfo) GetRole_0OldRankingId() int32 {
	if m != nil {
		return m.Role_0OldRankingId
	}
	return 0
}

func (m *RankingSwapInfo) GetRole_0NewRankingId() int32 {
	if m != nil {
		return m.Role_0NewRankingId
	}
	return 0
}

func (m *RankingSwapInfo) GetRole_1OldRankingId() int32 {
	if m != nil {
		return m.Role_1OldRankingId
	}
	return 0
}

func (m *RankingSwapInfo) GetRole_1NewRankingId() int32 {
	if m != nil {
		return m.Role_1NewRankingId
	}
	return 0
}

func (*RankingSwapInfo) XXX_MessageName() string {
	return "models.RankingSwapInfo"
}

type ArenaRanking struct {
}

func (m *ArenaRanking) Reset()      { *m = ArenaRanking{} }
func (*ArenaRanking) ProtoMessage() {}
func (*ArenaRanking) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{6}
}
func (m *ArenaRanking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking.Merge(m, src)
}
func (m *ArenaRanking) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking proto.InternalMessageInfo

func (*ArenaRanking) XXX_MessageName() string {
	return "models.ArenaRanking"
}

type ArenaRanking_Info struct {
	RoleId           string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RankingId        int32  `protobuf:"varint,3,opt,name=ranking_id,json=rankingId,proto3" json:"ranking_id,omitempty"`
	IsRobot          bool   `protobuf:"varint,4,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	NickName         string `protobuf:"bytes,5,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	IsFirstChallenge bool   `protobuf:"varint,6,opt,name=is_first_challenge,json=isFirstChallenge,proto3" json:"is_first_challenge,omitempty"`
}

func (m *ArenaRanking_Info) Reset()      { *m = ArenaRanking_Info{} }
func (*ArenaRanking_Info) ProtoMessage() {}
func (*ArenaRanking_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{6, 0}
}
func (m *ArenaRanking_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_Info.Merge(m, src)
}
func (m *ArenaRanking_Info) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_Info.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_Info proto.InternalMessageInfo

func (m *ArenaRanking_Info) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ArenaRanking_Info) GetRankingId() int32 {
	if m != nil {
		return m.RankingId
	}
	return 0
}

func (m *ArenaRanking_Info) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *ArenaRanking_Info) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *ArenaRanking_Info) GetIsFirstChallenge() bool {
	if m != nil {
		return m.IsFirstChallenge
	}
	return false
}

func (*ArenaRanking_Info) XXX_MessageName() string {
	return "models.ArenaRanking.Info"
}

type ArenaRanking_Infos struct {
	PlayerNum int32 `protobuf:"varint,4,opt,name=player_num,json=playerNum,proto3" json:"player_num,omitempty"`
	RobotNum  int32 `protobuf:"varint,5,opt,name=robot_num,json=robotNum,proto3" json:"robot_num,omitempty"`
	StartTime int64 `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	IsClose   bool  `protobuf:"varint,7,opt,name=is_close,json=isClose,proto3" json:"is_close,omitempty"`
}

func (m *ArenaRanking_Infos) Reset()      { *m = ArenaRanking_Infos{} }
func (*ArenaRanking_Infos) ProtoMessage() {}
func (*ArenaRanking_Infos) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{6, 1}
}
func (m *ArenaRanking_Infos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_Infos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_Infos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_Infos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_Infos.Merge(m, src)
}
func (m *ArenaRanking_Infos) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_Infos) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_Infos.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_Infos proto.InternalMessageInfo

func (m *ArenaRanking_Infos) GetPlayerNum() int32 {
	if m != nil {
		return m.PlayerNum
	}
	return 0
}

func (m *ArenaRanking_Infos) GetRobotNum() int32 {
	if m != nil {
		return m.RobotNum
	}
	return 0
}

func (m *ArenaRanking_Infos) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ArenaRanking_Infos) GetIsClose() bool {
	if m != nil {
		return m.IsClose
	}
	return false
}

func (*ArenaRanking_Infos) XXX_MessageName() string {
	return "models.ArenaRanking.Infos"
}

type ArenaRanking_TypeInfos struct {
	Type  ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	Index uint32    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	//repeated  string ranking_indexs = 3;
	SeasonSettlementTime int64  `protobuf:"varint,5,opt,name=season_settlement_time,json=seasonSettlementTime,proto3" json:"season_settlement_time,omitempty"`
	DaySettlementTime    int64  `protobuf:"varint,6,opt,name=day_settlement_time,json=daySettlementTime,proto3" json:"day_settlement_time,omitempty"`
	SeasonRewardIndex    uint64 `protobuf:"varint,7,opt,name=season_reward_index,json=seasonRewardIndex,proto3" json:"season_reward_index,omitempty"`
	DayRewardIndex       uint64 `protobuf:"varint,8,opt,name=day_reward_index,json=dayRewardIndex,proto3" json:"day_reward_index,omitempty"`
}

func (m *ArenaRanking_TypeInfos) Reset()      { *m = ArenaRanking_TypeInfos{} }
func (*ArenaRanking_TypeInfos) ProtoMessage() {}
func (*ArenaRanking_TypeInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{6, 2}
}
func (m *ArenaRanking_TypeInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRanking_TypeInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRanking_TypeInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRanking_TypeInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRanking_TypeInfos.Merge(m, src)
}
func (m *ArenaRanking_TypeInfos) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRanking_TypeInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRanking_TypeInfos.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRanking_TypeInfos proto.InternalMessageInfo

func (m *ArenaRanking_TypeInfos) GetType() ArenaType {
	if m != nil {
		return m.Type
	}
	return ArenaType_ArenaType_None
}

func (m *ArenaRanking_TypeInfos) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ArenaRanking_TypeInfos) GetSeasonSettlementTime() int64 {
	if m != nil {
		return m.SeasonSettlementTime
	}
	return 0
}

func (m *ArenaRanking_TypeInfos) GetDaySettlementTime() int64 {
	if m != nil {
		return m.DaySettlementTime
	}
	return 0
}

func (m *ArenaRanking_TypeInfos) GetSeasonRewardIndex() uint64 {
	if m != nil {
		return m.SeasonRewardIndex
	}
	return 0
}

func (m *ArenaRanking_TypeInfos) GetDayRewardIndex() uint64 {
	if m != nil {
		return m.DayRewardIndex
	}
	return 0
}

func (*ArenaRanking_TypeInfos) XXX_MessageName() string {
	return "models.ArenaRanking.TypeInfos"
}

type ArenaFightLog struct {
	AttackerRoleId    string           `protobuf:"bytes,1,opt,name=attacker_role_id,json=attackerRoleId,proto3" json:"attacker_role_id,omitempty"`
	DefenderRoleId    string           `protobuf:"bytes,2,opt,name=defender_role_id,json=defenderRoleId,proto3" json:"defender_role_id,omitempty"`
	IsWin             bool             `protobuf:"varint,3,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
	RankingChangeInfo *RankingSwapInfo `protobuf:"bytes,4,opt,name=ranking_change_info,json=rankingChangeInfo,proto3" json:"ranking_change_info,omitempty"`
	IsRobot           bool             `protobuf:"varint,5,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	FightTime         int64            `protobuf:"varint,6,opt,name=fight_time,json=fightTime,proto3" json:"fight_time,omitempty"`
	NickName          string           `protobuf:"bytes,7,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	PlayerInfo        *ArenaInfo       `protobuf:"bytes,8,opt,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty"`
}

func (m *ArenaFightLog) Reset()      { *m = ArenaFightLog{} }
func (*ArenaFightLog) ProtoMessage() {}
func (*ArenaFightLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{7}
}
func (m *ArenaFightLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaFightLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaFightLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaFightLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaFightLog.Merge(m, src)
}
func (m *ArenaFightLog) XXX_Size() int {
	return m.Size()
}
func (m *ArenaFightLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaFightLog.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaFightLog proto.InternalMessageInfo

func (m *ArenaFightLog) GetAttackerRoleId() string {
	if m != nil {
		return m.AttackerRoleId
	}
	return ""
}

func (m *ArenaFightLog) GetDefenderRoleId() string {
	if m != nil {
		return m.DefenderRoleId
	}
	return ""
}

func (m *ArenaFightLog) GetIsWin() bool {
	if m != nil {
		return m.IsWin
	}
	return false
}

func (m *ArenaFightLog) GetRankingChangeInfo() *RankingSwapInfo {
	if m != nil {
		return m.RankingChangeInfo
	}
	return nil
}

func (m *ArenaFightLog) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *ArenaFightLog) GetFightTime() int64 {
	if m != nil {
		return m.FightTime
	}
	return 0
}

func (m *ArenaFightLog) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *ArenaFightLog) GetPlayerInfo() *ArenaInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (*ArenaFightLog) XXX_MessageName() string {
	return "models.ArenaFightLog"
}

type ArenaSendRewardTime struct {
	RewardIndex    uint64 `protobuf:"varint,1,opt,name=reward_index,json=rewardIndex,proto3" json:"reward_index,omitempty"`
	SendRewardTime int64  `protobuf:"varint,2,opt,name=send_reward_time,json=sendRewardTime,proto3" json:"send_reward_time,omitempty"`
}

func (m *ArenaSendRewardTime) Reset()      { *m = ArenaSendRewardTime{} }
func (*ArenaSendRewardTime) ProtoMessage() {}
func (*ArenaSendRewardTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{8}
}
func (m *ArenaSendRewardTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaSendRewardTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaSendRewardTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaSendRewardTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaSendRewardTime.Merge(m, src)
}
func (m *ArenaSendRewardTime) XXX_Size() int {
	return m.Size()
}
func (m *ArenaSendRewardTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaSendRewardTime.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaSendRewardTime proto.InternalMessageInfo

func (m *ArenaSendRewardTime) GetRewardIndex() uint64 {
	if m != nil {
		return m.RewardIndex
	}
	return 0
}

func (m *ArenaSendRewardTime) GetSendRewardTime() int64 {
	if m != nil {
		return m.SendRewardTime
	}
	return 0
}

func (*ArenaSendRewardTime) XXX_MessageName() string {
	return "models.ArenaSendRewardTime"
}

type ArenaRewardTime struct {
	Type                 ArenaType `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty"`
	DaySettlementTime    int64     `protobuf:"varint,2,opt,name=day_settlement_time,json=daySettlementTime,proto3" json:"day_settlement_time,omitempty"`
	SeasonSettlementTime int64     `protobuf:"varint,3,opt,name=season_settlement_time,json=seasonSettlementTime,proto3" json:"season_settlement_time,omitempty"`
}

func (m *ArenaRewardTime) Reset()      { *m = ArenaRewardTime{} }
func (*ArenaRewardTime) ProtoMessage() {}
func (*ArenaRewardTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_91ae43b6bbffa9e1, []int{9}
}
func (m *ArenaRewardTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRewardTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRewardTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRewardTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRewardTime.Merge(m, src)
}
func (m *ArenaRewardTime) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRewardTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRewardTime.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRewardTime proto.InternalMessageInfo

func (m *ArenaRewardTime) GetType() ArenaType {
	if m != nil {
		return m.Type
	}
	return ArenaType_ArenaType_None
}

func (m *ArenaRewardTime) GetDaySettlementTime() int64 {
	if m != nil {
		return m.DaySettlementTime
	}
	return 0
}

func (m *ArenaRewardTime) GetSeasonSettlementTime() int64 {
	if m != nil {
		return m.SeasonSettlementTime
	}
	return 0
}

func (*ArenaRewardTime) XXX_MessageName() string {
	return "models.ArenaRewardTime"
}
func init() {
	proto.RegisterEnum("models.ArenaType", ArenaType_name, ArenaType_value)
	proto.RegisterType((*ArenaRankData)(nil), "models.ArenaRankData")
	proto.RegisterType((*ArenaInfo)(nil), "models.ArenaInfo")
	proto.RegisterType((*ArenaData)(nil), "models.ArenaData")
	proto.RegisterType((*ArenaHistory)(nil), "models.ArenaHistory")
	proto.RegisterType((*ArenaDataElement)(nil), "models.ArenaDataElement")
	proto.RegisterType((*RankingSwapInfo)(nil), "models.RankingSwapInfo")
	proto.RegisterType((*ArenaRanking)(nil), "models.ArenaRanking")
	proto.RegisterType((*ArenaRanking_Info)(nil), "models.ArenaRanking.Info")
	proto.RegisterType((*ArenaRanking_Infos)(nil), "models.ArenaRanking.Infos")
	proto.RegisterType((*ArenaRanking_TypeInfos)(nil), "models.ArenaRanking.TypeInfos")
	proto.RegisterType((*ArenaFightLog)(nil), "models.ArenaFightLog")
	proto.RegisterType((*ArenaSendRewardTime)(nil), "models.ArenaSendRewardTime")
	proto.RegisterType((*ArenaRewardTime)(nil), "models.ArenaRewardTime")
}

func init() { proto.RegisterFile("proto/models/arena.proto", fileDescriptor_91ae43b6bbffa9e1) }

var fileDescriptor_91ae43b6bbffa9e1 = []byte{
	// 1256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xfa, 0xbf, 0x27, 0xb6, 0x63, 0x6f, 0xd2, 0xc6, 0x75, 0xa9, 0x49, 0x8d, 0x90, 0xa2,
	0x02, 0x49, 0x5a, 0xa0, 0x12, 0xc7, 0xd2, 0x12, 0x1a, 0x09, 0x02, 0xda, 0x54, 0x42, 0xe2, 0xb2,
	0x9a, 0xec, 0xce, 0xda, 0xa3, 0xac, 0x67, 0xac, 0x99, 0x71, 0x8c, 0x0f, 0xdc, 0x39, 0xf2, 0x09,
	0x38, 0x21, 0x04, 0x37, 0xbe, 0x01, 0xd7, 0x9e, 0x50, 0x0f, 0x1c, 0xca, 0x0d, 0x9c, 0x0b, 0x17,
	0x24, 0x3e, 0x02, 0x9a, 0x37, 0xbb, 0xeb, 0xdd, 0x25, 0x8e, 0xca, 0xcd, 0xef, 0xdf, 0xbe, 0xdf,
	0xbc, 0xf7, 0x7b, 0xef, 0x19, 0xf5, 0xa6, 0x82, 0x2b, 0x7e, 0x30, 0xe1, 0x3e, 0x09, 0xe5, 0x01,
	0x16, 0x84, 0xe1, 0x7d, 0x50, 0xd9, 0x55, 0xa3, 0xeb, 0xdf, 0xcc, 0x78, 0x9c, 0xe1, 0x91, 0xb1,
	0xf7, 0x5f, 0xcb, 0xe8, 0x03, 0x2e, 0x26, 0x58, 0x51, 0xce, 0x8c, 0x75, 0xf8, 0x93, 0x85, 0x5a,
	0x8f, 0xf4, 0xd7, 0x1c, 0xcc, 0xce, 0x9f, 0x60, 0x85, 0xed, 0x1d, 0x54, 0x13, 0x98, 0x9d, 0xbb,
	0xd4, 0xef, 0x59, 0xbb, 0xd6, 0x5e, 0xc3, 0xa9, 0x6a, 0xf1, 0xd8, 0xb7, 0xef, 0x20, 0x34, 0x0d,
	0xf1, 0x82, 0x08, 0x97, 0xcd, 0x26, 0xbd, 0xe2, 0xae, 0xb5, 0x57, 0x71, 0x1a, 0x46, 0x73, 0x32,
	0x9b, 0xd8, 0xb7, 0x51, 0x43, 0xf0, 0x33, 0xae, 0xc0, 0x5a, 0x02, 0x6b, 0x1d, 0x14, 0xda, 0xb8,
	0x83, 0x6a, 0x54, 0xba, 0x94, 0x51, 0xd5, 0x2b, 0xef, 0x5a, 0x7b, 0x75, 0xa7, 0x4a, 0xe5, 0x31,
	0xa3, 0xca, 0xbe, 0x87, 0xba, 0x92, 0x60, 0xc9, 0x99, 0x2b, 0x15, 0x16, 0xca, 0x55, 0x74, 0x42,
	0x7a, 0x95, 0x5d, 0x6b, 0xaf, 0xe4, 0x6c, 0x1a, 0xc3, 0xa9, 0xd6, 0x3f, 0xa3, 0x13, 0x32, 0xfc,
	0xbb, 0x88, 0x1a, 0x80, 0xf5, 0x98, 0x05, 0x1c, 0x70, 0xf2, 0x90, 0xa4, 0x71, 0xf2, 0x90, 0x1c,
	0xfb, 0x76, 0x1f, 0xd5, 0x19, 0xf5, 0xce, 0x19, 0x9e, 0x10, 0x40, 0xd9, 0x70, 0x12, 0xd9, 0xde,
	0x46, 0x95, 0x90, 0x5c, 0x90, 0x10, 0x00, 0x96, 0x1c, 0x23, 0x68, 0xe8, 0xf8, 0x02, 0x2b, 0x2c,
	0xf4, 0xc7, 0xca, 0x60, 0xa9, 0x1b, 0xc5, 0xb1, 0x6f, 0xdf, 0x45, 0xcd, 0xc8, 0x18, 0x08, 0x9c,
	0x80, 0xdb, 0x30, 0xba, 0x23, 0x11, 0x7d, 0x75, 0xca, 0xe7, 0x44, 0xf4, 0xaa, 0xe6, 0xab, 0x20,
	0x68, 0xad, 0xa2, 0x2a, 0x24, 0xbd, 0x9a, 0xd1, 0x82, 0xa0, 0xab, 0xa8, 0xeb, 0x49, 0xd9, 0x48,
	0x27, 0xab, 0x9b, 0x2a, 0x46, 0x1a, 0x53, 0xe4, 0xd1, 0x8c, 0x86, 0xbe, 0x0b, 0xf0, 0x1b, 0x00,
	0xbf, 0x01, 0x9a, 0x13, 0x9d, 0xe9, 0x16, 0xaa, 0x53, 0xe9, 0x42, 0x59, 0x7b, 0x08, 0x0a, 0x59,
	0xa3, 0xd2, 0xd1, 0xa2, 0x4e, 0x27, 0x3d, 0x2e, 0x48, 0x6f, 0xc3, 0xa4, 0x03, 0x41, 0x57, 0x69,
	0x4c, 0x04, 0xd7, 0xb9, 0x9a, 0xa0, 0xaf, 0x6a, 0xd1, 0x3c, 0x0b, 0x0c, 0x01, 0x96, 0x63, 0xca,
	0x59, 0xaf, 0x65, 0x9e, 0xa5, 0x75, 0x47, 0x46, 0x35, 0xfc, 0x2d, 0xae, 0x37, 0xf0, 0xe2, 0x00,
	0xa1, 0x80, 0x8e, 0xc6, 0xca, 0xd5, 0x2e, 0x50, 0xf2, 0x8d, 0x07, 0x9d, 0x7d, 0x43, 0xab, 0xfd,
	0x47, 0x52, 0x92, 0xc9, 0x59, 0x48, 0x9c, 0x06, 0xf8, 0x3c, 0x25, 0x82, 0xdb, 0x6f, 0xa0, 0x56,
	0xf2, 0x52, 0xe6, 0x93, 0xaf, 0xa2, 0x66, 0x34, 0xe3, 0xc7, 0x6a, 0x9d, 0xee, 0x7f, 0x88, 0xa5,
	0x72, 0x05, 0x09, 0x04, 0x91, 0x63, 0xd3, 0x7f, 0xd3, 0x9c, 0x4d, 0x6d, 0x70, 0x8c, 0x5e, 0xf7,
	0xdf, 0x3e, 0x44, 0xdb, 0x81, 0x20, 0xc4, 0xf5, 0xc6, 0x38, 0x0c, 0x09, 0x1b, 0x11, 0xf0, 0x96,
	0x51, 0xc7, 0x6c, 0x6d, 0x7b, 0x1c, 0x9b, 0x74, 0x80, 0xb4, 0x3f, 0x40, 0xb7, 0x42, 0x12, 0x68,
	0x56, 0x79, 0xe7, 0x44, 0xb9, 0xd3, 0x99, 0xf0, 0xc6, 0x58, 0x12, 0x09, 0x1c, 0x35, 0x8d, 0xbc,
	0xa9, 0x1d, 0x9e, 0x81, 0xfd, 0xf3, 0xd8, 0xac, 0x19, 0xbb, 0x8f, 0xb6, 0x22, 0x62, 0x0a, 0x32,
	0xc7, 0xc2, 0x8f, 0xde, 0xa0, 0x3b, 0x5c, 0x76, 0x22, 0xce, 0x3a, 0x60, 0x31, 0x0f, 0xd9, 0x43,
	0x1d, 0x1f, 0x2f, 0xb2, 0xce, 0x35, 0x70, 0x6e, 0xfb, 0x78, 0x91, 0xf2, 0x1c, 0xfe, 0x50, 0x42,
	0x4d, 0x28, 0xeb, 0x53, 0x2a, 0x15, 0x17, 0x0b, 0xfb, 0x21, 0x6a, 0x61, 0xa5, 0xb0, 0x77, 0x4e,
	0x84, 0x4b, 0x59, 0x10, 0x17, 0xb7, 0x9b, 0x14, 0x37, 0xe6, 0xbc, 0xd3, 0x8c, 0xfd, 0x60, 0x02,
	0xde, 0x47, 0x3b, 0x49, 0x1c, 0x0f, 0x7d, 0x37, 0xc5, 0xab, 0x22, 0xbc, 0x6d, 0x3b, 0x36, 0x7f,
	0x16, 0xfa, 0x4e, 0x42, 0xb1, 0x74, 0x18, 0x23, 0xf3, 0x74, 0x58, 0x29, 0x1b, 0x76, 0x42, 0xe6,
	0xab, 0xb0, 0x87, 0xa8, 0xe5, 0x93, 0x80, 0x30, 0x3f, 0x46, 0x59, 0x5e, 0x8b, 0x32, 0xf6, 0x8b,
	0x51, 0x26, 0x71, 0x39, 0x94, 0xa6, 0x03, 0xdb, 0xb1, 0x39, 0x8f, 0x32, 0x09, 0xcb, 0xa1, 0xac,
	0x66, 0xc3, 0x32, 0x28, 0xef, 0xc4, 0x2c, 0x05, 0x22, 0x99, 0xc9, 0x33, 0x9c, 0x04, 0x0a, 0xbd,
	0x85, 0xba, 0x2b, 0xf6, 0xc8, 0x99, 0xe7, 0x11, 0x29, 0x61, 0x08, 0xeb, 0x4e, 0x27, 0x31, 0x9c,
	0x1a, 0xfd, 0xf0, 0x67, 0x0b, 0x75, 0x12, 0xfe, 0x7f, 0x14, 0x92, 0x09, 0x61, 0x6a, 0xfd, 0xda,
	0xc9, 0x0e, 0x76, 0x31, 0x3f, 0xd8, 0xe9, 0xc9, 0x2d, 0x65, 0x27, 0xf7, 0x36, 0x6a, 0xe8, 0x05,
	0x65, 0x46, 0xbe, 0xbc, 0xda, 0x58, 0x30, 0xf1, 0x6f, 0x23, 0x9b, 0x4a, 0x37, 0xa0, 0x42, 0xaa,
	0x15, 0xf1, 0xa1, 0x72, 0x75, 0xa7, 0x43, 0xe5, 0x91, 0x36, 0x24, 0xac, 0x1f, 0xfe, 0x6e, 0xa1,
	0xcd, 0xa8, 0x18, 0xa7, 0x73, 0x3c, 0x85, 0x06, 0x1c, 0xa2, 0x1b, 0x80, 0xf8, 0x30, 0x5f, 0x7e,
	0x0b, 0x30, 0x76, 0xb5, 0xf1, 0x30, 0x53, 0xfb, 0x55, 0x44, 0xae, 0xf2, 0xc5, 0x54, 0x44, 0xa6,
	0xec, 0x71, 0xc4, 0xfd, 0x7c, 0x8e, 0xd2, 0x2a, 0xe2, 0xfe, 0x95, 0x39, 0xee, 0xe7, 0x73, 0x94,
	0x53, 0x11, 0xe9, 0x1c, 0xc3, 0x5f, 0xca, 0xd1, 0xdc, 0x44, 0xaa, 0xfe, 0xf7, 0x16, 0x2a, 0x5f,
	0x7f, 0x0a, 0xb2, 0x3d, 0x29, 0x5d, 0xd7, 0x93, 0xf2, 0x35, 0x3d, 0xa9, 0xbc, 0x52, 0x4f, 0xaa,
	0x57, 0xf7, 0xa4, 0xff, 0x35, 0xaa, 0x68, 0x94, 0x32, 0x77, 0x40, 0xcb, 0xd7, 0x1e, 0xd0, 0x4a,
	0xee, 0x80, 0xde, 0x41, 0x28, 0x75, 0x20, 0xcd, 0x04, 0x34, 0x64, 0x7c, 0x1a, 0xa3, 0x97, 0x78,
	0x21, 0x97, 0x86, 0xf4, 0xf0, 0x92, 0xc7, 0x5a, 0xec, 0x7f, 0x53, 0x44, 0x8d, 0x67, 0x8b, 0x29,
	0x31, 0x18, 0xde, 0x44, 0x65, 0xb5, 0x98, 0x12, 0xa8, 0x53, 0x3b, 0x37, 0xbc, 0xda, 0xcb, 0x01,
	0xb3, 0x3e, 0x26, 0xab, 0x9d, 0xdd, 0x72, 0x8c, 0x60, 0xbf, 0x87, 0x6e, 0xc6, 0xc7, 0x9a, 0x28,
	0x65, 0x06, 0x22, 0x7d, 0xb1, 0xb7, 0xa3, 0x8b, 0x9d, 0x18, 0x01, 0xdb, 0x3e, 0xda, 0xd2, 0x9b,
	0x31, 0x1f, 0x62, 0xde, 0xd0, 0xf5, 0xf1, 0xe2, 0xbf, 0xfe, 0x57, 0x6d, 0xde, 0xda, 0xff, 0xd9,
	0xbc, 0xf5, 0x2b, 0x37, 0xef, 0xaf, 0xc5, 0xe8, 0xcf, 0xce, 0x91, 0x5e, 0x08, 0x9f, 0xf0, 0x91,
	0x8e, 0x4d, 0x76, 0x61, 0x96, 0x42, 0xed, 0x58, 0xef, 0x18, 0x2a, 0xe9, 0x2c, 0xf1, 0x3e, 0x8a,
	0x3d, 0xcd, 0x41, 0x6b, 0xc7, 0xfa, 0xc8, 0xf3, 0x06, 0xaa, 0x52, 0xe9, 0xce, 0x29, 0x8b, 0xe6,
	0xbc, 0x42, 0xe5, 0x17, 0x94, 0xd9, 0x1f, 0xa3, 0xad, 0x98, 0x8b, 0xde, 0x18, 0xeb, 0xfd, 0x93,
	0xda, 0xa2, 0x3b, 0x71, 0x23, 0x72, 0xc3, 0xeb, 0x74, 0xa3, 0x98, 0xc7, 0x10, 0x02, 0x6c, 0x4f,
	0xb3, 0xb6, 0x92, 0x65, 0x6d, 0x76, 0xfb, 0x55, 0xf3, 0xdb, 0x2f, 0x43, 0xea, 0x5a, 0x8e, 0xd4,
	0x0f, 0xd0, 0x46, 0xc4, 0x4e, 0xc0, 0x55, 0x5f, 0xb7, 0xdd, 0x23, 0x0e, 0xeb, 0xdf, 0xc3, 0x33,
	0xb4, 0x05, 0x86, 0x53, 0xc2, 0x7c, 0x53, 0x68, 0xc8, 0x73, 0x17, 0x35, 0x33, 0xdd, 0xb0, 0xa0,
	0x1b, 0x1b, 0x22, 0xdb, 0x34, 0x49, 0x98, 0x1f, 0x77, 0x0d, 0xf0, 0x9a, 0xa3, 0xd5, 0x96, 0x99,
	0x8f, 0x0d, 0xbf, 0xb3, 0xd0, 0xa6, 0x19, 0xfb, 0x55, 0x82, 0x57, 0x64, 0xf1, 0x1a, 0xe6, 0x15,
	0xd7, 0x31, 0x6f, 0x3d, 0xbf, 0x4b, 0xeb, 0xf9, 0x7d, 0xef, 0x61, 0xf4, 0x2f, 0x49, 0x27, 0xb6,
	0x6d, 0xd4, 0x4e, 0x04, 0xf7, 0x84, 0x33, 0xd2, 0x29, 0xd8, 0x37, 0x50, 0x77, 0xa5, 0x7b, 0x42,
	0x02, 0x3c, 0x0b, 0x55, 0xc7, 0xfa, 0xf0, 0xd3, 0x97, 0x7f, 0x0e, 0x0a, 0x3f, 0x2e, 0x07, 0xd6,
	0xf3, 0xe5, 0xc0, 0x7a, 0xb1, 0x1c, 0x58, 0x7f, 0x2c, 0x07, 0xd6, 0x5f, 0xcb, 0x41, 0xe1, 0x9f,
	0xe5, 0xc0, 0xfa, 0xf6, 0x72, 0x50, 0x78, 0x7e, 0x39, 0xb0, 0x5e, 0x5c, 0x0e, 0x0a, 0x2f, 0x2f,
	0x07, 0x85, 0x2f, 0x5f, 0xf7, 0x38, 0x65, 0xef, 0x48, 0x22, 0x2e, 0x88, 0x38, 0xf0, 0xf8, 0x64,
	0xc2, 0xd9, 0x41, 0xfa, 0x9f, 0xfd, 0x59, 0x15, 0xa4, 0x77, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xcf, 0x8a, 0xf4, 0xaf, 0x2a, 0x0c, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRankData.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaData.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaHistory.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaDataElement.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankingSwapInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_Info.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_Infos.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRanking_TypeInfos.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaFightLog.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaSendRewardTime.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRewardTime.Get().(proto.Message)
	})
}

var poolArenaRankData = &sync.Pool{New: func() interface{} { return &ArenaRankData{} }}

func (m *ArenaRankData) ReleasePool() { m.Reset(); poolArenaRankData.Put(m); m = nil }

var poolArenaInfo = &sync.Pool{New: func() interface{} { return &ArenaInfo{} }}

func (m *ArenaInfo) ReleasePool() { m.Reset(); poolArenaInfo.Put(m); m = nil }

var poolArenaData = &sync.Pool{New: func() interface{} { return &ArenaData{} }}

func (m *ArenaData) ReleasePool() { m.Reset(); poolArenaData.Put(m); m = nil }

var poolArenaHistory = &sync.Pool{New: func() interface{} { return &ArenaHistory{} }}

func (m *ArenaHistory) ReleasePool() { m.Reset(); poolArenaHistory.Put(m); m = nil }

var poolArenaDataElement = &sync.Pool{New: func() interface{} { return &ArenaDataElement{} }}

func (m *ArenaDataElement) ReleasePool() { m.Reset(); poolArenaDataElement.Put(m); m = nil }

var poolRankingSwapInfo = &sync.Pool{New: func() interface{} { return &RankingSwapInfo{} }}

func (m *RankingSwapInfo) ReleasePool() { m.Reset(); poolRankingSwapInfo.Put(m); m = nil }

var poolArenaRanking = &sync.Pool{New: func() interface{} { return &ArenaRanking{} }}

func (m *ArenaRanking) ReleasePool() { m.Reset(); poolArenaRanking.Put(m); m = nil }

var poolArenaRanking_Info = &sync.Pool{New: func() interface{} { return &ArenaRanking_Info{} }}

func (m *ArenaRanking_Info) ReleasePool() { m.Reset(); poolArenaRanking_Info.Put(m); m = nil }

var poolArenaRanking_Infos = &sync.Pool{New: func() interface{} { return &ArenaRanking_Infos{} }}

func (m *ArenaRanking_Infos) ReleasePool() { m.Reset(); poolArenaRanking_Infos.Put(m); m = nil }

var poolArenaRanking_TypeInfos = &sync.Pool{New: func() interface{} { return &ArenaRanking_TypeInfos{} }}

func (m *ArenaRanking_TypeInfos) ReleasePool() { m.Reset(); poolArenaRanking_TypeInfos.Put(m); m = nil }

var poolArenaFightLog = &sync.Pool{New: func() interface{} { return &ArenaFightLog{} }}

func (m *ArenaFightLog) ReleasePool() { m.Reset(); poolArenaFightLog.Put(m); m = nil }

var poolArenaSendRewardTime = &sync.Pool{New: func() interface{} { return &ArenaSendRewardTime{} }}

func (m *ArenaSendRewardTime) ReleasePool() { m.Reset(); poolArenaSendRewardTime.Put(m); m = nil }

var poolArenaRewardTime = &sync.Pool{New: func() interface{} { return &ArenaRewardTime{} }}

func (m *ArenaRewardTime) ReleasePool() { m.Reset(); poolArenaRewardTime.Put(m); m = nil }
func (x ArenaType) String() string {
	s, ok := ArenaType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ArenaRankData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRankData)
	if !ok {
		that2, ok := that.(ArenaRankData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankId != that1.RankId {
		return false
	}
	if this.PlayerNum != that1.PlayerNum {
		return false
	}
	if this.RobotNum != that1.RobotNum {
		return false
	}
	if this.IsInit != that1.IsInit {
		return false
	}
	if this.SeasonStartTime != that1.SeasonStartTime {
		return false
	}
	return true
}
func (this *ArenaInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaInfo)
	if !ok {
		that2, ok := that.(ArenaInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.RankingId != that1.RankingId {
		return false
	}
	if this.GuildName != that1.GuildName {
		return false
	}
	if this.IsRobot != that1.IsRobot {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if this.HeroFashion != that1.HeroFashion {
		return false
	}
	return true
}
func (this *ArenaData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaData)
	if !ok {
		that2, ok := that.(ArenaData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FightHero.Equal(that1.FightHero) {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if this.LastRefreshTime != that1.LastRefreshTime {
		return false
	}
	if this.FreeChallengeTimes != that1.FreeChallengeTimes {
		return false
	}
	if this.LeftTicketPurchasesNum != that1.LeftTicketPurchasesNum {
		return false
	}
	if this.SeasonRewardIndex != that1.SeasonRewardIndex {
		return false
	}
	if this.DayRewardIndex != that1.DayRewardIndex {
		return false
	}
	return true
}
func (this *ArenaHistory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaHistory)
	if !ok {
		that2, ok := that.(ArenaHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AttackerInfo.Equal(that1.AttackerInfo) {
		return false
	}
	if this.AttackerOldRankingId != that1.AttackerOldRankingId {
		return false
	}
	if this.AttackerNewRankingId != that1.AttackerNewRankingId {
		return false
	}
	if !this.DefenderInfo.Equal(that1.DefenderInfo) {
		return false
	}
	if this.DefenderOldRankingId != that1.DefenderOldRankingId {
		return false
	}
	if this.DefenderNewRankingId != that1.DefenderNewRankingId {
		return false
	}
	if this.FightTime != that1.FightTime {
		return false
	}
	if this.ChallengeSuccess != that1.ChallengeSuccess {
		return false
	}
	return true
}
func (this *ArenaDataElement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaDataElement)
	if !ok {
		that2, ok := that.(ArenaDataElement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.RankingId != that1.RankingId {
		return false
	}
	if this.IsRobot != that1.IsRobot {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if this.IsFirstChallenge != that1.IsFirstChallenge {
		return false
	}
	return true
}
func (this *RankingSwapInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankingSwapInfo)
	if !ok {
		that2, ok := that.(RankingSwapInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Role_0OldRankingId != that1.Role_0OldRankingId {
		return false
	}
	if this.Role_0NewRankingId != that1.Role_0NewRankingId {
		return false
	}
	if this.Role_1OldRankingId != that1.Role_1OldRankingId {
		return false
	}
	if this.Role_1NewRankingId != that1.Role_1NewRankingId {
		return false
	}
	return true
}
func (this *ArenaRanking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking)
	if !ok {
		that2, ok := that.(ArenaRanking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ArenaRanking_Info) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_Info)
	if !ok {
		that2, ok := that.(ArenaRanking_Info)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.RankingId != that1.RankingId {
		return false
	}
	if this.IsRobot != that1.IsRobot {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if this.IsFirstChallenge != that1.IsFirstChallenge {
		return false
	}
	return true
}
func (this *ArenaRanking_Infos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_Infos)
	if !ok {
		that2, ok := that.(ArenaRanking_Infos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PlayerNum != that1.PlayerNum {
		return false
	}
	if this.RobotNum != that1.RobotNum {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.IsClose != that1.IsClose {
		return false
	}
	return true
}
func (this *ArenaRanking_TypeInfos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRanking_TypeInfos)
	if !ok {
		that2, ok := that.(ArenaRanking_TypeInfos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.SeasonSettlementTime != that1.SeasonSettlementTime {
		return false
	}
	if this.DaySettlementTime != that1.DaySettlementTime {
		return false
	}
	if this.SeasonRewardIndex != that1.SeasonRewardIndex {
		return false
	}
	if this.DayRewardIndex != that1.DayRewardIndex {
		return false
	}
	return true
}
func (this *ArenaFightLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaFightLog)
	if !ok {
		that2, ok := that.(ArenaFightLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackerRoleId != that1.AttackerRoleId {
		return false
	}
	if this.DefenderRoleId != that1.DefenderRoleId {
		return false
	}
	if this.IsWin != that1.IsWin {
		return false
	}
	if !this.RankingChangeInfo.Equal(that1.RankingChangeInfo) {
		return false
	}
	if this.IsRobot != that1.IsRobot {
		return false
	}
	if this.FightTime != that1.FightTime {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if !this.PlayerInfo.Equal(that1.PlayerInfo) {
		return false
	}
	return true
}
func (this *ArenaSendRewardTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaSendRewardTime)
	if !ok {
		that2, ok := that.(ArenaSendRewardTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardIndex != that1.RewardIndex {
		return false
	}
	if this.SendRewardTime != that1.SendRewardTime {
		return false
	}
	return true
}
func (this *ArenaRewardTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRewardTime)
	if !ok {
		that2, ok := that.(ArenaRewardTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DaySettlementTime != that1.DaySettlementTime {
		return false
	}
	if this.SeasonSettlementTime != that1.SeasonSettlementTime {
		return false
	}
	return true
}
func (m *ArenaRankData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRankData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRankData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonStartTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SeasonStartTime))
		i--
		dAtA[i] = 0x28
	}
	if m.IsInit {
		i--
		if m.IsInit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RobotNum != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RobotNum))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerNum != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.PlayerNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RankId) > 0 {
		i -= len(m.RankId)
		copy(dAtA[i:], m.RankId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HeroFashion != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.HeroFashion))
		i--
		dAtA[i] = 0x68
	}
	if m.HeroId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x60
	}
	if m.Score != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x58
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.GuildName) > 0 {
		i -= len(m.GuildName)
		copy(dAtA[i:], m.GuildName)
		i = encodeVarintArena(dAtA, i, uint64(len(m.GuildName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.RankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RankingId))
		i--
		dAtA[i] = 0x40
	}
	if m.Title != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x38
	}
	if m.Power != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintArena(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DayRewardIndex != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.DayRewardIndex))
		i--
		dAtA[i] = 0x38
	}
	if m.SeasonRewardIndex != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SeasonRewardIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.LeftTicketPurchasesNum != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.LeftTicketPurchasesNum))
		i--
		dAtA[i] = 0x28
	}
	if m.FreeChallengeTimes != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.FreeChallengeTimes))
		i--
		dAtA[i] = 0x20
	}
	if m.LastRefreshTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.LastRefreshTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.FightHero != nil {
		{
			size, err := m.FightHero.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSuccess {
		i--
		if m.ChallengeSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.FightTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.FightTime))
		i--
		dAtA[i] = 0x38
	}
	if m.DefenderNewRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.DefenderNewRankingId))
		i--
		dAtA[i] = 0x30
	}
	if m.DefenderOldRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.DefenderOldRankingId))
		i--
		dAtA[i] = 0x28
	}
	if m.DefenderInfo != nil {
		{
			size, err := m.DefenderInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AttackerNewRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.AttackerNewRankingId))
		i--
		dAtA[i] = 0x18
	}
	if m.AttackerOldRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.AttackerOldRankingId))
		i--
		dAtA[i] = 0x10
	}
	if m.AttackerInfo != nil {
		{
			size, err := m.AttackerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaDataElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaDataElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaDataElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFirstChallenge {
		i--
		if m.IsFirstChallenge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintArena(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RankingId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankingSwapInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankingSwapInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankingSwapInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Role_1NewRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Role_1NewRankingId))
		i--
		dAtA[i] = 0x20
	}
	if m.Role_1OldRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Role_1OldRankingId))
		i--
		dAtA[i] = 0x18
	}
	if m.Role_0NewRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Role_0NewRankingId))
		i--
		dAtA[i] = 0x10
	}
	if m.Role_0OldRankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Role_0OldRankingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFirstChallenge {
		i--
		if m.IsFirstChallenge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintArena(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RankingId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_Infos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_Infos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_Infos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsClose {
		i--
		if m.IsClose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.StartTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x30
	}
	if m.RobotNum != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RobotNum))
		i--
		dAtA[i] = 0x28
	}
	if m.PlayerNum != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.PlayerNum))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRanking_TypeInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRanking_TypeInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRanking_TypeInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DayRewardIndex != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.DayRewardIndex))
		i--
		dAtA[i] = 0x40
	}
	if m.SeasonRewardIndex != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SeasonRewardIndex))
		i--
		dAtA[i] = 0x38
	}
	if m.DaySettlementTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.DaySettlementTime))
		i--
		dAtA[i] = 0x30
	}
	if m.SeasonSettlementTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SeasonSettlementTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Index != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaFightLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaFightLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaFightLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerInfo != nil {
		{
			size, err := m.PlayerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintArena(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FightTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.FightTime))
		i--
		dAtA[i] = 0x30
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.RankingChangeInfo != nil {
		{
			size, err := m.RankingChangeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsWin {
		i--
		if m.IsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DefenderRoleId) > 0 {
		i -= len(m.DefenderRoleId)
		copy(dAtA[i:], m.DefenderRoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.DefenderRoleId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackerRoleId) > 0 {
		i -= len(m.AttackerRoleId)
		copy(dAtA[i:], m.AttackerRoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.AttackerRoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaSendRewardTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaSendRewardTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaSendRewardTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SendRewardTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SendRewardTime))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardIndex != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RewardIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRewardTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRewardTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRewardTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonSettlementTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.SeasonSettlementTime))
		i--
		dAtA[i] = 0x18
	}
	if m.DaySettlementTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.DaySettlementTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintArena(dAtA []byte, offset int, v uint64) int {
	offset -= sovArena(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *ArenaRankData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankId != "" {
		w.RawByte('"')
		w.RawString("rank_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankId)
		needWriteComma = true
	}
	if m.PlayerNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("player_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PlayerNum))
		needWriteComma = true
	}
	if m.RobotNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("robot_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RobotNum))
		needWriteComma = true
	}
	if m.IsInit {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_init")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsInit)
		needWriteComma = true
	}
	if m.SeasonStartTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season_start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SeasonStartTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.RankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankingId))
		needWriteComma = true
	}
	if m.GuildName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildName)
		needWriteComma = true
	}
	if m.IsRobot {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_robot")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRobot)
		needWriteComma = true
	}
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	if m.HeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if m.HeroFashion != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_fashion")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroFashion))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("fight_hero")
	w.RawByte('"')
	w.RawByte(':')
	m.FightHero.JsonBytes(w)
	needWriteComma = true
	if m.RankingIndex != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if m.LastRefreshTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastRefreshTime))
		needWriteComma = true
	}
	if m.FreeChallengeTimes != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("free_challenge_times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeChallengeTimes))
		needWriteComma = true
	}
	if m.LeftTicketPurchasesNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("left_ticket_purchases_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LeftTicketPurchasesNum))
		needWriteComma = true
	}
	if m.SeasonRewardIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season_reward_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.SeasonRewardIndex))
		needWriteComma = true
	}
	if m.DayRewardIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("day_reward_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.DayRewardIndex))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaHistory) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("attacker_info")
	w.RawByte('"')
	w.RawByte(':')
	m.AttackerInfo.JsonBytes(w)
	needWriteComma = true
	if m.AttackerOldRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_old_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackerOldRankingId))
		needWriteComma = true
	}
	if m.AttackerNewRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_new_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackerNewRankingId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("defender_info")
	w.RawByte('"')
	w.RawByte(':')
	m.DefenderInfo.JsonBytes(w)
	needWriteComma = true
	if m.DefenderOldRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_old_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DefenderOldRankingId))
		needWriteComma = true
	}
	if m.DefenderNewRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_new_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DefenderNewRankingId))
		needWriteComma = true
	}
	if m.FightTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("fight_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FightTime))
		needWriteComma = true
	}
	if m.ChallengeSuccess {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("challenge_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.ChallengeSuccess)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaDataElement) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.RankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankingId))
		needWriteComma = true
	}
	if m.IsRobot {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_robot")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRobot)
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	if m.IsFirstChallenge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_first_challenge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsFirstChallenge)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankingSwapInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Role_0OldRankingId != 0 {
		w.RawByte('"')
		w.RawString("role_0_old_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Role_0OldRankingId))
		needWriteComma = true
	}
	if m.Role_0NewRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_0_new_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Role_0NewRankingId))
		needWriteComma = true
	}
	if m.Role_1OldRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_1_old_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Role_1OldRankingId))
		needWriteComma = true
	}
	if m.Role_1NewRankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_1_new_ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Role_1NewRankingId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *ArenaRanking_Info) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.RankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankingId))
		needWriteComma = true
	}
	if m.IsRobot {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_robot")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRobot)
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	if m.IsFirstChallenge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_first_challenge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsFirstChallenge)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_Infos) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.PlayerNum != 0 {
		w.RawByte('"')
		w.RawString("player_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PlayerNum))
		needWriteComma = true
	}
	if m.RobotNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("robot_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RobotNum))
		needWriteComma = true
	}
	if m.StartTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartTime))
		needWriteComma = true
	}
	if m.IsClose {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_close")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsClose)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRanking_TypeInfos) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.Index != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("index")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.Index))
		needWriteComma = true
	}
	if m.SeasonSettlementTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season_settlement_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SeasonSettlementTime))
		needWriteComma = true
	}
	if m.DaySettlementTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("day_settlement_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DaySettlementTime))
		needWriteComma = true
	}
	if m.SeasonRewardIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season_reward_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.SeasonRewardIndex))
		needWriteComma = true
	}
	if m.DayRewardIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("day_reward_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.DayRewardIndex))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaFightLog) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackerRoleId != "" {
		w.RawByte('"')
		w.RawString("attacker_role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerRoleId)
		needWriteComma = true
	}
	if m.DefenderRoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DefenderRoleId)
		needWriteComma = true
	}
	if m.IsWin {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_win")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsWin)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("ranking_change_info")
	w.RawByte('"')
	w.RawByte(':')
	m.RankingChangeInfo.JsonBytes(w)
	needWriteComma = true
	if m.IsRobot {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_robot")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRobot)
		needWriteComma = true
	}
	if m.FightTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("fight_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FightTime))
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("player_info")
	w.RawByte('"')
	w.RawByte(':')
	m.PlayerInfo.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaSendRewardTime) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RewardIndex != 0 {
		w.RawByte('"')
		w.RawString("reward_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.RewardIndex))
		needWriteComma = true
	}
	if m.SendRewardTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("send_reward_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SendRewardTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRewardTime) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.DaySettlementTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("day_settlement_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DaySettlementTime))
		needWriteComma = true
	}
	if m.SeasonSettlementTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season_settlement_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SeasonSettlementTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRankData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRankData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRankData) GoString() string {
	return m.String()
}

func (m *ArenaInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaInfo) GoString() string {
	return m.String()
}

func (m *ArenaData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaData) GoString() string {
	return m.String()
}

func (m *ArenaHistory) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaHistory) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaHistory) GoString() string {
	return m.String()
}

func (m *ArenaDataElement) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaDataElement) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaDataElement) GoString() string {
	return m.String()
}

func (m *RankingSwapInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankingSwapInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankingSwapInfo) GoString() string {
	return m.String()
}

func (m *ArenaRanking) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking) GoString() string {
	return m.String()
}

func (m *ArenaRanking_Info) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_Info) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_Info) GoString() string {
	return m.String()
}

func (m *ArenaRanking_Infos) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_Infos) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_Infos) GoString() string {
	return m.String()
}

func (m *ArenaRanking_TypeInfos) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRanking_TypeInfos) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRanking_TypeInfos) GoString() string {
	return m.String()
}

func (m *ArenaFightLog) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaFightLog) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaFightLog) GoString() string {
	return m.String()
}

func (m *ArenaSendRewardTime) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaSendRewardTime) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaSendRewardTime) GoString() string {
	return m.String()
}

func (m *ArenaRewardTime) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRewardTime) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRewardTime) GoString() string {
	return m.String()
}

func (m *ArenaRankData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.PlayerNum != 0 {
		n += 1 + sovArena(uint64(m.PlayerNum))
	}
	if m.RobotNum != 0 {
		n += 1 + sovArena(uint64(m.RobotNum))
	}
	if m.IsInit {
		n += 2
	}
	if m.SeasonStartTime != 0 {
		n += 1 + sovArena(uint64(m.SeasonStartTime))
	}
	return n
}

func (m *ArenaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovArena(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovArena(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovArena(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovArena(uint64(m.Power))
	}
	if m.Title != 0 {
		n += 1 + sovArena(uint64(m.Title))
	}
	if m.RankingId != 0 {
		n += 1 + sovArena(uint64(m.RankingId))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.IsRobot {
		n += 2
	}
	if m.Score != 0 {
		n += 1 + sovArena(uint64(m.Score))
	}
	if m.HeroId != 0 {
		n += 1 + sovArena(uint64(m.HeroId))
	}
	if m.HeroFashion != 0 {
		n += 1 + sovArena(uint64(m.HeroFashion))
	}
	return n
}

func (m *ArenaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FightHero != nil {
		l = m.FightHero.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.LastRefreshTime != 0 {
		n += 1 + sovArena(uint64(m.LastRefreshTime))
	}
	if m.FreeChallengeTimes != 0 {
		n += 1 + sovArena(uint64(m.FreeChallengeTimes))
	}
	if m.LeftTicketPurchasesNum != 0 {
		n += 1 + sovArena(uint64(m.LeftTicketPurchasesNum))
	}
	if m.SeasonRewardIndex != 0 {
		n += 1 + sovArena(uint64(m.SeasonRewardIndex))
	}
	if m.DayRewardIndex != 0 {
		n += 1 + sovArena(uint64(m.DayRewardIndex))
	}
	return n
}

func (m *ArenaHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttackerInfo != nil {
		l = m.AttackerInfo.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	if m.AttackerOldRankingId != 0 {
		n += 1 + sovArena(uint64(m.AttackerOldRankingId))
	}
	if m.AttackerNewRankingId != 0 {
		n += 1 + sovArena(uint64(m.AttackerNewRankingId))
	}
	if m.DefenderInfo != nil {
		l = m.DefenderInfo.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	if m.DefenderOldRankingId != 0 {
		n += 1 + sovArena(uint64(m.DefenderOldRankingId))
	}
	if m.DefenderNewRankingId != 0 {
		n += 1 + sovArena(uint64(m.DefenderNewRankingId))
	}
	if m.FightTime != 0 {
		n += 1 + sovArena(uint64(m.FightTime))
	}
	if m.ChallengeSuccess {
		n += 2
	}
	return n
}

func (m *ArenaDataElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.RankingId != 0 {
		n += 1 + sovArena(uint64(m.RankingId))
	}
	if m.IsRobot {
		n += 2
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.IsFirstChallenge {
		n += 2
	}
	return n
}

func (m *RankingSwapInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role_0OldRankingId != 0 {
		n += 1 + sovArena(uint64(m.Role_0OldRankingId))
	}
	if m.Role_0NewRankingId != 0 {
		n += 1 + sovArena(uint64(m.Role_0NewRankingId))
	}
	if m.Role_1OldRankingId != 0 {
		n += 1 + sovArena(uint64(m.Role_1OldRankingId))
	}
	if m.Role_1NewRankingId != 0 {
		n += 1 + sovArena(uint64(m.Role_1NewRankingId))
	}
	return n
}

func (m *ArenaRanking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ArenaRanking_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.RankingId != 0 {
		n += 1 + sovArena(uint64(m.RankingId))
	}
	if m.IsRobot {
		n += 2
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.IsFirstChallenge {
		n += 2
	}
	return n
}

func (m *ArenaRanking_Infos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerNum != 0 {
		n += 1 + sovArena(uint64(m.PlayerNum))
	}
	if m.RobotNum != 0 {
		n += 1 + sovArena(uint64(m.RobotNum))
	}
	if m.StartTime != 0 {
		n += 1 + sovArena(uint64(m.StartTime))
	}
	if m.IsClose {
		n += 2
	}
	return n
}

func (m *ArenaRanking_TypeInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovArena(uint64(m.Index))
	}
	if m.SeasonSettlementTime != 0 {
		n += 1 + sovArena(uint64(m.SeasonSettlementTime))
	}
	if m.DaySettlementTime != 0 {
		n += 1 + sovArena(uint64(m.DaySettlementTime))
	}
	if m.SeasonRewardIndex != 0 {
		n += 1 + sovArena(uint64(m.SeasonRewardIndex))
	}
	if m.DayRewardIndex != 0 {
		n += 1 + sovArena(uint64(m.DayRewardIndex))
	}
	return n
}

func (m *ArenaFightLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackerRoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	l = len(m.DefenderRoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.IsWin {
		n += 2
	}
	if m.RankingChangeInfo != nil {
		l = m.RankingChangeInfo.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	if m.IsRobot {
		n += 2
	}
	if m.FightTime != 0 {
		n += 1 + sovArena(uint64(m.FightTime))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.PlayerInfo != nil {
		l = m.PlayerInfo.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaSendRewardTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardIndex != 0 {
		n += 1 + sovArena(uint64(m.RewardIndex))
	}
	if m.SendRewardTime != 0 {
		n += 1 + sovArena(uint64(m.SendRewardTime))
	}
	return n
}

func (m *ArenaRewardTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.DaySettlementTime != 0 {
		n += 1 + sovArena(uint64(m.DaySettlementTime))
	}
	if m.SeasonSettlementTime != 0 {
		n += 1 + sovArena(uint64(m.SeasonSettlementTime))
	}
	return n
}

func sovArena(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArena(x uint64) (n int) {
	return sovArena(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArenaRankData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRankData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRankData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerNum", wireType)
			}
			m.PlayerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotNum", wireType)
			}
			m.RobotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInit = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStartTime", wireType)
			}
			m.SeasonStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonStartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingId", wireType)
			}
			m.RankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroFashion", wireType)
			}
			m.HeroFashion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroFashion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightHero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FightHero == nil {
				m.FightHero = &Assemble{}
			}
			if err := m.FightHero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRefreshTime", wireType)
			}
			m.LastRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeChallengeTimes", wireType)
			}
			m.FreeChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeChallengeTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTicketPurchasesNum", wireType)
			}
			m.LeftTicketPurchasesNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTicketPurchasesNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonRewardIndex", wireType)
			}
			m.SeasonRewardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonRewardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayRewardIndex", wireType)
			}
			m.DayRewardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayRewardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttackerInfo == nil {
				m.AttackerInfo = &ArenaInfo{}
			}
			if err := m.AttackerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerOldRankingId", wireType)
			}
			m.AttackerOldRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerOldRankingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerNewRankingId", wireType)
			}
			m.AttackerNewRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerNewRankingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefenderInfo == nil {
				m.DefenderInfo = &ArenaInfo{}
			}
			if err := m.DefenderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderOldRankingId", wireType)
			}
			m.DefenderOldRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenderOldRankingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderNewRankingId", wireType)
			}
			m.DefenderNewRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenderNewRankingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightTime", wireType)
			}
			m.FightTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChallengeSuccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaDataElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaDataElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaDataElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingId", wireType)
			}
			m.RankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstChallenge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirstChallenge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankingSwapInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankingSwapInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankingSwapInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role_0OldRankingId", wireType)
			}
			m.Role_0OldRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role_0OldRankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role_0NewRankingId", wireType)
			}
			m.Role_0NewRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role_0NewRankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role_1OldRankingId", wireType)
			}
			m.Role_1OldRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role_1OldRankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role_1NewRankingId", wireType)
			}
			m.Role_1NewRankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role_1NewRankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRanking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRanking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingId", wireType)
			}
			m.RankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstChallenge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirstChallenge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_Infos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Infos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Infos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerNum", wireType)
			}
			m.PlayerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotNum", wireType)
			}
			m.RobotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobotNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsClose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsClose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRanking_TypeInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonSettlementTime", wireType)
			}
			m.SeasonSettlementTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonSettlementTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaySettlementTime", wireType)
			}
			m.DaySettlementTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaySettlementTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonRewardIndex", wireType)
			}
			m.SeasonRewardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonRewardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayRewardIndex", wireType)
			}
			m.DayRewardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayRewardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaFightLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaFightLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaFightLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerRoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerRoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderRoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefenderRoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWin = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingChangeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankingChangeInfo == nil {
				m.RankingChangeInfo = &RankingSwapInfo{}
			}
			if err := m.RankingChangeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightTime", wireType)
			}
			m.FightTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerInfo == nil {
				m.PlayerInfo = &ArenaInfo{}
			}
			if err := m.PlayerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaSendRewardTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaSendRewardTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaSendRewardTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIndex", wireType)
			}
			m.RewardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendRewardTime", wireType)
			}
			m.SendRewardTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendRewardTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRewardTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRewardTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRewardTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaySettlementTime", wireType)
			}
			m.DaySettlementTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaySettlementTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonSettlementTime", wireType)
			}
			m.SeasonSettlementTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonSettlementTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArena(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArena
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArena
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArena
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArena
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArena        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArena          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArena = fmt.Errorf("proto: unexpected end of group")
)
