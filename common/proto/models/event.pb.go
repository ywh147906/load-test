// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/event.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Icon   string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Banner string `protobuf:"bytes,3,opt,name=banner,proto3" json:"banner,omitempty"`
	Sort   int64  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e2ec56d65f96e5, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Event) GetBanner() string {
	if m != nil {
		return m.Banner
	}
	return ""
}

func (m *Event) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (*Event) XXX_MessageName() string {
	return "models.Event"
}

type EventConfig struct {
	Id                         int64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Reward                     []*EventConfig_RewardItem `protobuf:"bytes,2,rep,name=reward,proto3" json:"reward,omitempty"`
	ItemPictureId              string                    `protobuf:"bytes,3,opt,name=item_picture_id,json=itemPictureId,proto3" json:"item_picture_id,omitempty"`
	ActivityNameLanguageId     string                    `protobuf:"bytes,4,opt,name=activity_name_language_id,json=activityNameLanguageId,proto3" json:"activity_name_language_id,omitempty"`
	ActivityDescribeLanguageId string                    `protobuf:"bytes,5,opt,name=activity_describe_language_id,json=activityDescribeLanguageId,proto3" json:"activity_describe_language_id,omitempty"`
	ActivityIcon               string                    `protobuf:"bytes,6,opt,name=activity_icon,json=activityIcon,proto3" json:"activity_icon,omitempty"`
	ActivityBanner             string                    `protobuf:"bytes,7,opt,name=activity_banner,json=activityBanner,proto3" json:"activity_banner,omitempty"`
}

func (m *EventConfig) Reset()      { *m = EventConfig{} }
func (*EventConfig) ProtoMessage() {}
func (*EventConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e2ec56d65f96e5, []int{1}
}
func (m *EventConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventConfig.Merge(m, src)
}
func (m *EventConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventConfig proto.InternalMessageInfo

func (m *EventConfig) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventConfig) GetReward() []*EventConfig_RewardItem {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *EventConfig) GetItemPictureId() string {
	if m != nil {
		return m.ItemPictureId
	}
	return ""
}

func (m *EventConfig) GetActivityNameLanguageId() string {
	if m != nil {
		return m.ActivityNameLanguageId
	}
	return ""
}

func (m *EventConfig) GetActivityDescribeLanguageId() string {
	if m != nil {
		return m.ActivityDescribeLanguageId
	}
	return ""
}

func (m *EventConfig) GetActivityIcon() string {
	if m != nil {
		return m.ActivityIcon
	}
	return ""
}

func (m *EventConfig) GetActivityBanner() string {
	if m != nil {
		return m.ActivityBanner
	}
	return ""
}

func (*EventConfig) XXX_MessageName() string {
	return "models.EventConfig"
}

type EventConfig_RewardItem struct {
	RewardItem []int64 `protobuf:"varint,1,rep,packed,name=reward_item,json=rewardItem,proto3" json:"reward_item,omitempty"`
}

func (m *EventConfig_RewardItem) Reset()      { *m = EventConfig_RewardItem{} }
func (*EventConfig_RewardItem) ProtoMessage() {}
func (*EventConfig_RewardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e2ec56d65f96e5, []int{1, 0}
}
func (m *EventConfig_RewardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventConfig_RewardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventConfig_RewardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventConfig_RewardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventConfig_RewardItem.Merge(m, src)
}
func (m *EventConfig_RewardItem) XXX_Size() int {
	return m.Size()
}
func (m *EventConfig_RewardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_EventConfig_RewardItem.DiscardUnknown(m)
}

var xxx_messageInfo_EventConfig_RewardItem proto.InternalMessageInfo

func (m *EventConfig_RewardItem) GetRewardItem() []int64 {
	if m != nil {
		return m.RewardItem
	}
	return nil
}

func (*EventConfig_RewardItem) XXX_MessageName() string {
	return "models.EventConfig.RewardItem"
}
func init() {
	proto.RegisterType((*Event)(nil), "models.Event")
	proto.RegisterType((*EventConfig)(nil), "models.EventConfig")
	proto.RegisterType((*EventConfig_RewardItem)(nil), "models.EventConfig.RewardItem")
}

func init() { proto.RegisterFile("proto/models/event.proto", fileDescriptor_d4e2ec56d65f96e5) }

var fileDescriptor_d4e2ec56d65f96e5 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x3f, 0xeb, 0xd3, 0x40,
	0x18, 0xc7, 0x73, 0x49, 0x7f, 0x11, 0x9f, 0xfa, 0x6b, 0xe1, 0x86, 0x12, 0x0b, 0x5e, 0x43, 0x05,
	0xcd, 0xd2, 0x04, 0x14, 0x04, 0x47, 0xab, 0x0e, 0x01, 0x15, 0xc9, 0x22, 0xb8, 0x84, 0x34, 0x77,
	0x96, 0x83, 0xe6, 0xae, 0x5c, 0xae, 0x15, 0xdf, 0x85, 0x2f, 0xc3, 0x97, 0xd2, 0xb1, 0x63, 0x47,
	0x4d, 0x16, 0x47, 0x47, 0x47, 0xc9, 0xe5, 0x8f, 0x15, 0xb7, 0xbb, 0x4f, 0x3e, 0xdf, 0x87, 0x27,
	0x5f, 0x0e, 0xbc, 0xbd, 0x92, 0x5a, 0x46, 0x85, 0xa4, 0x6c, 0x57, 0x46, 0xec, 0xc8, 0x84, 0x0e,
	0x0d, 0xc2, 0x6e, 0xcb, 0x96, 0x1f, 0xe0, 0xe6, 0x75, 0x83, 0xf1, 0x04, 0x6c, 0x4e, 0x3d, 0xe4,
	0xa3, 0xc0, 0x49, 0x6c, 0x4e, 0x31, 0x86, 0x11, 0xcf, 0xa5, 0xf0, 0x6c, 0x1f, 0x05, 0x77, 0x13,
	0x73, 0xc6, 0x33, 0x70, 0x37, 0x99, 0x10, 0x4c, 0x79, 0x8e, 0xa1, 0xdd, 0xad, 0x71, 0x4b, 0xa9,
	0xb4, 0x37, 0x32, 0x69, 0x73, 0x5e, 0xfe, 0xb6, 0x61, 0x6c, 0x26, 0xbf, 0x94, 0xe2, 0x13, 0xdf,
	0xfe, 0x37, 0xff, 0x19, 0xb8, 0x8a, 0x7d, 0xce, 0x14, 0xf5, 0x6c, 0xdf, 0x09, 0xc6, 0x4f, 0x48,
	0xd8, 0x6e, 0x14, 0x5e, 0x85, 0xc2, 0xc4, 0x18, 0xb1, 0x66, 0x45, 0xd2, 0xd9, 0xf8, 0x11, 0x4c,
	0xb9, 0x66, 0x45, 0xba, 0xe7, 0xb9, 0x3e, 0x28, 0x96, 0x72, 0xda, 0x2d, 0x73, 0xdb, 0xe0, 0xf7,
	0x2d, 0x8d, 0x29, 0x7e, 0x0e, 0xf7, 0xb3, 0x5c, 0xf3, 0x23, 0xd7, 0x5f, 0x52, 0x91, 0x15, 0x2c,
	0xdd, 0x65, 0x62, 0x7b, 0xc8, 0xb6, 0x26, 0x31, 0x32, 0x89, 0x59, 0x2f, 0xbc, 0xcb, 0x0a, 0xf6,
	0xa6, 0xfb, 0x1c, 0x53, 0xfc, 0x02, 0x1e, 0x0c, 0x51, 0xca, 0xca, 0x5c, 0xf1, 0xcd, 0xbf, 0xf1,
	0x1b, 0x13, 0x9f, 0xf7, 0xd2, 0xab, 0xce, 0xb9, 0x1a, 0xf1, 0x10, 0x6e, 0x87, 0x11, 0xa6, 0x46,
	0xd7, 0x44, 0xee, 0xf5, 0x30, 0x6e, 0xea, 0x7c, 0x0c, 0xd3, 0x41, 0xea, 0x7a, 0xbd, 0x63, 0xb4,
	0x49, 0x8f, 0xd7, 0x86, 0xce, 0x57, 0x00, 0x7f, 0x9b, 0xc0, 0x0b, 0x18, 0xb7, 0x5d, 0xa4, 0xcd,
	0x1f, 0x7b, 0xc8, 0x77, 0x02, 0x27, 0x01, 0x35, 0x08, 0xeb, 0xb7, 0x97, 0x1f, 0xc4, 0xfa, 0x56,
	0x11, 0x74, 0xaa, 0x08, 0x3a, 0x57, 0x04, 0x7d, 0xaf, 0x08, 0xfa, 0x59, 0x11, 0xeb, 0x57, 0x45,
	0xd0, 0xd7, 0x9a, 0x58, 0xa7, 0x9a, 0xa0, 0x73, 0x4d, 0xac, 0x4b, 0x4d, 0xac, 0x8f, 0x8b, 0x5c,
	0x72, 0xb1, 0x2a, 0x99, 0x3a, 0x32, 0x15, 0xe5, 0xb2, 0x28, 0xa4, 0x88, 0xae, 0x9f, 0xcd, 0xc6,
	0x35, 0xb7, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x50, 0xf7, 0x06, 0x4d, 0x02, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEventConfig.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEventConfig_RewardItem.Get().(proto.Message)
	})
}

var poolEvent = &sync.Pool{New: func() interface{} { return &Event{} }}

func (m *Event) ReleasePool() { m.Reset(); poolEvent.Put(m); m = nil }

var poolEventConfig = &sync.Pool{New: func() interface{} { return &EventConfig{} }}

func (m *EventConfig) ReleasePool() { m.Reset(); poolEventConfig.Put(m); m = nil }

var poolEventConfig_RewardItem = &sync.Pool{New: func() interface{} { return &EventConfig_RewardItem{} }}

func (m *EventConfig_RewardItem) ReleasePool() { m.Reset(); poolEventConfig_RewardItem.Put(m); m = nil }
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.Banner != that1.Banner {
		return false
	}
	if this.Sort != that1.Sort {
		return false
	}
	return true
}
func (this *EventConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventConfig)
	if !ok {
		that2, ok := that.(EventConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if !this.Reward[i].Equal(that1.Reward[i]) {
			return false
		}
	}
	if this.ItemPictureId != that1.ItemPictureId {
		return false
	}
	if this.ActivityNameLanguageId != that1.ActivityNameLanguageId {
		return false
	}
	if this.ActivityDescribeLanguageId != that1.ActivityDescribeLanguageId {
		return false
	}
	if this.ActivityIcon != that1.ActivityIcon {
		return false
	}
	if this.ActivityBanner != that1.ActivityBanner {
		return false
	}
	return true
}
func (this *EventConfig_RewardItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventConfig_RewardItem)
	if !ok {
		that2, ok := that.(EventConfig_RewardItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RewardItem) != len(that1.RewardItem) {
		return false
	}
	for i := range this.RewardItem {
		if this.RewardItem[i] != that1.RewardItem[i] {
			return false
		}
	}
	return true
}
func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sort != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Banner) > 0 {
		i -= len(m.Banner)
		copy(dAtA[i:], m.Banner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Banner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActivityBanner) > 0 {
		i -= len(m.ActivityBanner)
		copy(dAtA[i:], m.ActivityBanner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ActivityBanner)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ActivityIcon) > 0 {
		i -= len(m.ActivityIcon)
		copy(dAtA[i:], m.ActivityIcon)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ActivityIcon)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ActivityDescribeLanguageId) > 0 {
		i -= len(m.ActivityDescribeLanguageId)
		copy(dAtA[i:], m.ActivityDescribeLanguageId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ActivityDescribeLanguageId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ActivityNameLanguageId) > 0 {
		i -= len(m.ActivityNameLanguageId)
		copy(dAtA[i:], m.ActivityNameLanguageId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ActivityNameLanguageId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ItemPictureId) > 0 {
		i -= len(m.ItemPictureId)
		copy(dAtA[i:], m.ItemPictureId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ItemPictureId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventConfig_RewardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventConfig_RewardItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventConfig_RewardItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardItem) > 0 {
		dAtA2 := make([]byte, len(m.RewardItem)*10)
		var j1 int
		for _, num1 := range m.RewardItem {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvent(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Event) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Icon != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("icon")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Icon)
		needWriteComma = true
	}
	if m.Banner != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("banner")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Banner)
		needWriteComma = true
	}
	if m.Sort != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sort")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Sort))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EventConfig) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Reward {
			v.JsonBytes(w)
			if i != len(m.Reward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.ItemPictureId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("item_picture_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ItemPictureId)
		needWriteComma = true
	}
	if m.ActivityNameLanguageId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_name_language_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ActivityNameLanguageId)
		needWriteComma = true
	}
	if m.ActivityDescribeLanguageId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_describe_language_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ActivityDescribeLanguageId)
		needWriteComma = true
	}
	if m.ActivityIcon != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_icon")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ActivityIcon)
		needWriteComma = true
	}
	if m.ActivityBanner != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_banner")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ActivityBanner)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EventConfig_RewardItem) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("reward_item")
	w.RawByte('"')
	w.RawByte(':')
	if m.RewardItem == nil {
		w.RawString("null")
	} else if len(m.RewardItem) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RewardItem {
			w.Int64(int64(v))
			if i != len(m.RewardItem)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Event) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Event) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Event) GoString() string {
	return m.String()
}

func (m *EventConfig) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EventConfig) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EventConfig) GoString() string {
	return m.String()
}

func (m *EventConfig_RewardItem) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EventConfig_RewardItem) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EventConfig_RewardItem) GoString() string {
	return m.String()
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Banner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovEvent(uint64(m.Sort))
	}
	return n
}

func (m *EventConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.ItemPictureId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ActivityNameLanguageId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ActivityDescribeLanguageId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ActivityIcon)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ActivityBanner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventConfig_RewardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardItem) > 0 {
		l = 0
		for _, e := range m.RewardItem {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, &EventConfig_RewardItem{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemPictureId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemPictureId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityNameLanguageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityNameLanguageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityDescribeLanguageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityDescribeLanguageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityBanner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityBanner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventConfig_RewardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardItem = append(m.RewardItem, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RewardItem) == 0 {
					m.RewardItem = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardItem = append(m.RewardItem, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItem", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
