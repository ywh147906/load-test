// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/announcement.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Announcement struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BeginTime int64  `protobuf:"varint,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime   int64  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	StoreUrl  string `protobuf:"bytes,4,opt,name=store_url,json=storeUrl,proto3" json:"store_url,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ShowLogin bool   `protobuf:"varint,6,opt,name=show_login,json=showLogin,proto3" json:"show_login,omitempty"`
	Countdown int64  `protobuf:"varint,7,opt,name=countdown,proto3" json:"countdown,omitempty"`
}

func (m *Announcement) Reset()      { *m = Announcement{} }
func (*Announcement) ProtoMessage() {}
func (*Announcement) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee4664750651b53, []int{0}
}
func (m *Announcement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Announcement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Announcement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Announcement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Announcement.Merge(m, src)
}
func (m *Announcement) XXX_Size() int {
	return m.Size()
}
func (m *Announcement) XXX_DiscardUnknown() {
	xxx_messageInfo_Announcement.DiscardUnknown(m)
}

var xxx_messageInfo_Announcement proto.InternalMessageInfo

func (m *Announcement) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Announcement) GetBeginTime() int64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *Announcement) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Announcement) GetStoreUrl() string {
	if m != nil {
		return m.StoreUrl
	}
	return ""
}

func (m *Announcement) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Announcement) GetShowLogin() bool {
	if m != nil {
		return m.ShowLogin
	}
	return false
}

func (m *Announcement) GetCountdown() int64 {
	if m != nil {
		return m.Countdown
	}
	return 0
}

func (*Announcement) XXX_MessageName() string {
	return "models.Announcement"
}
func init() {
	proto.RegisterType((*Announcement)(nil), "models.Announcement")
}

func init() { proto.RegisterFile("proto/models/announcement.proto", fileDescriptor_4ee4664750651b53) }

var fileDescriptor_4ee4664750651b53 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd0, 0x31, 0x4e, 0xfb, 0x30,
	0x14, 0xc7, 0xf1, 0xb8, 0xfd, 0xff, 0xdb, 0xc6, 0x42, 0x0c, 0x9e, 0x8c, 0x00, 0xb7, 0x62, 0xca,
	0x02, 0x19, 0x38, 0x01, 0xcc, 0xb0, 0x44, 0xb0, 0xb0, 0x44, 0x34, 0x7e, 0x2a, 0x96, 0xe2, 0xf7,
	0x90, 0xe3, 0xd0, 0x6b, 0x70, 0x0c, 0x8e, 0xd2, 0x81, 0xa1, 0x63, 0x47, 0x70, 0x16, 0x46, 0x8e,
	0x80, 0xe2, 0x08, 0xd4, 0xf1, 0xf7, 0xfd, 0x48, 0xb6, 0x65, 0x3e, 0x7f, 0x76, 0xe4, 0x29, 0xb7,
	0xa4, 0xa1, 0x6e, 0xf2, 0x47, 0x44, 0x6a, 0xb1, 0x02, 0x0b, 0xe8, 0x2f, 0xa2, 0x88, 0xc9, 0x40,
	0x67, 0xef, 0x8c, 0x1f, 0x5c, 0xed, 0xb1, 0x38, 0xe4, 0x23, 0xa3, 0x25, 0x5b, 0xb0, 0x2c, 0x2d,
	0x46, 0x46, 0x8b, 0x53, 0xce, 0x97, 0xb0, 0x32, 0x58, 0x7a, 0x63, 0x41, 0x8e, 0x16, 0x2c, 0x1b,
	0x17, 0x69, 0x2c, 0x77, 0xc6, 0x82, 0x38, 0xe2, 0x33, 0x40, 0x3d, 0xe0, 0x38, 0xe2, 0x14, 0x50,
	0x47, 0x3a, 0xe6, 0x69, 0xe3, 0xc9, 0x41, 0xd9, 0xba, 0x5a, 0xfe, 0x8b, 0x07, 0xce, 0x62, 0xb8,
	0x77, 0xb5, 0x90, 0x7c, 0x5a, 0x11, 0x7a, 0x40, 0x2f, 0xff, 0x47, 0xfa, 0x9d, 0xfd, 0x85, 0xcd,
	0x13, 0xad, 0xcb, 0x9a, 0x56, 0x06, 0xe5, 0x64, 0xc1, 0xb2, 0x59, 0x91, 0xf6, 0xe5, 0xa6, 0x0f,
	0xe2, 0x84, 0xa7, 0x15, 0xb5, 0xe8, 0x35, 0xad, 0x51, 0x4e, 0x87, 0xe7, 0xfc, 0x85, 0xeb, 0xdb,
	0xdd, 0xa7, 0x4a, 0xde, 0x82, 0x62, 0x9b, 0xa0, 0xd8, 0x36, 0x28, 0xf6, 0x11, 0x14, 0xfb, 0x0a,
	0x2a, 0xf9, 0x0e, 0x8a, 0xbd, 0x76, 0x2a, 0xd9, 0x74, 0x8a, 0x6d, 0x3b, 0x95, 0xec, 0x3a, 0x95,
	0x3c, 0xcc, 0x2b, 0x32, 0x78, 0xde, 0x80, 0x7b, 0x01, 0x97, 0x57, 0x64, 0x2d, 0x61, 0xbe, 0xff,
	0x71, 0xcb, 0x49, 0x5c, 0x97, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x23, 0x83, 0xaf, 0x4f,
	0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAnnouncement.Get().(proto.Message)
	})
}

var poolAnnouncement = &sync.Pool{New: func() interface{} { return &Announcement{} }}

func (m *Announcement) ReleasePool() { m.Reset(); poolAnnouncement.Put(m); m = nil }
func (this *Announcement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Announcement)
	if !ok {
		that2, ok := that.(Announcement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.BeginTime != that1.BeginTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.StoreUrl != that1.StoreUrl {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.ShowLogin != that1.ShowLogin {
		return false
	}
	if this.Countdown != that1.Countdown {
		return false
	}
	return true
}
func (m *Announcement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Announcement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Announcement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Countdown != 0 {
		i = encodeVarintAnnouncement(dAtA, i, uint64(m.Countdown))
		i--
		dAtA[i] = 0x38
	}
	if m.ShowLogin {
		i--
		if m.ShowLogin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintAnnouncement(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StoreUrl) > 0 {
		i -= len(m.StoreUrl)
		copy(dAtA[i:], m.StoreUrl)
		i = encodeVarintAnnouncement(dAtA, i, uint64(len(m.StoreUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndTime != 0 {
		i = encodeVarintAnnouncement(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.BeginTime != 0 {
		i = encodeVarintAnnouncement(dAtA, i, uint64(m.BeginTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAnnouncement(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAnnouncement(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnnouncement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Announcement) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.BeginTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("begin_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BeginTime))
		needWriteComma = true
	}
	if m.EndTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	if m.StoreUrl != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("store_url")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.StoreUrl)
		needWriteComma = true
	}
	if m.Content != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("content")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Content)
		needWriteComma = true
	}
	if m.ShowLogin {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("show_login")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.ShowLogin)
		needWriteComma = true
	}
	if m.Countdown != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("countdown")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Countdown))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Announcement) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Announcement) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Announcement) GoString() string {
	return m.String()
}

func (m *Announcement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAnnouncement(uint64(l))
	}
	if m.BeginTime != 0 {
		n += 1 + sovAnnouncement(uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovAnnouncement(uint64(m.EndTime))
	}
	l = len(m.StoreUrl)
	if l > 0 {
		n += 1 + l + sovAnnouncement(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovAnnouncement(uint64(l))
	}
	if m.ShowLogin {
		n += 2
	}
	if m.Countdown != 0 {
		n += 1 + sovAnnouncement(uint64(m.Countdown))
	}
	return n
}

func sovAnnouncement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnnouncement(x uint64) (n int) {
	return sovAnnouncement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Announcement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnnouncement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Announcement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Announcement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnouncement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnouncement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnouncement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnouncement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnouncement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnouncement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnouncement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnouncement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnouncement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnouncement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnouncement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnouncement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowLogin = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countdown", wireType)
			}
			m.Countdown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnouncement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Countdown |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnnouncement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnnouncement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnnouncement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnnouncement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnouncement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnouncement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnnouncement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnnouncement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnnouncement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnnouncement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnnouncement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnnouncement = fmt.Errorf("proto: unexpected end of group")
)
