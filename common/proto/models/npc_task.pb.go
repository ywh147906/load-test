// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/npc_task.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NpcTask struct {
	TaskId      int64           `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NpcId       int64           `protobuf:"varint,2,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	Progress    map[int64]int64 `protobuf:"bytes,3,rep,name=progress,proto3" json:"progress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Finish      map[int64]bool  `protobuf:"bytes,4,rep,name=finish,proto3" json:"finish,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Status      TaskStatus      `protobuf:"varint,5,opt,name=status,proto3,enum=models.TaskStatus" json:"status,omitempty"`
	LastRefresh int64           `protobuf:"varint,6,opt,name=last_refresh,json=lastRefresh,proto3" json:"last_refresh,omitempty"`
	AcceptTime  int64           `protobuf:"varint,7,opt,name=accept_time,json=acceptTime,proto3" json:"accept_time,omitempty"`
}

func (m *NpcTask) Reset()      { *m = NpcTask{} }
func (*NpcTask) ProtoMessage() {}
func (*NpcTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_93577ae94b5b8f23, []int{0}
}
func (m *NpcTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask.Merge(m, src)
}
func (m *NpcTask) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask proto.InternalMessageInfo

func (m *NpcTask) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *NpcTask) GetNpcId() int64 {
	if m != nil {
		return m.NpcId
	}
	return 0
}

func (m *NpcTask) GetProgress() map[int64]int64 {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *NpcTask) GetFinish() map[int64]bool {
	if m != nil {
		return m.Finish
	}
	return nil
}

func (m *NpcTask) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_NotStarted
}

func (m *NpcTask) GetLastRefresh() int64 {
	if m != nil {
		return m.LastRefresh
	}
	return 0
}

func (m *NpcTask) GetAcceptTime() int64 {
	if m != nil {
		return m.AcceptTime
	}
	return 0
}

func (*NpcTask) XXX_MessageName() string {
	return "models.NpcTask"
}

type NpcTaskUnlock struct {
	Achieve  map[int64]bool `protobuf:"bytes,1,rep,name=achieve,proto3" json:"achieve,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsUnlock bool           `protobuf:"varint,2,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
}

func (m *NpcTaskUnlock) Reset()      { *m = NpcTaskUnlock{} }
func (*NpcTaskUnlock) ProtoMessage() {}
func (*NpcTaskUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_93577ae94b5b8f23, []int{1}
}
func (m *NpcTaskUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTaskUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTaskUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTaskUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTaskUnlock.Merge(m, src)
}
func (m *NpcTaskUnlock) XXX_Size() int {
	return m.Size()
}
func (m *NpcTaskUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTaskUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTaskUnlock proto.InternalMessageInfo

func (m *NpcTaskUnlock) GetAchieve() map[int64]bool {
	if m != nil {
		return m.Achieve
	}
	return nil
}

func (m *NpcTaskUnlock) GetIsUnlock() bool {
	if m != nil {
		return m.IsUnlock
	}
	return false
}

func (*NpcTaskUnlock) XXX_MessageName() string {
	return "models.NpcTaskUnlock"
}
func init() {
	proto.RegisterType((*NpcTask)(nil), "models.NpcTask")
	proto.RegisterMapType((map[int64]bool)(nil), "models.NpcTask.FinishEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "models.NpcTask.ProgressEntry")
	proto.RegisterType((*NpcTaskUnlock)(nil), "models.NpcTaskUnlock")
	proto.RegisterMapType((map[int64]bool)(nil), "models.NpcTaskUnlock.AchieveEntry")
}

func init() { proto.RegisterFile("proto/models/npc_task.proto", fileDescriptor_93577ae94b5b8f23) }

var fileDescriptor_93577ae94b5b8f23 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0x85, 0xa6, 0xe5, 0x75, 0x43, 0xc8, 0x02, 0x61, 0xb5, 0xc2, 0x2b, 0x3d, 0x55,
	0x48, 0xa4, 0xd2, 0x76, 0x61, 0x83, 0x0b, 0x48, 0x20, 0xed, 0x00, 0x42, 0x65, 0x5c, 0xb8, 0x44,
	0xc1, 0xf1, 0xa8, 0xd5, 0xc6, 0x8e, 0x6c, 0xa7, 0xd2, 0xbe, 0x05, 0x7c, 0x09, 0xc4, 0x47, 0xd9,
	0x71, 0xc7, 0x1d, 0x21, 0xb9, 0x70, 0xe4, 0x23, 0xa0, 0xd8, 0x29, 0xca, 0x76, 0x41, 0xdc, 0xf2,
	0xfe, 0xef, 0xff, 0x7b, 0xef, 0xe5, 0x2f, 0xc3, 0xb8, 0xd0, 0xca, 0xaa, 0x79, 0xae, 0x32, 0xbe,
	0x36, 0x73, 0x59, 0xb0, 0xc4, 0xa6, 0x66, 0x15, 0x3b, 0x15, 0x47, 0x5e, 0x1e, 0x91, 0x6b, 0x26,
	0x2e, 0xcb, 0xdc, 0x78, 0xc7, 0xf4, 0x6b, 0x08, 0xfd, 0xb7, 0x05, 0x3b, 0x4d, 0xcd, 0x0a, 0x3f,
	0x80, 0x7e, 0xc3, 0x26, 0x22, 0x23, 0x68, 0x82, 0x66, 0xe1, 0x22, 0x6a, 0xca, 0x93, 0x0c, 0xdf,
	0x87, 0xa8, 0x19, 0x2c, 0x32, 0xb2, 0xe3, 0xf4, 0x9e, 0x2c, 0xd8, 0x49, 0x86, 0x8f, 0x60, 0x50,
	0x68, 0xf5, 0x59, 0x73, 0x63, 0x48, 0x38, 0x09, 0x67, 0xc3, 0x83, 0x87, 0xb1, 0x5f, 0x11, 0xb7,
	0x23, 0xe3, 0x77, 0x6d, 0xff, 0x95, 0xb4, 0xfa, 0x7c, 0xf1, 0xd7, 0x8e, 0x0f, 0x21, 0x3a, 0x13,
	0x52, 0x98, 0x25, 0xb9, 0xe5, 0xc0, 0xf1, 0x4d, 0xf0, 0xb5, 0xeb, 0x7a, 0xac, 0xb5, 0xe2, 0xc7,
	0x10, 0x19, 0x9b, 0xda, 0xd2, 0x90, 0xde, 0x04, 0xcd, 0xee, 0x1c, 0xe0, 0x2d, 0xd4, 0x10, 0xef,
	0x5d, 0x67, 0xd1, 0x3a, 0xf0, 0x23, 0xd8, 0x5d, 0xa7, 0xc6, 0x26, 0x9a, 0x9f, 0x69, 0x6e, 0x96,
	0x24, 0x72, 0x87, 0x0f, 0x1b, 0x6d, 0xe1, 0x25, 0xbc, 0x0f, 0xc3, 0x94, 0x31, 0x5e, 0xd8, 0xc4,
	0x8a, 0x9c, 0x93, 0xbe, 0x73, 0x80, 0x97, 0x4e, 0x45, 0xce, 0x47, 0xcf, 0x60, 0xef, 0xda, 0xfd,
	0xf8, 0x2e, 0x84, 0x2b, 0x7e, 0xde, 0x86, 0xd3, 0x7c, 0xe2, 0x7b, 0xd0, 0xdb, 0xa4, 0xeb, 0x92,
	0x6f, 0x83, 0x71, 0xc5, 0xf1, 0xce, 0x53, 0x34, 0x3a, 0x82, 0x61, 0xe7, 0x1f, 0xfe, 0x85, 0x0e,
	0x3a, 0xe8, 0xf4, 0x1b, 0x82, 0xbd, 0x36, 0x87, 0x0f, 0x72, 0xad, 0xd8, 0x0a, 0x3f, 0x87, 0x7e,
	0xca, 0x96, 0x82, 0x6f, 0x38, 0x41, 0x2e, 0xaf, 0xe9, 0x8d, 0xbc, 0xbc, 0x2f, 0x7e, 0xe1, 0x4d,
	0x3e, 0xb6, 0x2d, 0x82, 0xc7, 0x70, 0x5b, 0x98, 0xa4, 0x74, 0x96, 0x76, 0xdb, 0x40, 0x18, 0x8f,
	0x8c, 0x8e, 0x61, 0xb7, 0x4b, 0xfd, 0xcf, 0xa1, 0x2f, 0xdf, 0x5c, 0xfd, 0xa4, 0xc1, 0xf7, 0x8a,
	0xa2, 0x8b, 0x8a, 0xa2, 0xcb, 0x8a, 0xa2, 0x1f, 0x15, 0x45, 0xbf, 0x2a, 0x1a, 0xfc, 0xae, 0x28,
	0xfa, 0x52, 0xd3, 0xe0, 0xa2, 0xa6, 0xe8, 0xb2, 0xa6, 0xc1, 0x55, 0x4d, 0x83, 0x8f, 0xfb, 0x4c,
	0x09, 0xf9, 0xc4, 0x70, 0xbd, 0xe1, 0x7a, 0xce, 0x54, 0x9e, 0x2b, 0x39, 0xef, 0xbe, 0xcb, 0x4f,
	0x91, 0xab, 0x0e, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x92, 0x4e, 0xe2, 0xcd, 0xd3, 0x02, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTaskUnlock.Get().(proto.Message)
	})
}

var poolNpcTask = &sync.Pool{New: func() interface{} { return &NpcTask{} }}

func (m *NpcTask) ReleasePool() { m.Reset(); poolNpcTask.Put(m); m = nil }

var poolNpcTaskUnlock = &sync.Pool{New: func() interface{} { return &NpcTaskUnlock{} }}

func (m *NpcTaskUnlock) ReleasePool() { m.Reset(); poolNpcTaskUnlock.Put(m); m = nil }
func (this *NpcTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask)
	if !ok {
		that2, ok := that.(NpcTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.NpcId != that1.NpcId {
		return false
	}
	if len(this.Progress) != len(that1.Progress) {
		return false
	}
	for i := range this.Progress {
		if this.Progress[i] != that1.Progress[i] {
			return false
		}
	}
	if len(this.Finish) != len(that1.Finish) {
		return false
	}
	for i := range this.Finish {
		if this.Finish[i] != that1.Finish[i] {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	if this.LastRefresh != that1.LastRefresh {
		return false
	}
	if this.AcceptTime != that1.AcceptTime {
		return false
	}
	return true
}
func (this *NpcTaskUnlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTaskUnlock)
	if !ok {
		that2, ok := that.(NpcTaskUnlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Achieve) != len(that1.Achieve) {
		return false
	}
	for i := range this.Achieve {
		if this.Achieve[i] != that1.Achieve[i] {
			return false
		}
	}
	if this.IsUnlock != that1.IsUnlock {
		return false
	}
	return true
}
func (m *NpcTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceptTime != 0 {
		i = encodeVarintNpcTask(dAtA, i, uint64(m.AcceptTime))
		i--
		dAtA[i] = 0x38
	}
	if m.LastRefresh != 0 {
		i = encodeVarintNpcTask(dAtA, i, uint64(m.LastRefresh))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintNpcTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Finish) > 0 {
		for k := range m.Finish {
			v := m.Finish[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintNpcTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNpcTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Progress) > 0 {
		for k := range m.Progress {
			v := m.Progress[k]
			baseI := i
			i = encodeVarintNpcTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintNpcTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNpcTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NpcId != 0 {
		i = encodeVarintNpcTask(dAtA, i, uint64(m.NpcId))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintNpcTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NpcTaskUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTaskUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTaskUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsUnlock {
		i--
		if m.IsUnlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Achieve) > 0 {
		for k := range m.Achieve {
			v := m.Achieve[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintNpcTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNpcTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNpcTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovNpcTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *NpcTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.NpcId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("npc_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NpcId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("progress")
	w.RawByte('"')
	w.RawByte(':')
	if m.Progress == nil {
		w.RawString("null")
	} else if len(m.Progress) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlProgress := len(m.Progress)
		for k, v := range m.Progress {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlProgress--
			if mlProgress != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("finish")
	w.RawByte('"')
	w.RawByte(':')
	if m.Finish == nil {
		w.RawString("null")
	} else if len(m.Finish) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlFinish := len(m.Finish)
		for k, v := range m.Finish {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlFinish--
			if mlFinish != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.LastRefresh != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_refresh")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastRefresh))
		needWriteComma = true
	}
	if m.AcceptTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("accept_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AcceptTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTaskUnlock) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("achieve")
	w.RawByte('"')
	w.RawByte(':')
	if m.Achieve == nil {
		w.RawString("null")
	} else if len(m.Achieve) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAchieve := len(m.Achieve)
		for k, v := range m.Achieve {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlAchieve--
			if mlAchieve != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.IsUnlock {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_unlock")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsUnlock)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask) GoString() string {
	return m.String()
}

func (m *NpcTaskUnlock) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTaskUnlock) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTaskUnlock) GoString() string {
	return m.String()
}

func (m *NpcTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovNpcTask(uint64(m.TaskId))
	}
	if m.NpcId != 0 {
		n += 1 + sovNpcTask(uint64(m.NpcId))
	}
	if len(m.Progress) > 0 {
		for k, v := range m.Progress {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNpcTask(uint64(k)) + 1 + sovNpcTask(uint64(v))
			n += mapEntrySize + 1 + sovNpcTask(uint64(mapEntrySize))
		}
	}
	if len(m.Finish) > 0 {
		for k, v := range m.Finish {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNpcTask(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovNpcTask(uint64(mapEntrySize))
		}
	}
	if m.Status != 0 {
		n += 1 + sovNpcTask(uint64(m.Status))
	}
	if m.LastRefresh != 0 {
		n += 1 + sovNpcTask(uint64(m.LastRefresh))
	}
	if m.AcceptTime != 0 {
		n += 1 + sovNpcTask(uint64(m.AcceptTime))
	}
	return n
}

func (m *NpcTaskUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Achieve) > 0 {
		for k, v := range m.Achieve {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNpcTask(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovNpcTask(uint64(mapEntrySize))
		}
	}
	if m.IsUnlock {
		n += 2
	}
	return n
}

func sovNpcTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNpcTask(x uint64) (n int) {
	return sovNpcTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NpcTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NpcTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NpcTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			m.NpcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NpcId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNpcTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNpcTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNpcTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Progress[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finish", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finish == nil {
				m.Finish = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNpcTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNpcTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNpcTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Finish[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRefresh", wireType)
			}
			m.LastRefresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRefresh |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptTime", wireType)
			}
			m.AcceptTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AcceptTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTaskUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NpcTaskUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NpcTaskUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achieve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Achieve == nil {
				m.Achieve = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNpcTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNpcTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNpcTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Achieve[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUnlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUnlock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNpcTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNpcTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNpcTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNpcTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNpcTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNpcTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNpcTask = fmt.Errorf("proto: unexpected end of group")
)
