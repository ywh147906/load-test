// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/guild.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 公会
type Guild struct {
	Id               string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Flag             int64             `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
	Lang             int64             `protobuf:"varint,5,opt,name=lang,proto3" json:"lang,omitempty"`
	Intro            string            `protobuf:"bytes,6,opt,name=intro,proto3" json:"intro,omitempty"`
	Notice           string            `protobuf:"bytes,7,opt,name=notice,proto3" json:"notice,omitempty"`
	AutoJoin         bool              `protobuf:"varint,8,opt,name=auto_join,json=autoJoin,proto3" json:"auto_join,omitempty"`
	Level            int64             `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`
	Exp              int64             `protobuf:"varint,10,opt,name=exp,proto3" json:"exp,omitempty"`
	Resources        map[int64]int64   `protobuf:"bytes,11,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CombatValue      int64             `protobuf:"varint,12,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	Count            int64             `protobuf:"varint,13,opt,name=count,proto3" json:"count,omitempty"`
	Greeting         string            `protobuf:"bytes,14,opt,name=greeting,proto3" json:"greeting,omitempty"`
	PositionName     map[int64]string  `protobuf:"bytes,15,rep,name=position_name,json=positionName,proto3" json:"position_name,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorldInvite      *GuildWorldInvite `protobuf:"bytes,16,opt,name=world_invite,json=worldInvite,proto3" json:"world_invite,omitempty"`
	ActiveValue      int64             `protobuf:"varint,17,opt,name=active_value,json=activeValue,proto3" json:"active_value,omitempty"`
	CombatValueLimit int64             `protobuf:"varint,18,opt,name=combat_value_limit,json=combatValueLimit,proto3" json:"combat_value_limit,omitempty"`
	InviteMsg        string            `protobuf:"bytes,19,opt,name=invite_msg,json=inviteMsg,proto3" json:"invite_msg,omitempty"`
}

func (m *Guild) Reset()      { *m = Guild{} }
func (*Guild) ProtoMessage() {}
func (*Guild) Descriptor() ([]byte, []int) {
	return fileDescriptor_7839610a2fc3da91, []int{0}
}
func (m *Guild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Guild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Guild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Guild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guild.Merge(m, src)
}
func (m *Guild) XXX_Size() int {
	return m.Size()
}
func (m *Guild) XXX_DiscardUnknown() {
	xxx_messageInfo_Guild.DiscardUnknown(m)
}

var xxx_messageInfo_Guild proto.InternalMessageInfo

func (m *Guild) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Guild) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Guild) GetFlag() int64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *Guild) GetLang() int64 {
	if m != nil {
		return m.Lang
	}
	return 0
}

func (m *Guild) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *Guild) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

func (m *Guild) GetAutoJoin() bool {
	if m != nil {
		return m.AutoJoin
	}
	return false
}

func (m *Guild) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Guild) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Guild) GetResources() map[int64]int64 {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Guild) GetCombatValue() int64 {
	if m != nil {
		return m.CombatValue
	}
	return 0
}

func (m *Guild) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Guild) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func (m *Guild) GetPositionName() map[int64]string {
	if m != nil {
		return m.PositionName
	}
	return nil
}

func (m *Guild) GetWorldInvite() *GuildWorldInvite {
	if m != nil {
		return m.WorldInvite
	}
	return nil
}

func (m *Guild) GetActiveValue() int64 {
	if m != nil {
		return m.ActiveValue
	}
	return 0
}

func (m *Guild) GetCombatValueLimit() int64 {
	if m != nil {
		return m.CombatValueLimit
	}
	return 0
}

func (m *Guild) GetInviteMsg() string {
	if m != nil {
		return m.InviteMsg
	}
	return ""
}

func (*Guild) XXX_MessageName() string {
	return "models.Guild"
}

type GuildMember struct {
	RoleId           string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ServerId         int64  `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Position         int64  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	JoinAt           int64  `protobuf:"varint,4,opt,name=join_at,json=joinAt,proto3" json:"join_at,omitempty"`
	LoginAt          int64  `protobuf:"varint,5,opt,name=login_at,json=loginAt,proto3" json:"login_at,omitempty"`
	LogoutAt         int64  `protobuf:"varint,6,opt,name=logout_at,json=logoutAt,proto3" json:"logout_at,omitempty"`
	Name             string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Level            int64  `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	CombatValue      int64  `protobuf:"varint,9,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	ActiveValue      int64  `protobuf:"varint,10,opt,name=active_value,json=activeValue,proto3" json:"active_value,omitempty"`
	TotalActiveValue int64  `protobuf:"varint,11,opt,name=total_active_value,json=totalActiveValue,proto3" json:"total_active_value,omitempty"`
	Lang             int64  `protobuf:"varint,12,opt,name=lang,proto3" json:"lang,omitempty"`
	AvatarId         int64  `protobuf:"varint,13,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame      int64  `protobuf:"varint,14,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
}

func (m *GuildMember) Reset()      { *m = GuildMember{} }
func (*GuildMember) ProtoMessage() {}
func (*GuildMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_7839610a2fc3da91, []int{1}
}
func (m *GuildMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildMember.Merge(m, src)
}
func (m *GuildMember) XXX_Size() int {
	return m.Size()
}
func (m *GuildMember) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildMember.DiscardUnknown(m)
}

var xxx_messageInfo_GuildMember proto.InternalMessageInfo

func (m *GuildMember) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildMember) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *GuildMember) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *GuildMember) GetJoinAt() int64 {
	if m != nil {
		return m.JoinAt
	}
	return 0
}

func (m *GuildMember) GetLoginAt() int64 {
	if m != nil {
		return m.LoginAt
	}
	return 0
}

func (m *GuildMember) GetLogoutAt() int64 {
	if m != nil {
		return m.LogoutAt
	}
	return 0
}

func (m *GuildMember) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildMember) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildMember) GetCombatValue() int64 {
	if m != nil {
		return m.CombatValue
	}
	return 0
}

func (m *GuildMember) GetActiveValue() int64 {
	if m != nil {
		return m.ActiveValue
	}
	return 0
}

func (m *GuildMember) GetTotalActiveValue() int64 {
	if m != nil {
		return m.TotalActiveValue
	}
	return 0
}

func (m *GuildMember) GetLang() int64 {
	if m != nil {
		return m.Lang
	}
	return 0
}

func (m *GuildMember) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *GuildMember) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (*GuildMember) XXX_MessageName() string {
	return "models.GuildMember"
}

type GuildApply struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ServerId    int64  `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ApplyAt     int64  `protobuf:"varint,4,opt,name=apply_at,json=applyAt,proto3" json:"apply_at,omitempty"`
	LoginAt     int64  `protobuf:"varint,5,opt,name=login_at,json=loginAt,proto3" json:"login_at,omitempty"`
	LogoutAt    int64  `protobuf:"varint,6,opt,name=logout_at,json=logoutAt,proto3" json:"logout_at,omitempty"`
	CombatValue int64  `protobuf:"varint,7,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	Lang        int64  `protobuf:"varint,8,opt,name=lang,proto3" json:"lang,omitempty"`
	Level       int64  `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId    int64  `protobuf:"varint,10,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame int64  `protobuf:"varint,11,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
}

func (m *GuildApply) Reset()      { *m = GuildApply{} }
func (*GuildApply) ProtoMessage() {}
func (*GuildApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7839610a2fc3da91, []int{2}
}
func (m *GuildApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildApply.Merge(m, src)
}
func (m *GuildApply) XXX_Size() int {
	return m.Size()
}
func (m *GuildApply) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildApply.DiscardUnknown(m)
}

var xxx_messageInfo_GuildApply proto.InternalMessageInfo

func (m *GuildApply) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildApply) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *GuildApply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildApply) GetApplyAt() int64 {
	if m != nil {
		return m.ApplyAt
	}
	return 0
}

func (m *GuildApply) GetLoginAt() int64 {
	if m != nil {
		return m.LoginAt
	}
	return 0
}

func (m *GuildApply) GetLogoutAt() int64 {
	if m != nil {
		return m.LogoutAt
	}
	return 0
}

func (m *GuildApply) GetCombatValue() int64 {
	if m != nil {
		return m.CombatValue
	}
	return 0
}

func (m *GuildApply) GetLang() int64 {
	if m != nil {
		return m.Lang
	}
	return 0
}

func (m *GuildApply) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildApply) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *GuildApply) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (*GuildApply) XXX_MessageName() string {
	return "models.GuildApply"
}

type GuildInvite struct {
	RoleId           string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	LoginAt          int64  `protobuf:"varint,2,opt,name=login_at,json=loginAt,proto3" json:"login_at,omitempty"`
	LogoutAt         int64  `protobuf:"varint,3,opt,name=logout_at,json=logoutAt,proto3" json:"logout_at,omitempty"`
	Name             string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Level            int64  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	CombatValue      int64  `protobuf:"varint,6,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	ActiveValue      int64  `protobuf:"varint,7,opt,name=active_value,json=activeValue,proto3" json:"active_value,omitempty"`
	TotalActiveValue int64  `protobuf:"varint,8,opt,name=total_active_value,json=totalActiveValue,proto3" json:"total_active_value,omitempty"`
	Lang             int64  `protobuf:"varint,9,opt,name=lang,proto3" json:"lang,omitempty"`
	AvatarId         int64  `protobuf:"varint,10,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame      int64  `protobuf:"varint,11,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
}

func (m *GuildInvite) Reset()      { *m = GuildInvite{} }
func (*GuildInvite) ProtoMessage() {}
func (*GuildInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_7839610a2fc3da91, []int{3}
}
func (m *GuildInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildInvite.Merge(m, src)
}
func (m *GuildInvite) XXX_Size() int {
	return m.Size()
}
func (m *GuildInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildInvite.DiscardUnknown(m)
}

var xxx_messageInfo_GuildInvite proto.InternalMessageInfo

func (m *GuildInvite) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildInvite) GetLoginAt() int64 {
	if m != nil {
		return m.LoginAt
	}
	return 0
}

func (m *GuildInvite) GetLogoutAt() int64 {
	if m != nil {
		return m.LogoutAt
	}
	return 0
}

func (m *GuildInvite) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildInvite) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildInvite) GetCombatValue() int64 {
	if m != nil {
		return m.CombatValue
	}
	return 0
}

func (m *GuildInvite) GetActiveValue() int64 {
	if m != nil {
		return m.ActiveValue
	}
	return 0
}

func (m *GuildInvite) GetTotalActiveValue() int64 {
	if m != nil {
		return m.TotalActiveValue
	}
	return 0
}

func (m *GuildInvite) GetLang() int64 {
	if m != nil {
		return m.Lang
	}
	return 0
}

func (m *GuildInvite) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *GuildInvite) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (*GuildInvite) XXX_MessageName() string {
	return "models.GuildInvite"
}

// 公会建设
type GuildBuild struct {
	FreeCount int64 `protobuf:"varint,1,opt,name=free_count,json=freeCount,proto3" json:"free_count,omitempty"`
	PayCount  int64 `protobuf:"varint,2,opt,name=pay_count,json=payCount,proto3" json:"pay_count,omitempty"`
	ResetTime int64 `protobuf:"varint,3,opt,name=reset_time,json=resetTime,proto3" json:"reset_time,omitempty"`
}

func (m *GuildBuild) Reset()      { *m = GuildBuild{} }
func (*GuildBuild) ProtoMessage() {}
func (*GuildBuild) Descriptor() ([]byte, []int) {
	return fileDescriptor_7839610a2fc3da91, []int{4}
}
func (m *GuildBuild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBuild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBuild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBuild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBuild.Merge(m, src)
}
func (m *GuildBuild) XXX_Size() int {
	return m.Size()
}
func (m *GuildBuild) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBuild.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBuild proto.InternalMessageInfo

func (m *GuildBuild) GetFreeCount() int64 {
	if m != nil {
		return m.FreeCount
	}
	return 0
}

func (m *GuildBuild) GetPayCount() int64 {
	if m != nil {
		return m.PayCount
	}
	return 0
}

func (m *GuildBuild) GetResetTime() int64 {
	if m != nil {
		return m.ResetTime
	}
	return 0
}

func (*GuildBuild) XXX_MessageName() string {
	return "models.GuildBuild"
}

type GuildWorldInvite struct {
	Free      int64 `protobuf:"varint,1,opt,name=free,proto3" json:"free,omitempty"`
	Pay       int64 `protobuf:"varint,2,opt,name=pay,proto3" json:"pay,omitempty"`
	ResetTime int64 `protobuf:"varint,3,opt,name=reset_time,json=resetTime,proto3" json:"reset_time,omitempty"`
}

func (m *GuildWorldInvite) Reset()      { *m = GuildWorldInvite{} }
func (*GuildWorldInvite) ProtoMessage() {}
func (*GuildWorldInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_7839610a2fc3da91, []int{5}
}
func (m *GuildWorldInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildWorldInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildWorldInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildWorldInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildWorldInvite.Merge(m, src)
}
func (m *GuildWorldInvite) XXX_Size() int {
	return m.Size()
}
func (m *GuildWorldInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildWorldInvite.DiscardUnknown(m)
}

var xxx_messageInfo_GuildWorldInvite proto.InternalMessageInfo

func (m *GuildWorldInvite) GetFree() int64 {
	if m != nil {
		return m.Free
	}
	return 0
}

func (m *GuildWorldInvite) GetPay() int64 {
	if m != nil {
		return m.Pay
	}
	return 0
}

func (m *GuildWorldInvite) GetResetTime() int64 {
	if m != nil {
		return m.ResetTime
	}
	return 0
}

func (*GuildWorldInvite) XXX_MessageName() string {
	return "models.GuildWorldInvite"
}

type BlessingQueue struct {
	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Duration int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	DoneTime int64 `protobuf:"varint,3,opt,name=done_time,json=doneTime,proto3" json:"done_time,omitempty"`
}

func (m *BlessingQueue) Reset()      { *m = BlessingQueue{} }
func (*BlessingQueue) ProtoMessage() {}
func (*BlessingQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_7839610a2fc3da91, []int{6}
}
func (m *BlessingQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlessingQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlessingQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlessingQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlessingQueue.Merge(m, src)
}
func (m *BlessingQueue) XXX_Size() int {
	return m.Size()
}
func (m *BlessingQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_BlessingQueue.DiscardUnknown(m)
}

var xxx_messageInfo_BlessingQueue proto.InternalMessageInfo

func (m *BlessingQueue) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BlessingQueue) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *BlessingQueue) GetDoneTime() int64 {
	if m != nil {
		return m.DoneTime
	}
	return 0
}

func (*BlessingQueue) XXX_MessageName() string {
	return "models.BlessingQueue"
}

type BlessingEfficItem struct {
	Effic     int64 `protobuf:"varint,2,opt,name=effic,proto3" json:"effic,omitempty"`
	ExpiredAt int64 `protobuf:"varint,3,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
}

func (m *BlessingEfficItem) Reset()      { *m = BlessingEfficItem{} }
func (*BlessingEfficItem) ProtoMessage() {}
func (*BlessingEfficItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7839610a2fc3da91, []int{7}
}
func (m *BlessingEfficItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlessingEfficItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlessingEfficItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlessingEfficItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlessingEfficItem.Merge(m, src)
}
func (m *BlessingEfficItem) XXX_Size() int {
	return m.Size()
}
func (m *BlessingEfficItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BlessingEfficItem.DiscardUnknown(m)
}

var xxx_messageInfo_BlessingEfficItem proto.InternalMessageInfo

func (m *BlessingEfficItem) GetEffic() int64 {
	if m != nil {
		return m.Effic
	}
	return 0
}

func (m *BlessingEfficItem) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (*BlessingEfficItem) XXX_MessageName() string {
	return "models.BlessingEfficItem"
}
func init() {
	proto.RegisterType((*Guild)(nil), "models.Guild")
	proto.RegisterMapType((map[int64]string)(nil), "models.Guild.PositionNameEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "models.Guild.ResourcesEntry")
	proto.RegisterType((*GuildMember)(nil), "models.GuildMember")
	proto.RegisterType((*GuildApply)(nil), "models.GuildApply")
	proto.RegisterType((*GuildInvite)(nil), "models.GuildInvite")
	proto.RegisterType((*GuildBuild)(nil), "models.GuildBuild")
	proto.RegisterType((*GuildWorldInvite)(nil), "models.GuildWorldInvite")
	proto.RegisterType((*BlessingQueue)(nil), "models.BlessingQueue")
	proto.RegisterType((*BlessingEfficItem)(nil), "models.BlessingEfficItem")
}

func init() { proto.RegisterFile("proto/models/guild.proto", fileDescriptor_7839610a2fc3da91) }

var fileDescriptor_7839610a2fc3da91 = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x6f, 0xe3, 0x54,
	0x10, 0xaf, 0xe3, 0x26, 0xb1, 0x27, 0x69, 0x69, 0x0d, 0x82, 0xb7, 0x5d, 0xea, 0x0d, 0x3d, 0xe5,
	0x00, 0xad, 0xb4, 0x5c, 0xd0, 0x82, 0x84, 0x52, 0x58, 0x20, 0x88, 0x22, 0x88, 0x10, 0x8b, 0xb8,
	0x58, 0x6e, 0x3c, 0xb1, 0x1e, 0xd8, 0x7e, 0x96, 0xfd, 0x92, 0xdd, 0x7c, 0x0b, 0x3e, 0x03, 0x27,
	0x3e, 0x01, 0x9f, 0x61, 0xb9, 0xf5, 0xb8, 0x47, 0x48, 0x2f, 0x1c, 0xf9, 0x08, 0x68, 0xe6, 0x39,
	0xa9, 0xd3, 0x3f, 0x1b, 0xb4, 0xdc, 0xde, 0xfc, 0xe6, 0x65, 0x3c, 0xf3, 0x9b, 0xdf, 0xcc, 0x0b,
	0x88, 0xbc, 0x50, 0x5a, 0x9d, 0xa4, 0x2a, 0xc2, 0xa4, 0x3c, 0x89, 0xa7, 0x32, 0x89, 0x8e, 0x19,
	0xf2, 0x5a, 0x06, 0x3b, 0xfa, 0xa3, 0x09, 0xcd, 0xcf, 0x09, 0xf7, 0x76, 0xa1, 0x21, 0x23, 0x61,
	0xf5, 0xac, 0xbe, 0x3b, 0x6a, 0xc8, 0xc8, 0xf3, 0x60, 0x3b, 0x0b, 0x53, 0x14, 0x36, 0x23, 0x7c,
	0x26, 0x6c, 0x92, 0x84, 0xb1, 0xd8, 0xee, 0x59, 0x7d, 0x7b, 0xc4, 0x67, 0xc2, 0x92, 0x30, 0x8b,
	0x45, 0xd3, 0x60, 0x74, 0xf6, 0xde, 0x80, 0xa6, 0xcc, 0x74, 0xa1, 0x44, 0x8b, 0x7f, 0x6c, 0x0c,
	0xef, 0x4d, 0x68, 0x65, 0x4a, 0xcb, 0x31, 0x8a, 0x36, 0xc3, 0x95, 0xe5, 0xdd, 0x07, 0x37, 0x9c,
	0x6a, 0x15, 0xfc, 0xa4, 0x64, 0x26, 0x9c, 0x9e, 0xd5, 0x77, 0x46, 0x0e, 0x01, 0x5f, 0x2a, 0x99,
	0x51, 0xa8, 0x04, 0x67, 0x98, 0x08, 0x97, 0xe3, 0x1b, 0xc3, 0xdb, 0x03, 0x1b, 0x9f, 0xe5, 0x02,
	0x18, 0xa3, 0xa3, 0xf7, 0x08, 0xdc, 0x02, 0x4b, 0x35, 0x2d, 0xc6, 0x58, 0x8a, 0x4e, 0xcf, 0xee,
	0x77, 0x1e, 0xbe, 0x7d, 0x6c, 0x8a, 0x3c, 0xe6, 0x02, 0x8f, 0x47, 0x4b, 0xf7, 0xe3, 0x4c, 0x17,
	0xf3, 0xd1, 0xd5, 0x75, 0xef, 0x1d, 0xe8, 0x8e, 0x55, 0x7a, 0x1e, 0xea, 0x60, 0x16, 0x26, 0x53,
	0x14, 0x5d, 0x0e, 0xdb, 0x31, 0xd8, 0xf7, 0x04, 0x51, 0x1a, 0x63, 0x35, 0xcd, 0xb4, 0xd8, 0x31,
	0x69, 0xb0, 0xe1, 0x1d, 0x80, 0x13, 0x17, 0x88, 0x5a, 0x66, 0xb1, 0xd8, 0xe5, 0x9a, 0x56, 0xb6,
	0xf7, 0x29, 0xec, 0xe4, 0xaa, 0x94, 0x5a, 0xaa, 0x2c, 0x60, 0x22, 0x5f, 0xe3, 0xa4, 0x1e, 0xac,
	0x27, 0xf5, 0x4d, 0x75, 0xe5, 0xeb, 0x30, 0x45, 0x93, 0x57, 0x37, 0xaf, 0x41, 0xde, 0x87, 0xd0,
	0x7d, 0xaa, 0x8a, 0x24, 0x0a, 0x64, 0x36, 0x93, 0x1a, 0xc5, 0x5e, 0xcf, 0xea, 0x77, 0x1e, 0x8a,
	0xb5, 0x20, 0x4f, 0xe8, 0xc2, 0x90, 0xfd, 0xa3, 0xce, 0xd3, 0x2b, 0x83, 0xea, 0x0a, 0xc7, 0x5a,
	0xce, 0xb0, 0xaa, 0x6b, 0xdf, 0xd4, 0x65, 0x30, 0x53, 0xd7, 0xbb, 0xe0, 0xd5, 0x4b, 0x0f, 0x12,
	0x99, 0x4a, 0x2d, 0x3c, 0xbe, 0xb8, 0x57, 0x23, 0xe0, 0x2b, 0xc2, 0xbd, 0x43, 0x00, 0x93, 0x47,
	0x90, 0x96, 0xb1, 0x78, 0x9d, 0x2b, 0x76, 0x0d, 0x72, 0x56, 0xc6, 0x07, 0x1f, 0xc1, 0xee, 0x3a,
	0xc9, 0xd4, 0xa7, 0x9f, 0x71, 0xce, 0xaa, 0xb2, 0x47, 0x74, 0x24, 0x22, 0x4d, 0x32, 0x0d, 0x43,
	0x24, 0x1b, 0x8f, 0x1a, 0x1f, 0x58, 0x07, 0x1f, 0xc3, 0xfe, 0x0d, 0x36, 0x36, 0x05, 0x70, 0x6b,
	0x01, 0x8e, 0x7e, 0xb5, 0xa1, 0xc3, 0x84, 0x9c, 0x61, 0x7a, 0x8e, 0x85, 0xf7, 0x16, 0xb4, 0x0b,
	0x95, 0x60, 0xb0, 0x92, 0x75, 0x8b, 0xcc, 0x61, 0x44, 0x82, 0x2b, 0xb1, 0x98, 0x61, 0x41, 0x2e,
	0x93, 0x87, 0x63, 0x80, 0x61, 0x44, 0x3d, 0x5d, 0x76, 0x80, 0xb5, 0x6f, 0x8f, 0x56, 0x36, 0x45,
	0x24, 0x91, 0x06, 0xa1, 0xae, 0x46, 0xa0, 0x45, 0xe6, 0x40, 0x7b, 0xf7, 0xc0, 0x49, 0x54, 0x6c,
	0x3c, 0x66, 0x10, 0xda, 0x6c, 0x0f, 0x34, 0x7d, 0x2c, 0x51, 0xb1, 0x9a, 0x6a, 0xf2, 0xb5, 0x4c,
	0x40, 0x03, 0x0c, 0xf4, 0x6a, 0xc8, 0xda, 0xb5, 0x21, 0x5b, 0x29, 0xde, 0xa9, 0x2b, 0xfe, 0xba,
	0x46, 0xdd, 0x9b, 0x1a, 0xbd, 0xde, 0x6e, 0xb8, 0xb5, 0xdd, 0x5a, 0xe9, 0x30, 0x09, 0xd6, 0x2e,
	0x76, 0x4c, 0xbb, 0xd9, 0x33, 0xa8, 0xdd, 0x5e, 0x8e, 0x76, 0xb7, 0x36, 0xda, 0x34, 0xac, 0xb3,
	0x50, 0x87, 0xcc, 0x9d, 0x19, 0x06, 0xc7, 0x00, 0xc3, 0x88, 0x33, 0x30, 0xce, 0x49, 0x41, 0x65,
	0xed, 0x56, 0x19, 0x30, 0xf6, 0x19, 0x41, 0x47, 0xbf, 0x37, 0x00, 0xb8, 0x49, 0x83, 0x3c, 0x4f,
	0xe6, 0xaf, 0xd8, 0xa3, 0xdb, 0x76, 0xd3, 0x3d, 0x70, 0x42, 0x0a, 0x79, 0xd5, 0x9c, 0x36, 0xdb,
	0xff, 0xa3, 0x3b, 0xd7, 0x39, 0x6f, 0xdf, 0xe4, 0x7c, 0x49, 0x91, 0xb3, 0xbe, 0xfd, 0x6e, 0x59,
	0x59, 0x6b, 0xc4, 0xc1, 0x06, 0xe2, 0x3a, 0x37, 0x89, 0xbb, 0x68, 0x54, 0xea, 0xae, 0x86, 0xfb,
	0x4e, 0xe6, 0xea, 0xd5, 0x36, 0x5e, 0x52, 0xad, 0x7d, 0x87, 0x16, 0xb7, 0x6f, 0xd3, 0x62, 0xf3,
	0x65, 0x5a, 0x6c, 0x6d, 0xd6, 0x62, 0xfb, 0xbf, 0x6a, 0xd1, 0xd9, 0xa0, 0x45, 0xf7, 0x2e, 0x2d,
	0xbe, 0x02, 0xa5, 0x71, 0x25, 0xc5, 0x53, 0x7e, 0x00, 0x0f, 0x01, 0x26, 0x05, 0x62, 0x60, 0xf6,
	0xbc, 0xd9, 0x38, 0x2e, 0x21, 0x9f, 0xf0, 0xae, 0xbf, 0x0f, 0x6e, 0x1e, 0xce, 0x2b, 0x6f, 0x25,
	0xc8, 0x3c, 0x9c, 0x1b, 0xe7, 0x21, 0x40, 0x81, 0x25, 0xea, 0x40, 0xcb, 0x4a, 0x96, 0x36, 0x3f,
	0x30, 0xa8, 0xbf, 0x93, 0x29, 0x1e, 0x3d, 0x81, 0xbd, 0xeb, 0x9b, 0x9a, 0xdf, 0xd2, 0x02, 0xb1,
	0xfa, 0x10, 0x9f, 0x69, 0xdb, 0xe5, 0xe1, 0xbc, 0x8a, 0x4e, 0xc7, 0x4d, 0x81, 0x7f, 0x80, 0x9d,
	0xd3, 0x04, 0xcb, 0x52, 0x66, 0xf1, 0xb7, 0x53, 0x9c, 0x62, 0xed, 0x15, 0xb7, 0xf9, 0x15, 0x3f,
	0x00, 0x27, 0x9a, 0x16, 0x21, 0x6f, 0xb3, 0x2a, 0xe9, 0xa5, 0x4d, 0x15, 0x45, 0x2a, 0xc3, 0x7a,
	0x68, 0x87, 0x00, 0x8e, 0xfc, 0x05, 0xec, 0x2f, 0x23, 0x3f, 0x9e, 0x4c, 0xe4, 0x78, 0xa8, 0x31,
	0x25, 0x39, 0x20, 0x19, 0xcb, 0xe5, 0xcd, 0x06, 0xe5, 0x88, 0xcf, 0x72, 0x59, 0x60, 0x74, 0x25,
	0x2b, 0xb7, 0x42, 0x06, 0xfa, 0xf4, 0xec, 0xc5, 0x5f, 0xfe, 0xd6, 0x6f, 0x0b, 0xdf, 0x7a, 0xbe,
	0xf0, 0xad, 0x8b, 0x85, 0x6f, 0xfd, 0xb9, 0xf0, 0xad, 0xbf, 0x17, 0xfe, 0xd6, 0x3f, 0x0b, 0xdf,
	0xfa, 0xe5, 0xd2, 0xdf, 0x7a, 0x7e, 0xe9, 0x5b, 0x17, 0x97, 0xfe, 0xd6, 0x8b, 0x4b, 0x7f, 0xeb,
	0xc7, 0x07, 0x63, 0x25, 0xb3, 0xf7, 0xcc, 0xa4, 0x9f, 0x8c, 0x55, 0x9a, 0xaa, 0xec, 0xa4, 0xfe,
	0x2f, 0xe6, 0xbc, 0xc5, 0xd6, 0xfb, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x87, 0xef, 0xf4,
	0xdc, 0x08, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuild.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildMember.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildApply.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildInvite.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBuild.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildWorldInvite.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBlessingQueue.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBlessingEfficItem.Get().(proto.Message)
	})
}

var poolGuild = &sync.Pool{New: func() interface{} { return &Guild{} }}

func (m *Guild) ReleasePool() { m.Reset(); poolGuild.Put(m); m = nil }

var poolGuildMember = &sync.Pool{New: func() interface{} { return &GuildMember{} }}

func (m *GuildMember) ReleasePool() { m.Reset(); poolGuildMember.Put(m); m = nil }

var poolGuildApply = &sync.Pool{New: func() interface{} { return &GuildApply{} }}

func (m *GuildApply) ReleasePool() { m.Reset(); poolGuildApply.Put(m); m = nil }

var poolGuildInvite = &sync.Pool{New: func() interface{} { return &GuildInvite{} }}

func (m *GuildInvite) ReleasePool() { m.Reset(); poolGuildInvite.Put(m); m = nil }

var poolGuildBuild = &sync.Pool{New: func() interface{} { return &GuildBuild{} }}

func (m *GuildBuild) ReleasePool() { m.Reset(); poolGuildBuild.Put(m); m = nil }

var poolGuildWorldInvite = &sync.Pool{New: func() interface{} { return &GuildWorldInvite{} }}

func (m *GuildWorldInvite) ReleasePool() { m.Reset(); poolGuildWorldInvite.Put(m); m = nil }

var poolBlessingQueue = &sync.Pool{New: func() interface{} { return &BlessingQueue{} }}

func (m *BlessingQueue) ReleasePool() { m.Reset(); poolBlessingQueue.Put(m); m = nil }

var poolBlessingEfficItem = &sync.Pool{New: func() interface{} { return &BlessingEfficItem{} }}

func (m *BlessingEfficItem) ReleasePool() { m.Reset(); poolBlessingEfficItem.Put(m); m = nil }
func (this *Guild) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Guild)
	if !ok {
		that2, ok := that.(Guild)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	if this.Lang != that1.Lang {
		return false
	}
	if this.Intro != that1.Intro {
		return false
	}
	if this.Notice != that1.Notice {
		return false
	}
	if this.AutoJoin != that1.AutoJoin {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Exp != that1.Exp {
		return false
	}
	if len(this.Resources) != len(that1.Resources) {
		return false
	}
	for i := range this.Resources {
		if this.Resources[i] != that1.Resources[i] {
			return false
		}
	}
	if this.CombatValue != that1.CombatValue {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Greeting != that1.Greeting {
		return false
	}
	if len(this.PositionName) != len(that1.PositionName) {
		return false
	}
	for i := range this.PositionName {
		if this.PositionName[i] != that1.PositionName[i] {
			return false
		}
	}
	if !this.WorldInvite.Equal(that1.WorldInvite) {
		return false
	}
	if this.ActiveValue != that1.ActiveValue {
		return false
	}
	if this.CombatValueLimit != that1.CombatValueLimit {
		return false
	}
	if this.InviteMsg != that1.InviteMsg {
		return false
	}
	return true
}
func (this *GuildMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildMember)
	if !ok {
		that2, ok := that.(GuildMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if this.JoinAt != that1.JoinAt {
		return false
	}
	if this.LoginAt != that1.LoginAt {
		return false
	}
	if this.LogoutAt != that1.LogoutAt {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.CombatValue != that1.CombatValue {
		return false
	}
	if this.ActiveValue != that1.ActiveValue {
		return false
	}
	if this.TotalActiveValue != that1.TotalActiveValue {
		return false
	}
	if this.Lang != that1.Lang {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	return true
}
func (this *GuildApply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildApply)
	if !ok {
		that2, ok := that.(GuildApply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ApplyAt != that1.ApplyAt {
		return false
	}
	if this.LoginAt != that1.LoginAt {
		return false
	}
	if this.LogoutAt != that1.LogoutAt {
		return false
	}
	if this.CombatValue != that1.CombatValue {
		return false
	}
	if this.Lang != that1.Lang {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	return true
}
func (this *GuildInvite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildInvite)
	if !ok {
		that2, ok := that.(GuildInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.LoginAt != that1.LoginAt {
		return false
	}
	if this.LogoutAt != that1.LogoutAt {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.CombatValue != that1.CombatValue {
		return false
	}
	if this.ActiveValue != that1.ActiveValue {
		return false
	}
	if this.TotalActiveValue != that1.TotalActiveValue {
		return false
	}
	if this.Lang != that1.Lang {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	return true
}
func (this *GuildBuild) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBuild)
	if !ok {
		that2, ok := that.(GuildBuild)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FreeCount != that1.FreeCount {
		return false
	}
	if this.PayCount != that1.PayCount {
		return false
	}
	if this.ResetTime != that1.ResetTime {
		return false
	}
	return true
}
func (this *GuildWorldInvite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildWorldInvite)
	if !ok {
		that2, ok := that.(GuildWorldInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Free != that1.Free {
		return false
	}
	if this.Pay != that1.Pay {
		return false
	}
	if this.ResetTime != that1.ResetTime {
		return false
	}
	return true
}
func (this *BlessingQueue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlessingQueue)
	if !ok {
		that2, ok := that.(BlessingQueue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.DoneTime != that1.DoneTime {
		return false
	}
	return true
}
func (this *BlessingEfficItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlessingEfficItem)
	if !ok {
		that2, ok := that.(BlessingEfficItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Effic != that1.Effic {
		return false
	}
	if this.ExpiredAt != that1.ExpiredAt {
		return false
	}
	return true
}
func (m *Guild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Guild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Guild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InviteMsg) > 0 {
		i -= len(m.InviteMsg)
		copy(dAtA[i:], m.InviteMsg)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.InviteMsg)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.CombatValueLimit != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.CombatValueLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ActiveValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ActiveValue))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.WorldInvite != nil {
		{
			size, err := m.WorldInvite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGuild(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PositionName) > 0 {
		for k := range m.PositionName {
			v := m.PositionName[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGuild(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintGuild(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGuild(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Greeting) > 0 {
		i -= len(m.Greeting)
		copy(dAtA[i:], m.Greeting)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Greeting)))
		i--
		dAtA[i] = 0x72
	}
	if m.Count != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x68
	}
	if m.CombatValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.CombatValue))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Resources) > 0 {
		for k := range m.Resources {
			v := m.Resources[k]
			baseI := i
			i = encodeVarintGuild(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintGuild(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGuild(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Exp != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x50
	}
	if m.Level != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x48
	}
	if m.AutoJoin {
		i--
		if m.AutoJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Notice) > 0 {
		i -= len(m.Notice)
		copy(dAtA[i:], m.Notice)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Notice)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x32
	}
	if m.Lang != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Lang))
		i--
		dAtA[i] = 0x28
	}
	if m.Flag != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarFrame != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x70
	}
	if m.AvatarId != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x68
	}
	if m.Lang != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Lang))
		i--
		dAtA[i] = 0x60
	}
	if m.TotalActiveValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.TotalActiveValue))
		i--
		dAtA[i] = 0x58
	}
	if m.ActiveValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ActiveValue))
		i--
		dAtA[i] = 0x50
	}
	if m.CombatValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.CombatValue))
		i--
		dAtA[i] = 0x48
	}
	if m.Level != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LogoutAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.LogoutAt))
		i--
		dAtA[i] = 0x30
	}
	if m.LoginAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.LoginAt))
		i--
		dAtA[i] = 0x28
	}
	if m.JoinAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.JoinAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Position != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerId != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarFrame != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x58
	}
	if m.AvatarId != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x50
	}
	if m.Level != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x48
	}
	if m.Lang != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Lang))
		i--
		dAtA[i] = 0x40
	}
	if m.CombatValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.CombatValue))
		i--
		dAtA[i] = 0x38
	}
	if m.LogoutAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.LogoutAt))
		i--
		dAtA[i] = 0x30
	}
	if m.LoginAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.LoginAt))
		i--
		dAtA[i] = 0x28
	}
	if m.ApplyAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ApplyAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ServerId != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarFrame != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x58
	}
	if m.AvatarId != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x50
	}
	if m.Lang != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Lang))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalActiveValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.TotalActiveValue))
		i--
		dAtA[i] = 0x40
	}
	if m.ActiveValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ActiveValue))
		i--
		dAtA[i] = 0x38
	}
	if m.CombatValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.CombatValue))
		i--
		dAtA[i] = 0x30
	}
	if m.Level != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.LogoutAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.LogoutAt))
		i--
		dAtA[i] = 0x18
	}
	if m.LoginAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.LoginAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildBuild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBuild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBuild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResetTime != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ResetTime))
		i--
		dAtA[i] = 0x18
	}
	if m.PayCount != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.PayCount))
		i--
		dAtA[i] = 0x10
	}
	if m.FreeCount != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.FreeCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildWorldInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildWorldInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildWorldInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResetTime != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ResetTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Pay != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Pay))
		i--
		dAtA[i] = 0x10
	}
	if m.Free != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Free))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlessingQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlessingQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlessingQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DoneTime != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.DoneTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Duration != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlessingEfficItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlessingEfficItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlessingEfficItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiredAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x18
	}
	if m.Effic != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Effic))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuild(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuild(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Guild) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.Flag != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("flag")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Flag))
		needWriteComma = true
	}
	if m.Lang != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lang")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lang))
		needWriteComma = true
	}
	if m.Intro != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("intro")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Intro)
		needWriteComma = true
	}
	if m.Notice != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("notice")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Notice)
		needWriteComma = true
	}
	if m.AutoJoin {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("auto_join")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.AutoJoin)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.Exp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("exp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Exp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("resources")
	w.RawByte('"')
	w.RawByte(':')
	if m.Resources == nil {
		w.RawString("null")
	} else if len(m.Resources) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlResources := len(m.Resources)
		for k, v := range m.Resources {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlResources--
			if mlResources != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.CombatValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValue))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.Greeting != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("greeting")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Greeting)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("position_name")
	w.RawByte('"')
	w.RawByte(':')
	if m.PositionName == nil {
		w.RawString("null")
	} else if len(m.PositionName) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlPositionName := len(m.PositionName)
		for k, v := range m.PositionName {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.String(v)
			mlPositionName--
			if mlPositionName != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("world_invite")
	w.RawByte('"')
	w.RawByte(':')
	m.WorldInvite.JsonBytes(w)
	needWriteComma = true
	if m.ActiveValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("active_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActiveValue))
		needWriteComma = true
	}
	if m.CombatValueLimit != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_value_limit")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValueLimit))
		needWriteComma = true
	}
	if m.InviteMsg != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("invite_msg")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.InviteMsg)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildMember) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.Position != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("position")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Position))
		needWriteComma = true
	}
	if m.JoinAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("join_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.JoinAt))
		needWriteComma = true
	}
	if m.LoginAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("login_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LoginAt))
		needWriteComma = true
	}
	if m.LogoutAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("logout_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LogoutAt))
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.CombatValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValue))
		needWriteComma = true
	}
	if m.ActiveValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("active_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActiveValue))
		needWriteComma = true
	}
	if m.TotalActiveValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_active_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalActiveValue))
		needWriteComma = true
	}
	if m.Lang != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lang")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lang))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildApply) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.ApplyAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("apply_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ApplyAt))
		needWriteComma = true
	}
	if m.LoginAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("login_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LoginAt))
		needWriteComma = true
	}
	if m.LogoutAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("logout_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LogoutAt))
		needWriteComma = true
	}
	if m.CombatValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValue))
		needWriteComma = true
	}
	if m.Lang != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lang")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lang))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildInvite) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.LoginAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("login_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LoginAt))
		needWriteComma = true
	}
	if m.LogoutAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("logout_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LogoutAt))
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.CombatValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValue))
		needWriteComma = true
	}
	if m.ActiveValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("active_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActiveValue))
		needWriteComma = true
	}
	if m.TotalActiveValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_active_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalActiveValue))
		needWriteComma = true
	}
	if m.Lang != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lang")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lang))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBuild) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.FreeCount != 0 {
		w.RawByte('"')
		w.RawString("free_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeCount))
		needWriteComma = true
	}
	if m.PayCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pay_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PayCount))
		needWriteComma = true
	}
	if m.ResetTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("reset_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ResetTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildWorldInvite) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Free != 0 {
		w.RawByte('"')
		w.RawString("free")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Free))
		needWriteComma = true
	}
	if m.Pay != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pay")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Pay))
		needWriteComma = true
	}
	if m.ResetTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("reset_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ResetTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BlessingQueue) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Duration != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("duration")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Duration))
		needWriteComma = true
	}
	if m.DoneTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("done_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DoneTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BlessingEfficItem) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Effic != 0 {
		w.RawByte('"')
		w.RawString("effic")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Effic))
		needWriteComma = true
	}
	if m.ExpiredAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expired_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpiredAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Guild) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Guild) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Guild) GoString() string {
	return m.String()
}

func (m *GuildMember) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildMember) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildMember) GoString() string {
	return m.String()
}

func (m *GuildApply) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildApply) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildApply) GoString() string {
	return m.String()
}

func (m *GuildInvite) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildInvite) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildInvite) GoString() string {
	return m.String()
}

func (m *GuildBuild) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBuild) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBuild) GoString() string {
	return m.String()
}

func (m *GuildWorldInvite) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildWorldInvite) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildWorldInvite) GoString() string {
	return m.String()
}

func (m *BlessingQueue) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BlessingQueue) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BlessingQueue) GoString() string {
	return m.String()
}

func (m *BlessingEfficItem) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BlessingEfficItem) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BlessingEfficItem) GoString() string {
	return m.String()
}

func (m *Guild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Flag != 0 {
		n += 1 + sovGuild(uint64(m.Flag))
	}
	if m.Lang != 0 {
		n += 1 + sovGuild(uint64(m.Lang))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.AutoJoin {
		n += 2
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovGuild(uint64(m.Exp))
	}
	if len(m.Resources) > 0 {
		for k, v := range m.Resources {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 1 + sovGuild(uint64(mapEntrySize))
		}
	}
	if m.CombatValue != 0 {
		n += 1 + sovGuild(uint64(m.CombatValue))
	}
	if m.Count != 0 {
		n += 1 + sovGuild(uint64(m.Count))
	}
	l = len(m.Greeting)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if len(m.PositionName) > 0 {
		for k, v := range m.PositionName {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + len(v) + sovGuild(uint64(len(v)))
			n += mapEntrySize + 1 + sovGuild(uint64(mapEntrySize))
		}
	}
	if m.WorldInvite != nil {
		l = m.WorldInvite.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if m.ActiveValue != 0 {
		n += 2 + sovGuild(uint64(m.ActiveValue))
	}
	if m.CombatValueLimit != 0 {
		n += 2 + sovGuild(uint64(m.CombatValueLimit))
	}
	l = len(m.InviteMsg)
	if l > 0 {
		n += 2 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovGuild(uint64(m.ServerId))
	}
	if m.Position != 0 {
		n += 1 + sovGuild(uint64(m.Position))
	}
	if m.JoinAt != 0 {
		n += 1 + sovGuild(uint64(m.JoinAt))
	}
	if m.LoginAt != 0 {
		n += 1 + sovGuild(uint64(m.LoginAt))
	}
	if m.LogoutAt != 0 {
		n += 1 + sovGuild(uint64(m.LogoutAt))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.CombatValue != 0 {
		n += 1 + sovGuild(uint64(m.CombatValue))
	}
	if m.ActiveValue != 0 {
		n += 1 + sovGuild(uint64(m.ActiveValue))
	}
	if m.TotalActiveValue != 0 {
		n += 1 + sovGuild(uint64(m.TotalActiveValue))
	}
	if m.Lang != 0 {
		n += 1 + sovGuild(uint64(m.Lang))
	}
	if m.AvatarId != 0 {
		n += 1 + sovGuild(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovGuild(uint64(m.AvatarFrame))
	}
	return n
}

func (m *GuildApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovGuild(uint64(m.ServerId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.ApplyAt != 0 {
		n += 1 + sovGuild(uint64(m.ApplyAt))
	}
	if m.LoginAt != 0 {
		n += 1 + sovGuild(uint64(m.LoginAt))
	}
	if m.LogoutAt != 0 {
		n += 1 + sovGuild(uint64(m.LogoutAt))
	}
	if m.CombatValue != 0 {
		n += 1 + sovGuild(uint64(m.CombatValue))
	}
	if m.Lang != 0 {
		n += 1 + sovGuild(uint64(m.Lang))
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovGuild(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovGuild(uint64(m.AvatarFrame))
	}
	return n
}

func (m *GuildInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.LoginAt != 0 {
		n += 1 + sovGuild(uint64(m.LoginAt))
	}
	if m.LogoutAt != 0 {
		n += 1 + sovGuild(uint64(m.LogoutAt))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.CombatValue != 0 {
		n += 1 + sovGuild(uint64(m.CombatValue))
	}
	if m.ActiveValue != 0 {
		n += 1 + sovGuild(uint64(m.ActiveValue))
	}
	if m.TotalActiveValue != 0 {
		n += 1 + sovGuild(uint64(m.TotalActiveValue))
	}
	if m.Lang != 0 {
		n += 1 + sovGuild(uint64(m.Lang))
	}
	if m.AvatarId != 0 {
		n += 1 + sovGuild(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovGuild(uint64(m.AvatarFrame))
	}
	return n
}

func (m *GuildBuild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FreeCount != 0 {
		n += 1 + sovGuild(uint64(m.FreeCount))
	}
	if m.PayCount != 0 {
		n += 1 + sovGuild(uint64(m.PayCount))
	}
	if m.ResetTime != 0 {
		n += 1 + sovGuild(uint64(m.ResetTime))
	}
	return n
}

func (m *GuildWorldInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Free != 0 {
		n += 1 + sovGuild(uint64(m.Free))
	}
	if m.Pay != 0 {
		n += 1 + sovGuild(uint64(m.Pay))
	}
	if m.ResetTime != 0 {
		n += 1 + sovGuild(uint64(m.ResetTime))
	}
	return n
}

func (m *BlessingQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	if m.Duration != 0 {
		n += 1 + sovGuild(uint64(m.Duration))
	}
	if m.DoneTime != 0 {
		n += 1 + sovGuild(uint64(m.DoneTime))
	}
	return n
}

func (m *BlessingEfficItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Effic != 0 {
		n += 1 + sovGuild(uint64(m.Effic))
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovGuild(uint64(m.ExpiredAt))
	}
	return n
}

func sovGuild(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuild(x uint64) (n int) {
	return sovGuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Guild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			m.Lang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lang |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoJoin = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resources[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			m.CombatValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greeting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greeting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionName == nil {
				m.PositionName = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGuild
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGuild
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PositionName[mapkey] = mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorldInvite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorldInvite == nil {
				m.WorldInvite = &GuildWorldInvite{}
			}
			if err := m.WorldInvite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveValue", wireType)
			}
			m.ActiveValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValueLimit", wireType)
			}
			m.CombatValueLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValueLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAt", wireType)
			}
			m.JoinAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAt", wireType)
			}
			m.LoginAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutAt", wireType)
			}
			m.LogoutAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoutAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			m.CombatValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveValue", wireType)
			}
			m.ActiveValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveValue", wireType)
			}
			m.TotalActiveValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalActiveValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			m.Lang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lang |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyAt", wireType)
			}
			m.ApplyAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAt", wireType)
			}
			m.LoginAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutAt", wireType)
			}
			m.LogoutAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoutAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			m.CombatValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			m.Lang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lang |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginAt", wireType)
			}
			m.LoginAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoutAt", wireType)
			}
			m.LogoutAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoutAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			m.CombatValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveValue", wireType)
			}
			m.ActiveValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveValue", wireType)
			}
			m.TotalActiveValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalActiveValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			m.Lang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lang |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBuild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBuild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBuild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeCount", wireType)
			}
			m.FreeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayCount", wireType)
			}
			m.PayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetTime", wireType)
			}
			m.ResetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildWorldInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildWorldInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildWorldInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			m.Free = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Free |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pay", wireType)
			}
			m.Pay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetTime", wireType)
			}
			m.ResetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlessingQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlessingQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlessingQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneTime", wireType)
			}
			m.DoneTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoneTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlessingEfficItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlessingEfficItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlessingEfficItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effic", wireType)
			}
			m.Effic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Effic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuild
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuild
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuild
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuild        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuild          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuild = fmt.Errorf("proto: unexpected end of group")
)
