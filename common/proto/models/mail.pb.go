// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/mail.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 邮件类型
type MailType int32

const (
	MailType_MailTypeInvalid MailType = 0
	MailType_MailTypeSystem  MailType = 1
	MailType_MailTypeGM      MailType = 2
)

var MailType_name = map[int32]string{
	0: "MailTypeInvalid",
	1: "MailTypeSystem",
	2: "MailTypeGM",
}

var MailType_value = map[string]int32{
	"MailTypeInvalid": 0,
	"MailTypeSystem":  1,
	"MailTypeGM":      2,
}

func (MailType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a3c8b076e0f38cb, []int{0}
}

type Mail struct {
	// 邮件id，不要传，自动生成
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 邮件类型，默认为 MailTypeSystem
	Type MailType `protobuf:"varint,2,opt,name=type,proto3,enum=models.MailType" json:"type,omitempty"`
	// 发送者（对于客户端仅有值时有效）
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	// 文本id（text_id和content 2选一）
	TextId int64 `protobuf:"varint,4,opt,name=text_id,json=textId,proto3" json:"text_id,omitempty"`
	// 自定义标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// 自定义邮件内容
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	// 邮件正文里对玩家的称呼（如：亲爱的召唤师）
	Hi string `protobuf:"bytes,7,opt,name=hi,proto3" json:"hi,omitempty"`
	// 邮件过期时间（毫秒），默认30天
	ExpiredAt int64 `protobuf:"varint,8,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	// 用于文本里的参数值
	Args []string `protobuf:"bytes,9,rep,name=args,proto3" json:"args,omitempty"`
	// 附件
	Attachment []*Item `protobuf:"bytes,10,rep,name=attachment,proto3" json:"attachment,omitempty"`
	// 创建时间（毫秒） 默认当前时间
	CreatedAt   int64 `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ActivatedAt int64 `protobuf:"varint,12,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`
}

func (m *Mail) Reset()      { *m = Mail{} }
func (*Mail) ProtoMessage() {}
func (*Mail) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a3c8b076e0f38cb, []int{0}
}
func (m *Mail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail.Merge(m, src)
}
func (m *Mail) XXX_Size() int {
	return m.Size()
}
func (m *Mail) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail.DiscardUnknown(m)
}

var xxx_messageInfo_Mail proto.InternalMessageInfo

func (m *Mail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Mail) GetType() MailType {
	if m != nil {
		return m.Type
	}
	return MailType_MailTypeInvalid
}

func (m *Mail) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Mail) GetTextId() int64 {
	if m != nil {
		return m.TextId
	}
	return 0
}

func (m *Mail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Mail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Mail) GetHi() string {
	if m != nil {
		return m.Hi
	}
	return ""
}

func (m *Mail) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (m *Mail) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Mail) GetAttachment() []*Item {
	if m != nil {
		return m.Attachment
	}
	return nil
}

func (m *Mail) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Mail) GetActivatedAt() int64 {
	if m != nil {
		return m.ActivatedAt
	}
	return 0
}

func (*Mail) XXX_MessageName() string {
	return "models.Mail"
}
func init() {
	proto.RegisterEnum("models.MailType", MailType_name, MailType_value)
	proto.RegisterType((*Mail)(nil), "models.Mail")
}

func init() { proto.RegisterFile("proto/models/mail.proto", fileDescriptor_6a3c8b076e0f38cb) }

var fileDescriptor_6a3c8b076e0f38cb = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x4e, 0xce, 0xb9, 0x4c, 0x22, 0x63, 0x0d, 0xe8, 0x6e, 0x85, 0xc4, 0x62, 0x10,
	0x85, 0x85, 0x20, 0x96, 0x8e, 0x27, 0x08, 0x14, 0x28, 0x45, 0x1a, 0x43, 0x45, 0x73, 0xda, 0xf3,
	0xae, 0x2e, 0x2b, 0xf9, 0x9f, 0xec, 0x51, 0x74, 0x79, 0x0b, 0x1e, 0x83, 0x47, 0xb9, 0x32, 0xe5,
	0x95, 0x60, 0x37, 0x94, 0x3c, 0x02, 0xf2, 0x3a, 0x46, 0x47, 0x37, 0xdf, 0x6f, 0xbe, 0x99, 0x6f,
	0xec, 0x85, 0xcb, 0xaa, 0x2e, 0xa9, 0x8c, 0xf3, 0x52, 0xe9, 0xac, 0x89, 0x73, 0x69, 0xb2, 0x95,
	0x25, 0xe8, 0x0d, 0xe8, 0xf9, 0xc5, 0x7f, 0x86, 0x1b, 0x79, 0x3b, 0xf4, 0x5f, 0x1f, 0x5d, 0x98,
	0x6e, 0xa5, 0xc9, 0xd0, 0x07, 0xd7, 0x28, 0xce, 0x42, 0x16, 0xcd, 0x13, 0xd7, 0x28, 0x7c, 0x03,
	0x53, 0x3a, 0x54, 0x9a, 0xbb, 0x21, 0x8b, 0xfc, 0xab, 0x60, 0x35, 0x4c, 0xae, 0x7a, 0xef, 0xd7,
	0x43, 0xa5, 0x13, 0xdb, 0xc5, 0x0b, 0xf0, 0x1a, 0x5d, 0x28, 0x5d, 0xf3, 0x89, 0x9d, 0x3c, 0x29,
	0xbc, 0x84, 0x19, 0xe9, 0x3b, 0xba, 0x36, 0x8a, 0x4f, 0x43, 0x16, 0x4d, 0x12, 0xaf, 0x97, 0x1b,
	0x85, 0xcf, 0xe0, 0x8c, 0x0c, 0x65, 0x9a, 0x9f, 0x59, 0xff, 0x20, 0x90, 0xc3, 0x2c, 0x2d, 0x0b,
	0xd2, 0x05, 0x71, 0xcf, 0xf2, 0x51, 0xf6, 0x67, 0xed, 0x0c, 0x9f, 0x0d, 0x67, 0xed, 0x0c, 0xbe,
	0x00, 0xd0, 0x77, 0x95, 0xa9, 0xb5, 0xba, 0x96, 0xc4, 0xcf, 0xed, 0xee, 0xf9, 0x89, 0xac, 0x09,
	0x11, 0xa6, 0xb2, 0xbe, 0x6d, 0xf8, 0x3c, 0x9c, 0x44, 0xf3, 0xc4, 0xd6, 0xf8, 0x0e, 0x40, 0x12,
	0xc9, 0x74, 0x97, 0xf7, 0xfb, 0x21, 0x9c, 0x44, 0x8b, 0xab, 0xe5, 0xf8, 0x3d, 0x1b, 0xd2, 0x79,
	0xf2, 0xa8, 0xdf, 0x07, 0xa4, 0xb5, 0x96, 0x34, 0x04, 0x2c, 0x86, 0x80, 0x13, 0x59, 0x13, 0xbe,
	0x82, 0xa5, 0x4c, 0xc9, 0xec, 0x47, 0xc3, 0xd2, 0x1a, 0x16, 0xff, 0xd8, 0x9a, 0xde, 0x7e, 0x82,
	0xf3, 0xf1, 0x2f, 0xe1, 0x53, 0x78, 0x32, 0xd6, 0x9b, 0x62, 0x2f, 0x33, 0xa3, 0x02, 0x07, 0x11,
	0xfc, 0x11, 0x7e, 0x39, 0x34, 0xa4, 0xf3, 0x80, 0xa1, 0x0f, 0x30, 0xb2, 0xcf, 0xdb, 0xc0, 0xfd,
	0xb8, 0x7d, 0xf8, 0x25, 0x9c, 0x1f, 0xad, 0x60, 0xf7, 0xad, 0x60, 0xc7, 0x56, 0xb0, 0x9f, 0xad,
	0x60, 0xbf, 0x5b, 0xe1, 0xfc, 0x69, 0x05, 0xfb, 0xde, 0x09, 0xe7, 0xbe, 0x13, 0xec, 0xd8, 0x09,
	0xe7, 0xa1, 0x13, 0xce, 0xb7, 0x97, 0x69, 0x69, 0x8a, 0xf7, 0x8d, 0xae, 0xf7, 0xba, 0x8e, 0xd3,
	0x32, 0xcf, 0xcb, 0x22, 0x7e, 0xfc, 0xe0, 0x37, 0x9e, 0x55, 0x1f, 0xfe, 0x06, 0x00, 0x00, 0xff,
	0xff, 0xd4, 0xda, 0x44, 0xb7, 0x28, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail.Get().(proto.Message)
	})
}

var poolMail = &sync.Pool{New: func() interface{} { return &Mail{} }}

func (m *Mail) ReleasePool() { m.Reset(); poolMail.Put(m); m = nil }
func (x MailType) String() string {
	s, ok := MailType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Mail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail)
	if !ok {
		that2, ok := that.(Mail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.TextId != that1.TextId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.Hi != that1.Hi {
		return false
	}
	if this.ExpiredAt != that1.ExpiredAt {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if this.Args[i] != that1.Args[i] {
			return false
		}
	}
	if len(this.Attachment) != len(that1.Attachment) {
		return false
	}
	for i := range this.Attachment {
		if !this.Attachment[i].Equal(that1.Attachment[i]) {
			return false
		}
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.ActivatedAt != that1.ActivatedAt {
		return false
	}
	return true
}
func (m *Mail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivatedAt != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.ActivatedAt))
		i--
		dAtA[i] = 0x60
	}
	if m.CreatedAt != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Attachment) > 0 {
		for iNdEx := len(m.Attachment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMail(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintMail(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.ExpiredAt != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Hi) > 0 {
		i -= len(m.Hi)
		copy(dAtA[i:], m.Hi)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Hi)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TextId != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.TextId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMail(dAtA []byte, offset int, v uint64) int {
	offset -= sovMail(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Mail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.Sender != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sender")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Sender)
		needWriteComma = true
	}
	if m.TextId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("text_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TextId))
		needWriteComma = true
	}
	if m.Title != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Title)
		needWriteComma = true
	}
	if m.Content != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("content")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Content)
		needWriteComma = true
	}
	if m.Hi != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hi")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Hi)
		needWriteComma = true
	}
	if m.ExpiredAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expired_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpiredAt))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("args")
	w.RawByte('"')
	w.RawByte(':')
	if m.Args == nil {
		w.RawString("null")
	} else if len(m.Args) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Args {
			w.String(v)
			if i != len(m.Args)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attachment")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attachment == nil {
		w.RawString("null")
	} else if len(m.Attachment) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Attachment {
			v.JsonBytes(w)
			if i != len(m.Attachment)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.CreatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("created_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreatedAt))
		needWriteComma = true
	}
	if m.ActivatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activated_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivatedAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Mail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail) GoString() string {
	return m.String()
}

func (m *Mail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMail(uint64(m.Type))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.TextId != 0 {
		n += 1 + sovMail(uint64(m.TextId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Hi)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovMail(uint64(m.ExpiredAt))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if len(m.Attachment) > 0 {
		for _, e := range m.Attachment {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if m.CreatedAt != 0 {
		n += 1 + sovMail(uint64(m.CreatedAt))
	}
	if m.ActivatedAt != 0 {
		n += 1 + sovMail(uint64(m.ActivatedAt))
	}
	return n
}

func sovMail(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMail(x uint64) (n int) {
	return sovMail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MailType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextId", wireType)
			}
			m.TextId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachment = append(m.Attachment, &Item{})
			if err := m.Attachment[len(m.Attachment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivatedAt", wireType)
			}
			m.ActivatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMail
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMail
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMail
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMail        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMail          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMail = fmt.Errorf("proto: unexpected end of group")
)
