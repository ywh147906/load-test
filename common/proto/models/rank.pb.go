// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/rank.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 排行榜
type RankValue struct {
	// 排行榜id
	RankId   string `protobuf:"bytes,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	RankType int64  `protobuf:"varint,2,opt,name=rank_type,json=rankType,proto3" json:"rank_type,omitempty"`
	// 归属Id ，例如角色id
	OwnerId string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// 具体的排名，不会存入数据库只会在内存，如果要将正确的rank存入内存会导致频繁DB更新，比如第100名突然到了第一名，则前100的排名会变化，会引发100次DB更新
	Rank int64 `protobuf:"zigzag64,4,opt,name=rank,proto3" json:"rank,omitempty"`
	// 排序字段
	Value1 int64 `protobuf:"zigzag64,5,opt,name=value1,proto3" json:"value1,omitempty"`
	Value2 int64 `protobuf:"zigzag64,6,opt,name=value2,proto3" json:"value2,omitempty"`
	Value3 int64 `protobuf:"zigzag64,7,opt,name=value3,proto3" json:"value3,omitempty"`
	Value4 int64 `protobuf:"zigzag64,8,opt,name=value4,proto3" json:"value4,omitempty"`
	// 额外字段,比如玩家名字、头像等
	Extra     map[string]string `protobuf:"bytes,9,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Shard     int64             `protobuf:"zigzag64,10,opt,name=shard,proto3" json:"shard,omitempty"`
	CreatedAt int64             `protobuf:"zigzag64,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *RankValue) Reset()      { *m = RankValue{} }
func (*RankValue) ProtoMessage() {}
func (*RankValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafb139bf08f8662, []int{0}
}
func (m *RankValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankValue.Merge(m, src)
}
func (m *RankValue) XXX_Size() int {
	return m.Size()
}
func (m *RankValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RankValue.DiscardUnknown(m)
}

var xxx_messageInfo_RankValue proto.InternalMessageInfo

func (m *RankValue) GetRankId() string {
	if m != nil {
		return m.RankId
	}
	return ""
}

func (m *RankValue) GetRankType() int64 {
	if m != nil {
		return m.RankType
	}
	return 0
}

func (m *RankValue) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *RankValue) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RankValue) GetValue1() int64 {
	if m != nil {
		return m.Value1
	}
	return 0
}

func (m *RankValue) GetValue2() int64 {
	if m != nil {
		return m.Value2
	}
	return 0
}

func (m *RankValue) GetValue3() int64 {
	if m != nil {
		return m.Value3
	}
	return 0
}

func (m *RankValue) GetValue4() int64 {
	if m != nil {
		return m.Value4
	}
	return 0
}

func (m *RankValue) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *RankValue) GetShard() int64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *RankValue) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (*RankValue) XXX_MessageName() string {
	return "models.RankValue"
}

type RankAndScore struct {
	OwnerId string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Rank    int64  `protobuf:"zigzag64,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Score   int64  `protobuf:"zigzag64,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *RankAndScore) Reset()      { *m = RankAndScore{} }
func (*RankAndScore) ProtoMessage() {}
func (*RankAndScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafb139bf08f8662, []int{1}
}
func (m *RankAndScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankAndScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankAndScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankAndScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankAndScore.Merge(m, src)
}
func (m *RankAndScore) XXX_Size() int {
	return m.Size()
}
func (m *RankAndScore) XXX_DiscardUnknown() {
	xxx_messageInfo_RankAndScore.DiscardUnknown(m)
}

var xxx_messageInfo_RankAndScore proto.InternalMessageInfo

func (m *RankAndScore) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *RankAndScore) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RankAndScore) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (*RankAndScore) XXX_MessageName() string {
	return "models.RankAndScore"
}

type RankItem struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Nickname    string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level       int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId    int64  `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame int64  `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power       int64  `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	GuildId     string `protobuf:"bytes,7,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildName   string `protobuf:"bytes,8,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	CreatedAt   int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Fashion     int64  `protobuf:"varint,10,opt,name=fashion,proto3" json:"fashion,omitempty"`
}

func (m *RankItem) Reset()      { *m = RankItem{} }
func (*RankItem) ProtoMessage() {}
func (*RankItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_fafb139bf08f8662, []int{2}
}
func (m *RankItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankItem.Merge(m, src)
}
func (m *RankItem) XXX_Size() int {
	return m.Size()
}
func (m *RankItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RankItem.DiscardUnknown(m)
}

var xxx_messageInfo_RankItem proto.InternalMessageInfo

func (m *RankItem) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RankItem) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RankItem) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RankItem) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *RankItem) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *RankItem) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *RankItem) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *RankItem) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *RankItem) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *RankItem) GetFashion() int64 {
	if m != nil {
		return m.Fashion
	}
	return 0
}

func (*RankItem) XXX_MessageName() string {
	return "models.RankItem"
}
func init() {
	proto.RegisterType((*RankValue)(nil), "models.RankValue")
	proto.RegisterMapType((map[string]string)(nil), "models.RankValue.ExtraEntry")
	proto.RegisterType((*RankAndScore)(nil), "models.RankAndScore")
	proto.RegisterType((*RankItem)(nil), "models.RankItem")
}

func init() { proto.RegisterFile("proto/models/rank.proto", fileDescriptor_fafb139bf08f8662) }

var fileDescriptor_fafb139bf08f8662 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xb1, 0x6e, 0x13, 0x41,
	0x10, 0x86, 0xbd, 0xbe, 0xd8, 0xbe, 0x1b, 0xa7, 0x40, 0x2b, 0x44, 0x96, 0x00, 0x8b, 0x71, 0xe5,
	0x06, 0x5b, 0xd8, 0x29, 0x22, 0xba, 0x20, 0x05, 0xe9, 0x0a, 0x28, 0x2e, 0x88, 0x82, 0x26, 0x5a,
	0xbc, 0x1b, 0x62, 0xf9, 0xbc, 0x6b, 0xad, 0x2f, 0x0e, 0x7e, 0x0b, 0x9e, 0x80, 0x9a, 0x47, 0x49,
	0x99, 0x32, 0x25, 0x9c, 0x1b, 0x4a, 0x24, 0x5e, 0x00, 0xcd, 0xac, 0xe3, 0x5c, 0x24, 0xba, 0xfd,
	0xbf, 0xd9, 0xfd, 0x6f, 0x66, 0x7e, 0x1d, 0xec, 0xcd, 0xbd, 0x2b, 0xdc, 0x60, 0xe6, 0xb4, 0xc9,
	0x17, 0x03, 0xaf, 0xec, 0xb4, 0x4f, 0x84, 0x37, 0x03, 0xea, 0xfe, 0xad, 0x43, 0x92, 0x29, 0x3b,
	0xfd, 0xa8, 0xf2, 0x0b, 0xc3, 0xf7, 0xa0, 0x85, 0x77, 0x4e, 0x27, 0x5a, 0xb0, 0x0e, 0xeb, 0x25,
	0x59, 0x13, 0x65, 0xaa, 0xf9, 0x13, 0x48, 0xa8, 0x50, 0xac, 0xe6, 0x46, 0xd4, 0x3b, 0xac, 0x17,
	0x65, 0x31, 0x82, 0x0f, 0xab, 0xb9, 0xe1, 0x8f, 0x21, 0x76, 0x97, 0xd6, 0x78, 0x7c, 0x16, 0xd1,
	0xb3, 0x16, 0xe9, 0x54, 0x73, 0x0e, 0x3b, 0x78, 0x4d, 0xec, 0x74, 0x58, 0x8f, 0x67, 0x74, 0xe6,
	0x8f, 0xa0, 0xb9, 0xc4, 0xaf, 0xbd, 0x12, 0x0d, 0xa2, 0x1b, 0xb5, 0xe5, 0x43, 0xd1, 0xac, 0xf0,
	0xe1, 0x96, 0x8f, 0x44, 0xab, 0xc2, 0x47, 0x5b, 0x7e, 0x20, 0xe2, 0x0a, 0x3f, 0xe0, 0x43, 0x68,
	0x98, 0xaf, 0x85, 0x57, 0x22, 0xe9, 0x44, 0xbd, 0xf6, 0xf0, 0x69, 0x3f, 0x8c, 0xda, 0xdf, 0x8e,
	0xd9, 0x3f, 0xc6, 0xf2, 0xb1, 0x2d, 0xfc, 0x2a, 0x0b, 0x57, 0xf9, 0x43, 0x68, 0x2c, 0xce, 0x95,
	0xd7, 0x02, 0xc8, 0x2a, 0x08, 0xfe, 0x0c, 0x60, 0xec, 0x8d, 0x2a, 0x8c, 0x3e, 0x55, 0x85, 0x68,
	0x53, 0x29, 0xd9, 0x90, 0xa3, 0x62, 0xff, 0x10, 0xe0, 0xce, 0x89, 0x3f, 0x80, 0x68, 0x6a, 0x56,
	0x9b, 0xbd, 0xe1, 0x11, 0x4d, 0xa9, 0x25, 0x5a, 0x58, 0x92, 0x05, 0xf1, 0xba, 0x7e, 0xc8, 0xba,
	0x27, 0xb0, 0x8b, 0xdd, 0x1c, 0x59, 0x7d, 0x32, 0x76, 0xfe, 0xfe, 0x06, 0xd9, 0xff, 0x37, 0x58,
	0xaf, 0x6c, 0x10, 0xbb, 0xc5, 0x77, 0xb4, 0x6d, 0xec, 0x16, 0x45, 0xf7, 0x7b, 0x1d, 0x62, 0x74,
	0x4d, 0x0b, 0x33, 0xa3, 0x24, 0x5d, 0x6e, 0xaa, 0x49, 0xba, 0xdc, 0xa4, 0x9a, 0xef, 0x43, 0x6c,
	0x27, 0xe3, 0xa9, 0x55, 0xb3, 0xdb, 0xbe, 0xb6, 0x1a, 0x7d, 0x73, 0xb3, 0x34, 0x39, 0xf9, 0x46,
	0x59, 0x10, 0x98, 0xbd, 0x5a, 0xaa, 0x42, 0x51, 0x77, 0x3b, 0x21, 0xfb, 0x00, 0x52, 0xcd, 0x5f,
	0xc0, 0xee, 0xa6, 0x78, 0xe6, 0xd1, 0xb2, 0x41, 0xf5, 0x76, 0x60, 0x6f, 0xfd, 0xc6, 0x75, 0xee,
	0x2e, 0x8d, 0xa7, 0x58, 0xa3, 0x2c, 0x08, 0x1c, 0xf9, 0xcb, 0xc5, 0x24, 0xd7, 0x68, 0xda, 0x0a,
	0x23, 0x93, 0x4e, 0x69, 0xed, 0xa1, 0x44, 0x4d, 0xc6, 0x54, 0x4c, 0x88, 0xbc, 0x47, 0xbf, 0xfb,
	0xa9, 0x24, 0x64, 0x7a, 0x97, 0x0a, 0x17, 0xd0, 0x3a, 0x53, 0x8b, 0xf3, 0x89, 0xb3, 0x14, 0x66,
	0x94, 0xdd, 0xca, 0x37, 0xef, 0x6e, 0x7e, 0xc9, 0xda, 0x8f, 0x52, 0xb2, 0xab, 0x52, 0xb2, 0xeb,
	0x52, 0xb2, 0x9f, 0xa5, 0x64, 0xbf, 0x4b, 0x59, 0xfb, 0x53, 0x4a, 0xf6, 0x6d, 0x2d, 0x6b, 0x57,
	0x6b, 0xc9, 0xae, 0xd7, 0xb2, 0x76, 0xb3, 0x96, 0xb5, 0x4f, 0xcf, 0xc7, 0x6e, 0x62, 0x5f, 0x2e,
	0x8c, 0x5f, 0x1a, 0x3f, 0x18, 0xbb, 0xd9, 0xcc, 0xd9, 0x41, 0xf5, 0x6f, 0xfa, 0xdc, 0x24, 0x35,
	0xfa, 0x17, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xca, 0x50, 0x9a, 0x64, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankValue.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankAndScore.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRankItem.Get().(proto.Message)
	})
}

var poolRankValue = &sync.Pool{New: func() interface{} { return &RankValue{} }}

func (m *RankValue) ReleasePool() { m.Reset(); poolRankValue.Put(m); m = nil }

var poolRankAndScore = &sync.Pool{New: func() interface{} { return &RankAndScore{} }}

func (m *RankAndScore) ReleasePool() { m.Reset(); poolRankAndScore.Put(m); m = nil }

var poolRankItem = &sync.Pool{New: func() interface{} { return &RankItem{} }}

func (m *RankItem) ReleasePool() { m.Reset(); poolRankItem.Put(m); m = nil }
func (this *RankValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankValue)
	if !ok {
		that2, ok := that.(RankValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankId != that1.RankId {
		return false
	}
	if this.RankType != that1.RankType {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Value1 != that1.Value1 {
		return false
	}
	if this.Value2 != that1.Value2 {
		return false
	}
	if this.Value3 != that1.Value3 {
		return false
	}
	if this.Value4 != that1.Value4 {
		return false
	}
	if len(this.Extra) != len(that1.Extra) {
		return false
	}
	for i := range this.Extra {
		if this.Extra[i] != that1.Extra[i] {
			return false
		}
	}
	if this.Shard != that1.Shard {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	return true
}
func (this *RankAndScore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankAndScore)
	if !ok {
		that2, ok := that.(RankAndScore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	return true
}
func (this *RankItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RankItem)
	if !ok {
		that2, ok := that.(RankItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.GuildName != that1.GuildName {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.Fashion != that1.Fashion {
		return false
	}
	return true
}
func (m *RankValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.CreatedAt)<<1)^uint64((m.CreatedAt>>63))))
		i--
		dAtA[i] = 0x58
	}
	if m.Shard != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.Shard)<<1)^uint64((m.Shard>>63))))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRank(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Value4 != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.Value4)<<1)^uint64((m.Value4>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.Value3 != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.Value3)<<1)^uint64((m.Value3>>63))))
		i--
		dAtA[i] = 0x38
	}
	if m.Value2 != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.Value2)<<1)^uint64((m.Value2>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.Value1 != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.Value1)<<1)^uint64((m.Value1>>63))))
		i--
		dAtA[i] = 0x28
	}
	if m.Rank != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.Rank)<<1)^uint64((m.Rank>>63))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RankType != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.RankType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RankId) > 0 {
		i -= len(m.RankId)
		copy(dAtA[i:], m.RankId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RankId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankAndScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankAndScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankAndScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.Score)<<1)^uint64((m.Score>>63))))
		i--
		dAtA[i] = 0x18
	}
	if m.Rank != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.Rank)<<1)^uint64((m.Rank>>63))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fashion != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Fashion))
		i--
		dAtA[i] = 0x50
	}
	if m.CreatedAt != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x48
	}
	if len(m.GuildName) > 0 {
		i -= len(m.GuildName)
		copy(dAtA[i:], m.GuildName)
		i = encodeVarintRank(dAtA, i, uint64(len(m.GuildName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Power != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RankValue) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankId != "" {
		w.RawByte('"')
		w.RawString("rank_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankId)
		needWriteComma = true
	}
	if m.RankType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rank_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankType))
		needWriteComma = true
	}
	if m.OwnerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	if m.Rank != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rank))
		needWriteComma = true
	}
	if m.Value1 != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value1")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Value1))
		needWriteComma = true
	}
	if m.Value2 != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value2")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Value2))
		needWriteComma = true
	}
	if m.Value3 != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value3")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Value3))
		needWriteComma = true
	}
	if m.Value4 != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value4")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Value4))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("extra")
	w.RawByte('"')
	w.RawByte(':')
	if m.Extra == nil {
		w.RawString("null")
	} else if len(m.Extra) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlExtra := len(m.Extra)
		for k, v := range m.Extra {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.String(v)
			mlExtra--
			if mlExtra != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Shard != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("shard")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Shard))
		needWriteComma = true
	}
	if m.CreatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("created_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreatedAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankAndScore) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.OwnerId != "" {
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	if m.Rank != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rank))
		needWriteComma = true
	}
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankItem) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.GuildName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildName)
		needWriteComma = true
	}
	if m.CreatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("created_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreatedAt))
		needWriteComma = true
	}
	if m.Fashion != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("fashion")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Fashion))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RankValue) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankValue) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankValue) GoString() string {
	return m.String()
}

func (m *RankAndScore) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankAndScore) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankAndScore) GoString() string {
	return m.String()
}

func (m *RankItem) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RankItem) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RankItem) GoString() string {
	return m.String()
}

func (m *RankValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.RankType != 0 {
		n += 1 + sovRank(uint64(m.RankType))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sozRank(uint64(m.Rank))
	}
	if m.Value1 != 0 {
		n += 1 + sozRank(uint64(m.Value1))
	}
	if m.Value2 != 0 {
		n += 1 + sozRank(uint64(m.Value2))
	}
	if m.Value3 != 0 {
		n += 1 + sozRank(uint64(m.Value3))
	}
	if m.Value4 != 0 {
		n += 1 + sozRank(uint64(m.Value4))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRank(uint64(len(k))) + 1 + len(v) + sovRank(uint64(len(v)))
			n += mapEntrySize + 1 + sovRank(uint64(mapEntrySize))
		}
	}
	if m.Shard != 0 {
		n += 1 + sozRank(uint64(m.Shard))
	}
	if m.CreatedAt != 0 {
		n += 1 + sozRank(uint64(m.CreatedAt))
	}
	return n
}

func (m *RankAndScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sozRank(uint64(m.Rank))
	}
	if m.Score != 0 {
		n += 1 + sozRank(uint64(m.Score))
	}
	return n
}

func (m *RankItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovRank(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovRank(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovRank(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovRank(uint64(m.Power))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovRank(uint64(m.CreatedAt))
	}
	if m.Fashion != 0 {
		n += 1 + sovRank(uint64(m.Fashion))
	}
	return n
}

func sovRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRank(x uint64) (n int) {
	return sovRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RankValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankType", wireType)
			}
			m.RankType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Rank = int64(v)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value1", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Value1 = int64(v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value2", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Value2 = int64(v)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value3", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Value3 = int64(v)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value4", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Value4 = int64(v)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRank
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRank
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Shard = int64(v)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.CreatedAt = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankAndScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankAndScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankAndScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Rank = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Score = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fashion", wireType)
			}
			m.Fashion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fashion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRank = fmt.Errorf("proto: unexpected end of group")
)
