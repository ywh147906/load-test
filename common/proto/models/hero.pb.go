// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/hero.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Hero struct {
	Id    int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Attrs map[int64]int64      `protobuf:"bytes,2,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Skill []*HeroSkillAndStone `protobuf:"bytes,3,rep,name=skill,proto3" json:"skill,omitempty"`
	// 装备（map的key对应equip_slot表的id）
	EquipSlot    map[int64]*HeroEquipSlot `protobuf:"bytes,4,rep,name=equip_slot,json=equipSlot,proto3" json:"equip_slot,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CombatValue  *CombatValue             `protobuf:"bytes,5,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	Buff         []int64                  `protobuf:"varint,6,rep,packed,name=buff,proto3" json:"buff,omitempty"`
	TalentBuff   []int64                  `protobuf:"varint,7,rep,packed,name=talent_buff,json=talentBuff,proto3" json:"talent_buff,omitempty"`
	OriginId     int64                    `protobuf:"varint,8,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	SoulContract *SoulContract            `protobuf:"bytes,9,opt,name=soul_contract,json=soulContract,proto3" json:"soul_contract,omitempty"`
	// 共鸣状态，key为equip_resonance表id，
	// value 1:达成未激活 2:已激活
	Resonance map[int64]ResonanceStatus `protobuf:"bytes,10,rep,name=resonance,proto3" json:"resonance,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=models.ResonanceStatus"`
	Fashion   *HeroFashion              `protobuf:"bytes,11,opt,name=fashion,proto3" json:"fashion,omitempty"`
}

func (m *Hero) Reset()      { *m = Hero{} }
func (*Hero) ProtoMessage() {}
func (*Hero) Descriptor() ([]byte, []int) {
	return fileDescriptor_176cc9bd7e6049ec, []int{0}
}
func (m *Hero) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hero) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hero.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hero) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hero.Merge(m, src)
}
func (m *Hero) XXX_Size() int {
	return m.Size()
}
func (m *Hero) XXX_DiscardUnknown() {
	xxx_messageInfo_Hero.DiscardUnknown(m)
}

var xxx_messageInfo_Hero proto.InternalMessageInfo

func (m *Hero) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hero) GetAttrs() map[int64]int64 {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *Hero) GetSkill() []*HeroSkillAndStone {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *Hero) GetEquipSlot() map[int64]*HeroEquipSlot {
	if m != nil {
		return m.EquipSlot
	}
	return nil
}

func (m *Hero) GetCombatValue() *CombatValue {
	if m != nil {
		return m.CombatValue
	}
	return nil
}

func (m *Hero) GetBuff() []int64 {
	if m != nil {
		return m.Buff
	}
	return nil
}

func (m *Hero) GetTalentBuff() []int64 {
	if m != nil {
		return m.TalentBuff
	}
	return nil
}

func (m *Hero) GetOriginId() int64 {
	if m != nil {
		return m.OriginId
	}
	return 0
}

func (m *Hero) GetSoulContract() *SoulContract {
	if m != nil {
		return m.SoulContract
	}
	return nil
}

func (m *Hero) GetResonance() map[int64]ResonanceStatus {
	if m != nil {
		return m.Resonance
	}
	return nil
}

func (m *Hero) GetFashion() *HeroFashion {
	if m != nil {
		return m.Fashion
	}
	return nil
}

func (*Hero) XXX_MessageName() string {
	return "models.Hero"
}

type HeroSkillAndStone struct {
	SkillId int64   `protobuf:"varint,1,opt,name=skillId,proto3" json:"skillId,omitempty"`
	Stones  []int64 `protobuf:"varint,2,rep,packed,name=stones,proto3" json:"stones,omitempty"`
}

func (m *HeroSkillAndStone) Reset()      { *m = HeroSkillAndStone{} }
func (*HeroSkillAndStone) ProtoMessage() {}
func (*HeroSkillAndStone) Descriptor() ([]byte, []int) {
	return fileDescriptor_176cc9bd7e6049ec, []int{1}
}
func (m *HeroSkillAndStone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroSkillAndStone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroSkillAndStone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroSkillAndStone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroSkillAndStone.Merge(m, src)
}
func (m *HeroSkillAndStone) XXX_Size() int {
	return m.Size()
}
func (m *HeroSkillAndStone) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroSkillAndStone.DiscardUnknown(m)
}

var xxx_messageInfo_HeroSkillAndStone proto.InternalMessageInfo

func (m *HeroSkillAndStone) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *HeroSkillAndStone) GetStones() []int64 {
	if m != nil {
		return m.Stones
	}
	return nil
}

func (*HeroSkillAndStone) XXX_MessageName() string {
	return "models.HeroSkillAndStone"
}

type HeroSkillItem struct {
	Skill []int64 `protobuf:"varint,1,rep,packed,name=skill,proto3" json:"skill,omitempty"`
}

func (m *HeroSkillItem) Reset()      { *m = HeroSkillItem{} }
func (*HeroSkillItem) ProtoMessage() {}
func (*HeroSkillItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_176cc9bd7e6049ec, []int{2}
}
func (m *HeroSkillItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroSkillItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroSkillItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroSkillItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroSkillItem.Merge(m, src)
}
func (m *HeroSkillItem) XXX_Size() int {
	return m.Size()
}
func (m *HeroSkillItem) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroSkillItem.DiscardUnknown(m)
}

var xxx_messageInfo_HeroSkillItem proto.InternalMessageInfo

func (m *HeroSkillItem) GetSkill() []int64 {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (*HeroSkillItem) XXX_MessageName() string {
	return "models.HeroSkillItem"
}

type HeroBuffItem struct {
	Buff []int64 `protobuf:"varint,1,rep,packed,name=buff,proto3" json:"buff,omitempty"`
}

func (m *HeroBuffItem) Reset()      { *m = HeroBuffItem{} }
func (*HeroBuffItem) ProtoMessage() {}
func (*HeroBuffItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_176cc9bd7e6049ec, []int{3}
}
func (m *HeroBuffItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroBuffItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroBuffItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroBuffItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroBuffItem.Merge(m, src)
}
func (m *HeroBuffItem) XXX_Size() int {
	return m.Size()
}
func (m *HeroBuffItem) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroBuffItem.DiscardUnknown(m)
}

var xxx_messageInfo_HeroBuffItem proto.InternalMessageInfo

func (m *HeroBuffItem) GetBuff() []int64 {
	if m != nil {
		return m.Buff
	}
	return nil
}

func (*HeroBuffItem) XXX_MessageName() string {
	return "models.HeroBuffItem"
}

type HeroEquipSlot struct {
	Star        int64  `protobuf:"varint,1,opt,name=star,proto3" json:"star,omitempty"`
	EquipId     string `protobuf:"bytes,2,opt,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"`
	EquipItemId int64  `protobuf:"varint,3,opt,name=equip_item_id,json=equipItemId,proto3" json:"equip_item_id,omitempty"`
	MeltLevel   int64  `protobuf:"varint,4,opt,name=melt_level,json=meltLevel,proto3" json:"melt_level,omitempty"`
	Enchant     *Affix `protobuf:"bytes,5,opt,name=enchant,proto3" json:"enchant,omitempty"`
}

func (m *HeroEquipSlot) Reset()      { *m = HeroEquipSlot{} }
func (*HeroEquipSlot) ProtoMessage() {}
func (*HeroEquipSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_176cc9bd7e6049ec, []int{4}
}
func (m *HeroEquipSlot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroEquipSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroEquipSlot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroEquipSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroEquipSlot.Merge(m, src)
}
func (m *HeroEquipSlot) XXX_Size() int {
	return m.Size()
}
func (m *HeroEquipSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroEquipSlot.DiscardUnknown(m)
}

var xxx_messageInfo_HeroEquipSlot proto.InternalMessageInfo

func (m *HeroEquipSlot) GetStar() int64 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *HeroEquipSlot) GetEquipId() string {
	if m != nil {
		return m.EquipId
	}
	return ""
}

func (m *HeroEquipSlot) GetEquipItemId() int64 {
	if m != nil {
		return m.EquipItemId
	}
	return 0
}

func (m *HeroEquipSlot) GetMeltLevel() int64 {
	if m != nil {
		return m.MeltLevel
	}
	return 0
}

func (m *HeroEquipSlot) GetEnchant() *Affix {
	if m != nil {
		return m.Enchant
	}
	return nil
}

func (*HeroEquipSlot) XXX_MessageName() string {
	return "models.HeroEquipSlot"
}

type HeroAttr struct {
	Fixed   map[int64]int64 `protobuf:"bytes,1,rep,name=fixed,proto3" json:"fixed,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Percent map[int64]int64 `protobuf:"bytes,2,rep,name=percent,proto3" json:"percent,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *HeroAttr) Reset()      { *m = HeroAttr{} }
func (*HeroAttr) ProtoMessage() {}
func (*HeroAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_176cc9bd7e6049ec, []int{5}
}
func (m *HeroAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroAttr.Merge(m, src)
}
func (m *HeroAttr) XXX_Size() int {
	return m.Size()
}
func (m *HeroAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroAttr.DiscardUnknown(m)
}

var xxx_messageInfo_HeroAttr proto.InternalMessageInfo

func (m *HeroAttr) GetFixed() map[int64]int64 {
	if m != nil {
		return m.Fixed
	}
	return nil
}

func (m *HeroAttr) GetPercent() map[int64]int64 {
	if m != nil {
		return m.Percent
	}
	return nil
}

func (*HeroAttr) XXX_MessageName() string {
	return "models.HeroAttr"
}

type CombatValue struct {
	Total   int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Details map[int64]int64 `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *CombatValue) Reset()      { *m = CombatValue{} }
func (*CombatValue) ProtoMessage() {}
func (*CombatValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_176cc9bd7e6049ec, []int{6}
}
func (m *CombatValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CombatValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CombatValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CombatValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CombatValue.Merge(m, src)
}
func (m *CombatValue) XXX_Size() int {
	return m.Size()
}
func (m *CombatValue) XXX_DiscardUnknown() {
	xxx_messageInfo_CombatValue.DiscardUnknown(m)
}

var xxx_messageInfo_CombatValue proto.InternalMessageInfo

func (m *CombatValue) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *CombatValue) GetDetails() map[int64]int64 {
	if m != nil {
		return m.Details
	}
	return nil
}

func (*CombatValue) XXX_MessageName() string {
	return "models.CombatValue"
}

// 魂契
type SoulContract struct {
	//  分别对应soul_contract表里的rank和level
	Rank  int64 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Level int64 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *SoulContract) Reset()      { *m = SoulContract{} }
func (*SoulContract) ProtoMessage() {}
func (*SoulContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_176cc9bd7e6049ec, []int{7}
}
func (m *SoulContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoulContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoulContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoulContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoulContract.Merge(m, src)
}
func (m *SoulContract) XXX_Size() int {
	return m.Size()
}
func (m *SoulContract) XXX_DiscardUnknown() {
	xxx_messageInfo_SoulContract.DiscardUnknown(m)
}

var xxx_messageInfo_SoulContract proto.InternalMessageInfo

func (m *SoulContract) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *SoulContract) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (*SoulContract) XXX_MessageName() string {
	return "models.SoulContract"
}

// 时装
type HeroFashion struct {
	Dressed int64           `protobuf:"varint,1,opt,name=dressed,proto3" json:"dressed,omitempty"`
	Data    map[int64]int64 `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *HeroFashion) Reset()      { *m = HeroFashion{} }
func (*HeroFashion) ProtoMessage() {}
func (*HeroFashion) Descriptor() ([]byte, []int) {
	return fileDescriptor_176cc9bd7e6049ec, []int{8}
}
func (m *HeroFashion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroFashion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroFashion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroFashion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroFashion.Merge(m, src)
}
func (m *HeroFashion) XXX_Size() int {
	return m.Size()
}
func (m *HeroFashion) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroFashion.DiscardUnknown(m)
}

var xxx_messageInfo_HeroFashion proto.InternalMessageInfo

func (m *HeroFashion) GetDressed() int64 {
	if m != nil {
		return m.Dressed
	}
	return 0
}

func (m *HeroFashion) GetData() map[int64]int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*HeroFashion) XXX_MessageName() string {
	return "models.HeroFashion"
}
func init() {
	proto.RegisterType((*Hero)(nil), "models.Hero")
	proto.RegisterMapType((map[int64]int64)(nil), "models.Hero.AttrsEntry")
	proto.RegisterMapType((map[int64]*HeroEquipSlot)(nil), "models.Hero.EquipSlotEntry")
	proto.RegisterMapType((map[int64]ResonanceStatus)(nil), "models.Hero.ResonanceEntry")
	proto.RegisterType((*HeroSkillAndStone)(nil), "models.HeroSkillAndStone")
	proto.RegisterType((*HeroSkillItem)(nil), "models.HeroSkillItem")
	proto.RegisterType((*HeroBuffItem)(nil), "models.HeroBuffItem")
	proto.RegisterType((*HeroEquipSlot)(nil), "models.HeroEquipSlot")
	proto.RegisterType((*HeroAttr)(nil), "models.HeroAttr")
	proto.RegisterMapType((map[int64]int64)(nil), "models.HeroAttr.FixedEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "models.HeroAttr.PercentEntry")
	proto.RegisterType((*CombatValue)(nil), "models.CombatValue")
	proto.RegisterMapType((map[int64]int64)(nil), "models.CombatValue.DetailsEntry")
	proto.RegisterType((*SoulContract)(nil), "models.SoulContract")
	proto.RegisterType((*HeroFashion)(nil), "models.HeroFashion")
	proto.RegisterMapType((map[int64]int64)(nil), "models.HeroFashion.DataEntry")
}

func init() { proto.RegisterFile("proto/models/hero.proto", fileDescriptor_176cc9bd7e6049ec) }

var fileDescriptor_176cc9bd7e6049ec = []byte{
	// 815 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xf3, 0x44,
	0x14, 0xcd, 0xc4, 0xf9, 0xbd, 0x4e, 0x22, 0x18, 0x3e, 0xa8, 0x9b, 0x52, 0x37, 0xb2, 0x84, 0x88,
	0x84, 0x92, 0xa8, 0x45, 0xa2, 0x6d, 0x76, 0xfd, 0x15, 0x91, 0x40, 0x42, 0x8e, 0x60, 0xc1, 0x26,
	0x9a, 0xda, 0x13, 0x6a, 0xd5, 0x9e, 0x29, 0xf6, 0xa4, 0x6a, 0xdf, 0x02, 0x89, 0x25, 0x2f, 0x80,
	0x78, 0x11, 0xba, 0xec, 0xb2, 0x4b, 0x48, 0x36, 0x2c, 0x58, 0xf0, 0x08, 0x68, 0x66, 0xec, 0xc4,
	0xf9, 0x9a, 0x4d, 0x76, 0xbe, 0xf7, 0x9c, 0x73, 0x73, 0xef, 0xcc, 0x99, 0x1b, 0xd8, 0xb9, 0x8f,
	0xb9, 0xe0, 0x83, 0x88, 0xfb, 0x34, 0x4c, 0x06, 0xb7, 0x34, 0xe6, 0x7d, 0x95, 0xc1, 0x15, 0x9d,
	0x6a, 0x7f, 0xba, 0x46, 0xa0, 0x3f, 0xcf, 0x82, 0xfb, 0x88, 0x32, 0xa1, 0x59, 0x6d, 0x6b, 0x1d,
	0x65, 0xb3, 0x28, 0xd1, 0x88, 0xf3, 0x67, 0x19, 0x4a, 0x5f, 0xd3, 0x98, 0xe3, 0x16, 0x14, 0x03,
	0xdf, 0x42, 0x1d, 0xd4, 0x35, 0xdc, 0x62, 0xe0, 0xe3, 0x1e, 0x94, 0x89, 0x10, 0x71, 0x62, 0x15,
	0x3b, 0x46, 0xd7, 0x3c, 0xda, 0xe9, 0x6b, 0x71, 0x5f, 0x92, 0xfb, 0x67, 0x12, 0xb9, 0x62, 0x22,
	0x7e, 0x72, 0x35, 0x0b, 0x0f, 0xa0, 0x9c, 0xdc, 0x05, 0x61, 0x68, 0x19, 0x8a, 0xbe, 0x9b, 0xa7,
	0x8f, 0x25, 0x70, 0xc6, 0xfc, 0xb1, 0xe0, 0x8c, 0xba, 0x9a, 0x87, 0x87, 0x00, 0xaa, 0xcb, 0x49,
	0x12, 0x72, 0x61, 0x95, 0x94, 0x6a, 0x6f, 0xed, 0x47, 0xae, 0x24, 0x3c, 0x0e, 0xb9, 0xd0, 0x3f,
	0x54, 0xa7, 0x59, 0x8c, 0xbf, 0x82, 0x86, 0xc7, 0xa3, 0x1b, 0x22, 0x26, 0x0f, 0x24, 0x9c, 0x51,
	0xab, 0xdc, 0x41, 0x5d, 0xf3, 0xe8, 0xa3, 0x4c, 0x7d, 0xa1, 0xb0, 0x1f, 0x24, 0xe4, 0x9a, 0xde,
	0x2a, 0xc0, 0x18, 0x4a, 0x37, 0xb3, 0xe9, 0xd4, 0xaa, 0x74, 0x8c, 0xae, 0xe1, 0xaa, 0x6f, 0x7c,
	0x00, 0xa6, 0x20, 0x21, 0x65, 0x62, 0xa2, 0xa0, 0xaa, 0x82, 0x40, 0xa7, 0xce, 0x25, 0x61, 0x0f,
	0xea, 0x3c, 0x0e, 0x7e, 0x0a, 0xd8, 0x24, 0xf0, 0xad, 0x9a, 0x3a, 0x9f, 0x9a, 0x4e, 0x8c, 0x7c,
	0x7c, 0x0a, 0xcd, 0x84, 0xcf, 0xc2, 0x89, 0xc7, 0x99, 0x88, 0x89, 0x27, 0xac, 0xba, 0x6a, 0xe5,
	0x5d, 0xd6, 0xca, 0x98, 0xcf, 0xc2, 0x8b, 0x14, 0x73, 0x1b, 0x49, 0x2e, 0xc2, 0xa7, 0x50, 0x8f,
	0x69, 0xc2, 0x19, 0x61, 0x1e, 0xb5, 0x60, 0xc3, 0xfc, 0x6e, 0x86, 0xa6, 0xf3, 0x2f, 0xd9, 0xb8,
	0x07, 0xd5, 0x29, 0x49, 0x6e, 0x03, 0xce, 0x2c, 0x73, 0x7d, 0x74, 0x29, 0xbc, 0xd6, 0x90, 0x9b,
	0x71, 0xda, 0x27, 0x00, 0xab, 0x0b, 0xc3, 0x1f, 0x80, 0x71, 0x47, 0x9f, 0xd2, 0x9b, 0x96, 0x9f,
	0xf8, 0x1d, 0x94, 0xf5, 0x39, 0x16, 0x55, 0x4e, 0x07, 0xc3, 0xe2, 0x09, 0x6a, 0x8f, 0xa1, 0xb5,
	0x7e, 0x0b, 0x1b, 0xd4, 0x5f, 0xe4, 0xd5, 0xe6, 0xd1, 0xc7, 0xf9, 0x56, 0x96, 0xe2, 0x7c, 0xd1,
	0xef, 0xa1, 0xb5, 0x3e, 0xda, 0x86, 0xa2, 0xbd, 0x7c, 0xd1, 0xd6, 0xca, 0x7d, 0x4b, 0xe1, 0x58,
	0x10, 0x31, 0x4b, 0x72, 0x65, 0x9d, 0x2b, 0xf8, 0xf0, 0x8d, 0xd9, 0xb0, 0x05, 0x55, 0x65, 0xb7,
	0x51, 0x66, 0xed, 0x2c, 0xc4, 0x9f, 0x40, 0x25, 0x91, 0x14, 0x6d, 0x70, 0xc3, 0x4d, 0x23, 0xe7,
	0x33, 0x68, 0x2e, 0xcb, 0x8c, 0x04, 0x8d, 0xe4, 0xe9, 0x68, 0x67, 0x23, 0xc5, 0xd3, 0x81, 0xe3,
	0x40, 0x43, 0xd2, 0xa4, 0x43, 0x14, 0x2b, 0xb3, 0x16, 0x5a, 0x59, 0xcb, 0xf9, 0x03, 0xe9, 0x5a,
	0xcb, 0x53, 0x90, 0xac, 0x44, 0x90, 0x38, 0xed, 0x45, 0x7d, 0xe3, 0x5d, 0xa8, 0xe9, 0x87, 0x10,
	0xf8, 0x6a, 0xda, 0xba, 0x5b, 0x55, 0xf1, 0xc8, 0xc7, 0x0e, 0x34, 0x53, 0x48, 0xd0, 0x48, 0xe2,
	0x86, 0xd2, 0x99, 0x1a, 0x17, 0x34, 0x1a, 0xf9, 0x78, 0x1f, 0x20, 0xa2, 0xa1, 0x98, 0x84, 0xf4,
	0x81, 0x86, 0x56, 0x49, 0x11, 0xea, 0x32, 0xf3, 0x8d, 0x4c, 0xe0, 0xcf, 0xa1, 0x4a, 0x99, 0x77,
	0x4b, 0x98, 0x48, 0x5f, 0x49, 0x33, 0x3b, 0xca, 0xb3, 0xe9, 0x34, 0x78, 0x74, 0x33, 0xd4, 0xf9,
	0x17, 0x41, 0x4d, 0x36, 0x2b, 0x9d, 0x82, 0x0f, 0xa1, 0x3c, 0x0d, 0x1e, 0xa9, 0xaf, 0xc6, 0x79,
	0xcf, 0x97, 0x92, 0xd0, 0xbf, 0x96, 0x68, 0xba, 0x00, 0x14, 0x13, 0x1f, 0x43, 0xf5, 0x9e, 0xc6,
	0x1e, 0x65, 0x22, 0xdd, 0x18, 0xfb, 0x6f, 0x44, 0xdf, 0x69, 0x5c, 0xcb, 0x32, 0xb6, 0x74, 0xe7,
	0xaa, 0xda, 0x56, 0xee, 0x1c, 0x42, 0x23, 0x5f, 0x72, 0x1b, 0xad, 0xf3, 0x1b, 0x02, 0x33, 0xb7,
	0x27, 0x24, 0x53, 0x70, 0x41, 0xc2, 0x54, 0xad, 0x03, 0x3c, 0x84, 0xaa, 0x4f, 0x05, 0x09, 0xc2,
	0x6c, 0x0d, 0x76, 0x36, 0xec, 0x98, 0xfe, 0xa5, 0xa6, 0xa4, 0x73, 0xa5, 0x02, 0xd9, 0x5d, 0x1e,
	0xd8, 0xaa, 0xbb, 0x13, 0x68, 0xe4, 0x37, 0x87, 0xf4, 0x4d, 0x4c, 0xd8, 0x5d, 0xe6, 0x1b, 0xf9,
	0x2d, 0xd5, 0xfa, 0xce, 0x53, 0xb5, 0x0a, 0x9c, 0x5f, 0x11, 0x98, 0xb9, 0x25, 0x20, 0x1f, 0x80,
	0x1f, 0xd3, 0x24, 0xa1, 0xcb, 0x07, 0x90, 0x86, 0xf8, 0x10, 0x4a, 0x3e, 0x11, 0x64, 0xd3, 0x6d,
	0xa5, 0xe2, 0xfe, 0x25, 0x11, 0x44, 0x4f, 0xa5, 0xa8, 0xed, 0x63, 0xa8, 0x2f, 0x53, 0xdb, 0xcc,
	0x73, 0xfe, 0xed, 0xeb, 0xdf, 0x76, 0xe1, 0xf7, 0xb9, 0x8d, 0x9e, 0xe7, 0x36, 0x7a, 0x99, 0xdb,
	0xe8, 0xaf, 0xb9, 0x8d, 0xfe, 0x99, 0xdb, 0x85, 0xff, 0xe6, 0x36, 0xfa, 0x65, 0x61, 0x17, 0x9e,
	0x17, 0x36, 0x7a, 0x59, 0xd8, 0x85, 0xd7, 0x85, 0x5d, 0xf8, 0xf1, 0xc0, 0xe3, 0x01, 0xeb, 0x25,
	0x34, 0x7e, 0xa0, 0xf1, 0xc0, 0xe3, 0x51, 0xc4, 0xd9, 0x20, 0xff, 0x07, 0x76, 0x53, 0x51, 0xd1,
	0x97, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x02, 0x0c, 0x4d, 0x4c, 0x16, 0x07, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHero.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroSkillAndStone.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroSkillItem.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroBuffItem.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroEquipSlot.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroAttr.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCombatValue.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSoulContract.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroFashion.Get().(proto.Message)
	})
}

var poolHero = &sync.Pool{New: func() interface{} { return &Hero{} }}

func (m *Hero) ReleasePool() { m.Reset(); poolHero.Put(m); m = nil }

var poolHeroSkillAndStone = &sync.Pool{New: func() interface{} { return &HeroSkillAndStone{} }}

func (m *HeroSkillAndStone) ReleasePool() { m.Reset(); poolHeroSkillAndStone.Put(m); m = nil }

var poolHeroSkillItem = &sync.Pool{New: func() interface{} { return &HeroSkillItem{} }}

func (m *HeroSkillItem) ReleasePool() { m.Reset(); poolHeroSkillItem.Put(m); m = nil }

var poolHeroBuffItem = &sync.Pool{New: func() interface{} { return &HeroBuffItem{} }}

func (m *HeroBuffItem) ReleasePool() { m.Reset(); poolHeroBuffItem.Put(m); m = nil }

var poolHeroEquipSlot = &sync.Pool{New: func() interface{} { return &HeroEquipSlot{} }}

func (m *HeroEquipSlot) ReleasePool() { m.Reset(); poolHeroEquipSlot.Put(m); m = nil }

var poolHeroAttr = &sync.Pool{New: func() interface{} { return &HeroAttr{} }}

func (m *HeroAttr) ReleasePool() { m.Reset(); poolHeroAttr.Put(m); m = nil }

var poolCombatValue = &sync.Pool{New: func() interface{} { return &CombatValue{} }}

func (m *CombatValue) ReleasePool() { m.Reset(); poolCombatValue.Put(m); m = nil }

var poolSoulContract = &sync.Pool{New: func() interface{} { return &SoulContract{} }}

func (m *SoulContract) ReleasePool() { m.Reset(); poolSoulContract.Put(m); m = nil }

var poolHeroFashion = &sync.Pool{New: func() interface{} { return &HeroFashion{} }}

func (m *HeroFashion) ReleasePool() { m.Reset(); poolHeroFashion.Put(m); m = nil }
func (this *Hero) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hero)
	if !ok {
		that2, ok := that.(Hero)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return false
	}
	for i := range this.Attrs {
		if this.Attrs[i] != that1.Attrs[i] {
			return false
		}
	}
	if len(this.Skill) != len(that1.Skill) {
		return false
	}
	for i := range this.Skill {
		if !this.Skill[i].Equal(that1.Skill[i]) {
			return false
		}
	}
	if len(this.EquipSlot) != len(that1.EquipSlot) {
		return false
	}
	for i := range this.EquipSlot {
		if !this.EquipSlot[i].Equal(that1.EquipSlot[i]) {
			return false
		}
	}
	if !this.CombatValue.Equal(that1.CombatValue) {
		return false
	}
	if len(this.Buff) != len(that1.Buff) {
		return false
	}
	for i := range this.Buff {
		if this.Buff[i] != that1.Buff[i] {
			return false
		}
	}
	if len(this.TalentBuff) != len(that1.TalentBuff) {
		return false
	}
	for i := range this.TalentBuff {
		if this.TalentBuff[i] != that1.TalentBuff[i] {
			return false
		}
	}
	if this.OriginId != that1.OriginId {
		return false
	}
	if !this.SoulContract.Equal(that1.SoulContract) {
		return false
	}
	if len(this.Resonance) != len(that1.Resonance) {
		return false
	}
	for i := range this.Resonance {
		if this.Resonance[i] != that1.Resonance[i] {
			return false
		}
	}
	if !this.Fashion.Equal(that1.Fashion) {
		return false
	}
	return true
}
func (this *HeroSkillAndStone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroSkillAndStone)
	if !ok {
		that2, ok := that.(HeroSkillAndStone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if len(this.Stones) != len(that1.Stones) {
		return false
	}
	for i := range this.Stones {
		if this.Stones[i] != that1.Stones[i] {
			return false
		}
	}
	return true
}
func (this *HeroSkillItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroSkillItem)
	if !ok {
		that2, ok := that.(HeroSkillItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Skill) != len(that1.Skill) {
		return false
	}
	for i := range this.Skill {
		if this.Skill[i] != that1.Skill[i] {
			return false
		}
	}
	return true
}
func (this *HeroBuffItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroBuffItem)
	if !ok {
		that2, ok := that.(HeroBuffItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Buff) != len(that1.Buff) {
		return false
	}
	for i := range this.Buff {
		if this.Buff[i] != that1.Buff[i] {
			return false
		}
	}
	return true
}
func (this *HeroEquipSlot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroEquipSlot)
	if !ok {
		that2, ok := that.(HeroEquipSlot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Star != that1.Star {
		return false
	}
	if this.EquipId != that1.EquipId {
		return false
	}
	if this.EquipItemId != that1.EquipItemId {
		return false
	}
	if this.MeltLevel != that1.MeltLevel {
		return false
	}
	if !this.Enchant.Equal(that1.Enchant) {
		return false
	}
	return true
}
func (this *HeroAttr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroAttr)
	if !ok {
		that2, ok := that.(HeroAttr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fixed) != len(that1.Fixed) {
		return false
	}
	for i := range this.Fixed {
		if this.Fixed[i] != that1.Fixed[i] {
			return false
		}
	}
	if len(this.Percent) != len(that1.Percent) {
		return false
	}
	for i := range this.Percent {
		if this.Percent[i] != that1.Percent[i] {
			return false
		}
	}
	return true
}
func (this *CombatValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CombatValue)
	if !ok {
		that2, ok := that.(CombatValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if this.Details[i] != that1.Details[i] {
			return false
		}
	}
	return true
}
func (this *SoulContract) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SoulContract)
	if !ok {
		that2, ok := that.(SoulContract)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *HeroFashion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroFashion)
	if !ok {
		that2, ok := that.(HeroFashion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Dressed != that1.Dressed {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (m *Hero) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hero) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hero) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fashion != nil {
		{
			size, err := m.Fashion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Resonance) > 0 {
		for k := range m.Resonance {
			v := m.Resonance[k]
			baseI := i
			i = encodeVarintHero(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.SoulContract != nil {
		{
			size, err := m.SoulContract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.OriginId != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.OriginId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TalentBuff) > 0 {
		dAtA4 := make([]byte, len(m.TalentBuff)*10)
		var j3 int
		for _, num1 := range m.TalentBuff {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintHero(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Buff) > 0 {
		dAtA6 := make([]byte, len(m.Buff)*10)
		var j5 int
		for _, num1 := range m.Buff {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintHero(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if m.CombatValue != nil {
		{
			size, err := m.CombatValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EquipSlot) > 0 {
		for k := range m.EquipSlot {
			v := m.EquipSlot[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHero(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Skill) > 0 {
		for iNdEx := len(m.Skill) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Skill[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHero(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Attrs) > 0 {
		for k := range m.Attrs {
			v := m.Attrs[k]
			baseI := i
			i = encodeVarintHero(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeroSkillAndStone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroSkillAndStone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroSkillAndStone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stones) > 0 {
		dAtA10 := make([]byte, len(m.Stones)*10)
		var j9 int
		for _, num1 := range m.Stones {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintHero(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x12
	}
	if m.SkillId != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeroSkillItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroSkillItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroSkillItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Skill) > 0 {
		dAtA12 := make([]byte, len(m.Skill)*10)
		var j11 int
		for _, num1 := range m.Skill {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintHero(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeroBuffItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroBuffItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroBuffItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buff) > 0 {
		dAtA14 := make([]byte, len(m.Buff)*10)
		var j13 int
		for _, num1 := range m.Buff {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintHero(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeroEquipSlot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroEquipSlot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroEquipSlot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enchant != nil {
		{
			size, err := m.Enchant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MeltLevel != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.MeltLevel))
		i--
		dAtA[i] = 0x20
	}
	if m.EquipItemId != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.EquipItemId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EquipId) > 0 {
		i -= len(m.EquipId)
		copy(dAtA[i:], m.EquipId)
		i = encodeVarintHero(dAtA, i, uint64(len(m.EquipId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Star != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeroAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Percent) > 0 {
		for k := range m.Percent {
			v := m.Percent[k]
			baseI := i
			i = encodeVarintHero(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Fixed) > 0 {
		for k := range m.Fixed {
			v := m.Fixed[k]
			baseI := i
			i = encodeVarintHero(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CombatValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombatValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CombatValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		for k := range m.Details {
			v := m.Details[k]
			baseI := i
			i = encodeVarintHero(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SoulContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoulContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoulContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Rank != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeroFashion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroFashion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroFashion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i = encodeVarintHero(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Dressed != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.Dressed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHero(dAtA []byte, offset int, v uint64) int {
	offset -= sovHero(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Hero) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attrs")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attrs == nil {
		w.RawString("null")
	} else if len(m.Attrs) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttrs := len(m.Attrs)
		for k, v := range m.Attrs {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttrs--
			if mlAttrs != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill")
	w.RawByte('"')
	w.RawByte(':')
	if m.Skill == nil {
		w.RawString("null")
	} else if len(m.Skill) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Skill {
			v.JsonBytes(w)
			if i != len(m.Skill)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equip_slot")
	w.RawByte('"')
	w.RawByte(':')
	if m.EquipSlot == nil {
		w.RawString("null")
	} else if len(m.EquipSlot) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquipSlot := len(m.EquipSlot)
		for k, v := range m.EquipSlot {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlEquipSlot--
			if mlEquipSlot != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("combat_value")
	w.RawByte('"')
	w.RawByte(':')
	m.CombatValue.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff")
	w.RawByte('"')
	w.RawByte(':')
	if m.Buff == nil {
		w.RawString("null")
	} else if len(m.Buff) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Buff {
			w.Int64(int64(v))
			if i != len(m.Buff)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("talent_buff")
	w.RawByte('"')
	w.RawByte(':')
	if m.TalentBuff == nil {
		w.RawString("null")
	} else if len(m.TalentBuff) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.TalentBuff {
			w.Int64(int64(v))
			if i != len(m.TalentBuff)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.OriginId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("origin_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OriginId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("soul_contract")
	w.RawByte('"')
	w.RawByte(':')
	m.SoulContract.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("resonance")
	w.RawByte('"')
	w.RawByte(':')
	if m.Resonance == nil {
		w.RawString("null")
	} else if len(m.Resonance) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlResonance := len(m.Resonance)
		for k, v := range m.Resonance {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlResonance--
			if mlResonance != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("fashion")
	w.RawByte('"')
	w.RawByte(':')
	m.Fashion.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroSkillAndStone) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SkillId != 0 {
		w.RawByte('"')
		w.RawString("skillId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("stones")
	w.RawByte('"')
	w.RawByte(':')
	if m.Stones == nil {
		w.RawString("null")
	} else if len(m.Stones) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Stones {
			w.Int64(int64(v))
			if i != len(m.Stones)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroSkillItem) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("skill")
	w.RawByte('"')
	w.RawByte(':')
	if m.Skill == nil {
		w.RawString("null")
	} else if len(m.Skill) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Skill {
			w.Int64(int64(v))
			if i != len(m.Skill)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroBuffItem) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("buff")
	w.RawByte('"')
	w.RawByte(':')
	if m.Buff == nil {
		w.RawString("null")
	} else if len(m.Buff) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Buff {
			w.Int64(int64(v))
			if i != len(m.Buff)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroEquipSlot) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Star != 0 {
		w.RawByte('"')
		w.RawString("star")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Star))
		needWriteComma = true
	}
	if m.EquipId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("equip_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.EquipId)
		needWriteComma = true
	}
	if m.EquipItemId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("equip_item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EquipItemId))
		needWriteComma = true
	}
	if m.MeltLevel != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("melt_level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MeltLevel))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("enchant")
	w.RawByte('"')
	w.RawByte(':')
	m.Enchant.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroAttr) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("fixed")
	w.RawByte('"')
	w.RawByte(':')
	if m.Fixed == nil {
		w.RawString("null")
	} else if len(m.Fixed) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlFixed := len(m.Fixed)
		for k, v := range m.Fixed {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlFixed--
			if mlFixed != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("percent")
	w.RawByte('"')
	w.RawByte(':')
	if m.Percent == nil {
		w.RawString("null")
	} else if len(m.Percent) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlPercent := len(m.Percent)
		for k, v := range m.Percent {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlPercent--
			if mlPercent != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CombatValue) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Total != 0 {
		w.RawByte('"')
		w.RawString("total")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Total))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("details")
	w.RawByte('"')
	w.RawByte(':')
	if m.Details == nil {
		w.RawString("null")
	} else if len(m.Details) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDetails := len(m.Details)
		for k, v := range m.Details {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlDetails--
			if mlDetails != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SoulContract) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Rank != 0 {
		w.RawByte('"')
		w.RawString("rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rank))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroFashion) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Dressed != 0 {
		w.RawByte('"')
		w.RawString("dressed")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Dressed))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	if m.Data == nil {
		w.RawString("null")
	} else if len(m.Data) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlData := len(m.Data)
		for k, v := range m.Data {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlData--
			if mlData != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Hero) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Hero) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Hero) GoString() string {
	return m.String()
}

func (m *HeroSkillAndStone) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroSkillAndStone) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroSkillAndStone) GoString() string {
	return m.String()
}

func (m *HeroSkillItem) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroSkillItem) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroSkillItem) GoString() string {
	return m.String()
}

func (m *HeroBuffItem) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroBuffItem) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroBuffItem) GoString() string {
	return m.String()
}

func (m *HeroEquipSlot) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroEquipSlot) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroEquipSlot) GoString() string {
	return m.String()
}

func (m *HeroAttr) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroAttr) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroAttr) GoString() string {
	return m.String()
}

func (m *CombatValue) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CombatValue) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CombatValue) GoString() string {
	return m.String()
}

func (m *SoulContract) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SoulContract) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SoulContract) GoString() string {
	return m.String()
}

func (m *HeroFashion) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroFashion) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroFashion) GoString() string {
	return m.String()
}

func (m *Hero) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHero(uint64(m.Id))
	}
	if len(m.Attrs) > 0 {
		for k, v := range m.Attrs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHero(uint64(k)) + 1 + sovHero(uint64(v))
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if len(m.Skill) > 0 {
		for _, e := range m.Skill {
			l = e.Size()
			n += 1 + l + sovHero(uint64(l))
		}
	}
	if len(m.EquipSlot) > 0 {
		for k, v := range m.EquipSlot {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHero(uint64(l))
			}
			mapEntrySize := 1 + sovHero(uint64(k)) + l
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if m.CombatValue != nil {
		l = m.CombatValue.Size()
		n += 1 + l + sovHero(uint64(l))
	}
	if len(m.Buff) > 0 {
		l = 0
		for _, e := range m.Buff {
			l += sovHero(uint64(e))
		}
		n += 1 + sovHero(uint64(l)) + l
	}
	if len(m.TalentBuff) > 0 {
		l = 0
		for _, e := range m.TalentBuff {
			l += sovHero(uint64(e))
		}
		n += 1 + sovHero(uint64(l)) + l
	}
	if m.OriginId != 0 {
		n += 1 + sovHero(uint64(m.OriginId))
	}
	if m.SoulContract != nil {
		l = m.SoulContract.Size()
		n += 1 + l + sovHero(uint64(l))
	}
	if len(m.Resonance) > 0 {
		for k, v := range m.Resonance {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHero(uint64(k)) + 1 + sovHero(uint64(v))
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if m.Fashion != nil {
		l = m.Fashion.Size()
		n += 1 + l + sovHero(uint64(l))
	}
	return n
}

func (m *HeroSkillAndStone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkillId != 0 {
		n += 1 + sovHero(uint64(m.SkillId))
	}
	if len(m.Stones) > 0 {
		l = 0
		for _, e := range m.Stones {
			l += sovHero(uint64(e))
		}
		n += 1 + sovHero(uint64(l)) + l
	}
	return n
}

func (m *HeroSkillItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Skill) > 0 {
		l = 0
		for _, e := range m.Skill {
			l += sovHero(uint64(e))
		}
		n += 1 + sovHero(uint64(l)) + l
	}
	return n
}

func (m *HeroBuffItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buff) > 0 {
		l = 0
		for _, e := range m.Buff {
			l += sovHero(uint64(e))
		}
		n += 1 + sovHero(uint64(l)) + l
	}
	return n
}

func (m *HeroEquipSlot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Star != 0 {
		n += 1 + sovHero(uint64(m.Star))
	}
	l = len(m.EquipId)
	if l > 0 {
		n += 1 + l + sovHero(uint64(l))
	}
	if m.EquipItemId != 0 {
		n += 1 + sovHero(uint64(m.EquipItemId))
	}
	if m.MeltLevel != 0 {
		n += 1 + sovHero(uint64(m.MeltLevel))
	}
	if m.Enchant != nil {
		l = m.Enchant.Size()
		n += 1 + l + sovHero(uint64(l))
	}
	return n
}

func (m *HeroAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fixed) > 0 {
		for k, v := range m.Fixed {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHero(uint64(k)) + 1 + sovHero(uint64(v))
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if len(m.Percent) > 0 {
		for k, v := range m.Percent {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHero(uint64(k)) + 1 + sovHero(uint64(v))
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CombatValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovHero(uint64(m.Total))
	}
	if len(m.Details) > 0 {
		for k, v := range m.Details {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHero(uint64(k)) + 1 + sovHero(uint64(v))
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SoulContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovHero(uint64(m.Rank))
	}
	if m.Level != 0 {
		n += 1 + sovHero(uint64(m.Level))
	}
	return n
}

func (m *HeroFashion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dressed != 0 {
		n += 1 + sovHero(uint64(m.Dressed))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHero(uint64(k)) + 1 + sovHero(uint64(v))
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	return n
}

func sovHero(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHero(x uint64) (n int) {
	return sovHero(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Hero) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hero: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hero: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attrs[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skill = append(m.Skill, &HeroSkillAndStone{})
			if err := m.Skill[len(m.Skill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipSlot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipSlot == nil {
				m.EquipSlot = make(map[int64]*HeroEquipSlot)
			}
			var mapkey int64
			var mapvalue *HeroEquipSlot
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHero
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHero
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HeroEquipSlot{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EquipSlot[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CombatValue == nil {
				m.CombatValue = &CombatValue{}
			}
			if err := m.CombatValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Buff = append(m.Buff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHero
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHero
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Buff) == 0 {
					m.Buff = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Buff = append(m.Buff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buff", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TalentBuff = append(m.TalentBuff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHero
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHero
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TalentBuff) == 0 {
					m.TalentBuff = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TalentBuff = append(m.TalentBuff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentBuff", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginId", wireType)
			}
			m.OriginId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoulContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SoulContract == nil {
				m.SoulContract = &SoulContract{}
			}
			if err := m.SoulContract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resonance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resonance == nil {
				m.Resonance = make(map[int64]ResonanceStatus)
			}
			var mapkey int64
			var mapvalue ResonanceStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= ResonanceStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resonance[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fashion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fashion == nil {
				m.Fashion = &HeroFashion{}
			}
			if err := m.Fashion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroSkillAndStone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroSkillAndStone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroSkillAndStone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stones = append(m.Stones, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHero
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHero
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stones) == 0 {
					m.Stones = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stones = append(m.Stones, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stones", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroSkillItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroSkillItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroSkillItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Skill = append(m.Skill, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHero
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHero
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Skill) == 0 {
					m.Skill = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Skill = append(m.Skill, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroBuffItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroBuffItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroBuffItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Buff = append(m.Buff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHero
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHero
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Buff) == 0 {
					m.Buff = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Buff = append(m.Buff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buff", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroEquipSlot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroEquipSlot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroEquipSlot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipItemId", wireType)
			}
			m.EquipItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeltLevel", wireType)
			}
			m.MeltLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MeltLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enchant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enchant == nil {
				m.Enchant = &Affix{}
			}
			if err := m.Enchant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fixed == nil {
				m.Fixed = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Fixed[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Percent == nil {
				m.Percent = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Percent[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CombatValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombatValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombatValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Details[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoulContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoulContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoulContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroFashion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroFashion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroFashion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dressed", wireType)
			}
			m.Dressed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dressed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHero(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHero
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHero
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHero
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHero
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHero        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHero          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHero = fmt.Errorf("proto: unexpected end of group")
)
