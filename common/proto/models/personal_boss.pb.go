// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/personal_boss.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PersonalBoss struct {
	Floor         int64   `protobuf:"varint,1,opt,name=floor,proto3" json:"floor,omitempty"`
	BossLibraryId int64   `protobuf:"varint,2,opt,name=boss_library_id,json=bossLibraryId,proto3" json:"boss_library_id,omitempty"`
	BossBuffIds   []int64 `protobuf:"varint,3,rep,packed,name=boss_buff_ids,json=bossBuffIds,proto3" json:"boss_buff_ids,omitempty"`
}

func (m *PersonalBoss) Reset()      { *m = PersonalBoss{} }
func (*PersonalBoss) ProtoMessage() {}
func (*PersonalBoss) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad971b734b07bd9, []int{0}
}
func (m *PersonalBoss) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalBoss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalBoss.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalBoss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalBoss.Merge(m, src)
}
func (m *PersonalBoss) XXX_Size() int {
	return m.Size()
}
func (m *PersonalBoss) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalBoss.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalBoss proto.InternalMessageInfo

func (m *PersonalBoss) GetFloor() int64 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func (m *PersonalBoss) GetBossLibraryId() int64 {
	if m != nil {
		return m.BossLibraryId
	}
	return 0
}

func (m *PersonalBoss) GetBossBuffIds() []int64 {
	if m != nil {
		return m.BossBuffIds
	}
	return nil
}

func (*PersonalBoss) XXX_MessageName() string {
	return "models.PersonalBoss"
}

// 助战
type PersonalBossHelper struct {
	TotalPoint int64           `protobuf:"varint,1,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
	UsedPoint  int64           `protobuf:"varint,2,opt,name=used_point,json=usedPoint,proto3" json:"used_point,omitempty"`
	Cards      map[int64]int64 `protobuf:"bytes,3,rep,name=cards,proto3" json:"cards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *PersonalBossHelper) Reset()      { *m = PersonalBossHelper{} }
func (*PersonalBossHelper) ProtoMessage() {}
func (*PersonalBossHelper) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad971b734b07bd9, []int{1}
}
func (m *PersonalBossHelper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalBossHelper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalBossHelper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalBossHelper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalBossHelper.Merge(m, src)
}
func (m *PersonalBossHelper) XXX_Size() int {
	return m.Size()
}
func (m *PersonalBossHelper) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalBossHelper.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalBossHelper proto.InternalMessageInfo

func (m *PersonalBossHelper) GetTotalPoint() int64 {
	if m != nil {
		return m.TotalPoint
	}
	return 0
}

func (m *PersonalBossHelper) GetUsedPoint() int64 {
	if m != nil {
		return m.UsedPoint
	}
	return 0
}

func (m *PersonalBossHelper) GetCards() map[int64]int64 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (*PersonalBossHelper) XXX_MessageName() string {
	return "models.PersonalBossHelper"
}

type PersonalBossInfo struct {
	CurFloor         int64               `protobuf:"varint,1,opt,name=cur_floor,json=curFloor,proto3" json:"cur_floor,omitempty"`
	BossList         []*PersonalBoss     `protobuf:"bytes,2,rep,name=boss_list,json=bossList,proto3" json:"boss_list,omitempty"`
	MonsterAttrId    int64               `protobuf:"varint,3,opt,name=monster_attr_id,json=monsterAttrId,proto3" json:"monster_attr_id,omitempty"`
	ResetAt          int64               `protobuf:"varint,4,opt,name=reset_at,json=resetAt,proto3" json:"reset_at,omitempty"`
	Helper           *PersonalBossHelper `protobuf:"bytes,5,opt,name=helper,proto3" json:"helper,omitempty"`
	RoleLv           int64               `protobuf:"varint,6,opt,name=role_lv,json=roleLv,proto3" json:"role_lv,omitempty"`
	PassRewardId     int64               `protobuf:"varint,7,opt,name=pass_reward_id,json=passRewardId,proto3" json:"pass_reward_id,omitempty"`
	IsCompleted      bool                `protobuf:"varint,8,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	IsDrawPassReward bool                `protobuf:"varint,9,opt,name=is_draw_pass_reward,json=isDrawPassReward,proto3" json:"is_draw_pass_reward,omitempty"`
}

func (m *PersonalBossInfo) Reset()      { *m = PersonalBossInfo{} }
func (*PersonalBossInfo) ProtoMessage() {}
func (*PersonalBossInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad971b734b07bd9, []int{2}
}
func (m *PersonalBossInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalBossInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalBossInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalBossInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalBossInfo.Merge(m, src)
}
func (m *PersonalBossInfo) XXX_Size() int {
	return m.Size()
}
func (m *PersonalBossInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalBossInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalBossInfo proto.InternalMessageInfo

func (m *PersonalBossInfo) GetCurFloor() int64 {
	if m != nil {
		return m.CurFloor
	}
	return 0
}

func (m *PersonalBossInfo) GetBossList() []*PersonalBoss {
	if m != nil {
		return m.BossList
	}
	return nil
}

func (m *PersonalBossInfo) GetMonsterAttrId() int64 {
	if m != nil {
		return m.MonsterAttrId
	}
	return 0
}

func (m *PersonalBossInfo) GetResetAt() int64 {
	if m != nil {
		return m.ResetAt
	}
	return 0
}

func (m *PersonalBossInfo) GetHelper() *PersonalBossHelper {
	if m != nil {
		return m.Helper
	}
	return nil
}

func (m *PersonalBossInfo) GetRoleLv() int64 {
	if m != nil {
		return m.RoleLv
	}
	return 0
}

func (m *PersonalBossInfo) GetPassRewardId() int64 {
	if m != nil {
		return m.PassRewardId
	}
	return 0
}

func (m *PersonalBossInfo) GetIsCompleted() bool {
	if m != nil {
		return m.IsCompleted
	}
	return false
}

func (m *PersonalBossInfo) GetIsDrawPassReward() bool {
	if m != nil {
		return m.IsDrawPassReward
	}
	return false
}

func (*PersonalBossInfo) XXX_MessageName() string {
	return "models.PersonalBossInfo"
}

// 助战所需玩家信息
type HelperRole struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Nickname    string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level       int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId    int64  `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame int64  `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
}

func (m *HelperRole) Reset()      { *m = HelperRole{} }
func (*HelperRole) ProtoMessage() {}
func (*HelperRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad971b734b07bd9, []int{3}
}
func (m *HelperRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelperRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelperRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelperRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelperRole.Merge(m, src)
}
func (m *HelperRole) XXX_Size() int {
	return m.Size()
}
func (m *HelperRole) XXX_DiscardUnknown() {
	xxx_messageInfo_HelperRole.DiscardUnknown(m)
}

var xxx_messageInfo_HelperRole proto.InternalMessageInfo

func (m *HelperRole) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *HelperRole) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *HelperRole) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *HelperRole) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *HelperRole) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (*HelperRole) XXX_MessageName() string {
	return "models.HelperRole"
}

// 助战记录
type HelperRecord struct {
	Role     *HelperRole     `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Target   *HelperRole     `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Reward   map[int64]int64 `protobuf:"bytes,3,rep,name=reward,proto3" json:"reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Point    int64           `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	HelpTime int64           `protobuf:"varint,5,opt,name=help_time,json=helpTime,proto3" json:"help_time,omitempty"`
}

func (m *HelperRecord) Reset()      { *m = HelperRecord{} }
func (*HelperRecord) ProtoMessage() {}
func (*HelperRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad971b734b07bd9, []int{4}
}
func (m *HelperRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelperRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelperRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelperRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelperRecord.Merge(m, src)
}
func (m *HelperRecord) XXX_Size() int {
	return m.Size()
}
func (m *HelperRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_HelperRecord.DiscardUnknown(m)
}

var xxx_messageInfo_HelperRecord proto.InternalMessageInfo

func (m *HelperRecord) GetRole() *HelperRole {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *HelperRecord) GetTarget() *HelperRole {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *HelperRecord) GetReward() map[int64]int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *HelperRecord) GetPoint() int64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *HelperRecord) GetHelpTime() int64 {
	if m != nil {
		return m.HelpTime
	}
	return 0
}

func (*HelperRecord) XXX_MessageName() string {
	return "models.HelperRecord"
}

// 助战聊天分享信息
type HelpMessage struct {
	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Role          *HelperRole     `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	BeHelpedCount int64           `protobuf:"zigzag64,4,opt,name=be_helped_count,json=beHelpedCount,proto3" json:"be_helped_count,omitempty"`
	Records       []*HelperRecord `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
	HelperMap     map[string]bool `protobuf:"bytes,6,rep,name=helper_map,json=helperMap,proto3" json:"helper_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Expires       int64           `protobuf:"varint,8,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (m *HelpMessage) Reset()      { *m = HelpMessage{} }
func (*HelpMessage) ProtoMessage() {}
func (*HelpMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad971b734b07bd9, []int{5}
}
func (m *HelpMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelpMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelpMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelpMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelpMessage.Merge(m, src)
}
func (m *HelpMessage) XXX_Size() int {
	return m.Size()
}
func (m *HelpMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HelpMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HelpMessage proto.InternalMessageInfo

func (m *HelpMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HelpMessage) GetRole() *HelperRole {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *HelpMessage) GetBeHelpedCount() int64 {
	if m != nil {
		return m.BeHelpedCount
	}
	return 0
}

func (m *HelpMessage) GetRecords() []*HelperRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *HelpMessage) GetHelperMap() map[string]bool {
	if m != nil {
		return m.HelperMap
	}
	return nil
}

func (m *HelpMessage) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (*HelpMessage) XXX_MessageName() string {
	return "models.HelpMessage"
}

type PersonalBossHelperInfo struct {
	HelpCount  int64           `protobuf:"varint,1,opt,name=help_count,json=helpCount,proto3" json:"help_count,omitempty"`
	Records    []*HelperRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	TotalPoint int64           `protobuf:"varint,3,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
	Cd         int64           `protobuf:"varint,4,opt,name=cd,proto3" json:"cd,omitempty"`
}

func (m *PersonalBossHelperInfo) Reset()      { *m = PersonalBossHelperInfo{} }
func (*PersonalBossHelperInfo) ProtoMessage() {}
func (*PersonalBossHelperInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bad971b734b07bd9, []int{6}
}
func (m *PersonalBossHelperInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersonalBossHelperInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersonalBossHelperInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersonalBossHelperInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonalBossHelperInfo.Merge(m, src)
}
func (m *PersonalBossHelperInfo) XXX_Size() int {
	return m.Size()
}
func (m *PersonalBossHelperInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonalBossHelperInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PersonalBossHelperInfo proto.InternalMessageInfo

func (m *PersonalBossHelperInfo) GetHelpCount() int64 {
	if m != nil {
		return m.HelpCount
	}
	return 0
}

func (m *PersonalBossHelperInfo) GetRecords() []*HelperRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *PersonalBossHelperInfo) GetTotalPoint() int64 {
	if m != nil {
		return m.TotalPoint
	}
	return 0
}

func (m *PersonalBossHelperInfo) GetCd() int64 {
	if m != nil {
		return m.Cd
	}
	return 0
}

func (*PersonalBossHelperInfo) XXX_MessageName() string {
	return "models.PersonalBossHelperInfo"
}
func init() {
	proto.RegisterType((*PersonalBoss)(nil), "models.PersonalBoss")
	proto.RegisterType((*PersonalBossHelper)(nil), "models.PersonalBossHelper")
	proto.RegisterMapType((map[int64]int64)(nil), "models.PersonalBossHelper.CardsEntry")
	proto.RegisterType((*PersonalBossInfo)(nil), "models.PersonalBossInfo")
	proto.RegisterType((*HelperRole)(nil), "models.HelperRole")
	proto.RegisterType((*HelperRecord)(nil), "models.HelperRecord")
	proto.RegisterMapType((map[int64]int64)(nil), "models.HelperRecord.RewardEntry")
	proto.RegisterType((*HelpMessage)(nil), "models.HelpMessage")
	proto.RegisterMapType((map[string]bool)(nil), "models.HelpMessage.HelperMapEntry")
	proto.RegisterType((*PersonalBossHelperInfo)(nil), "models.PersonalBossHelperInfo")
}

func init() { proto.RegisterFile("proto/models/personal_boss.proto", fileDescriptor_bad971b734b07bd9) }

var fileDescriptor_bad971b734b07bd9 = []byte{
	// 844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xc7, 0x63, 0x7b, 0x93, 0xd8, 0x8f, 0xbb, 0xa5, 0x1a, 0x56, 0x60, 0x82, 0xd6, 0x1b, 0x22,
	0x58, 0x55, 0x48, 0x9b, 0x8a, 0x72, 0x29, 0x2f, 0x97, 0xb6, 0xb0, 0x22, 0xd2, 0x56, 0xaa, 0x2c,
	0x4e, 0x5c, 0x46, 0x13, 0xcf, 0x64, 0xd7, 0x5a, 0xdb, 0x63, 0xcd, 0x8c, 0x53, 0xfa, 0x15, 0x38,
	0x71, 0x83, 0x8f, 0xc0, 0x47, 0xe0, 0x23, 0xac, 0xc4, 0x65, 0x8f, 0x7b, 0x84, 0xf4, 0x82, 0x38,
	0xf1, 0x11, 0xd0, 0xbc, 0x24, 0x75, 0x37, 0x45, 0xb0, 0xb7, 0x3c, 0xff, 0xe7, 0x99, 0x79, 0xfe,
	0xcf, 0x6f, 0x66, 0x1c, 0x18, 0x37, 0x82, 0x2b, 0x7e, 0x50, 0x71, 0xca, 0x4a, 0x79, 0xd0, 0x30,
	0x21, 0x79, 0x4d, 0x4a, 0x3c, 0xe7, 0x52, 0x4e, 0x4d, 0x0a, 0x0d, 0x6c, 0x6e, 0x94, 0xdc, 0xa8,
	0x64, 0x75, 0x5b, 0xb9, 0x8a, 0x49, 0x03, 0x3b, 0xe7, 0x6e, 0xe1, 0x09, 0x97, 0x12, 0xdd, 0x83,
	0xfe, 0xa2, 0xe4, 0x5c, 0x24, 0xde, 0xd8, 0xdb, 0x0f, 0x32, 0x1b, 0xa0, 0x87, 0xf0, 0x96, 0xde,
	0x15, 0x97, 0xc5, 0x5c, 0x10, 0x71, 0x89, 0x0b, 0x9a, 0xf8, 0x26, 0x7f, 0x57, 0xcb, 0x4f, 0xac,
	0x3a, 0xa3, 0x68, 0x02, 0x46, 0xc0, 0xf3, 0x76, 0xb1, 0xc0, 0x05, 0x95, 0x49, 0x30, 0x0e, 0xf6,
	0x83, 0x2c, 0xd6, 0xe2, 0x49, 0xbb, 0x58, 0xcc, 0xa8, 0x9c, 0xfc, 0xe6, 0x01, 0xea, 0xb6, 0xfc,
	0x86, 0x95, 0x0d, 0x13, 0xe8, 0x01, 0xc4, 0x8a, 0x2b, 0x52, 0xe2, 0x86, 0x17, 0xb5, 0x72, 0xed,
	0xc1, 0x48, 0xe7, 0x5a, 0x41, 0xf7, 0x01, 0x5a, 0xc9, 0xa8, 0xcb, 0xdb, 0xf6, 0x91, 0x56, 0x6c,
	0xfa, 0x0b, 0xe8, 0xe7, 0x44, 0xb8, 0x96, 0xf1, 0xe1, 0x47, 0x53, 0x3b, 0xec, 0x74, 0xbb, 0xd5,
	0xf4, 0x54, 0xd7, 0x7d, 0x5d, 0x2b, 0x71, 0x99, 0xd9, 0x35, 0xa3, 0x23, 0x80, 0x6b, 0x11, 0xed,
	0x41, 0xf0, 0x9c, 0x5d, 0x3a, 0x0b, 0xfa, 0xa7, 0xa6, 0xb2, 0x24, 0x65, 0xcb, 0x5c, 0x5b, 0x1b,
	0x7c, 0xee, 0x1f, 0x79, 0x93, 0xbf, 0x7c, 0xd8, 0xeb, 0xb6, 0x98, 0xd5, 0x0b, 0x8e, 0xde, 0x87,
	0x28, 0x6f, 0x05, 0xee, 0x82, 0x0c, 0xf3, 0x56, 0x3c, 0x36, 0x2c, 0x3f, 0x81, 0xc8, 0xb1, 0x94,
	0x7a, 0x0c, 0x6d, 0xf6, 0xde, 0x6d, 0x66, 0xb3, 0xd0, 0xb2, 0x95, 0x4a, 0xe3, 0xaf, 0x78, 0x2d,
	0x15, 0x13, 0x98, 0x28, 0x25, 0x34, 0xfe, 0xc0, 0xe2, 0x77, 0xf2, 0xb1, 0x52, 0x62, 0x46, 0xd1,
	0x7b, 0x10, 0x0a, 0x26, 0x99, 0xc2, 0x44, 0x25, 0x77, 0x4c, 0xc1, 0xd0, 0xc4, 0xc7, 0x0a, 0x1d,
	0xc2, 0xe0, 0x99, 0x99, 0x3e, 0xe9, 0x8f, 0xbd, 0xfd, 0xf8, 0x70, 0xf4, 0xef, 0x7c, 0x32, 0x57,
	0x89, 0xde, 0x85, 0xa1, 0xe0, 0x25, 0xc3, 0xe5, 0x32, 0x19, 0x98, 0xdd, 0x06, 0x3a, 0x7c, 0xb2,
	0x44, 0x1f, 0xc2, 0x6e, 0x43, 0xa4, 0xc4, 0x82, 0x5d, 0x10, 0x41, 0xb5, 0x9d, 0xa1, 0xc9, 0xef,
	0x68, 0x35, 0x33, 0xe2, 0x8c, 0xa2, 0x0f, 0x60, 0xa7, 0x90, 0x38, 0xe7, 0x55, 0x53, 0x32, 0xc5,
	0x68, 0x12, 0x8e, 0xbd, 0xfd, 0x30, 0x8b, 0x0b, 0x79, 0xba, 0x96, 0xd0, 0x23, 0x78, 0xbb, 0x90,
	0x98, 0x0a, 0x72, 0x81, 0x3b, 0x1b, 0x26, 0x91, 0xa9, 0xdc, 0x2b, 0xe4, 0x57, 0x82, 0x5c, 0x9c,
	0x6f, 0xf6, 0x9c, 0xfc, 0xe4, 0x01, 0x38, 0x8f, 0xbc, 0x64, 0x1b, 0x7f, 0x05, 0x35, 0x90, 0x23,
	0xeb, 0x6f, 0x46, 0xd1, 0x08, 0xc2, 0xba, 0xc8, 0x9f, 0xd7, 0xa4, 0xb2, 0x27, 0x16, 0x65, 0x9b,
	0x58, 0x1f, 0x65, 0xc9, 0x96, 0xac, 0x74, 0x04, 0x6d, 0xa0, 0x4f, 0x8c, 0x2c, 0x89, 0x22, 0x86,
	0xad, 0x45, 0x17, 0x5a, 0xc1, 0x0e, 0xe2, 0x92, 0x0b, 0xa1, 0xb7, 0xec, 0x9b, 0x7c, 0x6c, 0xb5,
	0xc7, 0x5a, 0x9a, 0xfc, 0xe0, 0xc3, 0x8e, 0x73, 0xc6, 0x72, 0x2e, 0x28, 0x7a, 0x08, 0x77, 0xb4,
	0x19, 0x63, 0x2c, 0x3e, 0x44, 0x6b, 0xda, 0xd7, 0xee, 0x33, 0x93, 0x47, 0x1f, 0xc3, 0x40, 0x11,
	0xf1, 0x94, 0xd9, 0x1b, 0x7d, 0x7b, 0xa5, 0xab, 0x40, 0x47, 0x30, 0x70, 0x80, 0xec, 0x1d, 0x1f,
	0xbf, 0x56, 0x6b, 0x3a, 0x4f, 0x2d, 0x2b, 0x7b, 0xbd, 0x5d, 0xbd, 0x1e, 0xda, 0x3e, 0x1b, 0x3b,
	0x9a, 0x0d, 0xf4, 0xd0, 0xfa, 0xa4, 0xb1, 0x2a, 0x36, 0x43, 0x85, 0x5a, 0xf8, 0xb6, 0xa8, 0xd8,
	0xe8, 0x33, 0x88, 0x3b, 0x3b, 0xbd, 0xd1, 0x9b, 0xf8, 0xd5, 0x87, 0x58, 0x5b, 0x3a, 0x63, 0x52,
	0x92, 0xa7, 0x0c, 0xed, 0x82, 0xbf, 0x39, 0x22, 0xbf, 0xb8, 0x66, 0x13, 0xfc, 0x07, 0x1b, 0xfd,
	0xd5, 0x61, 0xd8, 0x5c, 0x46, 0x8a, 0x73, 0xde, 0x3a, 0xff, 0x28, 0xbb, 0x3b, 0x67, 0xa6, 0x98,
	0x9e, 0x6a, 0x11, 0x4d, 0x61, 0x28, 0xcc, 0xec, 0x32, 0xe9, 0xdf, 0x7c, 0x4f, 0x5d, 0x30, 0xd9,
	0xba, 0x08, 0x1d, 0x03, 0xd8, 0x1b, 0x8e, 0x2b, 0xd2, 0x24, 0x03, 0xb3, 0x64, 0xd2, 0x5d, 0xe2,
	0x8c, 0xbb, 0xe5, 0x67, 0xa4, 0xb1, 0x34, 0xa3, 0x67, 0xeb, 0x18, 0x25, 0x30, 0x64, 0xdf, 0x37,
	0x85, 0x60, 0xd2, 0x5c, 0xeb, 0x20, 0x5b, 0x87, 0xa3, 0x2f, 0x61, 0xf7, 0xe6, 0xb2, 0x2e, 0xba,
	0xe8, 0x16, 0x74, 0x61, 0x17, 0xdd, 0xcf, 0x1e, 0xbc, 0xb3, 0xfd, 0x22, 0xcd, 0x47, 0xe5, 0xbe,
	0x75, 0xed, 0x40, 0xd8, 0x83, 0x30, 0x8e, 0xb6, 0x20, 0xf8, 0xff, 0x07, 0xc2, 0x6b, 0xdf, 0xdb,
	0x60, 0xeb, 0x7b, 0xbb, 0x0b, 0x7e, 0xbe, 0x7e, 0x0b, 0x7e, 0x4e, 0x4f, 0xce, 0x5e, 0xfd, 0x91,
	0xf6, 0x7e, 0x59, 0xa5, 0xde, 0x8b, 0x55, 0xea, 0xbd, 0x5c, 0xa5, 0xde, 0xef, 0xab, 0xd4, 0xfb,
	0x73, 0x95, 0xf6, 0xfe, 0x5e, 0xa5, 0xde, 0x8f, 0x57, 0x69, 0xef, 0xc5, 0x55, 0xea, 0xbd, 0xbc,
	0x4a, 0x7b, 0xaf, 0xae, 0xd2, 0xde, 0x77, 0x0f, 0x72, 0x5e, 0xd4, 0x8f, 0x24, 0x13, 0x4b, 0x26,
	0x0e, 0x72, 0x5e, 0x55, 0xbc, 0x3e, 0xe8, 0xfe, 0x09, 0xcd, 0x07, 0x26, 0xfa, 0xf4, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x32, 0x21, 0x09, 0x7d, 0xc5, 0x06, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPersonalBoss.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPersonalBossHelper.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPersonalBossInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHelperRole.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHelperRecord.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHelpMessage.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPersonalBossHelperInfo.Get().(proto.Message)
	})
}

var poolPersonalBoss = &sync.Pool{New: func() interface{} { return &PersonalBoss{} }}

func (m *PersonalBoss) ReleasePool() { m.Reset(); poolPersonalBoss.Put(m); m = nil }

var poolPersonalBossHelper = &sync.Pool{New: func() interface{} { return &PersonalBossHelper{} }}

func (m *PersonalBossHelper) ReleasePool() { m.Reset(); poolPersonalBossHelper.Put(m); m = nil }

var poolPersonalBossInfo = &sync.Pool{New: func() interface{} { return &PersonalBossInfo{} }}

func (m *PersonalBossInfo) ReleasePool() { m.Reset(); poolPersonalBossInfo.Put(m); m = nil }

var poolHelperRole = &sync.Pool{New: func() interface{} { return &HelperRole{} }}

func (m *HelperRole) ReleasePool() { m.Reset(); poolHelperRole.Put(m); m = nil }

var poolHelperRecord = &sync.Pool{New: func() interface{} { return &HelperRecord{} }}

func (m *HelperRecord) ReleasePool() { m.Reset(); poolHelperRecord.Put(m); m = nil }

var poolHelpMessage = &sync.Pool{New: func() interface{} { return &HelpMessage{} }}

func (m *HelpMessage) ReleasePool() { m.Reset(); poolHelpMessage.Put(m); m = nil }

var poolPersonalBossHelperInfo = &sync.Pool{New: func() interface{} { return &PersonalBossHelperInfo{} }}

func (m *PersonalBossHelperInfo) ReleasePool() { m.Reset(); poolPersonalBossHelperInfo.Put(m); m = nil }
func (this *PersonalBoss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PersonalBoss)
	if !ok {
		that2, ok := that.(PersonalBoss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Floor != that1.Floor {
		return false
	}
	if this.BossLibraryId != that1.BossLibraryId {
		return false
	}
	if len(this.BossBuffIds) != len(that1.BossBuffIds) {
		return false
	}
	for i := range this.BossBuffIds {
		if this.BossBuffIds[i] != that1.BossBuffIds[i] {
			return false
		}
	}
	return true
}
func (this *PersonalBossHelper) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PersonalBossHelper)
	if !ok {
		that2, ok := that.(PersonalBossHelper)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalPoint != that1.TotalPoint {
		return false
	}
	if this.UsedPoint != that1.UsedPoint {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *PersonalBossInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PersonalBossInfo)
	if !ok {
		that2, ok := that.(PersonalBossInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurFloor != that1.CurFloor {
		return false
	}
	if len(this.BossList) != len(that1.BossList) {
		return false
	}
	for i := range this.BossList {
		if !this.BossList[i].Equal(that1.BossList[i]) {
			return false
		}
	}
	if this.MonsterAttrId != that1.MonsterAttrId {
		return false
	}
	if this.ResetAt != that1.ResetAt {
		return false
	}
	if !this.Helper.Equal(that1.Helper) {
		return false
	}
	if this.RoleLv != that1.RoleLv {
		return false
	}
	if this.PassRewardId != that1.PassRewardId {
		return false
	}
	if this.IsCompleted != that1.IsCompleted {
		return false
	}
	if this.IsDrawPassReward != that1.IsDrawPassReward {
		return false
	}
	return true
}
func (this *HelperRole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelperRole)
	if !ok {
		that2, ok := that.(HelperRole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	return true
}
func (this *HelperRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelperRecord)
	if !ok {
		that2, ok := that.(HelperRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Role.Equal(that1.Role) {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	if this.Point != that1.Point {
		return false
	}
	if this.HelpTime != that1.HelpTime {
		return false
	}
	return true
}
func (this *HelpMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelpMessage)
	if !ok {
		that2, ok := that.(HelpMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Role.Equal(that1.Role) {
		return false
	}
	if this.BeHelpedCount != that1.BeHelpedCount {
		return false
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	if len(this.HelperMap) != len(that1.HelperMap) {
		return false
	}
	for i := range this.HelperMap {
		if this.HelperMap[i] != that1.HelperMap[i] {
			return false
		}
	}
	if this.Expires != that1.Expires {
		return false
	}
	return true
}
func (this *PersonalBossHelperInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PersonalBossHelperInfo)
	if !ok {
		that2, ok := that.(PersonalBossHelperInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HelpCount != that1.HelpCount {
		return false
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	if this.TotalPoint != that1.TotalPoint {
		return false
	}
	if this.Cd != that1.Cd {
		return false
	}
	return true
}
func (m *PersonalBoss) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalBoss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersonalBoss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BossBuffIds) > 0 {
		dAtA2 := make([]byte, len(m.BossBuffIds)*10)
		var j1 int
		for _, num1 := range m.BossBuffIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPersonalBoss(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.BossLibraryId != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.BossLibraryId))
		i--
		dAtA[i] = 0x10
	}
	if m.Floor != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.Floor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PersonalBossHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalBossHelper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersonalBossHelper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cards) > 0 {
		for k := range m.Cards {
			v := m.Cards[k]
			baseI := i
			i = encodeVarintPersonalBoss(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintPersonalBoss(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPersonalBoss(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.UsedPoint != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.UsedPoint))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalPoint != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.TotalPoint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PersonalBossInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalBossInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersonalBossInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDrawPassReward {
		i--
		if m.IsDrawPassReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsCompleted {
		i--
		if m.IsCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.PassRewardId != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.PassRewardId))
		i--
		dAtA[i] = 0x38
	}
	if m.RoleLv != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.RoleLv))
		i--
		dAtA[i] = 0x30
	}
	if m.Helper != nil {
		{
			size, err := m.Helper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPersonalBoss(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ResetAt != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.ResetAt))
		i--
		dAtA[i] = 0x20
	}
	if m.MonsterAttrId != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.MonsterAttrId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BossList) > 0 {
		for iNdEx := len(m.BossList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BossList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPersonalBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CurFloor != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.CurFloor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HelperRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelperRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelperRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvatarFrame != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintPersonalBoss(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintPersonalBoss(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelperRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelperRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelperRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HelpTime != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.HelpTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Point != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Reward) > 0 {
		for k := range m.Reward {
			v := m.Reward[k]
			baseI := i
			i = encodeVarintPersonalBoss(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintPersonalBoss(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPersonalBoss(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPersonalBoss(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPersonalBoss(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelpMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelpMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelpMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expires != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.Expires))
		i--
		dAtA[i] = 0x40
	}
	if len(m.HelperMap) > 0 {
		for k := range m.HelperMap {
			v := m.HelperMap[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPersonalBoss(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPersonalBoss(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPersonalBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BeHelpedCount != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64((uint64(m.BeHelpedCount)<<1)^uint64((m.BeHelpedCount>>63))))
		i--
		dAtA[i] = 0x20
	}
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPersonalBoss(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPersonalBoss(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersonalBossHelperInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonalBossHelperInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersonalBossHelperInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cd != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.Cd))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalPoint != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.TotalPoint))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPersonalBoss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.HelpCount != 0 {
		i = encodeVarintPersonalBoss(dAtA, i, uint64(m.HelpCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPersonalBoss(dAtA []byte, offset int, v uint64) int {
	offset -= sovPersonalBoss(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *PersonalBoss) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Floor != 0 {
		w.RawByte('"')
		w.RawString("floor")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Floor))
		needWriteComma = true
	}
	if m.BossLibraryId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("boss_library_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossLibraryId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_buff_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.BossBuffIds == nil {
		w.RawString("null")
	} else if len(m.BossBuffIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BossBuffIds {
			w.Int64(int64(v))
			if i != len(m.BossBuffIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PersonalBossHelper) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TotalPoint != 0 {
		w.RawByte('"')
		w.RawString("total_point")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalPoint))
		needWriteComma = true
	}
	if m.UsedPoint != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("used_point")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UsedPoint))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("cards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Cards == nil {
		w.RawString("null")
	} else if len(m.Cards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCards := len(m.Cards)
		for k, v := range m.Cards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCards--
			if mlCards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PersonalBossInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CurFloor != 0 {
		w.RawByte('"')
		w.RawString("cur_floor")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurFloor))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.BossList == nil {
		w.RawString("null")
	} else if len(m.BossList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.BossList {
			v.JsonBytes(w)
			if i != len(m.BossList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.MonsterAttrId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("monster_attr_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterAttrId))
		needWriteComma = true
	}
	if m.ResetAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("reset_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ResetAt))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("helper")
	w.RawByte('"')
	w.RawByte(':')
	m.Helper.JsonBytes(w)
	needWriteComma = true
	if m.RoleLv != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_lv")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoleLv))
		needWriteComma = true
	}
	if m.PassRewardId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pass_reward_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PassRewardId))
		needWriteComma = true
	}
	if m.IsCompleted {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_completed")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsCompleted)
		needWriteComma = true
	}
	if m.IsDrawPassReward {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_draw_pass_reward")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsDrawPassReward)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HelperRole) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HelperRecord) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	m.Role.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("target")
	w.RawByte('"')
	w.RawByte(':')
	m.Target.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlReward := len(m.Reward)
		for k, v := range m.Reward {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlReward--
			if mlReward != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Point != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("point")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Point))
		needWriteComma = true
	}
	if m.HelpTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("help_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HelpTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HelpMessage) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	m.Role.JsonBytes(w)
	needWriteComma = true
	if m.BeHelpedCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("be_helped_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BeHelpedCount))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("records")
	w.RawByte('"')
	w.RawByte(':')
	if m.Records == nil {
		w.RawString("null")
	} else if len(m.Records) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Records {
			v.JsonBytes(w)
			if i != len(m.Records)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("helper_map")
	w.RawByte('"')
	w.RawByte(':')
	if m.HelperMap == nil {
		w.RawString("null")
	} else if len(m.HelperMap) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlHelperMap := len(m.HelperMap)
		for k, v := range m.HelperMap {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlHelperMap--
			if mlHelperMap != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Expires != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expires")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Expires))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PersonalBossHelperInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.HelpCount != 0 {
		w.RawByte('"')
		w.RawString("help_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HelpCount))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("records")
	w.RawByte('"')
	w.RawByte(':')
	if m.Records == nil {
		w.RawString("null")
	} else if len(m.Records) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Records {
			v.JsonBytes(w)
			if i != len(m.Records)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.TotalPoint != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_point")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalPoint))
		needWriteComma = true
	}
	if m.Cd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cd")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cd))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PersonalBoss) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PersonalBoss) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PersonalBoss) GoString() string {
	return m.String()
}

func (m *PersonalBossHelper) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PersonalBossHelper) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PersonalBossHelper) GoString() string {
	return m.String()
}

func (m *PersonalBossInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PersonalBossInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PersonalBossInfo) GoString() string {
	return m.String()
}

func (m *HelperRole) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HelperRole) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HelperRole) GoString() string {
	return m.String()
}

func (m *HelperRecord) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HelperRecord) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HelperRecord) GoString() string {
	return m.String()
}

func (m *HelpMessage) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HelpMessage) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HelpMessage) GoString() string {
	return m.String()
}

func (m *PersonalBossHelperInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PersonalBossHelperInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PersonalBossHelperInfo) GoString() string {
	return m.String()
}

func (m *PersonalBoss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Floor != 0 {
		n += 1 + sovPersonalBoss(uint64(m.Floor))
	}
	if m.BossLibraryId != 0 {
		n += 1 + sovPersonalBoss(uint64(m.BossLibraryId))
	}
	if len(m.BossBuffIds) > 0 {
		l = 0
		for _, e := range m.BossBuffIds {
			l += sovPersonalBoss(uint64(e))
		}
		n += 1 + sovPersonalBoss(uint64(l)) + l
	}
	return n
}

func (m *PersonalBossHelper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalPoint != 0 {
		n += 1 + sovPersonalBoss(uint64(m.TotalPoint))
	}
	if m.UsedPoint != 0 {
		n += 1 + sovPersonalBoss(uint64(m.UsedPoint))
	}
	if len(m.Cards) > 0 {
		for k, v := range m.Cards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPersonalBoss(uint64(k)) + 1 + sovPersonalBoss(uint64(v))
			n += mapEntrySize + 1 + sovPersonalBoss(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PersonalBossInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurFloor != 0 {
		n += 1 + sovPersonalBoss(uint64(m.CurFloor))
	}
	if len(m.BossList) > 0 {
		for _, e := range m.BossList {
			l = e.Size()
			n += 1 + l + sovPersonalBoss(uint64(l))
		}
	}
	if m.MonsterAttrId != 0 {
		n += 1 + sovPersonalBoss(uint64(m.MonsterAttrId))
	}
	if m.ResetAt != 0 {
		n += 1 + sovPersonalBoss(uint64(m.ResetAt))
	}
	if m.Helper != nil {
		l = m.Helper.Size()
		n += 1 + l + sovPersonalBoss(uint64(l))
	}
	if m.RoleLv != 0 {
		n += 1 + sovPersonalBoss(uint64(m.RoleLv))
	}
	if m.PassRewardId != 0 {
		n += 1 + sovPersonalBoss(uint64(m.PassRewardId))
	}
	if m.IsCompleted {
		n += 2
	}
	if m.IsDrawPassReward {
		n += 2
	}
	return n
}

func (m *HelperRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovPersonalBoss(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovPersonalBoss(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovPersonalBoss(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovPersonalBoss(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovPersonalBoss(uint64(m.AvatarFrame))
	}
	return n
}

func (m *HelperRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovPersonalBoss(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovPersonalBoss(uint64(l))
	}
	if len(m.Reward) > 0 {
		for k, v := range m.Reward {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPersonalBoss(uint64(k)) + 1 + sovPersonalBoss(uint64(v))
			n += mapEntrySize + 1 + sovPersonalBoss(uint64(mapEntrySize))
		}
	}
	if m.Point != 0 {
		n += 1 + sovPersonalBoss(uint64(m.Point))
	}
	if m.HelpTime != 0 {
		n += 1 + sovPersonalBoss(uint64(m.HelpTime))
	}
	return n
}

func (m *HelpMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPersonalBoss(uint64(l))
	}
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovPersonalBoss(uint64(l))
	}
	if m.BeHelpedCount != 0 {
		n += 1 + sozPersonalBoss(uint64(m.BeHelpedCount))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovPersonalBoss(uint64(l))
		}
	}
	if len(m.HelperMap) > 0 {
		for k, v := range m.HelperMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPersonalBoss(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovPersonalBoss(uint64(mapEntrySize))
		}
	}
	if m.Expires != 0 {
		n += 1 + sovPersonalBoss(uint64(m.Expires))
	}
	return n
}

func (m *PersonalBossHelperInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HelpCount != 0 {
		n += 1 + sovPersonalBoss(uint64(m.HelpCount))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovPersonalBoss(uint64(l))
		}
	}
	if m.TotalPoint != 0 {
		n += 1 + sovPersonalBoss(uint64(m.TotalPoint))
	}
	if m.Cd != 0 {
		n += 1 + sovPersonalBoss(uint64(m.Cd))
	}
	return n
}

func sovPersonalBoss(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPersonalBoss(x uint64) (n int) {
	return sovPersonalBoss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PersonalBoss) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonalBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalBoss: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalBoss: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossLibraryId", wireType)
			}
			m.BossLibraryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossLibraryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPersonalBoss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BossBuffIds = append(m.BossBuffIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPersonalBoss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPersonalBoss
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPersonalBoss
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BossBuffIds) == 0 {
					m.BossBuffIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPersonalBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BossBuffIds = append(m.BossBuffIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BossBuffIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonalBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalBossHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonalBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalBossHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalBossHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPoint", wireType)
			}
			m.TotalPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPoint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedPoint", wireType)
			}
			m.UsedPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedPoint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cards == nil {
				m.Cards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPersonalBoss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPersonalBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPersonalBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPersonalBoss(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPersonalBoss
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Cards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonalBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalBossInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonalBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalBossInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalBossInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurFloor", wireType)
			}
			m.CurFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurFloor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BossList = append(m.BossList, &PersonalBoss{})
			if err := m.BossList[len(m.BossList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterAttrId", wireType)
			}
			m.MonsterAttrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterAttrId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetAt", wireType)
			}
			m.ResetAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Helper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Helper == nil {
				m.Helper = &PersonalBossHelper{}
			}
			if err := m.Helper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleLv", wireType)
			}
			m.RoleLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleLv |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassRewardId", wireType)
			}
			m.PassRewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassRewardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCompleted = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDrawPassReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDrawPassReward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPersonalBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelperRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonalBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelperRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelperRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonalBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelperRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonalBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelperRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelperRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &HelperRole{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &HelperRole{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPersonalBoss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPersonalBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPersonalBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPersonalBoss(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPersonalBoss
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reward[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpTime", wireType)
			}
			m.HelpTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonalBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelpMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonalBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelpMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelpMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &HelperRole{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeHelpedCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.BeHelpedCount = int64(v)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &HelperRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelperMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HelperMap == nil {
				m.HelperMap = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPersonalBoss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPersonalBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPersonalBoss
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPersonalBoss
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPersonalBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPersonalBoss(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPersonalBoss
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HelperMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonalBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonalBossHelperInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonalBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalBossHelperInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalBossHelperInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpCount", wireType)
			}
			m.HelpCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &HelperRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPoint", wireType)
			}
			m.TotalPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPoint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cd", wireType)
			}
			m.Cd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonalBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPersonalBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPersonalBoss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPersonalBoss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPersonalBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPersonalBoss
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPersonalBoss
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPersonalBoss
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPersonalBoss        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPersonalBoss          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPersonalBoss = fmt.Errorf("proto: unexpected end of group")
)
