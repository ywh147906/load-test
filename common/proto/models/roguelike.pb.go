// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/roguelike.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RoguelikeStatus int32

const (
	RoguelikeStatus_RoguelikeStatusStatusMatch    RoguelikeStatus = 0
	RoguelikeStatus_RoguelikeStatusStatusFighting RoguelikeStatus = 1
)

var RoguelikeStatus_name = map[int32]string{
	0: "RoguelikeStatusStatusMatch",
	1: "RoguelikeStatusStatusFighting",
}

var RoguelikeStatus_value = map[string]int32{
	"RoguelikeStatusStatusMatch":    0,
	"RoguelikeStatusStatusFighting": 1,
}

func (RoguelikeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3f15cb3b7cebcd9, []int{0}
}

// 房间信息
type RoguelikeRoom struct {
	// room_id
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 房主Id
	OwnerId string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// 副本Id
	RoguelikeId int64 `protobuf:"zigzag64,3,opt,name=roguelike_id,json=roguelikeId,proto3" json:"roguelike_id,omitempty"`
	// 角色信息
	RoleInfos []*RoguelikeRoleInfo `protobuf:"bytes,4,rep,name=roleInfos,proto3" json:"roleInfos,omitempty"`
	// 房间开发状态
	IsOpen bool `protobuf:"varint,5,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	// 房间状态
	Status RoguelikeStatus `protobuf:"varint,6,opt,name=status,proto3,enum=models.RoguelikeStatus" json:"status,omitempty"`
	// 更新时间
	UpdateAt int64 `protobuf:"varint,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	// 战斗力要求
	CombatNeed int64 `protobuf:"varint,8,opt,name=combat_need,json=combatNeed,proto3" json:"combat_need,omitempty"`
}

func (m *RoguelikeRoom) Reset()      { *m = RoguelikeRoom{} }
func (*RoguelikeRoom) ProtoMessage() {}
func (*RoguelikeRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3f15cb3b7cebcd9, []int{0}
}
func (m *RoguelikeRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeRoom.Merge(m, src)
}
func (m *RoguelikeRoom) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeRoom.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeRoom proto.InternalMessageInfo

func (m *RoguelikeRoom) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoguelikeRoom) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *RoguelikeRoom) GetRoguelikeId() int64 {
	if m != nil {
		return m.RoguelikeId
	}
	return 0
}

func (m *RoguelikeRoom) GetRoleInfos() []*RoguelikeRoleInfo {
	if m != nil {
		return m.RoleInfos
	}
	return nil
}

func (m *RoguelikeRoom) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (m *RoguelikeRoom) GetStatus() RoguelikeStatus {
	if m != nil {
		return m.Status
	}
	return RoguelikeStatus_RoguelikeStatusStatusMatch
}

func (m *RoguelikeRoom) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *RoguelikeRoom) GetCombatNeed() int64 {
	if m != nil {
		return m.CombatNeed
	}
	return 0
}

func (*RoguelikeRoom) XXX_MessageName() string {
	return "models.RoguelikeRoom"
}

type RoguelikeRoleInfo struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Nickname    string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level       int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId    int64  `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame int64  `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power       int64  `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	GuildId     string `protobuf:"bytes,7,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildName   string `protobuf:"bytes,8,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	IsReady     bool   `protobuf:"varint,9,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	ConfigId    int64  `protobuf:"varint,10,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	IsRobot     bool   `protobuf:"varint,11,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	CardId      int64  `protobuf:"varint,12,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (m *RoguelikeRoleInfo) Reset()      { *m = RoguelikeRoleInfo{} }
func (*RoguelikeRoleInfo) ProtoMessage() {}
func (*RoguelikeRoleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3f15cb3b7cebcd9, []int{1}
}
func (m *RoguelikeRoleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeRoleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeRoleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeRoleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeRoleInfo.Merge(m, src)
}
func (m *RoguelikeRoleInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeRoleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeRoleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeRoleInfo proto.InternalMessageInfo

func (m *RoguelikeRoleInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoguelikeRoleInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RoguelikeRoleInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RoguelikeRoleInfo) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *RoguelikeRoleInfo) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *RoguelikeRoleInfo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *RoguelikeRoleInfo) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *RoguelikeRoleInfo) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *RoguelikeRoleInfo) GetIsReady() bool {
	if m != nil {
		return m.IsReady
	}
	return false
}

func (m *RoguelikeRoleInfo) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *RoguelikeRoleInfo) GetIsRobot() bool {
	if m != nil {
		return m.IsRobot
	}
	return false
}

func (m *RoguelikeRoleInfo) GetCardId() int64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (*RoguelikeRoleInfo) XXX_MessageName() string {
	return "models.RoguelikeRoleInfo"
}

type BossSkillList struct {
	Skills []int64 `protobuf:"varint,1,rep,packed,name=skills,proto3" json:"skills,omitempty"`
}

func (m *BossSkillList) Reset()      { *m = BossSkillList{} }
func (*BossSkillList) ProtoMessage() {}
func (*BossSkillList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3f15cb3b7cebcd9, []int{2}
}
func (m *BossSkillList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossSkillList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossSkillList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossSkillList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossSkillList.Merge(m, src)
}
func (m *BossSkillList) XXX_Size() int {
	return m.Size()
}
func (m *BossSkillList) XXX_DiscardUnknown() {
	xxx_messageInfo_BossSkillList.DiscardUnknown(m)
}

var xxx_messageInfo_BossSkillList proto.InternalMessageInfo

func (m *BossSkillList) GetSkills() []int64 {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (*BossSkillList) XXX_MessageName() string {
	return "models.BossSkillList"
}
func init() {
	proto.RegisterEnum("models.RoguelikeStatus", RoguelikeStatus_name, RoguelikeStatus_value)
	proto.RegisterType((*RoguelikeRoom)(nil), "models.RoguelikeRoom")
	proto.RegisterType((*RoguelikeRoleInfo)(nil), "models.RoguelikeRoleInfo")
	proto.RegisterType((*BossSkillList)(nil), "models.BossSkillList")
}

func init() { proto.RegisterFile("proto/models/roguelike.proto", fileDescriptor_f3f15cb3b7cebcd9) }

var fileDescriptor_f3f15cb3b7cebcd9 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x41, 0x6f, 0xd3, 0x3e,
	0x1c, 0x8d, 0x9b, 0x35, 0x4d, 0xdc, 0xed, 0xff, 0x1f, 0x16, 0x62, 0xe9, 0x60, 0x5e, 0xd6, 0x0b,
	0x11, 0x12, 0xad, 0x34, 0x0e, 0x9c, 0xd9, 0x61, 0x52, 0x24, 0x36, 0xa4, 0x8c, 0x13, 0x97, 0x2a,
	0x8d, 0xdd, 0xce, 0x6a, 0x62, 0x57, 0xb6, 0xdb, 0x89, 0x6f, 0xc1, 0xb7, 0x80, 0x8f, 0xb2, 0xe3,
	0x8e, 0x13, 0x27, 0x48, 0x2f, 0x1c, 0xf9, 0x08, 0xc8, 0x76, 0x57, 0xa6, 0x8d, 0x4b, 0xa5, 0xf7,
	0xde, 0xcf, 0xaf, 0xcf, 0xef, 0xe7, 0xc0, 0x17, 0x73, 0x29, 0xb4, 0x18, 0xd6, 0x82, 0xd0, 0x4a,
	0x0d, 0xa5, 0x98, 0x2e, 0x68, 0xc5, 0x66, 0x74, 0x60, 0x69, 0x14, 0x38, 0xbe, 0xff, 0xb5, 0x05,
	0x77, 0xf2, 0x3b, 0x2d, 0x17, 0xa2, 0x46, 0x7b, 0xb0, 0x23, 0x85, 0xa8, 0x47, 0x8c, 0xc4, 0x20,
	0x01, 0xa9, 0x9f, 0x07, 0x06, 0x66, 0x04, 0xf5, 0x60, 0x28, 0xae, 0x38, 0x95, 0x46, 0x69, 0x25,
	0x20, 0x8d, 0xf2, 0x8e, 0xc5, 0x19, 0x41, 0x47, 0x70, 0x7b, 0xf3, 0x07, 0x46, 0xf6, 0x13, 0x90,
	0xa2, 0xbc, 0xbb, 0xe1, 0x32, 0x82, 0xde, 0xc2, 0x48, 0x8a, 0x8a, 0x66, 0x7c, 0x22, 0x54, 0xbc,
	0x95, 0xf8, 0x69, 0xf7, 0xb8, 0x37, 0x70, 0x21, 0x06, 0xf7, 0x02, 0xb8, 0x89, 0xfc, 0xef, 0xac,
	0xc9, 0xc3, 0xd4, 0x48, 0xcc, 0x29, 0x8f, 0xdb, 0x09, 0x48, 0xc3, 0x3c, 0x60, 0xea, 0xc3, 0x9c,
	0x72, 0x34, 0x84, 0x81, 0xd2, 0x85, 0x5e, 0xa8, 0x38, 0x48, 0x40, 0xfa, 0xdf, 0xf1, 0xde, 0x23,
	0xbb, 0x0b, 0x2b, 0xe7, 0xeb, 0x31, 0xf4, 0x1c, 0x46, 0x8b, 0x39, 0x29, 0x34, 0x1d, 0x15, 0x3a,
	0xee, 0xd8, 0xbb, 0x85, 0x8e, 0x78, 0xa7, 0xd1, 0x21, 0xec, 0x96, 0xa2, 0x1e, 0x17, 0x7a, 0xc4,
	0x29, 0x25, 0x71, 0x68, 0x65, 0xe8, 0xa8, 0x73, 0x4a, 0x49, 0xff, 0x7b, 0x0b, 0x3e, 0x79, 0x14,
	0xd4, 0xb5, 0x55, 0xd1, 0xbb, 0xb6, 0x22, 0xd3, 0x56, 0x65, 0xee, 0xbb, 0x0f, 0x43, 0xce, 0xca,
	0x19, 0x2f, 0x6a, 0xba, 0x6e, 0x6b, 0x83, 0xd1, 0x53, 0xd8, 0xae, 0xe8, 0x92, 0x56, 0xb6, 0x27,
	0x3f, 0x77, 0xc0, 0xc4, 0x2b, 0x96, 0x85, 0x2e, 0x6c, 0xc1, 0x5b, 0x2e, 0x9e, 0x23, 0x5c, 0xc3,
	0x6b, 0x71, 0x22, 0x8d, 0x65, 0xdb, 0xea, 0x5d, 0xc7, 0x9d, 0xca, 0xb5, 0xeb, 0x5c, 0x5c, 0x51,
	0x69, 0xeb, 0xf0, 0x73, 0x07, 0xcc, 0xd6, 0xa6, 0x0b, 0x56, 0x11, 0x63, 0xda, 0x71, 0x5b, 0xb3,
	0x38, 0x23, 0xe8, 0x00, 0x42, 0x27, 0xd9, 0x90, 0xa1, 0x15, 0x23, 0xcb, 0x9c, 0x1b, 0xbf, 0x1e,
	0x0c, 0x99, 0x1a, 0x49, 0x5a, 0x90, 0xcf, 0x71, 0x64, 0x9b, 0xef, 0x30, 0x95, 0x1b, 0x68, 0xa2,
	0x96, 0x82, 0x4f, 0xd8, 0xd4, 0xb8, 0x42, 0x17, 0xd5, 0x11, 0xee, 0x9d, 0x98, 0x73, 0x62, 0x2c,
	0x74, 0xdc, 0xdd, 0x9c, 0x33, 0xd0, 0xb4, 0x55, 0x16, 0xd2, 0x66, 0xd9, 0x76, 0x6f, 0xcb, 0xc0,
	0x8c, 0xf4, 0x5f, 0xc2, 0x9d, 0x13, 0xa1, 0xd4, 0xc5, 0x8c, 0x55, 0xd5, 0x7b, 0xa6, 0x34, 0x7a,
	0x06, 0x03, 0x65, 0x80, 0x8a, 0x41, 0xe2, 0x9b, 0x41, 0x87, 0x5e, 0x7d, 0x84, 0xff, 0x3f, 0x58,
	0x2f, 0xc2, 0x70, 0xff, 0x01, 0xe5, 0x7e, 0xcf, 0x0a, 0x5d, 0x5e, 0xee, 0x7a, 0xe8, 0x08, 0x1e,
	0xfc, 0x53, 0x3f, 0x65, 0xd3, 0x4b, 0xcd, 0xf8, 0x74, 0x17, 0x9c, 0x9c, 0xdd, 0xfe, 0xc4, 0xde,
	0xb7, 0x06, 0x83, 0xeb, 0x06, 0x83, 0x9b, 0x06, 0x83, 0x1f, 0x0d, 0x06, 0xbf, 0x1a, 0xec, 0xfd,
	0x6e, 0x30, 0xf8, 0xb2, 0xc2, 0xde, 0xf5, 0x0a, 0x83, 0x9b, 0x15, 0xf6, 0x6e, 0x57, 0xd8, 0xfb,
	0x74, 0x58, 0x0a, 0xc6, 0x5f, 0x2b, 0x2a, 0x97, 0x54, 0x0e, 0x4b, 0x51, 0xd7, 0x82, 0x0f, 0xef,
	0x7f, 0x6c, 0xe3, 0xc0, 0xa2, 0x37, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xc7, 0x32, 0x25,
	0x83, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeRoom.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeRoleInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossSkillList.Get().(proto.Message)
	})
}

var poolRoguelikeRoom = &sync.Pool{New: func() interface{} { return &RoguelikeRoom{} }}

func (m *RoguelikeRoom) ReleasePool() { m.Reset(); poolRoguelikeRoom.Put(m); m = nil }

var poolRoguelikeRoleInfo = &sync.Pool{New: func() interface{} { return &RoguelikeRoleInfo{} }}

func (m *RoguelikeRoleInfo) ReleasePool() { m.Reset(); poolRoguelikeRoleInfo.Put(m); m = nil }

var poolBossSkillList = &sync.Pool{New: func() interface{} { return &BossSkillList{} }}

func (m *BossSkillList) ReleasePool() { m.Reset(); poolBossSkillList.Put(m); m = nil }
func (x RoguelikeStatus) String() string {
	s, ok := RoguelikeStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RoguelikeRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeRoom)
	if !ok {
		that2, ok := that.(RoguelikeRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	if this.RoguelikeId != that1.RoguelikeId {
		return false
	}
	if len(this.RoleInfos) != len(that1.RoleInfos) {
		return false
	}
	for i := range this.RoleInfos {
		if !this.RoleInfos[i].Equal(that1.RoleInfos[i]) {
			return false
		}
	}
	if this.IsOpen != that1.IsOpen {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.UpdateAt != that1.UpdateAt {
		return false
	}
	if this.CombatNeed != that1.CombatNeed {
		return false
	}
	return true
}
func (this *RoguelikeRoleInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeRoleInfo)
	if !ok {
		that2, ok := that.(RoguelikeRoleInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.GuildName != that1.GuildName {
		return false
	}
	if this.IsReady != that1.IsReady {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.IsRobot != that1.IsRobot {
		return false
	}
	if this.CardId != that1.CardId {
		return false
	}
	return true
}
func (this *BossSkillList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossSkillList)
	if !ok {
		that2, ok := that.(BossSkillList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Skills) != len(that1.Skills) {
		return false
	}
	for i := range this.Skills {
		if this.Skills[i] != that1.Skills[i] {
			return false
		}
	}
	return true
}
func (m *RoguelikeRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CombatNeed != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.CombatNeed))
		i--
		dAtA[i] = 0x40
	}
	if m.UpdateAt != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RoleInfos) > 0 {
		for iNdEx := len(m.RoleInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoleInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoguelike(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RoguelikeId != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64((uint64(m.RoguelikeId)<<1)^uint64((m.RoguelikeId>>63))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintRoguelike(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoomId != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeRoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeRoleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeRoleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CardId != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x60
	}
	if m.IsRobot {
		i--
		if m.IsRobot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.ConfigId != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x50
	}
	if m.IsReady {
		i--
		if m.IsReady {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.GuildName) > 0 {
		i -= len(m.GuildName)
		copy(dAtA[i:], m.GuildName)
		i = encodeVarintRoguelike(dAtA, i, uint64(len(m.GuildName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintRoguelike(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Power != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintRoguelike(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintRoguelike(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BossSkillList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossSkillList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossSkillList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Skills) > 0 {
		dAtA2 := make([]byte, len(m.Skills)*10)
		var j1 int
		for _, num1 := range m.Skills {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRoguelike(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoguelike(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoguelike(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RoguelikeRoom) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.OwnerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	if m.RoguelikeId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("roguelike_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoguelikeId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("roleInfos")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleInfos == nil {
		w.RawString("null")
	} else if len(m.RoleInfos) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleInfos {
			v.JsonBytes(w)
			if i != len(m.RoleInfos)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsOpen {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_open")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsOpen)
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.UpdateAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("update_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UpdateAt))
		needWriteComma = true
	}
	if m.CombatNeed != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_need")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatNeed))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeRoleInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.GuildName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildName)
		needWriteComma = true
	}
	if m.IsReady {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_ready")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsReady)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.IsRobot {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_robot")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsRobot)
		needWriteComma = true
	}
	if m.CardId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("card_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CardId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossSkillList) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("skills")
	w.RawByte('"')
	w.RawByte(':')
	if m.Skills == nil {
		w.RawString("null")
	} else if len(m.Skills) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Skills {
			w.Int64(int64(v))
			if i != len(m.Skills)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeRoom) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeRoom) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeRoom) GoString() string {
	return m.String()
}

func (m *RoguelikeRoleInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeRoleInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeRoleInfo) GoString() string {
	return m.String()
}

func (m *BossSkillList) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossSkillList) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossSkillList) GoString() string {
	return m.String()
}

func (m *RoguelikeRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovRoguelike(uint64(m.RoomId))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovRoguelike(uint64(l))
	}
	if m.RoguelikeId != 0 {
		n += 1 + sozRoguelike(uint64(m.RoguelikeId))
	}
	if len(m.RoleInfos) > 0 {
		for _, e := range m.RoleInfos {
			l = e.Size()
			n += 1 + l + sovRoguelike(uint64(l))
		}
	}
	if m.IsOpen {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovRoguelike(uint64(m.Status))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovRoguelike(uint64(m.UpdateAt))
	}
	if m.CombatNeed != 0 {
		n += 1 + sovRoguelike(uint64(m.CombatNeed))
	}
	return n
}

func (m *RoguelikeRoleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovRoguelike(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovRoguelike(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovRoguelike(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovRoguelike(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovRoguelike(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovRoguelike(uint64(m.Power))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovRoguelike(uint64(l))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovRoguelike(uint64(l))
	}
	if m.IsReady {
		n += 2
	}
	if m.ConfigId != 0 {
		n += 1 + sovRoguelike(uint64(m.ConfigId))
	}
	if m.IsRobot {
		n += 2
	}
	if m.CardId != 0 {
		n += 1 + sovRoguelike(uint64(m.CardId))
	}
	return n
}

func (m *BossSkillList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Skills) > 0 {
		l = 0
		for _, e := range m.Skills {
			l += sovRoguelike(uint64(e))
		}
		n += 1 + sovRoguelike(uint64(l)) + l
	}
	return n
}

func sovRoguelike(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoguelike(x uint64) (n int) {
	return sovRoguelike(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoguelikeRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoguelikeRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoguelikeRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoguelikeId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.RoguelikeId = int64(v)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleInfos = append(m.RoleInfos, &RoguelikeRoleInfo{})
			if err := m.RoleInfos[len(m.RoleInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RoguelikeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatNeed", wireType)
			}
			m.CombatNeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatNeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeRoleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoguelikeRoleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoguelikeRoleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReady", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReady = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRobot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRobot = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossSkillList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossSkillList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossSkillList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoguelike
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Skills = append(m.Skills, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoguelike
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRoguelike
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRoguelike
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Skills) == 0 {
					m.Skills = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Skills = append(m.Skills, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoguelike(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoguelike
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoguelike
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoguelike
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoguelike        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoguelike          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoguelike = fmt.Errorf("proto: unexpected end of group")
)
