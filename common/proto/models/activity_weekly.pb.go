// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/activity_weekly.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActivityWeeklyType int32

const (
	ActivityWeeklyType_AWT_CastSword ActivityWeeklyType = 0
)

var ActivityWeeklyType_name = map[int32]string{
	0: "AWT_CastSword",
}

var ActivityWeeklyType_value = map[string]int32{
	"AWT_CastSword": 0,
}

func (ActivityWeeklyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{0}
}

type WeeklyItems struct {
	Items    []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	IsDouble bool    `protobuf:"varint,2,opt,name=is_double,json=isDouble,proto3" json:"is_double,omitempty"`
}

func (m *WeeklyItems) Reset()      { *m = WeeklyItems{} }
func (*WeeklyItems) ProtoMessage() {}
func (*WeeklyItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{0}
}
func (m *WeeklyItems) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyItems.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyItems.Merge(m, src)
}
func (m *WeeklyItems) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyItems) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyItems.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyItems proto.InternalMessageInfo

func (m *WeeklyItems) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *WeeklyItems) GetIsDouble() bool {
	if m != nil {
		return m.IsDouble
	}
	return false
}

func (*WeeklyItems) XXX_MessageName() string {
	return "models.WeeklyItems"
}

type WeeklyCastsword struct {
	FreeTimes  int64 `protobuf:"varint,1,opt,name=free_times,json=freeTimes,proto3" json:"free_times,omitempty"`
	CurId      int64 `protobuf:"varint,2,opt,name=cur_id,json=curId,proto3" json:"cur_id,omitempty"`
	SequenceId int64 `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	CurTimes   int64 `protobuf:"varint,4,opt,name=cur_times,json=curTimes,proto3" json:"cur_times,omitempty"`
}

func (m *WeeklyCastsword) Reset()      { *m = WeeklyCastsword{} }
func (*WeeklyCastsword) ProtoMessage() {}
func (*WeeklyCastsword) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{1}
}
func (m *WeeklyCastsword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyCastsword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyCastsword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyCastsword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyCastsword.Merge(m, src)
}
func (m *WeeklyCastsword) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyCastsword) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyCastsword.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyCastsword proto.InternalMessageInfo

func (m *WeeklyCastsword) GetFreeTimes() int64 {
	if m != nil {
		return m.FreeTimes
	}
	return 0
}

func (m *WeeklyCastsword) GetCurId() int64 {
	if m != nil {
		return m.CurId
	}
	return 0
}

func (m *WeeklyCastsword) GetSequenceId() int64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *WeeklyCastsword) GetCurTimes() int64 {
	if m != nil {
		return m.CurTimes
	}
	return 0
}

func (*WeeklyCastsword) XXX_MessageName() string {
	return "models.WeeklyCastsword"
}

type WeeklyChallenge struct {
	GuildId      string                 `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Rewards      map[int64]RewardStatus `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=models.RewardStatus"`
	GuildRewards map[int64]RewardStatus `protobuf:"bytes,3,rep,name=guild_rewards,json=guildRewards,proto3" json:"guild_rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=models.RewardStatus"`
}

func (m *WeeklyChallenge) Reset()      { *m = WeeklyChallenge{} }
func (*WeeklyChallenge) ProtoMessage() {}
func (*WeeklyChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{2}
}
func (m *WeeklyChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyChallenge.Merge(m, src)
}
func (m *WeeklyChallenge) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyChallenge proto.InternalMessageInfo

func (m *WeeklyChallenge) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *WeeklyChallenge) GetRewards() map[int64]RewardStatus {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *WeeklyChallenge) GetGuildRewards() map[int64]RewardStatus {
	if m != nil {
		return m.GuildRewards
	}
	return nil
}

func (*WeeklyChallenge) XXX_MessageName() string {
	return "models.WeeklyChallenge"
}

type WeeklyExchange struct {
	ExchangeTimes map[int64]int64 `protobuf:"bytes,1,rep,name=exchange_times,json=exchangeTimes,proto3" json:"exchange_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *WeeklyExchange) Reset()      { *m = WeeklyExchange{} }
func (*WeeklyExchange) ProtoMessage() {}
func (*WeeklyExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{3}
}
func (m *WeeklyExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyExchange.Merge(m, src)
}
func (m *WeeklyExchange) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyExchange.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyExchange proto.InternalMessageInfo

func (m *WeeklyExchange) GetExchangeTimes() map[int64]int64 {
	if m != nil {
		return m.ExchangeTimes
	}
	return nil
}

func (*WeeklyExchange) XXX_MessageName() string {
	return "models.WeeklyExchange"
}

type WeeklyGift struct {
	BuyTimes map[int64]int64 `protobuf:"bytes,1,rep,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *WeeklyGift) Reset()      { *m = WeeklyGift{} }
func (*WeeklyGift) ProtoMessage() {}
func (*WeeklyGift) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{4}
}
func (m *WeeklyGift) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyGift) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyGift.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyGift) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyGift.Merge(m, src)
}
func (m *WeeklyGift) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyGift) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyGift.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyGift proto.InternalMessageInfo

func (m *WeeklyGift) GetBuyTimes() map[int64]int64 {
	if m != nil {
		return m.BuyTimes
	}
	return nil
}

func (*WeeklyGift) XXX_MessageName() string {
	return "models.WeeklyGift"
}

type WeeklyRanking struct {
	RankingIndex string `protobuf:"bytes,1,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
}

func (m *WeeklyRanking) Reset()      { *m = WeeklyRanking{} }
func (*WeeklyRanking) ProtoMessage() {}
func (*WeeklyRanking) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{5}
}
func (m *WeeklyRanking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyRanking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyRanking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyRanking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyRanking.Merge(m, src)
}
func (m *WeeklyRanking) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyRanking) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyRanking.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyRanking proto.InternalMessageInfo

func (m *WeeklyRanking) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (*WeeklyRanking) XXX_MessageName() string {
	return "models.WeeklyRanking"
}

type ActivityWeekly struct {
	Version         int64              `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ActivityId      int64              `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	StartTime       int64              `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         int64              `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	NextRefreshTime int64              `protobuf:"varint,5,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	Type            ActivityWeeklyType `protobuf:"varint,6,opt,name=type,proto3,enum=models.ActivityWeeklyType" json:"type,omitempty"`
	Score           int64              `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
	FreeTimes       int64              `protobuf:"varint,8,opt,name=free_times,json=freeTimes,proto3" json:"free_times,omitempty"`
	ChallengeInfo   *WeeklyChallenge   `protobuf:"bytes,9,opt,name=challenge_info,json=challengeInfo,proto3" json:"challenge_info,omitempty"`
	ExchangeInfo    *WeeklyExchange    `protobuf:"bytes,10,opt,name=exchange_info,json=exchangeInfo,proto3" json:"exchange_info,omitempty"`
	GiftInfo        *WeeklyGift        `protobuf:"bytes,11,opt,name=gift_info,json=giftInfo,proto3" json:"gift_info,omitempty"`
	RankingInfo     *WeeklyRanking     `protobuf:"bytes,12,opt,name=ranking_info,json=rankingInfo,proto3" json:"ranking_info,omitempty"`
	IsFinished      bool               `protobuf:"varint,13,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
}

func (m *ActivityWeekly) Reset()      { *m = ActivityWeekly{} }
func (*ActivityWeekly) ProtoMessage() {}
func (*ActivityWeekly) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{6}
}
func (m *ActivityWeekly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityWeekly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityWeekly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityWeekly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityWeekly.Merge(m, src)
}
func (m *ActivityWeekly) XXX_Size() int {
	return m.Size()
}
func (m *ActivityWeekly) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityWeekly.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityWeekly proto.InternalMessageInfo

func (m *ActivityWeekly) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ActivityWeekly) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *ActivityWeekly) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ActivityWeekly) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ActivityWeekly) GetNextRefreshTime() int64 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (m *ActivityWeekly) GetType() ActivityWeeklyType {
	if m != nil {
		return m.Type
	}
	return ActivityWeeklyType_AWT_CastSword
}

func (m *ActivityWeekly) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ActivityWeekly) GetFreeTimes() int64 {
	if m != nil {
		return m.FreeTimes
	}
	return 0
}

func (m *ActivityWeekly) GetChallengeInfo() *WeeklyChallenge {
	if m != nil {
		return m.ChallengeInfo
	}
	return nil
}

func (m *ActivityWeekly) GetExchangeInfo() *WeeklyExchange {
	if m != nil {
		return m.ExchangeInfo
	}
	return nil
}

func (m *ActivityWeekly) GetGiftInfo() *WeeklyGift {
	if m != nil {
		return m.GiftInfo
	}
	return nil
}

func (m *ActivityWeekly) GetRankingInfo() *WeeklyRanking {
	if m != nil {
		return m.RankingInfo
	}
	return nil
}

func (m *ActivityWeekly) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

func (*ActivityWeekly) XXX_MessageName() string {
	return "models.ActivityWeekly"
}

type ActivityRankingOverData struct {
	RankingIndex string             `protobuf:"bytes,1,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty"`
	ActivityId   int64              `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Version      int64              `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Type         ActivityWeeklyType `protobuf:"varint,99,opt,name=type,proto3,enum=models.ActivityWeeklyType" json:"type,omitempty"`
}

func (m *ActivityRankingOverData) Reset()      { *m = ActivityRankingOverData{} }
func (*ActivityRankingOverData) ProtoMessage() {}
func (*ActivityRankingOverData) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{7}
}
func (m *ActivityRankingOverData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityRankingOverData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityRankingOverData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityRankingOverData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityRankingOverData.Merge(m, src)
}
func (m *ActivityRankingOverData) XXX_Size() int {
	return m.Size()
}
func (m *ActivityRankingOverData) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityRankingOverData.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityRankingOverData proto.InternalMessageInfo

func (m *ActivityRankingOverData) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ActivityRankingOverData) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *ActivityRankingOverData) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ActivityRankingOverData) GetType() ActivityWeeklyType {
	if m != nil {
		return m.Type
	}
	return ActivityWeeklyType_AWT_CastSword
}

func (*ActivityRankingOverData) XXX_MessageName() string {
	return "models.ActivityRankingOverData"
}

type WeeklyCastswordCnf struct {
	Id           int64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ActivityId   int64   `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	Sequence     int64   `protobuf:"varint,3,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	ActivityItem []int64 `protobuf:"varint,5,rep,packed,name=ActivityItem,proto3" json:"ActivityItem,omitempty"`
	Reward       []int64 `protobuf:"varint,6,rep,packed,name=Reward,proto3" json:"Reward,omitempty"`
}

func (m *WeeklyCastswordCnf) Reset()      { *m = WeeklyCastswordCnf{} }
func (*WeeklyCastswordCnf) ProtoMessage() {}
func (*WeeklyCastswordCnf) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{8}
}
func (m *WeeklyCastswordCnf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyCastswordCnf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyCastswordCnf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyCastswordCnf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyCastswordCnf.Merge(m, src)
}
func (m *WeeklyCastswordCnf) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyCastswordCnf) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyCastswordCnf.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyCastswordCnf proto.InternalMessageInfo

func (m *WeeklyCastswordCnf) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WeeklyCastswordCnf) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *WeeklyCastswordCnf) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *WeeklyCastswordCnf) GetActivityItem() []int64 {
	if m != nil {
		return m.ActivityItem
	}
	return nil
}

func (m *WeeklyCastswordCnf) GetReward() []int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (*WeeklyCastswordCnf) XXX_MessageName() string {
	return "models.WeeklyCastswordCnf"
}

type WeeklyChallengeCnf struct {
	Id         int64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ActivityId int64   `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	Typ        int64   `protobuf:"varint,3,opt,name=Typ,proto3" json:"Typ,omitempty"`
	Times      int64   `protobuf:"varint,4,opt,name=Times,proto3" json:"Times,omitempty"`
	Reward     []int64 `protobuf:"varint,5,rep,packed,name=Reward,proto3" json:"Reward,omitempty"`
}

func (m *WeeklyChallengeCnf) Reset()      { *m = WeeklyChallengeCnf{} }
func (*WeeklyChallengeCnf) ProtoMessage() {}
func (*WeeklyChallengeCnf) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{9}
}
func (m *WeeklyChallengeCnf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyChallengeCnf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyChallengeCnf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyChallengeCnf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyChallengeCnf.Merge(m, src)
}
func (m *WeeklyChallengeCnf) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyChallengeCnf) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyChallengeCnf.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyChallengeCnf proto.InternalMessageInfo

func (m *WeeklyChallengeCnf) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WeeklyChallengeCnf) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *WeeklyChallengeCnf) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *WeeklyChallengeCnf) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *WeeklyChallengeCnf) GetReward() []int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (*WeeklyChallengeCnf) XXX_MessageName() string {
	return "models.WeeklyChallengeCnf"
}

type WeeklyExchangeCnf struct {
	Id            int64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ActivityId    int64   `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	RequiredProps []int64 `protobuf:"varint,3,rep,packed,name=RequiredProps,proto3" json:"RequiredProps,omitempty"`
	Commodities   []int64 `protobuf:"varint,4,rep,packed,name=Commodities,proto3" json:"Commodities,omitempty"`
	Maximum       int64   `protobuf:"varint,5,opt,name=Maximum,proto3" json:"Maximum,omitempty"`
	IsRefresh     int64   `protobuf:"varint,6,opt,name=IsRefresh,proto3" json:"IsRefresh,omitempty"`
}

func (m *WeeklyExchangeCnf) Reset()      { *m = WeeklyExchangeCnf{} }
func (*WeeklyExchangeCnf) ProtoMessage() {}
func (*WeeklyExchangeCnf) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{10}
}
func (m *WeeklyExchangeCnf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyExchangeCnf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyExchangeCnf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyExchangeCnf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyExchangeCnf.Merge(m, src)
}
func (m *WeeklyExchangeCnf) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyExchangeCnf) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyExchangeCnf.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyExchangeCnf proto.InternalMessageInfo

func (m *WeeklyExchangeCnf) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WeeklyExchangeCnf) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *WeeklyExchangeCnf) GetRequiredProps() []int64 {
	if m != nil {
		return m.RequiredProps
	}
	return nil
}

func (m *WeeklyExchangeCnf) GetCommodities() []int64 {
	if m != nil {
		return m.Commodities
	}
	return nil
}

func (m *WeeklyExchangeCnf) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

func (m *WeeklyExchangeCnf) GetIsRefresh() int64 {
	if m != nil {
		return m.IsRefresh
	}
	return 0
}

func (*WeeklyExchangeCnf) XXX_MessageName() string {
	return "models.WeeklyExchangeCnf"
}

type WeeklyGiftCnf struct {
	Id               int64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Language1        string  `protobuf:"bytes,2,opt,name=Language1,proto3" json:"Language1,omitempty"`
	ActivityId       int64   `protobuf:"varint,3,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	GridId           int64   `protobuf:"varint,4,opt,name=GridId,proto3" json:"GridId,omitempty"`
	GradeRange       []int64 `protobuf:"varint,5,rep,packed,name=GradeRange,proto3" json:"GradeRange,omitempty"`
	RechargeInterval []int64 `protobuf:"varint,6,rep,packed,name=RechargeInterval,proto3" json:"RechargeInterval,omitempty"`
	BuyType          int64   `protobuf:"varint,7,opt,name=BuyType,proto3" json:"BuyType,omitempty"`
	PayId            []int64 `protobuf:"varint,8,rep,packed,name=PayId,proto3" json:"PayId,omitempty"`
	PayNum           int64   `protobuf:"varint,9,opt,name=PayNum,proto3" json:"PayNum,omitempty"`
	IsRefresh        int64   `protobuf:"varint,10,opt,name=IsRefresh,proto3" json:"IsRefresh,omitempty"`
	Reward           []int64 `protobuf:"varint,11,rep,packed,name=Reward,proto3" json:"Reward,omitempty"`
	ItemPictureID    string  `protobuf:"bytes,12,opt,name=ItemPictureID,proto3" json:"ItemPictureID,omitempty"`
}

func (m *WeeklyGiftCnf) Reset()      { *m = WeeklyGiftCnf{} }
func (*WeeklyGiftCnf) ProtoMessage() {}
func (*WeeklyGiftCnf) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{11}
}
func (m *WeeklyGiftCnf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyGiftCnf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyGiftCnf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyGiftCnf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyGiftCnf.Merge(m, src)
}
func (m *WeeklyGiftCnf) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyGiftCnf) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyGiftCnf.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyGiftCnf proto.InternalMessageInfo

func (m *WeeklyGiftCnf) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WeeklyGiftCnf) GetLanguage1() string {
	if m != nil {
		return m.Language1
	}
	return ""
}

func (m *WeeklyGiftCnf) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *WeeklyGiftCnf) GetGridId() int64 {
	if m != nil {
		return m.GridId
	}
	return 0
}

func (m *WeeklyGiftCnf) GetGradeRange() []int64 {
	if m != nil {
		return m.GradeRange
	}
	return nil
}

func (m *WeeklyGiftCnf) GetRechargeInterval() []int64 {
	if m != nil {
		return m.RechargeInterval
	}
	return nil
}

func (m *WeeklyGiftCnf) GetBuyType() int64 {
	if m != nil {
		return m.BuyType
	}
	return 0
}

func (m *WeeklyGiftCnf) GetPayId() []int64 {
	if m != nil {
		return m.PayId
	}
	return nil
}

func (m *WeeklyGiftCnf) GetPayNum() int64 {
	if m != nil {
		return m.PayNum
	}
	return 0
}

func (m *WeeklyGiftCnf) GetIsRefresh() int64 {
	if m != nil {
		return m.IsRefresh
	}
	return 0
}

func (m *WeeklyGiftCnf) GetReward() []int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *WeeklyGiftCnf) GetItemPictureID() string {
	if m != nil {
		return m.ItemPictureID
	}
	return ""
}

func (*WeeklyGiftCnf) XXX_MessageName() string {
	return "models.WeeklyGiftCnf"
}

type WeeklyRankCnf struct {
	Id             int64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ActivityId     int64   `protobuf:"varint,2,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
	RankUpperLimit int64   `protobuf:"varint,3,opt,name=RankUpperLimit,proto3" json:"RankUpperLimit,omitempty"`
	RankLowerLimit int64   `protobuf:"varint,4,opt,name=RankLowerLimit,proto3" json:"RankLowerLimit,omitempty"`
	Reward         []int64 `protobuf:"varint,5,rep,packed,name=Reward,proto3" json:"Reward,omitempty"`
}

func (m *WeeklyRankCnf) Reset()      { *m = WeeklyRankCnf{} }
func (*WeeklyRankCnf) ProtoMessage() {}
func (*WeeklyRankCnf) Descriptor() ([]byte, []int) {
	return fileDescriptor_930cc804b84dad3c, []int{12}
}
func (m *WeeklyRankCnf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklyRankCnf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklyRankCnf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklyRankCnf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklyRankCnf.Merge(m, src)
}
func (m *WeeklyRankCnf) XXX_Size() int {
	return m.Size()
}
func (m *WeeklyRankCnf) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklyRankCnf.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklyRankCnf proto.InternalMessageInfo

func (m *WeeklyRankCnf) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WeeklyRankCnf) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *WeeklyRankCnf) GetRankUpperLimit() int64 {
	if m != nil {
		return m.RankUpperLimit
	}
	return 0
}

func (m *WeeklyRankCnf) GetRankLowerLimit() int64 {
	if m != nil {
		return m.RankLowerLimit
	}
	return 0
}

func (m *WeeklyRankCnf) GetReward() []int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (*WeeklyRankCnf) XXX_MessageName() string {
	return "models.WeeklyRankCnf"
}
func init() {
	proto.RegisterEnum("models.ActivityWeeklyType", ActivityWeeklyType_name, ActivityWeeklyType_value)
	proto.RegisterType((*WeeklyItems)(nil), "models.WeeklyItems")
	proto.RegisterType((*WeeklyCastsword)(nil), "models.WeeklyCastsword")
	proto.RegisterType((*WeeklyChallenge)(nil), "models.WeeklyChallenge")
	proto.RegisterMapType((map[int64]RewardStatus)(nil), "models.WeeklyChallenge.GuildRewardsEntry")
	proto.RegisterMapType((map[int64]RewardStatus)(nil), "models.WeeklyChallenge.RewardsEntry")
	proto.RegisterType((*WeeklyExchange)(nil), "models.WeeklyExchange")
	proto.RegisterMapType((map[int64]int64)(nil), "models.WeeklyExchange.ExchangeTimesEntry")
	proto.RegisterType((*WeeklyGift)(nil), "models.WeeklyGift")
	proto.RegisterMapType((map[int64]int64)(nil), "models.WeeklyGift.BuyTimesEntry")
	proto.RegisterType((*WeeklyRanking)(nil), "models.WeeklyRanking")
	proto.RegisterType((*ActivityWeekly)(nil), "models.ActivityWeekly")
	proto.RegisterType((*ActivityRankingOverData)(nil), "models.ActivityRankingOverData")
	proto.RegisterType((*WeeklyCastswordCnf)(nil), "models.WeeklyCastswordCnf")
	proto.RegisterType((*WeeklyChallengeCnf)(nil), "models.WeeklyChallengeCnf")
	proto.RegisterType((*WeeklyExchangeCnf)(nil), "models.WeeklyExchangeCnf")
	proto.RegisterType((*WeeklyGiftCnf)(nil), "models.WeeklyGiftCnf")
	proto.RegisterType((*WeeklyRankCnf)(nil), "models.WeeklyRankCnf")
}

func init() {
	proto.RegisterFile("proto/models/activity_weekly.proto", fileDescriptor_930cc804b84dad3c)
}

var fileDescriptor_930cc804b84dad3c = []byte{
	// 1185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x16, 0x45, 0x4b, 0x96, 0x46, 0x1f, 0xb1, 0x17, 0x89, 0xc3, 0x57, 0x6f, 0xca, 0x08, 0x6c,
	0xd0, 0xba, 0x06, 0x2a, 0xa3, 0x69, 0x0f, 0x41, 0x83, 0x06, 0x4d, 0xec, 0xd4, 0x20, 0xe0, 0xb8,
	0xc2, 0xda, 0x41, 0x80, 0x5e, 0x04, 0x9a, 0x5c, 0xc9, 0x0b, 0x8b, 0xa4, 0xb2, 0x24, 0x65, 0xeb,
	0xde, 0x02, 0x3d, 0xf6, 0x07, 0x14, 0xe8, 0xa5, 0x40, 0xdb, 0xdf, 0xd1, 0x4b, 0x8e, 0x39, 0xe6,
	0xd8, 0xca, 0x28, 0xd0, 0x63, 0x7f, 0x42, 0xb1, 0x1f, 0x94, 0x48, 0xc9, 0x46, 0x53, 0xf7, 0xc6,
	0x79, 0xe6, 0x63, 0x67, 0x67, 0x9e, 0x99, 0x25, 0x58, 0x23, 0x16, 0xc6, 0xe1, 0xb6, 0x1f, 0x7a,
	0x64, 0x18, 0x6d, 0x3b, 0x6e, 0x4c, 0xc7, 0x34, 0x9e, 0xf4, 0xce, 0x08, 0x39, 0x1d, 0x4e, 0x3a,
	0x42, 0x89, 0xca, 0x52, 0xdb, 0xda, 0xc8, 0xd9, 0x1e, 0x3b, 0x03, 0xa9, 0x6f, 0xdd, 0xc9, 0xe1,
	0xfd, 0x90, 0xf9, 0x4e, 0x4c, 0xc3, 0x40, 0x69, 0x8d, 0x9c, 0x96, 0x04, 0x89, 0x1f, 0x49, 0x8d,
	0x75, 0x00, 0xb5, 0x17, 0xe2, 0x1c, 0x3b, 0x26, 0x7e, 0x84, 0x2c, 0x28, 0x51, 0xfe, 0x61, 0x68,
	0x6d, 0x7d, 0xb3, 0x76, 0xbf, 0xde, 0x91, 0x2e, 0x1d, 0xae, 0xc5, 0x52, 0x85, 0xfe, 0x0f, 0x55,
	0x1a, 0xf5, 0xbc, 0x30, 0x39, 0x1e, 0x12, 0xa3, 0xd8, 0xd6, 0x36, 0x2b, 0xb8, 0x42, 0xa3, 0x5d,
	0x21, 0x5b, 0xdf, 0x68, 0x70, 0x43, 0x06, 0xdc, 0x71, 0xa2, 0x38, 0x3a, 0x0b, 0x99, 0x87, 0xde,
	0x01, 0xe8, 0x33, 0x42, 0x7a, 0x31, 0xf5, 0x09, 0x8f, 0xac, 0x6d, 0xea, 0xb8, 0xca, 0x91, 0x23,
	0x0e, 0xa0, 0x5b, 0x50, 0x76, 0x13, 0xd6, 0xa3, 0x9e, 0x08, 0xa6, 0xe3, 0x92, 0x9b, 0x30, 0xdb,
	0x43, 0x77, 0xa1, 0x16, 0x91, 0x97, 0x09, 0x09, 0x5c, 0xc2, 0x75, 0xba, 0xd0, 0x41, 0x0a, 0xd9,
	0x1e, 0xcf, 0x83, 0xfb, 0xc9, 0xa8, 0x2b, 0x42, 0x5d, 0x71, 0x13, 0x26, 0x82, 0x5a, 0x7f, 0x14,
	0x67, 0x79, 0x9c, 0x38, 0xc3, 0x21, 0x09, 0x06, 0x04, 0xfd, 0x0f, 0x2a, 0x83, 0x84, 0x0e, 0x3d,
	0x1e, 0x8e, 0x67, 0x51, 0xc5, 0xab, 0x42, 0xb6, 0x3d, 0xf4, 0x08, 0x56, 0x19, 0x39, 0x73, 0x98,
	0x17, 0x19, 0x45, 0x71, 0xf3, 0x7b, 0xe9, 0xcd, 0x17, 0x82, 0x74, 0xb0, 0x34, 0x7b, 0x1a, 0xc4,
	0x6c, 0x82, 0x53, 0x27, 0x74, 0x00, 0x0d, 0x19, 0x3a, 0x8d, 0xa2, 0x8b, 0x28, 0x1f, 0x5c, 0x15,
	0x65, 0x8f, 0x1b, 0xe7, 0x42, 0xd5, 0x07, 0x19, 0xa8, 0xd5, 0x85, 0x7a, 0x56, 0x8b, 0xd6, 0x40,
	0x3f, 0x25, 0x13, 0x55, 0x3b, 0xfe, 0x89, 0xb6, 0xa0, 0x34, 0x76, 0x86, 0x89, 0xec, 0x40, 0xf3,
	0xfe, 0xcd, 0xf4, 0x24, 0xe9, 0x76, 0x18, 0x3b, 0x71, 0x12, 0x61, 0x69, 0xf2, 0x69, 0xf1, 0x81,
	0xd6, 0x7a, 0x0e, 0xeb, 0x4b, 0x87, 0xfe, 0xf7, 0xb0, 0xd6, 0x8f, 0x1a, 0x34, 0xe5, 0xe5, 0x9e,
	0x9e, 0xbb, 0x27, 0x0e, 0x2f, 0x73, 0x17, 0x9a, 0x44, 0x7d, 0xcf, 0x5a, 0x7e, 0x49, 0x31, 0x52,
	0xfb, 0x4e, 0xfa, 0x21, 0x1a, 0x27, 0x8b, 0xd1, 0x20, 0x59, 0xac, 0xf5, 0x39, 0xa0, 0x65, 0xa3,
	0x4b, 0x92, 0xbf, 0x99, 0x4d, 0x5e, 0xcf, 0xa6, 0xf9, 0xad, 0x06, 0x20, 0x8f, 0xdd, 0xa3, 0xfd,
	0x18, 0x7d, 0x06, 0xd5, 0xe3, 0x64, 0x92, 0xcb, 0xae, 0x9d, 0xcf, 0x8e, 0x9b, 0x75, 0x9e, 0x24,
	0x93, 0x4c, 0x52, 0x95, 0x63, 0x25, 0xb6, 0x1e, 0x42, 0x23, 0xa7, 0xfa, 0x57, 0xa9, 0x7c, 0x02,
	0x0d, 0x79, 0x04, 0x76, 0x82, 0x53, 0x1a, 0x0c, 0xd0, 0xbb, 0xd0, 0x60, 0xf2, 0xb3, 0x47, 0x03,
	0x8f, 0x9c, 0x2b, 0x6e, 0xd6, 0x15, 0x68, 0x73, 0xcc, 0xfa, 0x61, 0x05, 0x9a, 0x8f, 0xd5, 0x66,
	0x90, 0xee, 0xc8, 0x80, 0xd5, 0x31, 0x61, 0x11, 0x0d, 0x03, 0x75, 0x70, 0x2a, 0xf2, 0xd1, 0x99,
	0x6d, 0x91, 0xd9, 0x58, 0x41, 0x0a, 0xd9, 0x62, 0x22, 0xa3, 0xd8, 0x61, 0xb1, 0xa8, 0x80, 0x1a,
	0xad, 0xaa, 0x40, 0xf8, 0xa5, 0xf8, 0xa0, 0x90, 0xc0, 0x93, 0x4a, 0x39, 0x58, 0xab, 0x24, 0xf0,
	0x84, 0x6a, 0x0b, 0xd6, 0x03, 0x72, 0x1e, 0xf7, 0x18, 0xe9, 0x33, 0x12, 0x9d, 0x48, 0x9b, 0x92,
	0xb0, 0xb9, 0xc1, 0x15, 0x58, 0xe2, 0xc2, 0xb6, 0x03, 0x2b, 0xf1, 0x64, 0x44, 0x8c, 0xb2, 0xa0,
	0x52, 0x2b, 0x2d, 0x70, 0xfe, 0x1a, 0x47, 0x93, 0x11, 0xc1, 0xc2, 0x8e, 0xd7, 0x2c, 0x72, 0x43,
	0x46, 0x8c, 0x55, 0x59, 0x33, 0x21, 0x2c, 0x6c, 0x8f, 0xca, 0xe2, 0xf6, 0x78, 0x04, 0x4d, 0x37,
	0x1d, 0xab, 0x1e, 0x0d, 0xfa, 0xa1, 0x51, 0x6d, 0x6b, 0x9b, 0xb5, 0xfb, 0xb7, 0xaf, 0x18, 0x3d,
	0xdc, 0x98, 0x99, 0xdb, 0x41, 0x3f, 0x44, 0x0f, 0x61, 0x46, 0x36, 0xe9, 0x0e, 0xc2, 0x7d, 0xe3,
	0x72, 0xb2, 0xe2, 0x7a, 0x6a, 0x2c, 0x9c, 0xb7, 0xa1, 0x3a, 0xa0, 0xfd, 0x58, 0x3a, 0xd6, 0x84,
	0x23, 0x5a, 0xe6, 0x11, 0xae, 0x70, 0x23, 0xe1, 0xf0, 0x00, 0xea, 0xf3, 0x5e, 0xf7, 0x43, 0xa3,
	0x2e, 0x7c, 0x6e, 0xe5, 0x7d, 0x14, 0x31, 0x70, 0x6d, 0xc6, 0x80, 0x7e, 0xc8, 0x7b, 0x4a, 0xa3,
	0x5e, 0x9f, 0x06, 0x34, 0x3a, 0x21, 0x9e, 0xd1, 0x10, 0x7b, 0x17, 0x68, 0xf4, 0x85, 0x42, 0xac,
	0x5f, 0x34, 0xb8, 0x9d, 0x96, 0x56, 0x45, 0xf8, 0x72, 0x4c, 0xd8, 0xae, 0x13, 0x3b, 0x6f, 0x45,
	0xb1, 0x7f, 0x66, 0x4d, 0x86, 0x70, 0x7a, 0x9e, 0x70, 0x69, 0xa7, 0xdd, 0xb7, 0xeb, 0xb4, 0xf5,
	0xbd, 0x06, 0x68, 0xe1, 0x95, 0xd8, 0x09, 0xfa, 0xa8, 0x09, 0x45, 0xdb, 0x53, 0x64, 0x2e, 0xda,
	0x1e, 0x32, 0x01, 0x1e, 0xcf, 0x8e, 0x4f, 0x13, 0x9a, 0x23, 0xa8, 0x05, 0x95, 0x43, 0xf5, 0x1e,
	0xa8, 0x8c, 0x66, 0x32, 0xb2, 0xa0, 0x3e, 0xb3, 0x8c, 0x89, 0x6f, 0x94, 0xda, 0xfa, 0xa6, 0x8e,
	0x73, 0x18, 0xda, 0x80, 0xb2, 0xdc, 0x6b, 0x46, 0x59, 0x68, 0x95, 0x64, 0x7d, 0x3d, 0x4f, 0x2f,
	0xe5, 0xca, 0x75, 0xd2, 0x5b, 0x03, 0xfd, 0x68, 0x32, 0x52, 0x99, 0xf1, 0x4f, 0xce, 0xf0, 0xa3,
	0xcc, 0x73, 0x25, 0x85, 0x4c, 0x1a, 0xa5, 0x5c, 0x1a, 0xbf, 0x6a, 0xb0, 0x9e, 0xa7, 0xdf, 0x75,
	0xb2, 0xb8, 0x07, 0x0d, 0x4c, 0x5e, 0x26, 0x94, 0x11, 0xaf, 0xcb, 0xc2, 0x91, 0x7c, 0x9a, 0x74,
	0x9c, 0x07, 0x51, 0x1b, 0x6a, 0x3b, 0xa1, 0xef, 0x87, 0x1e, 0x8d, 0xa9, 0xc8, 0x8f, 0xdb, 0x64,
	0x21, 0xde, 0xfd, 0x67, 0xce, 0x39, 0xf5, 0x13, 0x5f, 0xcd, 0x7b, 0x2a, 0xa2, 0x3b, 0x50, 0xb5,
	0x23, 0x35, 0xf8, 0x62, 0xd8, 0x75, 0x3c, 0x07, 0xf8, 0x4b, 0xdc, 0x98, 0xcf, 0xc2, 0x65, 0x37,
	0xb8, 0x03, 0xd5, 0x7d, 0x27, 0x18, 0x24, 0xce, 0x80, 0x7c, 0x24, 0x2e, 0x50, 0xc5, 0x73, 0x60,
	0xe1, 0x7e, 0xfa, 0xd2, 0xfd, 0x36, 0xa0, 0xbc, 0xc7, 0xa8, 0x67, 0x7b, 0xaa, 0xa8, 0x4a, 0xe2,
	0x7e, 0x7b, 0xcc, 0xf1, 0x08, 0xe6, 0x85, 0x53, 0x95, 0xcd, 0x20, 0x68, 0x0b, 0xd6, 0x30, 0x71,
	0x4f, 0x1c, 0xc6, 0x67, 0x39, 0x26, 0x6c, 0xec, 0x0c, 0x15, 0x0d, 0x96, 0x70, 0x7e, 0x77, 0xbe,
	0xf0, 0x39, 0xc5, 0xe5, 0x6e, 0x4a, 0x45, 0xde, 0xd1, 0xae, 0xc3, 0x13, 0xab, 0x08, 0x57, 0x29,
	0xf0, 0x9c, 0xba, 0xce, 0xe4, 0x20, 0xf1, 0xc5, 0x32, 0xd2, 0xb1, 0x92, 0xf2, 0x95, 0x82, 0x85,
	0x4a, 0x65, 0x78, 0x50, 0xcb, 0xf2, 0x80, 0x77, 0x90, 0xd3, 0xb5, 0x4b, 0xdd, 0x38, 0x61, 0xc4,
	0xde, 0x15, 0x5b, 0xa3, 0x8a, 0xf3, 0xa0, 0xf5, 0x93, 0x96, 0x7d, 0x58, 0xae, 0xc3, 0x94, 0xf7,
	0xa0, 0xc9, 0x5d, 0x9f, 0x8f, 0x46, 0x84, 0xed, 0x53, 0x9f, 0xc6, 0xaa, 0xda, 0x0b, 0x68, 0x6a,
	0xb7, 0x1f, 0x9e, 0xa5, 0x76, 0x2b, 0x73, 0xbb, 0x39, 0x7a, 0x15, 0xaf, 0xb7, 0xde, 0x07, 0xb4,
	0xbc, 0x19, 0xd0, 0x3a, 0x34, 0x1e, 0xbf, 0x38, 0xea, 0xf1, 0x85, 0x70, 0xc8, 0x17, 0xc2, 0x5a,
	0xe1, 0xc9, 0xb3, 0x37, 0xbf, 0x9b, 0x85, 0x9f, 0xa7, 0xa6, 0xf6, 0x6a, 0x6a, 0x6a, 0xaf, 0xa7,
	0xa6, 0xf6, 0xdb, 0xd4, 0xd4, 0xfe, 0x9c, 0x9a, 0x85, 0xbf, 0xa6, 0xa6, 0xf6, 0xdd, 0x85, 0x59,
	0x78, 0x75, 0x61, 0x6a, 0xaf, 0x2f, 0xcc, 0xc2, 0x9b, 0x0b, 0xb3, 0xf0, 0xd5, 0x5d, 0x37, 0xa4,
	0xc1, 0x87, 0x11, 0x61, 0x63, 0xc2, 0xb6, 0x5d, 0xce, 0xdc, 0x60, 0x3b, 0xfb, 0xdf, 0x7b, 0x5c,
	0x16, 0xd2, 0xc7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xa6, 0xe8, 0x28, 0x70, 0x0b, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyItems.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyCastsword.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyChallenge.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyExchange.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyGift.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyRanking.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolActivityWeekly.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolActivityRankingOverData.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyCastswordCnf.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyChallengeCnf.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyExchangeCnf.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyGiftCnf.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklyRankCnf.Get().(proto.Message)
	})
}

var poolWeeklyItems = &sync.Pool{New: func() interface{} { return &WeeklyItems{} }}

func (m *WeeklyItems) ReleasePool() { m.Reset(); poolWeeklyItems.Put(m); m = nil }

var poolWeeklyCastsword = &sync.Pool{New: func() interface{} { return &WeeklyCastsword{} }}

func (m *WeeklyCastsword) ReleasePool() { m.Reset(); poolWeeklyCastsword.Put(m); m = nil }

var poolWeeklyChallenge = &sync.Pool{New: func() interface{} { return &WeeklyChallenge{} }}

func (m *WeeklyChallenge) ReleasePool() { m.Reset(); poolWeeklyChallenge.Put(m); m = nil }

var poolWeeklyExchange = &sync.Pool{New: func() interface{} { return &WeeklyExchange{} }}

func (m *WeeklyExchange) ReleasePool() { m.Reset(); poolWeeklyExchange.Put(m); m = nil }

var poolWeeklyGift = &sync.Pool{New: func() interface{} { return &WeeklyGift{} }}

func (m *WeeklyGift) ReleasePool() { m.Reset(); poolWeeklyGift.Put(m); m = nil }

var poolWeeklyRanking = &sync.Pool{New: func() interface{} { return &WeeklyRanking{} }}

func (m *WeeklyRanking) ReleasePool() { m.Reset(); poolWeeklyRanking.Put(m); m = nil }

var poolActivityWeekly = &sync.Pool{New: func() interface{} { return &ActivityWeekly{} }}

func (m *ActivityWeekly) ReleasePool() { m.Reset(); poolActivityWeekly.Put(m); m = nil }

var poolActivityRankingOverData = &sync.Pool{New: func() interface{} { return &ActivityRankingOverData{} }}

func (m *ActivityRankingOverData) ReleasePool() {
	m.Reset()
	poolActivityRankingOverData.Put(m)
	m = nil
}

var poolWeeklyCastswordCnf = &sync.Pool{New: func() interface{} { return &WeeklyCastswordCnf{} }}

func (m *WeeklyCastswordCnf) ReleasePool() { m.Reset(); poolWeeklyCastswordCnf.Put(m); m = nil }

var poolWeeklyChallengeCnf = &sync.Pool{New: func() interface{} { return &WeeklyChallengeCnf{} }}

func (m *WeeklyChallengeCnf) ReleasePool() { m.Reset(); poolWeeklyChallengeCnf.Put(m); m = nil }

var poolWeeklyExchangeCnf = &sync.Pool{New: func() interface{} { return &WeeklyExchangeCnf{} }}

func (m *WeeklyExchangeCnf) ReleasePool() { m.Reset(); poolWeeklyExchangeCnf.Put(m); m = nil }

var poolWeeklyGiftCnf = &sync.Pool{New: func() interface{} { return &WeeklyGiftCnf{} }}

func (m *WeeklyGiftCnf) ReleasePool() { m.Reset(); poolWeeklyGiftCnf.Put(m); m = nil }

var poolWeeklyRankCnf = &sync.Pool{New: func() interface{} { return &WeeklyRankCnf{} }}

func (m *WeeklyRankCnf) ReleasePool() { m.Reset(); poolWeeklyRankCnf.Put(m); m = nil }
func (x ActivityWeeklyType) String() string {
	s, ok := ActivityWeeklyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *WeeklyItems) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyItems)
	if !ok {
		that2, ok := that.(WeeklyItems)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if this.IsDouble != that1.IsDouble {
		return false
	}
	return true
}
func (this *WeeklyCastsword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyCastsword)
	if !ok {
		that2, ok := that.(WeeklyCastsword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FreeTimes != that1.FreeTimes {
		return false
	}
	if this.CurId != that1.CurId {
		return false
	}
	if this.SequenceId != that1.SequenceId {
		return false
	}
	if this.CurTimes != that1.CurTimes {
		return false
	}
	return true
}
func (this *WeeklyChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyChallenge)
	if !ok {
		that2, ok := that.(WeeklyChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	if len(this.GuildRewards) != len(that1.GuildRewards) {
		return false
	}
	for i := range this.GuildRewards {
		if this.GuildRewards[i] != that1.GuildRewards[i] {
			return false
		}
	}
	return true
}
func (this *WeeklyExchange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyExchange)
	if !ok {
		that2, ok := that.(WeeklyExchange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExchangeTimes) != len(that1.ExchangeTimes) {
		return false
	}
	for i := range this.ExchangeTimes {
		if this.ExchangeTimes[i] != that1.ExchangeTimes[i] {
			return false
		}
	}
	return true
}
func (this *WeeklyGift) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyGift)
	if !ok {
		that2, ok := that.(WeeklyGift)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BuyTimes) != len(that1.BuyTimes) {
		return false
	}
	for i := range this.BuyTimes {
		if this.BuyTimes[i] != that1.BuyTimes[i] {
			return false
		}
	}
	return true
}
func (this *WeeklyRanking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyRanking)
	if !ok {
		that2, ok := that.(WeeklyRanking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	return true
}
func (this *ActivityWeekly) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityWeekly)
	if !ok {
		that2, ok := that.(ActivityWeekly)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.NextRefreshTime != that1.NextRefreshTime {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.FreeTimes != that1.FreeTimes {
		return false
	}
	if !this.ChallengeInfo.Equal(that1.ChallengeInfo) {
		return false
	}
	if !this.ExchangeInfo.Equal(that1.ExchangeInfo) {
		return false
	}
	if !this.GiftInfo.Equal(that1.GiftInfo) {
		return false
	}
	if !this.RankingInfo.Equal(that1.RankingInfo) {
		return false
	}
	if this.IsFinished != that1.IsFinished {
		return false
	}
	return true
}
func (this *ActivityRankingOverData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityRankingOverData)
	if !ok {
		that2, ok := that.(ActivityRankingOverData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *WeeklyCastswordCnf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyCastswordCnf)
	if !ok {
		that2, ok := that.(WeeklyCastswordCnf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.Sequence != that1.Sequence {
		return false
	}
	if len(this.ActivityItem) != len(that1.ActivityItem) {
		return false
	}
	for i := range this.ActivityItem {
		if this.ActivityItem[i] != that1.ActivityItem[i] {
			return false
		}
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	return true
}
func (this *WeeklyChallengeCnf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyChallengeCnf)
	if !ok {
		that2, ok := that.(WeeklyChallengeCnf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Times != that1.Times {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	return true
}
func (this *WeeklyExchangeCnf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyExchangeCnf)
	if !ok {
		that2, ok := that.(WeeklyExchangeCnf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if len(this.RequiredProps) != len(that1.RequiredProps) {
		return false
	}
	for i := range this.RequiredProps {
		if this.RequiredProps[i] != that1.RequiredProps[i] {
			return false
		}
	}
	if len(this.Commodities) != len(that1.Commodities) {
		return false
	}
	for i := range this.Commodities {
		if this.Commodities[i] != that1.Commodities[i] {
			return false
		}
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	if this.IsRefresh != that1.IsRefresh {
		return false
	}
	return true
}
func (this *WeeklyGiftCnf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyGiftCnf)
	if !ok {
		that2, ok := that.(WeeklyGiftCnf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Language1 != that1.Language1 {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.GridId != that1.GridId {
		return false
	}
	if len(this.GradeRange) != len(that1.GradeRange) {
		return false
	}
	for i := range this.GradeRange {
		if this.GradeRange[i] != that1.GradeRange[i] {
			return false
		}
	}
	if len(this.RechargeInterval) != len(that1.RechargeInterval) {
		return false
	}
	for i := range this.RechargeInterval {
		if this.RechargeInterval[i] != that1.RechargeInterval[i] {
			return false
		}
	}
	if this.BuyType != that1.BuyType {
		return false
	}
	if len(this.PayId) != len(that1.PayId) {
		return false
	}
	for i := range this.PayId {
		if this.PayId[i] != that1.PayId[i] {
			return false
		}
	}
	if this.PayNum != that1.PayNum {
		return false
	}
	if this.IsRefresh != that1.IsRefresh {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	if this.ItemPictureID != that1.ItemPictureID {
		return false
	}
	return true
}
func (this *WeeklyRankCnf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklyRankCnf)
	if !ok {
		that2, ok := that.(WeeklyRankCnf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.RankUpperLimit != that1.RankUpperLimit {
		return false
	}
	if this.RankLowerLimit != that1.RankLowerLimit {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	return true
}
func (m *WeeklyItems) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyItems) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyItems) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDouble {
		i--
		if m.IsDouble {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActivityWeekly(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyCastsword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyCastsword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyCastsword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurTimes != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.CurTimes))
		i--
		dAtA[i] = 0x20
	}
	if m.SequenceId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.SequenceId))
		i--
		dAtA[i] = 0x18
	}
	if m.CurId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.CurId))
		i--
		dAtA[i] = 0x10
	}
	if m.FreeTimes != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.FreeTimes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuildRewards) > 0 {
		for k := range m.GuildRewards {
			v := m.GuildRewards[k]
			baseI := i
			i = encodeVarintActivityWeekly(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivityWeekly(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivityWeekly(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintActivityWeekly(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivityWeekly(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivityWeekly(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintActivityWeekly(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExchangeTimes) > 0 {
		for k := range m.ExchangeTimes {
			v := m.ExchangeTimes[k]
			baseI := i
			i = encodeVarintActivityWeekly(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivityWeekly(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivityWeekly(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyGift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyGift) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyGift) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyTimes) > 0 {
		for k := range m.BuyTimes {
			v := m.BuyTimes[k]
			baseI := i
			i = encodeVarintActivityWeekly(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivityWeekly(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivityWeekly(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyRanking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyRanking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyRanking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintActivityWeekly(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityWeekly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityWeekly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityWeekly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFinished {
		i--
		if m.IsFinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.RankingInfo != nil {
		{
			size, err := m.RankingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityWeekly(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.GiftInfo != nil {
		{
			size, err := m.GiftInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityWeekly(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ExchangeInfo != nil {
		{
			size, err := m.ExchangeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityWeekly(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ChallengeInfo != nil {
		{
			size, err := m.ChallengeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityWeekly(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.FreeTimes != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.FreeTimes))
		i--
		dAtA[i] = 0x40
	}
	if m.Score != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x38
	}
	if m.Type != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.NextRefreshTime != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.NextRefreshTime))
		i--
		dAtA[i] = 0x28
	}
	if m.EndTime != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityRankingOverData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityRankingOverData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityRankingOverData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x98
	}
	if m.Version != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintActivityWeekly(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyCastswordCnf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyCastswordCnf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyCastswordCnf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		dAtA6 := make([]byte, len(m.Reward)*10)
		var j5 int
		for _, num1 := range m.Reward {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ActivityItem) > 0 {
		dAtA8 := make([]byte, len(m.ActivityItem)*10)
		var j7 int
		for _, num1 := range m.ActivityItem {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyChallengeCnf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyChallengeCnf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyChallengeCnf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		dAtA10 := make([]byte, len(m.Reward)*10)
		var j9 int
		for _, num1 := range m.Reward {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x2a
	}
	if m.Times != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x20
	}
	if m.Typ != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyExchangeCnf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyExchangeCnf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyExchangeCnf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRefresh != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.IsRefresh))
		i--
		dAtA[i] = 0x30
	}
	if m.Maximum != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Maximum))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Commodities) > 0 {
		dAtA12 := make([]byte, len(m.Commodities)*10)
		var j11 int
		for _, num1 := range m.Commodities {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RequiredProps) > 0 {
		dAtA14 := make([]byte, len(m.RequiredProps)*10)
		var j13 int
		for _, num1 := range m.RequiredProps {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x1a
	}
	if m.ActivityId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyGiftCnf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyGiftCnf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyGiftCnf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemPictureID) > 0 {
		i -= len(m.ItemPictureID)
		copy(dAtA[i:], m.ItemPictureID)
		i = encodeVarintActivityWeekly(dAtA, i, uint64(len(m.ItemPictureID)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Reward) > 0 {
		dAtA16 := make([]byte, len(m.Reward)*10)
		var j15 int
		for _, num1 := range m.Reward {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsRefresh != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.IsRefresh))
		i--
		dAtA[i] = 0x50
	}
	if m.PayNum != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.PayNum))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PayId) > 0 {
		dAtA18 := make([]byte, len(m.PayId)*10)
		var j17 int
		for _, num1 := range m.PayId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x42
	}
	if m.BuyType != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.BuyType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.RechargeInterval) > 0 {
		dAtA20 := make([]byte, len(m.RechargeInterval)*10)
		var j19 int
		for _, num1 := range m.RechargeInterval {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GradeRange) > 0 {
		dAtA22 := make([]byte, len(m.GradeRange)*10)
		var j21 int
		for _, num1 := range m.GradeRange {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0x2a
	}
	if m.GridId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.GridId))
		i--
		dAtA[i] = 0x20
	}
	if m.ActivityId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Language1) > 0 {
		i -= len(m.Language1)
		copy(dAtA[i:], m.Language1)
		i = encodeVarintActivityWeekly(dAtA, i, uint64(len(m.Language1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeeklyRankCnf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklyRankCnf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklyRankCnf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		dAtA24 := make([]byte, len(m.Reward)*10)
		var j23 int
		for _, num1 := range m.Reward {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		i -= j23
		copy(dAtA[i:], dAtA24[:j23])
		i = encodeVarintActivityWeekly(dAtA, i, uint64(j23))
		i--
		dAtA[i] = 0x2a
	}
	if m.RankLowerLimit != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.RankLowerLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.RankUpperLimit != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.RankUpperLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintActivityWeekly(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintActivityWeekly(dAtA []byte, offset int, v uint64) int {
	offset -= sovActivityWeekly(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *WeeklyItems) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsDouble {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_double")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsDouble)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyCastsword) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.FreeTimes != 0 {
		w.RawByte('"')
		w.RawString("free_times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeTimes))
		needWriteComma = true
	}
	if m.CurId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurId))
		needWriteComma = true
	}
	if m.SequenceId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sequence_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SequenceId))
		needWriteComma = true
	}
	if m.CurTimes != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurTimes))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyChallenge) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildId != "" {
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("guild_rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.GuildRewards == nil {
		w.RawString("null")
	} else if len(m.GuildRewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlGuildRewards := len(m.GuildRewards)
		for k, v := range m.GuildRewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlGuildRewards--
			if mlGuildRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyExchange) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("exchange_times")
	w.RawByte('"')
	w.RawByte(':')
	if m.ExchangeTimes == nil {
		w.RawString("null")
	} else if len(m.ExchangeTimes) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlExchangeTimes := len(m.ExchangeTimes)
		for k, v := range m.ExchangeTimes {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlExchangeTimes--
			if mlExchangeTimes != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyGift) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("buy_times")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuyTimes == nil {
		w.RawString("null")
	} else if len(m.BuyTimes) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuyTimes := len(m.BuyTimes)
		for k, v := range m.BuyTimes {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlBuyTimes--
			if mlBuyTimes != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyRanking) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankingIndex != "" {
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ActivityWeekly) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Version != 0 {
		w.RawByte('"')
		w.RawString("version")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Version))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.StartTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartTime))
		needWriteComma = true
	}
	if m.EndTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	if m.NextRefreshTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRefreshTime))
		needWriteComma = true
	}
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	if m.FreeTimes != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("free_times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeTimes))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("challenge_info")
	w.RawByte('"')
	w.RawByte(':')
	m.ChallengeInfo.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("exchange_info")
	w.RawByte('"')
	w.RawByte(':')
	m.ExchangeInfo.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("gift_info")
	w.RawByte('"')
	w.RawByte(':')
	m.GiftInfo.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("ranking_info")
	w.RawByte('"')
	w.RawByte(':')
	m.RankingInfo.JsonBytes(w)
	needWriteComma = true
	if m.IsFinished {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_finished")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsFinished)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ActivityRankingOverData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankingIndex != "" {
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.Version != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("version")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Version))
		needWriteComma = true
	}
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyCastswordCnf) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("Id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ActivityId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.Sequence != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Sequence")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Sequence))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("ActivityItem")
	w.RawByte('"')
	w.RawByte(':')
	if m.ActivityItem == nil {
		w.RawString("null")
	} else if len(m.ActivityItem) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ActivityItem {
			w.Int64(int64(v))
			if i != len(m.ActivityItem)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("Reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Reward {
			w.Int64(int64(v))
			if i != len(m.Reward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyChallengeCnf) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("Id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ActivityId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Times != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Times))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("Reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Reward {
			w.Int64(int64(v))
			if i != len(m.Reward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyExchangeCnf) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("Id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ActivityId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("RequiredProps")
	w.RawByte('"')
	w.RawByte(':')
	if m.RequiredProps == nil {
		w.RawString("null")
	} else if len(m.RequiredProps) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RequiredProps {
			w.Int64(int64(v))
			if i != len(m.RequiredProps)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("Commodities")
	w.RawByte('"')
	w.RawByte(':')
	if m.Commodities == nil {
		w.RawString("null")
	} else if len(m.Commodities) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Commodities {
			w.Int64(int64(v))
			if i != len(m.Commodities)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Maximum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Maximum")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Maximum))
		needWriteComma = true
	}
	if m.IsRefresh != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("IsRefresh")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.IsRefresh))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyGiftCnf) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("Id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Language1 != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Language1")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Language1)
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ActivityId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.GridId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("GridId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GridId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("GradeRange")
	w.RawByte('"')
	w.RawByte(':')
	if m.GradeRange == nil {
		w.RawString("null")
	} else if len(m.GradeRange) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.GradeRange {
			w.Int64(int64(v))
			if i != len(m.GradeRange)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("RechargeInterval")
	w.RawByte('"')
	w.RawByte(':')
	if m.RechargeInterval == nil {
		w.RawString("null")
	} else if len(m.RechargeInterval) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RechargeInterval {
			w.Int64(int64(v))
			if i != len(m.RechargeInterval)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.BuyType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("BuyType")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuyType))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("PayId")
	w.RawByte('"')
	w.RawByte(':')
	if m.PayId == nil {
		w.RawString("null")
	} else if len(m.PayId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.PayId {
			w.Int64(int64(v))
			if i != len(m.PayId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.PayNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("PayNum")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PayNum))
		needWriteComma = true
	}
	if m.IsRefresh != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("IsRefresh")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.IsRefresh))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("Reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Reward {
			w.Int64(int64(v))
			if i != len(m.Reward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.ItemPictureID != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ItemPictureID")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ItemPictureID)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyRankCnf) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("Id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ActivityId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.RankUpperLimit != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("RankUpperLimit")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankUpperLimit))
		needWriteComma = true
	}
	if m.RankLowerLimit != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("RankLowerLimit")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankLowerLimit))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("Reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Reward {
			w.Int64(int64(v))
			if i != len(m.Reward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklyItems) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyItems) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyItems) GoString() string {
	return m.String()
}

func (m *WeeklyCastsword) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyCastsword) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyCastsword) GoString() string {
	return m.String()
}

func (m *WeeklyChallenge) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyChallenge) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyChallenge) GoString() string {
	return m.String()
}

func (m *WeeklyExchange) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyExchange) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyExchange) GoString() string {
	return m.String()
}

func (m *WeeklyGift) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyGift) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyGift) GoString() string {
	return m.String()
}

func (m *WeeklyRanking) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyRanking) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyRanking) GoString() string {
	return m.String()
}

func (m *ActivityWeekly) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ActivityWeekly) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ActivityWeekly) GoString() string {
	return m.String()
}

func (m *ActivityRankingOverData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ActivityRankingOverData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ActivityRankingOverData) GoString() string {
	return m.String()
}

func (m *WeeklyCastswordCnf) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyCastswordCnf) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyCastswordCnf) GoString() string {
	return m.String()
}

func (m *WeeklyChallengeCnf) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyChallengeCnf) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyChallengeCnf) GoString() string {
	return m.String()
}

func (m *WeeklyExchangeCnf) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyExchangeCnf) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyExchangeCnf) GoString() string {
	return m.String()
}

func (m *WeeklyGiftCnf) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyGiftCnf) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyGiftCnf) GoString() string {
	return m.String()
}

func (m *WeeklyRankCnf) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklyRankCnf) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklyRankCnf) GoString() string {
	return m.String()
}

func (m *WeeklyItems) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovActivityWeekly(uint64(l))
		}
	}
	if m.IsDouble {
		n += 2
	}
	return n
}

func (m *WeeklyCastsword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FreeTimes != 0 {
		n += 1 + sovActivityWeekly(uint64(m.FreeTimes))
	}
	if m.CurId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.CurId))
	}
	if m.SequenceId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.SequenceId))
	}
	if m.CurTimes != 0 {
		n += 1 + sovActivityWeekly(uint64(m.CurTimes))
	}
	return n
}

func (m *WeeklyChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovActivityWeekly(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivityWeekly(uint64(k)) + 1 + sovActivityWeekly(uint64(v))
			n += mapEntrySize + 1 + sovActivityWeekly(uint64(mapEntrySize))
		}
	}
	if len(m.GuildRewards) > 0 {
		for k, v := range m.GuildRewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivityWeekly(uint64(k)) + 1 + sovActivityWeekly(uint64(v))
			n += mapEntrySize + 1 + sovActivityWeekly(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *WeeklyExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeTimes) > 0 {
		for k, v := range m.ExchangeTimes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivityWeekly(uint64(k)) + 1 + sovActivityWeekly(uint64(v))
			n += mapEntrySize + 1 + sovActivityWeekly(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *WeeklyGift) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuyTimes) > 0 {
		for k, v := range m.BuyTimes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivityWeekly(uint64(k)) + 1 + sovActivityWeekly(uint64(v))
			n += mapEntrySize + 1 + sovActivityWeekly(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *WeeklyRanking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovActivityWeekly(uint64(l))
	}
	return n
}

func (m *ActivityWeekly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Version))
	}
	if m.ActivityId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.ActivityId))
	}
	if m.StartTime != 0 {
		n += 1 + sovActivityWeekly(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovActivityWeekly(uint64(m.EndTime))
	}
	if m.NextRefreshTime != 0 {
		n += 1 + sovActivityWeekly(uint64(m.NextRefreshTime))
	}
	if m.Type != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Type))
	}
	if m.Score != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Score))
	}
	if m.FreeTimes != 0 {
		n += 1 + sovActivityWeekly(uint64(m.FreeTimes))
	}
	if m.ChallengeInfo != nil {
		l = m.ChallengeInfo.Size()
		n += 1 + l + sovActivityWeekly(uint64(l))
	}
	if m.ExchangeInfo != nil {
		l = m.ExchangeInfo.Size()
		n += 1 + l + sovActivityWeekly(uint64(l))
	}
	if m.GiftInfo != nil {
		l = m.GiftInfo.Size()
		n += 1 + l + sovActivityWeekly(uint64(l))
	}
	if m.RankingInfo != nil {
		l = m.RankingInfo.Size()
		n += 1 + l + sovActivityWeekly(uint64(l))
	}
	if m.IsFinished {
		n += 2
	}
	return n
}

func (m *ActivityRankingOverData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovActivityWeekly(uint64(l))
	}
	if m.ActivityId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.ActivityId))
	}
	if m.Version != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Version))
	}
	if m.Type != 0 {
		n += 2 + sovActivityWeekly(uint64(m.Type))
	}
	return n
}

func (m *WeeklyCastswordCnf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.ActivityId))
	}
	if m.Sequence != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Sequence))
	}
	if len(m.ActivityItem) > 0 {
		l = 0
		for _, e := range m.ActivityItem {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	if len(m.Reward) > 0 {
		l = 0
		for _, e := range m.Reward {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	return n
}

func (m *WeeklyChallengeCnf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.ActivityId))
	}
	if m.Typ != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Typ))
	}
	if m.Times != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Times))
	}
	if len(m.Reward) > 0 {
		l = 0
		for _, e := range m.Reward {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	return n
}

func (m *WeeklyExchangeCnf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.ActivityId))
	}
	if len(m.RequiredProps) > 0 {
		l = 0
		for _, e := range m.RequiredProps {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	if len(m.Commodities) > 0 {
		l = 0
		for _, e := range m.Commodities {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	if m.Maximum != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Maximum))
	}
	if m.IsRefresh != 0 {
		n += 1 + sovActivityWeekly(uint64(m.IsRefresh))
	}
	return n
}

func (m *WeeklyGiftCnf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Id))
	}
	l = len(m.Language1)
	if l > 0 {
		n += 1 + l + sovActivityWeekly(uint64(l))
	}
	if m.ActivityId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.ActivityId))
	}
	if m.GridId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.GridId))
	}
	if len(m.GradeRange) > 0 {
		l = 0
		for _, e := range m.GradeRange {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	if len(m.RechargeInterval) > 0 {
		l = 0
		for _, e := range m.RechargeInterval {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	if m.BuyType != 0 {
		n += 1 + sovActivityWeekly(uint64(m.BuyType))
	}
	if len(m.PayId) > 0 {
		l = 0
		for _, e := range m.PayId {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	if m.PayNum != 0 {
		n += 1 + sovActivityWeekly(uint64(m.PayNum))
	}
	if m.IsRefresh != 0 {
		n += 1 + sovActivityWeekly(uint64(m.IsRefresh))
	}
	if len(m.Reward) > 0 {
		l = 0
		for _, e := range m.Reward {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	l = len(m.ItemPictureID)
	if l > 0 {
		n += 1 + l + sovActivityWeekly(uint64(l))
	}
	return n
}

func (m *WeeklyRankCnf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActivityWeekly(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovActivityWeekly(uint64(m.ActivityId))
	}
	if m.RankUpperLimit != 0 {
		n += 1 + sovActivityWeekly(uint64(m.RankUpperLimit))
	}
	if m.RankLowerLimit != 0 {
		n += 1 + sovActivityWeekly(uint64(m.RankLowerLimit))
	}
	if len(m.Reward) > 0 {
		l = 0
		for _, e := range m.Reward {
			l += sovActivityWeekly(uint64(e))
		}
		n += 1 + sovActivityWeekly(uint64(l)) + l
	}
	return n
}

func sovActivityWeekly(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActivityWeekly(x uint64) (n int) {
	return sovActivityWeekly(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WeeklyItems) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDouble", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDouble = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyCastsword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyCastsword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyCastsword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeTimes", wireType)
			}
			m.FreeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurId", wireType)
			}
			m.CurId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurTimes", wireType)
			}
			m.CurTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]RewardStatus)
			}
			var mapkey int64
			var mapvalue RewardStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= RewardStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivityWeekly(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivityWeekly
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuildRewards == nil {
				m.GuildRewards = make(map[int64]RewardStatus)
			}
			var mapkey int64
			var mapvalue RewardStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= RewardStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivityWeekly(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivityWeekly
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GuildRewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExchangeTimes == nil {
				m.ExchangeTimes = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivityWeekly(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivityWeekly
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExchangeTimes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyGift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyGift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyGift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyTimes == nil {
				m.BuyTimes = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivityWeekly(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivityWeekly
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuyTimes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyRanking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyRanking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyRanking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityWeekly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityWeekly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityWeekly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ActivityWeeklyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeTimes", wireType)
			}
			m.FreeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeInfo == nil {
				m.ChallengeInfo = &WeeklyChallenge{}
			}
			if err := m.ChallengeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExchangeInfo == nil {
				m.ExchangeInfo = &WeeklyExchange{}
			}
			if err := m.ExchangeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GiftInfo == nil {
				m.GiftInfo = &WeeklyGift{}
			}
			if err := m.GiftInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankingInfo == nil {
				m.RankingInfo = &WeeklyRanking{}
			}
			if err := m.RankingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFinished = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityRankingOverData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityRankingOverData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityRankingOverData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ActivityWeeklyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyCastswordCnf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyCastswordCnf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyCastswordCnf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActivityItem = append(m.ActivityItem, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ActivityItem) == 0 {
					m.ActivityItem = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActivityItem = append(m.ActivityItem, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityItem", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Reward = append(m.Reward, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Reward) == 0 {
					m.Reward = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Reward = append(m.Reward, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyChallengeCnf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyChallengeCnf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyChallengeCnf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Reward = append(m.Reward, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Reward) == 0 {
					m.Reward = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Reward = append(m.Reward, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyExchangeCnf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyExchangeCnf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyExchangeCnf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequiredProps = append(m.RequiredProps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RequiredProps) == 0 {
					m.RequiredProps = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequiredProps = append(m.RequiredProps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredProps", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Commodities = append(m.Commodities, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Commodities) == 0 {
					m.Commodities = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Commodities = append(m.Commodities, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Commodities", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRefresh", wireType)
			}
			m.IsRefresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsRefresh |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyGiftCnf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyGiftCnf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyGiftCnf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridId", wireType)
			}
			m.GridId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GridId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GradeRange = append(m.GradeRange, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GradeRange) == 0 {
					m.GradeRange = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GradeRange = append(m.GradeRange, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GradeRange", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RechargeInterval = append(m.RechargeInterval, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RechargeInterval) == 0 {
					m.RechargeInterval = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RechargeInterval = append(m.RechargeInterval, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeInterval", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyType", wireType)
			}
			m.BuyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PayId = append(m.PayId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PayId) == 0 {
					m.PayId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PayId = append(m.PayId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PayId", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayNum", wireType)
			}
			m.PayNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRefresh", wireType)
			}
			m.IsRefresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsRefresh |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Reward = append(m.Reward, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Reward) == 0 {
					m.Reward = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Reward = append(m.Reward, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemPictureID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemPictureID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklyRankCnf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklyRankCnf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklyRankCnf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankUpperLimit", wireType)
			}
			m.RankUpperLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankUpperLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankLowerLimit", wireType)
			}
			m.RankLowerLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankLowerLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Reward = append(m.Reward, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityWeekly
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivityWeekly
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Reward) == 0 {
					m.Reward = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityWeekly
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Reward = append(m.Reward, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityWeekly(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityWeekly
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActivityWeekly(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActivityWeekly
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityWeekly
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActivityWeekly
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActivityWeekly
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActivityWeekly
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActivityWeekly        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActivityWeekly          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActivityWeekly = fmt.Errorf("proto: unexpected end of group")
)
