// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/equip_forge.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EquipForge struct {
	Level      int64           `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp        int64           `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	ForgeCount map[int64]int64 `protobuf:"bytes,4,rep,name=forge_count,json=forgeCount,proto3" json:"forge_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *EquipForge) Reset()      { *m = EquipForge{} }
func (*EquipForge) ProtoMessage() {}
func (*EquipForge) Descriptor() ([]byte, []int) {
	return fileDescriptor_7436d6d037d509e1, []int{0}
}
func (m *EquipForge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipForge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipForge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipForge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipForge.Merge(m, src)
}
func (m *EquipForge) XXX_Size() int {
	return m.Size()
}
func (m *EquipForge) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipForge.DiscardUnknown(m)
}

var xxx_messageInfo_EquipForge proto.InternalMessageInfo

func (m *EquipForge) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *EquipForge) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *EquipForge) GetForgeCount() map[int64]int64 {
	if m != nil {
		return m.ForgeCount
	}
	return nil
}

func (*EquipForge) XXX_MessageName() string {
	return "models.EquipForge"
}
func init() {
	proto.RegisterType((*EquipForge)(nil), "models.EquipForge")
	proto.RegisterMapType((map[int64]int64)(nil), "models.EquipForge.ForgeCountEntry")
}

func init() { proto.RegisterFile("proto/models/equip_forge.proto", fileDescriptor_7436d6d037d509e1) }

var fileDescriptor_7436d6d037d509e1 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0xcd, 0x4f, 0x49, 0xcd, 0x29, 0xd6, 0x4f, 0x2d, 0x2c, 0xcd, 0x2c, 0x88, 0x4f,
	0xcb, 0x2f, 0x4a, 0x4f, 0xd5, 0x03, 0x4b, 0x08, 0xb1, 0x41, 0x64, 0x94, 0x76, 0x30, 0x72, 0x71,
	0xb9, 0x82, 0x64, 0xdd, 0x40, 0x92, 0x42, 0x22, 0x5c, 0xac, 0x39, 0xa9, 0x65, 0xa9, 0x39, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x10, 0x8e, 0x90, 0x00, 0x17, 0x73, 0x6a, 0x45, 0x81, 0x04,
	0x13, 0x58, 0x0c, 0xc4, 0x14, 0x72, 0xe6, 0xe2, 0x06, 0x9b, 0x16, 0x9f, 0x9c, 0x5f, 0x9a, 0x57,
	0x22, 0xc1, 0xa2, 0xc0, 0xac, 0xc1, 0x6d, 0xa4, 0xa4, 0x07, 0x31, 0x54, 0x0f, 0x61, 0xa0, 0x1e,
	0x98, 0x74, 0x06, 0x29, 0x72, 0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0xe2, 0x4a, 0x83, 0x0b, 0x48, 0xd9,
	0x72, 0xf1, 0xa3, 0x49, 0x83, 0x6c, 0xca, 0x4e, 0xad, 0x84, 0xda, 0x0e, 0x62, 0x82, 0x5c, 0x54,
	0x96, 0x98, 0x53, 0x9a, 0x0a, 0xb5, 0x1d, 0xc2, 0xb1, 0x62, 0xb2, 0x60, 0x74, 0xf2, 0xbd, 0xf1,
	0x50, 0x8e, 0x61, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63,
	0x38, 0xf1, 0x58, 0x8e, 0xf1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xe4, 0x93,
	0xf3, 0x33, 0xf3, 0x74, 0x8b, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0xf4, 0x93, 0xf3, 0x73, 0x73, 0xf3,
	0xf3, 0xf4, 0x91, 0xc3, 0x28, 0x89, 0x0d, 0xcc, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x33,
	0x62, 0x45, 0xa6, 0x3a, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipForge.Get().(proto.Message)
	})
}

var poolEquipForge = &sync.Pool{New: func() interface{} { return &EquipForge{} }}

func (m *EquipForge) ReleasePool() { m.Reset(); poolEquipForge.Put(m); m = nil }
func (this *EquipForge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipForge)
	if !ok {
		that2, ok := that.(EquipForge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Exp != that1.Exp {
		return false
	}
	if len(this.ForgeCount) != len(that1.ForgeCount) {
		return false
	}
	for i := range this.ForgeCount {
		if this.ForgeCount[i] != that1.ForgeCount[i] {
			return false
		}
	}
	return true
}
func (m *EquipForge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipForge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipForge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForgeCount) > 0 {
		for k := range m.ForgeCount {
			v := m.ForgeCount[k]
			baseI := i
			i = encodeVarintEquipForge(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintEquipForge(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEquipForge(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Exp != 0 {
		i = encodeVarintEquipForge(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintEquipForge(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEquipForge(dAtA []byte, offset int, v uint64) int {
	offset -= sovEquipForge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *EquipForge) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Level != 0 {
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.Exp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("exp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Exp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("forge_count")
	w.RawByte('"')
	w.RawByte(':')
	if m.ForgeCount == nil {
		w.RawString("null")
	} else if len(m.ForgeCount) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlForgeCount := len(m.ForgeCount)
		for k, v := range m.ForgeCount {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlForgeCount--
			if mlForgeCount != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EquipForge) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipForge) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipForge) GoString() string {
	return m.String()
}

func (m *EquipForge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovEquipForge(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovEquipForge(uint64(m.Exp))
	}
	if len(m.ForgeCount) > 0 {
		for k, v := range m.ForgeCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovEquipForge(uint64(k)) + 1 + sovEquipForge(uint64(v))
			n += mapEntrySize + 1 + sovEquipForge(uint64(mapEntrySize))
		}
	}
	return n
}

func sovEquipForge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEquipForge(x uint64) (n int) {
	return sovEquipForge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EquipForge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipForge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipForge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForgeCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquipForge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquipForge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForgeCount == nil {
				m.ForgeCount = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipForge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquipForge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquipForge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEquipForge(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEquipForge
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ForgeCount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquipForge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipForge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEquipForge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEquipForge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquipForge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEquipForge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEquipForge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEquipForge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEquipForge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEquipForge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEquipForge = fmt.Errorf("proto: unexpected end of group")
)
