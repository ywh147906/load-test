// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/atlas.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AtlasType int32

const (
	AtlasType_EquipAtlas   AtlasType = 0
	AtlasType_RelicsAtlas  AtlasType = 1
	AtlasType_PictureAtlas AtlasType = 2
	AtlasType_SuitAtlas    AtlasType = 3
)

var AtlasType_name = map[int32]string{
	0: "EquipAtlas",
	1: "RelicsAtlas",
	2: "PictureAtlas",
	3: "SuitAtlas",
}

var AtlasType_value = map[string]int32{
	"EquipAtlas":   0,
	"RelicsAtlas":  1,
	"PictureAtlas": 2,
	"SuitAtlas":    3,
}

func (AtlasType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01473dee5d6658bf, []int{0}
}

type Atlas struct {
	AtlasType AtlasType              `protobuf:"varint,1,opt,name=atlas_type,json=atlasType,proto3,enum=models.AtlasType" json:"atlas_type,omitempty"`
	Each      map[int64]RewardStatus `protobuf:"bytes,2,rep,name=each,proto3" json:"each,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=models.RewardStatus"`
	Progress  int64                  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (m *Atlas) Reset()      { *m = Atlas{} }
func (*Atlas) ProtoMessage() {}
func (*Atlas) Descriptor() ([]byte, []int) {
	return fileDescriptor_01473dee5d6658bf, []int{0}
}
func (m *Atlas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Atlas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Atlas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Atlas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Atlas.Merge(m, src)
}
func (m *Atlas) XXX_Size() int {
	return m.Size()
}
func (m *Atlas) XXX_DiscardUnknown() {
	xxx_messageInfo_Atlas.DiscardUnknown(m)
}

var xxx_messageInfo_Atlas proto.InternalMessageInfo

func (m *Atlas) GetAtlasType() AtlasType {
	if m != nil {
		return m.AtlasType
	}
	return AtlasType_EquipAtlas
}

func (m *Atlas) GetEach() map[int64]RewardStatus {
	if m != nil {
		return m.Each
	}
	return nil
}

func (m *Atlas) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (*Atlas) XXX_MessageName() string {
	return "models.Atlas"
}
func init() {
	proto.RegisterEnum("models.AtlasType", AtlasType_name, AtlasType_value)
	proto.RegisterType((*Atlas)(nil), "models.Atlas")
	proto.RegisterMapType((map[int64]RewardStatus)(nil), "models.Atlas.EachEntry")
}

func init() { proto.RegisterFile("proto/models/atlas.proto", fileDescriptor_01473dee5d6658bf) }

var fileDescriptor_01473dee5d6658bf = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x18, 0x85, 0xe3, 0xe4, 0xb6, 0xba, 0xf9, 0x7b, 0x6f, 0x6f, 0xaf, 0x85, 0x44, 0xd4, 0xc1, 0x54,
	0x4c, 0x55, 0x11, 0x09, 0x2a, 0x0b, 0x62, 0x03, 0xa9, 0x63, 0x25, 0xe4, 0x32, 0xb1, 0x20, 0x93,
	0x5a, 0x34, 0x22, 0x89, 0x83, 0xed, 0x14, 0xe5, 0x2d, 0x78, 0x0c, 0x1e, 0xa5, 0x63, 0xd9, 0x3a,
	0x42, 0xb2, 0x30, 0xf2, 0x08, 0xa8, 0x0e, 0xad, 0xe8, 0xf6, 0x9f, 0x4f, 0xdf, 0x91, 0x8f, 0x0c,
	0x5e, 0x26, 0x85, 0x16, 0x41, 0x22, 0xa6, 0x3c, 0x56, 0x01, 0xd3, 0x31, 0x53, 0xbe, 0x41, 0xb8,
	0x59, 0xb3, 0xee, 0xae, 0xc1, 0xd3, 0x3c, 0xf9, 0x36, 0x0e, 0x5f, 0x11, 0x34, 0x2e, 0xd6, 0x0d,
	0x7c, 0x02, 0x60, 0xaa, 0xb7, 0xba, 0xc8, 0xb8, 0x87, 0x7a, 0xa8, 0xdf, 0x1e, 0xfe, 0xf7, 0xeb,
	0x8a, 0x6f, 0x94, 0xeb, 0x22, 0xe3, 0xd4, 0x65, 0x9b, 0x13, 0x1f, 0xc1, 0x2f, 0xce, 0xc2, 0x99,
	0x67, 0xf7, 0x9c, 0x7e, 0x6b, 0xb8, 0xbf, 0xe3, 0xfa, 0x23, 0x16, 0xce, 0x46, 0xa9, 0x96, 0x05,
	0x35, 0x12, 0xee, 0xc2, 0xef, 0x4c, 0x8a, 0x7b, 0xc9, 0x95, 0xf2, 0x9c, 0x1e, 0xea, 0x3b, 0x74,
	0x9b, 0xbb, 0x63, 0x70, 0xb7, 0x3a, 0xee, 0x80, 0xf3, 0xc0, 0x0b, 0x33, 0xc0, 0xa1, 0xeb, 0x13,
	0x0f, 0xa0, 0x31, 0x67, 0x71, 0xce, 0x3d, 0xdb, 0x8c, 0xda, 0xdb, 0x3c, 0x44, 0xf9, 0x13, 0x93,
	0xd3, 0x89, 0x66, 0x3a, 0x57, 0xb4, 0x56, 0xce, 0xed, 0x33, 0x34, 0x18, 0x83, 0xbb, 0xdd, 0x8b,
	0xdb, 0x00, 0xa3, 0xc7, 0x3c, 0xca, 0x0c, 0xe9, 0x58, 0xf8, 0x1f, 0xb4, 0x28, 0x8f, 0xa3, 0x50,
	0xd5, 0x00, 0xe1, 0x0e, 0xfc, 0xb9, 0x8a, 0x42, 0x9d, 0x4b, 0x5e, 0x13, 0x1b, 0xff, 0x05, 0x77,
	0x92, 0x47, 0xba, 0x8e, 0xce, 0xe5, 0x78, 0xf5, 0x4e, 0xac, 0x97, 0x92, 0xa0, 0x45, 0x49, 0xd0,
	0xb2, 0x24, 0xe8, 0xad, 0x24, 0xe8, 0xa3, 0x24, 0xd6, 0x67, 0x49, 0xd0, 0x73, 0x45, 0xac, 0x45,
	0x45, 0xd0, 0xb2, 0x22, 0xd6, 0xaa, 0x22, 0xd6, 0xcd, 0x41, 0x28, 0xa2, 0xf4, 0x58, 0x71, 0x39,
	0xe7, 0x32, 0x08, 0x45, 0x92, 0x88, 0x34, 0xf8, 0xf9, 0xfb, 0x77, 0x4d, 0x93, 0x4e, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xa1, 0xd1, 0x8a, 0xee, 0xb6, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAtlas.Get().(proto.Message)
	})
}

var poolAtlas = &sync.Pool{New: func() interface{} { return &Atlas{} }}

func (m *Atlas) ReleasePool() { m.Reset(); poolAtlas.Put(m); m = nil }
func (x AtlasType) String() string {
	s, ok := AtlasType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Atlas) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Atlas)
	if !ok {
		that2, ok := that.(Atlas)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AtlasType != that1.AtlasType {
		return false
	}
	if len(this.Each) != len(that1.Each) {
		return false
	}
	for i := range this.Each {
		if this.Each[i] != that1.Each[i] {
			return false
		}
	}
	if this.Progress != that1.Progress {
		return false
	}
	return true
}
func (m *Atlas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Atlas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Atlas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Progress != 0 {
		i = encodeVarintAtlas(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Each) > 0 {
		for k := range m.Each {
			v := m.Each[k]
			baseI := i
			i = encodeVarintAtlas(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintAtlas(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintAtlas(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AtlasType != 0 {
		i = encodeVarintAtlas(dAtA, i, uint64(m.AtlasType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAtlas(dAtA []byte, offset int, v uint64) int {
	offset -= sovAtlas(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Atlas) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AtlasType != 0 {
		w.RawByte('"')
		w.RawString("atlas_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AtlasType))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("each")
	w.RawByte('"')
	w.RawByte(':')
	if m.Each == nil {
		w.RawString("null")
	} else if len(m.Each) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEach := len(m.Each)
		for k, v := range m.Each {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEach--
			if mlEach != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Progress != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("progress")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Progress))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Atlas) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Atlas) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Atlas) GoString() string {
	return m.String()
}

func (m *Atlas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AtlasType != 0 {
		n += 1 + sovAtlas(uint64(m.AtlasType))
	}
	if len(m.Each) > 0 {
		for k, v := range m.Each {
			_ = k
			_ = v
			mapEntrySize := 1 + sovAtlas(uint64(k)) + 1 + sovAtlas(uint64(v))
			n += mapEntrySize + 1 + sovAtlas(uint64(mapEntrySize))
		}
	}
	if m.Progress != 0 {
		n += 1 + sovAtlas(uint64(m.Progress))
	}
	return n
}

func sovAtlas(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAtlas(x uint64) (n int) {
	return sovAtlas(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Atlas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Atlas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Atlas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtlasType", wireType)
			}
			m.AtlasType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtlasType |= AtlasType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Each", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtlas
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAtlas
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Each == nil {
				m.Each = make(map[int64]RewardStatus)
			}
			var mapkey int64
			var mapvalue RewardStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAtlas
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAtlas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAtlas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= RewardStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAtlas(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAtlas
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Each[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAtlas(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAtlas
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAtlas
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAtlas
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAtlas        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAtlas          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAtlas = fmt.Errorf("proto: unexpected end of group")
)
