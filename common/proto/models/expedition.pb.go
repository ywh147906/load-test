// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/expedition.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExpeditionTask struct {
	TaskId   string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ConfigId int64  `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Ongoing  bool   `protobuf:"varint,3,opt,name=ongoing,proto3" json:"ongoing,omitempty"`
	DoneTime int64  `protobuf:"varint,4,opt,name=done_time,json=doneTime,proto3" json:"done_time,omitempty"`
}

func (m *ExpeditionTask) Reset()      { *m = ExpeditionTask{} }
func (*ExpeditionTask) ProtoMessage() {}
func (*ExpeditionTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7d8ff1b1081f3ac, []int{0}
}
func (m *ExpeditionTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpeditionTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpeditionTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpeditionTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpeditionTask.Merge(m, src)
}
func (m *ExpeditionTask) XXX_Size() int {
	return m.Size()
}
func (m *ExpeditionTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpeditionTask.DiscardUnknown(m)
}

var xxx_messageInfo_ExpeditionTask proto.InternalMessageInfo

func (m *ExpeditionTask) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ExpeditionTask) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *ExpeditionTask) GetOngoing() bool {
	if m != nil {
		return m.Ongoing
	}
	return false
}

func (m *ExpeditionTask) GetDoneTime() int64 {
	if m != nil {
		return m.DoneTime
	}
	return 0
}

func (*ExpeditionTask) XXX_MessageName() string {
	return "models.ExpeditionTask"
}
func init() {
	proto.RegisterType((*ExpeditionTask)(nil), "models.ExpeditionTask")
}

func init() { proto.RegisterFile("proto/models/expedition.proto", fileDescriptor_b7d8ff1b1081f3ac) }

var fileDescriptor_b7d8ff1b1081f3ac = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0xcd, 0x4f, 0x49, 0xcd, 0x29, 0xd6, 0x4f, 0xad, 0x28, 0x48, 0x4d, 0xc9, 0x2c,
	0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b, 0x0b, 0xb1, 0x41, 0x24, 0x94, 0x6a, 0xb9, 0xf8, 0x5c, 0xe1,
	0x72, 0x21, 0x89, 0xc5, 0xd9, 0x42, 0xe2, 0x5c, 0xec, 0x25, 0x89, 0xc5, 0xd9, 0xf1, 0x99, 0x29,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x6c, 0x20, 0xae, 0x67, 0x8a, 0x90, 0x34, 0x17, 0x67,
	0x72, 0x7e, 0x5e, 0x5a, 0x66, 0x3a, 0x48, 0x8a, 0x49, 0x81, 0x51, 0x83, 0x39, 0x88, 0x03, 0x22,
	0xe0, 0x99, 0x22, 0x24, 0xc1, 0xc5, 0x9e, 0x9f, 0x97, 0x9e, 0x9f, 0x99, 0x97, 0x2e, 0xc1, 0xac,
	0xc0, 0xa8, 0xc1, 0x11, 0x04, 0xe3, 0x82, 0xb4, 0xa5, 0xe4, 0xe7, 0xa5, 0xc6, 0x97, 0x64, 0xe6,
	0xa6, 0x4a, 0xb0, 0x40, 0xb4, 0x81, 0x04, 0x42, 0x32, 0x73, 0x53, 0x9d, 0x7c, 0x6f, 0x3c, 0x94,
	0x63, 0x58, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c,
	0x92, 0x63, 0x7c, 0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x4e,
	0x3c, 0x96, 0x63, 0xbc, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xf9, 0xe4, 0xfc,
	0xcc, 0x3c, 0xdd, 0xe2, 0xd4, 0xa2, 0xb2, 0xd4, 0x22, 0xfd, 0xe4, 0xfc, 0xdc, 0xdc, 0xfc, 0x3c,
	0x7d, 0x64, 0x6f, 0x26, 0xb1, 0x81, 0x79, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x2b,
	0x67, 0x28, 0xfd, 0x00, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpeditionTask.Get().(proto.Message)
	})
}

var poolExpeditionTask = &sync.Pool{New: func() interface{} { return &ExpeditionTask{} }}

func (m *ExpeditionTask) ReleasePool() { m.Reset(); poolExpeditionTask.Put(m); m = nil }
func (this *ExpeditionTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpeditionTask)
	if !ok {
		that2, ok := that.(ExpeditionTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.Ongoing != that1.Ongoing {
		return false
	}
	if this.DoneTime != that1.DoneTime {
		return false
	}
	return true
}
func (m *ExpeditionTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpeditionTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpeditionTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DoneTime != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.DoneTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Ongoing {
		i--
		if m.Ongoing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ConfigId != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintExpedition(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExpedition(dAtA []byte, offset int, v uint64) int {
	offset -= sovExpedition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *ExpeditionTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != "" {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TaskId)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.Ongoing {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ongoing")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Ongoing)
		needWriteComma = true
	}
	if m.DoneTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("done_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DoneTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ExpeditionTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ExpeditionTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ExpeditionTask) GoString() string {
	return m.String()
}

func (m *ExpeditionTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovExpedition(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovExpedition(uint64(m.ConfigId))
	}
	if m.Ongoing {
		n += 2
	}
	if m.DoneTime != 0 {
		n += 1 + sovExpedition(uint64(m.DoneTime))
	}
	return n
}

func sovExpedition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExpedition(x uint64) (n int) {
	return sovExpedition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExpeditionTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ongoing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ongoing = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneTime", wireType)
			}
			m.DoneTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoneTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpedition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpedition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExpedition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExpedition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExpedition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpedition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExpedition = fmt.Errorf("proto: unexpected end of group")
)
