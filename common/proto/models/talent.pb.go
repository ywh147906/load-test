// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/talent.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TalentDetail struct {
	Loc       int64  `protobuf:"varint,1,opt,name=loc,proto3" json:"loc,omitempty"`
	IsUnlock  bool   `protobuf:"varint,2,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
	RuneId    string `protobuf:"bytes,3,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	TalentId  int64  `protobuf:"varint,4,opt,name=talent_id,json=talentId,proto3" json:"talent_id,omitempty"`
	Lvl       int64  `protobuf:"varint,5,opt,name=lvl,proto3" json:"lvl,omitempty"`
	AnchorLoc int64  `protobuf:"varint,6,opt,name=anchor_loc,json=anchorLoc,proto3" json:"anchor_loc,omitempty"`
}

func (m *TalentDetail) Reset()      { *m = TalentDetail{} }
func (*TalentDetail) ProtoMessage() {}
func (*TalentDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{0}
}
func (m *TalentDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TalentDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TalentDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TalentDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TalentDetail.Merge(m, src)
}
func (m *TalentDetail) XXX_Size() int {
	return m.Size()
}
func (m *TalentDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_TalentDetail.DiscardUnknown(m)
}

var xxx_messageInfo_TalentDetail proto.InternalMessageInfo

func (m *TalentDetail) GetLoc() int64 {
	if m != nil {
		return m.Loc
	}
	return 0
}

func (m *TalentDetail) GetIsUnlock() bool {
	if m != nil {
		return m.IsUnlock
	}
	return false
}

func (m *TalentDetail) GetRuneId() string {
	if m != nil {
		return m.RuneId
	}
	return ""
}

func (m *TalentDetail) GetTalentId() int64 {
	if m != nil {
		return m.TalentId
	}
	return 0
}

func (m *TalentDetail) GetLvl() int64 {
	if m != nil {
		return m.Lvl
	}
	return 0
}

func (m *TalentDetail) GetAnchorLoc() int64 {
	if m != nil {
		return m.AnchorLoc
	}
	return 0
}

func (*TalentDetail) XXX_MessageName() string {
	return "models.TalentDetail"
}

type SkillDetail struct {
	SkillId int64   `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	Lvl     int64   `protobuf:"varint,2,opt,name=lvl,proto3" json:"lvl,omitempty"`
	Holes   []*Hole `protobuf:"bytes,3,rep,name=holes,proto3" json:"holes,omitempty"`
}

func (m *SkillDetail) Reset()      { *m = SkillDetail{} }
func (*SkillDetail) ProtoMessage() {}
func (*SkillDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{1}
}
func (m *SkillDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkillDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkillDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkillDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillDetail.Merge(m, src)
}
func (m *SkillDetail) XXX_Size() int {
	return m.Size()
}
func (m *SkillDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillDetail.DiscardUnknown(m)
}

var xxx_messageInfo_SkillDetail proto.InternalMessageInfo

func (m *SkillDetail) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *SkillDetail) GetLvl() int64 {
	if m != nil {
		return m.Lvl
	}
	return 0
}

func (m *SkillDetail) GetHoles() []*Hole {
	if m != nil {
		return m.Holes
	}
	return nil
}

func (*SkillDetail) XXX_MessageName() string {
	return "models.SkillDetail"
}

type Hole struct {
	HoleType int64 `protobuf:"varint,1,opt,name=hole_type,json=holeType,proto3" json:"hole_type,omitempty"`
	StoneId  int64 `protobuf:"varint,2,opt,name=stone_id,json=stoneId,proto3" json:"stone_id,omitempty"`
}

func (m *Hole) Reset()      { *m = Hole{} }
func (*Hole) ProtoMessage() {}
func (*Hole) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{2}
}
func (m *Hole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hole.Merge(m, src)
}
func (m *Hole) XXX_Size() int {
	return m.Size()
}
func (m *Hole) XXX_DiscardUnknown() {
	xxx_messageInfo_Hole.DiscardUnknown(m)
}

var xxx_messageInfo_Hole proto.InternalMessageInfo

func (m *Hole) GetHoleType() int64 {
	if m != nil {
		return m.HoleType
	}
	return 0
}

func (m *Hole) GetStoneId() int64 {
	if m != nil {
		return m.StoneId
	}
	return 0
}

func (*Hole) XXX_MessageName() string {
	return "models.Hole"
}

type HeroTalent struct {
	OriginId         int64                  `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	ParticularPoints int64                  `protobuf:"varint,2,opt,name=particular_points,json=particularPoints,proto3" json:"particular_points,omitempty"`
	ConfigId         int64                  `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	UsedPoints       int64                  `protobuf:"varint,4,opt,name=used_points,json=usedPoints,proto3" json:"used_points,omitempty"`
	Each             []*TalentPlate         `protobuf:"bytes,5,rep,name=each,proto3" json:"each,omitempty"`
	Skills           map[int64]*SkillDetail `protobuf:"bytes,6,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraSkills      map[int64]int64        `protobuf:"bytes,7,rep,name=extra_skills,json=extraSkills,proto3" json:"extra_skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ChosenSkills     []int64                `protobuf:"varint,8,rep,packed,name=chosen_skills,json=chosenSkills,proto3" json:"chosen_skills,omitempty"`
}

func (m *HeroTalent) Reset()      { *m = HeroTalent{} }
func (*HeroTalent) ProtoMessage() {}
func (*HeroTalent) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{3}
}
func (m *HeroTalent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroTalent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroTalent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroTalent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroTalent.Merge(m, src)
}
func (m *HeroTalent) XXX_Size() int {
	return m.Size()
}
func (m *HeroTalent) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroTalent.DiscardUnknown(m)
}

var xxx_messageInfo_HeroTalent proto.InternalMessageInfo

func (m *HeroTalent) GetOriginId() int64 {
	if m != nil {
		return m.OriginId
	}
	return 0
}

func (m *HeroTalent) GetParticularPoints() int64 {
	if m != nil {
		return m.ParticularPoints
	}
	return 0
}

func (m *HeroTalent) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *HeroTalent) GetUsedPoints() int64 {
	if m != nil {
		return m.UsedPoints
	}
	return 0
}

func (m *HeroTalent) GetEach() []*TalentPlate {
	if m != nil {
		return m.Each
	}
	return nil
}

func (m *HeroTalent) GetSkills() map[int64]*SkillDetail {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *HeroTalent) GetExtraSkills() map[int64]int64 {
	if m != nil {
		return m.ExtraSkills
	}
	return nil
}

func (m *HeroTalent) GetChosenSkills() []int64 {
	if m != nil {
		return m.ChosenSkills
	}
	return nil
}

func (*HeroTalent) XXX_MessageName() string {
	return "models.HeroTalent"
}

type TalentPlate struct {
	UnlockNum int64                   `protobuf:"varint,1,opt,name=unlock_num,json=unlockNum,proto3" json:"unlock_num,omitempty"`
	Plate     map[int64]*TalentDetail `protobuf:"bytes,2,rep,name=plate,proto3" json:"plate,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TalentPlate) Reset()      { *m = TalentPlate{} }
func (*TalentPlate) ProtoMessage() {}
func (*TalentPlate) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{4}
}
func (m *TalentPlate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TalentPlate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TalentPlate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TalentPlate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TalentPlate.Merge(m, src)
}
func (m *TalentPlate) XXX_Size() int {
	return m.Size()
}
func (m *TalentPlate) XXX_DiscardUnknown() {
	xxx_messageInfo_TalentPlate.DiscardUnknown(m)
}

var xxx_messageInfo_TalentPlate proto.InternalMessageInfo

func (m *TalentPlate) GetUnlockNum() int64 {
	if m != nil {
		return m.UnlockNum
	}
	return 0
}

func (m *TalentPlate) GetPlate() map[int64]*TalentDetail {
	if m != nil {
		return m.Plate
	}
	return nil
}

func (*TalentPlate) XXX_MessageName() string {
	return "models.TalentPlate"
}

type TalentAdvance struct {
	Attr       *TalentAttr `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	TalentBuff []int64     `protobuf:"varint,2,rep,packed,name=talent_buff,json=talentBuff,proto3" json:"talent_buff,omitempty"`
}

func (m *TalentAdvance) Reset()      { *m = TalentAdvance{} }
func (*TalentAdvance) ProtoMessage() {}
func (*TalentAdvance) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{5}
}
func (m *TalentAdvance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TalentAdvance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TalentAdvance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TalentAdvance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TalentAdvance.Merge(m, src)
}
func (m *TalentAdvance) XXX_Size() int {
	return m.Size()
}
func (m *TalentAdvance) XXX_DiscardUnknown() {
	xxx_messageInfo_TalentAdvance.DiscardUnknown(m)
}

var xxx_messageInfo_TalentAdvance proto.InternalMessageInfo

func (m *TalentAdvance) GetAttr() *TalentAttr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *TalentAdvance) GetTalentBuff() []int64 {
	if m != nil {
		return m.TalentBuff
	}
	return nil
}

func (*TalentAdvance) XXX_MessageName() string {
	return "models.TalentAdvance"
}

type SkillAdvance struct {
	Skills          map[int64]*SkillStoneAdvance `protobuf:"bytes,1,rep,name=skills,proto3" json:"skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StoneAttr       *TalentAttr                  `protobuf:"bytes,2,opt,name=stone_attr,json=stoneAttr,proto3" json:"stone_attr,omitempty"`
	UnusedSkills    map[int64]int64              `protobuf:"bytes,3,rep,name=unused_skills,json=unusedSkills,proto3" json:"unused_skills,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SpecialStoneAtk int64                        `protobuf:"varint,4,opt,name=special_stone_atk,json=specialStoneAtk,proto3" json:"special_stone_atk,omitempty"`
}

func (m *SkillAdvance) Reset()      { *m = SkillAdvance{} }
func (*SkillAdvance) ProtoMessage() {}
func (*SkillAdvance) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{6}
}
func (m *SkillAdvance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkillAdvance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkillAdvance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkillAdvance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillAdvance.Merge(m, src)
}
func (m *SkillAdvance) XXX_Size() int {
	return m.Size()
}
func (m *SkillAdvance) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillAdvance.DiscardUnknown(m)
}

var xxx_messageInfo_SkillAdvance proto.InternalMessageInfo

func (m *SkillAdvance) GetSkills() map[int64]*SkillStoneAdvance {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *SkillAdvance) GetStoneAttr() *TalentAttr {
	if m != nil {
		return m.StoneAttr
	}
	return nil
}

func (m *SkillAdvance) GetUnusedSkills() map[int64]int64 {
	if m != nil {
		return m.UnusedSkills
	}
	return nil
}

func (m *SkillAdvance) GetSpecialStoneAtk() int64 {
	if m != nil {
		return m.SpecialStoneAtk
	}
	return 0
}

func (*SkillAdvance) XXX_MessageName() string {
	return "models.SkillAdvance"
}

type SkillStoneAdvance struct {
	Stones []int64 `protobuf:"varint,1,rep,packed,name=stones,proto3" json:"stones,omitempty"`
}

func (m *SkillStoneAdvance) Reset()      { *m = SkillStoneAdvance{} }
func (*SkillStoneAdvance) ProtoMessage() {}
func (*SkillStoneAdvance) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{7}
}
func (m *SkillStoneAdvance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkillStoneAdvance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkillStoneAdvance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkillStoneAdvance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillStoneAdvance.Merge(m, src)
}
func (m *SkillStoneAdvance) XXX_Size() int {
	return m.Size()
}
func (m *SkillStoneAdvance) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillStoneAdvance.DiscardUnknown(m)
}

var xxx_messageInfo_SkillStoneAdvance proto.InternalMessageInfo

func (m *SkillStoneAdvance) GetStones() []int64 {
	if m != nil {
		return m.Stones
	}
	return nil
}

func (*SkillStoneAdvance) XXX_MessageName() string {
	return "models.SkillStoneAdvance"
}

type TalentAttr struct {
	AttrFixed   map[int64]int64 `protobuf:"bytes,1,rep,name=attr_fixed,json=attrFixed,proto3" json:"attr_fixed,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AttrPercent map[int64]int64 `protobuf:"bytes,2,rep,name=attr_percent,json=attrPercent,proto3" json:"attr_percent,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *TalentAttr) Reset()      { *m = TalentAttr{} }
func (*TalentAttr) ProtoMessage() {}
func (*TalentAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{8}
}
func (m *TalentAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TalentAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TalentAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TalentAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TalentAttr.Merge(m, src)
}
func (m *TalentAttr) XXX_Size() int {
	return m.Size()
}
func (m *TalentAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_TalentAttr.DiscardUnknown(m)
}

var xxx_messageInfo_TalentAttr proto.InternalMessageInfo

func (m *TalentAttr) GetAttrFixed() map[int64]int64 {
	if m != nil {
		return m.AttrFixed
	}
	return nil
}

func (m *TalentAttr) GetAttrPercent() map[int64]int64 {
	if m != nil {
		return m.AttrPercent
	}
	return nil
}

func (*TalentAttr) XXX_MessageName() string {
	return "models.TalentAttr"
}

type SkillStone struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Expire int64 `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
	Lock   bool  `protobuf:"varint,4,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *SkillStone) Reset()      { *m = SkillStone{} }
func (*SkillStone) ProtoMessage() {}
func (*SkillStone) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{9}
}
func (m *SkillStone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkillStone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkillStone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkillStone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillStone.Merge(m, src)
}
func (m *SkillStone) XXX_Size() int {
	return m.Size()
}
func (m *SkillStone) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillStone.DiscardUnknown(m)
}

var xxx_messageInfo_SkillStone proto.InternalMessageInfo

func (m *SkillStone) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *SkillStone) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SkillStone) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *SkillStone) GetLock() bool {
	if m != nil {
		return m.Lock
	}
	return false
}

func (*SkillStone) XXX_MessageName() string {
	return "models.SkillStone"
}

type TalentRune struct {
	RuneId   string `protobuf:"bytes,1,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
	TalentId int64  `protobuf:"varint,2,opt,name=talent_id,json=talentId,proto3" json:"talent_id,omitempty"`
	Lvl      int64  `protobuf:"varint,3,opt,name=lvl,proto3" json:"lvl,omitempty"`
	PlateIdx int64  `protobuf:"varint,4,opt,name=plate_idx,json=plateIdx,proto3" json:"plate_idx,omitempty"`
	Loc      int64  `protobuf:"varint,5,opt,name=loc,proto3" json:"loc,omitempty"`
	CurrExp  int64  `protobuf:"varint,6,opt,name=curr_exp,json=currExp,proto3" json:"curr_exp,omitempty"`
	AccExp   int64  `protobuf:"varint,7,opt,name=acc_exp,json=accExp,proto3" json:"acc_exp,omitempty"`
}

func (m *TalentRune) Reset()      { *m = TalentRune{} }
func (*TalentRune) ProtoMessage() {}
func (*TalentRune) Descriptor() ([]byte, []int) {
	return fileDescriptor_917b9d8602835049, []int{10}
}
func (m *TalentRune) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TalentRune) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TalentRune.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TalentRune) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TalentRune.Merge(m, src)
}
func (m *TalentRune) XXX_Size() int {
	return m.Size()
}
func (m *TalentRune) XXX_DiscardUnknown() {
	xxx_messageInfo_TalentRune.DiscardUnknown(m)
}

var xxx_messageInfo_TalentRune proto.InternalMessageInfo

func (m *TalentRune) GetRuneId() string {
	if m != nil {
		return m.RuneId
	}
	return ""
}

func (m *TalentRune) GetTalentId() int64 {
	if m != nil {
		return m.TalentId
	}
	return 0
}

func (m *TalentRune) GetLvl() int64 {
	if m != nil {
		return m.Lvl
	}
	return 0
}

func (m *TalentRune) GetPlateIdx() int64 {
	if m != nil {
		return m.PlateIdx
	}
	return 0
}

func (m *TalentRune) GetLoc() int64 {
	if m != nil {
		return m.Loc
	}
	return 0
}

func (m *TalentRune) GetCurrExp() int64 {
	if m != nil {
		return m.CurrExp
	}
	return 0
}

func (m *TalentRune) GetAccExp() int64 {
	if m != nil {
		return m.AccExp
	}
	return 0
}

func (*TalentRune) XXX_MessageName() string {
	return "models.TalentRune"
}
func init() {
	proto.RegisterType((*TalentDetail)(nil), "models.TalentDetail")
	proto.RegisterType((*SkillDetail)(nil), "models.SkillDetail")
	proto.RegisterType((*Hole)(nil), "models.Hole")
	proto.RegisterType((*HeroTalent)(nil), "models.HeroTalent")
	proto.RegisterMapType((map[int64]int64)(nil), "models.HeroTalent.ExtraSkillsEntry")
	proto.RegisterMapType((map[int64]*SkillDetail)(nil), "models.HeroTalent.SkillsEntry")
	proto.RegisterType((*TalentPlate)(nil), "models.TalentPlate")
	proto.RegisterMapType((map[int64]*TalentDetail)(nil), "models.TalentPlate.PlateEntry")
	proto.RegisterType((*TalentAdvance)(nil), "models.TalentAdvance")
	proto.RegisterType((*SkillAdvance)(nil), "models.SkillAdvance")
	proto.RegisterMapType((map[int64]*SkillStoneAdvance)(nil), "models.SkillAdvance.SkillsEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "models.SkillAdvance.UnusedSkillsEntry")
	proto.RegisterType((*SkillStoneAdvance)(nil), "models.SkillStoneAdvance")
	proto.RegisterType((*TalentAttr)(nil), "models.TalentAttr")
	proto.RegisterMapType((map[int64]int64)(nil), "models.TalentAttr.AttrFixedEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "models.TalentAttr.AttrPercentEntry")
	proto.RegisterType((*SkillStone)(nil), "models.SkillStone")
	proto.RegisterType((*TalentRune)(nil), "models.TalentRune")
}

func init() { proto.RegisterFile("proto/models/talent.proto", fileDescriptor_917b9d8602835049) }

var fileDescriptor_917b9d8602835049 = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x8f, 0xe3, 0xfc, 0x7d, 0xc9, 0xc2, 0xee, 0x50, 0x41, 0x36, 0x15, 0x6e, 0xf0, 0x4a, 0x25,
	0xb4, 0x22, 0x11, 0x05, 0xa1, 0x0a, 0xa1, 0x42, 0x2b, 0xb6, 0x6a, 0x04, 0xac, 0x56, 0xee, 0x56,
	0x42, 0x1c, 0xb0, 0xdc, 0xf1, 0x64, 0xd7, 0x8a, 0xe3, 0xb1, 0xec, 0x71, 0x94, 0x7c, 0x06, 0x2e,
	0x1c, 0xf8, 0x08, 0x1c, 0x38, 0x73, 0xe1, 0x2b, 0xf4, 0xd8, 0x63, 0x8f, 0x90, 0xbd, 0x70, 0x44,
	0x7c, 0x02, 0x34, 0x6f, 0xc6, 0x6b, 0xa7, 0x9b, 0x55, 0xb5, 0x97, 0xc8, 0xef, 0x37, 0x6f, 0x7e,
	0xef, 0xbd, 0xdf, 0xbc, 0x99, 0x17, 0xd8, 0x8f, 0x13, 0x2e, 0xf8, 0x78, 0xce, 0x7d, 0x16, 0xa6,
	0x63, 0xe1, 0x85, 0x2c, 0x12, 0x23, 0xc4, 0x48, 0x43, 0x81, 0xf6, 0x6f, 0x06, 0x74, 0x4f, 0x70,
	0xe1, 0x1b, 0x26, 0xbc, 0x20, 0x24, 0xbb, 0x60, 0x86, 0x9c, 0xf6, 0x8c, 0x81, 0x31, 0x34, 0x1d,
	0xf9, 0x49, 0x6e, 0x42, 0x3b, 0x48, 0xdd, 0x2c, 0x0a, 0x39, 0x9d, 0xf5, 0xaa, 0x03, 0x63, 0xd8,
	0x72, 0x5a, 0x41, 0xfa, 0x0c, 0x6d, 0xf2, 0x1e, 0x34, 0x93, 0x2c, 0x62, 0x6e, 0xe0, 0xf7, 0xcc,
	0x81, 0x31, 0x6c, 0x3b, 0x0d, 0x69, 0x4e, 0x7c, 0xb9, 0x4b, 0x05, 0x94, 0x4b, 0x35, 0x64, 0x6b,
	0x29, 0x60, 0xe2, 0x63, 0x90, 0x45, 0xd8, 0xab, 0xeb, 0x20, 0x8b, 0x90, 0xbc, 0x0f, 0xe0, 0x45,
	0xf4, 0x8c, 0x27, 0xae, 0x8c, 0xde, 0xc0, 0x85, 0xb6, 0x42, 0xbe, 0xe3, 0xd4, 0xfe, 0x09, 0x3a,
	0x4f, 0x67, 0x41, 0x18, 0xea, 0x24, 0xf7, 0xa1, 0x95, 0x4a, 0x53, 0x72, 0xab, 0x4c, 0x9b, 0x68,
	0x17, 0xd4, 0xd5, 0x82, 0xda, 0x86, 0xfa, 0x19, 0x0f, 0x59, 0xda, 0x33, 0x07, 0xe6, 0xb0, 0x73,
	0xaf, 0x3b, 0x52, 0xa5, 0x8f, 0x9e, 0xf0, 0x90, 0x39, 0x6a, 0xc9, 0x7e, 0x00, 0x35, 0x69, 0xca,
	0xac, 0x25, 0xe0, 0x8a, 0x55, 0xcc, 0x34, 0x73, 0x4b, 0x02, 0x27, 0xab, 0x98, 0x61, 0x54, 0xc1,
	0x55, 0xb1, 0x55, 0x1d, 0x55, 0xda, 0x13, 0xdf, 0xfe, 0xcf, 0x04, 0x78, 0xc2, 0x12, 0xae, 0xa4,
	0x94, 0x34, 0x3c, 0x09, 0x4e, 0x83, 0xa8, 0x48, 0xb0, 0xa5, 0x80, 0x89, 0x4f, 0xee, 0xc2, 0x5e,
	0xec, 0x25, 0x22, 0xa0, 0x59, 0xe8, 0x25, 0x6e, 0xcc, 0x83, 0x48, 0xa4, 0x9a, 0x6f, 0xb7, 0x58,
	0x38, 0x46, 0x5c, 0x32, 0x51, 0x1e, 0x4d, 0x83, 0xd3, 0x5c, 0x61, 0xd3, 0x69, 0x29, 0x60, 0xe2,
	0x93, 0x5b, 0xd0, 0xc9, 0x52, 0xe6, 0xe7, 0x1c, 0x4a, 0x65, 0x90, 0x90, 0xde, 0xfd, 0x21, 0xd4,
	0x98, 0x47, 0xcf, 0x7a, 0x75, 0xac, 0xfc, 0x9d, 0xbc, 0x72, 0x95, 0xe5, 0x71, 0xe8, 0x09, 0xe6,
	0xa0, 0x03, 0xf9, 0x1c, 0x1a, 0x28, 0x60, 0xda, 0x6b, 0xa0, 0xab, 0x75, 0x21, 0xd2, 0x45, 0x51,
	0x23, 0x3c, 0x80, 0xf4, 0x30, 0x12, 0xc9, 0xca, 0xd1, 0xde, 0xe4, 0x31, 0x74, 0xd9, 0x52, 0x24,
	0x9e, 0xab, 0x77, 0x37, 0x71, 0xf7, 0xc1, 0x96, 0xdd, 0x87, 0xd2, 0xad, 0x4c, 0xd1, 0x61, 0x05,
	0x42, 0x0e, 0x60, 0x87, 0x9e, 0xf1, 0x94, 0x45, 0x39, 0x51, 0x6b, 0x60, 0x0e, 0x4d, 0xa7, 0xab,
	0x40, 0xe5, 0xd4, 0x3f, 0xd2, 0x4d, 0xa0, 0x08, 0xe4, 0x49, 0xcf, 0xd8, 0x2a, 0xef, 0xd4, 0x19,
	0x5b, 0x91, 0x8f, 0xa0, 0xbe, 0xf0, 0xc2, 0x8c, 0xa1, 0x9a, 0xa5, 0x7a, 0x4b, 0xad, 0xe3, 0x28,
	0x8f, 0x2f, 0xaa, 0xf7, 0x8d, 0xfe, 0x03, 0xd8, 0x7d, 0x3d, 0xab, 0x2d, 0xa4, 0x37, 0xca, 0xa4,
	0x66, 0x69, 0xbf, 0xfd, 0x87, 0x01, 0x9d, 0x92, 0x94, 0xb2, 0x87, 0xd5, 0x2d, 0x71, 0xa3, 0x6c,
	0xae, 0x29, 0xda, 0x0a, 0x39, 0xca, 0xe6, 0xe4, 0x33, 0xa8, 0xc7, 0xd2, 0xaf, 0x57, 0xdd, 0x94,
	0xb8, 0x44, 0x31, 0xc2, 0x5f, 0xa5, 0x8f, 0x72, 0xee, 0x1f, 0x01, 0x14, 0xe0, 0x96, 0xf4, 0xee,
	0x6c, 0xd6, 0x7c, 0x63, 0x93, 0xf5, 0x52, 0xd1, 0xf6, 0x0f, 0xb0, 0xa3, 0x96, 0x1e, 0xfa, 0x0b,
	0x2f, 0xa2, 0x8c, 0xdc, 0x86, 0x9a, 0x27, 0x44, 0x82, 0x9c, 0x9d, 0x7b, 0x64, 0x73, 0xff, 0x43,
	0x21, 0x12, 0x07, 0xd7, 0x65, 0xb3, 0xe9, 0x0b, 0xfd, 0x3c, 0x9b, 0x4e, 0xb1, 0x08, 0xd3, 0x01,
	0x05, 0x3d, 0xca, 0xa6, 0x53, 0xfb, 0x67, 0x13, 0xba, 0x28, 0x65, 0xce, 0x7c, 0xff, 0xa2, 0xa9,
	0x0c, 0xac, 0x78, 0xb0, 0x71, 0x1e, 0xda, 0x6b, 0x6b, 0x5b, 0x7d, 0x02, 0xa0, 0x6e, 0x1a, 0x66,
	0x56, 0xbd, 0x32, 0xb3, 0x36, 0x7a, 0xc9, 0x4f, 0xf2, 0x2d, 0xec, 0x64, 0x11, 0xde, 0x06, 0x1d,
	0x53, 0xdd, 0xf6, 0xdb, 0x5b, 0x63, 0x3e, 0x43, 0xcf, 0x72, 0xe4, 0x6e, 0x56, 0x82, 0xc8, 0x1d,
	0xd8, 0x4b, 0x63, 0x46, 0x03, 0x2f, 0x74, 0xf3, 0x3c, 0x66, 0xfa, 0x7a, 0xbd, 0xad, 0x17, 0x9e,
	0xaa, 0xc8, 0xb3, 0xfe, 0xc9, 0x9b, 0xba, 0x72, 0xbc, 0x79, 0x42, 0xfb, 0x1b, 0x19, 0x29, 0x1a,
	0x95, 0x56, 0xb9, 0x37, 0xbf, 0x82, 0xbd, 0x4b, 0x49, 0x5e, 0xab, 0x39, 0xef, 0xc2, 0xde, 0xa5,
	0x00, 0xe4, 0x5d, 0x68, 0x60, 0x3d, 0xea, 0x44, 0x4c, 0x47, 0x5b, 0xf6, 0xaf, 0x55, 0x80, 0x42,
	0x56, 0xf2, 0x35, 0x80, 0x14, 0xde, 0x9d, 0x06, 0x4b, 0xe6, 0xeb, 0xc3, 0xfb, 0xe0, 0xb2, 0xfc,
	0x23, 0xf9, 0xf3, 0x58, 0xfa, 0x28, 0x0d, 0xdb, 0x5e, 0x6e, 0xcb, 0x77, 0x01, 0x19, 0x62, 0x96,
	0x50, 0x16, 0x09, 0xdd, 0xf2, 0x07, 0x57, 0x70, 0x1c, 0x2b, 0x2f, 0xfd, 0x2e, 0x78, 0x05, 0xd2,
	0xff, 0x12, 0xde, 0xda, 0x0c, 0x72, 0x1d, 0x0d, 0xe4, 0x05, 0x7f, 0x9d, 0xfe, 0x5a, 0x1a, 0x9e,
	0x02, 0x14, 0x1a, 0xca, 0x51, 0x17, 0x08, 0x36, 0x2f, 0x9e, 0xf4, 0x86, 0x34, 0x27, 0xbe, 0x24,
	0xa0, 0x3c, 0xc3, 0x2a, 0x91, 0x00, 0x0d, 0xa9, 0x35, 0x5b, 0xc6, 0x41, 0xc2, 0xf4, 0xb3, 0xad,
	0x2d, 0x42, 0xa0, 0x86, 0x93, 0xb4, 0x86, 0x93, 0x14, 0xbf, 0xed, 0x3f, 0x8d, 0x5c, 0x7f, 0x27,
	0x53, 0x91, 0xf2, 0xa1, 0x6a, 0x5c, 0x3d, 0x54, 0xab, 0xdb, 0x87, 0xaa, 0x59, 0x4c, 0xbe, 0x9b,
	0xd0, 0xc6, 0x47, 0xc4, 0x0d, 0xfc, 0x65, 0x3e, 0x83, 0x11, 0x98, 0xf8, 0xcb, 0x7c, 0xd0, 0xd7,
	0x8b, 0x41, 0xbf, 0x0f, 0x2d, 0x9a, 0x25, 0x89, 0xcb, 0x96, 0xb1, 0x9e, 0xc0, 0x4d, 0x69, 0x1f,
	0x2e, 0x63, 0x99, 0x91, 0x47, 0x29, 0xae, 0x34, 0x55, 0x35, 0x1e, 0xa5, 0x87, 0xcb, 0xf8, 0xd1,
	0xf7, 0xaf, 0xfe, 0xb6, 0x2a, 0xbf, 0xaf, 0x2d, 0xe3, 0xc5, 0xda, 0x32, 0x5e, 0xae, 0x2d, 0xe3,
	0xaf, 0xb5, 0x65, 0xfc, 0xb3, 0xb6, 0x2a, 0xff, 0xae, 0x2d, 0xe3, 0x97, 0x73, 0xab, 0xf2, 0xe2,
	0xdc, 0x32, 0x5e, 0x9e, 0x5b, 0x95, 0x57, 0xe7, 0x56, 0xe5, 0xc7, 0x5b, 0x94, 0x07, 0xd1, 0xc7,
	0x29, 0x4b, 0x16, 0x2c, 0x19, 0x53, 0x3e, 0x9f, 0xf3, 0x68, 0x5c, 0xfe, 0x8f, 0xf2, 0xbc, 0x81,
	0xd6, 0xa7, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x97, 0x47, 0x13, 0xf9, 0xba, 0x08, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalentDetail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSkillDetail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHole.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroTalent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalentPlate.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalentAdvance.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSkillAdvance.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSkillStoneAdvance.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalentAttr.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSkillStone.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalentRune.Get().(proto.Message)
	})
}

var poolTalentDetail = &sync.Pool{New: func() interface{} { return &TalentDetail{} }}

func (m *TalentDetail) ReleasePool() { m.Reset(); poolTalentDetail.Put(m); m = nil }

var poolSkillDetail = &sync.Pool{New: func() interface{} { return &SkillDetail{} }}

func (m *SkillDetail) ReleasePool() { m.Reset(); poolSkillDetail.Put(m); m = nil }

var poolHole = &sync.Pool{New: func() interface{} { return &Hole{} }}

func (m *Hole) ReleasePool() { m.Reset(); poolHole.Put(m); m = nil }

var poolHeroTalent = &sync.Pool{New: func() interface{} { return &HeroTalent{} }}

func (m *HeroTalent) ReleasePool() { m.Reset(); poolHeroTalent.Put(m); m = nil }

var poolTalentPlate = &sync.Pool{New: func() interface{} { return &TalentPlate{} }}

func (m *TalentPlate) ReleasePool() { m.Reset(); poolTalentPlate.Put(m); m = nil }

var poolTalentAdvance = &sync.Pool{New: func() interface{} { return &TalentAdvance{} }}

func (m *TalentAdvance) ReleasePool() { m.Reset(); poolTalentAdvance.Put(m); m = nil }

var poolSkillAdvance = &sync.Pool{New: func() interface{} { return &SkillAdvance{} }}

func (m *SkillAdvance) ReleasePool() { m.Reset(); poolSkillAdvance.Put(m); m = nil }

var poolSkillStoneAdvance = &sync.Pool{New: func() interface{} { return &SkillStoneAdvance{} }}

func (m *SkillStoneAdvance) ReleasePool() { m.Reset(); poolSkillStoneAdvance.Put(m); m = nil }

var poolTalentAttr = &sync.Pool{New: func() interface{} { return &TalentAttr{} }}

func (m *TalentAttr) ReleasePool() { m.Reset(); poolTalentAttr.Put(m); m = nil }

var poolSkillStone = &sync.Pool{New: func() interface{} { return &SkillStone{} }}

func (m *SkillStone) ReleasePool() { m.Reset(); poolSkillStone.Put(m); m = nil }

var poolTalentRune = &sync.Pool{New: func() interface{} { return &TalentRune{} }}

func (m *TalentRune) ReleasePool() { m.Reset(); poolTalentRune.Put(m); m = nil }
func (this *TalentDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TalentDetail)
	if !ok {
		that2, ok := that.(TalentDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Loc != that1.Loc {
		return false
	}
	if this.IsUnlock != that1.IsUnlock {
		return false
	}
	if this.RuneId != that1.RuneId {
		return false
	}
	if this.TalentId != that1.TalentId {
		return false
	}
	if this.Lvl != that1.Lvl {
		return false
	}
	if this.AnchorLoc != that1.AnchorLoc {
		return false
	}
	return true
}
func (this *SkillDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SkillDetail)
	if !ok {
		that2, ok := that.(SkillDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.Lvl != that1.Lvl {
		return false
	}
	if len(this.Holes) != len(that1.Holes) {
		return false
	}
	for i := range this.Holes {
		if !this.Holes[i].Equal(that1.Holes[i]) {
			return false
		}
	}
	return true
}
func (this *Hole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hole)
	if !ok {
		that2, ok := that.(Hole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HoleType != that1.HoleType {
		return false
	}
	if this.StoneId != that1.StoneId {
		return false
	}
	return true
}
func (this *HeroTalent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroTalent)
	if !ok {
		that2, ok := that.(HeroTalent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OriginId != that1.OriginId {
		return false
	}
	if this.ParticularPoints != that1.ParticularPoints {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.UsedPoints != that1.UsedPoints {
		return false
	}
	if len(this.Each) != len(that1.Each) {
		return false
	}
	for i := range this.Each {
		if !this.Each[i].Equal(that1.Each[i]) {
			return false
		}
	}
	if len(this.Skills) != len(that1.Skills) {
		return false
	}
	for i := range this.Skills {
		if !this.Skills[i].Equal(that1.Skills[i]) {
			return false
		}
	}
	if len(this.ExtraSkills) != len(that1.ExtraSkills) {
		return false
	}
	for i := range this.ExtraSkills {
		if this.ExtraSkills[i] != that1.ExtraSkills[i] {
			return false
		}
	}
	if len(this.ChosenSkills) != len(that1.ChosenSkills) {
		return false
	}
	for i := range this.ChosenSkills {
		if this.ChosenSkills[i] != that1.ChosenSkills[i] {
			return false
		}
	}
	return true
}
func (this *TalentPlate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TalentPlate)
	if !ok {
		that2, ok := that.(TalentPlate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnlockNum != that1.UnlockNum {
		return false
	}
	if len(this.Plate) != len(that1.Plate) {
		return false
	}
	for i := range this.Plate {
		if !this.Plate[i].Equal(that1.Plate[i]) {
			return false
		}
	}
	return true
}
func (this *TalentAdvance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TalentAdvance)
	if !ok {
		that2, ok := that.(TalentAdvance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Attr.Equal(that1.Attr) {
		return false
	}
	if len(this.TalentBuff) != len(that1.TalentBuff) {
		return false
	}
	for i := range this.TalentBuff {
		if this.TalentBuff[i] != that1.TalentBuff[i] {
			return false
		}
	}
	return true
}
func (this *SkillAdvance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SkillAdvance)
	if !ok {
		that2, ok := that.(SkillAdvance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Skills) != len(that1.Skills) {
		return false
	}
	for i := range this.Skills {
		if !this.Skills[i].Equal(that1.Skills[i]) {
			return false
		}
	}
	if !this.StoneAttr.Equal(that1.StoneAttr) {
		return false
	}
	if len(this.UnusedSkills) != len(that1.UnusedSkills) {
		return false
	}
	for i := range this.UnusedSkills {
		if this.UnusedSkills[i] != that1.UnusedSkills[i] {
			return false
		}
	}
	if this.SpecialStoneAtk != that1.SpecialStoneAtk {
		return false
	}
	return true
}
func (this *SkillStoneAdvance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SkillStoneAdvance)
	if !ok {
		that2, ok := that.(SkillStoneAdvance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Stones) != len(that1.Stones) {
		return false
	}
	for i := range this.Stones {
		if this.Stones[i] != that1.Stones[i] {
			return false
		}
	}
	return true
}
func (this *TalentAttr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TalentAttr)
	if !ok {
		that2, ok := that.(TalentAttr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AttrFixed) != len(that1.AttrFixed) {
		return false
	}
	for i := range this.AttrFixed {
		if this.AttrFixed[i] != that1.AttrFixed[i] {
			return false
		}
	}
	if len(this.AttrPercent) != len(that1.AttrPercent) {
		return false
	}
	for i := range this.AttrPercent {
		if this.AttrPercent[i] != that1.AttrPercent[i] {
			return false
		}
	}
	return true
}
func (this *SkillStone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SkillStone)
	if !ok {
		that2, ok := that.(SkillStone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Expire != that1.Expire {
		return false
	}
	if this.Lock != that1.Lock {
		return false
	}
	return true
}
func (this *TalentRune) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TalentRune)
	if !ok {
		that2, ok := that.(TalentRune)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RuneId != that1.RuneId {
		return false
	}
	if this.TalentId != that1.TalentId {
		return false
	}
	if this.Lvl != that1.Lvl {
		return false
	}
	if this.PlateIdx != that1.PlateIdx {
		return false
	}
	if this.Loc != that1.Loc {
		return false
	}
	if this.CurrExp != that1.CurrExp {
		return false
	}
	if this.AccExp != that1.AccExp {
		return false
	}
	return true
}
func (m *TalentDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TalentDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TalentDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnchorLoc != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.AnchorLoc))
		i--
		dAtA[i] = 0x30
	}
	if m.Lvl != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Lvl))
		i--
		dAtA[i] = 0x28
	}
	if m.TalentId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.TalentId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RuneId) > 0 {
		i -= len(m.RuneId)
		copy(dAtA[i:], m.RuneId)
		i = encodeVarintTalent(dAtA, i, uint64(len(m.RuneId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsUnlock {
		i--
		if m.IsUnlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Loc != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Loc))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SkillDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkillDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Holes) > 0 {
		for iNdEx := len(m.Holes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Holes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTalent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Lvl != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Lvl))
		i--
		dAtA[i] = 0x10
	}
	if m.SkillId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Hole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoneId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.StoneId))
		i--
		dAtA[i] = 0x10
	}
	if m.HoleType != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.HoleType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeroTalent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroTalent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroTalent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChosenSkills) > 0 {
		dAtA2 := make([]byte, len(m.ChosenSkills)*10)
		var j1 int
		for _, num1 := range m.ChosenSkills {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTalent(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExtraSkills) > 0 {
		for k := range m.ExtraSkills {
			v := m.ExtraSkills[k]
			baseI := i
			i = encodeVarintTalent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTalent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Skills) > 0 {
		for k := range m.Skills {
			v := m.Skills[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTalent(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTalent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Each) > 0 {
		for iNdEx := len(m.Each) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Each[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTalent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.UsedPoints != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.UsedPoints))
		i--
		dAtA[i] = 0x20
	}
	if m.ConfigId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x18
	}
	if m.ParticularPoints != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ParticularPoints))
		i--
		dAtA[i] = 0x10
	}
	if m.OriginId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.OriginId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TalentPlate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TalentPlate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TalentPlate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Plate) > 0 {
		for k := range m.Plate {
			v := m.Plate[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTalent(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTalent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.UnlockNum != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.UnlockNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TalentAdvance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TalentAdvance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TalentAdvance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TalentBuff) > 0 {
		dAtA6 := make([]byte, len(m.TalentBuff)*10)
		var j5 int
		for _, num1 := range m.TalentBuff {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTalent(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if m.Attr != nil {
		{
			size, err := m.Attr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTalent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SkillAdvance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillAdvance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkillAdvance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpecialStoneAtk != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.SpecialStoneAtk))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UnusedSkills) > 0 {
		for k := range m.UnusedSkills {
			v := m.UnusedSkills[k]
			baseI := i
			i = encodeVarintTalent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTalent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StoneAttr != nil {
		{
			size, err := m.StoneAttr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTalent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Skills) > 0 {
		for k := range m.Skills {
			v := m.Skills[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTalent(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTalent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SkillStoneAdvance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillStoneAdvance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkillStoneAdvance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stones) > 0 {
		dAtA11 := make([]byte, len(m.Stones)*10)
		var j10 int
		for _, num1 := range m.Stones {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintTalent(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TalentAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TalentAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TalentAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttrPercent) > 0 {
		for k := range m.AttrPercent {
			v := m.AttrPercent[k]
			baseI := i
			i = encodeVarintTalent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTalent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AttrFixed) > 0 {
		for k := range m.AttrFixed {
			v := m.AttrFixed[k]
			baseI := i
			i = encodeVarintTalent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTalent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SkillStone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillStone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkillStone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lock {
		i--
		if m.Lock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Expire != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TalentRune) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TalentRune) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TalentRune) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccExp != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.AccExp))
		i--
		dAtA[i] = 0x38
	}
	if m.CurrExp != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.CurrExp))
		i--
		dAtA[i] = 0x30
	}
	if m.Loc != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Loc))
		i--
		dAtA[i] = 0x28
	}
	if m.PlateIdx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.PlateIdx))
		i--
		dAtA[i] = 0x20
	}
	if m.Lvl != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Lvl))
		i--
		dAtA[i] = 0x18
	}
	if m.TalentId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.TalentId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RuneId) > 0 {
		i -= len(m.RuneId)
		copy(dAtA[i:], m.RuneId)
		i = encodeVarintTalent(dAtA, i, uint64(len(m.RuneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTalent(dAtA []byte, offset int, v uint64) int {
	offset -= sovTalent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *TalentDetail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Loc != 0 {
		w.RawByte('"')
		w.RawString("loc")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Loc))
		needWriteComma = true
	}
	if m.IsUnlock {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_unlock")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsUnlock)
		needWriteComma = true
	}
	if m.RuneId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rune_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RuneId)
		needWriteComma = true
	}
	if m.TalentId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("talent_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TalentId))
		needWriteComma = true
	}
	if m.Lvl != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lvl")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lvl))
		needWriteComma = true
	}
	if m.AnchorLoc != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("anchor_loc")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AnchorLoc))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SkillDetail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.SkillId != 0 {
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.Lvl != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lvl")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lvl))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("holes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Holes == nil {
		w.RawString("null")
	} else if len(m.Holes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Holes {
			v.JsonBytes(w)
			if i != len(m.Holes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Hole) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.HoleType != 0 {
		w.RawByte('"')
		w.RawString("hole_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HoleType))
		needWriteComma = true
	}
	if m.StoneId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("stone_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StoneId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroTalent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.OriginId != 0 {
		w.RawByte('"')
		w.RawString("origin_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OriginId))
		needWriteComma = true
	}
	if m.ParticularPoints != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("particular_points")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ParticularPoints))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.UsedPoints != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("used_points")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UsedPoints))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("each")
	w.RawByte('"')
	w.RawByte(':')
	if m.Each == nil {
		w.RawString("null")
	} else if len(m.Each) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Each {
			v.JsonBytes(w)
			if i != len(m.Each)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skills")
	w.RawByte('"')
	w.RawByte(':')
	if m.Skills == nil {
		w.RawString("null")
	} else if len(m.Skills) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlSkills := len(m.Skills)
		for k, v := range m.Skills {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlSkills--
			if mlSkills != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("extra_skills")
	w.RawByte('"')
	w.RawByte(':')
	if m.ExtraSkills == nil {
		w.RawString("null")
	} else if len(m.ExtraSkills) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlExtraSkills := len(m.ExtraSkills)
		for k, v := range m.ExtraSkills {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlExtraSkills--
			if mlExtraSkills != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("chosen_skills")
	w.RawByte('"')
	w.RawByte(':')
	if m.ChosenSkills == nil {
		w.RawString("null")
	} else if len(m.ChosenSkills) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ChosenSkills {
			w.Int64(int64(v))
			if i != len(m.ChosenSkills)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TalentPlate) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UnlockNum != 0 {
		w.RawByte('"')
		w.RawString("unlock_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UnlockNum))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("plate")
	w.RawByte('"')
	w.RawByte(':')
	if m.Plate == nil {
		w.RawString("null")
	} else if len(m.Plate) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlPlate := len(m.Plate)
		for k, v := range m.Plate {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlPlate--
			if mlPlate != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TalentAdvance) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	m.Attr.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("talent_buff")
	w.RawByte('"')
	w.RawByte(':')
	if m.TalentBuff == nil {
		w.RawString("null")
	} else if len(m.TalentBuff) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.TalentBuff {
			w.Int64(int64(v))
			if i != len(m.TalentBuff)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SkillAdvance) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("skills")
	w.RawByte('"')
	w.RawByte(':')
	if m.Skills == nil {
		w.RawString("null")
	} else if len(m.Skills) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlSkills := len(m.Skills)
		for k, v := range m.Skills {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlSkills--
			if mlSkills != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("stone_attr")
	w.RawByte('"')
	w.RawByte(':')
	m.StoneAttr.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("unused_skills")
	w.RawByte('"')
	w.RawByte(':')
	if m.UnusedSkills == nil {
		w.RawString("null")
	} else if len(m.UnusedSkills) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlUnusedSkills := len(m.UnusedSkills)
		for k, v := range m.UnusedSkills {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlUnusedSkills--
			if mlUnusedSkills != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.SpecialStoneAtk != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("special_stone_atk")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SpecialStoneAtk))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SkillStoneAdvance) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("stones")
	w.RawByte('"')
	w.RawByte(':')
	if m.Stones == nil {
		w.RawString("null")
	} else if len(m.Stones) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Stones {
			w.Int64(int64(v))
			if i != len(m.Stones)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TalentAttr) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("attr_fixed")
	w.RawByte('"')
	w.RawByte(':')
	if m.AttrFixed == nil {
		w.RawString("null")
	} else if len(m.AttrFixed) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttrFixed := len(m.AttrFixed)
		for k, v := range m.AttrFixed {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttrFixed--
			if mlAttrFixed != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr_percent")
	w.RawByte('"')
	w.RawByte(':')
	if m.AttrPercent == nil {
		w.RawString("null")
	} else if len(m.AttrPercent) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttrPercent := len(m.AttrPercent)
		for k, v := range m.AttrPercent {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttrPercent--
			if mlAttrPercent != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SkillStone) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.Expire != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expire")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Expire))
		needWriteComma = true
	}
	if m.Lock {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lock")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Lock)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TalentRune) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RuneId != "" {
		w.RawByte('"')
		w.RawString("rune_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RuneId)
		needWriteComma = true
	}
	if m.TalentId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("talent_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TalentId))
		needWriteComma = true
	}
	if m.Lvl != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lvl")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lvl))
		needWriteComma = true
	}
	if m.PlateIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("plate_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PlateIdx))
		needWriteComma = true
	}
	if m.Loc != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("loc")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Loc))
		needWriteComma = true
	}
	if m.CurrExp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("curr_exp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurrExp))
		needWriteComma = true
	}
	if m.AccExp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("acc_exp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AccExp))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TalentDetail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TalentDetail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TalentDetail) GoString() string {
	return m.String()
}

func (m *SkillDetail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SkillDetail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SkillDetail) GoString() string {
	return m.String()
}

func (m *Hole) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Hole) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Hole) GoString() string {
	return m.String()
}

func (m *HeroTalent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroTalent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroTalent) GoString() string {
	return m.String()
}

func (m *TalentPlate) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TalentPlate) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TalentPlate) GoString() string {
	return m.String()
}

func (m *TalentAdvance) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TalentAdvance) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TalentAdvance) GoString() string {
	return m.String()
}

func (m *SkillAdvance) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SkillAdvance) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SkillAdvance) GoString() string {
	return m.String()
}

func (m *SkillStoneAdvance) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SkillStoneAdvance) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SkillStoneAdvance) GoString() string {
	return m.String()
}

func (m *TalentAttr) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TalentAttr) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TalentAttr) GoString() string {
	return m.String()
}

func (m *SkillStone) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SkillStone) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SkillStone) GoString() string {
	return m.String()
}

func (m *TalentRune) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TalentRune) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TalentRune) GoString() string {
	return m.String()
}

func (m *TalentDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Loc != 0 {
		n += 1 + sovTalent(uint64(m.Loc))
	}
	if m.IsUnlock {
		n += 2
	}
	l = len(m.RuneId)
	if l > 0 {
		n += 1 + l + sovTalent(uint64(l))
	}
	if m.TalentId != 0 {
		n += 1 + sovTalent(uint64(m.TalentId))
	}
	if m.Lvl != 0 {
		n += 1 + sovTalent(uint64(m.Lvl))
	}
	if m.AnchorLoc != 0 {
		n += 1 + sovTalent(uint64(m.AnchorLoc))
	}
	return n
}

func (m *SkillDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkillId != 0 {
		n += 1 + sovTalent(uint64(m.SkillId))
	}
	if m.Lvl != 0 {
		n += 1 + sovTalent(uint64(m.Lvl))
	}
	if len(m.Holes) > 0 {
		for _, e := range m.Holes {
			l = e.Size()
			n += 1 + l + sovTalent(uint64(l))
		}
	}
	return n
}

func (m *Hole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HoleType != 0 {
		n += 1 + sovTalent(uint64(m.HoleType))
	}
	if m.StoneId != 0 {
		n += 1 + sovTalent(uint64(m.StoneId))
	}
	return n
}

func (m *HeroTalent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginId != 0 {
		n += 1 + sovTalent(uint64(m.OriginId))
	}
	if m.ParticularPoints != 0 {
		n += 1 + sovTalent(uint64(m.ParticularPoints))
	}
	if m.ConfigId != 0 {
		n += 1 + sovTalent(uint64(m.ConfigId))
	}
	if m.UsedPoints != 0 {
		n += 1 + sovTalent(uint64(m.UsedPoints))
	}
	if len(m.Each) > 0 {
		for _, e := range m.Each {
			l = e.Size()
			n += 1 + l + sovTalent(uint64(l))
		}
	}
	if len(m.Skills) > 0 {
		for k, v := range m.Skills {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTalent(uint64(l))
			}
			mapEntrySize := 1 + sovTalent(uint64(k)) + l
			n += mapEntrySize + 1 + sovTalent(uint64(mapEntrySize))
		}
	}
	if len(m.ExtraSkills) > 0 {
		for k, v := range m.ExtraSkills {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTalent(uint64(k)) + 1 + sovTalent(uint64(v))
			n += mapEntrySize + 1 + sovTalent(uint64(mapEntrySize))
		}
	}
	if len(m.ChosenSkills) > 0 {
		l = 0
		for _, e := range m.ChosenSkills {
			l += sovTalent(uint64(e))
		}
		n += 1 + sovTalent(uint64(l)) + l
	}
	return n
}

func (m *TalentPlate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnlockNum != 0 {
		n += 1 + sovTalent(uint64(m.UnlockNum))
	}
	if len(m.Plate) > 0 {
		for k, v := range m.Plate {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTalent(uint64(l))
			}
			mapEntrySize := 1 + sovTalent(uint64(k)) + l
			n += mapEntrySize + 1 + sovTalent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TalentAdvance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovTalent(uint64(l))
	}
	if len(m.TalentBuff) > 0 {
		l = 0
		for _, e := range m.TalentBuff {
			l += sovTalent(uint64(e))
		}
		n += 1 + sovTalent(uint64(l)) + l
	}
	return n
}

func (m *SkillAdvance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Skills) > 0 {
		for k, v := range m.Skills {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTalent(uint64(l))
			}
			mapEntrySize := 1 + sovTalent(uint64(k)) + l
			n += mapEntrySize + 1 + sovTalent(uint64(mapEntrySize))
		}
	}
	if m.StoneAttr != nil {
		l = m.StoneAttr.Size()
		n += 1 + l + sovTalent(uint64(l))
	}
	if len(m.UnusedSkills) > 0 {
		for k, v := range m.UnusedSkills {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTalent(uint64(k)) + 1 + sovTalent(uint64(v))
			n += mapEntrySize + 1 + sovTalent(uint64(mapEntrySize))
		}
	}
	if m.SpecialStoneAtk != 0 {
		n += 1 + sovTalent(uint64(m.SpecialStoneAtk))
	}
	return n
}

func (m *SkillStoneAdvance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stones) > 0 {
		l = 0
		for _, e := range m.Stones {
			l += sovTalent(uint64(e))
		}
		n += 1 + sovTalent(uint64(l)) + l
	}
	return n
}

func (m *TalentAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AttrFixed) > 0 {
		for k, v := range m.AttrFixed {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTalent(uint64(k)) + 1 + sovTalent(uint64(v))
			n += mapEntrySize + 1 + sovTalent(uint64(mapEntrySize))
		}
	}
	if len(m.AttrPercent) > 0 {
		for k, v := range m.AttrPercent {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTalent(uint64(k)) + 1 + sovTalent(uint64(v))
			n += mapEntrySize + 1 + sovTalent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SkillStone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovTalent(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovTalent(uint64(m.Count))
	}
	if m.Expire != 0 {
		n += 1 + sovTalent(uint64(m.Expire))
	}
	if m.Lock {
		n += 2
	}
	return n
}

func (m *TalentRune) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuneId)
	if l > 0 {
		n += 1 + l + sovTalent(uint64(l))
	}
	if m.TalentId != 0 {
		n += 1 + sovTalent(uint64(m.TalentId))
	}
	if m.Lvl != 0 {
		n += 1 + sovTalent(uint64(m.Lvl))
	}
	if m.PlateIdx != 0 {
		n += 1 + sovTalent(uint64(m.PlateIdx))
	}
	if m.Loc != 0 {
		n += 1 + sovTalent(uint64(m.Loc))
	}
	if m.CurrExp != 0 {
		n += 1 + sovTalent(uint64(m.CurrExp))
	}
	if m.AccExp != 0 {
		n += 1 + sovTalent(uint64(m.AccExp))
	}
	return n
}

func sovTalent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTalent(x uint64) (n int) {
	return sovTalent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TalentDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalentDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalentDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			m.Loc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUnlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUnlock = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentId", wireType)
			}
			m.TalentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lvl", wireType)
			}
			m.Lvl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lvl |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorLoc", wireType)
			}
			m.AnchorLoc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnchorLoc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lvl", wireType)
			}
			m.Lvl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lvl |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holes = append(m.Holes, &Hole{})
			if err := m.Holes[len(m.Holes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoleType", wireType)
			}
			m.HoleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoleType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoneId", wireType)
			}
			m.StoneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoneId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroTalent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroTalent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroTalent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginId", wireType)
			}
			m.OriginId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticularPoints", wireType)
			}
			m.ParticularPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticularPoints |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedPoints", wireType)
			}
			m.UsedPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedPoints |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Each", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Each = append(m.Each, &TalentPlate{})
			if err := m.Each[len(m.Each)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skills == nil {
				m.Skills = make(map[int64]*SkillDetail)
			}
			var mapkey int64
			var mapvalue *SkillDetail
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTalent
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTalent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SkillDetail{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTalent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Skills[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraSkills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraSkills == nil {
				m.ExtraSkills = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTalent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraSkills[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChosenSkills = append(m.ChosenSkills, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTalent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTalent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChosenSkills) == 0 {
					m.ChosenSkills = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChosenSkills = append(m.ChosenSkills, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChosenSkills", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TalentPlate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalentPlate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalentPlate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockNum", wireType)
			}
			m.UnlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plate == nil {
				m.Plate = make(map[int64]*TalentDetail)
			}
			var mapkey int64
			var mapvalue *TalentDetail
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTalent
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTalent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TalentDetail{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTalent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Plate[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TalentAdvance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalentAdvance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalentAdvance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = &TalentAttr{}
			}
			if err := m.Attr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TalentBuff = append(m.TalentBuff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTalent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTalent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TalentBuff) == 0 {
					m.TalentBuff = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TalentBuff = append(m.TalentBuff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentBuff", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillAdvance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillAdvance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillAdvance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skills == nil {
				m.Skills = make(map[int64]*SkillStoneAdvance)
			}
			var mapkey int64
			var mapvalue *SkillStoneAdvance
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTalent
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTalent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SkillStoneAdvance{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTalent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Skills[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoneAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoneAttr == nil {
				m.StoneAttr = &TalentAttr{}
			}
			if err := m.StoneAttr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnusedSkills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnusedSkills == nil {
				m.UnusedSkills = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTalent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UnusedSkills[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialStoneAtk", wireType)
			}
			m.SpecialStoneAtk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialStoneAtk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillStoneAdvance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillStoneAdvance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillStoneAdvance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stones = append(m.Stones, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTalent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTalent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stones) == 0 {
					m.Stones = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stones = append(m.Stones, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stones", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TalentAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalentAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalentAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrFixed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttrFixed == nil {
				m.AttrFixed = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTalent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttrFixed[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrPercent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttrPercent == nil {
				m.AttrPercent = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTalent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttrPercent[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillStone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillStone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillStone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TalentRune) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalentRune: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalentRune: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentId", wireType)
			}
			m.TalentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lvl", wireType)
			}
			m.Lvl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lvl |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlateIdx", wireType)
			}
			m.PlateIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlateIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			m.Loc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrExp", wireType)
			}
			m.CurrExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrExp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccExp", wireType)
			}
			m.AccExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccExp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTalent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTalent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTalent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTalent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTalent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTalent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTalent = fmt.Errorf("proto: unexpected end of group")
)
