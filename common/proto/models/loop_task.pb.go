// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/loop_task.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoopTask struct {
	TaskId  int64      `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Process int64      `protobuf:"varint,2,opt,name=process,proto3" json:"process,omitempty"`
	Status  TaskStatus `protobuf:"varint,3,opt,name=status,proto3,enum=models.TaskStatus" json:"status,omitempty"`
	Kind    int64      `protobuf:"varint,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *LoopTask) Reset()      { *m = LoopTask{} }
func (*LoopTask) ProtoMessage() {}
func (*LoopTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_f666954ec39ba84c, []int{0}
}
func (m *LoopTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask.Merge(m, src)
}
func (m *LoopTask) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask proto.InternalMessageInfo

func (m *LoopTask) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *LoopTask) GetProcess() int64 {
	if m != nil {
		return m.Process
	}
	return 0
}

func (m *LoopTask) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_NotStarted
}

func (m *LoopTask) GetKind() int64 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (*LoopTask) XXX_MessageName() string {
	return "models.LoopTask"
}
func init() {
	proto.RegisterType((*LoopTask)(nil), "models.LoopTask")
}

func init() { proto.RegisterFile("proto/models/loop_task.proto", fileDescriptor_f666954ec39ba84c) }

var fileDescriptor_f666954ec39ba84c = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0xcd, 0x4f, 0x49, 0xcd, 0x29, 0xd6, 0xcf, 0xc9, 0xcf, 0x2f, 0x88, 0x2f, 0x49,
	0x2c, 0xce, 0xd6, 0x03, 0x0b, 0x0b, 0xb1, 0x41, 0xc4, 0xa5, 0x24, 0x50, 0x54, 0xa5, 0xe6, 0x95,
	0xe6, 0x16, 0x43, 0x54, 0x28, 0xd5, 0x72, 0x71, 0xf8, 0xe4, 0xe7, 0x17, 0x84, 0x24, 0x16, 0x67,
	0x0b, 0x89, 0x73, 0xb1, 0x83, 0xf4, 0xc6, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07,
	0xb1, 0x81, 0xb8, 0x9e, 0x29, 0x42, 0x12, 0x5c, 0xec, 0x05, 0x45, 0xf9, 0xc9, 0xa9, 0xc5, 0xc5,
	0x12, 0x4c, 0x60, 0x09, 0x18, 0x57, 0x48, 0x8b, 0x8b, 0xad, 0xb8, 0x24, 0xb1, 0xa4, 0xb4, 0x58,
	0x82, 0x59, 0x81, 0x51, 0x83, 0xcf, 0x48, 0x48, 0x0f, 0x62, 0x87, 0x1e, 0xc8, 0xc0, 0x60, 0xb0,
	0x4c, 0x10, 0x54, 0x85, 0x90, 0x10, 0x17, 0x4b, 0x76, 0x66, 0x5e, 0x8a, 0x04, 0x0b, 0xd8, 0x08,
	0x30, 0xdb, 0xc9, 0xf7, 0xc6, 0x43, 0x39, 0x86, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63,
	0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e, 0x3c, 0x92,
	0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc4, 0x63, 0x39, 0xc6, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c,
	0x96, 0x63, 0x88, 0x92, 0x4f, 0xce, 0xcf, 0xcc, 0xd3, 0x2d, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2,
	0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x47, 0xf6, 0x59, 0x12, 0x1b, 0x98, 0x67, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x9f, 0x70, 0x7d, 0xb1, 0x16, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask.Get().(proto.Message)
	})
}

var poolLoopTask = &sync.Pool{New: func() interface{} { return &LoopTask{} }}

func (m *LoopTask) ReleasePool() { m.Reset(); poolLoopTask.Put(m); m = nil }
func (this *LoopTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask)
	if !ok {
		that2, ok := that.(LoopTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.Process != that1.Process {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (m *LoopTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Process != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.Process))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskId != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoopTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoopTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *LoopTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if m.Process != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("process")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Process))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.Kind != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kind")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Kind))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoopTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask) GoString() string {
	return m.String()
}

func (m *LoopTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovLoopTask(uint64(m.TaskId))
	}
	if m.Process != 0 {
		n += 1 + sovLoopTask(uint64(m.Process))
	}
	if m.Status != 0 {
		n += 1 + sovLoopTask(uint64(m.Status))
	}
	if m.Kind != 0 {
		n += 1 + sovLoopTask(uint64(m.Kind))
	}
	return n
}

func sovLoopTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoopTask(x uint64) (n int) {
	return sovLoopTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoopTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoopTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoopTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			m.Process = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Process |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoopTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoopTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoopTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoopTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoopTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoopTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoopTask = fmt.Errorf("proto: unexpected end of group")
)
