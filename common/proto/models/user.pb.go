// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/user.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_SUCCESS Status = 0
	Status_FREEZE  Status = 1
)

var Status_name = map[int32]string{
	0: "SUCCESS",
	1: "FREEZE",
}

var Status_value = map[string]int32{
	"SUCCESS": 0,
	"FREEZE":  1,
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{0}
}

type User struct {
	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleId         string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	DeviceId       string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	FreezeTime     int64  `protobuf:"varint,4,opt,name=freeze_time,json=freezeTime,proto3" json:"freeze_time,omitempty"`
	ServerId       int64  `protobuf:"varint,5,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	MapId          int64  `protobuf:"varint,7,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64  `protobuf:"varint,8,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *User) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *User) GetFreezeTime() int64 {
	if m != nil {
		return m.FreezeTime
	}
	return 0
}

func (m *User) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *User) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *User) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*User) XXX_MessageName() string {
	return "models.User"
}

type Role struct {
	RoleId       string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Nickname     string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level        int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId     int64  `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame  int64  `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power        int64  `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	Title        int64  `protobuf:"varint,7,opt,name=title,proto3" json:"title,omitempty"`
	ChangeName   int64  `protobuf:"varint,8,opt,name=change_name,json=changeName,proto3" json:"change_name,omitempty"`
	Language     int64  `protobuf:"varint,9,opt,name=language,proto3" json:"language,omitempty"`
	Login        int64  `protobuf:"varint,10,opt,name=login,proto3" json:"login,omitempty"`
	Logout       int64  `protobuf:"varint,11,opt,name=logout,proto3" json:"logout,omitempty"`
	CreateTime   int64  `protobuf:"varint,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpProfit    int64  `protobuf:"varint,13,opt,name=exp_profit,json=expProfit,proto3" json:"exp_profit,omitempty"`
	LevelIndex   int64  `protobuf:"varint,14,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
	BattleSpeed  int64  `protobuf:"varint,15,opt,name=battle_speed,json=battleSpeed,proto3" json:"battle_speed,omitempty"`
	HighestPower int64  `protobuf:"varint,16,opt,name=highest_power,json=highestPower,proto3" json:"highest_power,omitempty"`
	UserId       string `protobuf:"bytes,17,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Recharge     int64  `protobuf:"varint,18,opt,name=recharge,proto3" json:"recharge,omitempty"`
	GameId       int64  `protobuf:"varint,19,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	SessionId    string `protobuf:"bytes,20,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *Role) Reset()      { *m = Role{} }
func (*Role) ProtoMessage() {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{1}
}
func (m *Role) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Role.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return m.Size()
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Role) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Role) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Role) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *Role) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *Role) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Role) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *Role) GetChangeName() int64 {
	if m != nil {
		return m.ChangeName
	}
	return 0
}

func (m *Role) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (m *Role) GetLogin() int64 {
	if m != nil {
		return m.Login
	}
	return 0
}

func (m *Role) GetLogout() int64 {
	if m != nil {
		return m.Logout
	}
	return 0
}

func (m *Role) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Role) GetExpProfit() int64 {
	if m != nil {
		return m.ExpProfit
	}
	return 0
}

func (m *Role) GetLevelIndex() int64 {
	if m != nil {
		return m.LevelIndex
	}
	return 0
}

func (m *Role) GetBattleSpeed() int64 {
	if m != nil {
		return m.BattleSpeed
	}
	return 0
}

func (m *Role) GetHighestPower() int64 {
	if m != nil {
		return m.HighestPower
	}
	return 0
}

func (m *Role) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Role) GetRecharge() int64 {
	if m != nil {
		return m.Recharge
	}
	return 0
}

func (m *Role) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *Role) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (*Role) XXX_MessageName() string {
	return "models.Role"
}

type RoleSimple struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Nickname    string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level       int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId    int64  `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame int64  `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power       int64  `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *RoleSimple) Reset()      { *m = RoleSimple{} }
func (*RoleSimple) ProtoMessage() {}
func (*RoleSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{2}
}
func (m *RoleSimple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleSimple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleSimple.Merge(m, src)
}
func (m *RoleSimple) XXX_Size() int {
	return m.Size()
}
func (m *RoleSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleSimple.DiscardUnknown(m)
}

var xxx_messageInfo_RoleSimple proto.InternalMessageInfo

func (m *RoleSimple) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoleSimple) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RoleSimple) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RoleSimple) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *RoleSimple) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *RoleSimple) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (*RoleSimple) XXX_MessageName() string {
	return "models.RoleSimple"
}

// 头衔奖励信息
type TitleRewards struct {
	Title   int64          `protobuf:"varint,2,opt,name=title,proto3" json:"title,omitempty"`
	Rewards map[int64]bool `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *TitleRewards) Reset()      { *m = TitleRewards{} }
func (*TitleRewards) ProtoMessage() {}
func (*TitleRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{3}
}
func (m *TitleRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitleRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitleRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitleRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitleRewards.Merge(m, src)
}
func (m *TitleRewards) XXX_Size() int {
	return m.Size()
}
func (m *TitleRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_TitleRewards.DiscardUnknown(m)
}

var xxx_messageInfo_TitleRewards proto.InternalMessageInfo

func (m *TitleRewards) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *TitleRewards) GetRewards() map[int64]bool {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*TitleRewards) XXX_MessageName() string {
	return "models.TitleRewards"
}

type AttrBonus struct {
	AdvancedType int64           `protobuf:"varint,1,opt,name=advanced_type,json=advancedType,proto3" json:"advanced_type,omitempty"`
	Attr         map[int64]int64 `protobuf:"bytes,2,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *AttrBonus) Reset()      { *m = AttrBonus{} }
func (*AttrBonus) ProtoMessage() {}
func (*AttrBonus) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{4}
}
func (m *AttrBonus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttrBonus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttrBonus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttrBonus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttrBonus.Merge(m, src)
}
func (m *AttrBonus) XXX_Size() int {
	return m.Size()
}
func (m *AttrBonus) XXX_DiscardUnknown() {
	xxx_messageInfo_AttrBonus.DiscardUnknown(m)
}

var xxx_messageInfo_AttrBonus proto.InternalMessageInfo

func (m *AttrBonus) GetAdvancedType() int64 {
	if m != nil {
		return m.AdvancedType
	}
	return 0
}

func (m *AttrBonus) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (*AttrBonus) XXX_MessageName() string {
	return "models.AttrBonus"
}

type HeroAttrBonus struct {
	AdvancedType int64           `protobuf:"varint,1,opt,name=advanced_type,json=advancedType,proto3" json:"advanced_type,omitempty"`
	HeroId       int64           `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Attr         map[int64]int64 `protobuf:"bytes,3,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *HeroAttrBonus) Reset()      { *m = HeroAttrBonus{} }
func (*HeroAttrBonus) ProtoMessage() {}
func (*HeroAttrBonus) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{5}
}
func (m *HeroAttrBonus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroAttrBonus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroAttrBonus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroAttrBonus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroAttrBonus.Merge(m, src)
}
func (m *HeroAttrBonus) XXX_Size() int {
	return m.Size()
}
func (m *HeroAttrBonus) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroAttrBonus.DiscardUnknown(m)
}

var xxx_messageInfo_HeroAttrBonus proto.InternalMessageInfo

func (m *HeroAttrBonus) GetAdvancedType() int64 {
	if m != nil {
		return m.AdvancedType
	}
	return 0
}

func (m *HeroAttrBonus) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *HeroAttrBonus) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (*HeroAttrBonus) XXX_MessageName() string {
	return "models.HeroAttrBonus"
}

type RoleAttr struct {
	Typ             AttrBonusType    `protobuf:"varint,1,opt,name=typ,proto3,enum=models.AttrBonusType" json:"typ,omitempty"`
	AttrFixed       []*AttrBonus     `protobuf:"bytes,2,rep,name=attr_fixed,json=attrFixed,proto3" json:"attr_fixed,omitempty"`
	AttrPercent     []*AttrBonus     `protobuf:"bytes,3,rep,name=attr_percent,json=attrPercent,proto3" json:"attr_percent,omitempty"`
	HeroAttrFixed   []*HeroAttrBonus `protobuf:"bytes,4,rep,name=hero_attr_fixed,json=heroAttrFixed,proto3" json:"hero_attr_fixed,omitempty"`
	HeroAttrPercent []*HeroAttrBonus `protobuf:"bytes,5,rep,name=hero_attr_percent,json=heroAttrPercent,proto3" json:"hero_attr_percent,omitempty"`
}

func (m *RoleAttr) Reset()      { *m = RoleAttr{} }
func (*RoleAttr) ProtoMessage() {}
func (*RoleAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{6}
}
func (m *RoleAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleAttr.Merge(m, src)
}
func (m *RoleAttr) XXX_Size() int {
	return m.Size()
}
func (m *RoleAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleAttr.DiscardUnknown(m)
}

var xxx_messageInfo_RoleAttr proto.InternalMessageInfo

func (m *RoleAttr) GetTyp() AttrBonusType {
	if m != nil {
		return m.Typ
	}
	return AttrBonusType_TypeAtlas
}

func (m *RoleAttr) GetAttrFixed() []*AttrBonus {
	if m != nil {
		return m.AttrFixed
	}
	return nil
}

func (m *RoleAttr) GetAttrPercent() []*AttrBonus {
	if m != nil {
		return m.AttrPercent
	}
	return nil
}

func (m *RoleAttr) GetHeroAttrFixed() []*HeroAttrBonus {
	if m != nil {
		return m.HeroAttrFixed
	}
	return nil
}

func (m *RoleAttr) GetHeroAttrPercent() []*HeroAttrBonus {
	if m != nil {
		return m.HeroAttrPercent
	}
	return nil
}

func (*RoleAttr) XXX_MessageName() string {
	return "models.RoleAttr"
}

type BattleSettingData struct {
	ScreenCurCount          int64 `protobuf:"varint,1,opt,name=screen_cur_count,json=screenCurCount,proto3" json:"screen_cur_count,omitempty"`
	IsShowOtherPlayer       bool  `protobuf:"varint,2,opt,name=is_show_other_player,json=isShowOtherPlayer,proto3" json:"is_show_other_player,omitempty"`
	IsShowOtherPlayerEffect bool  `protobuf:"varint,3,opt,name=is_show_other_player_effect,json=isShowOtherPlayerEffect,proto3" json:"is_show_other_player_effect,omitempty"`
	IsShowFightText         bool  `protobuf:"varint,4,opt,name=is_show_fight_text,json=isShowFightText,proto3" json:"is_show_fight_text,omitempty"`
	IsShowFuzzy             bool  `protobuf:"varint,5,opt,name=is_show_fuzzy,json=isShowFuzzy,proto3" json:"is_show_fuzzy,omitempty"`
	IsShowVibration         bool  `protobuf:"varint,6,opt,name=is_show_vibration,json=isShowVibration,proto3" json:"is_show_vibration,omitempty"`
	IsShowChangeHeroEffect  bool  `protobuf:"varint,7,opt,name=is_show_change_hero_effect,json=isShowChangeHeroEffect,proto3" json:"is_show_change_hero_effect,omitempty"`
	Hp                      int64 `protobuf:"varint,8,opt,name=hp,proto3" json:"hp,omitempty"`
	Mp                      int64 `protobuf:"varint,9,opt,name=mp,proto3" json:"mp,omitempty"`
	AutoSoulSkill           int64 `protobuf:"varint,10,opt,name=auto_soul_skill,json=autoSoulSkill,proto3" json:"auto_soul_skill,omitempty"`
}

func (m *BattleSettingData) Reset()      { *m = BattleSettingData{} }
func (*BattleSettingData) ProtoMessage() {}
func (*BattleSettingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{7}
}
func (m *BattleSettingData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleSettingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleSettingData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleSettingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleSettingData.Merge(m, src)
}
func (m *BattleSettingData) XXX_Size() int {
	return m.Size()
}
func (m *BattleSettingData) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleSettingData.DiscardUnknown(m)
}

var xxx_messageInfo_BattleSettingData proto.InternalMessageInfo

func (m *BattleSettingData) GetScreenCurCount() int64 {
	if m != nil {
		return m.ScreenCurCount
	}
	return 0
}

func (m *BattleSettingData) GetIsShowOtherPlayer() bool {
	if m != nil {
		return m.IsShowOtherPlayer
	}
	return false
}

func (m *BattleSettingData) GetIsShowOtherPlayerEffect() bool {
	if m != nil {
		return m.IsShowOtherPlayerEffect
	}
	return false
}

func (m *BattleSettingData) GetIsShowFightText() bool {
	if m != nil {
		return m.IsShowFightText
	}
	return false
}

func (m *BattleSettingData) GetIsShowFuzzy() bool {
	if m != nil {
		return m.IsShowFuzzy
	}
	return false
}

func (m *BattleSettingData) GetIsShowVibration() bool {
	if m != nil {
		return m.IsShowVibration
	}
	return false
}

func (m *BattleSettingData) GetIsShowChangeHeroEffect() bool {
	if m != nil {
		return m.IsShowChangeHeroEffect
	}
	return false
}

func (m *BattleSettingData) GetHp() int64 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *BattleSettingData) GetMp() int64 {
	if m != nil {
		return m.Mp
	}
	return 0
}

func (m *BattleSettingData) GetAutoSoulSkill() int64 {
	if m != nil {
		return m.AutoSoulSkill
	}
	return 0
}

func (*BattleSettingData) XXX_MessageName() string {
	return "models.BattleSettingData"
}

type UserSimpleInfo struct {
	RoleId        string            `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Nickname      string            `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level         int64             `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId      int64             `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame   int64             `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power         int64             `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	Title         int64             `protobuf:"varint,7,opt,name=title,proto3" json:"title,omitempty"`
	GuildId       string            `protobuf:"bytes,8,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildName     string            `protobuf:"bytes,9,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	GuildPosition int64             `protobuf:"varint,10,opt,name=guild_position,json=guildPosition,proto3" json:"guild_position,omitempty"`
	Heroes        []*HeroSimpleInfo `protobuf:"bytes,11,rep,name=heroes,proto3" json:"heroes,omitempty"`
}

func (m *UserSimpleInfo) Reset()      { *m = UserSimpleInfo{} }
func (*UserSimpleInfo) ProtoMessage() {}
func (*UserSimpleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{8}
}
func (m *UserSimpleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserSimpleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserSimpleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserSimpleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSimpleInfo.Merge(m, src)
}
func (m *UserSimpleInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserSimpleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSimpleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserSimpleInfo proto.InternalMessageInfo

func (m *UserSimpleInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *UserSimpleInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserSimpleInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UserSimpleInfo) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *UserSimpleInfo) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *UserSimpleInfo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *UserSimpleInfo) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *UserSimpleInfo) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *UserSimpleInfo) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *UserSimpleInfo) GetGuildPosition() int64 {
	if m != nil {
		return m.GuildPosition
	}
	return 0
}

func (m *UserSimpleInfo) GetHeroes() []*HeroSimpleInfo {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (*UserSimpleInfo) XXX_MessageName() string {
	return "models.UserSimpleInfo"
}

type HeroSimpleInfo struct {
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Power    int64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *HeroSimpleInfo) Reset()      { *m = HeroSimpleInfo{} }
func (*HeroSimpleInfo) ProtoMessage() {}
func (*HeroSimpleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{9}
}
func (m *HeroSimpleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroSimpleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroSimpleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroSimpleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroSimpleInfo.Merge(m, src)
}
func (m *HeroSimpleInfo) XXX_Size() int {
	return m.Size()
}
func (m *HeroSimpleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroSimpleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HeroSimpleInfo proto.InternalMessageInfo

func (m *HeroSimpleInfo) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *HeroSimpleInfo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (*HeroSimpleInfo) XXX_MessageName() string {
	return "models.HeroSimpleInfo"
}

// 头像、头像框
type Avatar struct {
	Id             int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExpirationTime int64 `protobuf:"varint,2,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
}

func (m *Avatar) Reset()      { *m = Avatar{} }
func (*Avatar) ProtoMessage() {}
func (*Avatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{10}
}
func (m *Avatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Avatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Avatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Avatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Avatar.Merge(m, src)
}
func (m *Avatar) XXX_Size() int {
	return m.Size()
}
func (m *Avatar) XXX_DiscardUnknown() {
	xxx_messageInfo_Avatar.DiscardUnknown(m)
}

var xxx_messageInfo_Avatar proto.InternalMessageInfo

func (m *Avatar) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Avatar) GetExpirationTime() int64 {
	if m != nil {
		return m.ExpirationTime
	}
	return 0
}

func (*Avatar) XXX_MessageName() string {
	return "models.Avatar"
}

type CurAvatar struct {
	IsChange       bool  `protobuf:"varint,1,opt,name=is_change,json=isChange,proto3" json:"is_change,omitempty"`
	CurAvatar      int64 `protobuf:"varint,2,opt,name=cur_avatar,json=curAvatar,proto3" json:"cur_avatar,omitempty"`
	CurAvatarFrame int64 `protobuf:"varint,3,opt,name=cur_avatar_frame,json=curAvatarFrame,proto3" json:"cur_avatar_frame,omitempty"`
}

func (m *CurAvatar) Reset()      { *m = CurAvatar{} }
func (*CurAvatar) ProtoMessage() {}
func (*CurAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd22cfcbf212cb76, []int{11}
}
func (m *CurAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurAvatar.Merge(m, src)
}
func (m *CurAvatar) XXX_Size() int {
	return m.Size()
}
func (m *CurAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_CurAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_CurAvatar proto.InternalMessageInfo

func (m *CurAvatar) GetIsChange() bool {
	if m != nil {
		return m.IsChange
	}
	return false
}

func (m *CurAvatar) GetCurAvatar() int64 {
	if m != nil {
		return m.CurAvatar
	}
	return 0
}

func (m *CurAvatar) GetCurAvatarFrame() int64 {
	if m != nil {
		return m.CurAvatarFrame
	}
	return 0
}

func (*CurAvatar) XXX_MessageName() string {
	return "models.CurAvatar"
}
func init() {
	proto.RegisterEnum("models.Status", Status_name, Status_value)
	proto.RegisterType((*User)(nil), "models.User")
	proto.RegisterType((*Role)(nil), "models.Role")
	proto.RegisterType((*RoleSimple)(nil), "models.RoleSimple")
	proto.RegisterType((*TitleRewards)(nil), "models.TitleRewards")
	proto.RegisterMapType((map[int64]bool)(nil), "models.TitleRewards.RewardsEntry")
	proto.RegisterType((*AttrBonus)(nil), "models.AttrBonus")
	proto.RegisterMapType((map[int64]int64)(nil), "models.AttrBonus.AttrEntry")
	proto.RegisterType((*HeroAttrBonus)(nil), "models.HeroAttrBonus")
	proto.RegisterMapType((map[int64]int64)(nil), "models.HeroAttrBonus.AttrEntry")
	proto.RegisterType((*RoleAttr)(nil), "models.RoleAttr")
	proto.RegisterType((*BattleSettingData)(nil), "models.BattleSettingData")
	proto.RegisterType((*UserSimpleInfo)(nil), "models.UserSimpleInfo")
	proto.RegisterType((*HeroSimpleInfo)(nil), "models.HeroSimpleInfo")
	proto.RegisterType((*Avatar)(nil), "models.Avatar")
	proto.RegisterType((*CurAvatar)(nil), "models.CurAvatar")
}

func init() { proto.RegisterFile("proto/models/user.proto", fileDescriptor_bd22cfcbf212cb76) }

var fileDescriptor_bd22cfcbf212cb76 = []byte{
	// 1271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x36, 0x25, 0x5b, 0xa2, 0x46, 0xb2, 0x6c, 0xef, 0x9f, 0xc4, 0xfc, 0x65, 0x54, 0x49, 0x54,
	0xb4, 0x31, 0x52, 0xd4, 0x2e, 0x92, 0x02, 0x2d, 0xd2, 0xf6, 0xe0, 0xa8, 0x36, 0xaa, 0x43, 0x5b,
	0x83, 0x72, 0x7a, 0xc8, 0x85, 0x60, 0xc8, 0x95, 0xb8, 0x08, 0xc9, 0x65, 0x97, 0x4b, 0x59, 0xca,
	0x53, 0xf4, 0x5c, 0x20, 0xf7, 0x5e, 0xf2, 0x04, 0x05, 0x7a, 0xce, 0x31, 0x87, 0x1e, 0x72, 0x6c,
	0xe5, 0x4b, 0x8f, 0x7d, 0x84, 0x62, 0x67, 0x97, 0x92, 0x8c, 0x18, 0x45, 0x0b, 0xf4, 0x92, 0x93,
	0x34, 0xdf, 0xcc, 0x37, 0x33, 0x3b, 0x33, 0xdc, 0x59, 0xd8, 0xcd, 0x04, 0x97, 0xfc, 0x30, 0xe1,
	0x21, 0x8d, 0xf3, 0xc3, 0x22, 0xa7, 0xe2, 0x00, 0x11, 0x52, 0xd3, 0x50, 0xc7, 0xb9, 0x64, 0x40,
	0xd3, 0x22, 0xc9, 0xb5, 0x45, 0xef, 0x57, 0x0b, 0xd6, 0x1f, 0xe5, 0x54, 0x90, 0x5d, 0xa8, 0x2b,
	0xa2, 0xc7, 0x42, 0xc7, 0xba, 0x65, 0xed, 0x37, 0xdc, 0x9a, 0x12, 0x07, 0xa1, 0x52, 0x08, 0x1e,
	0x53, 0xa5, 0xa8, 0x68, 0x85, 0x12, 0x07, 0x21, 0xd9, 0x83, 0x46, 0x48, 0x27, 0x2c, 0x40, 0x55,
	0x15, 0x55, 0xb6, 0x06, 0x06, 0x21, 0xb9, 0x09, 0xcd, 0x91, 0xa0, 0xf4, 0x19, 0xf5, 0x24, 0x4b,
	0xa8, 0xb3, 0x7e, 0xcb, 0xda, 0xaf, 0xba, 0xa0, 0xa1, 0x33, 0x96, 0x50, 0xc5, 0xce, 0xa9, 0x98,
	0xe8, 0x88, 0x1b, 0xa8, 0xb6, 0x35, 0x30, 0x08, 0xc9, 0x75, 0xa8, 0x25, 0x7e, 0xa6, 0x34, 0x75,
	0xd4, 0x6c, 0x24, 0x7e, 0x36, 0x08, 0xc9, 0x3e, 0x6c, 0x3f, 0xf1, 0xa5, 0x8c, 0xa9, 0xb7, 0xa4,
	0xda, 0x68, 0xd0, 0xd6, 0xf8, 0xd0, 0x38, 0xe8, 0xfd, 0xb2, 0x0e, 0xeb, 0x2e, 0x8f, 0xe9, 0x6a,
	0xf6, 0xd6, 0xa5, 0xec, 0x3b, 0x60, 0xa7, 0x2c, 0x78, 0x9a, 0xfa, 0x09, 0x35, 0xe7, 0x5a, 0xc8,
	0xe4, 0x1a, 0x6c, 0xc4, 0x74, 0x42, 0x63, 0x3c, 0x55, 0xd5, 0xd5, 0x82, 0xca, 0xd8, 0x9f, 0xf8,
	0xd2, 0xc7, 0xb0, 0xfa, 0x40, 0xb6, 0x06, 0x06, 0x21, 0xb9, 0x0d, 0x2d, 0xa3, 0x1c, 0x09, 0xe5,
	0x52, 0x9f, 0xa8, 0xa9, 0xb1, 0x13, 0x61, 0xbc, 0x66, 0xfc, 0x9c, 0x0a, 0xa7, 0xa6, 0xbd, 0xa2,
	0xa0, 0x50, 0xc9, 0x64, 0x4c, 0xcb, 0x93, 0xa2, 0xa0, 0xca, 0x17, 0x44, 0x7e, 0x3a, 0xa6, 0x1e,
	0x26, 0xa8, 0x0f, 0x09, 0x1a, 0xfa, 0x46, 0x39, 0xeb, 0x80, 0x1d, 0xfb, 0xe9, 0xb8, 0xf0, 0xc7,
	0xd4, 0x69, 0xe8, 0x5c, 0x4a, 0x19, 0xd3, 0xe7, 0x63, 0x96, 0x3a, 0x60, 0xd2, 0x57, 0x02, 0xb9,
	0x01, 0xb5, 0x98, 0x8f, 0x79, 0x21, 0x9d, 0x26, 0xc2, 0x46, 0xc2, 0x50, 0x82, 0xfa, 0xd2, 0x74,
	0xaa, 0x65, 0x42, 0x21, 0x84, 0x9d, 0x7a, 0x07, 0x80, 0x4e, 0x33, 0x2f, 0x13, 0x7c, 0xc4, 0xa4,
	0xb3, 0x89, 0xfa, 0x06, 0x9d, 0x66, 0xa7, 0x08, 0x28, 0x3e, 0xd6, 0xc7, 0x63, 0x69, 0x48, 0xa7,
	0x4e, 0x5b, 0xf3, 0x11, 0x1a, 0x28, 0x44, 0x95, 0xa6, 0xec, 0x5a, 0x46, 0x69, 0xe8, 0x6c, 0xe9,
	0xd2, 0x98, 0x8e, 0x29, 0x88, 0xbc, 0x0b, 0x9b, 0x11, 0x1b, 0x47, 0x34, 0x97, 0x9e, 0x2e, 0xd1,
	0x36, 0xda, 0xb4, 0x0c, 0x78, 0x8a, 0x95, 0x5a, 0x99, 0xd0, 0x9d, 0x4b, 0x13, 0xda, 0x01, 0x5b,
	0xd0, 0x20, 0xf2, 0xc5, 0x98, 0x3a, 0x44, 0xd7, 0xa2, 0x94, 0x15, 0x69, 0xec, 0x27, 0xd8, 0xff,
	0xff, 0xe9, 0x63, 0x2b, 0x71, 0x10, 0xaa, 0x53, 0xe5, 0x34, 0xcf, 0x19, 0x4f, 0x95, 0xee, 0x1a,
	0x3a, 0x6c, 0x18, 0x64, 0x10, 0xf6, 0x5e, 0x58, 0x00, 0x6a, 0x80, 0x86, 0x2c, 0xc9, 0xde, 0x82,
	0x31, 0xea, 0x3d, 0xb7, 0xa0, 0x75, 0xa6, 0x46, 0xc7, 0xa5, 0xe7, 0xbe, 0x08, 0xf3, 0xe5, 0x5c,
	0x55, 0x56, 0xe7, 0xea, 0x33, 0xa8, 0x0b, 0x6d, 0xe0, 0x54, 0x6f, 0x55, 0xf7, 0x9b, 0xf7, 0x6e,
	0x1f, 0xe8, 0x4b, 0xe1, 0x60, 0x95, 0x7c, 0x60, 0x7e, 0x8f, 0x53, 0x29, 0x66, 0x6e, 0xc9, 0xe8,
	0x3c, 0x80, 0xd6, 0xaa, 0x82, 0x6c, 0x43, 0xf5, 0x29, 0x9d, 0x61, 0x41, 0xaa, 0xae, 0xfa, 0xab,
	0x82, 0x4e, 0xfc, 0xb8, 0xd0, 0x41, 0x6d, 0x57, 0x0b, 0x0f, 0x2a, 0x9f, 0x5a, 0xbd, 0x1f, 0x2d,
	0x68, 0x1c, 0x49, 0x29, 0x1e, 0xf2, 0xb4, 0xc8, 0x55, 0xbf, 0xfd, 0x70, 0xe2, 0xa7, 0x01, 0x0d,
	0x3d, 0x39, 0xcb, 0xa8, 0xf1, 0xd1, 0x2a, 0xc1, 0xb3, 0x59, 0x46, 0xc9, 0x21, 0xac, 0xfb, 0x52,
	0x0a, 0xa7, 0x82, 0x89, 0xee, 0x95, 0x89, 0x2e, 0xbc, 0xe0, 0x3f, 0x9d, 0x22, 0x1a, 0x76, 0x3e,
	0xd1, 0x21, 0xfe, 0x51, 0x72, 0xd5, 0xd5, 0xe4, 0x7e, 0xb6, 0x60, 0xf3, 0x2b, 0x2a, 0xf8, 0xbf,
	0x4c, 0x70, 0x17, 0xea, 0x11, 0x15, 0xbc, 0xbc, 0x19, 0xab, 0x6e, 0x4d, 0x89, 0x83, 0x90, 0xdc,
	0x37, 0x99, 0xeb, 0x12, 0xdf, 0x2c, 0x33, 0xbf, 0x14, 0xe2, 0xbf, 0xcb, 0xfe, 0x79, 0x05, 0x6c,
	0x35, 0xaa, 0x8a, 0x4d, 0xee, 0x40, 0x55, 0xce, 0x32, 0x24, 0xb6, 0xef, 0x5d, 0x7f, 0xa3, 0x66,
	0x2a, 0x6f, 0x57, 0x59, 0x90, 0x8f, 0x00, 0x54, 0x58, 0x6f, 0xc4, 0xa6, 0x34, 0x34, 0x35, 0xde,
	0x79, 0xc3, 0xde, 0x6d, 0x28, 0xa3, 0x13, 0x65, 0x43, 0x3e, 0x86, 0x16, 0x32, 0x32, 0x2a, 0x02,
	0x9a, 0x4a, 0x73, 0xba, 0x2b, 0x38, 0x4d, 0x65, 0x76, 0xaa, 0xad, 0xc8, 0x17, 0xb0, 0x85, 0x45,
	0x5a, 0x09, 0xb6, 0x8e, 0xc4, 0xeb, 0x57, 0x96, 0xc5, 0xdd, 0x8c, 0x8c, 0xa8, 0x83, 0x1e, 0xc1,
	0xce, 0x92, 0x5e, 0x46, 0xde, 0xf8, 0x3b, 0x07, 0x5b, 0xa5, 0x03, 0x93, 0x41, 0xef, 0x45, 0x15,
	0x76, 0x1e, 0x9a, 0xf5, 0x20, 0x25, 0x4b, 0xc7, 0x5f, 0xfa, 0xd2, 0x57, 0xbb, 0x24, 0x0f, 0x04,
	0xa5, 0xa9, 0x17, 0x14, 0xc2, 0x0b, 0x78, 0x91, 0x4a, 0x53, 0xee, 0xb6, 0xc6, 0xfb, 0x85, 0xe8,
	0x2b, 0x94, 0x1c, 0xc2, 0x35, 0x96, 0x7b, 0x79, 0xc4, 0xcf, 0x3d, 0x2e, 0x23, 0x2a, 0xbc, 0x2c,
	0xf6, 0x67, 0x54, 0x98, 0x19, 0xdf, 0x61, 0xf9, 0x30, 0xe2, 0xe7, 0xdf, 0x2a, 0xcd, 0x29, 0x2a,
	0xc8, 0xe7, 0xb0, 0x77, 0x15, 0xc1, 0xa3, 0xa3, 0x11, 0x0d, 0x24, 0xde, 0x06, 0xb6, 0xbb, 0xfb,
	0x06, 0xef, 0x18, 0xd5, 0xe4, 0x03, 0x20, 0x25, 0x7b, 0xc4, 0xc6, 0x91, 0xf4, 0x24, 0x9d, 0x4a,
	0xbc, 0x28, 0x6c, 0x77, 0x4b, 0x93, 0x4e, 0x14, 0x7e, 0x46, 0xa7, 0x92, 0xf4, 0x60, 0x73, 0x61,
	0x5c, 0x3c, 0x7b, 0x36, 0xc3, 0x0b, 0xc3, 0x76, 0x9b, 0xc6, 0x4e, 0x41, 0xe4, 0x2e, 0xec, 0x94,
	0x36, 0x13, 0xf6, 0x44, 0xf8, 0x92, 0xf1, 0x14, 0x2f, 0x8f, 0x85, 0xbf, 0xef, 0x4a, 0x98, 0x3c,
	0x80, 0x4e, 0x69, 0x6b, 0xf6, 0x0f, 0x56, 0xdf, 0x64, 0x5e, 0x47, 0xd2, 0x0d, 0x4d, 0xea, 0xa3,
	0x5e, 0xd5, 0xde, 0x24, 0xde, 0x86, 0x4a, 0x94, 0x99, 0x55, 0x55, 0x89, 0x32, 0x25, 0x27, 0x99,
	0x59, 0x4e, 0x95, 0x24, 0x23, 0xef, 0xc3, 0x96, 0x5f, 0x48, 0xee, 0xe5, 0xbc, 0x88, 0xbd, 0xfc,
	0x29, 0x8b, 0x63, 0xb3, 0xa0, 0x36, 0x15, 0x3c, 0xe4, 0x45, 0x3c, 0x54, 0x60, 0xef, 0x75, 0x05,
	0xda, 0xea, 0x49, 0xa2, 0xaf, 0xde, 0x41, 0x3a, 0xe2, 0x6f, 0xeb, 0x16, 0xff, 0x3f, 0xd8, 0xe3,
	0x82, 0xc5, 0x61, 0xf9, 0x4e, 0x69, 0xb8, 0x75, 0x94, 0xf5, 0xfa, 0xd1, 0x2a, 0x4c, 0xbd, 0xa1,
	0xd7, 0x0f, 0x22, 0xb8, 0xde, 0xdf, 0x83, 0xb6, 0x56, 0x67, 0x3c, 0x67, 0xd8, 0x30, 0x53, 0x2a,
	0x44, 0x4f, 0x0d, 0x48, 0x0e, 0x00, 0xaf, 0x1c, 0x9a, 0x3b, 0x4d, 0xfc, 0x24, 0x6e, 0xac, 0x7e,
	0x12, 0xcb, 0xfa, 0xb9, 0xc6, 0xaa, 0xd7, 0x87, 0xf6, 0x65, 0x8d, 0x2a, 0x47, 0xc0, 0xd3, 0x11,
	0x1b, 0x97, 0xb5, 0xad, 0xba, 0xb6, 0x06, 0x06, 0xe1, 0xf2, 0xac, 0x95, 0xd5, 0x55, 0x73, 0x04,
	0xb5, 0x23, 0x2c, 0x88, 0xea, 0xf0, 0x82, 0x55, 0x61, 0x21, 0xb9, 0x03, 0x5b, 0x74, 0x9a, 0x31,
	0x3d, 0x4b, 0xfa, 0x39, 0xa1, 0x99, 0xed, 0x25, 0xac, 0x9e, 0x14, 0xbd, 0xef, 0xa1, 0xd1, 0x2f,
	0x84, 0xf1, 0xb2, 0x07, 0x0d, 0x96, 0x9b, 0x71, 0x43, 0x67, 0xb6, 0x6b, 0xb3, 0x5c, 0x8f, 0x97,
	0xaa, 0x93, 0xfa, 0x3e, 0x75, 0x07, 0x8c, 0xb7, 0x46, 0xb0, 0xe0, 0xee, 0xc3, 0xf6, 0x52, 0x6d,
	0x9a, 0xa6, 0xdb, 0xdd, 0x5e, 0x18, 0x61, 0xdf, 0xee, 0xde, 0x86, 0xda, 0x50, 0xfa, 0xb2, 0xc8,
	0x49, 0x13, 0xea, 0xc3, 0x47, 0xfd, 0xfe, 0xf1, 0x70, 0xb8, 0xbd, 0x46, 0x00, 0x6a, 0x27, 0xee,
	0xf1, 0xf1, 0xe3, 0xe3, 0x6d, 0xeb, 0xe1, 0xd7, 0xaf, 0x7f, 0xef, 0xae, 0xfd, 0x34, 0xef, 0x5a,
	0x2f, 0xe7, 0x5d, 0xeb, 0xd5, 0xbc, 0x6b, 0xfd, 0x36, 0xef, 0x5a, 0x7f, 0xcc, 0xbb, 0x6b, 0x7f,
	0xce, 0xbb, 0xd6, 0x0f, 0x17, 0xdd, 0xb5, 0x97, 0x17, 0x5d, 0xeb, 0xd5, 0x45, 0x77, 0xed, 0xf5,
	0x45, 0x77, 0xed, 0xf1, 0xcd, 0x80, 0xb3, 0xf4, 0x43, 0xfd, 0x10, 0x3d, 0x0c, 0x78, 0x92, 0xf0,
	0xf4, 0x70, 0xf5, 0x99, 0xfd, 0xa4, 0x86, 0xd2, 0xfd, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4f,
	0xf6, 0x2e, 0x74, 0x9e, 0x0b, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRole.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleSimple.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTitleRewards.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAttrBonus.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroAttrBonus.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleAttr.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattleSettingData.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUserSimpleInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroSimpleInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAvatar.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCurAvatar.Get().(proto.Message)
	})
}

var poolUser = &sync.Pool{New: func() interface{} { return &User{} }}

func (m *User) ReleasePool() { m.Reset(); poolUser.Put(m); m = nil }

var poolRole = &sync.Pool{New: func() interface{} { return &Role{} }}

func (m *Role) ReleasePool() { m.Reset(); poolRole.Put(m); m = nil }

var poolRoleSimple = &sync.Pool{New: func() interface{} { return &RoleSimple{} }}

func (m *RoleSimple) ReleasePool() { m.Reset(); poolRoleSimple.Put(m); m = nil }

var poolTitleRewards = &sync.Pool{New: func() interface{} { return &TitleRewards{} }}

func (m *TitleRewards) ReleasePool() { m.Reset(); poolTitleRewards.Put(m); m = nil }

var poolAttrBonus = &sync.Pool{New: func() interface{} { return &AttrBonus{} }}

func (m *AttrBonus) ReleasePool() { m.Reset(); poolAttrBonus.Put(m); m = nil }

var poolHeroAttrBonus = &sync.Pool{New: func() interface{} { return &HeroAttrBonus{} }}

func (m *HeroAttrBonus) ReleasePool() { m.Reset(); poolHeroAttrBonus.Put(m); m = nil }

var poolRoleAttr = &sync.Pool{New: func() interface{} { return &RoleAttr{} }}

func (m *RoleAttr) ReleasePool() { m.Reset(); poolRoleAttr.Put(m); m = nil }

var poolBattleSettingData = &sync.Pool{New: func() interface{} { return &BattleSettingData{} }}

func (m *BattleSettingData) ReleasePool() { m.Reset(); poolBattleSettingData.Put(m); m = nil }

var poolUserSimpleInfo = &sync.Pool{New: func() interface{} { return &UserSimpleInfo{} }}

func (m *UserSimpleInfo) ReleasePool() { m.Reset(); poolUserSimpleInfo.Put(m); m = nil }

var poolHeroSimpleInfo = &sync.Pool{New: func() interface{} { return &HeroSimpleInfo{} }}

func (m *HeroSimpleInfo) ReleasePool() { m.Reset(); poolHeroSimpleInfo.Put(m); m = nil }

var poolAvatar = &sync.Pool{New: func() interface{} { return &Avatar{} }}

func (m *Avatar) ReleasePool() { m.Reset(); poolAvatar.Put(m); m = nil }

var poolCurAvatar = &sync.Pool{New: func() interface{} { return &CurAvatar{} }}

func (m *CurAvatar) ReleasePool() { m.Reset(); poolCurAvatar.Put(m); m = nil }
func (x Status) String() string {
	s, ok := Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if this.FreezeTime != that1.FreezeTime {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *Role) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Role)
	if !ok {
		that2, ok := that.(Role)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.ChangeName != that1.ChangeName {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	if this.Login != that1.Login {
		return false
	}
	if this.Logout != that1.Logout {
		return false
	}
	if this.CreateTime != that1.CreateTime {
		return false
	}
	if this.ExpProfit != that1.ExpProfit {
		return false
	}
	if this.LevelIndex != that1.LevelIndex {
		return false
	}
	if this.BattleSpeed != that1.BattleSpeed {
		return false
	}
	if this.HighestPower != that1.HighestPower {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.Recharge != that1.Recharge {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *RoleSimple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleSimple)
	if !ok {
		that2, ok := that.(RoleSimple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	return true
}
func (this *TitleRewards) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TitleRewards)
	if !ok {
		that2, ok := that.(TitleRewards)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *AttrBonus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AttrBonus)
	if !ok {
		that2, ok := that.(AttrBonus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AdvancedType != that1.AdvancedType {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	return true
}
func (this *HeroAttrBonus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroAttrBonus)
	if !ok {
		that2, ok := that.(HeroAttrBonus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AdvancedType != that1.AdvancedType {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	return true
}
func (this *RoleAttr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleAttr)
	if !ok {
		that2, ok := that.(RoleAttr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if len(this.AttrFixed) != len(that1.AttrFixed) {
		return false
	}
	for i := range this.AttrFixed {
		if !this.AttrFixed[i].Equal(that1.AttrFixed[i]) {
			return false
		}
	}
	if len(this.AttrPercent) != len(that1.AttrPercent) {
		return false
	}
	for i := range this.AttrPercent {
		if !this.AttrPercent[i].Equal(that1.AttrPercent[i]) {
			return false
		}
	}
	if len(this.HeroAttrFixed) != len(that1.HeroAttrFixed) {
		return false
	}
	for i := range this.HeroAttrFixed {
		if !this.HeroAttrFixed[i].Equal(that1.HeroAttrFixed[i]) {
			return false
		}
	}
	if len(this.HeroAttrPercent) != len(that1.HeroAttrPercent) {
		return false
	}
	for i := range this.HeroAttrPercent {
		if !this.HeroAttrPercent[i].Equal(that1.HeroAttrPercent[i]) {
			return false
		}
	}
	return true
}
func (this *BattleSettingData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleSettingData)
	if !ok {
		that2, ok := that.(BattleSettingData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ScreenCurCount != that1.ScreenCurCount {
		return false
	}
	if this.IsShowOtherPlayer != that1.IsShowOtherPlayer {
		return false
	}
	if this.IsShowOtherPlayerEffect != that1.IsShowOtherPlayerEffect {
		return false
	}
	if this.IsShowFightText != that1.IsShowFightText {
		return false
	}
	if this.IsShowFuzzy != that1.IsShowFuzzy {
		return false
	}
	if this.IsShowVibration != that1.IsShowVibration {
		return false
	}
	if this.IsShowChangeHeroEffect != that1.IsShowChangeHeroEffect {
		return false
	}
	if this.Hp != that1.Hp {
		return false
	}
	if this.Mp != that1.Mp {
		return false
	}
	if this.AutoSoulSkill != that1.AutoSoulSkill {
		return false
	}
	return true
}
func (this *UserSimpleInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserSimpleInfo)
	if !ok {
		that2, ok := that.(UserSimpleInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.GuildName != that1.GuildName {
		return false
	}
	if this.GuildPosition != that1.GuildPosition {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	return true
}
func (this *HeroSimpleInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroSimpleInfo)
	if !ok {
		that2, ok := that.(HeroSimpleInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	return true
}
func (this *Avatar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Avatar)
	if !ok {
		that2, ok := that.(Avatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ExpirationTime != that1.ExpirationTime {
		return false
	}
	return true
}
func (this *CurAvatar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CurAvatar)
	if !ok {
		that2, ok := that.(CurAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsChange != that1.IsChange {
		return false
	}
	if this.CurAvatar != that1.CurAvatar {
		return false
	}
	if this.CurAvatarFrame != that1.CurAvatarFrame {
		return false
	}
	return true
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x40
	}
	if m.MapId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x38
	}
	if m.ServerId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x28
	}
	if m.FreezeTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FreezeTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Role) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.GameId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Recharge != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Recharge))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.HighestPower != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.HighestPower))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.BattleSpeed != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BattleSpeed))
		i--
		dAtA[i] = 0x78
	}
	if m.LevelIndex != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LevelIndex))
		i--
		dAtA[i] = 0x70
	}
	if m.ExpProfit != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ExpProfit))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.Logout != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Logout))
		i--
		dAtA[i] = 0x58
	}
	if m.Login != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Login))
		i--
		dAtA[i] = 0x50
	}
	if m.Language != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x48
	}
	if m.ChangeName != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ChangeName))
		i--
		dAtA[i] = 0x40
	}
	if m.Title != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x38
	}
	if m.Power != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoleSimple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleSimple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleSimple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TitleRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitleRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Title != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *AttrBonus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttrBonus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttrBonus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AdvancedType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AdvancedType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeroAttrBonus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroAttrBonus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroAttrBonus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HeroId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x10
	}
	if m.AdvancedType != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AdvancedType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoleAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HeroAttrPercent) > 0 {
		for iNdEx := len(m.HeroAttrPercent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HeroAttrPercent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.HeroAttrFixed) > 0 {
		for iNdEx := len(m.HeroAttrFixed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HeroAttrFixed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AttrPercent) > 0 {
		for iNdEx := len(m.AttrPercent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttrPercent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AttrFixed) > 0 {
		for iNdEx := len(m.AttrFixed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttrFixed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Typ != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleSettingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleSettingData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleSettingData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoSoulSkill != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AutoSoulSkill))
		i--
		dAtA[i] = 0x50
	}
	if m.Mp != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Mp))
		i--
		dAtA[i] = 0x48
	}
	if m.Hp != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Hp))
		i--
		dAtA[i] = 0x40
	}
	if m.IsShowChangeHeroEffect {
		i--
		if m.IsShowChangeHeroEffect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsShowVibration {
		i--
		if m.IsShowVibration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsShowFuzzy {
		i--
		if m.IsShowFuzzy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsShowFightText {
		i--
		if m.IsShowFightText {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsShowOtherPlayerEffect {
		i--
		if m.IsShowOtherPlayerEffect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsShowOtherPlayer {
		i--
		if m.IsShowOtherPlayer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ScreenCurCount != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ScreenCurCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserSimpleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSimpleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserSimpleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.GuildPosition != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GuildPosition))
		i--
		dAtA[i] = 0x50
	}
	if len(m.GuildName) > 0 {
		i -= len(m.GuildName)
		copy(dAtA[i:], m.GuildName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.GuildName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x42
	}
	if m.Title != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x38
	}
	if m.Power != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HeroSimpleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroSimpleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroSimpleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Avatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Avatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Avatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ExpirationTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CurAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurAvatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurAvatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurAvatarFrame != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CurAvatarFrame))
		i--
		dAtA[i] = 0x18
	}
	if m.CurAvatar != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CurAvatar))
		i--
		dAtA[i] = 0x10
	}
	if m.IsChange {
		i--
		if m.IsChange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *User) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UserId != "" {
		w.RawByte('"')
		w.RawString("user_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UserId)
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.DeviceId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("device_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DeviceId)
		needWriteComma = true
	}
	if m.FreezeTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("freeze_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreezeTime))
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Role) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.ChangeName != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("change_name")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChangeName))
		needWriteComma = true
	}
	if m.Language != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	if m.Login != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("login")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Login))
		needWriteComma = true
	}
	if m.Logout != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("logout")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Logout))
		needWriteComma = true
	}
	if m.CreateTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("create_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreateTime))
		needWriteComma = true
	}
	if m.ExpProfit != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("exp_profit")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpProfit))
		needWriteComma = true
	}
	if m.LevelIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LevelIndex))
		needWriteComma = true
	}
	if m.BattleSpeed != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleSpeed))
		needWriteComma = true
	}
	if m.HighestPower != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("highest_power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HighestPower))
		needWriteComma = true
	}
	if m.UserId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("user_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UserId)
		needWriteComma = true
	}
	if m.Recharge != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("recharge")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Recharge))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	if m.SessionId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("session_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SessionId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleSimple) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TitleRewards) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Title != 0 {
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *AttrBonus) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AdvancedType != 0 {
		w.RawByte('"')
		w.RawString("advanced_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AdvancedType))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroAttrBonus) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AdvancedType != 0 {
		w.RawByte('"')
		w.RawString("advanced_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AdvancedType))
		needWriteComma = true
	}
	if m.HeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleAttr) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr_fixed")
	w.RawByte('"')
	w.RawByte(':')
	if m.AttrFixed == nil {
		w.RawString("null")
	} else if len(m.AttrFixed) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.AttrFixed {
			v.JsonBytes(w)
			if i != len(m.AttrFixed)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr_percent")
	w.RawByte('"')
	w.RawByte(':')
	if m.AttrPercent == nil {
		w.RawString("null")
	} else if len(m.AttrPercent) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.AttrPercent {
			v.JsonBytes(w)
			if i != len(m.AttrPercent)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("hero_attr_fixed")
	w.RawByte('"')
	w.RawByte(':')
	if m.HeroAttrFixed == nil {
		w.RawString("null")
	} else if len(m.HeroAttrFixed) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.HeroAttrFixed {
			v.JsonBytes(w)
			if i != len(m.HeroAttrFixed)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("hero_attr_percent")
	w.RawByte('"')
	w.RawByte(':')
	if m.HeroAttrPercent == nil {
		w.RawString("null")
	} else if len(m.HeroAttrPercent) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.HeroAttrPercent {
			v.JsonBytes(w)
			if i != len(m.HeroAttrPercent)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BattleSettingData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ScreenCurCount != 0 {
		w.RawByte('"')
		w.RawString("screen_cur_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ScreenCurCount))
		needWriteComma = true
	}
	if m.IsShowOtherPlayer {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_show_other_player")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsShowOtherPlayer)
		needWriteComma = true
	}
	if m.IsShowOtherPlayerEffect {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_show_other_player_effect")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsShowOtherPlayerEffect)
		needWriteComma = true
	}
	if m.IsShowFightText {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_show_fight_text")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsShowFightText)
		needWriteComma = true
	}
	if m.IsShowFuzzy {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_show_fuzzy")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsShowFuzzy)
		needWriteComma = true
	}
	if m.IsShowVibration {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_show_vibration")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsShowVibration)
		needWriteComma = true
	}
	if m.IsShowChangeHeroEffect {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_show_change_hero_effect")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsShowChangeHeroEffect)
		needWriteComma = true
	}
	if m.Hp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Hp))
		needWriteComma = true
	}
	if m.Mp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("mp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Mp))
		needWriteComma = true
	}
	if m.AutoSoulSkill != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("auto_soul_skill")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AutoSoulSkill))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *UserSimpleInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.GuildName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildName)
		needWriteComma = true
	}
	if m.GuildPosition != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_position")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GuildPosition))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroSimpleInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Avatar) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ExpirationTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expiration_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpirationTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CurAvatar) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsChange {
		w.RawByte('"')
		w.RawString("is_change")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsChange)
		needWriteComma = true
	}
	if m.CurAvatar != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_avatar")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurAvatar))
		needWriteComma = true
	}
	if m.CurAvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cur_avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurAvatarFrame))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User) GoString() string {
	return m.String()
}

func (m *Role) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Role) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Role) GoString() string {
	return m.String()
}

func (m *RoleSimple) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleSimple) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleSimple) GoString() string {
	return m.String()
}

func (m *TitleRewards) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TitleRewards) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TitleRewards) GoString() string {
	return m.String()
}

func (m *AttrBonus) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *AttrBonus) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *AttrBonus) GoString() string {
	return m.String()
}

func (m *HeroAttrBonus) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroAttrBonus) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroAttrBonus) GoString() string {
	return m.String()
}

func (m *RoleAttr) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleAttr) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleAttr) GoString() string {
	return m.String()
}

func (m *BattleSettingData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BattleSettingData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BattleSettingData) GoString() string {
	return m.String()
}

func (m *UserSimpleInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *UserSimpleInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *UserSimpleInfo) GoString() string {
	return m.String()
}

func (m *HeroSimpleInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroSimpleInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroSimpleInfo) GoString() string {
	return m.String()
}

func (m *Avatar) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Avatar) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Avatar) GoString() string {
	return m.String()
}

func (m *CurAvatar) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CurAvatar) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CurAvatar) GoString() string {
	return m.String()
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.FreezeTime != 0 {
		n += 1 + sovUser(uint64(m.FreezeTime))
	}
	if m.ServerId != 0 {
		n += 1 + sovUser(uint64(m.ServerId))
	}
	if m.MapId != 0 {
		n += 1 + sovUser(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovUser(uint64(m.BattleServerId))
	}
	return n
}

func (m *Role) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovUser(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovUser(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovUser(uint64(m.Power))
	}
	if m.Title != 0 {
		n += 1 + sovUser(uint64(m.Title))
	}
	if m.ChangeName != 0 {
		n += 1 + sovUser(uint64(m.ChangeName))
	}
	if m.Language != 0 {
		n += 1 + sovUser(uint64(m.Language))
	}
	if m.Login != 0 {
		n += 1 + sovUser(uint64(m.Login))
	}
	if m.Logout != 0 {
		n += 1 + sovUser(uint64(m.Logout))
	}
	if m.CreateTime != 0 {
		n += 1 + sovUser(uint64(m.CreateTime))
	}
	if m.ExpProfit != 0 {
		n += 1 + sovUser(uint64(m.ExpProfit))
	}
	if m.LevelIndex != 0 {
		n += 1 + sovUser(uint64(m.LevelIndex))
	}
	if m.BattleSpeed != 0 {
		n += 1 + sovUser(uint64(m.BattleSpeed))
	}
	if m.HighestPower != 0 {
		n += 2 + sovUser(uint64(m.HighestPower))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 2 + l + sovUser(uint64(l))
	}
	if m.Recharge != 0 {
		n += 2 + sovUser(uint64(m.Recharge))
	}
	if m.GameId != 0 {
		n += 2 + sovUser(uint64(m.GameId))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 2 + l + sovUser(uint64(l))
	}
	return n
}

func (m *RoleSimple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovUser(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovUser(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovUser(uint64(m.Power))
	}
	return n
}

func (m *TitleRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != 0 {
		n += 1 + sovUser(uint64(m.Title))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AttrBonus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvancedType != 0 {
		n += 1 + sovUser(uint64(m.AdvancedType))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HeroAttrBonus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvancedType != 0 {
		n += 1 + sovUser(uint64(m.AdvancedType))
	}
	if m.HeroId != 0 {
		n += 1 + sovUser(uint64(m.HeroId))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoleAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovUser(uint64(m.Typ))
	}
	if len(m.AttrFixed) > 0 {
		for _, e := range m.AttrFixed {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.AttrPercent) > 0 {
		for _, e := range m.AttrPercent {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.HeroAttrFixed) > 0 {
		for _, e := range m.HeroAttrFixed {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.HeroAttrPercent) > 0 {
		for _, e := range m.HeroAttrPercent {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *BattleSettingData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScreenCurCount != 0 {
		n += 1 + sovUser(uint64(m.ScreenCurCount))
	}
	if m.IsShowOtherPlayer {
		n += 2
	}
	if m.IsShowOtherPlayerEffect {
		n += 2
	}
	if m.IsShowFightText {
		n += 2
	}
	if m.IsShowFuzzy {
		n += 2
	}
	if m.IsShowVibration {
		n += 2
	}
	if m.IsShowChangeHeroEffect {
		n += 2
	}
	if m.Hp != 0 {
		n += 1 + sovUser(uint64(m.Hp))
	}
	if m.Mp != 0 {
		n += 1 + sovUser(uint64(m.Mp))
	}
	if m.AutoSoulSkill != 0 {
		n += 1 + sovUser(uint64(m.AutoSoulSkill))
	}
	return n
}

func (m *UserSimpleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovUser(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovUser(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovUser(uint64(m.Power))
	}
	if m.Title != 0 {
		n += 1 + sovUser(uint64(m.Title))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.GuildPosition != 0 {
		n += 1 + sovUser(uint64(m.GuildPosition))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *HeroSimpleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovUser(uint64(m.ConfigId))
	}
	if m.Power != 0 {
		n += 1 + sovUser(uint64(m.Power))
	}
	return n
}

func (m *Avatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	if m.ExpirationTime != 0 {
		n += 1 + sovUser(uint64(m.ExpirationTime))
	}
	return n
}

func (m *CurAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsChange {
		n += 2
	}
	if m.CurAvatar != 0 {
		n += 1 + sovUser(uint64(m.CurAvatar))
	}
	if m.CurAvatarFrame != 0 {
		n += 1 + sovUser(uint64(m.CurAvatarFrame))
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeTime", wireType)
			}
			m.FreezeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreezeTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeName", wireType)
			}
			m.ChangeName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeName |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			m.Login = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Login |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logout", wireType)
			}
			m.Logout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Logout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpProfit", wireType)
			}
			m.ExpProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpProfit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelIndex", wireType)
			}
			m.LevelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleSpeed", wireType)
			}
			m.BattleSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleSpeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestPower", wireType)
			}
			m.HighestPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recharge", wireType)
			}
			m.Recharge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recharge |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleSimple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleSimple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleSimple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttrBonus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttrBonus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttrBonus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedType", wireType)
			}
			m.AdvancedType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdvancedType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroAttrBonus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroAttrBonus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroAttrBonus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedType", wireType)
			}
			m.AdvancedType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdvancedType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= AttrBonusType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrFixed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrFixed = append(m.AttrFixed, &AttrBonus{})
			if err := m.AttrFixed[len(m.AttrFixed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrPercent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrPercent = append(m.AttrPercent, &AttrBonus{})
			if err := m.AttrPercent[len(m.AttrPercent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroAttrFixed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroAttrFixed = append(m.HeroAttrFixed, &HeroAttrBonus{})
			if err := m.HeroAttrFixed[len(m.HeroAttrFixed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroAttrPercent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroAttrPercent = append(m.HeroAttrPercent, &HeroAttrBonus{})
			if err := m.HeroAttrPercent[len(m.HeroAttrPercent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleSettingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleSettingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleSettingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenCurCount", wireType)
			}
			m.ScreenCurCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenCurCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowOtherPlayer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShowOtherPlayer = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowOtherPlayerEffect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShowOtherPlayerEffect = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowFightText", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShowFightText = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowFuzzy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShowFuzzy = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowVibration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShowVibration = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowChangeHeroEffect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShowChangeHeroEffect = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mp", wireType)
			}
			m.Mp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSoulSkill", wireType)
			}
			m.AutoSoulSkill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoSoulSkill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSimpleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSimpleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSimpleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildPosition", wireType)
			}
			m.GuildPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildPosition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &HeroSimpleInfo{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroSimpleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroSimpleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroSimpleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Avatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Avatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Avatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			m.ExpirationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChange = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurAvatar", wireType)
			}
			m.CurAvatar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurAvatar |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurAvatarFrame", wireType)
			}
			m.CurAvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurAvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
