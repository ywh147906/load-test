// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/equipment.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 词缀加成类型枚举
type AffixBonusType int32

const (
	AffixBonusType_Invalid   AffixBonusType = 0
	AffixBonusType_MeltLevel AffixBonusType = 1
)

var AffixBonusType_name = map[int32]string{
	0: "Invalid",
	1: "MeltLevel",
}

var AffixBonusType_value = map[string]int32{
	"Invalid":   0,
	"MeltLevel": 1,
}

func (AffixBonusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0321601746cbbdf4, []int{0}
}

// 装备信息（此结构需和gameserver里im的values里的结构体保持一致）
type Equipment struct {
	// 装备id
	EquipId string `protobuf:"bytes,1,opt,name=equip_id,json=equipId,proto3" json:"equip_id,omitempty"`
	// 装备item id
	ItemId int64 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	//  int64 base_score = 3; // 基础评分
	Level int64 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	// 装备在哪个英雄身上（0表示没有装备）
	HeroId int64            `protobuf:"varint,5,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Detail *EquipmentDetail `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (m *Equipment) Reset()      { *m = Equipment{} }
func (*Equipment) ProtoMessage() {}
func (*Equipment) Descriptor() ([]byte, []int) {
	return fileDescriptor_0321601746cbbdf4, []int{0}
}
func (m *Equipment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Equipment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Equipment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Equipment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Equipment.Merge(m, src)
}
func (m *Equipment) XXX_Size() int {
	return m.Size()
}
func (m *Equipment) XXX_DiscardUnknown() {
	xxx_messageInfo_Equipment.DiscardUnknown(m)
}

var xxx_messageInfo_Equipment proto.InternalMessageInfo

func (m *Equipment) GetEquipId() string {
	if m != nil {
		return m.EquipId
	}
	return ""
}

func (m *Equipment) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Equipment) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Equipment) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *Equipment) GetDetail() *EquipmentDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (*Equipment) XXX_MessageName() string {
	return "models.Equipment"
}

type EquipmentDetail struct {
	Score int64 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	// 词缀效果
	Affix []*Affix `protobuf:"bytes,2,rep,name=affix,proto3" json:"affix,omitempty"`
	//  string forge_id = 3; // 制造者role_id
	ForgeName   string `protobuf:"bytes,4,opt,name=forge_name,json=forgeName,proto3" json:"forge_name,omitempty"`
	LightEffect int64  `protobuf:"varint,5,opt,name=light_effect,json=lightEffect,proto3" json:"light_effect,omitempty"`
}

func (m *EquipmentDetail) Reset()      { *m = EquipmentDetail{} }
func (*EquipmentDetail) ProtoMessage() {}
func (*EquipmentDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_0321601746cbbdf4, []int{1}
}
func (m *EquipmentDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipmentDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipmentDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipmentDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipmentDetail.Merge(m, src)
}
func (m *EquipmentDetail) XXX_Size() int {
	return m.Size()
}
func (m *EquipmentDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipmentDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EquipmentDetail proto.InternalMessageInfo

func (m *EquipmentDetail) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *EquipmentDetail) GetAffix() []*Affix {
	if m != nil {
		return m.Affix
	}
	return nil
}

func (m *EquipmentDetail) GetForgeName() string {
	if m != nil {
		return m.ForgeName
	}
	return ""
}

func (m *EquipmentDetail) GetLightEffect() int64 {
	if m != nil {
		return m.LightEffect
	}
	return 0
}

func (*EquipmentDetail) XXX_MessageName() string {
	return "models.EquipmentDetail"
}

// 装备词缀
// 词缀的逻辑：如果attr_id>0则认为是属性，skill_id>0则认为是buff，否则则认为是提升技能等级的词缀，通过affix_id和quality走配表给对应的技能做等级加成
type Affix struct {
	AffixId    int64 `protobuf:"varint,1,opt,name=affix_id,json=affixId,proto3" json:"affix_id,omitempty"`
	Quality    int64 `protobuf:"varint,2,opt,name=quality,proto3" json:"quality,omitempty"`
	AffixValue int64 `protobuf:"varint,3,opt,name=affix_value,json=affixValue,proto3" json:"affix_value,omitempty"`
	// 目前这里实际上存的是buff id
	BuffId    int64           `protobuf:"varint,4,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	Active    bool            `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	AttrId    int64           `protobuf:"varint,6,opt,name=attr_id,json=attrId,proto3" json:"attr_id,omitempty"`
	Bonus     map[int64]int64 `protobuf:"bytes,7,rep,name=bonus,proto3" json:"bonus,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IsPercent bool            `protobuf:"varint,8,opt,name=is_percent,json=isPercent,proto3" json:"is_percent,omitempty"`
}

func (m *Affix) Reset()      { *m = Affix{} }
func (*Affix) ProtoMessage() {}
func (*Affix) Descriptor() ([]byte, []int) {
	return fileDescriptor_0321601746cbbdf4, []int{2}
}
func (m *Affix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Affix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Affix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Affix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Affix.Merge(m, src)
}
func (m *Affix) XXX_Size() int {
	return m.Size()
}
func (m *Affix) XXX_DiscardUnknown() {
	xxx_messageInfo_Affix.DiscardUnknown(m)
}

var xxx_messageInfo_Affix proto.InternalMessageInfo

func (m *Affix) GetAffixId() int64 {
	if m != nil {
		return m.AffixId
	}
	return 0
}

func (m *Affix) GetQuality() int64 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *Affix) GetAffixValue() int64 {
	if m != nil {
		return m.AffixValue
	}
	return 0
}

func (m *Affix) GetBuffId() int64 {
	if m != nil {
		return m.BuffId
	}
	return 0
}

func (m *Affix) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Affix) GetAttrId() int64 {
	if m != nil {
		return m.AttrId
	}
	return 0
}

func (m *Affix) GetBonus() map[int64]int64 {
	if m != nil {
		return m.Bonus
	}
	return nil
}

func (m *Affix) GetIsPercent() bool {
	if m != nil {
		return m.IsPercent
	}
	return false
}

func (*Affix) XXX_MessageName() string {
	return "models.Affix"
}
func init() {
	proto.RegisterEnum("models.AffixBonusType", AffixBonusType_name, AffixBonusType_value)
	proto.RegisterType((*Equipment)(nil), "models.Equipment")
	proto.RegisterType((*EquipmentDetail)(nil), "models.EquipmentDetail")
	proto.RegisterType((*Affix)(nil), "models.Affix")
	proto.RegisterMapType((map[int64]int64)(nil), "models.Affix.BonusEntry")
}

func init() { proto.RegisterFile("proto/models/equipment.proto", fileDescriptor_0321601746cbbdf4) }

var fileDescriptor_0321601746cbbdf4 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x31, 0xb1, 0xe3, 0x09, 0x07, 0xd1, 0x0a, 0x71, 0x06, 0xc1, 0x5e, 0x08, 0x4d,
	0x84, 0x20, 0x91, 0x8e, 0xe6, 0x44, 0xc7, 0x89, 0x14, 0x96, 0x38, 0x84, 0x2c, 0x44, 0x41, 0x13,
	0x39, 0xf6, 0xf8, 0x6e, 0x85, 0xff, 0xe4, 0xec, 0x4d, 0x44, 0x5e, 0x02, 0xf1, 0x06, 0xb4, 0x94,
	0x3c, 0xc6, 0x95, 0x57, 0x5e, 0x09, 0x4e, 0x43, 0xc9, 0x23, 0xa0, 0x9d, 0x75, 0xf8, 0xd7, 0xf9,
	0xf7, 0x7d, 0x33, 0xb3, 0xb3, 0x9f, 0x17, 0xee, 0x2d, 0xab, 0x52, 0x95, 0xd3, 0xbc, 0x4c, 0x30,
	0xab, 0xa7, 0x78, 0xbe, 0x92, 0xcb, 0x1c, 0x0b, 0x35, 0x21, 0x99, 0x3b, 0x46, 0x1f, 0x7d, 0x66,
	0xe0, 0xcd, 0x76, 0x1e, 0xbf, 0x03, 0x3d, 0x2a, 0x9c, 0xcb, 0xc4, 0x67, 0x43, 0x36, 0xf6, 0x42,
	0x97, 0x38, 0x48, 0xf8, 0x3e, 0xb8, 0x52, 0x61, 0xae, 0x9d, 0xce, 0x90, 0x8d, 0xed, 0xd0, 0xd1,
	0x18, 0x24, 0xfc, 0x16, 0x74, 0x33, 0x5c, 0x63, 0xe6, 0x5f, 0x23, 0xd9, 0x80, 0x2e, 0x3f, 0xc3,
	0xaa, 0xd4, 0xe5, 0x5d, 0x53, 0xae, 0x31, 0x48, 0xf8, 0x14, 0x9c, 0x04, 0x55, 0x24, 0x33, 0xdf,
	0x19, 0xb2, 0x71, 0xff, 0x70, 0x7f, 0x62, 0x36, 0x99, 0xfc, 0xde, 0xe2, 0x05, 0xd9, 0x61, 0x5b,
	0x36, 0xfa, 0xc8, 0xe0, 0xe6, 0x7f, 0x9e, 0x3e, 0xb3, 0x8e, 0xcb, 0x0a, 0x69, 0x49, 0x3b, 0x34,
	0xc0, 0x1f, 0x42, 0x37, 0x4a, 0x53, 0xf9, 0xc1, 0xef, 0x0c, 0xed, 0x71, 0xff, 0x70, 0x6f, 0x37,
	0xf9, 0xb9, 0x16, 0x43, 0xe3, 0xf1, 0xfb, 0x00, 0x69, 0x59, 0x9d, 0xe2, 0xbc, 0x88, 0x72, 0xa4,
	0x9d, 0xbd, 0xd0, 0x23, 0xe5, 0x55, 0x94, 0x23, 0x7f, 0x00, 0xd7, 0x33, 0x79, 0x7a, 0xa6, 0xe6,
	0x98, 0xa6, 0x18, 0xab, 0x76, 0xf9, 0x3e, 0x69, 0x33, 0x92, 0x46, 0x5f, 0x3b, 0xd0, 0xa5, 0x91,
	0x3a, 0x2e, 0x1a, 0xba, 0x8b, 0xcb, 0x0e, 0x5d, 0xe2, 0x20, 0xe1, 0x3e, 0xb8, 0xe7, 0xab, 0x28,
	0x93, 0x6a, 0xd3, 0xc6, 0xb5, 0x43, 0x7e, 0x00, 0x7d, 0xd3, 0xb4, 0x8e, 0xb2, 0x15, 0xfa, 0x36,
	0xb9, 0x40, 0xd2, 0x5b, 0xad, 0xe8, 0xe8, 0x16, 0xab, 0x34, 0xd5, 0x43, 0x4d, 0xa4, 0x8e, 0xc6,
	0x20, 0xe1, 0xb7, 0xc1, 0x89, 0x62, 0x25, 0xd7, 0x48, 0x5b, 0xf5, 0xc2, 0x96, 0x74, 0x43, 0xa4,
	0x54, 0xa5, 0x1b, 0x1c, 0xd3, 0xa0, 0x31, 0x48, 0xf8, 0x04, 0xba, 0x8b, 0xb2, 0x58, 0xd5, 0xbe,
	0x4b, 0x81, 0xf8, 0xff, 0x04, 0x32, 0x39, 0xd6, 0xd6, 0xac, 0x50, 0xd5, 0x26, 0x34, 0x65, 0x3a,
	0x1b, 0x59, 0xcf, 0x97, 0x58, 0xc5, 0x58, 0x28, 0xbf, 0x47, 0x87, 0x78, 0xb2, 0x7e, 0x6d, 0x84,
	0xbb, 0x47, 0x00, 0x7f, 0x7a, 0xf8, 0x00, 0xec, 0xf7, 0xb8, 0x69, 0xef, 0xad, 0x3f, 0xf5, 0x5f,
	0x31, 0x77, 0x32, 0x37, 0x36, 0xf0, 0xac, 0x73, 0xc4, 0x1e, 0x3d, 0x86, 0x1b, 0x74, 0x26, 0xb5,
	0xbf, 0xd9, 0x2c, 0x91, 0xf7, 0xc1, 0x0d, 0x8a, 0x75, 0x94, 0xc9, 0x64, 0x60, 0xf1, 0x3d, 0xf0,
	0x4e, 0x30, 0x53, 0x2f, 0xf5, 0xcb, 0x19, 0xb0, 0xe3, 0x93, 0xab, 0xef, 0xc2, 0xfa, 0xd2, 0x08,
	0x76, 0xd1, 0x08, 0x76, 0xd9, 0x08, 0xf6, 0xad, 0x11, 0xec, 0x47, 0x23, 0xac, 0x9f, 0x8d, 0x60,
	0x9f, 0xb6, 0xc2, 0xba, 0xd8, 0x0a, 0x76, 0xb9, 0x15, 0xd6, 0xd5, 0x56, 0x58, 0xef, 0x0e, 0xe2,
	0x52, 0x16, 0x4f, 0x6a, 0xac, 0xd6, 0x58, 0x4d, 0xe3, 0x32, 0xcf, 0xcb, 0x62, 0xfa, 0xf7, 0xd3,
	0x5f, 0x38, 0x44, 0x4f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x16, 0x7c, 0xf4, 0x02, 0x11, 0x03,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipment.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEquipmentDetail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAffix.Get().(proto.Message)
	})
}

var poolEquipment = &sync.Pool{New: func() interface{} { return &Equipment{} }}

func (m *Equipment) ReleasePool() { m.Reset(); poolEquipment.Put(m); m = nil }

var poolEquipmentDetail = &sync.Pool{New: func() interface{} { return &EquipmentDetail{} }}

func (m *EquipmentDetail) ReleasePool() { m.Reset(); poolEquipmentDetail.Put(m); m = nil }

var poolAffix = &sync.Pool{New: func() interface{} { return &Affix{} }}

func (m *Affix) ReleasePool() { m.Reset(); poolAffix.Put(m); m = nil }
func (x AffixBonusType) String() string {
	s, ok := AffixBonusType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Equipment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Equipment)
	if !ok {
		that2, ok := that.(Equipment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EquipId != that1.EquipId {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if !this.Detail.Equal(that1.Detail) {
		return false
	}
	return true
}
func (this *EquipmentDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EquipmentDetail)
	if !ok {
		that2, ok := that.(EquipmentDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if len(this.Affix) != len(that1.Affix) {
		return false
	}
	for i := range this.Affix {
		if !this.Affix[i].Equal(that1.Affix[i]) {
			return false
		}
	}
	if this.ForgeName != that1.ForgeName {
		return false
	}
	if this.LightEffect != that1.LightEffect {
		return false
	}
	return true
}
func (this *Affix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Affix)
	if !ok {
		that2, ok := that.(Affix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AffixId != that1.AffixId {
		return false
	}
	if this.Quality != that1.Quality {
		return false
	}
	if this.AffixValue != that1.AffixValue {
		return false
	}
	if this.BuffId != that1.BuffId {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if this.AttrId != that1.AttrId {
		return false
	}
	if len(this.Bonus) != len(that1.Bonus) {
		return false
	}
	for i := range this.Bonus {
		if this.Bonus[i] != that1.Bonus[i] {
			return false
		}
	}
	if this.IsPercent != that1.IsPercent {
		return false
	}
	return true
}
func (m *Equipment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Equipment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Equipment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Detail != nil {
		{
			size, err := m.Detail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEquipment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.HeroId != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if m.ItemId != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EquipId) > 0 {
		i -= len(m.EquipId)
		copy(dAtA[i:], m.EquipId)
		i = encodeVarintEquipment(dAtA, i, uint64(len(m.EquipId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EquipmentDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipmentDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipmentDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LightEffect != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.LightEffect))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ForgeName) > 0 {
		i -= len(m.ForgeName)
		copy(dAtA[i:], m.ForgeName)
		i = encodeVarintEquipment(dAtA, i, uint64(len(m.ForgeName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Affix) > 0 {
		for iNdEx := len(m.Affix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Affix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEquipment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Score != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Affix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Affix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Affix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPercent {
		i--
		if m.IsPercent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Bonus) > 0 {
		for k := range m.Bonus {
			v := m.Bonus[k]
			baseI := i
			i = encodeVarintEquipment(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintEquipment(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEquipment(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.AttrId != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.AttrId))
		i--
		dAtA[i] = 0x30
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BuffId != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.BuffId))
		i--
		dAtA[i] = 0x20
	}
	if m.AffixValue != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.AffixValue))
		i--
		dAtA[i] = 0x18
	}
	if m.Quality != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x10
	}
	if m.AffixId != 0 {
		i = encodeVarintEquipment(dAtA, i, uint64(m.AffixId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEquipment(dAtA []byte, offset int, v uint64) int {
	offset -= sovEquipment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Equipment) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EquipId != "" {
		w.RawByte('"')
		w.RawString("equip_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.EquipId)
		needWriteComma = true
	}
	if m.ItemId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.HeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("detail")
	w.RawByte('"')
	w.RawByte(':')
	m.Detail.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EquipmentDetail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Score != 0 {
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("affix")
	w.RawByte('"')
	w.RawByte(':')
	if m.Affix == nil {
		w.RawString("null")
	} else if len(m.Affix) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Affix {
			v.JsonBytes(w)
			if i != len(m.Affix)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.ForgeName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("forge_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ForgeName)
		needWriteComma = true
	}
	if m.LightEffect != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("light_effect")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LightEffect))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Affix) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AffixId != 0 {
		w.RawByte('"')
		w.RawString("affix_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AffixId))
		needWriteComma = true
	}
	if m.Quality != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("quality")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Quality))
		needWriteComma = true
	}
	if m.AffixValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("affix_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AffixValue))
		needWriteComma = true
	}
	if m.BuffId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("buff_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuffId))
		needWriteComma = true
	}
	if m.Active {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("active")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Active)
		needWriteComma = true
	}
	if m.AttrId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attr_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttrId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("bonus")
	w.RawByte('"')
	w.RawByte(':')
	if m.Bonus == nil {
		w.RawString("null")
	} else if len(m.Bonus) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBonus := len(m.Bonus)
		for k, v := range m.Bonus {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlBonus--
			if mlBonus != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.IsPercent {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_percent")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsPercent)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Equipment) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Equipment) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Equipment) GoString() string {
	return m.String()
}

func (m *EquipmentDetail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EquipmentDetail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EquipmentDetail) GoString() string {
	return m.String()
}

func (m *Affix) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Affix) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Affix) GoString() string {
	return m.String()
}

func (m *Equipment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EquipId)
	if l > 0 {
		n += 1 + l + sovEquipment(uint64(l))
	}
	if m.ItemId != 0 {
		n += 1 + sovEquipment(uint64(m.ItemId))
	}
	if m.Level != 0 {
		n += 1 + sovEquipment(uint64(m.Level))
	}
	if m.HeroId != 0 {
		n += 1 + sovEquipment(uint64(m.HeroId))
	}
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovEquipment(uint64(l))
	}
	return n
}

func (m *EquipmentDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovEquipment(uint64(m.Score))
	}
	if len(m.Affix) > 0 {
		for _, e := range m.Affix {
			l = e.Size()
			n += 1 + l + sovEquipment(uint64(l))
		}
	}
	l = len(m.ForgeName)
	if l > 0 {
		n += 1 + l + sovEquipment(uint64(l))
	}
	if m.LightEffect != 0 {
		n += 1 + sovEquipment(uint64(m.LightEffect))
	}
	return n
}

func (m *Affix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AffixId != 0 {
		n += 1 + sovEquipment(uint64(m.AffixId))
	}
	if m.Quality != 0 {
		n += 1 + sovEquipment(uint64(m.Quality))
	}
	if m.AffixValue != 0 {
		n += 1 + sovEquipment(uint64(m.AffixValue))
	}
	if m.BuffId != 0 {
		n += 1 + sovEquipment(uint64(m.BuffId))
	}
	if m.Active {
		n += 2
	}
	if m.AttrId != 0 {
		n += 1 + sovEquipment(uint64(m.AttrId))
	}
	if len(m.Bonus) > 0 {
		for k, v := range m.Bonus {
			_ = k
			_ = v
			mapEntrySize := 1 + sovEquipment(uint64(k)) + 1 + sovEquipment(uint64(v))
			n += mapEntrySize + 1 + sovEquipment(uint64(mapEntrySize))
		}
	}
	if m.IsPercent {
		n += 2
	}
	return n
}

func sovEquipment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEquipment(x uint64) (n int) {
	return sovEquipment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Equipment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Equipment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Equipment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquipment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquipment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &EquipmentDetail{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipmentDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipmentDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipmentDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquipment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Affix = append(m.Affix, &Affix{})
			if err := m.Affix[len(m.Affix)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForgeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquipment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForgeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LightEffect", wireType)
			}
			m.LightEffect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LightEffect |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Affix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Affix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Affix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixId", wireType)
			}
			m.AffixId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixValue", wireType)
			}
			m.AffixValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
			m.BuffId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrId", wireType)
			}
			m.AttrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttrId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquipment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bonus == nil {
				m.Bonus = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquipment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquipment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEquipment(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthEquipment
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Bonus[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPercent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPercent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEquipment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEquipment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEquipment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEquipment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEquipment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEquipment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEquipment = fmt.Errorf("proto: unexpected end of group")
)
