// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/map_event.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventStatus int32

const (
	EventStatus_EventNotEffect EventStatus = 0
	EventStatus_EventTriggered EventStatus = 1
	EventStatus_EventCompleted EventStatus = 2
)

var EventStatus_name = map[int32]string{
	0: "EventNotEffect",
	1: "EventTriggered",
	2: "EventCompleted",
}

var EventStatus_value = map[string]int32{
	"EventNotEffect": 0,
	"EventTriggered": 1,
	"EventCompleted": 2,
}

func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fbc838f1989132ea, []int{0}
}

type MapStory struct {
	StoryId int64        `protobuf:"varint,1,opt,name=story_id,json=storyId,proto3" json:"story_id,omitempty"`
	Piece   int64        `protobuf:"varint,2,opt,name=piece,proto3" json:"piece,omitempty"`
	Status  RewardStatus `protobuf:"varint,3,opt,name=status,proto3,enum=models.RewardStatus" json:"status,omitempty"`
}

func (m *MapStory) Reset()      { *m = MapStory{} }
func (*MapStory) ProtoMessage() {}
func (*MapStory) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbc838f1989132ea, []int{0}
}
func (m *MapStory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapStory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapStory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapStory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapStory.Merge(m, src)
}
func (m *MapStory) XXX_Size() int {
	return m.Size()
}
func (m *MapStory) XXX_DiscardUnknown() {
	xxx_messageInfo_MapStory.DiscardUnknown(m)
}

var xxx_messageInfo_MapStory proto.InternalMessageInfo

func (m *MapStory) GetStoryId() int64 {
	if m != nil {
		return m.StoryId
	}
	return 0
}

func (m *MapStory) GetPiece() int64 {
	if m != nil {
		return m.Piece
	}
	return 0
}

func (m *MapStory) GetStatus() RewardStatus {
	if m != nil {
		return m.Status
	}
	return RewardStatus_Locked
}

func (*MapStory) XXX_MessageName() string {
	return "models.MapStory"
}

type MapEvent struct {
	EventId int64    `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	MapId   int64    `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	GameId  int64    `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Point   int64    `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	Extra   []string `protobuf:"bytes,5,rep,name=extra,proto3" json:"extra,omitempty"`
}

func (m *MapEvent) Reset()      { *m = MapEvent{} }
func (*MapEvent) ProtoMessage() {}
func (*MapEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbc838f1989132ea, []int{1}
}
func (m *MapEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent.Merge(m, src)
}
func (m *MapEvent) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent proto.InternalMessageInfo

func (m *MapEvent) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MapEvent) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *MapEvent) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MapEvent) GetPoint() int64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *MapEvent) GetExtra() []string {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (*MapEvent) XXX_MessageName() string {
	return "models.MapEvent"
}

type AppointMapEvent struct {
	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	MapId   int64 `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	GameId  int64 `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	IsOver  bool  `protobuf:"varint,4,opt,name=is_over,json=isOver,proto3" json:"is_over,omitempty"`
}

func (m *AppointMapEvent) Reset()      { *m = AppointMapEvent{} }
func (*AppointMapEvent) ProtoMessage() {}
func (*AppointMapEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbc838f1989132ea, []int{2}
}
func (m *AppointMapEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppointMapEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppointMapEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppointMapEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppointMapEvent.Merge(m, src)
}
func (m *AppointMapEvent) XXX_Size() int {
	return m.Size()
}
func (m *AppointMapEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AppointMapEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AppointMapEvent proto.InternalMessageInfo

func (m *AppointMapEvent) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *AppointMapEvent) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *AppointMapEvent) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *AppointMapEvent) GetIsOver() bool {
	if m != nil {
		return m.IsOver
	}
	return false
}

func (*AppointMapEvent) XXX_MessageName() string {
	return "models.AppointMapEvent"
}
func init() {
	proto.RegisterEnum("models.EventStatus", EventStatus_name, EventStatus_value)
	proto.RegisterType((*MapStory)(nil), "models.MapStory")
	proto.RegisterType((*MapEvent)(nil), "models.MapEvent")
	proto.RegisterType((*AppointMapEvent)(nil), "models.AppointMapEvent")
}

func init() { proto.RegisterFile("proto/models/map_event.proto", fileDescriptor_fbc838f1989132ea) }

var fileDescriptor_fbc838f1989132ea = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xb1, 0x8e, 0xda, 0x30,
	0x1c, 0xc6, 0x63, 0x52, 0x02, 0x75, 0x25, 0x8a, 0x2c, 0x2a, 0xd2, 0xaa, 0x72, 0x11, 0x13, 0xaa,
	0x5a, 0x22, 0xb5, 0x4f, 0xd0, 0x56, 0x0c, 0x19, 0x68, 0xa5, 0xd0, 0xa9, 0x0b, 0x4a, 0xe3, 0x3f,
	0xc8, 0x12, 0x8e, 0x23, 0xdb, 0xa4, 0xbd, 0xf1, 0xde, 0xe0, 0x1e, 0xe3, 0x1e, 0x85, 0x91, 0x91,
	0xf1, 0x2e, 0x59, 0x6e, 0xbc, 0x47, 0x38, 0xd9, 0xe1, 0x10, 0xf7, 0x00, 0xb7, 0xe5, 0xf7, 0xcb,
	0x27, 0x7d, 0x9f, 0x2d, 0xe3, 0xf7, 0x85, 0x92, 0x46, 0x46, 0x42, 0x32, 0xd8, 0xe8, 0x48, 0xa4,
	0xc5, 0x12, 0x4a, 0xc8, 0xcd, 0xd4, 0x69, 0x12, 0x34, 0xfe, 0x5d, 0xf8, 0x24, 0x05, 0xf9, 0x56,
	0xe8, 0x26, 0x31, 0xe6, 0xb8, 0x3b, 0x4f, 0x8b, 0x85, 0x91, 0xea, 0x82, 0xbc, 0xc5, 0x5d, 0x6d,
	0x3f, 0x96, 0x9c, 0x85, 0x68, 0x84, 0x26, 0x7e, 0xd2, 0x71, 0x1c, 0x33, 0x32, 0xc0, 0xed, 0x82,
	0x43, 0x06, 0x61, 0xcb, 0xf9, 0x06, 0xc8, 0x27, 0x1c, 0x68, 0x93, 0x9a, 0xad, 0x0e, 0xfd, 0x11,
	0x9a, 0xf4, 0xbe, 0x0c, 0xa6, 0x4d, 0xc3, 0x34, 0x81, 0x7f, 0xa9, 0x62, 0x0b, 0xf7, 0x2f, 0x39,
	0x66, 0xc6, 0x97, 0xc8, 0x75, 0xcd, 0xec, 0x3e, 0xdb, 0xe5, 0x86, 0x9e, 0x75, 0x39, 0x8e, 0x19,
	0x79, 0x83, 0x03, 0x7b, 0x0e, 0xce, 0x1e, 0xcb, 0x44, 0x5a, 0xc4, 0x8c, 0x0c, 0x71, 0x67, 0x9d,
	0x0a, 0xb0, 0xde, 0x77, 0x3e, 0xb0, 0x78, 0xdc, 0x26, 0x79, 0x6e, 0xc2, 0x17, 0xc7, 0x6d, 0x16,
	0xac, 0x85, 0xff, 0x46, 0xa5, 0x61, 0x7b, 0xe4, 0x4f, 0x5e, 0x26, 0x0d, 0x8c, 0xb7, 0xf8, 0xf5,
	0xb7, 0xc2, 0x05, 0x9e, 0x63, 0xc9, 0x10, 0x77, 0xb8, 0x5e, 0xca, 0x12, 0x94, 0xdb, 0xd2, 0x4d,
	0x02, 0xae, 0x7f, 0x95, 0xa0, 0x3e, 0xc6, 0xf8, 0x95, 0x2b, 0x6b, 0x6e, 0x84, 0x10, 0xdc, 0x73,
	0xf8, 0x53, 0x9a, 0xd9, 0x6a, 0x05, 0x99, 0xe9, 0x7b, 0x27, 0xf7, 0x5b, 0xf1, 0xf5, 0x1a, 0x14,
	0xb0, 0x3e, 0x3a, 0xb9, 0x1f, 0x52, 0x14, 0x1b, 0x30, 0xc0, 0xfa, 0xad, 0xef, 0xf3, 0xc3, 0x2d,
	0xf5, 0xae, 0x2b, 0x8a, 0x76, 0x15, 0x45, 0xfb, 0x8a, 0xa2, 0x9b, 0x8a, 0xa2, 0xbb, 0x8a, 0x7a,
	0xf7, 0x15, 0x45, 0x57, 0x35, 0xf5, 0x76, 0x35, 0x45, 0xfb, 0x9a, 0x7a, 0x87, 0x9a, 0x7a, 0x7f,
	0x3e, 0x64, 0x92, 0xe7, 0x9f, 0x35, 0xa8, 0x12, 0x54, 0x94, 0x49, 0x21, 0x64, 0x1e, 0x9d, 0xbf,
	0x85, 0xbf, 0x81, 0xa3, 0xaf, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xa0, 0x4a, 0x8c, 0x48,
	0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapStory.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAppointMapEvent.Get().(proto.Message)
	})
}

var poolMapStory = &sync.Pool{New: func() interface{} { return &MapStory{} }}

func (m *MapStory) ReleasePool() { m.Reset(); poolMapStory.Put(m); m = nil }

var poolMapEvent = &sync.Pool{New: func() interface{} { return &MapEvent{} }}

func (m *MapEvent) ReleasePool() { m.Reset(); poolMapEvent.Put(m); m = nil }

var poolAppointMapEvent = &sync.Pool{New: func() interface{} { return &AppointMapEvent{} }}

func (m *AppointMapEvent) ReleasePool() { m.Reset(); poolAppointMapEvent.Put(m); m = nil }
func (x EventStatus) String() string {
	s, ok := EventStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MapStory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapStory)
	if !ok {
		that2, ok := that.(MapStory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoryId != that1.StoryId {
		return false
	}
	if this.Piece != that1.Piece {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *MapEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent)
	if !ok {
		that2, ok := that.(MapEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.Point != that1.Point {
		return false
	}
	if len(this.Extra) != len(that1.Extra) {
		return false
	}
	for i := range this.Extra {
		if this.Extra[i] != that1.Extra[i] {
			return false
		}
	}
	return true
}
func (this *AppointMapEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppointMapEvent)
	if !ok {
		that2, ok := that.(AppointMapEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.IsOver != that1.IsOver {
		return false
	}
	return true
}
func (m *MapStory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapStory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapStory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Piece != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Piece))
		i--
		dAtA[i] = 0x10
	}
	if m.StoryId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.StoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		for iNdEx := len(m.Extra) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Extra[iNdEx])
			copy(dAtA[i:], m.Extra[iNdEx])
			i = encodeVarintMapEvent(dAtA, i, uint64(len(m.Extra[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Point != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x20
	}
	if m.GameId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x18
	}
	if m.MapId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppointMapEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppointMapEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppointMapEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOver {
		i--
		if m.IsOver {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.GameId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x18
	}
	if m.MapId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MapStory) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.StoryId != 0 {
		w.RawByte('"')
		w.RawString("story_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StoryId))
		needWriteComma = true
	}
	if m.Piece != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("piece")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Piece))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EventId != 0 {
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	if m.Point != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("point")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Point))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("extra")
	w.RawByte('"')
	w.RawByte(':')
	if m.Extra == nil {
		w.RawString("null")
	} else if len(m.Extra) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Extra {
			w.String(v)
			if i != len(m.Extra)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *AppointMapEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EventId != 0 {
		w.RawByte('"')
		w.RawString("event_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EventId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	if m.IsOver {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_over")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsOver)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapStory) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapStory) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapStory) GoString() string {
	return m.String()
}

func (m *MapEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent) GoString() string {
	return m.String()
}

func (m *AppointMapEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *AppointMapEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *AppointMapEvent) GoString() string {
	return m.String()
}

func (m *MapStory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoryId != 0 {
		n += 1 + sovMapEvent(uint64(m.StoryId))
	}
	if m.Piece != 0 {
		n += 1 + sovMapEvent(uint64(m.Piece))
	}
	if m.Status != 0 {
		n += 1 + sovMapEvent(uint64(m.Status))
	}
	return n
}

func (m *MapEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMapEvent(uint64(m.EventId))
	}
	if m.MapId != 0 {
		n += 1 + sovMapEvent(uint64(m.MapId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapEvent(uint64(m.GameId))
	}
	if m.Point != 0 {
		n += 1 + sovMapEvent(uint64(m.Point))
	}
	if len(m.Extra) > 0 {
		for _, s := range m.Extra {
			l = len(s)
			n += 1 + l + sovMapEvent(uint64(l))
		}
	}
	return n
}

func (m *AppointMapEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMapEvent(uint64(m.EventId))
	}
	if m.MapId != 0 {
		n += 1 + sovMapEvent(uint64(m.MapId))
	}
	if m.GameId != 0 {
		n += 1 + sovMapEvent(uint64(m.GameId))
	}
	if m.IsOver {
		n += 2
	}
	return n
}

func sovMapEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapEvent(x uint64) (n int) {
	return sovMapEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MapStory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapStory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapStory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoryId", wireType)
			}
			m.StoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Piece", wireType)
			}
			m.Piece = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Piece |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RewardStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppointMapEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointMapEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointMapEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOver", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOver = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapEvent = fmt.Errorf("proto: unexpected end of group")
)
