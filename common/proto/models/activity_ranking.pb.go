// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/activity_ranking.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActivityRankingType int32

const (
	ActivityRankingType_ActivityRankingType_None   ActivityRankingType = 0
	ActivityRankingType_ActivityRankingType_Repeat ActivityRankingType = 1
)

var ActivityRankingType_name = map[int32]string{
	0: "ActivityRankingType_None",
	1: "ActivityRankingType_Repeat",
}

var ActivityRankingType_value = map[string]int32{
	"ActivityRankingType_None":   0,
	"ActivityRankingType_Repeat": 1,
}

func (ActivityRankingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bdcc9591d13b656f, []int{0}
}

type ActivityRanking struct {
}

func (m *ActivityRanking) Reset()      { *m = ActivityRanking{} }
func (*ActivityRanking) ProtoMessage() {}
func (*ActivityRanking) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdcc9591d13b656f, []int{0}
}
func (m *ActivityRanking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityRanking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityRanking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityRanking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityRanking.Merge(m, src)
}
func (m *ActivityRanking) XXX_Size() int {
	return m.Size()
}
func (m *ActivityRanking) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityRanking.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityRanking proto.InternalMessageInfo

func (*ActivityRanking) XXX_MessageName() string {
	return "models.ActivityRanking"
}

type ActivityRanking_Data struct {
	RoleId     string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Score      int64  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	UpdateTime int64  `protobuf:"varint,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	RankingId  int64  `protobuf:"varint,4,opt,name=ranking_id,json=rankingId,proto3" json:"ranking_id,omitempty"`
	IsOver     bool   `protobuf:"varint,5,opt,name=isOver,proto3" json:"isOver,omitempty"`
}

func (m *ActivityRanking_Data) Reset()      { *m = ActivityRanking_Data{} }
func (*ActivityRanking_Data) ProtoMessage() {}
func (*ActivityRanking_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdcc9591d13b656f, []int{0, 0}
}
func (m *ActivityRanking_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityRanking_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityRanking_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityRanking_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityRanking_Data.Merge(m, src)
}
func (m *ActivityRanking_Data) XXX_Size() int {
	return m.Size()
}
func (m *ActivityRanking_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityRanking_Data.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityRanking_Data proto.InternalMessageInfo

func (m *ActivityRanking_Data) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ActivityRanking_Data) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ActivityRanking_Data) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *ActivityRanking_Data) GetRankingId() int64 {
	if m != nil {
		return m.RankingId
	}
	return 0
}

func (m *ActivityRanking_Data) GetIsOver() bool {
	if m != nil {
		return m.IsOver
	}
	return false
}

func (*ActivityRanking_Data) XXX_MessageName() string {
	return "models.ActivityRanking.Data"
}

type ActivityRanking_Info struct {
	StartTime    int64               `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64               `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DurationTime int64               `protobuf:"varint,3,opt,name=duration_time,json=durationTime,proto3" json:"duration_time,omitempty"`
	RefreshTime  int64               `protobuf:"varint,4,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	Typ          ActivityRankingType `protobuf:"varint,5,opt,name=typ,proto3,enum=models.ActivityRankingType" json:"typ,omitempty"`
	Version      int64               `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *ActivityRanking_Info) Reset()      { *m = ActivityRanking_Info{} }
func (*ActivityRanking_Info) ProtoMessage() {}
func (*ActivityRanking_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdcc9591d13b656f, []int{0, 1}
}
func (m *ActivityRanking_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityRanking_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityRanking_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityRanking_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityRanking_Info.Merge(m, src)
}
func (m *ActivityRanking_Info) XXX_Size() int {
	return m.Size()
}
func (m *ActivityRanking_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityRanking_Info.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityRanking_Info proto.InternalMessageInfo

func (m *ActivityRanking_Info) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ActivityRanking_Info) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ActivityRanking_Info) GetDurationTime() int64 {
	if m != nil {
		return m.DurationTime
	}
	return 0
}

func (m *ActivityRanking_Info) GetRefreshTime() int64 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *ActivityRanking_Info) GetTyp() ActivityRankingType {
	if m != nil {
		return m.Typ
	}
	return ActivityRankingType_ActivityRankingType_None
}

func (m *ActivityRanking_Info) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (*ActivityRanking_Info) XXX_MessageName() string {
	return "models.ActivityRanking.Info"
}

type ActivityRanking_RankInfo struct {
	RoleId    string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RankingId int32  `protobuf:"varint,2,opt,name=ranking_id,json=rankingId,proto3" json:"ranking_id,omitempty"`
	Score     int64  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *ActivityRanking_RankInfo) Reset()      { *m = ActivityRanking_RankInfo{} }
func (*ActivityRanking_RankInfo) ProtoMessage() {}
func (*ActivityRanking_RankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdcc9591d13b656f, []int{0, 2}
}
func (m *ActivityRanking_RankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityRanking_RankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityRanking_RankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityRanking_RankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityRanking_RankInfo.Merge(m, src)
}
func (m *ActivityRanking_RankInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActivityRanking_RankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityRanking_RankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityRanking_RankInfo proto.InternalMessageInfo

func (m *ActivityRanking_RankInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ActivityRanking_RankInfo) GetRankingId() int32 {
	if m != nil {
		return m.RankingId
	}
	return 0
}

func (m *ActivityRanking_RankInfo) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (*ActivityRanking_RankInfo) XXX_MessageName() string {
	return "models.ActivityRanking.RankInfo"
}
func init() {
	proto.RegisterEnum("models.ActivityRankingType", ActivityRankingType_name, ActivityRankingType_value)
	proto.RegisterType((*ActivityRanking)(nil), "models.ActivityRanking")
	proto.RegisterType((*ActivityRanking_Data)(nil), "models.ActivityRanking.Data")
	proto.RegisterType((*ActivityRanking_Info)(nil), "models.ActivityRanking.Info")
	proto.RegisterType((*ActivityRanking_RankInfo)(nil), "models.ActivityRanking.RankInfo")
}

func init() {
	proto.RegisterFile("proto/models/activity_ranking.proto", fileDescriptor_bdcc9591d13b656f)
}

var fileDescriptor_bdcc9591d13b656f = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcf, 0x6e, 0xd3, 0x30,
	0x1c, 0x8e, 0x49, 0x9b, 0x76, 0xbf, 0x0d, 0x98, 0x0c, 0x1a, 0x21, 0x0c, 0xaf, 0xb0, 0x4b, 0x85,
	0xb4, 0x56, 0x82, 0x27, 0x00, 0x71, 0xe9, 0x01, 0x90, 0xc2, 0x0e, 0x88, 0x4b, 0xe5, 0xd5, 0xbf,
	0x82, 0xc5, 0x62, 0x47, 0x8e, 0x17, 0xa9, 0x0f, 0x81, 0xc4, 0x63, 0xf0, 0x28, 0xbb, 0x31, 0x6e,
	0x3d, 0x42, 0x72, 0xe1, 0xc8, 0x23, 0xa0, 0xd8, 0x01, 0xa5, 0xa8, 0x3b, 0x7e, 0x7f, 0xf2, 0xe9,
	0xfb, 0x7d, 0x0e, 0x1c, 0xe7, 0x46, 0x5b, 0x3d, 0xcd, 0xb4, 0xc0, 0xf3, 0x62, 0xca, 0x17, 0x56,
	0x96, 0xd2, 0xae, 0xe6, 0x86, 0xab, 0x4f, 0x52, 0x7d, 0x98, 0x38, 0x95, 0x46, 0x5e, 0x4e, 0x0e,
	0x36, 0xcc, 0x67, 0xbc, 0xd5, 0x93, 0xc3, 0x0d, 0x7e, 0xa9, 0x4d, 0xc6, 0xad, 0xd4, 0xca, 0xab,
	0x8f, 0xbf, 0x85, 0x70, 0xfb, 0x79, 0x1b, 0x9c, 0xfa, 0xdc, 0xe4, 0x33, 0x81, 0xde, 0x4b, 0x6e,
	0x39, 0xbd, 0x07, 0x03, 0xa3, 0xcf, 0x71, 0x2e, 0x45, 0x4c, 0x46, 0x64, 0xbc, 0x93, 0x46, 0x0d,
	0x9c, 0x09, 0x7a, 0x17, 0xfa, 0xc5, 0x42, 0x1b, 0x8c, 0x6f, 0x8c, 0xc8, 0x38, 0x4c, 0x3d, 0xa0,
	0x47, 0xb0, 0x7b, 0x91, 0x0b, 0x6e, 0x71, 0x6e, 0x65, 0x86, 0x71, 0xe8, 0x34, 0xf0, 0xd4, 0xa9,
	0xcc, 0x90, 0x3e, 0x04, 0x68, 0xbb, 0x37, 0x91, 0x3d, 0xa7, 0xef, 0xb4, 0xcc, 0x4c, 0xd0, 0x03,
	0x88, 0x64, 0xf1, 0xa6, 0x44, 0x13, 0xf7, 0x47, 0x64, 0x3c, 0x4c, 0x5b, 0x94, 0x7c, 0x27, 0xd0,
	0x9b, 0xa9, 0xa5, 0x6e, 0xbe, 0x2f, 0x2c, 0x37, 0xd6, 0xe7, 0x13, 0xff, 0xbd, 0x63, 0x5c, 0xfc,
	0x7d, 0x18, 0xa2, 0x12, 0x5e, 0xf4, 0xc5, 0x06, 0xa8, 0x84, 0x93, 0x8e, 0xe1, 0xa6, 0xb8, 0x30,
	0xee, 0xf0, 0x6e, 0xb9, 0xbd, 0xbf, 0xa4, 0x33, 0x3d, 0x82, 0x3d, 0x83, 0x4b, 0x83, 0xc5, 0x47,
	0xef, 0xf1, 0x05, 0x77, 0x5b, 0xce, 0x59, 0x4e, 0x20, 0xb4, 0xab, 0xdc, 0xf5, 0xbb, 0xf5, 0xf4,
	0xc1, 0xc4, 0x8f, 0x3a, 0xf9, 0x6f, 0xc0, 0xd3, 0x55, 0x8e, 0x69, 0xe3, 0xa3, 0x31, 0x0c, 0x4a,
	0x34, 0x85, 0xd4, 0x2a, 0x8e, 0x7c, 0xa1, 0x16, 0x26, 0xef, 0x60, 0xd8, 0xb8, 0xdd, 0x59, 0xd7,
	0xce, 0xbc, 0xb9, 0x57, 0x73, 0x52, 0xbf, 0xbb, 0xd7, 0xbf, 0x57, 0x08, 0x3b, 0xaf, 0xf0, 0xe4,
	0x2d, 0xdc, 0xd9, 0xd2, 0x87, 0x1e, 0x42, 0xbc, 0x85, 0x9e, 0xbf, 0xd6, 0x0a, 0xf7, 0x03, 0xca,
	0x20, 0xd9, 0xa6, 0xa6, 0x98, 0x23, 0xb7, 0xfb, 0xe4, 0xc5, 0xab, 0xf5, 0x4f, 0x16, 0x7c, 0xad,
	0x18, 0xb9, 0xac, 0x18, 0xb9, 0xaa, 0x18, 0xf9, 0x51, 0x31, 0xf2, 0xab, 0x62, 0xc1, 0xef, 0x8a,
	0x91, 0x2f, 0x35, 0x0b, 0x2e, 0x6b, 0x46, 0xae, 0x6a, 0x16, 0xac, 0x6b, 0x16, 0xbc, 0x3f, 0x5a,
	0x68, 0xa9, 0x4e, 0x0a, 0x34, 0x25, 0x9a, 0xe9, 0x42, 0x67, 0x99, 0x56, 0xd3, 0xee, 0x5f, 0x78,
	0x16, 0x39, 0xf4, 0xec, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0x6c, 0xf0, 0x66, 0xe1, 0x02,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolActivityRanking.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolActivityRanking_Data.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolActivityRanking_Info.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolActivityRanking_RankInfo.Get().(proto.Message)
	})
}

var poolActivityRanking = &sync.Pool{New: func() interface{} { return &ActivityRanking{} }}

func (m *ActivityRanking) ReleasePool() { m.Reset(); poolActivityRanking.Put(m); m = nil }

var poolActivityRanking_Data = &sync.Pool{New: func() interface{} { return &ActivityRanking_Data{} }}

func (m *ActivityRanking_Data) ReleasePool() { m.Reset(); poolActivityRanking_Data.Put(m); m = nil }

var poolActivityRanking_Info = &sync.Pool{New: func() interface{} { return &ActivityRanking_Info{} }}

func (m *ActivityRanking_Info) ReleasePool() { m.Reset(); poolActivityRanking_Info.Put(m); m = nil }

var poolActivityRanking_RankInfo = &sync.Pool{New: func() interface{} { return &ActivityRanking_RankInfo{} }}

func (m *ActivityRanking_RankInfo) ReleasePool() {
	m.Reset()
	poolActivityRanking_RankInfo.Put(m)
	m = nil
}
func (x ActivityRankingType) String() string {
	s, ok := ActivityRankingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ActivityRanking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityRanking)
	if !ok {
		that2, ok := that.(ActivityRanking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ActivityRanking_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityRanking_Data)
	if !ok {
		that2, ok := that.(ActivityRanking_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.UpdateTime != that1.UpdateTime {
		return false
	}
	if this.RankingId != that1.RankingId {
		return false
	}
	if this.IsOver != that1.IsOver {
		return false
	}
	return true
}
func (this *ActivityRanking_Info) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityRanking_Info)
	if !ok {
		that2, ok := that.(ActivityRanking_Info)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.DurationTime != that1.DurationTime {
		return false
	}
	if this.RefreshTime != that1.RefreshTime {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *ActivityRanking_RankInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityRanking_RankInfo)
	if !ok {
		that2, ok := that.(ActivityRanking_RankInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.RankingId != that1.RankingId {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	return true
}
func (m *ActivityRanking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityRanking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityRanking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ActivityRanking_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityRanking_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityRanking_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOver {
		i--
		if m.IsOver {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.RankingId != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.RankingId))
		i--
		dAtA[i] = 0x20
	}
	if m.UpdateTime != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Score != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivityRanking(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityRanking_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityRanking_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityRanking_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if m.Typ != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x28
	}
	if m.RefreshTime != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.RefreshTime))
		i--
		dAtA[i] = 0x20
	}
	if m.DurationTime != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.DurationTime))
		i--
		dAtA[i] = 0x18
	}
	if m.EndTime != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityRanking_RankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityRanking_RankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityRanking_RankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x18
	}
	if m.RankingId != 0 {
		i = encodeVarintActivityRanking(dAtA, i, uint64(m.RankingId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivityRanking(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActivityRanking(dAtA []byte, offset int, v uint64) int {
	offset -= sovActivityRanking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *ActivityRanking) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *ActivityRanking_Data) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	if m.UpdateTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("update_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UpdateTime))
		needWriteComma = true
	}
	if m.RankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankingId))
		needWriteComma = true
	}
	if m.IsOver {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("isOver")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsOver)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ActivityRanking_Info) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.StartTime != 0 {
		w.RawByte('"')
		w.RawString("start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartTime))
		needWriteComma = true
	}
	if m.EndTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	if m.DurationTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("duration_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DurationTime))
		needWriteComma = true
	}
	if m.RefreshTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RefreshTime))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Version != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("version")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Version))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ActivityRanking_RankInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.RankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankingId))
		needWriteComma = true
	}
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ActivityRanking) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ActivityRanking) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ActivityRanking) GoString() string {
	return m.String()
}

func (m *ActivityRanking_Data) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ActivityRanking_Data) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ActivityRanking_Data) GoString() string {
	return m.String()
}

func (m *ActivityRanking_Info) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ActivityRanking_Info) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ActivityRanking_Info) GoString() string {
	return m.String()
}

func (m *ActivityRanking_RankInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ActivityRanking_RankInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ActivityRanking_RankInfo) GoString() string {
	return m.String()
}

func (m *ActivityRanking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ActivityRanking_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivityRanking(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovActivityRanking(uint64(m.Score))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovActivityRanking(uint64(m.UpdateTime))
	}
	if m.RankingId != 0 {
		n += 1 + sovActivityRanking(uint64(m.RankingId))
	}
	if m.IsOver {
		n += 2
	}
	return n
}

func (m *ActivityRanking_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovActivityRanking(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovActivityRanking(uint64(m.EndTime))
	}
	if m.DurationTime != 0 {
		n += 1 + sovActivityRanking(uint64(m.DurationTime))
	}
	if m.RefreshTime != 0 {
		n += 1 + sovActivityRanking(uint64(m.RefreshTime))
	}
	if m.Typ != 0 {
		n += 1 + sovActivityRanking(uint64(m.Typ))
	}
	if m.Version != 0 {
		n += 1 + sovActivityRanking(uint64(m.Version))
	}
	return n
}

func (m *ActivityRanking_RankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivityRanking(uint64(l))
	}
	if m.RankingId != 0 {
		n += 1 + sovActivityRanking(uint64(m.RankingId))
	}
	if m.Score != 0 {
		n += 1 + sovActivityRanking(uint64(m.Score))
	}
	return n
}

func sovActivityRanking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActivityRanking(x uint64) (n int) {
	return sovActivityRanking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActivityRanking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityRanking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityRanking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityRanking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipActivityRanking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityRanking_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityRanking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityRanking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingId", wireType)
			}
			m.RankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOver", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOver = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipActivityRanking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityRanking_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityRanking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationTime", wireType)
			}
			m.DurationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= ActivityRankingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityRanking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityRanking_RankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityRanking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityRanking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingId", wireType)
			}
			m.RankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivityRanking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActivityRanking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActivityRanking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActivityRanking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActivityRanking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActivityRanking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActivityRanking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActivityRanking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActivityRanking = fmt.Errorf("proto: unexpected end of group")
)
