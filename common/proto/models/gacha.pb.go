// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/gacha.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Gacha struct {
	GachaId    int64 `protobuf:"varint,1,opt,name=gacha_id,json=gachaId,proto3" json:"gacha_id,omitempty"`
	FreeCount  int64 `protobuf:"varint,2,opt,name=free_count,json=freeCount,proto3" json:"free_count,omitempty"`
	DailyCount int64 `protobuf:"varint,3,opt,name=daily_count,json=dailyCount,proto3" json:"daily_count,omitempty"`
	TotalCount int64 `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	RefreshAt  int64 `protobuf:"varint,5,opt,name=refresh_at,json=refreshAt,proto3" json:"refresh_at,omitempty"`
}

func (m *Gacha) Reset()      { *m = Gacha{} }
func (*Gacha) ProtoMessage() {}
func (*Gacha) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9af26d7cf45b743, []int{0}
}
func (m *Gacha) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gacha) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gacha.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gacha) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gacha.Merge(m, src)
}
func (m *Gacha) XXX_Size() int {
	return m.Size()
}
func (m *Gacha) XXX_DiscardUnknown() {
	xxx_messageInfo_Gacha.DiscardUnknown(m)
}

var xxx_messageInfo_Gacha proto.InternalMessageInfo

func (m *Gacha) GetGachaId() int64 {
	if m != nil {
		return m.GachaId
	}
	return 0
}

func (m *Gacha) GetFreeCount() int64 {
	if m != nil {
		return m.FreeCount
	}
	return 0
}

func (m *Gacha) GetDailyCount() int64 {
	if m != nil {
		return m.DailyCount
	}
	return 0
}

func (m *Gacha) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *Gacha) GetRefreshAt() int64 {
	if m != nil {
		return m.RefreshAt
	}
	return 0
}

func (*Gacha) XXX_MessageName() string {
	return "models.Gacha"
}

type GachaUnlock struct {
	GachaId int64          `protobuf:"varint,1,opt,name=gacha_id,json=gachaId,proto3" json:"gacha_id,omitempty"`
	Unlock  map[int64]bool `protobuf:"bytes,2,rep,name=unlock,proto3" json:"unlock,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GachaUnlock) Reset()      { *m = GachaUnlock{} }
func (*GachaUnlock) ProtoMessage() {}
func (*GachaUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9af26d7cf45b743, []int{1}
}
func (m *GachaUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GachaUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GachaUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GachaUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GachaUnlock.Merge(m, src)
}
func (m *GachaUnlock) XXX_Size() int {
	return m.Size()
}
func (m *GachaUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_GachaUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_GachaUnlock proto.InternalMessageInfo

func (m *GachaUnlock) GetGachaId() int64 {
	if m != nil {
		return m.GachaId
	}
	return 0
}

func (m *GachaUnlock) GetUnlock() map[int64]bool {
	if m != nil {
		return m.Unlock
	}
	return nil
}

func (*GachaUnlock) XXX_MessageName() string {
	return "models.GachaUnlock"
}
func init() {
	proto.RegisterType((*Gacha)(nil), "models.Gacha")
	proto.RegisterType((*GachaUnlock)(nil), "models.GachaUnlock")
	proto.RegisterMapType((map[int64]bool)(nil), "models.GachaUnlock.UnlockEntry")
}

func init() { proto.RegisterFile("proto/models/gacha.proto", fileDescriptor_a9af26d7cf45b743) }

var fileDescriptor_a9af26d7cf45b743 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xbf, 0x4e, 0xeb, 0x30,
	0x14, 0x87, 0xe3, 0xe6, 0xb6, 0xb7, 0x9c, 0x2c, 0xc8, 0x62, 0x08, 0x95, 0xea, 0x56, 0x9d, 0xba,
	0x90, 0x48, 0x30, 0xf0, 0x67, 0x03, 0x84, 0x10, 0x03, 0x4b, 0x25, 0x16, 0x96, 0xca, 0x24, 0x2e,
	0xad, 0x9a, 0xd8, 0xc8, 0x71, 0x2a, 0xe5, 0x2d, 0x78, 0x00, 0x26, 0x26, 0x1e, 0xa5, 0x63, 0xc7,
	0x8e, 0xe0, 0x2c, 0x8c, 0x3c, 0x02, 0x8a, 0x1d, 0xa1, 0xb0, 0x30, 0x25, 0xe7, 0x3b, 0xdf, 0xcf,
	0x3e, 0x47, 0x06, 0xff, 0x49, 0x0a, 0x25, 0xc2, 0x54, 0xc4, 0x2c, 0xc9, 0xc2, 0x47, 0x1a, 0xcd,
	0x69, 0x60, 0x10, 0xee, 0x58, 0xd6, 0xfb, 0x6d, 0x30, 0x9e, 0xa7, 0x99, 0x35, 0x46, 0xaf, 0x08,
	0xda, 0xd7, 0x55, 0x02, 0xef, 0x43, 0xd7, 0x44, 0xa7, 0x8b, 0xd8, 0x47, 0x43, 0x34, 0x76, 0x27,
	0xff, 0x4d, 0x7d, 0x13, 0xe3, 0x3e, 0xc0, 0x4c, 0x32, 0x36, 0x8d, 0x44, 0xce, 0x95, 0xdf, 0x32,
	0xcd, 0x9d, 0x8a, 0x5c, 0x56, 0x00, 0x0f, 0xc0, 0x8b, 0xe9, 0x22, 0x29, 0xea, 0xbe, 0x6b, 0xfa,
	0x60, 0xd0, 0x8f, 0xa0, 0x84, 0xa2, 0x49, 0x2d, 0xfc, 0xb3, 0x82, 0x41, 0x56, 0xe8, 0x03, 0x48,
	0x36, 0x93, 0x2c, 0x9b, 0x4f, 0xa9, 0xf2, 0xdb, 0xf6, 0x82, 0x9a, 0x9c, 0xab, 0xd1, 0x0b, 0x02,
	0xcf, 0x0c, 0x79, 0xc7, 0x13, 0x11, 0x2d, 0xff, 0x1a, 0xf5, 0x18, 0x3a, 0xb9, 0x91, 0xfc, 0xd6,
	0xd0, 0x1d, 0x7b, 0x87, 0x83, 0xc0, 0x2e, 0x1d, 0x34, 0xf2, 0x81, 0xfd, 0x5c, 0x71, 0x25, 0x8b,
	0x49, 0xad, 0xf7, 0x4e, 0xc1, 0x6b, 0x60, 0xbc, 0x0b, 0xee, 0x92, 0x15, 0xf5, 0xe9, 0xd5, 0x2f,
	0xde, 0x83, 0xf6, 0x8a, 0x26, 0x39, 0x33, 0xfb, 0x77, 0x27, 0xb6, 0x38, 0x6b, 0x9d, 0xa0, 0x8b,
	0xdb, 0xed, 0x07, 0x71, 0xde, 0x34, 0x41, 0x6b, 0x4d, 0xd0, 0x46, 0x13, 0xf4, 0xae, 0x09, 0xfa,
	0xd4, 0xc4, 0xf9, 0xd2, 0x04, 0x3d, 0x97, 0xc4, 0x59, 0x97, 0x04, 0x6d, 0x4a, 0xe2, 0x6c, 0x4b,
	0xe2, 0xdc, 0x0f, 0x22, 0xb1, 0xe0, 0x07, 0x19, 0x93, 0x2b, 0x26, 0xc3, 0x48, 0xa4, 0xa9, 0xe0,
	0x61, 0xf3, 0x79, 0x1e, 0x3a, 0xa6, 0x3a, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xca, 0x6c, 0x5f,
	0xf6, 0xd7, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGacha.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGachaUnlock.Get().(proto.Message)
	})
}

var poolGacha = &sync.Pool{New: func() interface{} { return &Gacha{} }}

func (m *Gacha) ReleasePool() { m.Reset(); poolGacha.Put(m); m = nil }

var poolGachaUnlock = &sync.Pool{New: func() interface{} { return &GachaUnlock{} }}

func (m *GachaUnlock) ReleasePool() { m.Reset(); poolGachaUnlock.Put(m); m = nil }
func (this *Gacha) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gacha)
	if !ok {
		that2, ok := that.(Gacha)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GachaId != that1.GachaId {
		return false
	}
	if this.FreeCount != that1.FreeCount {
		return false
	}
	if this.DailyCount != that1.DailyCount {
		return false
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	if this.RefreshAt != that1.RefreshAt {
		return false
	}
	return true
}
func (this *GachaUnlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GachaUnlock)
	if !ok {
		that2, ok := that.(GachaUnlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GachaId != that1.GachaId {
		return false
	}
	if len(this.Unlock) != len(that1.Unlock) {
		return false
	}
	for i := range this.Unlock {
		if this.Unlock[i] != that1.Unlock[i] {
			return false
		}
	}
	return true
}
func (m *Gacha) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gacha) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gacha) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefreshAt != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.RefreshAt))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalCount != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x20
	}
	if m.DailyCount != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.DailyCount))
		i--
		dAtA[i] = 0x18
	}
	if m.FreeCount != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.FreeCount))
		i--
		dAtA[i] = 0x10
	}
	if m.GachaId != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.GachaId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GachaUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GachaUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GachaUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unlock) > 0 {
		for k := range m.Unlock {
			v := m.Unlock[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintGacha(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGacha(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.GachaId != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.GachaId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGacha(dAtA []byte, offset int, v uint64) int {
	offset -= sovGacha(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Gacha) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GachaId != 0 {
		w.RawByte('"')
		w.RawString("gacha_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GachaId))
		needWriteComma = true
	}
	if m.FreeCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("free_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeCount))
		needWriteComma = true
	}
	if m.DailyCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("daily_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DailyCount))
		needWriteComma = true
	}
	if m.TotalCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalCount))
		needWriteComma = true
	}
	if m.RefreshAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("refresh_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RefreshAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GachaUnlock) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GachaId != 0 {
		w.RawByte('"')
		w.RawString("gacha_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GachaId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("unlock")
	w.RawByte('"')
	w.RawByte(':')
	if m.Unlock == nil {
		w.RawString("null")
	} else if len(m.Unlock) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlUnlock := len(m.Unlock)
		for k, v := range m.Unlock {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlUnlock--
			if mlUnlock != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Gacha) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Gacha) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Gacha) GoString() string {
	return m.String()
}

func (m *GachaUnlock) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GachaUnlock) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GachaUnlock) GoString() string {
	return m.String()
}

func (m *Gacha) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GachaId != 0 {
		n += 1 + sovGacha(uint64(m.GachaId))
	}
	if m.FreeCount != 0 {
		n += 1 + sovGacha(uint64(m.FreeCount))
	}
	if m.DailyCount != 0 {
		n += 1 + sovGacha(uint64(m.DailyCount))
	}
	if m.TotalCount != 0 {
		n += 1 + sovGacha(uint64(m.TotalCount))
	}
	if m.RefreshAt != 0 {
		n += 1 + sovGacha(uint64(m.RefreshAt))
	}
	return n
}

func (m *GachaUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GachaId != 0 {
		n += 1 + sovGacha(uint64(m.GachaId))
	}
	if len(m.Unlock) > 0 {
		for k, v := range m.Unlock {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGacha(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovGacha(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGacha(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGacha(x uint64) (n int) {
	return sovGacha(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Gacha) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gacha: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gacha: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GachaId", wireType)
			}
			m.GachaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GachaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeCount", wireType)
			}
			m.FreeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyCount", wireType)
			}
			m.DailyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshAt", wireType)
			}
			m.RefreshAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GachaUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GachaUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GachaUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GachaId", wireType)
			}
			m.GachaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GachaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGacha
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGacha
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unlock == nil {
				m.Unlock = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGacha
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGacha
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGacha
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGacha(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGacha
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Unlock[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGacha(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGacha
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGacha
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGacha
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGacha        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGacha          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGacha = fmt.Errorf("proto: unexpected end of group")
)
