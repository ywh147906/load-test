// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/shop.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ShopDetail struct {
	Good     *Item           `protobuf:"bytes,1,opt,name=good,proto3" json:"good,omitempty"`
	IsSale   bool            `protobuf:"varint,2,opt,name=is_sale,json=isSale,proto3" json:"is_sale,omitempty"`
	Cost     map[int64]int64 `protobuf:"bytes,3,rep,name=cost,proto3" json:"cost,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Discount int64           `protobuf:"varint,4,opt,name=discount,proto3" json:"discount,omitempty"`
}

func (m *ShopDetail) Reset()      { *m = ShopDetail{} }
func (*ShopDetail) ProtoMessage() {}
func (*ShopDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b4c3cab35f603f3, []int{0}
}
func (m *ShopDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShopDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShopDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShopDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShopDetail.Merge(m, src)
}
func (m *ShopDetail) XXX_Size() int {
	return m.Size()
}
func (m *ShopDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ShopDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ShopDetail proto.InternalMessageInfo

func (m *ShopDetail) GetGood() *Item {
	if m != nil {
		return m.Good
	}
	return nil
}

func (m *ShopDetail) GetIsSale() bool {
	if m != nil {
		return m.IsSale
	}
	return false
}

func (m *ShopDetail) GetCost() map[int64]int64 {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *ShopDetail) GetDiscount() int64 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (*ShopDetail) XXX_MessageName() string {
	return "models.ShopDetail"
}

type TypeShopList struct {
	List []*ShopDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *TypeShopList) Reset()      { *m = TypeShopList{} }
func (*TypeShopList) ProtoMessage() {}
func (*TypeShopList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b4c3cab35f603f3, []int{1}
}
func (m *TypeShopList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypeShopList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypeShopList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypeShopList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeShopList.Merge(m, src)
}
func (m *TypeShopList) XXX_Size() int {
	return m.Size()
}
func (m *TypeShopList) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeShopList.DiscardUnknown(m)
}

var xxx_messageInfo_TypeShopList proto.InternalMessageInfo

func (m *TypeShopList) GetList() []*ShopDetail {
	if m != nil {
		return m.List
	}
	return nil
}

func (*TypeShopList) XXX_MessageName() string {
	return "models.TypeShopList"
}
func init() {
	proto.RegisterType((*ShopDetail)(nil), "models.ShopDetail")
	proto.RegisterMapType((map[int64]int64)(nil), "models.ShopDetail.CostEntry")
	proto.RegisterType((*TypeShopList)(nil), "models.TypeShopList")
}

func init() { proto.RegisterFile("proto/models/shop.proto", fileDescriptor_9b4c3cab35f603f3) }

var fileDescriptor_9b4c3cab35f603f3 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0xf3, 0x36, 0xb1, 0xd6, 0x6b, 0x07, 0x39, 0xc4, 0x86, 0x22, 0x67, 0xe8, 0x20, 0x59,
	0x4c, 0xa4, 0x82, 0x8a, 0xa3, 0x7f, 0x06, 0x41, 0x97, 0xd4, 0xc9, 0x45, 0xd2, 0xf4, 0x68, 0x0f,
	0x93, 0xbc, 0x21, 0x77, 0x2d, 0xf4, 0x5b, 0xf8, 0x31, 0xfc, 0x28, 0x9d, 0xa4, 0x63, 0x47, 0x4d,
	0x16, 0x47, 0x3f, 0x82, 0xf4, 0x82, 0x55, 0x71, 0xbb, 0xe7, 0x7d, 0x7e, 0x77, 0xf7, 0xe3, 0x25,
	0xed, 0x2c, 0x47, 0x85, 0x7e, 0x82, 0x43, 0x1e, 0x4b, 0x5f, 0x8e, 0x31, 0xf3, 0xf4, 0x84, 0xd6,
	0xab, 0x51, 0x67, 0xf7, 0x0f, 0x30, 0x08, 0x47, 0x55, 0xdf, 0x7d, 0x05, 0x42, 0xfa, 0x63, 0xcc,
	0xae, 0xb8, 0x0a, 0x45, 0x4c, 0x1d, 0x62, 0x8d, 0x10, 0x87, 0x36, 0x38, 0xe0, 0x36, 0x7b, 0x2d,
	0xaf, 0xe2, 0xbd, 0x1b, 0xc5, 0x93, 0x40, 0x37, 0xb4, 0x4d, 0x36, 0x85, 0x7c, 0x94, 0x61, 0xcc,
	0xed, 0x9a, 0x03, 0x6e, 0x23, 0xa8, 0x0b, 0xd9, 0x0f, 0x63, 0x4e, 0x8f, 0x88, 0x15, 0xa1, 0x54,
	0xb6, 0xe9, 0x98, 0x6e, 0xb3, 0xb7, 0xf7, 0x7d, 0xf5, 0xe7, 0x71, 0xef, 0x12, 0xa5, 0xba, 0x4e,
	0x55, 0x3e, 0x0b, 0x34, 0x49, 0x3b, 0xa4, 0x31, 0x14, 0x32, 0xc2, 0x49, 0xaa, 0x6c, 0xcb, 0x01,
	0xd7, 0x0c, 0xd6, 0xb9, 0x73, 0x4a, 0xb6, 0xd6, 0x38, 0xdd, 0x26, 0xe6, 0x13, 0x9f, 0x69, 0x29,
	0x33, 0x58, 0x1d, 0xe9, 0x0e, 0xd9, 0x98, 0x86, 0xf1, 0xa4, 0x72, 0x30, 0x83, 0x2a, 0x9c, 0xd7,
	0xce, 0xa0, 0x7b, 0x42, 0x5a, 0xf7, 0xb3, 0x8c, 0xaf, 0xbe, 0xbd, 0x15, 0x52, 0xd1, 0x03, 0x62,
	0xc5, 0x42, 0x2a, 0x1b, 0xb4, 0x16, 0xfd, 0xaf, 0x15, 0xe8, 0xfe, 0xe2, 0x6e, 0xf9, 0xce, 0x8c,
	0x97, 0x82, 0xc1, 0xbc, 0x60, 0xb0, 0x28, 0x18, 0xbc, 0x15, 0x0c, 0x3e, 0x0a, 0x66, 0x7c, 0x16,
	0x0c, 0x9e, 0x4b, 0x66, 0xcc, 0x4b, 0x06, 0x8b, 0x92, 0x19, 0xcb, 0x92, 0x19, 0x0f, 0xfb, 0x11,
	0x8a, 0xf4, 0x50, 0xf2, 0x7c, 0xca, 0x73, 0x3f, 0xc2, 0x24, 0xc1, 0xd4, 0xff, 0xbd, 0xe1, 0x41,
	0x5d, 0xa7, 0xe3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x18, 0x61, 0x49, 0x99, 0x01, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolShopDetail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTypeShopList.Get().(proto.Message)
	})
}

var poolShopDetail = &sync.Pool{New: func() interface{} { return &ShopDetail{} }}

func (m *ShopDetail) ReleasePool() { m.Reset(); poolShopDetail.Put(m); m = nil }

var poolTypeShopList = &sync.Pool{New: func() interface{} { return &TypeShopList{} }}

func (m *TypeShopList) ReleasePool() { m.Reset(); poolTypeShopList.Put(m); m = nil }
func (this *ShopDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShopDetail)
	if !ok {
		that2, ok := that.(ShopDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Good.Equal(that1.Good) {
		return false
	}
	if this.IsSale != that1.IsSale {
		return false
	}
	if len(this.Cost) != len(that1.Cost) {
		return false
	}
	for i := range this.Cost {
		if this.Cost[i] != that1.Cost[i] {
			return false
		}
	}
	if this.Discount != that1.Discount {
		return false
	}
	return true
}
func (this *TypeShopList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeShopList)
	if !ok {
		that2, ok := that.(TypeShopList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (m *ShopDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShopDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Discount != 0 {
		i = encodeVarintShop(dAtA, i, uint64(m.Discount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Cost) > 0 {
		for k := range m.Cost {
			v := m.Cost[k]
			baseI := i
			i = encodeVarintShop(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintShop(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintShop(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsSale {
		i--
		if m.IsSale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Good != nil {
		{
			size, err := m.Good.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TypeShopList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeShopList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypeShopList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShop(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintShop(dAtA []byte, offset int, v uint64) int {
	offset -= sovShop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *ShopDetail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("good")
	w.RawByte('"')
	w.RawByte(':')
	m.Good.JsonBytes(w)
	needWriteComma = true
	if m.IsSale {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_sale")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSale)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("cost")
	w.RawByte('"')
	w.RawByte(':')
	if m.Cost == nil {
		w.RawString("null")
	} else if len(m.Cost) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCost := len(m.Cost)
		for k, v := range m.Cost {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCost--
			if mlCost != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Discount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("discount")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Discount))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TypeShopList) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("list")
	w.RawByte('"')
	w.RawByte(':')
	if m.List == nil {
		w.RawString("null")
	} else if len(m.List) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.List {
			v.JsonBytes(w)
			if i != len(m.List)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ShopDetail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ShopDetail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ShopDetail) GoString() string {
	return m.String()
}

func (m *TypeShopList) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TypeShopList) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TypeShopList) GoString() string {
	return m.String()
}

func (m *ShopDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Good != nil {
		l = m.Good.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	if m.IsSale {
		n += 2
	}
	if len(m.Cost) > 0 {
		for k, v := range m.Cost {
			_ = k
			_ = v
			mapEntrySize := 1 + sovShop(uint64(k)) + 1 + sovShop(uint64(v))
			n += mapEntrySize + 1 + sovShop(uint64(mapEntrySize))
		}
	}
	if m.Discount != 0 {
		n += 1 + sovShop(uint64(m.Discount))
	}
	return n
}

func (m *TypeShopList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovShop(uint64(l))
		}
	}
	return n
}

func sovShop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShop(x uint64) (n int) {
	return sovShop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShopDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Good", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Good == nil {
				m.Good = &Item{}
			}
			if err := m.Good.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSale = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cost == nil {
				m.Cost = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipShop(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthShop
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Cost[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			m.Discount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeShopList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeShopList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeShopList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ShopDetail{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShop = fmt.Errorf("proto: unexpected end of group")
)
