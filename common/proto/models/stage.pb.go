// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/stage.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StageDetail struct {
	StageId  int64 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	IsUnlock bool  `protobuf:"varint,2,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
}

func (m *StageDetail) Reset()      { *m = StageDetail{} }
func (*StageDetail) ProtoMessage() {}
func (*StageDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00b5e8ab61d2d935, []int{0}
}
func (m *StageDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StageDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StageDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StageDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StageDetail.Merge(m, src)
}
func (m *StageDetail) XXX_Size() int {
	return m.Size()
}
func (m *StageDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_StageDetail.DiscardUnknown(m)
}

var xxx_messageInfo_StageDetail proto.InternalMessageInfo

func (m *StageDetail) GetStageId() int64 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *StageDetail) GetIsUnlock() bool {
	if m != nil {
		return m.IsUnlock
	}
	return false
}

func (*StageDetail) XXX_MessageName() string {
	return "models.StageDetail"
}

type StageExplore struct {
	StageId int64           `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Degree  int64           `protobuf:"varint,2,opt,name=degree,proto3" json:"degree,omitempty"`
	Explore map[int64]int64 `protobuf:"bytes,3,rep,name=explore,proto3" json:"explore,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Status  RewardStatus    `protobuf:"varint,4,opt,name=status,proto3,enum=models.RewardStatus" json:"status,omitempty"`
}

func (m *StageExplore) Reset()      { *m = StageExplore{} }
func (*StageExplore) ProtoMessage() {}
func (*StageExplore) Descriptor() ([]byte, []int) {
	return fileDescriptor_00b5e8ab61d2d935, []int{1}
}
func (m *StageExplore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StageExplore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StageExplore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StageExplore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StageExplore.Merge(m, src)
}
func (m *StageExplore) XXX_Size() int {
	return m.Size()
}
func (m *StageExplore) XXX_DiscardUnknown() {
	xxx_messageInfo_StageExplore.DiscardUnknown(m)
}

var xxx_messageInfo_StageExplore proto.InternalMessageInfo

func (m *StageExplore) GetStageId() int64 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *StageExplore) GetDegree() int64 {
	if m != nil {
		return m.Degree
	}
	return 0
}

func (m *StageExplore) GetExplore() map[int64]int64 {
	if m != nil {
		return m.Explore
	}
	return nil
}

func (m *StageExplore) GetStatus() RewardStatus {
	if m != nil {
		return m.Status
	}
	return RewardStatus_Locked
}

func (*StageExplore) XXX_MessageName() string {
	return "models.StageExplore"
}
func init() {
	proto.RegisterType((*StageDetail)(nil), "models.StageDetail")
	proto.RegisterType((*StageExplore)(nil), "models.StageExplore")
	proto.RegisterMapType((map[int64]int64)(nil), "models.StageExplore.ExploreEntry")
}

func init() { proto.RegisterFile("proto/models/stage.proto", fileDescriptor_00b5e8ab61d2d935) }

var fileDescriptor_00b5e8ab61d2d935 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xc2, 0x40,
	0x18, 0xc7, 0xfb, 0x51, 0x2d, 0x78, 0x10, 0x63, 0x2e, 0xc4, 0x54, 0x4c, 0xce, 0xca, 0xd4, 0x41,
	0xdb, 0x04, 0x17, 0x83, 0x9b, 0x91, 0xc1, 0xc1, 0xa5, 0xc4, 0xc5, 0x85, 0x54, 0xfa, 0x85, 0x34,
	0xb4, 0x3d, 0x72, 0xd7, 0xa2, 0xbc, 0x85, 0x8f, 0xe1, 0xa3, 0x30, 0x32, 0x32, 0x6a, 0xbb, 0x30,
	0xfa, 0x08, 0x86, 0x6b, 0x49, 0x70, 0x71, 0xba, 0xfb, 0x7f, 0xf7, 0xfd, 0x7e, 0xf9, 0x27, 0x47,
	0xcc, 0x99, 0xe0, 0x29, 0x77, 0x63, 0x1e, 0x60, 0x24, 0x5d, 0x99, 0xfa, 0x13, 0x74, 0xd4, 0x88,
	0x1a, 0xe5, 0xac, 0xf3, 0x77, 0x03, 0x93, 0x2c, 0x96, 0xe5, 0x46, 0x77, 0x40, 0x9a, 0xc3, 0x2d,
	0xf0, 0x80, 0xa9, 0x1f, 0x46, 0xf4, 0x8c, 0x34, 0x14, 0x3f, 0x0a, 0x03, 0x13, 0x2c, 0xb0, 0x75,
	0xaf, 0xae, 0xf2, 0x63, 0x40, 0xcf, 0xc9, 0x51, 0x28, 0x47, 0x59, 0x12, 0xf1, 0xf1, 0xd4, 0xac,
	0x59, 0x60, 0x37, 0xbc, 0x46, 0x28, 0x9f, 0x55, 0xee, 0x6e, 0x80, 0xb4, 0x94, 0x67, 0xf0, 0x3e,
	0x8b, 0xb8, 0xc0, 0xff, 0x44, 0xa7, 0xc4, 0x08, 0x70, 0x22, 0x10, 0x95, 0x45, 0xf7, 0xaa, 0x44,
	0xef, 0x48, 0x1d, 0x4b, 0xda, 0xd4, 0x2d, 0xdd, 0x6e, 0xf6, 0x2e, 0x9d, 0xb2, 0xb0, 0xb3, 0x6f,
	0x76, 0xaa, 0x73, 0x90, 0xa4, 0x62, 0xe1, 0xed, 0x08, 0x7a, 0x45, 0x0c, 0x99, 0xfa, 0x69, 0x26,
	0xcd, 0x03, 0x0b, 0xec, 0xe3, 0x5e, 0x7b, 0xc7, 0x7a, 0xf8, 0xe6, 0x8b, 0x60, 0xa8, 0xde, 0xbc,
	0x6a, 0xa7, 0xd3, 0x27, 0xad, 0x7d, 0x0d, 0x3d, 0x21, 0xfa, 0x14, 0x17, 0x55, 0xd1, 0xed, 0x95,
	0xb6, 0xc9, 0xe1, 0xdc, 0x8f, 0xb2, 0x5d, 0xc7, 0x32, 0xf4, 0x6b, 0xb7, 0x70, 0xff, 0xb4, 0xfe,
	0x66, 0xda, 0x67, 0xce, 0x60, 0x99, 0x33, 0x58, 0xe5, 0x0c, 0xbe, 0x72, 0x06, 0x9b, 0x9c, 0x69,
	0x3f, 0x39, 0x83, 0x8f, 0x82, 0x69, 0xcb, 0x82, 0xc1, 0xaa, 0x60, 0xda, 0xba, 0x60, 0xda, 0xcb,
	0xc5, 0x98, 0x87, 0xc9, 0xb5, 0x44, 0x31, 0x47, 0xe1, 0x8e, 0x79, 0x1c, 0xf3, 0xc4, 0xdd, 0xff,
	0x8c, 0x57, 0x43, 0xa5, 0x9b, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x88, 0x6d, 0x03, 0xc5,
	0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStageDetail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStageExplore.Get().(proto.Message)
	})
}

var poolStageDetail = &sync.Pool{New: func() interface{} { return &StageDetail{} }}

func (m *StageDetail) ReleasePool() { m.Reset(); poolStageDetail.Put(m); m = nil }

var poolStageExplore = &sync.Pool{New: func() interface{} { return &StageExplore{} }}

func (m *StageExplore) ReleasePool() { m.Reset(); poolStageExplore.Put(m); m = nil }
func (this *StageDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StageDetail)
	if !ok {
		that2, ok := that.(StageDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.IsUnlock != that1.IsUnlock {
		return false
	}
	return true
}
func (this *StageExplore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StageExplore)
	if !ok {
		that2, ok := that.(StageExplore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.Degree != that1.Degree {
		return false
	}
	if len(this.Explore) != len(that1.Explore) {
		return false
	}
	for i := range this.Explore {
		if this.Explore[i] != that1.Explore[i] {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (m *StageDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StageDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsUnlock {
		i--
		if m.IsUnlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.StageId != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.StageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StageExplore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageExplore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StageExplore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Explore) > 0 {
		for k := range m.Explore {
			v := m.Explore[k]
			baseI := i
			i = encodeVarintStage(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintStage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintStage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Degree != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.Degree))
		i--
		dAtA[i] = 0x10
	}
	if m.StageId != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.StageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *StageDetail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.StageId != 0 {
		w.RawByte('"')
		w.RawString("stage_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StageId))
		needWriteComma = true
	}
	if m.IsUnlock {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_unlock")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsUnlock)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *StageExplore) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.StageId != 0 {
		w.RawByte('"')
		w.RawString("stage_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StageId))
		needWriteComma = true
	}
	if m.Degree != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("degree")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Degree))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("explore")
	w.RawByte('"')
	w.RawByte(':')
	if m.Explore == nil {
		w.RawString("null")
	} else if len(m.Explore) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlExplore := len(m.Explore)
		for k, v := range m.Explore {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlExplore--
			if mlExplore != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *StageDetail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *StageDetail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *StageDetail) GoString() string {
	return m.String()
}

func (m *StageExplore) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *StageExplore) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *StageExplore) GoString() string {
	return m.String()
}

func (m *StageDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovStage(uint64(m.StageId))
	}
	if m.IsUnlock {
		n += 2
	}
	return n
}

func (m *StageExplore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovStage(uint64(m.StageId))
	}
	if m.Degree != 0 {
		n += 1 + sovStage(uint64(m.Degree))
	}
	if len(m.Explore) > 0 {
		for k, v := range m.Explore {
			_ = k
			_ = v
			mapEntrySize := 1 + sovStage(uint64(k)) + 1 + sovStage(uint64(v))
			n += mapEntrySize + 1 + sovStage(uint64(mapEntrySize))
		}
	}
	if m.Status != 0 {
		n += 1 + sovStage(uint64(m.Status))
	}
	return n
}

func sovStage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStage(x uint64) (n int) {
	return sovStage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StageDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUnlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUnlock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageExplore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageExplore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageExplore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Degree", wireType)
			}
			m.Degree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Degree |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Explore == nil {
				m.Explore = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Explore[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RewardStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStage = fmt.Errorf("proto: unexpected end of group")
)
