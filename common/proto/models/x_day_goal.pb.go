// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/x_day_goal.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type XDayGoalInfo struct {
	ActivityId       int64            `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ReceivedIds      map[int64]*Items `protobuf:"bytes,2,rep,name=received_ids,json=receivedIds,proto3" json:"received_ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScoreReceivedIds map[int64]*Items `protobuf:"bytes,3,rep,name=score_received_ids,json=scoreReceivedIds,proto3" json:"score_received_ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CanReceiveIds    map[int64]int64  `protobuf:"bytes,4,rep,name=can_receive_ids,json=canReceiveIds,proto3" json:"can_receive_ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Progress         map[int64]int64  `protobuf:"bytes,5,rep,name=progress,proto3" json:"progress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Score            int64            `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	Days             int64            `protobuf:"varint,7,opt,name=days,proto3" json:"days,omitempty"`
	LastLoginTime    map[int64]int64  `protobuf:"bytes,8,rep,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OverTime         int64            `protobuf:"varint,9,opt,name=over_time,json=overTime,proto3" json:"over_time,omitempty"`
}

func (m *XDayGoalInfo) Reset()      { *m = XDayGoalInfo{} }
func (*XDayGoalInfo) ProtoMessage() {}
func (*XDayGoalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba9ffd986b365879, []int{0}
}
func (m *XDayGoalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoalInfo.Merge(m, src)
}
func (m *XDayGoalInfo) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoalInfo proto.InternalMessageInfo

func (m *XDayGoalInfo) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *XDayGoalInfo) GetReceivedIds() map[int64]*Items {
	if m != nil {
		return m.ReceivedIds
	}
	return nil
}

func (m *XDayGoalInfo) GetScoreReceivedIds() map[int64]*Items {
	if m != nil {
		return m.ScoreReceivedIds
	}
	return nil
}

func (m *XDayGoalInfo) GetCanReceiveIds() map[int64]int64 {
	if m != nil {
		return m.CanReceiveIds
	}
	return nil
}

func (m *XDayGoalInfo) GetProgress() map[int64]int64 {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *XDayGoalInfo) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *XDayGoalInfo) GetDays() int64 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (m *XDayGoalInfo) GetLastLoginTime() map[int64]int64 {
	if m != nil {
		return m.LastLoginTime
	}
	return nil
}

func (m *XDayGoalInfo) GetOverTime() int64 {
	if m != nil {
		return m.OverTime
	}
	return 0
}

func (*XDayGoalInfo) XXX_MessageName() string {
	return "models.XDayGoalInfo"
}

type XDayGoalInfoDetail struct {
	ActivityId       int64           `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ReceivedIds      []int64         `protobuf:"varint,2,rep,packed,name=received_ids,json=receivedIds,proto3" json:"received_ids,omitempty"`
	ScoreReceivedIds []int64         `protobuf:"varint,3,rep,packed,name=score_received_ids,json=scoreReceivedIds,proto3" json:"score_received_ids,omitempty"`
	CanReceiveIds    []int64         `protobuf:"varint,4,rep,packed,name=can_receive_ids,json=canReceiveIds,proto3" json:"can_receive_ids,omitempty"`
	Score            int64           `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	Days             int64           `protobuf:"varint,6,opt,name=days,proto3" json:"days,omitempty"`
	Progress         map[int64]int64 `protobuf:"bytes,7,rep,name=progress,proto3" json:"progress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OverTime         int64           `protobuf:"varint,8,opt,name=over_time,json=overTime,proto3" json:"over_time,omitempty"`
}

func (m *XDayGoalInfoDetail) Reset()      { *m = XDayGoalInfoDetail{} }
func (*XDayGoalInfoDetail) ProtoMessage() {}
func (*XDayGoalInfoDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba9ffd986b365879, []int{1}
}
func (m *XDayGoalInfoDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoalInfoDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoalInfoDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoalInfoDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoalInfoDetail.Merge(m, src)
}
func (m *XDayGoalInfoDetail) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoalInfoDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoalInfoDetail.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoalInfoDetail proto.InternalMessageInfo

func (m *XDayGoalInfoDetail) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *XDayGoalInfoDetail) GetReceivedIds() []int64 {
	if m != nil {
		return m.ReceivedIds
	}
	return nil
}

func (m *XDayGoalInfoDetail) GetScoreReceivedIds() []int64 {
	if m != nil {
		return m.ScoreReceivedIds
	}
	return nil
}

func (m *XDayGoalInfoDetail) GetCanReceiveIds() []int64 {
	if m != nil {
		return m.CanReceiveIds
	}
	return nil
}

func (m *XDayGoalInfoDetail) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *XDayGoalInfoDetail) GetDays() int64 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (m *XDayGoalInfoDetail) GetProgress() map[int64]int64 {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *XDayGoalInfoDetail) GetOverTime() int64 {
	if m != nil {
		return m.OverTime
	}
	return 0
}

func (*XDayGoalInfoDetail) XXX_MessageName() string {
	return "models.XDayGoalInfoDetail"
}

type XDayCnfInfo struct {
	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId int64   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Kind       int64   `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Language1  string  `protobuf:"bytes,4,opt,name=language1,proto3" json:"language1,omitempty"`
	Days       int64   `protobuf:"varint,5,opt,name=days,proto3" json:"days,omitempty"`
	TaskType   []int64 `protobuf:"varint,6,rep,packed,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	Language2  string  `protobuf:"bytes,7,opt,name=language2,proto3" json:"language2,omitempty"`
	Reward     []int64 `protobuf:"varint,8,rep,packed,name=reward,proto3" json:"reward,omitempty"`
	Points     int64   `protobuf:"varint,9,opt,name=points,proto3" json:"points,omitempty"`
}

func (m *XDayCnfInfo) Reset()      { *m = XDayCnfInfo{} }
func (*XDayCnfInfo) ProtoMessage() {}
func (*XDayCnfInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba9ffd986b365879, []int{2}
}
func (m *XDayCnfInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayCnfInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayCnfInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayCnfInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayCnfInfo.Merge(m, src)
}
func (m *XDayCnfInfo) XXX_Size() int {
	return m.Size()
}
func (m *XDayCnfInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayCnfInfo.DiscardUnknown(m)
}

var xxx_messageInfo_XDayCnfInfo proto.InternalMessageInfo

func (m *XDayCnfInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *XDayCnfInfo) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *XDayCnfInfo) GetKind() int64 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *XDayCnfInfo) GetLanguage1() string {
	if m != nil {
		return m.Language1
	}
	return ""
}

func (m *XDayCnfInfo) GetDays() int64 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (m *XDayCnfInfo) GetTaskType() []int64 {
	if m != nil {
		return m.TaskType
	}
	return nil
}

func (m *XDayCnfInfo) GetLanguage2() string {
	if m != nil {
		return m.Language2
	}
	return ""
}

func (m *XDayCnfInfo) GetReward() []int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *XDayCnfInfo) GetPoints() int64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (*XDayCnfInfo) XXX_MessageName() string {
	return "models.XDayCnfInfo"
}

type XDayScoreCnfInfo struct {
	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActivityId int64   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Points     int64   `protobuf:"varint,3,opt,name=points,proto3" json:"points,omitempty"`
	Reward     []int64 `protobuf:"varint,4,rep,packed,name=reward,proto3" json:"reward,omitempty"`
}

func (m *XDayScoreCnfInfo) Reset()      { *m = XDayScoreCnfInfo{} }
func (*XDayScoreCnfInfo) ProtoMessage() {}
func (*XDayScoreCnfInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba9ffd986b365879, []int{3}
}
func (m *XDayScoreCnfInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayScoreCnfInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayScoreCnfInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayScoreCnfInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayScoreCnfInfo.Merge(m, src)
}
func (m *XDayScoreCnfInfo) XXX_Size() int {
	return m.Size()
}
func (m *XDayScoreCnfInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayScoreCnfInfo.DiscardUnknown(m)
}

var xxx_messageInfo_XDayScoreCnfInfo proto.InternalMessageInfo

func (m *XDayScoreCnfInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *XDayScoreCnfInfo) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *XDayScoreCnfInfo) GetPoints() int64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *XDayScoreCnfInfo) GetReward() []int64 {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (*XDayScoreCnfInfo) XXX_MessageName() string {
	return "models.XDayScoreCnfInfo"
}

type ActivityProgress struct {
	CanReceiveIds []int64         `protobuf:"varint,1,rep,packed,name=can_receive_ids,json=canReceiveIds,proto3" json:"can_receive_ids,omitempty"`
	Progress      map[int64]int64 `protobuf:"bytes,2,rep,name=progress,proto3" json:"progress,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ActivityProgress) Reset()      { *m = ActivityProgress{} }
func (*ActivityProgress) ProtoMessage() {}
func (*ActivityProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba9ffd986b365879, []int{4}
}
func (m *ActivityProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityProgress.Merge(m, src)
}
func (m *ActivityProgress) XXX_Size() int {
	return m.Size()
}
func (m *ActivityProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityProgress.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityProgress proto.InternalMessageInfo

func (m *ActivityProgress) GetCanReceiveIds() []int64 {
	if m != nil {
		return m.CanReceiveIds
	}
	return nil
}

func (m *ActivityProgress) GetProgress() map[int64]int64 {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (*ActivityProgress) XXX_MessageName() string {
	return "models.ActivityProgress"
}
func init() {
	proto.RegisterType((*XDayGoalInfo)(nil), "models.XDayGoalInfo")
	proto.RegisterMapType((map[int64]int64)(nil), "models.XDayGoalInfo.CanReceiveIdsEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "models.XDayGoalInfo.LastLoginTimeEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "models.XDayGoalInfo.ProgressEntry")
	proto.RegisterMapType((map[int64]*Items)(nil), "models.XDayGoalInfo.ReceivedIdsEntry")
	proto.RegisterMapType((map[int64]*Items)(nil), "models.XDayGoalInfo.ScoreReceivedIdsEntry")
	proto.RegisterType((*XDayGoalInfoDetail)(nil), "models.XDayGoalInfoDetail")
	proto.RegisterMapType((map[int64]int64)(nil), "models.XDayGoalInfoDetail.ProgressEntry")
	proto.RegisterType((*XDayCnfInfo)(nil), "models.XDayCnfInfo")
	proto.RegisterType((*XDayScoreCnfInfo)(nil), "models.XDayScoreCnfInfo")
	proto.RegisterType((*ActivityProgress)(nil), "models.ActivityProgress")
	proto.RegisterMapType((map[int64]int64)(nil), "models.ActivityProgress.ProgressEntry")
}

func init() { proto.RegisterFile("proto/models/x_day_goal.proto", fileDescriptor_ba9ffd986b365879) }

var fileDescriptor_ba9ffd986b365879 = []byte{
	// 715 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0xc7, 0xeb, 0xa6, 0xed, 0xda, 0xa7, 0xdb, 0xfb, 0x56, 0xd6, 0x98, 0xa2, 0x6e, 0x64, 0xa5,
	0x88, 0x51, 0x21, 0x68, 0x45, 0xb9, 0x20, 0x90, 0xd0, 0xd8, 0x86, 0xa0, 0xd2, 0x26, 0x50, 0xd9,
	0x61, 0xe2, 0x12, 0x79, 0x89, 0x57, 0x59, 0x4b, 0xe2, 0x2a, 0xce, 0x0a, 0xf9, 0x16, 0x7c, 0x0c,
	0xbe, 0x03, 0x5f, 0x60, 0xc7, 0x1d, 0x77, 0x1c, 0xed, 0x85, 0x1b, 0x1c, 0x39, 0xa2, 0x38, 0x69,
	0xe7, 0xb6, 0x19, 0x68, 0xec, 0x66, 0xff, 0x6d, 0xff, 0xf2, 0xf8, 0x79, 0xfe, 0x8f, 0x03, 0xb7,
	0xfb, 0x3e, 0x0f, 0x78, 0xcb, 0xe5, 0x36, 0x75, 0x44, 0xeb, 0x93, 0x69, 0x93, 0xd0, 0xec, 0x71,
	0xe2, 0x34, 0xa5, 0x8e, 0x0b, 0xf1, 0x42, 0x75, 0x65, 0x6a, 0xdb, 0x21, 0xe9, 0xc5, 0xeb, 0xd5,
	0xb5, 0x29, 0xfd, 0x88, 0xfb, 0x2e, 0x09, 0x18, 0xf7, 0xe2, 0xd5, 0xfa, 0x45, 0x01, 0x16, 0x0f,
	0x76, 0x48, 0xf8, 0x9a, 0x13, 0xa7, 0xe3, 0x1d, 0x71, 0xbc, 0x0e, 0x65, 0x62, 0x05, 0x6c, 0xc0,
	0x82, 0xd0, 0x64, 0xb6, 0x8e, 0x6a, 0xa8, 0xa1, 0x75, 0x61, 0x2c, 0x75, 0x6c, 0xfc, 0x06, 0x16,
	0x7d, 0x6a, 0x51, 0x36, 0xa0, 0xb6, 0xc9, 0x6c, 0xa1, 0x67, 0x6b, 0x5a, 0xa3, 0xdc, 0xbe, 0xd7,
	0x8c, 0x3f, 0xd0, 0x54, 0x61, 0xcd, 0x6e, 0xb2, 0xb1, 0x63, 0x8b, 0x57, 0x5e, 0xe0, 0x87, 0xdd,
	0xb2, 0x7f, 0xa9, 0xe0, 0x03, 0xc0, 0xc2, 0xe2, 0x3e, 0x35, 0xa7, 0x78, 0x9a, 0xe4, 0x3d, 0x48,
	0xe5, 0xbd, 0x8f, 0xb6, 0xcf, 0x41, 0x2b, 0x62, 0x46, 0xc6, 0x6f, 0xe1, 0x7f, 0x8b, 0x78, 0x63,
	0xae, 0xc4, 0xe6, 0x24, 0xf6, 0x7e, 0x2a, 0x76, 0x9b, 0x78, 0xc9, 0xe9, 0x09, 0x73, 0xc9, 0x52,
	0x35, 0xfc, 0x02, 0x8a, 0x7d, 0x9f, 0xf7, 0x7c, 0x2a, 0x84, 0x9e, 0x97, 0xa4, 0x7a, 0x2a, 0xe9,
	0x5d, 0xb2, 0x29, 0x86, 0x4c, 0xce, 0xe0, 0x65, 0xc8, 0xcb, 0x20, 0xf5, 0x82, 0xcc, 0x67, 0x3c,
	0xc1, 0x18, 0x72, 0x36, 0x09, 0x85, 0xbe, 0x20, 0x45, 0x39, 0x8e, 0x42, 0x77, 0x88, 0x08, 0x4c,
	0x87, 0xf7, 0x98, 0x67, 0x06, 0xcc, 0xa5, 0x7a, 0xf1, 0x0f, 0xa1, 0xef, 0x12, 0x11, 0xec, 0x46,
	0x5b, 0xf7, 0x99, 0x4b, 0x93, 0xd0, 0x1d, 0x55, 0xc3, 0xab, 0x50, 0xe2, 0x03, 0xea, 0xc7, 0xa8,
	0x92, 0xfc, 0x52, 0x31, 0x12, 0xa2, 0xc5, 0xea, 0x1e, 0x54, 0x66, 0xd3, 0x89, 0x2b, 0xa0, 0x1d,
	0xd3, 0x30, 0xa9, 0x7c, 0x34, 0xc4, 0x77, 0x21, 0x3f, 0x20, 0xce, 0x09, 0xd5, 0xb3, 0x35, 0xd4,
	0x28, 0xb7, 0x97, 0xc6, 0x91, 0x74, 0x02, 0xea, 0x8a, 0x6e, 0xbc, 0xf6, 0x2c, 0xfb, 0x14, 0x55,
	0xbb, 0x70, 0x2b, 0xb5, 0x44, 0x37, 0x61, 0x6e, 0x02, 0x9e, 0xaf, 0x4f, 0x0a, 0x70, 0x59, 0x05,
	0x6a, 0x2a, 0xe1, 0x39, 0x2c, 0x4d, 0xd5, 0xe5, 0x5a, 0x87, 0x37, 0x01, 0xcf, 0xe7, 0xf8, 0x3a,
	0x84, 0xfa, 0xaf, 0x2c, 0x60, 0xb5, 0x66, 0x3b, 0x34, 0x20, 0xcc, 0xf9, 0x7b, 0xa3, 0xdd, 0x49,
	0x69, 0x34, 0x6d, 0xba, 0x83, 0x1e, 0x5e, 0xd9, 0x41, 0x5a, 0x4a, 0x57, 0x6c, 0xa4, 0x77, 0x85,
	0x36, 0x6b, 0xf6, 0x89, 0x59, 0xf3, 0x69, 0x66, 0x2d, 0x28, 0x66, 0xdd, 0x51, 0xda, 0x62, 0x41,
	0xba, 0xb4, 0x91, 0xe6, 0xd2, 0xf8, 0xc6, 0x57, 0x36, 0xc7, 0x94, 0x43, 0x8b, 0x33, 0x0e, 0xbd,
	0x49, 0xf1, 0xea, 0x3f, 0x10, 0x94, 0xa3, 0x40, 0xb6, 0xbd, 0x23, 0xf9, 0xb8, 0xfd, 0x07, 0xd9,
	0x49, 0xaa, 0xb3, 0xcc, 0x9e, 0xad, 0x41, 0x76, 0xae, 0x06, 0x18, 0x72, 0xc7, 0xcc, 0xb3, 0x75,
	0x2d, 0xbe, 0x74, 0x34, 0xc6, 0x6b, 0x50, 0x72, 0x88, 0xd7, 0x3b, 0x21, 0x3d, 0xfa, 0x58, 0xcf,
	0xd5, 0x50, 0xa3, 0xd4, 0xbd, 0x14, 0x26, 0x69, 0xca, 0x2b, 0x69, 0x5a, 0x85, 0x52, 0x40, 0xc4,
	0xb1, 0x19, 0x84, 0xfd, 0xe8, 0x05, 0x88, 0x52, 0x5e, 0x8c, 0x84, 0xfd, 0xb0, 0x4f, 0x55, 0x5c,
	0x5b, 0xbe, 0x04, 0x0a, 0xae, 0x8d, 0x57, 0xa0, 0xe0, 0xd3, 0x8f, 0xc4, 0xb7, 0xe5, 0x2b, 0xa0,
	0x75, 0x93, 0x59, 0xa4, 0xf7, 0x39, 0xf3, 0x02, 0x91, 0xb4, 0x74, 0x32, 0xab, 0x0b, 0xa8, 0x44,
	0x17, 0x96, 0x5d, 0xf8, 0xcf, 0xb7, 0xbe, 0x84, 0x6b, 0x2a, 0x5c, 0x09, 0x26, 0xa7, 0x06, 0x53,
	0xff, 0x8a, 0xa0, 0xf2, 0x32, 0x39, 0x3e, 0x2e, 0x56, 0x9a, 0xdb, 0x50, 0x9a, 0xdb, 0xb6, 0x14,
	0x0f, 0xc5, 0xff, 0x92, 0x8d, 0xb1, 0x87, 0x66, 0x99, 0x57, 0x39, 0xe8, 0x46, 0x26, 0xd9, 0xda,
	0x3b, 0xff, 0x66, 0x64, 0xbe, 0x0c, 0x0d, 0x74, 0x3a, 0x34, 0xd0, 0xd9, 0xd0, 0x40, 0x17, 0x43,
	0x03, 0x7d, 0x1f, 0x1a, 0x99, 0x9f, 0x43, 0x03, 0x7d, 0x1e, 0x19, 0x99, 0xd3, 0x91, 0x81, 0xce,
	0x46, 0x46, 0xe6, 0x7c, 0x64, 0x64, 0x3e, 0xac, 0x5b, 0x9c, 0x79, 0x8f, 0x04, 0xf5, 0x07, 0xd4,
	0x6f, 0x59, 0xdc, 0x75, 0xb9, 0xd7, 0x52, 0xff, 0xb0, 0x87, 0x05, 0x39, 0x7b, 0xf2, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0xdd, 0xcc, 0xc0, 0x8e, 0xb7, 0x07, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoalInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoalInfoDetail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayCnfInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayScoreCnfInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolActivityProgress.Get().(proto.Message)
	})
}

var poolXDayGoalInfo = &sync.Pool{New: func() interface{} { return &XDayGoalInfo{} }}

func (m *XDayGoalInfo) ReleasePool() { m.Reset(); poolXDayGoalInfo.Put(m); m = nil }

var poolXDayGoalInfoDetail = &sync.Pool{New: func() interface{} { return &XDayGoalInfoDetail{} }}

func (m *XDayGoalInfoDetail) ReleasePool() { m.Reset(); poolXDayGoalInfoDetail.Put(m); m = nil }

var poolXDayCnfInfo = &sync.Pool{New: func() interface{} { return &XDayCnfInfo{} }}

func (m *XDayCnfInfo) ReleasePool() { m.Reset(); poolXDayCnfInfo.Put(m); m = nil }

var poolXDayScoreCnfInfo = &sync.Pool{New: func() interface{} { return &XDayScoreCnfInfo{} }}

func (m *XDayScoreCnfInfo) ReleasePool() { m.Reset(); poolXDayScoreCnfInfo.Put(m); m = nil }

var poolActivityProgress = &sync.Pool{New: func() interface{} { return &ActivityProgress{} }}

func (m *ActivityProgress) ReleasePool() { m.Reset(); poolActivityProgress.Put(m); m = nil }
func (this *XDayGoalInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoalInfo)
	if !ok {
		that2, ok := that.(XDayGoalInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if len(this.ReceivedIds) != len(that1.ReceivedIds) {
		return false
	}
	for i := range this.ReceivedIds {
		if !this.ReceivedIds[i].Equal(that1.ReceivedIds[i]) {
			return false
		}
	}
	if len(this.ScoreReceivedIds) != len(that1.ScoreReceivedIds) {
		return false
	}
	for i := range this.ScoreReceivedIds {
		if !this.ScoreReceivedIds[i].Equal(that1.ScoreReceivedIds[i]) {
			return false
		}
	}
	if len(this.CanReceiveIds) != len(that1.CanReceiveIds) {
		return false
	}
	for i := range this.CanReceiveIds {
		if this.CanReceiveIds[i] != that1.CanReceiveIds[i] {
			return false
		}
	}
	if len(this.Progress) != len(that1.Progress) {
		return false
	}
	for i := range this.Progress {
		if this.Progress[i] != that1.Progress[i] {
			return false
		}
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Days != that1.Days {
		return false
	}
	if len(this.LastLoginTime) != len(that1.LastLoginTime) {
		return false
	}
	for i := range this.LastLoginTime {
		if this.LastLoginTime[i] != that1.LastLoginTime[i] {
			return false
		}
	}
	if this.OverTime != that1.OverTime {
		return false
	}
	return true
}
func (this *XDayGoalInfoDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoalInfoDetail)
	if !ok {
		that2, ok := that.(XDayGoalInfoDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if len(this.ReceivedIds) != len(that1.ReceivedIds) {
		return false
	}
	for i := range this.ReceivedIds {
		if this.ReceivedIds[i] != that1.ReceivedIds[i] {
			return false
		}
	}
	if len(this.ScoreReceivedIds) != len(that1.ScoreReceivedIds) {
		return false
	}
	for i := range this.ScoreReceivedIds {
		if this.ScoreReceivedIds[i] != that1.ScoreReceivedIds[i] {
			return false
		}
	}
	if len(this.CanReceiveIds) != len(that1.CanReceiveIds) {
		return false
	}
	for i := range this.CanReceiveIds {
		if this.CanReceiveIds[i] != that1.CanReceiveIds[i] {
			return false
		}
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Days != that1.Days {
		return false
	}
	if len(this.Progress) != len(that1.Progress) {
		return false
	}
	for i := range this.Progress {
		if this.Progress[i] != that1.Progress[i] {
			return false
		}
	}
	if this.OverTime != that1.OverTime {
		return false
	}
	return true
}
func (this *XDayCnfInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayCnfInfo)
	if !ok {
		that2, ok := that.(XDayCnfInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Language1 != that1.Language1 {
		return false
	}
	if this.Days != that1.Days {
		return false
	}
	if len(this.TaskType) != len(that1.TaskType) {
		return false
	}
	for i := range this.TaskType {
		if this.TaskType[i] != that1.TaskType[i] {
			return false
		}
	}
	if this.Language2 != that1.Language2 {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	if this.Points != that1.Points {
		return false
	}
	return true
}
func (this *XDayScoreCnfInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayScoreCnfInfo)
	if !ok {
		that2, ok := that.(XDayScoreCnfInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.Points != that1.Points {
		return false
	}
	if len(this.Reward) != len(that1.Reward) {
		return false
	}
	for i := range this.Reward {
		if this.Reward[i] != that1.Reward[i] {
			return false
		}
	}
	return true
}
func (this *ActivityProgress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityProgress)
	if !ok {
		that2, ok := that.(ActivityProgress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CanReceiveIds) != len(that1.CanReceiveIds) {
		return false
	}
	for i := range this.CanReceiveIds {
		if this.CanReceiveIds[i] != that1.CanReceiveIds[i] {
			return false
		}
	}
	if len(this.Progress) != len(that1.Progress) {
		return false
	}
	for i := range this.Progress {
		if this.Progress[i] != that1.Progress[i] {
			return false
		}
	}
	return true
}
func (m *XDayGoalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OverTime != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.OverTime))
		i--
		dAtA[i] = 0x48
	}
	if len(m.LastLoginTime) > 0 {
		for k := range m.LastLoginTime {
			v := m.LastLoginTime[k]
			baseI := i
			i = encodeVarintXDayGoal(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Days != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x38
	}
	if m.Score != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Progress) > 0 {
		for k := range m.Progress {
			v := m.Progress[k]
			baseI := i
			i = encodeVarintXDayGoal(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CanReceiveIds) > 0 {
		for k := range m.CanReceiveIds {
			v := m.CanReceiveIds[k]
			baseI := i
			i = encodeVarintXDayGoal(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ScoreReceivedIds) > 0 {
		for k := range m.ScoreReceivedIds {
			v := m.ScoreReceivedIds[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintXDayGoal(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ReceivedIds) > 0 {
		for k := range m.ReceivedIds {
			v := m.ReceivedIds[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintXDayGoal(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XDayGoalInfoDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoalInfoDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoalInfoDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OverTime != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.OverTime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Progress) > 0 {
		for k := range m.Progress {
			v := m.Progress[k]
			baseI := i
			i = encodeVarintXDayGoal(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Days != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x30
	}
	if m.Score != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CanReceiveIds) > 0 {
		dAtA4 := make([]byte, len(m.CanReceiveIds)*10)
		var j3 int
		for _, num1 := range m.CanReceiveIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintXDayGoal(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ScoreReceivedIds) > 0 {
		dAtA6 := make([]byte, len(m.ScoreReceivedIds)*10)
		var j5 int
		for _, num1 := range m.ScoreReceivedIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintXDayGoal(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReceivedIds) > 0 {
		dAtA8 := make([]byte, len(m.ReceivedIds)*10)
		var j7 int
		for _, num1 := range m.ReceivedIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintXDayGoal(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XDayCnfInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayCnfInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayCnfInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Points != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Reward) > 0 {
		dAtA10 := make([]byte, len(m.Reward)*10)
		var j9 int
		for _, num1 := range m.Reward {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintXDayGoal(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Language2) > 0 {
		i -= len(m.Language2)
		copy(dAtA[i:], m.Language2)
		i = encodeVarintXDayGoal(dAtA, i, uint64(len(m.Language2)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TaskType) > 0 {
		dAtA12 := make([]byte, len(m.TaskType)*10)
		var j11 int
		for _, num1 := range m.TaskType {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintXDayGoal(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x32
	}
	if m.Days != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Language1) > 0 {
		i -= len(m.Language1)
		copy(dAtA[i:], m.Language1)
		i = encodeVarintXDayGoal(dAtA, i, uint64(len(m.Language1)))
		i--
		dAtA[i] = 0x22
	}
	if m.Kind != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XDayScoreCnfInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayScoreCnfInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayScoreCnfInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		dAtA14 := make([]byte, len(m.Reward)*10)
		var j13 int
		for _, num1 := range m.Reward {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintXDayGoal(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x22
	}
	if m.Points != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x18
	}
	if m.ActivityId != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivityProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Progress) > 0 {
		for k := range m.Progress {
			v := m.Progress[k]
			baseI := i
			i = encodeVarintXDayGoal(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CanReceiveIds) > 0 {
		dAtA16 := make([]byte, len(m.CanReceiveIds)*10)
		var j15 int
		for _, num1 := range m.CanReceiveIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintXDayGoal(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintXDayGoal(dAtA []byte, offset int, v uint64) int {
	offset -= sovXDayGoal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *XDayGoalInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ActivityId != 0 {
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("received_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.ReceivedIds == nil {
		w.RawString("null")
	} else if len(m.ReceivedIds) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlReceivedIds := len(m.ReceivedIds)
		for k, v := range m.ReceivedIds {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlReceivedIds--
			if mlReceivedIds != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("score_received_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.ScoreReceivedIds == nil {
		w.RawString("null")
	} else if len(m.ScoreReceivedIds) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlScoreReceivedIds := len(m.ScoreReceivedIds)
		for k, v := range m.ScoreReceivedIds {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlScoreReceivedIds--
			if mlScoreReceivedIds != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("can_receive_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.CanReceiveIds == nil {
		w.RawString("null")
	} else if len(m.CanReceiveIds) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCanReceiveIds := len(m.CanReceiveIds)
		for k, v := range m.CanReceiveIds {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCanReceiveIds--
			if mlCanReceiveIds != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("progress")
	w.RawByte('"')
	w.RawByte(':')
	if m.Progress == nil {
		w.RawString("null")
	} else if len(m.Progress) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlProgress := len(m.Progress)
		for k, v := range m.Progress {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlProgress--
			if mlProgress != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	if m.Days != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("days")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Days))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("last_login_time")
	w.RawByte('"')
	w.RawByte(':')
	if m.LastLoginTime == nil {
		w.RawString("null")
	} else if len(m.LastLoginTime) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlLastLoginTime := len(m.LastLoginTime)
		for k, v := range m.LastLoginTime {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlLastLoginTime--
			if mlLastLoginTime != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.OverTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("over_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OverTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoalInfoDetail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ActivityId != 0 {
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("received_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.ReceivedIds == nil {
		w.RawString("null")
	} else if len(m.ReceivedIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ReceivedIds {
			w.Int64(int64(v))
			if i != len(m.ReceivedIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("score_received_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.ScoreReceivedIds == nil {
		w.RawString("null")
	} else if len(m.ScoreReceivedIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ScoreReceivedIds {
			w.Int64(int64(v))
			if i != len(m.ScoreReceivedIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("can_receive_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.CanReceiveIds == nil {
		w.RawString("null")
	} else if len(m.CanReceiveIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.CanReceiveIds {
			w.Int64(int64(v))
			if i != len(m.CanReceiveIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	if m.Days != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("days")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Days))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("progress")
	w.RawByte('"')
	w.RawByte(':')
	if m.Progress == nil {
		w.RawString("null")
	} else if len(m.Progress) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlProgress := len(m.Progress)
		for k, v := range m.Progress {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlProgress--
			if mlProgress != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.OverTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("over_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OverTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayCnfInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.Kind != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kind")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Kind))
		needWriteComma = true
	}
	if m.Language1 != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("language1")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Language1)
		needWriteComma = true
	}
	if m.Days != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("days")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Days))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("task_type")
	w.RawByte('"')
	w.RawByte(':')
	if m.TaskType == nil {
		w.RawString("null")
	} else if len(m.TaskType) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.TaskType {
			w.Int64(int64(v))
			if i != len(m.TaskType)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Language2 != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("language2")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Language2)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Reward {
			w.Int64(int64(v))
			if i != len(m.Reward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Points != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("points")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Points))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayScoreCnfInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ActivityId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activity_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivityId))
		needWriteComma = true
	}
	if m.Points != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("points")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Points))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.Reward == nil {
		w.RawString("null")
	} else if len(m.Reward) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Reward {
			w.Int64(int64(v))
			if i != len(m.Reward)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ActivityProgress) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("can_receive_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.CanReceiveIds == nil {
		w.RawString("null")
	} else if len(m.CanReceiveIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.CanReceiveIds {
			w.Int64(int64(v))
			if i != len(m.CanReceiveIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("progress")
	w.RawByte('"')
	w.RawByte(':')
	if m.Progress == nil {
		w.RawString("null")
	} else if len(m.Progress) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlProgress := len(m.Progress)
		for k, v := range m.Progress {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlProgress--
			if mlProgress != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoalInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoalInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoalInfo) GoString() string {
	return m.String()
}

func (m *XDayGoalInfoDetail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoalInfoDetail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoalInfoDetail) GoString() string {
	return m.String()
}

func (m *XDayCnfInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayCnfInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayCnfInfo) GoString() string {
	return m.String()
}

func (m *XDayScoreCnfInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayScoreCnfInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayScoreCnfInfo) GoString() string {
	return m.String()
}

func (m *ActivityProgress) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ActivityProgress) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ActivityProgress) GoString() string {
	return m.String()
}

func (m *XDayGoalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	if len(m.ReceivedIds) > 0 {
		for k, v := range m.ReceivedIds {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovXDayGoal(uint64(l))
			}
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + l
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	if len(m.ScoreReceivedIds) > 0 {
		for k, v := range m.ScoreReceivedIds {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovXDayGoal(uint64(l))
			}
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + l
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	if len(m.CanReceiveIds) > 0 {
		for k, v := range m.CanReceiveIds {
			_ = k
			_ = v
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + 1 + sovXDayGoal(uint64(v))
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	if len(m.Progress) > 0 {
		for k, v := range m.Progress {
			_ = k
			_ = v
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + 1 + sovXDayGoal(uint64(v))
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	if m.Score != 0 {
		n += 1 + sovXDayGoal(uint64(m.Score))
	}
	if m.Days != 0 {
		n += 1 + sovXDayGoal(uint64(m.Days))
	}
	if len(m.LastLoginTime) > 0 {
		for k, v := range m.LastLoginTime {
			_ = k
			_ = v
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + 1 + sovXDayGoal(uint64(v))
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	if m.OverTime != 0 {
		n += 1 + sovXDayGoal(uint64(m.OverTime))
	}
	return n
}

func (m *XDayGoalInfoDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	if len(m.ReceivedIds) > 0 {
		l = 0
		for _, e := range m.ReceivedIds {
			l += sovXDayGoal(uint64(e))
		}
		n += 1 + sovXDayGoal(uint64(l)) + l
	}
	if len(m.ScoreReceivedIds) > 0 {
		l = 0
		for _, e := range m.ScoreReceivedIds {
			l += sovXDayGoal(uint64(e))
		}
		n += 1 + sovXDayGoal(uint64(l)) + l
	}
	if len(m.CanReceiveIds) > 0 {
		l = 0
		for _, e := range m.CanReceiveIds {
			l += sovXDayGoal(uint64(e))
		}
		n += 1 + sovXDayGoal(uint64(l)) + l
	}
	if m.Score != 0 {
		n += 1 + sovXDayGoal(uint64(m.Score))
	}
	if m.Days != 0 {
		n += 1 + sovXDayGoal(uint64(m.Days))
	}
	if len(m.Progress) > 0 {
		for k, v := range m.Progress {
			_ = k
			_ = v
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + 1 + sovXDayGoal(uint64(v))
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	if m.OverTime != 0 {
		n += 1 + sovXDayGoal(uint64(m.OverTime))
	}
	return n
}

func (m *XDayCnfInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovXDayGoal(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	if m.Kind != 0 {
		n += 1 + sovXDayGoal(uint64(m.Kind))
	}
	l = len(m.Language1)
	if l > 0 {
		n += 1 + l + sovXDayGoal(uint64(l))
	}
	if m.Days != 0 {
		n += 1 + sovXDayGoal(uint64(m.Days))
	}
	if len(m.TaskType) > 0 {
		l = 0
		for _, e := range m.TaskType {
			l += sovXDayGoal(uint64(e))
		}
		n += 1 + sovXDayGoal(uint64(l)) + l
	}
	l = len(m.Language2)
	if l > 0 {
		n += 1 + l + sovXDayGoal(uint64(l))
	}
	if len(m.Reward) > 0 {
		l = 0
		for _, e := range m.Reward {
			l += sovXDayGoal(uint64(e))
		}
		n += 1 + sovXDayGoal(uint64(l)) + l
	}
	if m.Points != 0 {
		n += 1 + sovXDayGoal(uint64(m.Points))
	}
	return n
}

func (m *XDayScoreCnfInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovXDayGoal(uint64(m.Id))
	}
	if m.ActivityId != 0 {
		n += 1 + sovXDayGoal(uint64(m.ActivityId))
	}
	if m.Points != 0 {
		n += 1 + sovXDayGoal(uint64(m.Points))
	}
	if len(m.Reward) > 0 {
		l = 0
		for _, e := range m.Reward {
			l += sovXDayGoal(uint64(e))
		}
		n += 1 + sovXDayGoal(uint64(l)) + l
	}
	return n
}

func (m *ActivityProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CanReceiveIds) > 0 {
		l = 0
		for _, e := range m.CanReceiveIds {
			l += sovXDayGoal(uint64(e))
		}
		n += 1 + sovXDayGoal(uint64(l)) + l
	}
	if len(m.Progress) > 0 {
		for k, v := range m.Progress {
			_ = k
			_ = v
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + 1 + sovXDayGoal(uint64(v))
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	return n
}

func sovXDayGoal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozXDayGoal(x uint64) (n int) {
	return sovXDayGoal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XDayGoalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceivedIds == nil {
				m.ReceivedIds = make(map[int64]*Items)
			}
			var mapkey int64
			var mapvalue *Items
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthXDayGoal
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Items{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReceivedIds[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreReceivedIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScoreReceivedIds == nil {
				m.ScoreReceivedIds = make(map[int64]*Items)
			}
			var mapkey int64
			var mapvalue *Items
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthXDayGoal
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Items{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ScoreReceivedIds[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReceiveIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CanReceiveIds == nil {
				m.CanReceiveIds = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CanReceiveIds[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Progress[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastLoginTime == nil {
				m.LastLoginTime = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastLoginTime[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			m.OverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayGoalInfoDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalInfoDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalInfoDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReceivedIds = append(m.ReceivedIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXDayGoal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthXDayGoal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ReceivedIds) == 0 {
					m.ReceivedIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReceivedIds = append(m.ReceivedIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ScoreReceivedIds = append(m.ScoreReceivedIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXDayGoal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthXDayGoal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ScoreReceivedIds) == 0 {
					m.ScoreReceivedIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ScoreReceivedIds = append(m.ScoreReceivedIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreReceivedIds", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CanReceiveIds = append(m.CanReceiveIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXDayGoal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthXDayGoal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CanReceiveIds) == 0 {
					m.CanReceiveIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CanReceiveIds = append(m.CanReceiveIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReceiveIds", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Progress[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			m.OverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayCnfInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayCnfInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayCnfInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TaskType = append(m.TaskType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXDayGoal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthXDayGoal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TaskType) == 0 {
					m.TaskType = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TaskType = append(m.TaskType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Reward = append(m.Reward, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXDayGoal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthXDayGoal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Reward) == 0 {
					m.Reward = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Reward = append(m.Reward, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XDayScoreCnfInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayScoreCnfInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayScoreCnfInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Reward = append(m.Reward, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXDayGoal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthXDayGoal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Reward) == 0 {
					m.Reward = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Reward = append(m.Reward, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CanReceiveIds = append(m.CanReceiveIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXDayGoal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthXDayGoal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CanReceiveIds) == 0 {
					m.CanReceiveIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CanReceiveIds = append(m.CanReceiveIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CanReceiveIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Progress[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXDayGoal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthXDayGoal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupXDayGoal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthXDayGoal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthXDayGoal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXDayGoal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupXDayGoal = fmt.Errorf("proto: unexpected end of group")
)
