// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/boss_hall.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BossHallRewardType int32

const (
	BossHallRewardType_BossHallRewardType_None BossHallRewardType = 0
	BossHallRewardType_BossHallRewardType_Kill BossHallRewardType = 1
	BossHallRewardType_BossHallRewardType_Join BossHallRewardType = 2
)

var BossHallRewardType_name = map[int32]string{
	0: "BossHallRewardType_None",
	1: "BossHallRewardType_Kill",
	2: "BossHallRewardType_Join",
}

var BossHallRewardType_value = map[string]int32{
	"BossHallRewardType_None": 0,
	"BossHallRewardType_Kill": 1,
	"BossHallRewardType_Join": 2,
}

func (BossHallRewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_61466ab1172e4471, []int{0}
}

type BossCollectInfo struct {
	BossId   int64 `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	BattleId int64 `protobuf:"varint,2,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	MapId    int64 `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (m *BossCollectInfo) Reset()      { *m = BossCollectInfo{} }
func (*BossCollectInfo) ProtoMessage() {}
func (*BossCollectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_61466ab1172e4471, []int{0}
}
func (m *BossCollectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossCollectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossCollectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossCollectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossCollectInfo.Merge(m, src)
}
func (m *BossCollectInfo) XXX_Size() int {
	return m.Size()
}
func (m *BossCollectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BossCollectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BossCollectInfo proto.InternalMessageInfo

func (m *BossCollectInfo) GetBossId() int64 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (m *BossCollectInfo) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *BossCollectInfo) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (*BossCollectInfo) XXX_MessageName() string {
	return "models.BossCollectInfo"
}

type BossKillJoinInfo struct {
	BossInfo *BossCollectInfo `protobuf:"bytes,1,opt,name=boss_info,json=bossInfo,proto3" json:"boss_info,omitempty"`
	Time     int64            `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Rewards  []*Item          `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (m *BossKillJoinInfo) Reset()      { *m = BossKillJoinInfo{} }
func (*BossKillJoinInfo) ProtoMessage() {}
func (*BossKillJoinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_61466ab1172e4471, []int{1}
}
func (m *BossKillJoinInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossKillJoinInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossKillJoinInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossKillJoinInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossKillJoinInfo.Merge(m, src)
}
func (m *BossKillJoinInfo) XXX_Size() int {
	return m.Size()
}
func (m *BossKillJoinInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BossKillJoinInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BossKillJoinInfo proto.InternalMessageInfo

func (m *BossKillJoinInfo) GetBossInfo() *BossCollectInfo {
	if m != nil {
		return m.BossInfo
	}
	return nil
}

func (m *BossKillJoinInfo) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BossKillJoinInfo) GetRewards() []*Item {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*BossKillJoinInfo) XXX_MessageName() string {
	return "models.BossKillJoinInfo"
}

type BossHallInfo struct {
	NextRefreshTime int64 `protobuf:"varint,1,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	JoinTimes       int64 `protobuf:"varint,2,opt,name=join_times,json=joinTimes,proto3" json:"join_times,omitempty"`
	KillTimes       int64 `protobuf:"varint,3,opt,name=kill_times,json=killTimes,proto3" json:"kill_times,omitempty"`
}

func (m *BossHallInfo) Reset()      { *m = BossHallInfo{} }
func (*BossHallInfo) ProtoMessage() {}
func (*BossHallInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_61466ab1172e4471, []int{2}
}
func (m *BossHallInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossHallInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossHallInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossHallInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossHallInfo.Merge(m, src)
}
func (m *BossHallInfo) XXX_Size() int {
	return m.Size()
}
func (m *BossHallInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BossHallInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BossHallInfo proto.InternalMessageInfo

func (m *BossHallInfo) GetNextRefreshTime() int64 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (m *BossHallInfo) GetJoinTimes() int64 {
	if m != nil {
		return m.JoinTimes
	}
	return 0
}

func (m *BossHallInfo) GetKillTimes() int64 {
	if m != nil {
		return m.KillTimes
	}
	return 0
}

func (*BossHallInfo) XXX_MessageName() string {
	return "models.BossHallInfo"
}
func init() {
	proto.RegisterEnum("models.BossHallRewardType", BossHallRewardType_name, BossHallRewardType_value)
	proto.RegisterType((*BossCollectInfo)(nil), "models.BossCollectInfo")
	proto.RegisterType((*BossKillJoinInfo)(nil), "models.BossKillJoinInfo")
	proto.RegisterType((*BossHallInfo)(nil), "models.BossHallInfo")
}

func init() { proto.RegisterFile("proto/models/boss_hall.proto", fileDescriptor_61466ab1172e4471) }

var fileDescriptor_61466ab1172e4471 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0x6e, 0xd4, 0x30,
	0x18, 0xc7, 0xe3, 0x06, 0xd2, 0xc6, 0xad, 0xd4, 0x60, 0x09, 0xae, 0x6a, 0xc1, 0x54, 0x37, 0xa0,
	0xaa, 0x12, 0x17, 0xa9, 0xf0, 0x04, 0x65, 0x21, 0x20, 0x18, 0xa2, 0x4e, 0x0c, 0x44, 0xbe, 0x8b,
	0x43, 0x4d, 0x6d, 0x7f, 0x91, 0x6d, 0x41, 0xd9, 0x79, 0x00, 0x1e, 0x83, 0x47, 0xe9, 0xd8, 0xb1,
	0x23, 0x24, 0x0b, 0x23, 0x8f, 0x80, 0x6c, 0xdf, 0x49, 0x14, 0x74, 0x5b, 0xfc, 0xff, 0xd9, 0xff,
	0xdf, 0x67, 0x2b, 0xf8, 0x61, 0x6f, 0xc0, 0x41, 0xa9, 0xa0, 0xe5, 0xd2, 0x96, 0x73, 0xb0, 0xb6,
	0x39, 0x67, 0x52, 0xce, 0x42, 0x4c, 0xb2, 0x98, 0xef, 0x3f, 0xb8, 0xbd, 0x8b, 0x7d, 0x88, 0x7c,
	0xff, 0xf6, 0xe9, 0x0e, 0x8c, 0x62, 0x4e, 0x80, 0x8e, 0x74, 0xfa, 0x1e, 0xef, 0x9e, 0x82, 0xb5,
	0x2f, 0x40, 0x4a, 0xbe, 0x70, 0x95, 0xee, 0x80, 0x4c, 0xf0, 0x66, 0x70, 0x88, 0x76, 0x0f, 0x1d,
	0xa2, 0xa3, 0xb4, 0xce, 0xfc, 0xb2, 0x6a, 0xc9, 0x01, 0xce, 0xe7, 0xcc, 0x39, 0xc9, 0x3d, 0xda,
	0x08, 0x68, 0x2b, 0x06, 0x55, 0x4b, 0xee, 0xe3, 0x4c, 0xb1, 0xde, 0x93, 0x34, 0x90, 0xbb, 0x8a,
	0xf5, 0x55, 0x3b, 0xfd, 0x8a, 0x70, 0xe1, 0x05, 0xaf, 0x85, 0x94, 0xaf, 0x40, 0xe8, 0x60, 0x78,
	0x8e, 0xf3, 0x68, 0xd0, 0x1d, 0x04, 0xc7, 0xf6, 0xc9, 0x64, 0x16, 0x07, 0x9c, 0xfd, 0x33, 0x4d,
	0xbd, 0x15, 0xe4, 0xfe, 0x14, 0xc1, 0x77, 0x9c, 0x50, 0x7c, 0x69, 0x0e, 0xdf, 0xe4, 0x09, 0xde,
	0x34, 0xfc, 0x33, 0x33, 0xad, 0xdd, 0x4b, 0x0f, 0xd3, 0xa3, 0xed, 0x93, 0x9d, 0x55, 0x4f, 0xe5,
	0xb8, 0xaa, 0x57, 0x70, 0x7a, 0x89, 0x77, 0x7c, 0xf1, 0x4b, 0x26, 0x65, 0xe8, 0x3a, 0xc6, 0xf7,
	0x34, 0xbf, 0x74, 0x8d, 0xe1, 0x9d, 0xe1, 0xf6, 0xbc, 0x09, 0xc5, 0xf1, 0xb6, 0xbb, 0x1e, 0xd4,
	0x31, 0x3f, 0xf3, 0x8e, 0x47, 0x18, 0x7f, 0x04, 0xa1, 0xc3, 0x1e, 0xbb, 0xb4, 0xe7, 0x3e, 0xf1,
	0xd4, 0x7a, 0x7c, 0x21, 0xa4, 0x5c, 0xe2, 0x78, 0xf9, 0xdc, 0x27, 0x01, 0x1f, 0x5f, 0x60, 0xb2,
	0x32, 0xd7, 0x61, 0x98, 0xb3, 0x2f, 0x3d, 0x27, 0x07, 0x78, 0xf2, 0x7f, 0xda, 0xbc, 0x05, 0xcd,
	0x8b, 0x64, 0x0d, 0xf4, 0x2f, 0x58, 0xa0, 0x35, 0xd0, 0x3f, 0x6d, 0xb1, 0x71, 0xfa, 0xe6, 0xe6,
	0x27, 0x4d, 0xbe, 0x0f, 0x14, 0x5d, 0x0d, 0x14, 0x5d, 0x0f, 0x14, 0xfd, 0x18, 0x28, 0xfa, 0x35,
	0xd0, 0xe4, 0xf7, 0x40, 0xd1, 0xb7, 0x91, 0x26, 0x57, 0x23, 0x45, 0xd7, 0x23, 0x4d, 0x6e, 0x46,
	0x9a, 0xbc, 0x7b, 0xbc, 0x00, 0xa1, 0x9f, 0x5a, 0x6e, 0x3e, 0x71, 0x53, 0x2e, 0x40, 0x29, 0xd0,
	0xe5, 0xdf, 0x3f, 0xcb, 0x3c, 0x0b, 0xab, 0x67, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x00, 0xd2,
	0x8a, 0x21, 0x81, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossCollectInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossKillJoinInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossHallInfo.Get().(proto.Message)
	})
}

var poolBossCollectInfo = &sync.Pool{New: func() interface{} { return &BossCollectInfo{} }}

func (m *BossCollectInfo) ReleasePool() { m.Reset(); poolBossCollectInfo.Put(m); m = nil }

var poolBossKillJoinInfo = &sync.Pool{New: func() interface{} { return &BossKillJoinInfo{} }}

func (m *BossKillJoinInfo) ReleasePool() { m.Reset(); poolBossKillJoinInfo.Put(m); m = nil }

var poolBossHallInfo = &sync.Pool{New: func() interface{} { return &BossHallInfo{} }}

func (m *BossHallInfo) ReleasePool() { m.Reset(); poolBossHallInfo.Put(m); m = nil }
func (x BossHallRewardType) String() string {
	s, ok := BossHallRewardType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BossCollectInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossCollectInfo)
	if !ok {
		that2, ok := that.(BossCollectInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	return true
}
func (this *BossKillJoinInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossKillJoinInfo)
	if !ok {
		that2, ok := that.(BossKillJoinInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BossInfo.Equal(that1.BossInfo) {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if !this.Rewards[i].Equal(that1.Rewards[i]) {
			return false
		}
	}
	return true
}
func (this *BossHallInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossHallInfo)
	if !ok {
		that2, ok := that.(BossHallInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NextRefreshTime != that1.NextRefreshTime {
		return false
	}
	if this.JoinTimes != that1.JoinTimes {
		return false
	}
	if this.KillTimes != that1.KillTimes {
		return false
	}
	return true
}
func (m *BossCollectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossCollectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossCollectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleId != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x10
	}
	if m.BossId != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BossKillJoinInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossKillJoinInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossKillJoinInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBossHall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Time != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.BossInfo != nil {
		{
			size, err := m.BossInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBossHall(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BossHallInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossHallInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossHallInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KillTimes != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.KillTimes))
		i--
		dAtA[i] = 0x18
	}
	if m.JoinTimes != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.JoinTimes))
		i--
		dAtA[i] = 0x10
	}
	if m.NextRefreshTime != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.NextRefreshTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBossHall(dAtA []byte, offset int, v uint64) int {
	offset -= sovBossHall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *BossCollectInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BossId != 0 {
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BossId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossKillJoinInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("boss_info")
	w.RawByte('"')
	w.RawByte(':')
	m.BossInfo.JsonBytes(w)
	needWriteComma = true
	if m.Time != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Time))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Rewards {
			v.JsonBytes(w)
			if i != len(m.Rewards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossHallInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.NextRefreshTime != 0 {
		w.RawByte('"')
		w.RawString("next_refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRefreshTime))
		needWriteComma = true
	}
	if m.JoinTimes != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("join_times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.JoinTimes))
		needWriteComma = true
	}
	if m.KillTimes != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kill_times")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.KillTimes))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossCollectInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossCollectInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossCollectInfo) GoString() string {
	return m.String()
}

func (m *BossKillJoinInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossKillJoinInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossKillJoinInfo) GoString() string {
	return m.String()
}

func (m *BossHallInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossHallInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossHallInfo) GoString() string {
	return m.String()
}

func (m *BossCollectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossId != 0 {
		n += 1 + sovBossHall(uint64(m.BossId))
	}
	if m.BattleId != 0 {
		n += 1 + sovBossHall(uint64(m.BattleId))
	}
	if m.MapId != 0 {
		n += 1 + sovBossHall(uint64(m.MapId))
	}
	return n
}

func (m *BossKillJoinInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossInfo != nil {
		l = m.BossInfo.Size()
		n += 1 + l + sovBossHall(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovBossHall(uint64(m.Time))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovBossHall(uint64(l))
		}
	}
	return n
}

func (m *BossHallInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextRefreshTime != 0 {
		n += 1 + sovBossHall(uint64(m.NextRefreshTime))
	}
	if m.JoinTimes != 0 {
		n += 1 + sovBossHall(uint64(m.JoinTimes))
	}
	if m.KillTimes != 0 {
		n += 1 + sovBossHall(uint64(m.KillTimes))
	}
	return n
}

func sovBossHall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBossHall(x uint64) (n int) {
	return sovBossHall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BossCollectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossCollectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossCollectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossKillJoinInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossKillJoinInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossKillJoinInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBossHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBossHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossInfo == nil {
				m.BossInfo = &BossCollectInfo{}
			}
			if err := m.BossInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBossHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBossHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &Item{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossHallInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossHallInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossHallInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTimes", wireType)
			}
			m.JoinTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillTimes", wireType)
			}
			m.KillTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBossHall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBossHall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBossHall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBossHall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBossHall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBossHall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBossHall = fmt.Errorf("proto: unexpected end of group")
)
