// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/notice.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Notice struct {
	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ExpiredAt int64  `protobuf:"varint,3,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	CreatedAt int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Read      bool   `protobuf:"varint,5,opt,name=read,proto3" json:"read,omitempty"`
}

func (m *Notice) Reset()      { *m = Notice{} }
func (*Notice) ProtoMessage() {}
func (*Notice) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fea0eefed5e29a, []int{0}
}
func (m *Notice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notice.Merge(m, src)
}
func (m *Notice) XXX_Size() int {
	return m.Size()
}
func (m *Notice) XXX_DiscardUnknown() {
	xxx_messageInfo_Notice.DiscardUnknown(m)
}

var xxx_messageInfo_Notice proto.InternalMessageInfo

func (m *Notice) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Notice) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notice) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (m *Notice) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Notice) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (*Notice) XXX_MessageName() string {
	return "models.Notice"
}

type NoticeContent struct {
	Content       string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	RewardContent string `protobuf:"bytes,2,opt,name=reward_content,json=rewardContent,proto3" json:"reward_content,omitempty"`
	IsCustom      bool   `protobuf:"varint,3,opt,name=is_custom,json=isCustom,proto3" json:"is_custom,omitempty"`
	ExpiredAt     int64  `protobuf:"varint,4,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
}

func (m *NoticeContent) Reset()      { *m = NoticeContent{} }
func (*NoticeContent) ProtoMessage() {}
func (*NoticeContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_52fea0eefed5e29a, []int{1}
}
func (m *NoticeContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoticeContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoticeContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoticeContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeContent.Merge(m, src)
}
func (m *NoticeContent) XXX_Size() int {
	return m.Size()
}
func (m *NoticeContent) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeContent.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeContent proto.InternalMessageInfo

func (m *NoticeContent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NoticeContent) GetRewardContent() string {
	if m != nil {
		return m.RewardContent
	}
	return ""
}

func (m *NoticeContent) GetIsCustom() bool {
	if m != nil {
		return m.IsCustom
	}
	return false
}

func (m *NoticeContent) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (*NoticeContent) XXX_MessageName() string {
	return "models.NoticeContent"
}
func init() {
	proto.RegisterType((*Notice)(nil), "models.Notice")
	proto.RegisterType((*NoticeContent)(nil), "models.NoticeContent")
}

func init() { proto.RegisterFile("proto/models/notice.proto", fileDescriptor_52fea0eefed5e29a) }

var fileDescriptor_52fea0eefed5e29a = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x73, 0x7a, 0x09, 0x89, 0xa5, 0x76, 0xb0, 0x18, 0x82, 0x10, 0x26, 0xaa, 0x84, 0x94,
	0x05, 0x32, 0xf0, 0x04, 0xa5, 0x33, 0x0c, 0x19, 0x59, 0xa2, 0x60, 0x7b, 0xb0, 0xd4, 0xc4, 0x95,
	0x73, 0xb8, 0x8c, 0x3c, 0x00, 0x03, 0x8f, 0xc1, 0xa3, 0x74, 0xec, 0xd8, 0x11, 0x9c, 0x85, 0x91,
	0x47, 0x40, 0xd8, 0x89, 0x84, 0xba, 0x9d, 0xff, 0xfb, 0x2d, 0xeb, 0x3b, 0x87, 0x9c, 0x6c, 0x8c,
	0x46, 0x9d, 0xd7, 0x5a, 0xc8, 0x75, 0x9b, 0x37, 0x1a, 0x15, 0x97, 0x57, 0x8e, 0xd1, 0xd0, 0xc3,
	0xc5, 0x2b, 0x90, 0xf0, 0xce, 0x15, 0x74, 0x4e, 0x46, 0x4a, 0x24, 0x90, 0x42, 0x16, 0x17, 0x23,
	0x25, 0xe8, 0x31, 0x99, 0xa2, 0xc2, 0xb5, 0x4c, 0x46, 0x0e, 0xf9, 0x40, 0xcf, 0x08, 0x91, 0x2f,
	0x1b, 0x65, 0xa4, 0x28, 0x2b, 0x4c, 0xc6, 0x29, 0x64, 0xe3, 0x22, 0xee, 0xc9, 0x12, 0xff, 0x6a,
	0x6e, 0x64, 0x85, 0xbe, 0x9e, 0xf8, 0xba, 0x27, 0x4b, 0xa4, 0x94, 0x4c, 0x8c, 0xac, 0x44, 0x32,
	0x4d, 0x21, 0x8b, 0x0a, 0x37, 0x2f, 0xde, 0x80, 0xcc, 0xbc, 0xc2, 0x4a, 0x37, 0x28, 0x1b, 0xa4,
	0x09, 0x39, 0xe2, 0x7e, 0xec, 0x75, 0x86, 0x48, 0x2f, 0xc8, 0xdc, 0xc8, 0xe7, 0xca, 0x88, 0x72,
	0x78, 0xe0, 0xe5, 0x66, 0x9e, 0x0e, 0x1f, 0x9c, 0x92, 0x58, 0xb5, 0x25, 0x7f, 0x6c, 0x51, 0xd7,
	0xce, 0x31, 0x2a, 0x22, 0xd5, 0xae, 0x5c, 0x3e, 0xd8, 0x60, 0x72, 0xb0, 0xc1, 0xcd, 0xed, 0xfe,
	0x8b, 0x05, 0x1f, 0x96, 0xc1, 0xd6, 0x32, 0xd8, 0x59, 0x06, 0x9f, 0x96, 0xc1, 0xb7, 0x65, 0xc1,
	0x8f, 0x65, 0xf0, 0xde, 0xb1, 0x60, 0xdb, 0x31, 0xd8, 0x75, 0x2c, 0xd8, 0x77, 0x2c, 0xb8, 0x3f,
	0xe7, 0x5a, 0x35, 0x97, 0xad, 0x34, 0x4f, 0xd2, 0xe4, 0x5c, 0xd7, 0xb5, 0x6e, 0xf2, 0xff, 0x57,
	0x7f, 0x08, 0x5d, 0xba, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xdf, 0xf3, 0x53, 0x8c, 0x01,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNotice.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNoticeContent.Get().(proto.Message)
	})
}

var poolNotice = &sync.Pool{New: func() interface{} { return &Notice{} }}

func (m *Notice) ReleasePool() { m.Reset(); poolNotice.Put(m); m = nil }

var poolNoticeContent = &sync.Pool{New: func() interface{} { return &NoticeContent{} }}

func (m *NoticeContent) ReleasePool() { m.Reset(); poolNoticeContent.Put(m); m = nil }
func (this *Notice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notice)
	if !ok {
		that2, ok := that.(Notice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.ExpiredAt != that1.ExpiredAt {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.Read != that1.Read {
		return false
	}
	return true
}
func (this *NoticeContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NoticeContent)
	if !ok {
		that2, ok := that.(NoticeContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.RewardContent != that1.RewardContent {
		return false
	}
	if this.IsCustom != that1.IsCustom {
		return false
	}
	if this.ExpiredAt != that1.ExpiredAt {
		return false
	}
	return true
}
func (m *Notice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Read {
		i--
		if m.Read {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.CreatedAt != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.ExpiredAt != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintNotice(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNotice(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoticeContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoticeContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiredAt != 0 {
		i = encodeVarintNotice(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x20
	}
	if m.IsCustom {
		i--
		if m.IsCustom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.RewardContent) > 0 {
		i -= len(m.RewardContent)
		copy(dAtA[i:], m.RewardContent)
		i = encodeVarintNotice(dAtA, i, uint64(len(m.RewardContent)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintNotice(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNotice(dAtA []byte, offset int, v uint64) int {
	offset -= sovNotice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Notice) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.Title != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Title)
		needWriteComma = true
	}
	if m.ExpiredAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expired_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpiredAt))
		needWriteComma = true
	}
	if m.CreatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("created_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreatedAt))
		needWriteComma = true
	}
	if m.Read {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("read")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Read)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NoticeContent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Content != "" {
		w.RawByte('"')
		w.RawString("content")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Content)
		needWriteComma = true
	}
	if m.RewardContent != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("reward_content")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RewardContent)
		needWriteComma = true
	}
	if m.IsCustom {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_custom")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsCustom)
		needWriteComma = true
	}
	if m.ExpiredAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expired_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpiredAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Notice) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Notice) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Notice) GoString() string {
	return m.String()
}

func (m *NoticeContent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NoticeContent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NoticeContent) GoString() string {
	return m.String()
}

func (m *Notice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovNotice(uint64(m.ExpiredAt))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovNotice(uint64(m.CreatedAt))
	}
	if m.Read {
		n += 2
	}
	return n
}

func (m *NoticeContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	l = len(m.RewardContent)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	if m.IsCustom {
		n += 2
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovNotice(uint64(m.ExpiredAt))
	}
	return n
}

func sovNotice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotice(x uint64) (n int) {
	return sovNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Notice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Read = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCustom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCustom = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNotice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNotice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNotice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNotice = fmt.Errorf("proto: unexpected end of group")
)
