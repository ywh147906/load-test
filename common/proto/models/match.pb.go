// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/match.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RoomStatus int32

const (
	RoomStatus_RoomStatusMatch    RoomStatus = 0
	RoomStatus_RoomStatusFighting RoomStatus = 1
)

var RoomStatus_name = map[int32]string{
	0: "RoomStatusMatch",
	1: "RoomStatusFighting",
}

var RoomStatus_value = map[string]int32{
	"RoomStatusMatch":    0,
	"RoomStatusFighting": 1,
}

func (RoomStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d854a21a96bc26e9, []int{0}
}

// 房间信息
type Room struct {
	// room_id
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 房主Id
	OwnerId string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// 副本Id
	DungeonId int64 `protobuf:"zigzag64,3,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	// 角色信息
	RoleInfos []*RoleInfo `protobuf:"bytes,4,rep,name=roleInfos,proto3" json:"roleInfos,omitempty"`
	// 房间设置
	Opt *RoomOpt `protobuf:"bytes,5,opt,name=opt,proto3" json:"opt,omitempty"`
	// 房间状态
	Status RoomStatus `protobuf:"varint,6,opt,name=status,proto3,enum=models.RoomStatus" json:"status,omitempty"`
	// 更新时间
	UpdateAt int64 `protobuf:"varint,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (m *Room) Reset()      { *m = Room{} }
func (*Room) ProtoMessage() {}
func (*Room) Descriptor() ([]byte, []int) {
	return fileDescriptor_d854a21a96bc26e9, []int{0}
}
func (m *Room) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Room) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Room.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Room) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Room.Merge(m, src)
}
func (m *Room) XXX_Size() int {
	return m.Size()
}
func (m *Room) XXX_DiscardUnknown() {
	xxx_messageInfo_Room.DiscardUnknown(m)
}

var xxx_messageInfo_Room proto.InternalMessageInfo

func (m *Room) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *Room) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Room) GetDungeonId() int64 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (m *Room) GetRoleInfos() []*RoleInfo {
	if m != nil {
		return m.RoleInfos
	}
	return nil
}

func (m *Room) GetOpt() *RoomOpt {
	if m != nil {
		return m.Opt
	}
	return nil
}

func (m *Room) GetStatus() RoomStatus {
	if m != nil {
		return m.Status
	}
	return RoomStatus_RoomStatusMatch
}

func (m *Room) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (*Room) XXX_MessageName() string {
	return "models.Room"
}

type RoleInfo struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Nickname    string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level       int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId    int64  `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame int64  `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power       int64  `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	GuildId     string `protobuf:"bytes,7,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildName   string `protobuf:"bytes,8,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
}

func (m *RoleInfo) Reset()      { *m = RoleInfo{} }
func (*RoleInfo) ProtoMessage() {}
func (*RoleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d854a21a96bc26e9, []int{1}
}
func (m *RoleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleInfo.Merge(m, src)
}
func (m *RoleInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoleInfo proto.InternalMessageInfo

func (m *RoleInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoleInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *RoleInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RoleInfo) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *RoleInfo) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *RoleInfo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *RoleInfo) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *RoleInfo) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (*RoleInfo) XXX_MessageName() string {
	return "models.RoleInfo"
}

type RoomOpt struct {
	CanPartyInvite bool `protobuf:"varint,1,opt,name=can_party_invite,json=canPartyInvite,proto3" json:"can_party_invite,omitempty"`
	IsOpen         bool `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	IsAutoInvite   bool `protobuf:"varint,3,opt,name=is_auto_invite,json=isAutoInvite,proto3" json:"is_auto_invite,omitempty"`
	SendLag        bool `protobuf:"varint,4,opt,name=send_lag,json=sendLag,proto3" json:"send_lag,omitempty"`
	SendGuild      bool `protobuf:"varint,5,opt,name=send_guild,json=sendGuild,proto3" json:"send_guild,omitempty"`
}

func (m *RoomOpt) Reset()      { *m = RoomOpt{} }
func (*RoomOpt) ProtoMessage() {}
func (*RoomOpt) Descriptor() ([]byte, []int) {
	return fileDescriptor_d854a21a96bc26e9, []int{2}
}
func (m *RoomOpt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomOpt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomOpt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomOpt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomOpt.Merge(m, src)
}
func (m *RoomOpt) XXX_Size() int {
	return m.Size()
}
func (m *RoomOpt) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomOpt.DiscardUnknown(m)
}

var xxx_messageInfo_RoomOpt proto.InternalMessageInfo

func (m *RoomOpt) GetCanPartyInvite() bool {
	if m != nil {
		return m.CanPartyInvite
	}
	return false
}

func (m *RoomOpt) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (m *RoomOpt) GetIsAutoInvite() bool {
	if m != nil {
		return m.IsAutoInvite
	}
	return false
}

func (m *RoomOpt) GetSendLag() bool {
	if m != nil {
		return m.SendLag
	}
	return false
}

func (m *RoomOpt) GetSendGuild() bool {
	if m != nil {
		return m.SendGuild
	}
	return false
}

func (*RoomOpt) XXX_MessageName() string {
	return "models.RoomOpt"
}
func init() {
	proto.RegisterEnum("models.RoomStatus", RoomStatus_name, RoomStatus_value)
	proto.RegisterType((*Room)(nil), "models.Room")
	proto.RegisterType((*RoleInfo)(nil), "models.RoleInfo")
	proto.RegisterType((*RoomOpt)(nil), "models.RoomOpt")
}

func init() { proto.RegisterFile("proto/models/match.proto", fileDescriptor_d854a21a96bc26e9) }

var fileDescriptor_d854a21a96bc26e9 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x93, 0x3f, 0x6f, 0xd4, 0x30,
	0x18, 0xc6, 0x63, 0xd2, 0xe6, 0x8f, 0x5b, 0x5d, 0x4f, 0x06, 0x41, 0x0a, 0x22, 0xa4, 0x27, 0x86,
	0xa8, 0x12, 0x77, 0xd2, 0x31, 0x31, 0x96, 0xa1, 0x28, 0x12, 0xa5, 0xc8, 0x6c, 0x2c, 0x91, 0x89,
	0xdd, 0xd4, 0x22, 0xb1, 0xa3, 0xc4, 0xb9, 0x8a, 0x6f, 0xc1, 0xc7, 0x60, 0xe0, 0x83, 0x74, 0xec,
	0xd8, 0x11, 0x72, 0x42, 0x62, 0x64, 0x61, 0x47, 0xb6, 0x73, 0x5c, 0xc7, 0xe7, 0xf7, 0xbc, 0xf7,
	0xfa, 0x7d, 0xde, 0xf7, 0x02, 0xa3, 0xa6, 0x95, 0x4a, 0x2e, 0x6a, 0x49, 0x59, 0xd5, 0x2d, 0x6a,
	0xa2, 0x8a, 0xcb, 0xb9, 0x41, 0xc8, 0xb3, 0x6c, 0xf6, 0x17, 0xc0, 0x1d, 0x2c, 0x65, 0x8d, 0x1e,
	0x41, 0xbf, 0x95, 0xb2, 0xce, 0x39, 0x8d, 0x40, 0x02, 0x52, 0x17, 0x7b, 0x5a, 0x66, 0x14, 0x1d,
	0xc2, 0x40, 0x5e, 0x09, 0xd6, 0x6a, 0xe7, 0x5e, 0x02, 0xd2, 0x10, 0xfb, 0x46, 0x67, 0x14, 0x3d,
	0x85, 0x90, 0xf6, 0xa2, 0x64, 0x52, 0x68, 0xd3, 0x4d, 0x40, 0x8a, 0x70, 0x38, 0x92, 0x8c, 0xa2,
	0x39, 0x0c, 0x5b, 0x59, 0xb1, 0x4c, 0x5c, 0xc8, 0x2e, 0xda, 0x49, 0xdc, 0x74, 0x6f, 0x39, 0x9d,
	0xdb, 0x77, 0xe7, 0x78, 0x34, 0xf0, 0xb6, 0x04, 0x1d, 0x41, 0x57, 0x36, 0x2a, 0xda, 0x4d, 0x40,
	0xba, 0xb7, 0x3c, 0xd8, 0x56, 0xca, 0xfa, 0xbc, 0x51, 0x58, 0x7b, 0xe8, 0x18, 0x7a, 0x9d, 0x22,
	0xaa, 0xef, 0x22, 0x2f, 0x01, 0xe9, 0x64, 0x89, 0xee, 0x56, 0x7d, 0x30, 0x0e, 0x1e, 0x2b, 0xd0,
	0x13, 0x18, 0xf6, 0x0d, 0x25, 0x8a, 0xe5, 0x44, 0x45, 0xbe, 0xc9, 0x14, 0x58, 0x70, 0xa2, 0x66,
	0xbf, 0x00, 0x0c, 0x36, 0x33, 0xd8, 0xec, 0x15, 0xdb, 0x64, 0x0f, 0x75, 0xf6, 0x8a, 0x65, 0x14,
	0x3d, 0x86, 0x81, 0xe0, 0xc5, 0x67, 0x41, 0x6a, 0x36, 0x66, 0xff, 0xaf, 0xd1, 0x03, 0xb8, 0x5b,
	0xb1, 0x15, 0xab, 0x4c, 0x6e, 0x17, 0x5b, 0xa1, 0x1f, 0x25, 0x2b, 0xa2, 0x88, 0x59, 0xd7, 0x8e,
	0x7d, 0xd4, 0x82, 0x8c, 0xa2, 0x23, 0xb8, 0x3f, 0x9a, 0x17, 0xad, 0x6e, 0xb9, 0x6b, 0xfc, 0x3d,
	0xcb, 0x4e, 0xdb, 0xb1, 0x6b, 0x23, 0xaf, 0x58, 0x6b, 0xf2, 0xb9, 0xd8, 0x0a, 0x7d, 0x83, 0xb2,
	0xe7, 0x15, 0xd5, 0x4d, 0x7d, 0x7b, 0x03, 0xa3, 0xed, 0x0d, 0xac, 0x65, 0x86, 0x0c, 0x8c, 0x19,
	0x1a, 0xf2, 0x8e, 0xd4, 0x6c, 0xf6, 0x1d, 0x40, 0x7f, 0xdc, 0x20, 0x4a, 0xe1, 0xb4, 0x20, 0x22,
	0x6f, 0x48, 0xab, 0xbe, 0xe4, 0x5c, 0xac, 0xb8, 0x62, 0x26, 0x6f, 0x80, 0x27, 0x05, 0x11, 0xef,
	0x35, 0xce, 0x0c, 0xd5, 0x0b, 0xe1, 0x5d, 0x2e, 0x1b, 0x26, 0x4c, 0xec, 0x00, 0x7b, 0xbc, 0x3b,
	0x6f, 0x98, 0x40, 0xcf, 0xe1, 0x84, 0x77, 0x39, 0xe9, 0x95, 0xdc, 0x34, 0x70, 0x8d, 0xbf, 0xcf,
	0xbb, 0x93, 0x5e, 0xc9, 0xf1, 0xe7, 0x87, 0x30, 0xe8, 0x98, 0xa0, 0x79, 0x45, 0x4a, 0xb3, 0x83,
	0x00, 0xfb, 0x5a, 0xbf, 0x25, 0xa5, 0x1e, 0xd7, 0x58, 0x66, 0x42, 0xb3, 0x80, 0x00, 0x87, 0x9a,
	0xbc, 0xd1, 0xe0, 0xf8, 0x15, 0x84, 0xdb, 0x4b, 0xa2, 0xfb, 0xf0, 0x60, 0xab, 0xce, 0xf4, 0xbf,
	0x77, 0xea, 0xa0, 0x87, 0x10, 0x6d, 0xe1, 0x29, 0x2f, 0x2f, 0x15, 0x17, 0xe5, 0x14, 0xbc, 0x3e,
	0xbb, 0xfd, 0x19, 0x3b, 0xdf, 0x86, 0x18, 0x5c, 0x0f, 0x31, 0xb8, 0x19, 0x62, 0xf0, 0x63, 0x88,
	0xc1, 0xef, 0x21, 0x76, 0xfe, 0x0c, 0x31, 0xf8, 0xba, 0x8e, 0x9d, 0xeb, 0x75, 0x0c, 0x6e, 0xd6,
	0xb1, 0x73, 0xbb, 0x8e, 0x9d, 0x8f, 0xcf, 0x0a, 0xc9, 0xc5, 0x8b, 0x8e, 0xb5, 0x2b, 0xd6, 0x2e,
	0x0a, 0x59, 0xd7, 0x52, 0x2c, 0xee, 0x7e, 0x2c, 0x9f, 0x3c, 0xa3, 0x5e, 0xfe, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0xad, 0x79, 0xc0, 0xdd, 0x43, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoom.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoomOpt.Get().(proto.Message)
	})
}

var poolRoom = &sync.Pool{New: func() interface{} { return &Room{} }}

func (m *Room) ReleasePool() { m.Reset(); poolRoom.Put(m); m = nil }

var poolRoleInfo = &sync.Pool{New: func() interface{} { return &RoleInfo{} }}

func (m *RoleInfo) ReleasePool() { m.Reset(); poolRoleInfo.Put(m); m = nil }

var poolRoomOpt = &sync.Pool{New: func() interface{} { return &RoomOpt{} }}

func (m *RoomOpt) ReleasePool() { m.Reset(); poolRoomOpt.Put(m); m = nil }
func (x RoomStatus) String() string {
	s, ok := RoomStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Room) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Room)
	if !ok {
		that2, ok := that.(Room)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	if this.DungeonId != that1.DungeonId {
		return false
	}
	if len(this.RoleInfos) != len(that1.RoleInfos) {
		return false
	}
	for i := range this.RoleInfos {
		if !this.RoleInfos[i].Equal(that1.RoleInfos[i]) {
			return false
		}
	}
	if !this.Opt.Equal(that1.Opt) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.UpdateAt != that1.UpdateAt {
		return false
	}
	return true
}
func (this *RoleInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleInfo)
	if !ok {
		that2, ok := that.(RoleInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.GuildName != that1.GuildName {
		return false
	}
	return true
}
func (this *RoomOpt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoomOpt)
	if !ok {
		that2, ok := that.(RoomOpt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CanPartyInvite != that1.CanPartyInvite {
		return false
	}
	if this.IsOpen != that1.IsOpen {
		return false
	}
	if this.IsAutoInvite != that1.IsAutoInvite {
		return false
	}
	if this.SendLag != that1.SendLag {
		return false
	}
	if this.SendGuild != that1.SendGuild {
		return false
	}
	return true
}
func (m *Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Room) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Room) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateAt != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Opt != nil {
		{
			size, err := m.Opt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RoleInfos) > 0 {
		for iNdEx := len(m.RoleInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoleInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.DungeonId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64((uint64(m.DungeonId)<<1)^uint64((m.DungeonId>>63))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RoomId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuildName) > 0 {
		i -= len(m.GuildName)
		copy(dAtA[i:], m.GuildName)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.GuildName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Power != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomOpt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomOpt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomOpt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SendGuild {
		i--
		if m.SendGuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SendLag {
		i--
		if m.SendLag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsAutoInvite {
		i--
		if m.IsAutoInvite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.CanPartyInvite {
		i--
		if m.CanPartyInvite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovMatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Room) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoomId != 0 {
		w.RawByte('"')
		w.RawString("room_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoomId))
		needWriteComma = true
	}
	if m.OwnerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	if m.DungeonId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dungeon_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("roleInfos")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleInfos == nil {
		w.RawString("null")
	} else if len(m.RoleInfos) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleInfos {
			v.JsonBytes(w)
			if i != len(m.RoleInfos)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("opt")
	w.RawByte('"')
	w.RawByte(':')
	m.Opt.JsonBytes(w)
	needWriteComma = true
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.UpdateAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("update_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UpdateAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.GuildName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildName)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoomOpt) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CanPartyInvite {
		w.RawByte('"')
		w.RawString("can_party_invite")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.CanPartyInvite)
		needWriteComma = true
	}
	if m.IsOpen {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_open")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsOpen)
		needWriteComma = true
	}
	if m.IsAutoInvite {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_auto_invite")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAutoInvite)
		needWriteComma = true
	}
	if m.SendLag {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("send_lag")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.SendLag)
		needWriteComma = true
	}
	if m.SendGuild {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("send_guild")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.SendGuild)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Room) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Room) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Room) GoString() string {
	return m.String()
}

func (m *RoleInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleInfo) GoString() string {
	return m.String()
}

func (m *RoomOpt) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoomOpt) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoomOpt) GoString() string {
	return m.String()
}

func (m *Room) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovMatch(uint64(m.RoomId))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.DungeonId != 0 {
		n += 1 + sozMatch(uint64(m.DungeonId))
	}
	if len(m.RoleInfos) > 0 {
		for _, e := range m.RoleInfos {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	if m.Opt != nil {
		l = m.Opt.Size()
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMatch(uint64(m.Status))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovMatch(uint64(m.UpdateAt))
	}
	return n
}

func (m *RoleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovMatch(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovMatch(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovMatch(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovMatch(uint64(m.Power))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func (m *RoomOpt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanPartyInvite {
		n += 2
	}
	if m.IsOpen {
		n += 2
	}
	if m.IsAutoInvite {
		n += 2
	}
	if m.SendLag {
		n += 2
	}
	if m.SendGuild {
		n += 2
	}
	return n
}

func sovMatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMatch(x uint64) (n int) {
	return sovMatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.DungeonId = int64(v)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleInfos = append(m.RoleInfos, &RoleInfo{})
			if err := m.RoleInfos[len(m.RoleInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opt == nil {
				m.Opt = &RoomOpt{}
			}
			if err := m.Opt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RoomStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomOpt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomOpt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomOpt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPartyInvite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanPartyInvite = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoInvite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoInvite = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendLag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendLag = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendGuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendGuild = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMatch = fmt.Errorf("proto: unexpected end of group")
)
