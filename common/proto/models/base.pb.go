// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/base.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// message 的扩展
type MessageBase struct {
	Module string   `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *MessageBase) Reset()      { *m = MessageBase{} }
func (*MessageBase) ProtoMessage() {}
func (*MessageBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_129b3eb31e9b7f44, []int{0}
}
func (m *MessageBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBase.Merge(m, src)
}
func (m *MessageBase) XXX_Size() int {
	return m.Size()
}
func (m *MessageBase) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBase.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBase proto.InternalMessageInfo

func (m *MessageBase) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *MessageBase) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (*MessageBase) XXX_MessageName() string {
	return "models.MessageBase"
}

// 枚举的扩展结构体
type ErrorInfo struct {
	TipName   string `protobuf:"bytes,1,opt,name=tip_name,json=tipName,proto3" json:"tip_name,omitempty"`
	TipDesc   string `protobuf:"bytes,2,opt,name=tip_desc,json=tipDesc,proto3" json:"tip_desc,omitempty"`
	ErrorCode int64  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Module    string `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
}

func (m *ErrorInfo) Reset()      { *m = ErrorInfo{} }
func (*ErrorInfo) ProtoMessage() {}
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_129b3eb31e9b7f44, []int{1}
}
func (m *ErrorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorInfo.Merge(m, src)
}
func (m *ErrorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ErrorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorInfo proto.InternalMessageInfo

func (m *ErrorInfo) GetTipName() string {
	if m != nil {
		return m.TipName
	}
	return ""
}

func (m *ErrorInfo) GetTipDesc() string {
	if m != nil {
		return m.TipDesc
	}
	return ""
}

func (m *ErrorInfo) GetErrorCode() int64 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ErrorInfo) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (*ErrorInfo) XXX_MessageName() string {
	return "models.ErrorInfo"
}

var E_MessageBase = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MessageOptions)(nil),
	ExtensionType: (*MessageBase)(nil),
	Field:         50000,
	Name:          "models.message_base",
	Tag:           "bytes,50000,opt,name=message_base",
	Filename:      "proto/models/base.proto",
}

var E_ErrorInfo = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
	ExtensionType: (*ErrorInfo)(nil),
	Field:         50001,
	Name:          "models.error_info",
	Tag:           "bytes,50001,opt,name=error_info",
	Filename:      "proto/models/base.proto",
}

func init() {
	proto.RegisterType((*MessageBase)(nil), "models.MessageBase")
	proto.RegisterType((*ErrorInfo)(nil), "models.ErrorInfo")
	proto.RegisterExtension(E_MessageBase)
	proto.RegisterExtension(E_ErrorInfo)
}

func init() { proto.RegisterFile("proto/models/base.proto", fileDescriptor_129b3eb31e9b7f44) }

var fileDescriptor_129b3eb31e9b7f44 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0x73, 0xad, 0x54, 0x7b, 0x75, 0x31, 0x82, 0x46, 0xc1, 0x6b, 0xec, 0xd4, 0xc5, 0x04,
	0x74, 0x2b, 0xb8, 0x54, 0x3b, 0x38, 0x54, 0xa1, 0xa0, 0xa0, 0x4b, 0x49, 0x93, 0xb7, 0x25, 0x90,
	0xcb, 0x1b, 0xee, 0x12, 0xf1, 0x13, 0x38, 0xfb, 0x31, 0xfc, 0x28, 0x1d, 0xeb, 0xd6, 0x51, 0x93,
	0xc5, 0xd1, 0x8f, 0x20, 0x97, 0x3f, 0x35, 0xe0, 0x76, 0xcf, 0x73, 0x79, 0x9f, 0x3c, 0xbf, 0xf7,
	0xe8, 0x61, 0x24, 0x30, 0x46, 0x9b, 0xa3, 0x07, 0x81, 0xb4, 0x67, 0x8e, 0x04, 0x2b, 0x77, 0xf4,
	0x56, 0x61, 0x1d, 0x9b, 0x0b, 0xc4, 0x45, 0x00, 0x76, 0xee, 0xce, 0x92, 0xb9, 0xed, 0x81, 0x74,
	0x85, 0x1f, 0xc5, 0x28, 0x8a, 0x2f, 0x7b, 0x97, 0xb4, 0x33, 0x06, 0x29, 0x9d, 0x05, 0x0c, 0x1d,
	0x09, 0xfa, 0x01, 0x55, 0xa3, 0x49, 0x00, 0x06, 0x31, 0x49, 0xbf, 0x3d, 0x29, 0x95, 0xf2, 0x41,
	0x08, 0x14, 0xd2, 0x68, 0x98, 0x4d, 0xe5, 0x17, 0xaa, 0xf7, 0x42, 0xdb, 0x23, 0x75, 0xba, 0x09,
	0xe7, 0xa8, 0x1f, 0xd1, 0x9d, 0xd8, 0x8f, 0xa6, 0xa1, 0xc3, 0xab, 0xf1, 0xed, 0xd8, 0x8f, 0x6e,
	0x1d, 0x0e, 0xd5, 0x95, 0xfa, 0xbd, 0xd1, 0xd8, 0x5c, 0x5d, 0x83, 0x74, 0xf5, 0x13, 0x4a, 0xf3,
	0xb0, 0xa9, 0x8b, 0x1e, 0x18, 0x4d, 0x93, 0xf4, 0x9b, 0x93, 0x76, 0xee, 0x5c, 0xa1, 0x57, 0x6f,
	0xb4, 0x55, 0x6f, 0x34, 0x78, 0xa4, 0xbb, 0xbc, 0x28, 0x3e, 0x55, 0xe0, 0x7a, 0xd7, 0x2a, 0x58,
	0xad, 0x8a, 0xd5, 0x2a, 0xb9, 0xee, 0xa2, 0xd8, 0xc7, 0x50, 0x1a, 0xab, 0x57, 0x95, 0xdd, 0x39,
	0xdf, 0xb7, 0x8a, 0xe5, 0x58, 0x35, 0xee, 0x49, 0x87, 0xff, 0x89, 0xc1, 0x7d, 0xd5, 0xc8, 0x57,
	0x54, 0xa7, 0xff, 0x82, 0x47, 0x61, 0xc2, 0x1f, 0x9c, 0x20, 0xd9, 0x44, 0x7f, 0x94, 0xd1, 0x7b,
	0x55, 0xf4, 0x66, 0x27, 0x25, 0x89, 0x3a, 0x0e, 0xc7, 0xeb, 0x2f, 0xa6, 0xbd, 0xa7, 0x8c, 0x2c,
	0x53, 0x46, 0x56, 0x29, 0x23, 0x9f, 0x29, 0x23, 0xdf, 0x29, 0xd3, 0x7e, 0x52, 0x46, 0xde, 0x32,
	0xa6, 0x2d, 0x33, 0x46, 0x56, 0x19, 0xd3, 0xd6, 0x19, 0xd3, 0x9e, 0xba, 0x2e, 0xfa, 0xe1, 0x99,
	0x04, 0xf1, 0x0c, 0xc2, 0x76, 0x91, 0x73, 0x0c, 0xed, 0xfa, 0x73, 0xcf, 0x5a, 0xb9, 0xba, 0xf8,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x21, 0xf4, 0xef, 0x05, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMessageBase.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolErrorInfo.Get().(proto.Message)
	})
}

var poolMessageBase = &sync.Pool{New: func() interface{} { return &MessageBase{} }}

func (m *MessageBase) ReleasePool() { m.Reset(); poolMessageBase.Put(m); m = nil }

var poolErrorInfo = &sync.Pool{New: func() interface{} { return &ErrorInfo{} }}

func (m *ErrorInfo) ReleasePool() { m.Reset(); poolErrorInfo.Put(m); m = nil }
func (this *MessageBase) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageBase)
	if !ok {
		that2, ok := that.(MessageBase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Module != that1.Module {
		return false
	}
	if len(this.Errors) != len(that1.Errors) {
		return false
	}
	for i := range this.Errors {
		if this.Errors[i] != that1.Errors[i] {
			return false
		}
	}
	return true
}
func (this *ErrorInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorInfo)
	if !ok {
		that2, ok := that.(ErrorInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TipName != that1.TipName {
		return false
	}
	if this.TipDesc != that1.TipDesc {
		return false
	}
	if this.ErrorCode != that1.ErrorCode {
		return false
	}
	if this.Module != that1.Module {
		return false
	}
	return true
}
func (m *MessageBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintBase(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintBase(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintBase(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x22
	}
	if m.ErrorCode != 0 {
		i = encodeVarintBase(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TipDesc) > 0 {
		i -= len(m.TipDesc)
		copy(dAtA[i:], m.TipDesc)
		i = encodeVarintBase(dAtA, i, uint64(len(m.TipDesc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TipName) > 0 {
		i -= len(m.TipName)
		copy(dAtA[i:], m.TipName)
		i = encodeVarintBase(dAtA, i, uint64(len(m.TipName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	offset -= sovBase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MessageBase) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Module != "" {
		w.RawByte('"')
		w.RawString("module")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Module)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("errors")
	w.RawByte('"')
	w.RawByte(':')
	if m.Errors == nil {
		w.RawString("null")
	} else if len(m.Errors) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Errors {
			w.String(v)
			if i != len(m.Errors)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ErrorInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TipName != "" {
		w.RawByte('"')
		w.RawString("tip_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TipName)
		needWriteComma = true
	}
	if m.TipDesc != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("tip_desc")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TipDesc)
		needWriteComma = true
	}
	if m.ErrorCode != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("error_code")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ErrorCode))
		needWriteComma = true
	}
	if m.Module != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("module")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Module)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MessageBase) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MessageBase) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MessageBase) GoString() string {
	return m.String()
}

func (m *ErrorInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ErrorInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ErrorInfo) GoString() string {
	return m.String()
}

func (m *MessageBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovBase(uint64(l))
		}
	}
	return n
}

func (m *ErrorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TipName)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.TipDesc)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovBase(uint64(m.ErrorCode))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func sovBase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TipName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TipName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TipDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TipDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBase = fmt.Errorf("proto: unexpected end of group")
)
