// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/achievement.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AchievementView struct {
	Id  int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Typ int64 `protobuf:"varint,2,opt,name=typ,proto3" json:"typ,omitempty"`
	// 当前完成档位
	CurrGear int64 `protobuf:"varint,3,opt,name=curr_gear,json=currGear,proto3" json:"curr_gear,omitempty"`
	// 当前领取档位
	CollectedGear int64 `protobuf:"varint,4,opt,name=collected_gear,json=collectedGear,proto3" json:"collected_gear,omitempty"`
	// 总档位
	TotalGear int64 `protobuf:"varint,5,opt,name=total_gear,json=totalGear,proto3" json:"total_gear,omitempty"`
	// 当前数值
	CurrCnt int64 `protobuf:"varint,6,opt,name=curr_cnt,json=currCnt,proto3" json:"curr_cnt,omitempty"`
	// 是否全部完成
	IsFinished bool `protobuf:"varint,7,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	// 完成时间
	DoneTime int64 `protobuf:"varint,8,opt,name=done_time,json=doneTime,proto3" json:"done_time,omitempty"`
	// 是否有未读
	HasUnread bool `protobuf:"varint,9,opt,name=has_unread,json=hasUnread,proto3" json:"has_unread,omitempty"`
}

func (m *AchievementView) Reset()      { *m = AchievementView{} }
func (*AchievementView) ProtoMessage() {}
func (*AchievementView) Descriptor() ([]byte, []int) {
	return fileDescriptor_70a1acda7168fa30, []int{0}
}
func (m *AchievementView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchievementView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchievementView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AchievementView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchievementView.Merge(m, src)
}
func (m *AchievementView) XXX_Size() int {
	return m.Size()
}
func (m *AchievementView) XXX_DiscardUnknown() {
	xxx_messageInfo_AchievementView.DiscardUnknown(m)
}

var xxx_messageInfo_AchievementView proto.InternalMessageInfo

func (m *AchievementView) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AchievementView) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *AchievementView) GetCurrGear() int64 {
	if m != nil {
		return m.CurrGear
	}
	return 0
}

func (m *AchievementView) GetCollectedGear() int64 {
	if m != nil {
		return m.CollectedGear
	}
	return 0
}

func (m *AchievementView) GetTotalGear() int64 {
	if m != nil {
		return m.TotalGear
	}
	return 0
}

func (m *AchievementView) GetCurrCnt() int64 {
	if m != nil {
		return m.CurrCnt
	}
	return 0
}

func (m *AchievementView) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

func (m *AchievementView) GetDoneTime() int64 {
	if m != nil {
		return m.DoneTime
	}
	return 0
}

func (m *AchievementView) GetHasUnread() bool {
	if m != nil {
		return m.HasUnread
	}
	return false
}

func (*AchievementView) XXX_MessageName() string {
	return "models.AchievementView"
}
func init() {
	proto.RegisterType((*AchievementView)(nil), "models.AchievementView")
}

func init() { proto.RegisterFile("proto/models/achievement.proto", fileDescriptor_70a1acda7168fa30) }

var fileDescriptor_70a1acda7168fa30 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x40, 0xe3, 0xf4, 0xbd, 0xb6, 0xf1, 0xd3, 0xeb, 0x7b, 0xca, 0x64, 0x84, 0x70, 0x2b, 0x24,
	0xa4, 0x2e, 0x90, 0x81, 0x2f, 0x00, 0x24, 0x98, 0x58, 0x2a, 0x60, 0x60, 0x89, 0x8c, 0x7d, 0x21,
	0x96, 0x12, 0xbb, 0xb2, 0xdd, 0x22, 0x7e, 0x02, 0xf1, 0x19, 0x7c, 0x4a, 0xc7, 0x8e, 0x1d, 0x21,
	0x59, 0x18, 0xf9, 0x04, 0x94, 0x1b, 0x04, 0x6c, 0xb9, 0xe7, 0x9c, 0xd8, 0x57, 0xa6, 0x7c, 0xee,
	0x6c, 0xb0, 0x59, 0x65, 0x15, 0x94, 0x3e, 0x13, 0xb2, 0xd0, 0xb0, 0x84, 0x0a, 0x4c, 0x38, 0x40,
	0x91, 0xf6, 0x3b, 0xb3, 0xfb, 0x18, 0xd3, 0x7f, 0x47, 0xdf, 0xf6, 0x4a, 0xc3, 0x7d, 0x3a, 0xa2,
	0xb1, 0x56, 0x8c, 0x4c, 0xc8, 0xb4, 0x37, 0x8b, 0xb5, 0x4a, 0xff, 0xd3, 0x5e, 0x78, 0x98, 0xb3,
	0x18, 0x41, 0xfb, 0x99, 0x6e, 0xd3, 0x44, 0x2e, 0x9c, 0xcb, 0xef, 0x40, 0x38, 0xd6, 0x43, 0x3e,
	0x6c, 0xc1, 0x19, 0x08, 0x97, 0xee, 0xd1, 0x91, 0xb4, 0x65, 0x09, 0x32, 0x80, 0xea, 0x8a, 0x5f,
	0x58, 0xfc, 0xfd, 0xa2, 0x98, 0xed, 0x50, 0x1a, 0x6c, 0x10, 0x65, 0x97, 0xfc, 0xc6, 0x24, 0x41,
	0x82, 0x7a, 0x8b, 0xe2, 0x89, 0xb9, 0x34, 0x81, 0xf5, 0x51, 0x0e, 0xda, 0xf9, 0xc4, 0x84, 0x74,
	0x4c, 0xff, 0x68, 0x9f, 0xdf, 0x6a, 0xa3, 0x7d, 0x01, 0x8a, 0x0d, 0x26, 0x64, 0x3a, 0x9c, 0x51,
	0xed, 0x4f, 0x3f, 0x49, 0xbb, 0x9e, 0xb2, 0x06, 0xf2, 0xa0, 0x2b, 0x60, 0xc3, 0x6e, 0xbd, 0x16,
	0x5c, 0xe8, 0x0a, 0xda, 0x7b, 0x0b, 0xe1, 0xf3, 0x85, 0x71, 0x20, 0x14, 0x4b, 0xf0, 0xe7, 0xa4,
	0x10, 0xfe, 0x12, 0xc1, 0xf1, 0xf9, 0xe6, 0x95, 0x47, 0xcf, 0x35, 0x27, 0xab, 0x9a, 0x93, 0x75,
	0xcd, 0xc9, 0x4b, 0xcd, 0xc9, 0x5b, 0xcd, 0xa3, 0xf7, 0x9a, 0x93, 0xa7, 0x86, 0x47, 0xab, 0x86,
	0x93, 0x75, 0xc3, 0xa3, 0x4d, 0xc3, 0xa3, 0xeb, 0xb1, 0xb4, 0xda, 0xec, 0x7b, 0x70, 0x4b, 0x70,
	0x99, 0xb4, 0x55, 0x65, 0x4d, 0xf6, 0xf3, 0xe5, 0x6f, 0xfa, 0x38, 0x1d, 0x7e, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xc7, 0x0f, 0x66, 0x3b, 0x90, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievementView.Get().(proto.Message)
	})
}

var poolAchievementView = &sync.Pool{New: func() interface{} { return &AchievementView{} }}

func (m *AchievementView) ReleasePool() { m.Reset(); poolAchievementView.Put(m); m = nil }
func (this *AchievementView) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AchievementView)
	if !ok {
		that2, ok := that.(AchievementView)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.CurrGear != that1.CurrGear {
		return false
	}
	if this.CollectedGear != that1.CollectedGear {
		return false
	}
	if this.TotalGear != that1.TotalGear {
		return false
	}
	if this.CurrCnt != that1.CurrCnt {
		return false
	}
	if this.IsFinished != that1.IsFinished {
		return false
	}
	if this.DoneTime != that1.DoneTime {
		return false
	}
	if this.HasUnread != that1.HasUnread {
		return false
	}
	return true
}
func (m *AchievementView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchievementView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AchievementView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasUnread {
		i--
		if m.HasUnread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.DoneTime != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.DoneTime))
		i--
		dAtA[i] = 0x40
	}
	if m.IsFinished {
		i--
		if m.IsFinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CurrCnt != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.CurrCnt))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalGear != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.TotalGear))
		i--
		dAtA[i] = 0x28
	}
	if m.CollectedGear != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.CollectedGear))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrGear != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.CurrGear))
		i--
		dAtA[i] = 0x18
	}
	if m.Typ != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAchievement(dAtA []byte, offset int, v uint64) int {
	offset -= sovAchievement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *AchievementView) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.CurrGear != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("curr_gear")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurrGear))
		needWriteComma = true
	}
	if m.CollectedGear != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("collected_gear")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CollectedGear))
		needWriteComma = true
	}
	if m.TotalGear != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_gear")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalGear))
		needWriteComma = true
	}
	if m.CurrCnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("curr_cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurrCnt))
		needWriteComma = true
	}
	if m.IsFinished {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_finished")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsFinished)
		needWriteComma = true
	}
	if m.DoneTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("done_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DoneTime))
		needWriteComma = true
	}
	if m.HasUnread {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("has_unread")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.HasUnread)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *AchievementView) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *AchievementView) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *AchievementView) GoString() string {
	return m.String()
}

func (m *AchievementView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAchievement(uint64(m.Id))
	}
	if m.Typ != 0 {
		n += 1 + sovAchievement(uint64(m.Typ))
	}
	if m.CurrGear != 0 {
		n += 1 + sovAchievement(uint64(m.CurrGear))
	}
	if m.CollectedGear != 0 {
		n += 1 + sovAchievement(uint64(m.CollectedGear))
	}
	if m.TotalGear != 0 {
		n += 1 + sovAchievement(uint64(m.TotalGear))
	}
	if m.CurrCnt != 0 {
		n += 1 + sovAchievement(uint64(m.CurrCnt))
	}
	if m.IsFinished {
		n += 2
	}
	if m.DoneTime != 0 {
		n += 1 + sovAchievement(uint64(m.DoneTime))
	}
	if m.HasUnread {
		n += 2
	}
	return n
}

func sovAchievement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAchievement(x uint64) (n int) {
	return sovAchievement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AchievementView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchievementView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchievementView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrGear", wireType)
			}
			m.CurrGear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrGear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedGear", wireType)
			}
			m.CollectedGear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectedGear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGear", wireType)
			}
			m.TotalGear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrCnt", wireType)
			}
			m.CurrCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrCnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFinished = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneTime", wireType)
			}
			m.DoneTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoneTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasUnread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasUnread = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAchievement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAchievement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAchievement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAchievement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAchievement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAchievement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAchievement = fmt.Errorf("proto: unexpected end of group")
)
