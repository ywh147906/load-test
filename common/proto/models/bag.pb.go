// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/models/bag.proto

package models

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ItemType int32

const (
	ItemType_Resource ItemType = 0
	ItemType_Material ItemType = 1
	ItemType_drug     ItemType = 2
	ItemType_Special  ItemType = 3
)

var ItemType_name = map[int32]string{
	0: "Resource",
	1: "Material",
	2: "drug",
	3: "Special",
}

var ItemType_value = map[string]int32{
	"Resource": 0,
	"Material": 1,
	"drug":     2,
	"Special":  3,
}

func (ItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bc7200f1b43de09c, []int{0}
}

type ExchangeType int32

const (
	ExchangeType_All             ExchangeType = 0
	ExchangeType_RandomN         ExchangeType = 1
	ExchangeType_ChooseOne       ExchangeType = 2
	ExchangeType_RandomNoReplace ExchangeType = 3
)

var ExchangeType_name = map[int32]string{
	0: "All",
	1: "RandomN",
	2: "ChooseOne",
	3: "RandomNoReplace",
}

var ExchangeType_value = map[string]int32{
	"All":             0,
	"RandomN":         1,
	"ChooseOne":       2,
	"RandomNoReplace": 3,
}

func (ExchangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bc7200f1b43de09c, []int{1}
}

type Bag struct {
	Item       []*Item       `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty"`
	Equipment  []*Equipment  `protobuf:"bytes,2,rep,name=equipment,proto3" json:"equipment,omitempty"`
	Relics     []*Relics     `protobuf:"bytes,3,rep,name=relics,proto3" json:"relics,omitempty"`
	SkillStone []*SkillStone `protobuf:"bytes,4,rep,name=skill_stone,json=skillStone,proto3" json:"skill_stone,omitempty"`
	TalentRune []*TalentRune `protobuf:"bytes,5,rep,name=talent_rune,json=talentRune,proto3" json:"talent_rune,omitempty"`
}

func (m *Bag) Reset()      { *m = Bag{} }
func (*Bag) ProtoMessage() {}
func (*Bag) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc7200f1b43de09c, []int{0}
}
func (m *Bag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bag.Merge(m, src)
}
func (m *Bag) XXX_Size() int {
	return m.Size()
}
func (m *Bag) XXX_DiscardUnknown() {
	xxx_messageInfo_Bag.DiscardUnknown(m)
}

var xxx_messageInfo_Bag proto.InternalMessageInfo

func (m *Bag) GetItem() []*Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *Bag) GetEquipment() []*Equipment {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *Bag) GetRelics() []*Relics {
	if m != nil {
		return m.Relics
	}
	return nil
}

func (m *Bag) GetSkillStone() []*SkillStone {
	if m != nil {
		return m.SkillStone
	}
	return nil
}

func (m *Bag) GetTalentRune() []*TalentRune {
	if m != nil {
		return m.TalentRune
	}
	return nil
}

func (*Bag) XXX_MessageName() string {
	return "models.Bag"
}

// 道具信息
type Item struct {
	// 道具ID
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// 数量
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// 过期
	Expire int64 `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
	// 锁定
	Lock bool `protobuf:"varint,4,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *Item) Reset()      { *m = Item{} }
func (*Item) ProtoMessage() {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc7200f1b43de09c, []int{1}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Item) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Item) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Item) GetLock() bool {
	if m != nil {
		return m.Lock
	}
	return false
}

func (*Item) XXX_MessageName() string {
	return "models.Item"
}

type Items struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *Items) Reset()      { *m = Items{} }
func (*Items) ProtoMessage() {}
func (*Items) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc7200f1b43de09c, []int{2}
}
func (m *Items) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Items) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Items.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Items) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Items.Merge(m, src)
}
func (m *Items) XXX_Size() int {
	return m.Size()
}
func (m *Items) XXX_DiscardUnknown() {
	xxx_messageInfo_Items.DiscardUnknown(m)
}

var xxx_messageInfo_Items proto.InternalMessageInfo

func (m *Items) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*Items) XXX_MessageName() string {
	return "models.Items"
}

type BagConfig struct {
	Quality          int64 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	Capacity         int64 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	CapacityOccupied int64 `protobuf:"varint,3,opt,name=capacity_occupied,json=capacityOccupied,proto3" json:"capacity_occupied,omitempty"`
	BuyCount         int64 `protobuf:"varint,4,opt,name=buy_count,json=buyCount,proto3" json:"buy_count,omitempty"`
	UnlockTime       int64 `protobuf:"varint,5,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
}

func (m *BagConfig) Reset()      { *m = BagConfig{} }
func (*BagConfig) ProtoMessage() {}
func (*BagConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc7200f1b43de09c, []int{3}
}
func (m *BagConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BagConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BagConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BagConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BagConfig.Merge(m, src)
}
func (m *BagConfig) XXX_Size() int {
	return m.Size()
}
func (m *BagConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BagConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BagConfig proto.InternalMessageInfo

func (m *BagConfig) GetQuality() int64 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *BagConfig) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *BagConfig) GetCapacityOccupied() int64 {
	if m != nil {
		return m.CapacityOccupied
	}
	return 0
}

func (m *BagConfig) GetBuyCount() int64 {
	if m != nil {
		return m.BuyCount
	}
	return 0
}

func (m *BagConfig) GetUnlockTime() int64 {
	if m != nil {
		return m.UnlockTime
	}
	return 0
}

func (*BagConfig) XXX_MessageName() string {
	return "models.BagConfig"
}
func init() {
	proto.RegisterEnum("models.ItemType", ItemType_name, ItemType_value)
	proto.RegisterEnum("models.ExchangeType", ExchangeType_name, ExchangeType_value)
	proto.RegisterType((*Bag)(nil), "models.Bag")
	proto.RegisterType((*Item)(nil), "models.Item")
	proto.RegisterType((*Items)(nil), "models.Items")
	proto.RegisterType((*BagConfig)(nil), "models.BagConfig")
}

func init() { proto.RegisterFile("proto/models/bag.proto", fileDescriptor_bc7200f1b43de09c) }

var fileDescriptor_bc7200f1b43de09c = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xbd, 0x6e, 0xd4, 0x40,
	0x14, 0x85, 0x3d, 0xb1, 0xf7, 0xef, 0x6e, 0x00, 0x67, 0x40, 0xc1, 0x04, 0xe4, 0xac, 0xb6, 0x40,
	0x51, 0x22, 0xb2, 0x12, 0xa9, 0x29, 0x48, 0x14, 0x89, 0x14, 0x21, 0x92, 0x93, 0x8a, 0xc6, 0x9a,
	0x1d, 0x5f, 0x9c, 0x51, 0x6c, 0x8f, 0xe3, 0x1f, 0x94, 0x7d, 0x0b, 0x1e, 0x83, 0x82, 0x07, 0x49,
	0x99, 0x32, 0x25, 0x78, 0x1b, 0x44, 0xc5, 0x23, 0xa0, 0x99, 0x59, 0x2f, 0xac, 0x94, 0x6e, 0xce,
	0xf9, 0xce, 0x1d, 0xdf, 0x33, 0x92, 0x61, 0x33, 0x2f, 0x64, 0x25, 0x27, 0xa9, 0x8c, 0x30, 0x29,
	0x27, 0x53, 0x16, 0xef, 0x6b, 0x83, 0x76, 0x8d, 0xb3, 0xf5, 0x6a, 0x85, 0xe3, 0x75, 0x2d, 0xf2,
	0x14, 0xb3, 0xca, 0xa4, 0xb6, 0x5e, 0xac, 0xd0, 0x02, 0x13, 0xc1, 0xcb, 0x07, 0x51, 0xc5, 0x92,
	0xe5, 0xd4, 0xf8, 0x37, 0x01, 0xfb, 0x90, 0xc5, 0x74, 0x04, 0x8e, 0xa8, 0x30, 0xf5, 0xc8, 0xc8,
	0xde, 0x19, 0xbe, 0x5d, 0xdf, 0x37, 0xd9, 0xfd, 0x93, 0x0a, 0xd3, 0x40, 0x13, 0x3a, 0x81, 0xc1,
	0xf2, 0x93, 0xde, 0x9a, 0x8e, 0x6d, 0xb4, 0xb1, 0xe3, 0x16, 0x04, 0xff, 0x32, 0xf4, 0x35, 0x74,
	0xcd, 0x16, 0x9e, 0xad, 0xd3, 0x8f, 0xdb, 0x74, 0xa0, 0xdd, 0x60, 0x41, 0xe9, 0x01, 0x0c, 0xcb,
	0x2b, 0x91, 0x24, 0x61, 0x59, 0xc9, 0x0c, 0x3d, 0x47, 0x87, 0x69, 0x1b, 0x3e, 0x57, 0xe8, 0x5c,
	0x91, 0x00, 0xca, 0xe5, 0x59, 0x0d, 0x99, 0x1e, 0x61, 0x51, 0x67, 0xe8, 0x75, 0x56, 0x87, 0x2e,
	0x34, 0x0a, 0x6a, 0x35, 0x54, 0x2d, 0xcf, 0x63, 0x06, 0x8e, 0x2a, 0x44, 0x9f, 0x43, 0x4f, 0x55,
	0x0a, 0x45, 0xe4, 0x91, 0x11, 0xd9, 0xb1, 0x83, 0xae, 0x92, 0x27, 0x11, 0x7d, 0x06, 0x1d, 0x2e,
	0x6b, 0xdd, 0x4f, 0xd9, 0x46, 0xd0, 0x4d, 0xe8, 0xe2, 0x4d, 0x2e, 0x0a, 0xf4, 0x6c, 0x93, 0x36,
	0x8a, 0x52, 0x70, 0x12, 0xc9, 0xaf, 0x3c, 0x67, 0x44, 0x76, 0xfa, 0x81, 0x3e, 0x8f, 0xf7, 0xa0,
	0xa3, 0x3e, 0x51, 0xd2, 0x31, 0x74, 0xd4, 0xa5, 0xe5, 0x83, 0x2f, 0x6a, 0xd0, 0xf8, 0x3b, 0x81,
	0xc1, 0x21, 0x8b, 0x8f, 0x64, 0xf6, 0x59, 0xc4, 0xd4, 0x83, 0xde, 0x75, 0xcd, 0x12, 0x51, 0xcd,
	0x16, 0x5b, 0xb5, 0x92, 0x6e, 0x41, 0x9f, 0xb3, 0x9c, 0x71, 0x85, 0xcc, 0x66, 0x4b, 0x4d, 0xf7,
	0x60, 0xa3, 0x3d, 0x87, 0x92, 0xf3, 0x3a, 0x17, 0x18, 0x2d, 0xf6, 0x74, 0x5b, 0x70, 0xb6, 0xf0,
	0xe9, 0x4b, 0x18, 0x4c, 0xeb, 0x59, 0x68, 0x3a, 0x3a, 0xe6, 0xa6, 0x69, 0x3d, 0x3b, 0xd2, 0x35,
	0xb7, 0x61, 0x58, 0x67, 0xaa, 0x44, 0x58, 0x89, 0x54, 0x3d, 0xa9, 0xc2, 0x60, 0xac, 0x0b, 0x91,
	0xe2, 0xee, 0x3b, 0xe8, 0xab, 0xed, 0x2f, 0x66, 0x39, 0xd2, 0x75, 0xe8, 0x07, 0x58, 0xca, 0xba,
	0xe0, 0xe8, 0x5a, 0x4a, 0x9d, 0xb2, 0x0a, 0x0b, 0xc1, 0x12, 0x97, 0xd0, 0x3e, 0x38, 0x51, 0x51,
	0xc7, 0xee, 0x1a, 0x1d, 0x42, 0xef, 0x3c, 0x47, 0xae, 0x6c, 0x7b, 0xf7, 0x03, 0xac, 0x1f, 0xdf,
	0xf0, 0x4b, 0x96, 0xc5, 0xa8, 0xaf, 0xe8, 0x81, 0xfd, 0x3e, 0x49, 0x5c, 0x4b, 0xa5, 0x02, 0x96,
	0x45, 0x32, 0xfd, 0xe8, 0x12, 0xfa, 0x08, 0x06, 0x47, 0x97, 0x52, 0x96, 0x78, 0x96, 0xa1, 0xbb,
	0x46, 0x9f, 0xc2, 0x93, 0x05, 0x93, 0x01, 0xe6, 0x09, 0xe3, 0xe8, 0xda, 0x87, 0xa7, 0xf7, 0x3f,
	0x7d, 0xeb, 0x5b, 0xe3, 0x93, 0xdb, 0xc6, 0x27, 0x77, 0x8d, 0x4f, 0x7e, 0x34, 0x3e, 0xf9, 0xd5,
	0xf8, 0xd6, 0x9f, 0xc6, 0x27, 0x5f, 0xe7, 0xbe, 0x75, 0x3b, 0xf7, 0xc9, 0xdd, 0xdc, 0xb7, 0xee,
	0xe7, 0xbe, 0xf5, 0x69, 0x9b, 0x4b, 0x91, 0xbd, 0x29, 0xb1, 0xf8, 0x82, 0xc5, 0x84, 0xcb, 0x34,
	0x95, 0xd9, 0xe4, 0xff, 0x1f, 0x62, 0xda, 0xd5, 0xea, 0xe0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa9, 0x30, 0x69, 0xd1, 0x80, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBag.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolItem.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolItems.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBagConfig.Get().(proto.Message)
	})
}

var poolBag = &sync.Pool{New: func() interface{} { return &Bag{} }}

func (m *Bag) ReleasePool() { m.Reset(); poolBag.Put(m); m = nil }

var poolItem = &sync.Pool{New: func() interface{} { return &Item{} }}

func (m *Item) ReleasePool() { m.Reset(); poolItem.Put(m); m = nil }

var poolItems = &sync.Pool{New: func() interface{} { return &Items{} }}

func (m *Items) ReleasePool() { m.Reset(); poolItems.Put(m); m = nil }

var poolBagConfig = &sync.Pool{New: func() interface{} { return &BagConfig{} }}

func (m *BagConfig) ReleasePool() { m.Reset(); poolBagConfig.Put(m); m = nil }
func (x ItemType) String() string {
	s, ok := ItemType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ExchangeType) String() string {
	s, ok := ExchangeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Bag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bag)
	if !ok {
		that2, ok := that.(Bag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Item) != len(that1.Item) {
		return false
	}
	for i := range this.Item {
		if !this.Item[i].Equal(that1.Item[i]) {
			return false
		}
	}
	if len(this.Equipment) != len(that1.Equipment) {
		return false
	}
	for i := range this.Equipment {
		if !this.Equipment[i].Equal(that1.Equipment[i]) {
			return false
		}
	}
	if len(this.Relics) != len(that1.Relics) {
		return false
	}
	for i := range this.Relics {
		if !this.Relics[i].Equal(that1.Relics[i]) {
			return false
		}
	}
	if len(this.SkillStone) != len(that1.SkillStone) {
		return false
	}
	for i := range this.SkillStone {
		if !this.SkillStone[i].Equal(that1.SkillStone[i]) {
			return false
		}
	}
	if len(this.TalentRune) != len(that1.TalentRune) {
		return false
	}
	for i := range this.TalentRune {
		if !this.TalentRune[i].Equal(that1.TalentRune[i]) {
			return false
		}
	}
	return true
}
func (this *Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Item)
	if !ok {
		that2, ok := that.(Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Expire != that1.Expire {
		return false
	}
	if this.Lock != that1.Lock {
		return false
	}
	return true
}
func (this *Items) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Items)
	if !ok {
		that2, ok := that.(Items)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *BagConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BagConfig)
	if !ok {
		that2, ok := that.(BagConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Quality != that1.Quality {
		return false
	}
	if this.Capacity != that1.Capacity {
		return false
	}
	if this.CapacityOccupied != that1.CapacityOccupied {
		return false
	}
	if this.BuyCount != that1.BuyCount {
		return false
	}
	if this.UnlockTime != that1.UnlockTime {
		return false
	}
	return true
}
func (m *Bag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TalentRune) > 0 {
		for iNdEx := len(m.TalentRune) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TalentRune[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SkillStone) > 0 {
		for iNdEx := len(m.SkillStone) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SkillStone[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Relics) > 0 {
		for iNdEx := len(m.Relics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Equipment) > 0 {
		for iNdEx := len(m.Equipment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equipment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lock {
		i--
		if m.Lock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Expire != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Items) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Items) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Items) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBag(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BagConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BagConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnlockTime != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.UnlockTime))
		i--
		dAtA[i] = 0x28
	}
	if m.BuyCount != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.BuyCount))
		i--
		dAtA[i] = 0x20
	}
	if m.CapacityOccupied != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.CapacityOccupied))
		i--
		dAtA[i] = 0x18
	}
	if m.Capacity != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x10
	}
	if m.Quality != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBag(dAtA []byte, offset int, v uint64) int {
	offset -= sovBag(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Bag) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("item")
	w.RawByte('"')
	w.RawByte(':')
	if m.Item == nil {
		w.RawString("null")
	} else if len(m.Item) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Item {
			v.JsonBytes(w)
			if i != len(m.Item)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equipment")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equipment == nil {
		w.RawString("null")
	} else if len(m.Equipment) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Equipment {
			v.JsonBytes(w)
			if i != len(m.Equipment)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("relics")
	w.RawByte('"')
	w.RawByte(':')
	if m.Relics == nil {
		w.RawString("null")
	} else if len(m.Relics) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Relics {
			v.JsonBytes(w)
			if i != len(m.Relics)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill_stone")
	w.RawByte('"')
	w.RawByte(':')
	if m.SkillStone == nil {
		w.RawString("null")
	} else if len(m.SkillStone) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.SkillStone {
			v.JsonBytes(w)
			if i != len(m.SkillStone)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("talent_rune")
	w.RawByte('"')
	w.RawByte(':')
	if m.TalentRune == nil {
		w.RawString("null")
	} else if len(m.TalentRune) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.TalentRune {
			v.JsonBytes(w)
			if i != len(m.TalentRune)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Item) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.Expire != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expire")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Expire))
		needWriteComma = true
	}
	if m.Lock {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lock")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Lock)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Items) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BagConfig) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Quality != 0 {
		w.RawByte('"')
		w.RawString("quality")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Quality))
		needWriteComma = true
	}
	if m.Capacity != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("capacity")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Capacity))
		needWriteComma = true
	}
	if m.CapacityOccupied != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("capacity_occupied")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CapacityOccupied))
		needWriteComma = true
	}
	if m.BuyCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("buy_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuyCount))
		needWriteComma = true
	}
	if m.UnlockTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("unlock_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UnlockTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Bag) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Bag) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Bag) GoString() string {
	return m.String()
}

func (m *Item) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Item) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Item) GoString() string {
	return m.String()
}

func (m *Items) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Items) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Items) GoString() string {
	return m.String()
}

func (m *BagConfig) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BagConfig) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BagConfig) GoString() string {
	return m.String()
}

func (m *Bag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	if len(m.Equipment) > 0 {
		for _, e := range m.Equipment {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	if len(m.Relics) > 0 {
		for _, e := range m.Relics {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	if len(m.SkillStone) > 0 {
		for _, e := range m.SkillStone {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	if len(m.TalentRune) > 0 {
		for _, e := range m.TalentRune {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	if m.Expire != 0 {
		n += 1 + sovBag(uint64(m.Expire))
	}
	if m.Lock {
		n += 2
	}
	return n
}

func (m *Items) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *BagConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quality != 0 {
		n += 1 + sovBag(uint64(m.Quality))
	}
	if m.Capacity != 0 {
		n += 1 + sovBag(uint64(m.Capacity))
	}
	if m.CapacityOccupied != 0 {
		n += 1 + sovBag(uint64(m.CapacityOccupied))
	}
	if m.BuyCount != 0 {
		n += 1 + sovBag(uint64(m.BuyCount))
	}
	if m.UnlockTime != 0 {
		n += 1 + sovBag(uint64(m.UnlockTime))
	}
	return n
}

func sovBag(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBag(x uint64) (n int) {
	return sovBag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equipment = append(m.Equipment, &Equipment{})
			if err := m.Equipment[len(m.Equipment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relics = append(m.Relics, &Relics{})
			if err := m.Relics[len(m.Relics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillStone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillStone = append(m.SkillStone, &SkillStone{})
			if err := m.SkillStone[len(m.SkillStone)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentRune", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TalentRune = append(m.TalentRune, &TalentRune{})
			if err := m.TalentRune[len(m.TalentRune)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Items) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Items: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Items: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapacityOccupied", wireType)
			}
			m.CapacityOccupied = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CapacityOccupied |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCount", wireType)
			}
			m.BuyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTime", wireType)
			}
			m.UnlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBag
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBag
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBag
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBag        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBag          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBag = fmt.Errorf("proto: unexpected end of group")
)
