// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/auth/auth.proto

package auth

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Auth_Status int32

const (
	Auth_SUCCESS Auth_Status = 0
	Auth_Freeze  Auth_Status = 1
)

var Auth_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "Freeze",
}

var Auth_Status_value = map[string]int32{
	"SUCCESS": 0,
	"Freeze":  1,
}

func (Auth_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_82b5829f48cfb8e5, []int{0, 0}
}

type Auth struct {
}

func (m *Auth) Reset()      { *m = Auth{} }
func (*Auth) ProtoMessage() {}
func (*Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_82b5829f48cfb8e5, []int{0}
}
func (m *Auth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auth.Merge(m, src)
}
func (m *Auth) XXX_Size() int {
	return m.Size()
}
func (m *Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_Auth.DiscardUnknown(m)
}

var xxx_messageInfo_Auth proto.InternalMessageInfo

func (*Auth) XXX_MessageName() string {
	return "auth.Auth"
}

type Auth_LoginRequest struct {
	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ServerId    int64  `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	AppKey      string `protobuf:"bytes,3,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	Language    string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	RuleVersion string `protobuf:"bytes,5,opt,name=rule_version,json=ruleVersion,proto3" json:"rule_version,omitempty"`
	Version     int64  `protobuf:"zigzag64,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Auth_LoginRequest) Reset()      { *m = Auth_LoginRequest{} }
func (*Auth_LoginRequest) ProtoMessage() {}
func (*Auth_LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_82b5829f48cfb8e5, []int{0, 0}
}
func (m *Auth_LoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auth_LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auth_LoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auth_LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auth_LoginRequest.Merge(m, src)
}
func (m *Auth_LoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *Auth_LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Auth_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Auth_LoginRequest proto.InternalMessageInfo

func (m *Auth_LoginRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Auth_LoginRequest) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *Auth_LoginRequest) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *Auth_LoginRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Auth_LoginRequest) GetRuleVersion() string {
	if m != nil {
		return m.RuleVersion
	}
	return ""
}

func (m *Auth_LoginRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (*Auth_LoginRequest) XXX_MessageName() string {
	return "auth.Auth.LoginRequest"
}

type Auth_LoginResponse struct {
	RoleId string      `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Now    int64       `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
	Status Auth_Status `protobuf:"varint,3,opt,name=status,proto3,enum=auth.Auth_Status" json:"status,omitempty"`
}

func (m *Auth_LoginResponse) Reset()      { *m = Auth_LoginResponse{} }
func (*Auth_LoginResponse) ProtoMessage() {}
func (*Auth_LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82b5829f48cfb8e5, []int{0, 1}
}
func (m *Auth_LoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auth_LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auth_LoginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auth_LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auth_LoginResponse.Merge(m, src)
}
func (m *Auth_LoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *Auth_LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Auth_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Auth_LoginResponse proto.InternalMessageInfo

func (m *Auth_LoginResponse) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Auth_LoginResponse) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *Auth_LoginResponse) GetStatus() Auth_Status {
	if m != nil {
		return m.Status
	}
	return Auth_SUCCESS
}

func (*Auth_LoginResponse) XXX_MessageName() string {
	return "auth.Auth.LoginResponse"
}

type Auth_RedisLoginInfo struct {
	RoleId     string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Pwd        string `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
	FreezeTime int64  `protobuf:"varint,3,opt,name=freeze_time,json=freezeTime,proto3" json:"freeze_time,omitempty"`
}

func (m *Auth_RedisLoginInfo) Reset()      { *m = Auth_RedisLoginInfo{} }
func (*Auth_RedisLoginInfo) ProtoMessage() {}
func (*Auth_RedisLoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_82b5829f48cfb8e5, []int{0, 2}
}
func (m *Auth_RedisLoginInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auth_RedisLoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auth_RedisLoginInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auth_RedisLoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auth_RedisLoginInfo.Merge(m, src)
}
func (m *Auth_RedisLoginInfo) XXX_Size() int {
	return m.Size()
}
func (m *Auth_RedisLoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Auth_RedisLoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Auth_RedisLoginInfo proto.InternalMessageInfo

func (m *Auth_RedisLoginInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Auth_RedisLoginInfo) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

func (m *Auth_RedisLoginInfo) GetFreezeTime() int64 {
	if m != nil {
		return m.FreezeTime
	}
	return 0
}

func (*Auth_RedisLoginInfo) XXX_MessageName() string {
	return "auth.Auth.RedisLoginInfo"
}
func init() {
	proto.RegisterEnum("auth.Auth_Status", Auth_Status_name, Auth_Status_value)
	proto.RegisterType((*Auth)(nil), "auth.Auth")
	proto.RegisterType((*Auth_LoginRequest)(nil), "auth.Auth.LoginRequest")
	proto.RegisterType((*Auth_LoginResponse)(nil), "auth.Auth.LoginResponse")
	proto.RegisterType((*Auth_RedisLoginInfo)(nil), "auth.Auth.RedisLoginInfo")
}

func init() { proto.RegisterFile("proto/auth/auth.proto", fileDescriptor_82b5829f48cfb8e5) }

var fileDescriptor_82b5829f48cfb8e5 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0xae, 0xd2, 0x40,
	0x14, 0xee, 0x58, 0x2c, 0x97, 0xc3, 0xf5, 0x06, 0x27, 0x31, 0x36, 0x35, 0x8e, 0xdc, 0xbb, 0xc2,
	0x85, 0x90, 0xe8, 0x13, 0xe8, 0x8d, 0x26, 0x0d, 0xae, 0xa6, 0xea, 0xc2, 0x98, 0x34, 0x95, 0x1e,
	0xa0, 0x91, 0xce, 0xd4, 0x4e, 0x0b, 0xc1, 0xa7, 0xf0, 0x2d, 0xf4, 0x09, 0x7c, 0x06, 0x96, 0x2c,
	0x59, 0x6a, 0xbb, 0x71, 0xe9, 0x23, 0x98, 0x99, 0x01, 0x75, 0xe5, 0xa6, 0xf9, 0x7e, 0xce, 0xc9,
	0xf7, 0xe5, 0x74, 0xe0, 0x4e, 0x51, 0xca, 0x4a, 0x4e, 0x92, 0xba, 0x5a, 0x9a, 0xcf, 0xd8, 0x70,
	0xda, 0xd1, 0xf8, 0xea, 0x8b, 0x0b, 0x9d, 0xa7, 0x75, 0xb5, 0x0c, 0xbe, 0x11, 0x38, 0x7f, 0x29,
	0x17, 0x99, 0xe0, 0xf8, 0xb1, 0x46, 0x55, 0xd1, 0xbb, 0xd0, 0xad, 0x15, 0x96, 0x71, 0x96, 0xfa,
	0x64, 0x48, 0x46, 0x3d, 0xee, 0x69, 0x1a, 0xa6, 0xf4, 0x1e, 0xf4, 0x14, 0x96, 0x6b, 0x6b, 0xdd,
	0x18, 0x92, 0x91, 0xcb, 0xcf, 0xac, 0x10, 0xa6, 0x7a, 0x2b, 0x29, 0x8a, 0xf8, 0x03, 0x6e, 0x7d,
	0xd7, 0x6e, 0x25, 0x45, 0x31, 0xc5, 0x2d, 0x0d, 0xe0, 0x6c, 0x95, 0x88, 0x45, 0x9d, 0x2c, 0xd0,
	0xef, 0x18, 0xe7, 0x0f, 0xa7, 0x97, 0x70, 0x5e, 0xd6, 0x2b, 0x8c, 0xd7, 0x58, 0xaa, 0x4c, 0x0a,
	0xff, 0xa6, 0xf1, 0xfb, 0x5a, 0x7b, 0x63, 0x25, 0xea, 0x43, 0xf7, 0xe4, 0x7a, 0x43, 0x32, 0xa2,
	0xfc, 0x44, 0x03, 0x84, 0x5b, 0xc7, 0xde, 0xaa, 0x90, 0x42, 0xa1, 0xae, 0x50, 0xca, 0x15, 0xfe,
	0x53, 0x5c, 0xd3, 0x30, 0xa5, 0x03, 0x70, 0x85, 0xdc, 0x1c, 0x2b, 0x6b, 0x48, 0x1f, 0x82, 0xa7,
	0xaa, 0xa4, 0xaa, 0x95, 0x29, 0x7b, 0xf1, 0xf8, 0xf6, 0xd8, 0x1c, 0x48, 0x1f, 0x64, 0x1c, 0x19,
	0x83, 0x1f, 0x07, 0x82, 0x77, 0x70, 0xc1, 0x31, 0xcd, 0x94, 0xc9, 0x0a, 0xc5, 0x5c, 0xfe, 0x37,
	0xa7, 0xd8, 0xd8, 0xd3, 0xf4, 0xb8, 0x86, 0xf4, 0x01, 0xf4, 0xe7, 0x25, 0xe2, 0x27, 0x8c, 0xab,
	0x2c, 0x47, 0x13, 0xe6, 0x72, 0xb0, 0xd2, 0xab, 0x2c, 0xc7, 0xab, 0x4b, 0xf0, 0x6c, 0x1e, 0xed,
	0x43, 0x37, 0x7a, 0x7d, 0x7d, 0xfd, 0x3c, 0x8a, 0x06, 0x0e, 0x05, 0xf0, 0x5e, 0x98, 0xa1, 0x01,
	0x79, 0x36, 0x3d, 0xfc, 0x60, 0xce, 0xd7, 0x86, 0x91, 0x5d, 0xc3, 0xc8, 0xbe, 0x61, 0xe4, 0x7b,
	0xc3, 0xc8, 0xcf, 0x86, 0x39, 0xbf, 0x1a, 0x46, 0x3e, 0xb7, 0xcc, 0xd9, 0xb5, 0x8c, 0xec, 0x5b,
	0xe6, 0x1c, 0x5a, 0xe6, 0xbc, 0xbd, 0x3f, 0x93, 0x99, 0x78, 0x64, 0x7f, 0xcb, 0x64, 0x26, 0xf3,
	0x5c, 0x8a, 0xc9, 0xdf, 0x77, 0xf0, 0xde, 0x33, 0xf8, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf7, 0x13, 0x88, 0x41, 0x1c, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAuth.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAuth_LoginRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAuth_LoginResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAuth_RedisLoginInfo.Get().(proto.Message)
	})
}

var poolAuth = &sync.Pool{New: func() interface{} { return &Auth{} }}

func (m *Auth) ReleasePool() { m.Reset(); poolAuth.Put(m); m = nil }

var poolAuth_LoginRequest = &sync.Pool{New: func() interface{} { return &Auth_LoginRequest{} }}

func (m *Auth_LoginRequest) ReleasePool() { m.Reset(); poolAuth_LoginRequest.Put(m); m = nil }

var poolAuth_LoginResponse = &sync.Pool{New: func() interface{} { return &Auth_LoginResponse{} }}

func (m *Auth_LoginResponse) ReleasePool() { m.Reset(); poolAuth_LoginResponse.Put(m); m = nil }

var poolAuth_RedisLoginInfo = &sync.Pool{New: func() interface{} { return &Auth_RedisLoginInfo{} }}

func (m *Auth_RedisLoginInfo) ReleasePool() { m.Reset(); poolAuth_RedisLoginInfo.Put(m); m = nil }
func (x Auth_Status) String() string {
	s, ok := Auth_Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Auth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Auth)
	if !ok {
		that2, ok := that.(Auth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Auth_LoginRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Auth_LoginRequest)
	if !ok {
		that2, ok := that.(Auth_LoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.AppKey != that1.AppKey {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	if this.RuleVersion != that1.RuleVersion {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *Auth_LoginResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Auth_LoginResponse)
	if !ok {
		that2, ok := that.(Auth_LoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Now != that1.Now {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *Auth_RedisLoginInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Auth_RedisLoginInfo)
	if !ok {
		that2, ok := that.(Auth_RedisLoginInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Pwd != that1.Pwd {
		return false
	}
	if this.FreezeTime != that1.FreezeTime {
		return false
	}
	return true
}
func (m *Auth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Auth_LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auth_LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auth_LoginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintAuth(dAtA, i, uint64((uint64(m.Version)<<1)^uint64((m.Version>>63))))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RuleVersion) > 0 {
		i -= len(m.RuleVersion)
		copy(dAtA[i:], m.RuleVersion)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.RuleVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ServerId != 0 {
		i = encodeVarintAuth(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Auth_LoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auth_LoginResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auth_LoginResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintAuth(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Now != 0 {
		i = encodeVarintAuth(dAtA, i, uint64(m.Now))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Auth_RedisLoginInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auth_RedisLoginInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auth_RedisLoginInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FreezeTime != 0 {
		i = encodeVarintAuth(dAtA, i, uint64(m.FreezeTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Pwd) > 0 {
		i -= len(m.Pwd)
		copy(dAtA[i:], m.Pwd)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Pwd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintAuth(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuth(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Auth) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *Auth_LoginRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UserId != "" {
		w.RawByte('"')
		w.RawString("user_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UserId)
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.AppKey != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("app_key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AppKey)
		needWriteComma = true
	}
	if m.Language != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Language)
		needWriteComma = true
	}
	if m.RuleVersion != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rule_version")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RuleVersion)
		needWriteComma = true
	}
	if m.Version != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("version")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Version))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Auth_LoginResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Now != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("now")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Now))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Auth_RedisLoginInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Pwd != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pwd")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Pwd)
		needWriteComma = true
	}
	if m.FreezeTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("freeze_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreezeTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Auth) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.Buffer.Buf, nil
}
func (m *Auth) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}

func (m *Auth_LoginRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.Buffer.Buf, nil
}
func (m *Auth_LoginRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}

func (m *Auth_LoginResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.Buffer.Buf, nil
}
func (m *Auth_LoginResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}

func (m *Auth_RedisLoginInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.Buffer.Buf, nil
}
func (m *Auth_RedisLoginInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}

func (m *Auth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Auth_LoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovAuth(uint64(m.ServerId))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.RuleVersion)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sozAuth(uint64(m.Version))
	}
	return n
}

func (m *Auth_LoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Now != 0 {
		n += 1 + sovAuth(uint64(m.Now))
	}
	if m.Status != 0 {
		n += 1 + sovAuth(uint64(m.Status))
	}
	return n
}

func (m *Auth_RedisLoginInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Pwd)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.FreezeTime != 0 {
		n += 1 + sovAuth(uint64(m.FreezeTime))
	}
	return n
}

func sovAuth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuth(x uint64) (n int) {
	return sovAuth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auth_LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Version = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auth_LoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Auth_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auth_RedisLoginInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedisLoginInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedisLoginInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeTime", wireType)
			}
			m.FreezeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreezeTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuth = fmt.Errorf("proto: unexpected end of group")
)
