// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/npc_task.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NpcTask struct {
	RoleId string                    `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Tasks  map[int64]*models.NpcTask `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NpcTask) Reset()      { *m = NpcTask{} }
func (*NpcTask) ProtoMessage() {}
func (*NpcTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_77d2926152213f36, []int{0}
}
func (m *NpcTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTask.Merge(m, src)
}
func (m *NpcTask) XXX_Size() int {
	return m.Size()
}
func (m *NpcTask) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTask.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTask proto.InternalMessageInfo

func (m *NpcTask) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NpcTask) GetTasks() map[int64]*models.NpcTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (*NpcTask) XXX_MessageName() string {
	return "dao.NpcTask"
}

type NpcTaskUnlock struct {
	TaskId int64                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" pk`
	Unlock *models.NpcTaskUnlock `protobuf:"bytes,2,opt,name=unlock,proto3" json:"unlock,omitempty"`
}

func (m *NpcTaskUnlock) Reset()      { *m = NpcTaskUnlock{} }
func (*NpcTaskUnlock) ProtoMessage() {}
func (*NpcTaskUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_77d2926152213f36, []int{1}
}
func (m *NpcTaskUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTaskUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTaskUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTaskUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTaskUnlock.Merge(m, src)
}
func (m *NpcTaskUnlock) XXX_Size() int {
	return m.Size()
}
func (m *NpcTaskUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTaskUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTaskUnlock proto.InternalMessageInfo

func (m *NpcTaskUnlock) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *NpcTaskUnlock) GetUnlock() *models.NpcTaskUnlock {
	if m != nil {
		return m.Unlock
	}
	return nil
}

func (*NpcTaskUnlock) XXX_MessageName() string {
	return "dao.NpcTaskUnlock"
}
func init() {
	proto.RegisterType((*NpcTask)(nil), "dao.NpcTask")
	proto.RegisterMapType((map[int64]*models.NpcTask)(nil), "dao.NpcTask.TasksEntry")
	proto.RegisterType((*NpcTaskUnlock)(nil), "dao.NpcTaskUnlock")
}

func init() { proto.RegisterFile("proto/dao/npc_task.proto", fileDescriptor_77d2926152213f36) }

var fileDescriptor_77d2926152213f36 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x1c, 0xc5, 0x73, 0x09, 0x4d, 0xf1, 0x8a, 0x28, 0x41, 0x31, 0x44, 0xb9, 0x96, 0x82, 0xd0, 0xa5,
	0x09, 0xd4, 0x45, 0x1c, 0x0b, 0x0e, 0x75, 0x70, 0x08, 0xba, 0xb8, 0x94, 0x98, 0x1c, 0xa5, 0x24,
	0xb9, 0x7f, 0xc8, 0xb5, 0x85, 0x7e, 0x0b, 0x3f, 0x84, 0x83, 0x1f, 0xa5, 0x63, 0xc7, 0x4e, 0xa2,
	0x97, 0xc5, 0x51, 0xfc, 0x04, 0x72, 0x77, 0xa9, 0xc5, 0x2e, 0xe1, 0xf1, 0xde, 0xfb, 0xff, 0xf2,
	0xe0, 0xb0, 0x5b, 0x94, 0x30, 0x83, 0x20, 0x89, 0x20, 0x60, 0x45, 0x3c, 0x9e, 0x45, 0x3c, 0xf5,
	0x95, 0xe5, 0x58, 0x49, 0x04, 0xde, 0xc9, 0x04, 0x26, 0xa0, 0x2b, 0x52, 0xe9, 0xc8, 0x3b, 0xd7,
	0x4e, 0x0e, 0x09, 0xcd, 0xf8, 0xde, 0x9d, 0xe7, 0xfe, 0x0b, 0x29, 0x9b, 0xe7, 0x5c, 0x27, 0xdd,
	0x57, 0x84, 0x9b, 0xf7, 0x45, 0xfc, 0x10, 0xf1, 0xd4, 0x69, 0xe3, 0x66, 0x09, 0x19, 0x1d, 0x4f,
	0x13, 0x17, 0x75, 0x50, 0xef, 0x60, 0x68, 0xff, 0xbc, 0xb7, 0xcd, 0x22, 0x0d, 0x6d, 0x69, 0x8f,
	0x12, 0xa7, 0x8f, 0x1b, 0x12, 0xca, 0x5d, 0xb3, 0x63, 0xf5, 0x5a, 0x83, 0x33, 0x3f, 0x89, 0xc0,
	0xaf, 0xaf, 0x7d, 0xf9, 0xe1, 0xb7, 0x6c, 0x56, 0x2e, 0x43, 0xdd, 0xf2, 0x46, 0x18, 0xef, 0x4c,
	0xe7, 0x18, 0x5b, 0x29, 0x5d, 0x2a, 0xb2, 0x15, 0x4a, 0xe9, 0x5c, 0xe2, 0xc6, 0x22, 0xca, 0xe6,
	0xd4, 0x35, 0x3b, 0xa8, 0xd7, 0x1a, 0x1c, 0xf9, 0x7a, 0xdf, 0x96, 0x18, 0xea, 0xf4, 0xc6, 0xbc,
	0x46, 0xdd, 0x31, 0x3e, 0xac, 0xdd, 0x47, 0x96, 0x41, 0xac, 0xb6, 0xca, 0x9f, 0x6c, 0xb7, 0x5a,
	0xbb, 0xad, 0xd2, 0x56, 0x5b, 0xed, 0xb9, 0xaa, 0xd6, 0xf4, 0xd3, 0x3d, 0xba, 0xe6, 0x84, 0x75,
	0x69, 0x78, 0xb7, 0xf9, 0x24, 0xc6, 0x9b, 0x20, 0x68, 0x25, 0x08, 0x5a, 0x0b, 0x82, 0x3e, 0x04,
	0x41, 0x5f, 0x82, 0x18, 0xdf, 0x82, 0xa0, 0x97, 0x8a, 0x18, 0xab, 0x8a, 0xa0, 0x75, 0x45, 0x8c,
	0x4d, 0x45, 0x8c, 0xa7, 0x8b, 0x18, 0xa6, 0xac, 0xcf, 0x69, 0xb9, 0xa0, 0x65, 0x10, 0x43, 0x9e,
	0x03, 0x0b, 0xfe, 0x1e, 0xed, 0xd9, 0x56, 0xf2, 0xea, 0x37, 0x00, 0x00, 0xff, 0xff, 0x42, 0x53,
	0x0e, 0xbd, 0xc8, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTaskUnlock.Get().(proto.Message)
	})
}

var poolNpcTask = &sync.Pool{New: func() interface{} { return &NpcTask{} }}

func (m *NpcTask) ReleasePool() { m.Reset(); poolNpcTask.Put(m); m = nil }

var poolNpcTaskUnlock = &sync.Pool{New: func() interface{} { return &NpcTaskUnlock{} }}

func (m *NpcTaskUnlock) ReleasePool() { m.Reset(); poolNpcTaskUnlock.Put(m); m = nil }

func (m *NpcTask) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *NpcTask) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *NpcTask) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *NpcTask) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *NpcTask) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *NpcTaskUnlock) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.TaskId), 10)
}

func (m *NpcTaskUnlock) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.TaskId), 10)
}

func (m *NpcTaskUnlock) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *NpcTaskUnlock) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *NpcTaskUnlock) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *NpcTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTask)
	if !ok {
		that2, ok := that.(NpcTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	return true
}
func (this *NpcTaskUnlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTaskUnlock)
	if !ok {
		that2, ok := that.(NpcTaskUnlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if !this.Unlock.Equal(that1.Unlock) {
		return false
	}
	return true
}
func (m *NpcTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for k := range m.Tasks {
			v := m.Tasks[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintNpcTask(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintNpcTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNpcTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintNpcTask(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NpcTaskUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTaskUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTaskUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unlock != nil {
		{
			size, err := m.Unlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNpcTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TaskId != 0 {
		i = encodeVarintNpcTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNpcTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovNpcTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *NpcTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("tasks")
	w.RawByte('"')
	w.RawByte(':')
	if m.Tasks == nil {
		w.RawString("null")
	} else if len(m.Tasks) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlTasks := len(m.Tasks)
		for k, v := range m.Tasks {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlTasks--
			if mlTasks != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTaskUnlock) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TaskId != 0 {
		w.RawByte('"')
		w.RawString("task_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TaskId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("unlock")
	w.RawByte('"')
	w.RawByte(':')
	m.Unlock.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTask) GoString() string {
	return m.String()
}

func (m *NpcTaskUnlock) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTaskUnlock) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTaskUnlock) GoString() string {
	return m.String()
}

func (m *NpcTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovNpcTask(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for k, v := range m.Tasks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovNpcTask(uint64(l))
			}
			mapEntrySize := 1 + sovNpcTask(uint64(k)) + l
			n += mapEntrySize + 1 + sovNpcTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NpcTaskUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovNpcTask(uint64(m.TaskId))
	}
	if m.Unlock != nil {
		l = m.Unlock.Size()
		n += 1 + l + sovNpcTask(uint64(l))
	}
	return n
}

func sovNpcTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNpcTask(x uint64) (n int) {
	return sovNpcTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NpcTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NpcTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NpcTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tasks == nil {
				m.Tasks = make(map[int64]*models.NpcTask)
			}
			var mapkey int64
			var mapvalue *models.NpcTask
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNpcTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpcTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNpcTask
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNpcTask
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.NpcTask{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNpcTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNpcTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tasks[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NpcTaskUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NpcTaskUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NpcTaskUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpcTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpcTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unlock == nil {
				m.Unlock = &models.NpcTaskUnlock{}
			}
			if err := m.Unlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpcTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpcTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNpcTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNpcTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpcTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNpcTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNpcTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNpcTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNpcTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNpcTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNpcTask = fmt.Errorf("proto: unexpected end of group")
)
