// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/roguelike.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RoguelikeJoinCnt struct {
	RoleId     string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	TodayJoin  int64  `protobuf:"varint,2,opt,name=today_join,json=todayJoin,proto3" json:"today_join,omitempty"`
	LastJoinAt int64  `protobuf:"varint,3,opt,name=last_join_at,json=lastJoinAt,proto3" json:"last_join_at,omitempty"`
	ExtraCnt   int64  `protobuf:"varint,4,opt,name=extra_cnt,json=extraCnt,proto3" json:"extra_cnt,omitempty"`
}

func (m *RoguelikeJoinCnt) Reset()      { *m = RoguelikeJoinCnt{} }
func (*RoguelikeJoinCnt) ProtoMessage() {}
func (*RoguelikeJoinCnt) Descriptor() ([]byte, []int) {
	return fileDescriptor_be93d79446c51825, []int{0}
}
func (m *RoguelikeJoinCnt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeJoinCnt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeJoinCnt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeJoinCnt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeJoinCnt.Merge(m, src)
}
func (m *RoguelikeJoinCnt) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeJoinCnt) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeJoinCnt.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeJoinCnt proto.InternalMessageInfo

func (m *RoguelikeJoinCnt) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoguelikeJoinCnt) GetTodayJoin() int64 {
	if m != nil {
		return m.TodayJoin
	}
	return 0
}

func (m *RoguelikeJoinCnt) GetLastJoinAt() int64 {
	if m != nil {
		return m.LastJoinAt
	}
	return 0
}

func (m *RoguelikeJoinCnt) GetExtraCnt() int64 {
	if m != nil {
		return m.ExtraCnt
	}
	return 0
}

func (*RoguelikeJoinCnt) XXX_MessageName() string {
	return "dao.RoguelikeJoinCnt"
}

type RoguelikeBossSkill struct {
	Key          string                          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" pk`
	DungeonDay   int64                           `protobuf:"varint,2,opt,name=dungeon_day,json=dungeonDay,proto3" json:"dungeon_day,omitempty"`
	BossSkill    map[int64]*models.BossSkillList `protobuf:"bytes,3,rep,name=boss_skill,json=bossSkill,proto3" json:"boss_skill,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MonsterSkill map[int64]*models.BossSkillList `protobuf:"bytes,4,rep,name=monster_skill,json=monsterSkill,proto3" json:"monster_skill,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UpdateAt     int64                           `protobuf:"varint,5,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (m *RoguelikeBossSkill) Reset()      { *m = RoguelikeBossSkill{} }
func (*RoguelikeBossSkill) ProtoMessage() {}
func (*RoguelikeBossSkill) Descriptor() ([]byte, []int) {
	return fileDescriptor_be93d79446c51825, []int{1}
}
func (m *RoguelikeBossSkill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeBossSkill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeBossSkill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeBossSkill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeBossSkill.Merge(m, src)
}
func (m *RoguelikeBossSkill) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeBossSkill) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeBossSkill.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeBossSkill proto.InternalMessageInfo

func (m *RoguelikeBossSkill) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RoguelikeBossSkill) GetDungeonDay() int64 {
	if m != nil {
		return m.DungeonDay
	}
	return 0
}

func (m *RoguelikeBossSkill) GetBossSkill() map[int64]*models.BossSkillList {
	if m != nil {
		return m.BossSkill
	}
	return nil
}

func (m *RoguelikeBossSkill) GetMonsterSkill() map[int64]*models.BossSkillList {
	if m != nil {
		return m.MonsterSkill
	}
	return nil
}

func (m *RoguelikeBossSkill) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (*RoguelikeBossSkill) XXX_MessageName() string {
	return "dao.RoguelikeBossSkill"
}

type RoguelikeDone struct {
	RoleId  string         `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	DoneMap map[int64]bool `protobuf:"bytes,2,rep,name=done_map,json=doneMap,proto3" json:"done_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *RoguelikeDone) Reset()      { *m = RoguelikeDone{} }
func (*RoguelikeDone) ProtoMessage() {}
func (*RoguelikeDone) Descriptor() ([]byte, []int) {
	return fileDescriptor_be93d79446c51825, []int{2}
}
func (m *RoguelikeDone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoguelikeDone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoguelikeDone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoguelikeDone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoguelikeDone.Merge(m, src)
}
func (m *RoguelikeDone) XXX_Size() int {
	return m.Size()
}
func (m *RoguelikeDone) XXX_DiscardUnknown() {
	xxx_messageInfo_RoguelikeDone.DiscardUnknown(m)
}

var xxx_messageInfo_RoguelikeDone proto.InternalMessageInfo

func (m *RoguelikeDone) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoguelikeDone) GetDoneMap() map[int64]bool {
	if m != nil {
		return m.DoneMap
	}
	return nil
}

func (*RoguelikeDone) XXX_MessageName() string {
	return "dao.RoguelikeDone"
}
func init() {
	proto.RegisterType((*RoguelikeJoinCnt)(nil), "dao.RoguelikeJoinCnt")
	proto.RegisterType((*RoguelikeBossSkill)(nil), "dao.RoguelikeBossSkill")
	proto.RegisterMapType((map[int64]*models.BossSkillList)(nil), "dao.RoguelikeBossSkill.BossSkillEntry")
	proto.RegisterMapType((map[int64]*models.BossSkillList)(nil), "dao.RoguelikeBossSkill.MonsterSkillEntry")
	proto.RegisterType((*RoguelikeDone)(nil), "dao.RoguelikeDone")
	proto.RegisterMapType((map[int64]bool)(nil), "dao.RoguelikeDone.DoneMapEntry")
}

func init() { proto.RegisterFile("proto/dao/roguelike.proto", fileDescriptor_be93d79446c51825) }

var fileDescriptor_be93d79446c51825 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x71, 0xff, 0x24, 0x93, 0x14, 0x15, 0xab, 0x48, 0x26, 0x94, 0x4d, 0x94, 0x03,
	0x0a, 0x42, 0x38, 0x52, 0xb9, 0xa0, 0xdc, 0x9a, 0xb6, 0x07, 0x2a, 0xca, 0x21, 0x95, 0x38, 0x70,
	0xb1, 0x36, 0xd9, 0x55, 0x64, 0x62, 0xef, 0x44, 0xde, 0x4d, 0x45, 0xde, 0x02, 0xde, 0xa2, 0x47,
	0x1e, 0xa3, 0xc7, 0x1e, 0x7b, 0x42, 0xe0, 0x5c, 0x38, 0x22, 0x9e, 0x00, 0xed, 0x6e, 0x48, 0xdd,
	0x16, 0xc4, 0x85, 0x8b, 0x35, 0xfe, 0xcd, 0xf8, 0xf3, 0x37, 0x9f, 0xbd, 0xf0, 0x70, 0x9a, 0xa1,
	0xc6, 0x2e, 0x67, 0xd8, 0xcd, 0x70, 0x3c, 0x13, 0x49, 0x3c, 0x11, 0xa1, 0x65, 0xbe, 0xc7, 0x19,
	0x36, 0x76, 0xc6, 0x38, 0x46, 0x37, 0x63, 0x2a, 0xd7, 0x6a, 0xec, 0x3a, 0x92, 0x22, 0x17, 0x89,
	0xba, 0xfd, 0x60, 0xfb, 0x13, 0x81, 0xed, 0xc1, 0x6f, 0x76, 0x8c, 0xb1, 0x3c, 0x90, 0xda, 0x6f,
	0xc2, 0x66, 0x86, 0x89, 0x88, 0x62, 0x1e, 0x90, 0x16, 0xe9, 0x54, 0xfb, 0x1b, 0x3f, 0xbf, 0x34,
	0xcb, 0xd3, 0xc9, 0x60, 0xc3, 0xe0, 0x57, 0xdc, 0x7f, 0x0c, 0xa0, 0x91, 0xb3, 0x79, 0xf4, 0x1e,
	0x63, 0x19, 0x94, 0x5b, 0xa4, 0xe3, 0x0d, 0xaa, 0x96, 0x18, 0x09, 0xbf, 0x05, 0xf5, 0x84, 0x29,
	0x6d, 0xbb, 0x11, 0xd3, 0x81, 0x67, 0x07, 0xc0, 0x30, 0xd3, 0xdf, 0xd7, 0xfe, 0x23, 0xa8, 0x8a,
	0x0f, 0x3a, 0x63, 0xd1, 0x48, 0xea, 0x60, 0xcd, 0xb6, 0x2b, 0x16, 0x1c, 0x48, 0xdd, 0xfe, 0xec,
	0x81, 0xbf, 0xf2, 0xd4, 0x47, 0xa5, 0x4e, 0x27, 0x71, 0x92, 0xf8, 0x01, 0x78, 0x13, 0x31, 0xbf,
	0xe5, 0xc8, 0x20, 0xbf, 0x09, 0x35, 0x3e, 0x93, 0x63, 0x81, 0x32, 0xe2, 0x6c, 0xbe, 0xf4, 0x03,
	0x4b, 0x74, 0xc8, 0xe6, 0xfe, 0x11, 0xc0, 0x10, 0x95, 0x8a, 0x94, 0x11, 0x0a, 0xbc, 0x96, 0xd7,
	0xa9, 0xed, 0x3d, 0x09, 0x39, 0xc3, 0xf0, 0xee, 0x7b, 0xc2, 0x55, 0x75, 0x24, 0x75, 0x36, 0x1f,
	0x54, 0x87, 0x2b, 0x07, 0x6f, 0x60, 0x2b, 0x45, 0xa9, 0xb4, 0xc8, 0x96, 0x4a, 0x6b, 0x56, 0xe9,
	0xe9, 0xdf, 0x94, 0x4e, 0xdc, 0x70, 0x41, 0xac, 0x9e, 0x16, 0x90, 0x49, 0x61, 0x36, 0xe5, 0x4c,
	0x0b, 0x13, 0xd2, 0xba, 0x4b, 0xc1, 0x81, 0x7d, 0xdd, 0x38, 0x85, 0x7b, 0x37, 0x9d, 0xf8, 0xdb,
	0xd7, 0x01, 0x78, 0x6e, 0xf1, 0x67, 0xb0, 0x7e, 0xc6, 0x92, 0x99, 0xb0, 0x2b, 0xd7, 0xf6, 0x1e,
	0x84, 0xee, 0x2b, 0x5f, 0xaf, 0xf0, 0x3a, 0x56, 0x7a, 0xe0, 0x66, 0x7a, 0xe5, 0x97, 0xa4, 0xf1,
	0x16, 0xee, 0xdf, 0x31, 0xf5, 0x1f, 0x74, 0xdb, 0xe7, 0x04, 0xb6, 0x56, 0x01, 0x1c, 0xa2, 0x14,
	0xff, 0xfe, 0x87, 0x7a, 0x50, 0xe1, 0x28, 0x45, 0x94, 0xb2, 0x69, 0x50, 0xb6, 0x39, 0x36, 0x6f,
	0xe6, 0x68, 0x64, 0x42, 0x73, 0x39, 0x61, 0x53, 0x97, 0xde, 0x26, 0x77, 0x77, 0x8d, 0x1e, 0xd4,
	0x8b, 0x8d, 0x3f, 0x6c, 0xb0, 0x53, 0xdc, 0xa0, 0x52, 0xb0, 0xda, 0x3f, 0xbe, 0xfa, 0x46, 0x4b,
	0xe7, 0x39, 0x25, 0x17, 0x39, 0x25, 0x97, 0x39, 0x25, 0x5f, 0x73, 0x4a, 0xbe, 0xe7, 0xb4, 0xf4,
	0x23, 0xa7, 0xe4, 0xe3, 0x82, 0x96, 0x2e, 0x16, 0x94, 0x5c, 0x2e, 0x68, 0xe9, 0x6a, 0x41, 0x4b,
	0xef, 0x76, 0x47, 0x18, 0xcb, 0xe7, 0x4a, 0x64, 0x67, 0x22, 0xeb, 0x8e, 0x30, 0x4d, 0x51, 0x76,
	0x57, 0xc7, 0x70, 0xb8, 0x61, 0xcb, 0x17, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x49, 0x57, 0xeb,
	0x7b, 0x9a, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeJoinCnt.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeBossSkill.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoguelikeDone.Get().(proto.Message)
	})
}

var poolRoguelikeJoinCnt = &sync.Pool{New: func() interface{} { return &RoguelikeJoinCnt{} }}

func (m *RoguelikeJoinCnt) ReleasePool() { m.Reset(); poolRoguelikeJoinCnt.Put(m); m = nil }

var poolRoguelikeBossSkill = &sync.Pool{New: func() interface{} { return &RoguelikeBossSkill{} }}

func (m *RoguelikeBossSkill) ReleasePool() { m.Reset(); poolRoguelikeBossSkill.Put(m); m = nil }

var poolRoguelikeDone = &sync.Pool{New: func() interface{} { return &RoguelikeDone{} }}

func (m *RoguelikeDone) ReleasePool() { m.Reset(); poolRoguelikeDone.Put(m); m = nil }

func (m *RoguelikeJoinCnt) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *RoguelikeJoinCnt) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *RoguelikeJoinCnt) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RoguelikeJoinCnt) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RoguelikeJoinCnt) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *RoguelikeBossSkill) PK() string {
	if m == nil {
		return ""
	}
	return m.Key
}

func (m *RoguelikeBossSkill) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Key...)
}

func (m *RoguelikeBossSkill) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RoguelikeBossSkill) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RoguelikeBossSkill) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *RoguelikeDone) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *RoguelikeDone) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *RoguelikeDone) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RoguelikeDone) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RoguelikeDone) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *RoguelikeJoinCnt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeJoinCnt)
	if !ok {
		that2, ok := that.(RoguelikeJoinCnt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.TodayJoin != that1.TodayJoin {
		return false
	}
	if this.LastJoinAt != that1.LastJoinAt {
		return false
	}
	if this.ExtraCnt != that1.ExtraCnt {
		return false
	}
	return true
}
func (this *RoguelikeBossSkill) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeBossSkill)
	if !ok {
		that2, ok := that.(RoguelikeBossSkill)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.DungeonDay != that1.DungeonDay {
		return false
	}
	if len(this.BossSkill) != len(that1.BossSkill) {
		return false
	}
	for i := range this.BossSkill {
		if !this.BossSkill[i].Equal(that1.BossSkill[i]) {
			return false
		}
	}
	if len(this.MonsterSkill) != len(that1.MonsterSkill) {
		return false
	}
	for i := range this.MonsterSkill {
		if !this.MonsterSkill[i].Equal(that1.MonsterSkill[i]) {
			return false
		}
	}
	if this.UpdateAt != that1.UpdateAt {
		return false
	}
	return true
}
func (this *RoguelikeDone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoguelikeDone)
	if !ok {
		that2, ok := that.(RoguelikeDone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.DoneMap) != len(that1.DoneMap) {
		return false
	}
	for i := range this.DoneMap {
		if this.DoneMap[i] != that1.DoneMap[i] {
			return false
		}
	}
	return true
}
func (m *RoguelikeJoinCnt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeJoinCnt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeJoinCnt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtraCnt != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.ExtraCnt))
		i--
		dAtA[i] = 0x20
	}
	if m.LastJoinAt != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.LastJoinAt))
		i--
		dAtA[i] = 0x18
	}
	if m.TodayJoin != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.TodayJoin))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintRoguelike(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeBossSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeBossSkill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeBossSkill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateAt != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MonsterSkill) > 0 {
		for k := range m.MonsterSkill {
			v := m.MonsterSkill[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRoguelike(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRoguelike(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRoguelike(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BossSkill) > 0 {
		for k := range m.BossSkill {
			v := m.BossSkill[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRoguelike(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRoguelike(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRoguelike(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DungeonDay != 0 {
		i = encodeVarintRoguelike(dAtA, i, uint64(m.DungeonDay))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRoguelike(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoguelikeDone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoguelikeDone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoguelikeDone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DoneMap) > 0 {
		for k := range m.DoneMap {
			v := m.DoneMap[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintRoguelike(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRoguelike(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintRoguelike(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoguelike(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoguelike(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RoguelikeJoinCnt) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.TodayJoin != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("today_join")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TodayJoin))
		needWriteComma = true
	}
	if m.LastJoinAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_join_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastJoinAt))
		needWriteComma = true
	}
	if m.ExtraCnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("extra_cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExtraCnt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeBossSkill) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Key != "" {
		w.RawByte('"')
		w.RawString("key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Key)
		needWriteComma = true
	}
	if m.DungeonDay != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dungeon_day")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DungeonDay))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_skill")
	w.RawByte('"')
	w.RawByte(':')
	if m.BossSkill == nil {
		w.RawString("null")
	} else if len(m.BossSkill) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBossSkill := len(m.BossSkill)
		for k, v := range m.BossSkill {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlBossSkill--
			if mlBossSkill != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("monster_skill")
	w.RawByte('"')
	w.RawByte(':')
	if m.MonsterSkill == nil {
		w.RawString("null")
	} else if len(m.MonsterSkill) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlMonsterSkill := len(m.MonsterSkill)
		for k, v := range m.MonsterSkill {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlMonsterSkill--
			if mlMonsterSkill != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.UpdateAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("update_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UpdateAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeDone) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("done_map")
	w.RawByte('"')
	w.RawByte(':')
	if m.DoneMap == nil {
		w.RawString("null")
	} else if len(m.DoneMap) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDoneMap := len(m.DoneMap)
		for k, v := range m.DoneMap {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlDoneMap--
			if mlDoneMap != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoguelikeJoinCnt) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeJoinCnt) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeJoinCnt) GoString() string {
	return m.String()
}

func (m *RoguelikeBossSkill) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeBossSkill) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeBossSkill) GoString() string {
	return m.String()
}

func (m *RoguelikeDone) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoguelikeDone) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoguelikeDone) GoString() string {
	return m.String()
}

func (m *RoguelikeJoinCnt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovRoguelike(uint64(l))
	}
	if m.TodayJoin != 0 {
		n += 1 + sovRoguelike(uint64(m.TodayJoin))
	}
	if m.LastJoinAt != 0 {
		n += 1 + sovRoguelike(uint64(m.LastJoinAt))
	}
	if m.ExtraCnt != 0 {
		n += 1 + sovRoguelike(uint64(m.ExtraCnt))
	}
	return n
}

func (m *RoguelikeBossSkill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRoguelike(uint64(l))
	}
	if m.DungeonDay != 0 {
		n += 1 + sovRoguelike(uint64(m.DungeonDay))
	}
	if len(m.BossSkill) > 0 {
		for k, v := range m.BossSkill {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRoguelike(uint64(l))
			}
			mapEntrySize := 1 + sovRoguelike(uint64(k)) + l
			n += mapEntrySize + 1 + sovRoguelike(uint64(mapEntrySize))
		}
	}
	if len(m.MonsterSkill) > 0 {
		for k, v := range m.MonsterSkill {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRoguelike(uint64(l))
			}
			mapEntrySize := 1 + sovRoguelike(uint64(k)) + l
			n += mapEntrySize + 1 + sovRoguelike(uint64(mapEntrySize))
		}
	}
	if m.UpdateAt != 0 {
		n += 1 + sovRoguelike(uint64(m.UpdateAt))
	}
	return n
}

func (m *RoguelikeDone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovRoguelike(uint64(l))
	}
	if len(m.DoneMap) > 0 {
		for k, v := range m.DoneMap {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRoguelike(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovRoguelike(uint64(mapEntrySize))
		}
	}
	return n
}

func sovRoguelike(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoguelike(x uint64) (n int) {
	return sovRoguelike(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoguelikeJoinCnt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoguelikeJoinCnt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoguelikeJoinCnt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayJoin", wireType)
			}
			m.TodayJoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayJoin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastJoinAt", wireType)
			}
			m.LastJoinAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastJoinAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraCnt", wireType)
			}
			m.ExtraCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraCnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeBossSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoguelikeBossSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoguelikeBossSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonDay", wireType)
			}
			m.DungeonDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonDay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossSkill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossSkill == nil {
				m.BossSkill = make(map[int64]*models.BossSkillList)
			}
			var mapkey int64
			var mapvalue *models.BossSkillList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoguelike
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRoguelike
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRoguelike
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.BossSkillList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoguelike(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRoguelike
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BossSkill[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterSkill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MonsterSkill == nil {
				m.MonsterSkill = make(map[int64]*models.BossSkillList)
			}
			var mapkey int64
			var mapvalue *models.BossSkillList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoguelike
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRoguelike
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRoguelike
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.BossSkillList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoguelike(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRoguelike
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MonsterSkill[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoguelikeDone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoguelikeDone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoguelikeDone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoguelike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoguelike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DoneMap == nil {
				m.DoneMap = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoguelike
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoguelike
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoguelike(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRoguelike
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DoneMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoguelike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoguelike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoguelike(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoguelike
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoguelike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoguelike
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoguelike
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoguelike
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoguelike        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoguelike          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoguelike = fmt.Errorf("proto: unexpected end of group")
)
