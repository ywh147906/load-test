// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/guild.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 公会
type Guild struct {
	Id               string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" pk`
	LeaderId         string                   `protobuf:"bytes,2,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	Name             string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Flag             int64                    `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
	Lang             int64                    `protobuf:"varint,5,opt,name=lang,proto3" json:"lang,omitempty"`
	Intro            string                   `protobuf:"bytes,6,opt,name=intro,proto3" json:"intro,omitempty"`
	Notice           string                   `protobuf:"bytes,7,opt,name=notice,proto3" json:"notice,omitempty"`
	AutoJoin         bool                     `protobuf:"varint,8,opt,name=auto_join,json=autoJoin,proto3" json:"auto_join,omitempty"`
	Level            int64                    `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`
	Exp              int64                    `protobuf:"varint,10,opt,name=exp,proto3" json:"exp,omitempty"`
	Resources        map[int64]int64          `protobuf:"bytes,11,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CreatedAt        int64                    `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeletedAt        int64                    `protobuf:"varint,13,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Greeting         string                   `protobuf:"bytes,14,opt,name=greeting,proto3" json:"greeting,omitempty"`
	PositionName     map[int64]string         `protobuf:"bytes,15,rep,name=position_name,json=positionName,proto3" json:"position_name,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorldInvite      *models.GuildWorldInvite `protobuf:"bytes,16,opt,name=world_invite,json=worldInvite,proto3" json:"world_invite,omitempty"`
	CombatValueLimit int64                    `protobuf:"varint,17,opt,name=combat_value_limit,json=combatValueLimit,proto3" json:"combat_value_limit,omitempty"`
	InviteMsg        string                   `protobuf:"bytes,18,opt,name=invite_msg,json=inviteMsg,proto3" json:"invite_msg,omitempty"`
	Count            int64                    `protobuf:"varint,19,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Guild) Reset()      { *m = Guild{} }
func (*Guild) ProtoMessage() {}
func (*Guild) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd26b94b3c15ca47, []int{0}
}
func (m *Guild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Guild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Guild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Guild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guild.Merge(m, src)
}
func (m *Guild) XXX_Size() int {
	return m.Size()
}
func (m *Guild) XXX_DiscardUnknown() {
	xxx_messageInfo_Guild.DiscardUnknown(m)
}

var xxx_messageInfo_Guild proto.InternalMessageInfo

func (m *Guild) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Guild) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *Guild) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Guild) GetFlag() int64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *Guild) GetLang() int64 {
	if m != nil {
		return m.Lang
	}
	return 0
}

func (m *Guild) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *Guild) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

func (m *Guild) GetAutoJoin() bool {
	if m != nil {
		return m.AutoJoin
	}
	return false
}

func (m *Guild) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Guild) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Guild) GetResources() map[int64]int64 {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Guild) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Guild) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *Guild) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func (m *Guild) GetPositionName() map[int64]string {
	if m != nil {
		return m.PositionName
	}
	return nil
}

func (m *Guild) GetWorldInvite() *models.GuildWorldInvite {
	if m != nil {
		return m.WorldInvite
	}
	return nil
}

func (m *Guild) GetCombatValueLimit() int64 {
	if m != nil {
		return m.CombatValueLimit
	}
	return 0
}

func (m *Guild) GetInviteMsg() string {
	if m != nil {
		return m.InviteMsg
	}
	return ""
}

func (m *Guild) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*Guild) XXX_MessageName() string {
	return "dao.Guild"
}

// 公会成员
type GuildMember struct {
	RoleId           string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	ServerId         int64           `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Position         int64           `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	JoinAt           int64           `protobuf:"varint,4,opt,name=join_at,json=joinAt,proto3" json:"join_at,omitempty"`
	LastPosition     int64           `protobuf:"varint,5,opt,name=last_position,json=lastPosition,proto3" json:"last_position,omitempty"`
	CombatValue      int64           `protobuf:"varint,6,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	ActiveValue      map[int64]int64 `protobuf:"bytes,8,rep,name=active_value,json=activeValue,proto3" json:"active_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalActiveValue int64           `protobuf:"varint,9,opt,name=total_active_value,json=totalActiveValue,proto3" json:"total_active_value,omitempty"`
}

func (m *GuildMember) Reset()      { *m = GuildMember{} }
func (*GuildMember) ProtoMessage() {}
func (*GuildMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd26b94b3c15ca47, []int{1}
}
func (m *GuildMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildMember.Merge(m, src)
}
func (m *GuildMember) XXX_Size() int {
	return m.Size()
}
func (m *GuildMember) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildMember.DiscardUnknown(m)
}

var xxx_messageInfo_GuildMember proto.InternalMessageInfo

func (m *GuildMember) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildMember) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *GuildMember) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *GuildMember) GetJoinAt() int64 {
	if m != nil {
		return m.JoinAt
	}
	return 0
}

func (m *GuildMember) GetLastPosition() int64 {
	if m != nil {
		return m.LastPosition
	}
	return 0
}

func (m *GuildMember) GetCombatValue() int64 {
	if m != nil {
		return m.CombatValue
	}
	return 0
}

func (m *GuildMember) GetActiveValue() map[int64]int64 {
	if m != nil {
		return m.ActiveValue
	}
	return nil
}

func (m *GuildMember) GetTotalActiveValue() int64 {
	if m != nil {
		return m.TotalActiveValue
	}
	return 0
}

func (*GuildMember) XXX_MessageName() string {
	return "dao.GuildMember"
}

// 公会和玩家的对应关系
type GuildUser struct {
	RoleId           string             `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	GuildId          string             `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Cd               int64              `protobuf:"varint,4,opt,name=cd,proto3" json:"cd,omitempty"`
	Build            *models.GuildBuild `protobuf:"bytes,5,opt,name=build,proto3" json:"build,omitempty"`
	FirstJoinReward  bool               `protobuf:"varint,6,opt,name=first_join_reward,json=firstJoinReward,proto3" json:"first_join_reward,omitempty"`
	ActiveValue      map[int64]int64    `protobuf:"bytes,7,rep,name=active_value,json=activeValue,proto3" json:"active_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalActiveValue int64              `protobuf:"varint,8,opt,name=total_active_value,json=totalActiveValue,proto3" json:"total_active_value,omitempty"`
}

func (m *GuildUser) Reset()      { *m = GuildUser{} }
func (*GuildUser) ProtoMessage() {}
func (*GuildUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd26b94b3c15ca47, []int{2}
}
func (m *GuildUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildUser.Merge(m, src)
}
func (m *GuildUser) XXX_Size() int {
	return m.Size()
}
func (m *GuildUser) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildUser.DiscardUnknown(m)
}

var xxx_messageInfo_GuildUser proto.InternalMessageInfo

func (m *GuildUser) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildUser) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildUser) GetCd() int64 {
	if m != nil {
		return m.Cd
	}
	return 0
}

func (m *GuildUser) GetBuild() *models.GuildBuild {
	if m != nil {
		return m.Build
	}
	return nil
}

func (m *GuildUser) GetFirstJoinReward() bool {
	if m != nil {
		return m.FirstJoinReward
	}
	return false
}

func (m *GuildUser) GetActiveValue() map[int64]int64 {
	if m != nil {
		return m.ActiveValue
	}
	return nil
}

func (m *GuildUser) GetTotalActiveValue() int64 {
	if m != nil {
		return m.TotalActiveValue
	}
	return 0
}

func (*GuildUser) XXX_MessageName() string {
	return "dao.GuildUser"
}

// 申请列表
type GuildApply struct {
	RoleId   string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	ServerId int64  `protobuf:"varint,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ApplyAt  int64  `protobuf:"varint,4,opt,name=apply_at,json=applyAt,proto3" json:"apply_at,omitempty"`
}

func (m *GuildApply) Reset()      { *m = GuildApply{} }
func (*GuildApply) ProtoMessage() {}
func (*GuildApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd26b94b3c15ca47, []int{3}
}
func (m *GuildApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildApply.Merge(m, src)
}
func (m *GuildApply) XXX_Size() int {
	return m.Size()
}
func (m *GuildApply) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildApply.DiscardUnknown(m)
}

var xxx_messageInfo_GuildApply proto.InternalMessageInfo

func (m *GuildApply) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildApply) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *GuildApply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildApply) GetApplyAt() int64 {
	if m != nil {
		return m.ApplyAt
	}
	return 0
}

func (*GuildApply) XXX_MessageName() string {
	return "dao.GuildApply"
}

// 玩家申请的公会
type GuildUserApply struct {
	RoleId    string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	GuildId   string `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ExpiredAt int64  `protobuf:"varint,3,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
}

func (m *GuildUserApply) Reset()      { *m = GuildUserApply{} }
func (*GuildUserApply) ProtoMessage() {}
func (*GuildUserApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd26b94b3c15ca47, []int{4}
}
func (m *GuildUserApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildUserApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildUserApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildUserApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildUserApply.Merge(m, src)
}
func (m *GuildUserApply) XXX_Size() int {
	return m.Size()
}
func (m *GuildUserApply) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildUserApply.DiscardUnknown(m)
}

var xxx_messageInfo_GuildUserApply proto.InternalMessageInfo

func (m *GuildUserApply) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildUserApply) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildUserApply) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (*GuildUserApply) XXX_MessageName() string {
	return "dao.GuildUserApply"
}

// 邀请列表
type GuildInvite struct {
	GuildId string   `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" pk`
	RoleId  []string `protobuf:"bytes,2,rep,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *GuildInvite) Reset()      { *m = GuildInvite{} }
func (*GuildInvite) ProtoMessage() {}
func (*GuildInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd26b94b3c15ca47, []int{5}
}
func (m *GuildInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildInvite.Merge(m, src)
}
func (m *GuildInvite) XXX_Size() int {
	return m.Size()
}
func (m *GuildInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildInvite.DiscardUnknown(m)
}

var xxx_messageInfo_GuildInvite proto.InternalMessageInfo

func (m *GuildInvite) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildInvite) GetRoleId() []string {
	if m != nil {
		return m.RoleId
	}
	return nil
}

func (*GuildInvite) XXX_MessageName() string {
	return "dao.GuildInvite"
}

type GuildRankId struct {
	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" pk`
	RankId string `protobuf:"bytes,2,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
}

func (m *GuildRankId) Reset()      { *m = GuildRankId{} }
func (*GuildRankId) ProtoMessage() {}
func (*GuildRankId) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd26b94b3c15ca47, []int{6}
}
func (m *GuildRankId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildRankId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildRankId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildRankId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildRankId.Merge(m, src)
}
func (m *GuildRankId) XXX_Size() int {
	return m.Size()
}
func (m *GuildRankId) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildRankId.DiscardUnknown(m)
}

var xxx_messageInfo_GuildRankId proto.InternalMessageInfo

func (m *GuildRankId) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GuildRankId) GetRankId() string {
	if m != nil {
		return m.RankId
	}
	return ""
}

func (*GuildRankId) XXX_MessageName() string {
	return "dao.GuildRankId"
}

// 公会祝福
type Blessing struct {
	RoleId    string                  `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Stage     int64                   `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Page      int64                   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Activated []int64                 `protobuf:"varint,4,rep,packed,name=activated,proto3" json:"activated,omitempty"`
	Queue     []*models.BlessingQueue `protobuf:"bytes,5,rep,name=queue,proto3" json:"queue,omitempty"`
}

func (m *Blessing) Reset()      { *m = Blessing{} }
func (*Blessing) ProtoMessage() {}
func (*Blessing) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd26b94b3c15ca47, []int{7}
}
func (m *Blessing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Blessing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Blessing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Blessing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blessing.Merge(m, src)
}
func (m *Blessing) XXX_Size() int {
	return m.Size()
}
func (m *Blessing) XXX_DiscardUnknown() {
	xxx_messageInfo_Blessing.DiscardUnknown(m)
}

var xxx_messageInfo_Blessing proto.InternalMessageInfo

func (m *Blessing) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Blessing) GetStage() int64 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *Blessing) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Blessing) GetActivated() []int64 {
	if m != nil {
		return m.Activated
	}
	return nil
}

func (m *Blessing) GetQueue() []*models.BlessingQueue {
	if m != nil {
		return m.Queue
	}
	return nil
}

func (*Blessing) XXX_MessageName() string {
	return "dao.Blessing"
}

type BlessingEffic struct {
	GuildId string                      `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" pk`
	Effic   []*models.BlessingEfficItem `protobuf:"bytes,2,rep,name=effic,proto3" json:"effic,omitempty"`
}

func (m *BlessingEffic) Reset()      { *m = BlessingEffic{} }
func (*BlessingEffic) ProtoMessage() {}
func (*BlessingEffic) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd26b94b3c15ca47, []int{8}
}
func (m *BlessingEffic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlessingEffic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlessingEffic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlessingEffic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlessingEffic.Merge(m, src)
}
func (m *BlessingEffic) XXX_Size() int {
	return m.Size()
}
func (m *BlessingEffic) XXX_DiscardUnknown() {
	xxx_messageInfo_BlessingEffic.DiscardUnknown(m)
}

var xxx_messageInfo_BlessingEffic proto.InternalMessageInfo

func (m *BlessingEffic) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *BlessingEffic) GetEffic() []*models.BlessingEfficItem {
	if m != nil {
		return m.Effic
	}
	return nil
}

func (*BlessingEffic) XXX_MessageName() string {
	return "dao.BlessingEffic"
}
func init() {
	proto.RegisterType((*Guild)(nil), "dao.Guild")
	proto.RegisterMapType((map[int64]string)(nil), "dao.Guild.PositionNameEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.Guild.ResourcesEntry")
	proto.RegisterType((*GuildMember)(nil), "dao.GuildMember")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.GuildMember.ActiveValueEntry")
	proto.RegisterType((*GuildUser)(nil), "dao.GuildUser")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.GuildUser.ActiveValueEntry")
	proto.RegisterType((*GuildApply)(nil), "dao.GuildApply")
	proto.RegisterType((*GuildUserApply)(nil), "dao.GuildUserApply")
	proto.RegisterType((*GuildInvite)(nil), "dao.GuildInvite")
	proto.RegisterType((*GuildRankId)(nil), "dao.GuildRankId")
	proto.RegisterType((*Blessing)(nil), "dao.Blessing")
	proto.RegisterType((*BlessingEffic)(nil), "dao.BlessingEffic")
}

func init() { proto.RegisterFile("proto/dao/guild.proto", fileDescriptor_dd26b94b3c15ca47) }

var fileDescriptor_dd26b94b3c15ca47 = []byte{
	// 997 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xce, 0xcc, 0xac, 0xed, 0x71, 0xd9, 0xc9, 0x26, 0x4d, 0x76, 0xb7, 0x63, 0xb2, 0x13, 0xc7,
	0x5c, 0x2c, 0x7e, 0x1c, 0x29, 0x1c, 0x40, 0x80, 0x00, 0x47, 0xac, 0x90, 0x57, 0x2c, 0x82, 0x91,
	0x00, 0x89, 0xcb, 0xa8, 0x33, 0xd3, 0xb1, 0x9a, 0x8c, 0xa7, 0xcd, 0x4c, 0x3b, 0xd9, 0xbc, 0x05,
	0x8f, 0xc0, 0x91, 0x47, 0xd9, 0xe3, 0x1e, 0xf7, 0x04, 0x8b, 0x73, 0xe1, 0x88, 0x38, 0x73, 0x40,
	0x55, 0x3d, 0xf6, 0x38, 0x59, 0xa4, 0x0d, 0x20, 0x2e, 0x56, 0xd7, 0x57, 0xd5, 0xd5, 0xd5, 0x5f,
	0x7d, 0x5d, 0x63, 0xb8, 0x33, 0xcd, 0xb5, 0xd1, 0x07, 0x89, 0xd0, 0x07, 0xe3, 0x99, 0x4a, 0x93,
	0x01, 0xd9, 0xcc, 0x4b, 0x84, 0xee, 0x6c, 0x8f, 0xf5, 0x58, 0x5b, 0x3f, 0xae, 0xac, 0xab, 0xc3,
	0x2d, 0x32, 0xd1, 0x89, 0x4c, 0x8b, 0xd5, 0x4d, 0xbd, 0xe7, 0x35, 0xa8, 0x7d, 0x8a, 0x36, 0xbb,
	0x0b, 0xae, 0x4a, 0xb8, 0xd3, 0x75, 0xfa, 0xcd, 0xa3, 0xfa, 0x1f, 0x3f, 0xef, 0xb9, 0xd3, 0xd3,
	0xd0, 0x55, 0x09, 0x7b, 0x15, 0x9a, 0xa9, 0x14, 0x89, 0xcc, 0x23, 0x95, 0x70, 0x17, 0xdd, 0xa1,
	0x6f, 0x81, 0x51, 0xc2, 0x18, 0xdc, 0xca, 0xc4, 0x44, 0x72, 0x8f, 0x70, 0x5a, 0x23, 0x76, 0x92,
	0x8a, 0x31, 0xbf, 0xd5, 0x75, 0xfa, 0x5e, 0x48, 0x6b, 0xc4, 0x52, 0x91, 0x8d, 0x79, 0xcd, 0x62,
	0xb8, 0x66, 0xdb, 0x50, 0x53, 0x99, 0xc9, 0x35, 0xaf, 0xd3, 0x66, 0x6b, 0xb0, 0xbb, 0x50, 0xcf,
	0xb4, 0x51, 0xb1, 0xe4, 0x0d, 0x82, 0x4b, 0x0b, 0xcb, 0x10, 0x33, 0xa3, 0xa3, 0xef, 0xb4, 0xca,
	0xb8, 0xdf, 0x75, 0xfa, 0x7e, 0xe8, 0x23, 0xf0, 0x50, 0xab, 0x0c, 0x53, 0xa5, 0xf2, 0x4c, 0xa6,
	0xbc, 0x49, 0xf9, 0xad, 0xc1, 0x36, 0xc1, 0x93, 0x8f, 0xa7, 0x1c, 0x08, 0xc3, 0x25, 0x7b, 0x07,
	0x9a, 0xb9, 0x2c, 0xf4, 0x2c, 0x8f, 0x65, 0xc1, 0x5b, 0x5d, 0xaf, 0xdf, 0x3a, 0xdc, 0x19, 0x24,
	0x42, 0x0f, 0x88, 0x82, 0x41, 0xb8, 0xf0, 0x3d, 0xc8, 0x4c, 0x7e, 0x11, 0x56, 0xb1, 0xec, 0x3e,
	0x40, 0x9c, 0x4b, 0x61, 0x64, 0x12, 0x09, 0xc3, 0xdb, 0x94, 0xb1, 0x59, 0x22, 0x43, 0x83, 0xee,
	0x44, 0xa6, 0xb2, 0x74, 0xaf, 0x5b, 0x77, 0x89, 0x0c, 0x0d, 0xeb, 0x80, 0x3f, 0xce, 0xa5, 0x34,
	0x2a, 0x1b, 0xf3, 0x0d, 0xcb, 0xe0, 0xc2, 0x66, 0x43, 0x58, 0x9f, 0xea, 0x42, 0x19, 0xa5, 0xb3,
	0x88, 0xa8, 0xbc, 0x4d, 0x65, 0xed, 0xae, 0x94, 0xf5, 0x45, 0xe9, 0xff, 0x5c, 0x4c, 0xa4, 0xad,
	0xac, 0x3d, 0x5d, 0x81, 0xd8, 0xfb, 0xd0, 0x3e, 0xd7, 0x79, 0x9a, 0x44, 0x2a, 0x3b, 0x53, 0x46,
	0xf2, 0xcd, 0xae, 0xd3, 0x6f, 0x1d, 0xf2, 0x81, 0x6d, 0xb7, 0x4d, 0xf2, 0x0d, 0x06, 0x8c, 0xc8,
	0x1f, 0xb6, 0xce, 0x2b, 0x83, 0xbd, 0x09, 0x2c, 0xd6, 0x93, 0x63, 0x61, 0xa2, 0x33, 0x91, 0xce,
	0x64, 0x94, 0xaa, 0x89, 0x32, 0x7c, 0x8b, 0xae, 0xb0, 0x69, 0x3d, 0x5f, 0xa3, 0xe3, 0x33, 0xc4,
	0xf1, 0xa2, 0xf6, 0x90, 0x68, 0x52, 0x8c, 0x39, 0xa3, 0xbb, 0x34, 0x2d, 0xf2, 0xa8, 0xa0, 0x96,
	0xc6, 0x7a, 0x96, 0x19, 0xfe, 0x8a, 0xed, 0x03, 0x19, 0x9d, 0x0f, 0x60, 0xe3, 0x2a, 0xb3, 0xd8,
	0x99, 0x53, 0x79, 0x41, 0x62, 0xf3, 0x42, 0x5c, 0xe2, 0x4e, 0x3a, 0x9f, 0x14, 0xe6, 0x85, 0xd6,
	0x78, 0xcf, 0x7d, 0xd7, 0xe9, 0x7c, 0x04, 0x5b, 0x2f, 0x10, 0xf0, 0xb2, 0x04, 0xcd, 0x95, 0x04,
	0xbd, 0x3f, 0x5d, 0x68, 0x11, 0x07, 0x8f, 0xe4, 0xe4, 0x58, 0xe6, 0x6c, 0x0f, 0x1a, 0xb9, 0x4e,
	0x65, 0xf4, 0x82, 0xda, 0xeb, 0x08, 0x8f, 0x48, 0xf1, 0x85, 0xcc, 0xcf, 0x2a, 0xc5, 0x7b, 0xa1,
	0x6f, 0x81, 0x51, 0x82, 0xbd, 0x5c, 0x90, 0x4f, 0xaa, 0xf7, 0xc2, 0xa5, 0xcd, 0xee, 0x41, 0x03,
	0xe5, 0x89, 0x1a, 0xb0, 0xe2, 0xaf, 0xa3, 0x39, 0x34, 0xec, 0x35, 0x58, 0x4f, 0x45, 0x61, 0xa2,
	0xe5, 0x4e, 0xfb, 0x0e, 0xda, 0x08, 0x2e, 0x2e, 0xc7, 0xf6, 0xa1, 0xbd, 0xda, 0x09, 0x7a, 0x16,
	0x5e, 0xd8, 0x5a, 0xe9, 0x01, 0xfb, 0x04, 0xda, 0x22, 0x36, 0xea, 0x4c, 0x96, 0x21, 0x3e, 0x69,
	0x65, 0xbf, 0xd2, 0x8a, 0xbd, 0xe2, 0x60, 0x48, 0x41, 0xb4, 0xc7, 0x0a, 0xa6, 0x25, 0x2a, 0x04,
	0x5b, 0x6e, 0xb4, 0x11, 0x69, 0x74, 0x25, 0x97, 0x7d, 0x3a, 0x9b, 0xe4, 0x59, 0xd9, 0xdf, 0xf9,
	0x10, 0x36, 0xaf, 0xa7, 0xfb, 0x27, 0xfd, 0xeb, 0xfd, 0xe2, 0x42, 0x93, 0x6a, 0xfb, 0xaa, 0xb8,
	0x09, 0xf9, 0x3b, 0xe0, 0xd3, 0x7c, 0xc2, 0x08, 0x3b, 0x55, 0x1a, 0x64, 0x8f, 0x12, 0xb6, 0x01,
	0x6e, 0x9c, 0x94, 0xcc, 0xba, 0x71, 0xc2, 0xfa, 0x50, 0x3b, 0x46, 0x17, 0xb1, 0xd9, 0x3a, 0x64,
	0x57, 0x04, 0x7f, 0x84, 0x3f, 0xa1, 0x0d, 0x60, 0xaf, 0xc3, 0xd6, 0x89, 0xca, 0x0b, 0x43, 0xd3,
	0x23, 0xca, 0xe5, 0xb9, 0xc8, 0x13, 0xe2, 0xd7, 0x0f, 0x6f, 0x93, 0x03, 0xa7, 0x48, 0x48, 0x30,
	0x3b, 0xba, 0xc6, 0x71, 0x83, 0x38, 0xde, 0xab, 0x38, 0xc6, 0x7b, 0xfc, 0x2b, 0x86, 0xfd, 0xff,
	0x89, 0xe1, 0x0b, 0x00, 0x2a, 0x6c, 0x38, 0x9d, 0xa6, 0x17, 0xff, 0x51, 0xde, 0x7f, 0x37, 0xd0,
	0x77, 0xc0, 0x17, 0x98, 0xba, 0xd2, 0x75, 0x83, 0xec, 0xa1, 0xe9, 0x9d, 0xc2, 0xc6, 0x92, 0x93,
	0x1b, 0x1e, 0xbf, 0xda, 0x60, 0xf7, 0x6a, 0x83, 0xef, 0x03, 0xc8, 0xc7, 0x53, 0x95, 0xdb, 0x31,
	0x6a, 0x5f, 0x57, 0xb3, 0x44, 0x86, 0xa6, 0x37, 0x2a, 0xdf, 0x71, 0x39, 0xb9, 0xf6, 0x57, 0x12,
	0x5d, 0x3d, 0x6a, 0x99, 0xf0, 0x5e, 0x55, 0x8c, 0xdb, 0xf5, 0xf0, 0x6b, 0x62, 0x8b, 0xe8, 0x7d,
	0x5c, 0xa6, 0x0a, 0x45, 0x76, 0x3a, 0x4a, 0x18, 0xaf, 0xd8, 0xae, 0xb2, 0x10, 0xeb, 0x98, 0x41,
	0x64, 0xa7, 0x55, 0xb1, 0xf5, 0x9c, 0xb6, 0xf4, 0x7e, 0x74, 0xc0, 0x3f, 0x4a, 0x65, 0x51, 0xe0,
	0x10, 0x7f, 0xe9, 0xa5, 0xb7, 0xa1, 0x56, 0x18, 0x31, 0x5e, 0x36, 0x8f, 0x0c, 0x24, 0x7b, 0x8a,
	0xa0, 0xbd, 0x29, 0xad, 0xd9, 0x2e, 0x34, 0x49, 0x34, 0xf8, 0x65, 0xe1, 0xb7, 0xba, 0x1e, 0x52,
	0xb0, 0x04, 0xd8, 0x1b, 0x50, 0xfb, 0x7e, 0x26, 0x67, 0x92, 0xd7, 0x48, 0x95, 0x77, 0x16, 0x92,
	0x5f, 0x54, 0xf2, 0x25, 0x3a, 0x43, 0x1b, 0xd3, 0x8b, 0x61, 0x7d, 0x81, 0x3f, 0x38, 0x39, 0x51,
	0xf1, 0x4d, 0x18, 0x3b, 0x80, 0x9a, 0xc4, 0x58, 0xe2, 0x0b, 0xbf, 0x8e, 0xd7, 0x0e, 0xa0, 0x44,
	0x23, 0x23, 0x27, 0xa1, 0x8d, 0x3b, 0x7a, 0xf8, 0xec, 0xd7, 0x60, 0xed, 0xa7, 0x79, 0xe0, 0x3c,
	0x99, 0x07, 0xce, 0xd3, 0x79, 0xe0, 0x3c, 0x9f, 0x07, 0xce, 0x6f, 0xf3, 0x60, 0xed, 0xf7, 0x79,
	0xe0, 0xfc, 0x70, 0x19, 0xac, 0x3d, 0xb9, 0x0c, 0x9c, 0xa7, 0x97, 0xc1, 0xda, 0xb3, 0xcb, 0x60,
	0xed, 0xdb, 0xdd, 0x58, 0xab, 0xec, 0x2d, 0xab, 0xb6, 0x83, 0x58, 0x4f, 0x26, 0x3a, 0x3b, 0x58,
	0xfe, 0x9b, 0x39, 0xae, 0xd3, 0xf2, 0xed, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x63, 0xd6, 0xa1,
	0x60, 0xe1, 0x08, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuild.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildMember.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildUser.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildApply.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildUserApply.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildInvite.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildRankId.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBlessing.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBlessingEffic.Get().(proto.Message)
	})
}

var poolGuild = &sync.Pool{New: func() interface{} { return &Guild{} }}

func (m *Guild) ReleasePool() { m.Reset(); poolGuild.Put(m); m = nil }

var poolGuildMember = &sync.Pool{New: func() interface{} { return &GuildMember{} }}

func (m *GuildMember) ReleasePool() { m.Reset(); poolGuildMember.Put(m); m = nil }

var poolGuildUser = &sync.Pool{New: func() interface{} { return &GuildUser{} }}

func (m *GuildUser) ReleasePool() { m.Reset(); poolGuildUser.Put(m); m = nil }

var poolGuildApply = &sync.Pool{New: func() interface{} { return &GuildApply{} }}

func (m *GuildApply) ReleasePool() { m.Reset(); poolGuildApply.Put(m); m = nil }

var poolGuildUserApply = &sync.Pool{New: func() interface{} { return &GuildUserApply{} }}

func (m *GuildUserApply) ReleasePool() { m.Reset(); poolGuildUserApply.Put(m); m = nil }

var poolGuildInvite = &sync.Pool{New: func() interface{} { return &GuildInvite{} }}

func (m *GuildInvite) ReleasePool() { m.Reset(); poolGuildInvite.Put(m); m = nil }

var poolGuildRankId = &sync.Pool{New: func() interface{} { return &GuildRankId{} }}

func (m *GuildRankId) ReleasePool() { m.Reset(); poolGuildRankId.Put(m); m = nil }

var poolBlessing = &sync.Pool{New: func() interface{} { return &Blessing{} }}

func (m *Blessing) ReleasePool() { m.Reset(); poolBlessing.Put(m); m = nil }

var poolBlessingEffic = &sync.Pool{New: func() interface{} { return &BlessingEffic{} }}

func (m *BlessingEffic) ReleasePool() { m.Reset(); poolBlessingEffic.Put(m); m = nil }

func (m *Guild) PK() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *Guild) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Id...)
}

func (m *Guild) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Guild) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Guild) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GuildMember) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *GuildMember) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *GuildMember) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildMember) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildMember) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GuildUser) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *GuildUser) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *GuildUser) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildUser) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildUser) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GuildApply) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *GuildApply) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *GuildApply) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildApply) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildApply) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GuildUserApply) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *GuildUserApply) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *GuildUserApply) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildUserApply) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildUserApply) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GuildInvite) PK() string {
	if m == nil {
		return ""
	}
	return m.GuildId
}

func (m *GuildInvite) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.GuildId...)
}

func (m *GuildInvite) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildInvite) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildInvite) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GuildRankId) PK() string {
	if m == nil {
		return ""
	}
	return m.Key
}

func (m *GuildRankId) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Key...)
}

func (m *GuildRankId) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildRankId) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildRankId) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *Blessing) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Blessing) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Blessing) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Blessing) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Blessing) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *BlessingEffic) PK() string {
	if m == nil {
		return ""
	}
	return m.GuildId
}

func (m *BlessingEffic) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.GuildId...)
}

func (m *BlessingEffic) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *BlessingEffic) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *BlessingEffic) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Guild) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Guild)
	if !ok {
		that2, ok := that.(Guild)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.LeaderId != that1.LeaderId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	if this.Lang != that1.Lang {
		return false
	}
	if this.Intro != that1.Intro {
		return false
	}
	if this.Notice != that1.Notice {
		return false
	}
	if this.AutoJoin != that1.AutoJoin {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Exp != that1.Exp {
		return false
	}
	if len(this.Resources) != len(that1.Resources) {
		return false
	}
	for i := range this.Resources {
		if this.Resources[i] != that1.Resources[i] {
			return false
		}
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.DeletedAt != that1.DeletedAt {
		return false
	}
	if this.Greeting != that1.Greeting {
		return false
	}
	if len(this.PositionName) != len(that1.PositionName) {
		return false
	}
	for i := range this.PositionName {
		if this.PositionName[i] != that1.PositionName[i] {
			return false
		}
	}
	if !this.WorldInvite.Equal(that1.WorldInvite) {
		return false
	}
	if this.CombatValueLimit != that1.CombatValueLimit {
		return false
	}
	if this.InviteMsg != that1.InviteMsg {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GuildMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildMember)
	if !ok {
		that2, ok := that.(GuildMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if this.JoinAt != that1.JoinAt {
		return false
	}
	if this.LastPosition != that1.LastPosition {
		return false
	}
	if this.CombatValue != that1.CombatValue {
		return false
	}
	if len(this.ActiveValue) != len(that1.ActiveValue) {
		return false
	}
	for i := range this.ActiveValue {
		if this.ActiveValue[i] != that1.ActiveValue[i] {
			return false
		}
	}
	if this.TotalActiveValue != that1.TotalActiveValue {
		return false
	}
	return true
}
func (this *GuildUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildUser)
	if !ok {
		that2, ok := that.(GuildUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.Cd != that1.Cd {
		return false
	}
	if !this.Build.Equal(that1.Build) {
		return false
	}
	if this.FirstJoinReward != that1.FirstJoinReward {
		return false
	}
	if len(this.ActiveValue) != len(that1.ActiveValue) {
		return false
	}
	for i := range this.ActiveValue {
		if this.ActiveValue[i] != that1.ActiveValue[i] {
			return false
		}
	}
	if this.TotalActiveValue != that1.TotalActiveValue {
		return false
	}
	return true
}
func (this *GuildApply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildApply)
	if !ok {
		that2, ok := that.(GuildApply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ApplyAt != that1.ApplyAt {
		return false
	}
	return true
}
func (this *GuildUserApply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildUserApply)
	if !ok {
		that2, ok := that.(GuildUserApply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.ExpiredAt != that1.ExpiredAt {
		return false
	}
	return true
}
func (this *GuildInvite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildInvite)
	if !ok {
		that2, ok := that.(GuildInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if len(this.RoleId) != len(that1.RoleId) {
		return false
	}
	for i := range this.RoleId {
		if this.RoleId[i] != that1.RoleId[i] {
			return false
		}
	}
	return true
}
func (this *GuildRankId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildRankId)
	if !ok {
		that2, ok := that.(GuildRankId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.RankId != that1.RankId {
		return false
	}
	return true
}
func (this *Blessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Blessing)
	if !ok {
		that2, ok := that.(Blessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if len(this.Activated) != len(that1.Activated) {
		return false
	}
	for i := range this.Activated {
		if this.Activated[i] != that1.Activated[i] {
			return false
		}
	}
	if len(this.Queue) != len(that1.Queue) {
		return false
	}
	for i := range this.Queue {
		if !this.Queue[i].Equal(that1.Queue[i]) {
			return false
		}
	}
	return true
}
func (this *BlessingEffic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlessingEffic)
	if !ok {
		that2, ok := that.(BlessingEffic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if len(this.Effic) != len(that1.Effic) {
		return false
	}
	for i := range this.Effic {
		if !this.Effic[i].Equal(that1.Effic[i]) {
			return false
		}
	}
	return true
}
func (m *Guild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Guild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Guild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.InviteMsg) > 0 {
		i -= len(m.InviteMsg)
		copy(dAtA[i:], m.InviteMsg)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.InviteMsg)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.CombatValueLimit != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.CombatValueLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.WorldInvite != nil {
		{
			size, err := m.WorldInvite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGuild(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PositionName) > 0 {
		for k := range m.PositionName {
			v := m.PositionName[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGuild(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintGuild(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGuild(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Greeting) > 0 {
		i -= len(m.Greeting)
		copy(dAtA[i:], m.Greeting)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Greeting)))
		i--
		dAtA[i] = 0x72
	}
	if m.DeletedAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x68
	}
	if m.CreatedAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Resources) > 0 {
		for k := range m.Resources {
			v := m.Resources[k]
			baseI := i
			i = encodeVarintGuild(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintGuild(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGuild(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Exp != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x50
	}
	if m.Level != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x48
	}
	if m.AutoJoin {
		i--
		if m.AutoJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Notice) > 0 {
		i -= len(m.Notice)
		copy(dAtA[i:], m.Notice)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Notice)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x32
	}
	if m.Lang != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Lang))
		i--
		dAtA[i] = 0x28
	}
	if m.Flag != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LeaderId) > 0 {
		i -= len(m.LeaderId)
		copy(dAtA[i:], m.LeaderId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.LeaderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalActiveValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.TotalActiveValue))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ActiveValue) > 0 {
		for k := range m.ActiveValue {
			v := m.ActiveValue[k]
			baseI := i
			i = encodeVarintGuild(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintGuild(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGuild(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CombatValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.CombatValue))
		i--
		dAtA[i] = 0x30
	}
	if m.LastPosition != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.LastPosition))
		i--
		dAtA[i] = 0x28
	}
	if m.JoinAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.JoinAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Position != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerId != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalActiveValue != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.TotalActiveValue))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ActiveValue) > 0 {
		for k := range m.ActiveValue {
			v := m.ActiveValue[k]
			baseI := i
			i = encodeVarintGuild(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintGuild(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGuild(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.FirstJoinReward {
		i--
		if m.FirstJoinReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Build != nil {
		{
			size, err := m.Build.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGuild(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Cd != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Cd))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplyAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ApplyAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ServerId != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildUserApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildUserApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildUserApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiredAt != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		for iNdEx := len(m.RoleId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleId[iNdEx])
			copy(dAtA[i:], m.RoleId[iNdEx])
			i = encodeVarintGuild(dAtA, i, uint64(len(m.RoleId[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildRankId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildRankId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildRankId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RankId) > 0 {
		i -= len(m.RankId)
		copy(dAtA[i:], m.RankId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.RankId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Blessing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Blessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Queue) > 0 {
		for iNdEx := len(m.Queue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuild(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Activated) > 0 {
		dAtA4 := make([]byte, len(m.Activated)*10)
		var j3 int
		for _, num1 := range m.Activated {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintGuild(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if m.Page != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Stage != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlessingEffic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlessingEffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlessingEffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Effic) > 0 {
		for iNdEx := len(m.Effic) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Effic[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuild(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuild(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuild(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Guild) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.LeaderId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("leader_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.LeaderId)
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.Flag != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("flag")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Flag))
		needWriteComma = true
	}
	if m.Lang != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lang")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lang))
		needWriteComma = true
	}
	if m.Intro != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("intro")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Intro)
		needWriteComma = true
	}
	if m.Notice != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("notice")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Notice)
		needWriteComma = true
	}
	if m.AutoJoin {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("auto_join")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.AutoJoin)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.Exp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("exp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Exp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("resources")
	w.RawByte('"')
	w.RawByte(':')
	if m.Resources == nil {
		w.RawString("null")
	} else if len(m.Resources) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlResources := len(m.Resources)
		for k, v := range m.Resources {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlResources--
			if mlResources != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.CreatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("created_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreatedAt))
		needWriteComma = true
	}
	if m.DeletedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("deleted_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DeletedAt))
		needWriteComma = true
	}
	if m.Greeting != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("greeting")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Greeting)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("position_name")
	w.RawByte('"')
	w.RawByte(':')
	if m.PositionName == nil {
		w.RawString("null")
	} else if len(m.PositionName) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlPositionName := len(m.PositionName)
		for k, v := range m.PositionName {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.String(v)
			mlPositionName--
			if mlPositionName != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("world_invite")
	w.RawByte('"')
	w.RawByte(':')
	m.WorldInvite.JsonBytes(w)
	needWriteComma = true
	if m.CombatValueLimit != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_value_limit")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValueLimit))
		needWriteComma = true
	}
	if m.InviteMsg != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("invite_msg")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.InviteMsg)
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildMember) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.Position != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("position")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Position))
		needWriteComma = true
	}
	if m.JoinAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("join_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.JoinAt))
		needWriteComma = true
	}
	if m.LastPosition != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_position")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastPosition))
		needWriteComma = true
	}
	if m.CombatValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValue))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("active_value")
	w.RawByte('"')
	w.RawByte(':')
	if m.ActiveValue == nil {
		w.RawString("null")
	} else if len(m.ActiveValue) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlActiveValue := len(m.ActiveValue)
		for k, v := range m.ActiveValue {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlActiveValue--
			if mlActiveValue != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.TotalActiveValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_active_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalActiveValue))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildUser) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.Cd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cd")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Cd))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("build")
	w.RawByte('"')
	w.RawByte(':')
	m.Build.JsonBytes(w)
	needWriteComma = true
	if m.FirstJoinReward {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("first_join_reward")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.FirstJoinReward)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("active_value")
	w.RawByte('"')
	w.RawByte(':')
	if m.ActiveValue == nil {
		w.RawString("null")
	} else if len(m.ActiveValue) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlActiveValue := len(m.ActiveValue)
		for k, v := range m.ActiveValue {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlActiveValue--
			if mlActiveValue != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.TotalActiveValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_active_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalActiveValue))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildApply) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.ApplyAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("apply_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ApplyAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildUserApply) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.ExpiredAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expired_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpiredAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildInvite) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildId != "" {
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("role_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.RoleId == nil {
		w.RawString("null")
	} else if len(m.RoleId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RoleId {
			w.String(v)
			if i != len(m.RoleId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildRankId) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Key != "" {
		w.RawByte('"')
		w.RawString("key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Key)
		needWriteComma = true
	}
	if m.RankId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rank_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Blessing) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Stage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("stage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Stage))
		needWriteComma = true
	}
	if m.Page != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("page")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Page))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("activated")
	w.RawByte('"')
	w.RawByte(':')
	if m.Activated == nil {
		w.RawString("null")
	} else if len(m.Activated) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Activated {
			w.Int64(int64(v))
			if i != len(m.Activated)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("queue")
	w.RawByte('"')
	w.RawByte(':')
	if m.Queue == nil {
		w.RawString("null")
	} else if len(m.Queue) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Queue {
			v.JsonBytes(w)
			if i != len(m.Queue)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BlessingEffic) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildId != "" {
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("effic")
	w.RawByte('"')
	w.RawByte(':')
	if m.Effic == nil {
		w.RawString("null")
	} else if len(m.Effic) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Effic {
			v.JsonBytes(w)
			if i != len(m.Effic)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Guild) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Guild) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Guild) GoString() string {
	return m.String()
}

func (m *GuildMember) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildMember) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildMember) GoString() string {
	return m.String()
}

func (m *GuildUser) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildUser) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildUser) GoString() string {
	return m.String()
}

func (m *GuildApply) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildApply) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildApply) GoString() string {
	return m.String()
}

func (m *GuildUserApply) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildUserApply) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildUserApply) GoString() string {
	return m.String()
}

func (m *GuildInvite) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildInvite) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildInvite) GoString() string {
	return m.String()
}

func (m *GuildRankId) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildRankId) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildRankId) GoString() string {
	return m.String()
}

func (m *Blessing) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Blessing) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Blessing) GoString() string {
	return m.String()
}

func (m *BlessingEffic) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BlessingEffic) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BlessingEffic) GoString() string {
	return m.String()
}

func (m *Guild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.LeaderId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Flag != 0 {
		n += 1 + sovGuild(uint64(m.Flag))
	}
	if m.Lang != 0 {
		n += 1 + sovGuild(uint64(m.Lang))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.AutoJoin {
		n += 2
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovGuild(uint64(m.Exp))
	}
	if len(m.Resources) > 0 {
		for k, v := range m.Resources {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 1 + sovGuild(uint64(mapEntrySize))
		}
	}
	if m.CreatedAt != 0 {
		n += 1 + sovGuild(uint64(m.CreatedAt))
	}
	if m.DeletedAt != 0 {
		n += 1 + sovGuild(uint64(m.DeletedAt))
	}
	l = len(m.Greeting)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if len(m.PositionName) > 0 {
		for k, v := range m.PositionName {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + len(v) + sovGuild(uint64(len(v)))
			n += mapEntrySize + 1 + sovGuild(uint64(mapEntrySize))
		}
	}
	if m.WorldInvite != nil {
		l = m.WorldInvite.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if m.CombatValueLimit != 0 {
		n += 2 + sovGuild(uint64(m.CombatValueLimit))
	}
	l = len(m.InviteMsg)
	if l > 0 {
		n += 2 + l + sovGuild(uint64(l))
	}
	if m.Count != 0 {
		n += 2 + sovGuild(uint64(m.Count))
	}
	return n
}

func (m *GuildMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovGuild(uint64(m.ServerId))
	}
	if m.Position != 0 {
		n += 1 + sovGuild(uint64(m.Position))
	}
	if m.JoinAt != 0 {
		n += 1 + sovGuild(uint64(m.JoinAt))
	}
	if m.LastPosition != 0 {
		n += 1 + sovGuild(uint64(m.LastPosition))
	}
	if m.CombatValue != 0 {
		n += 1 + sovGuild(uint64(m.CombatValue))
	}
	if len(m.ActiveValue) > 0 {
		for k, v := range m.ActiveValue {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 1 + sovGuild(uint64(mapEntrySize))
		}
	}
	if m.TotalActiveValue != 0 {
		n += 1 + sovGuild(uint64(m.TotalActiveValue))
	}
	return n
}

func (m *GuildUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Cd != 0 {
		n += 1 + sovGuild(uint64(m.Cd))
	}
	if m.Build != nil {
		l = m.Build.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.FirstJoinReward {
		n += 2
	}
	if len(m.ActiveValue) > 0 {
		for k, v := range m.ActiveValue {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 1 + sovGuild(uint64(mapEntrySize))
		}
	}
	if m.TotalActiveValue != 0 {
		n += 1 + sovGuild(uint64(m.TotalActiveValue))
	}
	return n
}

func (m *GuildApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovGuild(uint64(m.ServerId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.ApplyAt != 0 {
		n += 1 + sovGuild(uint64(m.ApplyAt))
	}
	return n
}

func (m *GuildUserApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovGuild(uint64(m.ExpiredAt))
	}
	return n
}

func (m *GuildInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if len(m.RoleId) > 0 {
		for _, s := range m.RoleId {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GuildRankId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.RankId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *Blessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Stage != 0 {
		n += 1 + sovGuild(uint64(m.Stage))
	}
	if m.Page != 0 {
		n += 1 + sovGuild(uint64(m.Page))
	}
	if len(m.Activated) > 0 {
		l = 0
		for _, e := range m.Activated {
			l += sovGuild(uint64(e))
		}
		n += 1 + sovGuild(uint64(l)) + l
	}
	if len(m.Queue) > 0 {
		for _, e := range m.Queue {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *BlessingEffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if len(m.Effic) > 0 {
		for _, e := range m.Effic {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func sovGuild(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuild(x uint64) (n int) {
	return sovGuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Guild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			m.Lang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lang |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoJoin = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resources[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greeting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Greeting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionName == nil {
				m.PositionName = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGuild
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGuild
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PositionName[mapkey] = mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorldInvite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorldInvite == nil {
				m.WorldInvite = &models.GuildWorldInvite{}
			}
			if err := m.WorldInvite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValueLimit", wireType)
			}
			m.CombatValueLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValueLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAt", wireType)
			}
			m.JoinAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPosition", wireType)
			}
			m.LastPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPosition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			m.CombatValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveValue == nil {
				m.ActiveValue = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ActiveValue[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveValue", wireType)
			}
			m.TotalActiveValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalActiveValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cd", wireType)
			}
			m.Cd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Build == nil {
				m.Build = &models.GuildBuild{}
			}
			if err := m.Build.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstJoinReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstJoinReward = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveValue == nil {
				m.ActiveValue = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ActiveValue[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveValue", wireType)
			}
			m.TotalActiveValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalActiveValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyAt", wireType)
			}
			m.ApplyAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildUserApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildUserApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildUserApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = append(m.RoleId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildRankId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildRankId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildRankId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blessing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blessing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blessing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Activated = append(m.Activated, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGuild
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Activated) == 0 {
					m.Activated = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Activated = append(m.Activated, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = append(m.Queue, &models.BlessingQueue{})
			if err := m.Queue[len(m.Queue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlessingEffic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlessingEffic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlessingEffic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Effic = append(m.Effic, &models.BlessingEfficItem{})
			if err := m.Effic[len(m.Effic)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuild
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuild
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuild
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuild        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuild          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuild = fmt.Errorf("proto: unexpected end of group")
)
