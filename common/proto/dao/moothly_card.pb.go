// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/moothly_card.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MoonthlyCardData struct {
	RoleId string                                     `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Infos  map[int64]*models.MoonthlyCardActivityInfo `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MoonthlyCardData) Reset()      { *m = MoonthlyCardData{} }
func (*MoonthlyCardData) ProtoMessage() {}
func (*MoonthlyCardData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f817020fa897d35, []int{0}
}
func (m *MoonthlyCardData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoonthlyCardData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoonthlyCardData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoonthlyCardData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoonthlyCardData.Merge(m, src)
}
func (m *MoonthlyCardData) XXX_Size() int {
	return m.Size()
}
func (m *MoonthlyCardData) XXX_DiscardUnknown() {
	xxx_messageInfo_MoonthlyCardData.DiscardUnknown(m)
}

var xxx_messageInfo_MoonthlyCardData proto.InternalMessageInfo

func (m *MoonthlyCardData) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *MoonthlyCardData) GetInfos() map[int64]*models.MoonthlyCardActivityInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (*MoonthlyCardData) XXX_MessageName() string {
	return "dao.MoonthlyCardData"
}
func init() {
	proto.RegisterType((*MoonthlyCardData)(nil), "dao.MoonthlyCardData")
	proto.RegisterMapType((map[int64]*models.MoonthlyCardActivityInfo)(nil), "dao.MoonthlyCardData.InfosEntry")
}

func init() { proto.RegisterFile("proto/dao/moothly_card.proto", fileDescriptor_1f817020fa897d35) }

var fileDescriptor_1f817020fa897d35 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4a, 0xc3, 0x40,
	0x18, 0xc7, 0x73, 0x09, 0x46, 0x3c, 0x97, 0x12, 0x1c, 0x42, 0x28, 0x97, 0xe0, 0xd4, 0xc5, 0x04,
	0x14, 0x44, 0xdc, 0xac, 0x3a, 0x54, 0x70, 0xc9, 0xd8, 0xa5, 0x9c, 0xb9, 0xb3, 0x86, 0x26, 0xf9,
	0xca, 0xe5, 0x0c, 0xe4, 0x2d, 0x7c, 0x0c, 0xdf, 0xc4, 0x8e, 0x1d, 0x3b, 0x89, 0x5e, 0x16, 0x47,
	0xf1, 0x09, 0xe4, 0x72, 0xa0, 0x28, 0xdd, 0xfe, 0xfc, 0xee, 0x7f, 0xbf, 0xef, 0xe3, 0xc3, 0xc3,
	0xa5, 0x00, 0x09, 0x09, 0xa3, 0x90, 0x94, 0x00, 0xf2, 0xa1, 0x68, 0x67, 0x19, 0x15, 0x2c, 0xee,
	0xb1, 0xe7, 0x30, 0x0a, 0xc1, 0xc1, 0x1c, 0xe6, 0x60, 0x6a, 0x3a, 0x99, 0xa7, 0x20, 0x34, 0xa4,
	0x04, 0xc6, 0x8b, 0x7a, 0xcb, 0xdf, 0xc3, 0x17, 0x84, 0x07, 0xb7, 0x00, 0x95, 0xe6, 0x97, 0x54,
	0xb0, 0x2b, 0x2a, 0xa9, 0x17, 0xe2, 0x5d, 0x01, 0x05, 0x9f, 0xe5, 0xcc, 0x47, 0x11, 0x1a, 0xed,
	0x8d, 0xdd, 0xaf, 0xd7, 0xd0, 0x5e, 0x2e, 0x52, 0x57, 0xe3, 0x09, 0xf3, 0x4e, 0xf1, 0x4e, 0x5e,
	0xdd, 0x43, 0xed, 0xdb, 0x91, 0x33, 0xda, 0x3f, 0x8e, 0x62, 0x46, 0x21, 0xfe, 0xaf, 0x89, 0x27,
	0xba, 0x72, 0x5d, 0x49, 0xd1, 0xa6, 0xa6, 0x1e, 0x4c, 0x31, 0xfe, 0x85, 0xde, 0x00, 0x3b, 0x0b,
	0xde, 0xf6, 0x23, 0x9c, 0x54, 0x47, 0xed, 0x6d, 0x68, 0xf1, 0xc8, 0x7d, 0x3b, 0x42, 0xbd, 0xd7,
	0x2c, 0xfe, 0x47, 0x7d, 0x91, 0xc9, 0xbc, 0xc9, 0x65, 0xab, 0x45, 0xa9, 0xa9, 0x9f, 0xdb, 0x67,
	0x68, 0x7c, 0xb3, 0x79, 0x27, 0xd6, 0xb3, 0x22, 0x68, 0xa5, 0x08, 0x5a, 0x2b, 0x82, 0xde, 0x14,
	0x41, 0x1f, 0x8a, 0x58, 0x9f, 0x8a, 0xa0, 0xa7, 0x8e, 0x58, 0xab, 0x8e, 0xa0, 0x75, 0x47, 0xac,
	0x4d, 0x47, 0xac, 0xe9, 0x30, 0x83, 0xbc, 0x3a, 0xaa, 0xb9, 0x68, 0xb8, 0x48, 0x32, 0x28, 0x4b,
	0xa8, 0x92, 0x9f, 0x23, 0xdf, 0xb9, 0x7d, 0x3c, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x17, 0xbf,
	0xe9, 0x6a, 0x78, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMoonthlyCardData.Get().(proto.Message)
	})
}

var poolMoonthlyCardData = &sync.Pool{New: func() interface{} { return &MoonthlyCardData{} }}

func (m *MoonthlyCardData) ReleasePool() { m.Reset(); poolMoonthlyCardData.Put(m); m = nil }

func (m *MoonthlyCardData) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *MoonthlyCardData) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *MoonthlyCardData) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *MoonthlyCardData) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *MoonthlyCardData) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *MoonthlyCardData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MoonthlyCardData)
	if !ok {
		that2, ok := that.(MoonthlyCardData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	return true
}
func (m *MoonthlyCardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoonthlyCardData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoonthlyCardData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for k := range m.Infos {
			v := m.Infos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMoothlyCard(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMoothlyCard(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMoothlyCard(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMoothlyCard(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMoothlyCard(dAtA []byte, offset int, v uint64) int {
	offset -= sovMoothlyCard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MoonthlyCardData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("infos")
	w.RawByte('"')
	w.RawByte(':')
	if m.Infos == nil {
		w.RawString("null")
	} else if len(m.Infos) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlInfos := len(m.Infos)
		for k, v := range m.Infos {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlInfos--
			if mlInfos != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MoonthlyCardData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MoonthlyCardData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MoonthlyCardData) GoString() string {
	return m.String()
}

func (m *MoonthlyCardData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMoothlyCard(uint64(l))
	}
	if len(m.Infos) > 0 {
		for k, v := range m.Infos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMoothlyCard(uint64(l))
			}
			mapEntrySize := 1 + sovMoothlyCard(uint64(k)) + l
			n += mapEntrySize + 1 + sovMoothlyCard(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMoothlyCard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMoothlyCard(x uint64) (n int) {
	return sovMoothlyCard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MoonthlyCardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoonthlyCardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoonthlyCardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infos == nil {
				m.Infos = make(map[int64]*models.MoonthlyCardActivityInfo)
			}
			var mapkey int64
			var mapvalue *models.MoonthlyCardActivityInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMoothlyCard
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMoothlyCard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMoothlyCard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMoothlyCard
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMoothlyCard
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.MoonthlyCardActivityInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMoothlyCard(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMoothlyCard
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Infos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoothlyCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMoothlyCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMoothlyCard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMoothlyCard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoothlyCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMoothlyCard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMoothlyCard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMoothlyCard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMoothlyCard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMoothlyCard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMoothlyCard = fmt.Errorf("proto: unexpected end of group")
)
