// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/quest_reward.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	_ "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuestRewardData struct {
	RoleId     string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	IsReceived bool   `protobuf:"varint,2,opt,name=is_received,json=isReceived,proto3" json:"is_received,omitempty"`
}

func (m *QuestRewardData) Reset()      { *m = QuestRewardData{} }
func (*QuestRewardData) ProtoMessage() {}
func (*QuestRewardData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a94c90e1c60c75b1, []int{0}
}
func (m *QuestRewardData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuestRewardData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuestRewardData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuestRewardData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestRewardData.Merge(m, src)
}
func (m *QuestRewardData) XXX_Size() int {
	return m.Size()
}
func (m *QuestRewardData) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestRewardData.DiscardUnknown(m)
}

var xxx_messageInfo_QuestRewardData proto.InternalMessageInfo

func (m *QuestRewardData) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *QuestRewardData) GetIsReceived() bool {
	if m != nil {
		return m.IsReceived
	}
	return false
}

func (*QuestRewardData) XXX_MessageName() string {
	return "dao.QuestRewardData"
}
func init() {
	proto.RegisterType((*QuestRewardData)(nil), "dao.QuestRewardData")
}

func init() { proto.RegisterFile("proto/dao/quest_reward.proto", fileDescriptor_a94c90e1c60c75b1) }

var fileDescriptor_a94c90e1c60c75b1 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x49, 0xcc, 0xd7, 0x2f, 0x2c, 0x4d, 0x2d, 0x2e, 0x89, 0x2f, 0x4a, 0x2d, 0x4f,
	0x2c, 0x4a, 0xd1, 0x03, 0x0b, 0x0b, 0x31, 0xa7, 0x24, 0xe6, 0x4b, 0x89, 0xa4, 0xe7, 0xa7, 0xe7,
	0x43, 0x94, 0x81, 0x58, 0x10, 0x29, 0x29, 0xa8, 0xc6, 0xdc, 0xfc, 0x94, 0xd4, 0x9c, 0x62, 0xfd,
	0xa4, 0xfc, 0xe2, 0xe2, 0xf8, 0x8c, 0xc4, 0x9c, 0x1c, 0x88, 0xac, 0x52, 0x30, 0x17, 0x7f, 0x20,
	0xc8, 0xb8, 0x20, 0xb0, 0x69, 0x2e, 0x89, 0x25, 0x89, 0x42, 0xf2, 0x5c, 0xec, 0x45, 0xf9, 0x39,
	0xa9, 0xf1, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x4e, 0x6c, 0x9f, 0xee, 0xc9, 0x33,
	0x15, 0x64, 0x07, 0xb1, 0x81, 0x84, 0x3d, 0x53, 0x84, 0xe4, 0xb9, 0xb8, 0x33, 0x8b, 0xe3, 0x8b,
	0x52, 0x93, 0x53, 0x33, 0xcb, 0x52, 0x53, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x82, 0xb8, 0x32,
	0x8b, 0x83, 0xa0, 0x22, 0x4e, 0x5e, 0x37, 0x1e, 0xca, 0x31, 0xac, 0x78, 0x24, 0xc7, 0x78, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0,
	0xe1, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x27, 0x1e, 0xcb, 0x31, 0x5e, 0x78, 0x2c, 0xc7,
	0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x4c, 0x72, 0x7e, 0x66, 0x9e, 0x6e, 0x71, 0x6a, 0x51, 0x59,
	0x6a, 0x91, 0x7e, 0x72, 0x7e, 0x6e, 0x6e, 0x7e, 0x9e, 0x3e, 0xdc, 0xb3, 0x49, 0x6c, 0x60, 0xa6,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x45, 0xe9, 0xae, 0xde, 0x00, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolQuestRewardData.Get().(proto.Message)
	})
}

var poolQuestRewardData = &sync.Pool{New: func() interface{} { return &QuestRewardData{} }}

func (m *QuestRewardData) ReleasePool() { m.Reset(); poolQuestRewardData.Put(m); m = nil }

func (m *QuestRewardData) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *QuestRewardData) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *QuestRewardData) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *QuestRewardData) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *QuestRewardData) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *QuestRewardData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuestRewardData)
	if !ok {
		that2, ok := that.(QuestRewardData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.IsReceived != that1.IsReceived {
		return false
	}
	return true
}
func (m *QuestRewardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuestRewardData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuestRewardData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReceived {
		i--
		if m.IsReceived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintQuestReward(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuestReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuestReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *QuestRewardData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.IsReceived {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_received")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsReceived)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *QuestRewardData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *QuestRewardData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *QuestRewardData) GoString() string {
	return m.String()
}

func (m *QuestRewardData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovQuestReward(uint64(l))
	}
	if m.IsReceived {
		n += 2
	}
	return n
}

func sovQuestReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuestReward(x uint64) (n int) {
	return sovQuestReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuestRewardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestRewardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestRewardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuestReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReceived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReceived = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuestReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuestReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuestReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuestReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuestReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuestReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuestReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuestReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuestReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuestReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuestReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuestReward = fmt.Errorf("proto: unexpected end of group")
)
