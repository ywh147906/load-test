// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/achievement.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AchievementCounter struct {
	RoleId string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Cnt    map[int64]int64 `protobuf:"bytes,2,rep,name=cnt,proto3" json:"cnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *AchievementCounter) Reset()      { *m = AchievementCounter{} }
func (*AchievementCounter) ProtoMessage() {}
func (*AchievementCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f84b76e23b18b2, []int{0}
}
func (m *AchievementCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchievementCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchievementCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AchievementCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchievementCounter.Merge(m, src)
}
func (m *AchievementCounter) XXX_Size() int {
	return m.Size()
}
func (m *AchievementCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_AchievementCounter.DiscardUnknown(m)
}

var xxx_messageInfo_AchievementCounter proto.InternalMessageInfo

func (m *AchievementCounter) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *AchievementCounter) GetCnt() map[int64]int64 {
	if m != nil {
		return m.Cnt
	}
	return nil
}

func (*AchievementCounter) XXX_MessageName() string {
	return "dao.AchievementCounter"
}

type Achievement struct {
	RoleId string                       `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Point  int64                        `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	Status map[int64]*AchievementStatus `protobuf:"bytes,3,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Achievement) Reset()      { *m = Achievement{} }
func (*Achievement) ProtoMessage() {}
func (*Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f84b76e23b18b2, []int{1}
}
func (m *Achievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement.Merge(m, src)
}
func (m *Achievement) XXX_Size() int {
	return m.Size()
}
func (m *Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement proto.InternalMessageInfo

func (m *Achievement) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Achievement) GetPoint() int64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *Achievement) GetStatus() map[int64]*AchievementStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (*Achievement) XXX_MessageName() string {
	return "dao.Achievement"
}

type AchievementStatus struct {
	CurrGear    int64  `protobuf:"varint,1,opt,name=curr_gear,json=currGear,proto3" json:"curr_gear,omitempty"`
	CollectGear int64  `protobuf:"varint,2,opt,name=collect_gear,json=collectGear,proto3" json:"collect_gear,omitempty"`
	CurrCnt     int64  `protobuf:"varint,3,opt,name=curr_cnt,json=currCnt,proto3" json:"curr_cnt,omitempty"`
	DoneTime    int64  `protobuf:"varint,4,opt,name=done_time,json=doneTime,proto3" json:"done_time,omitempty"`
	Gears       string `protobuf:"bytes,5,opt,name=gears,proto3" json:"gears,omitempty"`
}

func (m *AchievementStatus) Reset()      { *m = AchievementStatus{} }
func (*AchievementStatus) ProtoMessage() {}
func (*AchievementStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f84b76e23b18b2, []int{2}
}
func (m *AchievementStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchievementStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchievementStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AchievementStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchievementStatus.Merge(m, src)
}
func (m *AchievementStatus) XXX_Size() int {
	return m.Size()
}
func (m *AchievementStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AchievementStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AchievementStatus proto.InternalMessageInfo

func (m *AchievementStatus) GetCurrGear() int64 {
	if m != nil {
		return m.CurrGear
	}
	return 0
}

func (m *AchievementStatus) GetCollectGear() int64 {
	if m != nil {
		return m.CollectGear
	}
	return 0
}

func (m *AchievementStatus) GetCurrCnt() int64 {
	if m != nil {
		return m.CurrCnt
	}
	return 0
}

func (m *AchievementStatus) GetDoneTime() int64 {
	if m != nil {
		return m.DoneTime
	}
	return 0
}

func (m *AchievementStatus) GetGears() string {
	if m != nil {
		return m.Gears
	}
	return ""
}

func (*AchievementStatus) XXX_MessageName() string {
	return "dao.AchievementStatus"
}
func init() {
	proto.RegisterType((*AchievementCounter)(nil), "dao.AchievementCounter")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.AchievementCounter.CntEntry")
	proto.RegisterType((*Achievement)(nil), "dao.Achievement")
	proto.RegisterMapType((map[int64]*AchievementStatus)(nil), "dao.Achievement.StatusEntry")
	proto.RegisterType((*AchievementStatus)(nil), "dao.AchievementStatus")
}

func init() { proto.RegisterFile("proto/dao/achievement.proto", fileDescriptor_d8f84b76e23b18b2) }

var fileDescriptor_d8f84b76e23b18b2 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0xcb, 0xd3, 0x30,
	0x1c, 0xc6, 0x9b, 0xd6, 0xf5, 0x7d, 0x97, 0x7a, 0xd0, 0x30, 0xa4, 0x6e, 0x23, 0x9b, 0x3b, 0xed,
	0xa0, 0x2d, 0x4c, 0x11, 0xf1, 0xe6, 0x86, 0x88, 0xde, 0xac, 0x9e, 0xbc, 0x94, 0xd8, 0x86, 0x59,
	0xd6, 0x26, 0x23, 0x4d, 0x07, 0xfb, 0x16, 0x7e, 0x85, 0xdd, 0xfc, 0x28, 0xbb, 0x08, 0x3b, 0xee,
	0x24, 0xda, 0x5e, 0x3c, 0x8a, 0x9f, 0x40, 0x92, 0x4c, 0x2d, 0x9b, 0xe0, 0xed, 0xff, 0x7f, 0x9e,
	0x27, 0x3f, 0x9e, 0xa4, 0x85, 0x83, 0xb5, 0xe0, 0x92, 0x87, 0x29, 0xe1, 0x21, 0x49, 0x3e, 0x64,
	0x74, 0x43, 0x0b, 0xca, 0x64, 0xa0, 0x55, 0xe4, 0xa4, 0x84, 0xf7, 0x7b, 0x4b, 0xbe, 0xe4, 0x26,
	0xa5, 0x26, 0x63, 0x4d, 0x76, 0x00, 0xa2, 0x67, 0x7f, 0x0f, 0x2c, 0x78, 0xc5, 0x24, 0x15, 0x68,
	0x04, 0xaf, 0x04, 0xcf, 0x69, 0x9c, 0xa5, 0x3e, 0x18, 0x83, 0x69, 0x77, 0xee, 0xfe, 0xfc, 0x32,
	0xb2, 0xd7, 0xab, 0xc8, 0x55, 0xf2, 0xcb, 0x14, 0xcd, 0xa0, 0x93, 0x30, 0xe9, 0xdb, 0x63, 0x67,
	0xea, 0xcd, 0xc6, 0x41, 0x4a, 0x78, 0x70, 0x89, 0x09, 0x16, 0x4c, 0x3e, 0x67, 0x52, 0x6c, 0x23,
	0x15, 0xee, 0x3f, 0x86, 0xd7, 0xbf, 0x05, 0x74, 0x0b, 0x3a, 0x2b, 0xba, 0xd5, 0x70, 0x27, 0x52,
	0x23, 0xea, 0xc1, 0xce, 0x86, 0xe4, 0x15, 0xf5, 0x6d, 0xad, 0x99, 0xe5, 0xa9, 0xfd, 0x04, 0x4c,
	0x3e, 0x03, 0xe8, 0xb5, 0xe0, 0xff, 0x2f, 0xd7, 0x83, 0x9d, 0x35, 0xcf, 0x74, 0x3d, 0x8d, 0xd2,
	0x0b, 0x7a, 0x04, 0xdd, 0x52, 0x12, 0x59, 0x95, 0xbe, 0xa3, 0x5b, 0x0f, 0xcf, 0x5b, 0x07, 0x6f,
	0xb4, 0x6d, 0x1a, 0x9f, 0xb2, 0xfd, 0xd7, 0xd0, 0x6b, 0xc9, 0xff, 0xe8, 0x7d, 0xbf, 0xdd, 0xdb,
	0x9b, 0xdd, 0x39, 0xa7, 0x9a, 0xd3, 0xed, 0xfb, 0xec, 0x00, 0xbc, 0x7d, 0x11, 0x40, 0x03, 0xd8,
	0x4d, 0x2a, 0x21, 0xe2, 0x25, 0x25, 0xe2, 0xc4, 0xbf, 0x56, 0xc2, 0x0b, 0x4a, 0x04, 0xba, 0x07,
	0x6f, 0x26, 0x3c, 0xcf, 0x69, 0x22, 0x8d, 0x6f, 0x2e, 0xe6, 0x9d, 0x34, 0x1d, 0xb9, 0x0b, 0x75,
	0x3c, 0x56, 0x9f, 0xc5, 0xd1, 0xf6, 0x95, 0xda, 0x17, 0x4c, 0x2a, 0x74, 0xca, 0x19, 0x8d, 0x65,
	0x56, 0x50, 0xff, 0x86, 0x41, 0x2b, 0xe1, 0x6d, 0x56, 0x50, 0xf5, 0x58, 0x0a, 0x59, 0xfa, 0x1d,
	0xf5, 0x96, 0x91, 0x59, 0xe6, 0xaf, 0x8e, 0xdf, 0xb0, 0xf5, 0xa9, 0xc6, 0x60, 0x5f, 0x63, 0x70,
	0xa8, 0x31, 0xf8, 0x5a, 0x63, 0xf0, 0xbd, 0xc6, 0xd6, 0x8f, 0x1a, 0x83, 0x8f, 0x0d, 0xb6, 0xf6,
	0x0d, 0x06, 0x87, 0x06, 0x5b, 0xc7, 0x06, 0x5b, 0xef, 0x86, 0x09, 0xcf, 0xd8, 0x83, 0x92, 0x8a,
	0x0d, 0x15, 0x61, 0xc2, 0x8b, 0x82, 0xb3, 0xf0, 0xcf, 0x0f, 0xf9, 0xde, 0xd5, 0xe3, 0xc3, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x12, 0x73, 0xc7, 0x41, 0xa4, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievementCounter.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievement.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAchievementStatus.Get().(proto.Message)
	})
}

var poolAchievementCounter = &sync.Pool{New: func() interface{} { return &AchievementCounter{} }}

func (m *AchievementCounter) ReleasePool() { m.Reset(); poolAchievementCounter.Put(m); m = nil }

var poolAchievement = &sync.Pool{New: func() interface{} { return &Achievement{} }}

func (m *Achievement) ReleasePool() { m.Reset(); poolAchievement.Put(m); m = nil }

var poolAchievementStatus = &sync.Pool{New: func() interface{} { return &AchievementStatus{} }}

func (m *AchievementStatus) ReleasePool() { m.Reset(); poolAchievementStatus.Put(m); m = nil }

func (m *AchievementCounter) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *AchievementCounter) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *AchievementCounter) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *AchievementCounter) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *AchievementCounter) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *Achievement) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Achievement) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Achievement) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Achievement) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Achievement) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *AchievementCounter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AchievementCounter)
	if !ok {
		that2, ok := that.(AchievementCounter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Cnt) != len(that1.Cnt) {
		return false
	}
	for i := range this.Cnt {
		if this.Cnt[i] != that1.Cnt[i] {
			return false
		}
	}
	return true
}
func (this *Achievement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Achievement)
	if !ok {
		that2, ok := that.(Achievement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Point != that1.Point {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	return true
}
func (this *AchievementStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AchievementStatus)
	if !ok {
		that2, ok := that.(AchievementStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurrGear != that1.CurrGear {
		return false
	}
	if this.CollectGear != that1.CollectGear {
		return false
	}
	if this.CurrCnt != that1.CurrCnt {
		return false
	}
	if this.DoneTime != that1.DoneTime {
		return false
	}
	if this.Gears != that1.Gears {
		return false
	}
	return true
}
func (m *AchievementCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchievementCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AchievementCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cnt) > 0 {
		for k := range m.Cnt {
			v := m.Cnt[k]
			baseI := i
			i = encodeVarintAchievement(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintAchievement(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintAchievement(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintAchievement(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for k := range m.Status {
			v := m.Status[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAchievement(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintAchievement(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintAchievement(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Point != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintAchievement(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AchievementStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchievementStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AchievementStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gears) > 0 {
		i -= len(m.Gears)
		copy(dAtA[i:], m.Gears)
		i = encodeVarintAchievement(dAtA, i, uint64(len(m.Gears)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DoneTime != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.DoneTime))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrCnt != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.CurrCnt))
		i--
		dAtA[i] = 0x18
	}
	if m.CollectGear != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.CollectGear))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrGear != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.CurrGear))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAchievement(dAtA []byte, offset int, v uint64) int {
	offset -= sovAchievement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *AchievementCounter) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("cnt")
	w.RawByte('"')
	w.RawByte(':')
	if m.Cnt == nil {
		w.RawString("null")
	} else if len(m.Cnt) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCnt := len(m.Cnt)
		for k, v := range m.Cnt {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCnt--
			if mlCnt != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Achievement) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Point != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("point")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Point))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("status")
	w.RawByte('"')
	w.RawByte(':')
	if m.Status == nil {
		w.RawString("null")
	} else if len(m.Status) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlStatus := len(m.Status)
		for k, v := range m.Status {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlStatus--
			if mlStatus != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *AchievementStatus) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CurrGear != 0 {
		w.RawByte('"')
		w.RawString("curr_gear")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurrGear))
		needWriteComma = true
	}
	if m.CollectGear != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("collect_gear")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CollectGear))
		needWriteComma = true
	}
	if m.CurrCnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("curr_cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurrCnt))
		needWriteComma = true
	}
	if m.DoneTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("done_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DoneTime))
		needWriteComma = true
	}
	if m.Gears != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("gears")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Gears)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *AchievementCounter) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *AchievementCounter) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *AchievementCounter) GoString() string {
	return m.String()
}

func (m *Achievement) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Achievement) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Achievement) GoString() string {
	return m.String()
}

func (m *AchievementStatus) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *AchievementStatus) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *AchievementStatus) GoString() string {
	return m.String()
}

func (m *AchievementCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovAchievement(uint64(l))
	}
	if len(m.Cnt) > 0 {
		for k, v := range m.Cnt {
			_ = k
			_ = v
			mapEntrySize := 1 + sovAchievement(uint64(k)) + 1 + sovAchievement(uint64(v))
			n += mapEntrySize + 1 + sovAchievement(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Achievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovAchievement(uint64(l))
	}
	if m.Point != 0 {
		n += 1 + sovAchievement(uint64(m.Point))
	}
	if len(m.Status) > 0 {
		for k, v := range m.Status {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAchievement(uint64(l))
			}
			mapEntrySize := 1 + sovAchievement(uint64(k)) + l
			n += mapEntrySize + 1 + sovAchievement(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AchievementStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrGear != 0 {
		n += 1 + sovAchievement(uint64(m.CurrGear))
	}
	if m.CollectGear != 0 {
		n += 1 + sovAchievement(uint64(m.CollectGear))
	}
	if m.CurrCnt != 0 {
		n += 1 + sovAchievement(uint64(m.CurrCnt))
	}
	if m.DoneTime != 0 {
		n += 1 + sovAchievement(uint64(m.DoneTime))
	}
	l = len(m.Gears)
	if l > 0 {
		n += 1 + l + sovAchievement(uint64(l))
	}
	return n
}

func sovAchievement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAchievement(x uint64) (n int) {
	return sovAchievement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AchievementCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchievementCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchievementCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cnt == nil {
				m.Cnt = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAchievement
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAchievement
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAchievement
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAchievement(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAchievement
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Cnt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = make(map[int64]*AchievementStatus)
			}
			var mapkey int64
			var mapvalue *AchievementStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAchievement
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAchievement
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAchievement
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAchievement
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAchievement
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AchievementStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAchievement(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAchievement
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Status[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchievementStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchievementStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchievementStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrGear", wireType)
			}
			m.CurrGear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrGear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectGear", wireType)
			}
			m.CollectGear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectGear |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrCnt", wireType)
			}
			m.CurrCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrCnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneTime", wireType)
			}
			m.DoneTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoneTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gears", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gears = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAchievement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAchievement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAchievement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAchievement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAchievement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAchievement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAchievement = fmt.Errorf("proto: unexpected end of group")
)
