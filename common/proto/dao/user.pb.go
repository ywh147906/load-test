// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/user.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SyncOp int32

const (
	SyncOp_CREATE SyncOp = 0
	SyncOp_UPDATE SyncOp = 1
)

var SyncOp_name = map[int32]string{
	0: "CREATE",
	1: "UPDATE",
}

var SyncOp_value = map[string]int32{
	"CREATE": 0,
	"UPDATE": 1,
}

func (SyncOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{0}
}

type User struct {
	UserId         string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" pk`
	RoleId         string  `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	DeviceId       string  `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	FreezeTime     int64   `protobuf:"varint,4,opt,name=freeze_time,json=freezeTime,proto3" json:"freeze_time,omitempty"`
	ServerId       int64   `protobuf:"varint,5,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	MapId          int64   `protobuf:"varint,7,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64   `protobuf:"varint,8,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	HangupMapId    int64   `protobuf:"varint,9,opt,name=hangup_map_id,json=hangupMapId,proto3" json:"hangup_map_id,omitempty"`
	HangupBattleId int64   `protobuf:"varint,10,opt,name=hangup_battle_id,json=hangupBattleId,proto3" json:"hangup_battle_id,omitempty"`
	HangupPosX     float32 `protobuf:"fixed32,11,opt,name=hangup_pos_x,json=hangupPosX,proto3" json:"hangup_pos_x,omitempty"`
	HangupPosY     float32 `protobuf:"fixed32,12,opt,name=hangup_pos_y,json=hangupPosY,proto3" json:"hangup_pos_y,omitempty"`
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *User) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *User) GetFreezeTime() int64 {
	if m != nil {
		return m.FreezeTime
	}
	return 0
}

func (m *User) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *User) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *User) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *User) GetHangupMapId() int64 {
	if m != nil {
		return m.HangupMapId
	}
	return 0
}

func (m *User) GetHangupBattleId() int64 {
	if m != nil {
		return m.HangupBattleId
	}
	return 0
}

func (m *User) GetHangupPosX() float32 {
	if m != nil {
		return m.HangupPosX
	}
	return 0
}

func (m *User) GetHangupPosY() float32 {
	if m != nil {
		return m.HangupPosY
	}
	return 0
}

func (*User) XXX_MessageName() string {
	return "dao.User"
}

// 用户 game-server 和 match-server 都在使用，修改字段时务必互相通知
type Role struct {
	RoleId       string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Nickname     string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level        int64  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	AvatarId     int64  `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame  int64  `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power        int64  `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	Title        int64  `protobuf:"varint,7,opt,name=title,proto3" json:"title,omitempty"`
	ChangeName   int64  `protobuf:"varint,8,opt,name=change_name,json=changeName,proto3" json:"change_name,omitempty"`
	Language     int64  `protobuf:"varint,9,opt,name=language,proto3" json:"language,omitempty"`
	Login        int64  `protobuf:"varint,10,opt,name=login,proto3" json:"login,omitempty"`
	Logout       int64  `protobuf:"varint,11,opt,name=logout,proto3" json:"logout,omitempty"`
	CreateTime   int64  `protobuf:"varint,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpProfit    int64  `protobuf:"varint,13,opt,name=exp_profit,json=expProfit,proto3" json:"exp_profit,omitempty"`
	LevelIndex   int64  `protobuf:"varint,14,opt,name=level_index,json=levelIndex,proto3" json:"level_index,omitempty"`
	BattleSpeed  int64  `protobuf:"varint,15,opt,name=battle_speed,json=battleSpeed,proto3" json:"battle_speed,omitempty"`
	HighestPower int64  `protobuf:"varint,16,opt,name=highest_power,json=highestPower,proto3" json:"highest_power,omitempty"`
	UserId       string `protobuf:"bytes,17,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Recharge     int64  `protobuf:"varint,18,opt,name=recharge,proto3" json:"recharge,omitempty"`
	GameId       int64  `protobuf:"varint,19,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	SessionId    string `protobuf:"bytes,20,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *Role) Reset()      { *m = Role{} }
func (*Role) ProtoMessage() {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{1}
}
func (m *Role) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Role.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return m.Size()
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Role) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Role) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Role) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *Role) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *Role) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Role) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *Role) GetChangeName() int64 {
	if m != nil {
		return m.ChangeName
	}
	return 0
}

func (m *Role) GetLanguage() int64 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (m *Role) GetLogin() int64 {
	if m != nil {
		return m.Login
	}
	return 0
}

func (m *Role) GetLogout() int64 {
	if m != nil {
		return m.Logout
	}
	return 0
}

func (m *Role) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Role) GetExpProfit() int64 {
	if m != nil {
		return m.ExpProfit
	}
	return 0
}

func (m *Role) GetLevelIndex() int64 {
	if m != nil {
		return m.LevelIndex
	}
	return 0
}

func (m *Role) GetBattleSpeed() int64 {
	if m != nil {
		return m.BattleSpeed
	}
	return 0
}

func (m *Role) GetHighestPower() int64 {
	if m != nil {
		return m.HighestPower
	}
	return 0
}

func (m *Role) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Role) GetRecharge() int64 {
	if m != nil {
		return m.Recharge
	}
	return 0
}

func (m *Role) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *Role) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (*Role) XXX_MessageName() string {
	return "dao.Role"
}

type RecentChatTars struct {
	RoleId     string           `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	TarRoleIds map[string]int64 `protobuf:"bytes,2,rep,name=tar_role_ids,json=tarRoleIds,proto3" json:"tar_role_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *RecentChatTars) Reset()      { *m = RecentChatTars{} }
func (*RecentChatTars) ProtoMessage() {}
func (*RecentChatTars) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{2}
}
func (m *RecentChatTars) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentChatTars) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentChatTars.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecentChatTars) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentChatTars.Merge(m, src)
}
func (m *RecentChatTars) XXX_Size() int {
	return m.Size()
}
func (m *RecentChatTars) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentChatTars.DiscardUnknown(m)
}

var xxx_messageInfo_RecentChatTars proto.InternalMessageInfo

func (m *RecentChatTars) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RecentChatTars) GetTarRoleIds() map[string]int64 {
	if m != nil {
		return m.TarRoleIds
	}
	return nil
}

func (*RecentChatTars) XXX_MessageName() string {
	return "dao.RecentChatTars"
}

type RoleRank struct {
	RoleId   string           `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	CurrRank map[string]int64 `protobuf:"bytes,2,rep,name=curr_rank,json=currRank,proto3" json:"curr_rank,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *RoleRank) Reset()      { *m = RoleRank{} }
func (*RoleRank) ProtoMessage() {}
func (*RoleRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{3}
}
func (m *RoleRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleRank.Merge(m, src)
}
func (m *RoleRank) XXX_Size() int {
	return m.Size()
}
func (m *RoleRank) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleRank.DiscardUnknown(m)
}

var xxx_messageInfo_RoleRank proto.InternalMessageInfo

func (m *RoleRank) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoleRank) GetCurrRank() map[string]int64 {
	if m != nil {
		return m.CurrRank
	}
	return nil
}

func (*RoleRank) XXX_MessageName() string {
	return "dao.RoleRank"
}

// 属性加成
type RoleAttr struct {
	Typ             models.AttrBonusType    `protobuf:"varint,1,opt,name=typ,proto3,enum=models.AttrBonusType" json:"typ,omitempty" pk`
	AttrFixed       []*models.AttrBonus     `protobuf:"bytes,2,rep,name=attr_fixed,json=attrFixed,proto3" json:"attr_fixed,omitempty"`
	AttrPercent     []*models.AttrBonus     `protobuf:"bytes,3,rep,name=attr_percent,json=attrPercent,proto3" json:"attr_percent,omitempty"`
	HeroAttrFixed   []*models.HeroAttrBonus `protobuf:"bytes,4,rep,name=hero_attr_fixed,json=heroAttrFixed,proto3" json:"hero_attr_fixed,omitempty"`
	HeroAttrPercent []*models.HeroAttrBonus `protobuf:"bytes,5,rep,name=hero_attr_percent,json=heroAttrPercent,proto3" json:"hero_attr_percent,omitempty"`
}

func (m *RoleAttr) Reset()      { *m = RoleAttr{} }
func (*RoleAttr) ProtoMessage() {}
func (*RoleAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{4}
}
func (m *RoleAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleAttr.Merge(m, src)
}
func (m *RoleAttr) XXX_Size() int {
	return m.Size()
}
func (m *RoleAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleAttr.DiscardUnknown(m)
}

var xxx_messageInfo_RoleAttr proto.InternalMessageInfo

func (m *RoleAttr) GetTyp() models.AttrBonusType {
	if m != nil {
		return m.Typ
	}
	return models.AttrBonusType_TypeAtlas
}

func (m *RoleAttr) GetAttrFixed() []*models.AttrBonus {
	if m != nil {
		return m.AttrFixed
	}
	return nil
}

func (m *RoleAttr) GetAttrPercent() []*models.AttrBonus {
	if m != nil {
		return m.AttrPercent
	}
	return nil
}

func (m *RoleAttr) GetHeroAttrFixed() []*models.HeroAttrBonus {
	if m != nil {
		return m.HeroAttrFixed
	}
	return nil
}

func (m *RoleAttr) GetHeroAttrPercent() []*models.HeroAttrBonus {
	if m != nil {
		return m.HeroAttrPercent
	}
	return nil
}

func (*RoleAttr) XXX_MessageName() string {
	return "dao.RoleAttr"
}

// 通用技能
type RoleSkill struct {
	RoleId  string  `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	SkillId []int64 `protobuf:"varint,2,rep,packed,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
}

func (m *RoleSkill) Reset()      { *m = RoleSkill{} }
func (*RoleSkill) ProtoMessage() {}
func (*RoleSkill) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{5}
}
func (m *RoleSkill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleSkill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleSkill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleSkill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleSkill.Merge(m, src)
}
func (m *RoleSkill) XXX_Size() int {
	return m.Size()
}
func (m *RoleSkill) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleSkill.DiscardUnknown(m)
}

var xxx_messageInfo_RoleSkill proto.InternalMessageInfo

func (m *RoleSkill) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoleSkill) GetSkillId() []int64 {
	if m != nil {
		return m.SkillId
	}
	return nil
}

func (*RoleSkill) XXX_MessageName() string {
	return "dao.RoleSkill"
}

// 头衔奖励信息
type TitleRewards struct {
	RoleId  string         `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Title   int64          `protobuf:"varint,2,opt,name=title,proto3" json:"title,omitempty"`
	Rewards map[int64]bool `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *TitleRewards) Reset()      { *m = TitleRewards{} }
func (*TitleRewards) ProtoMessage() {}
func (*TitleRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{6}
}
func (m *TitleRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitleRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitleRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TitleRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitleRewards.Merge(m, src)
}
func (m *TitleRewards) XXX_Size() int {
	return m.Size()
}
func (m *TitleRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_TitleRewards.DiscardUnknown(m)
}

var xxx_messageInfo_TitleRewards proto.InternalMessageInfo

func (m *TitleRewards) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *TitleRewards) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *TitleRewards) GetRewards() map[int64]bool {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*TitleRewards) XXX_MessageName() string {
	return "dao.TitleRewards"
}

type SyncRole struct {
	Op   SyncOp `protobuf:"varint,1,opt,name=op,proto3,enum=dao.SyncOp" json:"op,omitempty"`
	Role *Role  `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (m *SyncRole) Reset()      { *m = SyncRole{} }
func (*SyncRole) ProtoMessage() {}
func (*SyncRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{7}
}
func (m *SyncRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRole.Merge(m, src)
}
func (m *SyncRole) XXX_Size() int {
	return m.Size()
}
func (m *SyncRole) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRole.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRole proto.InternalMessageInfo

func (m *SyncRole) GetOp() SyncOp {
	if m != nil {
		return m.Op
	}
	return SyncOp_CREATE
}

func (m *SyncRole) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (*SyncRole) XXX_MessageName() string {
	return "dao.SyncRole"
}

// 通关的副本（用于主角突破）
type Dungeon struct {
	Id            int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" pk`
	Count         int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	ChallengeTime int64 `protobuf:"varint,3,opt,name=challenge_time,json=challengeTime,proto3" json:"challenge_time,omitempty"`
	ClearedAt     int64 `protobuf:"varint,4,opt,name=cleared_at,json=clearedAt,proto3" json:"cleared_at,omitempty"`
}

func (m *Dungeon) Reset()      { *m = Dungeon{} }
func (*Dungeon) ProtoMessage() {}
func (*Dungeon) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{8}
}
func (m *Dungeon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dungeon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dungeon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dungeon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dungeon.Merge(m, src)
}
func (m *Dungeon) XXX_Size() int {
	return m.Size()
}
func (m *Dungeon) XXX_DiscardUnknown() {
	xxx_messageInfo_Dungeon.DiscardUnknown(m)
}

var xxx_messageInfo_Dungeon proto.InternalMessageInfo

func (m *Dungeon) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Dungeon) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Dungeon) GetChallengeTime() int64 {
	if m != nil {
		return m.ChallengeTime
	}
	return 0
}

func (m *Dungeon) GetClearedAt() int64 {
	if m != nil {
		return m.ClearedAt
	}
	return 0
}

func (*Dungeon) XXX_MessageName() string {
	return "dao.Dungeon"
}

// 战斗设置
type BattleSetting struct {
	RoleId string                    `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Data   *models.BattleSettingData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BattleSetting) Reset()      { *m = BattleSetting{} }
func (*BattleSetting) ProtoMessage() {}
func (*BattleSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{9}
}
func (m *BattleSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleSetting.Merge(m, src)
}
func (m *BattleSetting) XXX_Size() int {
	return m.Size()
}
func (m *BattleSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleSetting.DiscardUnknown(m)
}

var xxx_messageInfo_BattleSetting proto.InternalMessageInfo

func (m *BattleSetting) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *BattleSetting) GetData() *models.BattleSettingData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*BattleSetting) XXX_MessageName() string {
	return "dao.BattleSetting"
}

type ReadPoint struct {
	RoleId    string           `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	RedPoints map[string]int64 `protobuf:"bytes,2,rep,name=red_points,json=redPoints,proto3" json:"red_points,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ReadPoint) Reset()      { *m = ReadPoint{} }
func (*ReadPoint) ProtoMessage() {}
func (*ReadPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{10}
}
func (m *ReadPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadPoint.Merge(m, src)
}
func (m *ReadPoint) XXX_Size() int {
	return m.Size()
}
func (m *ReadPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadPoint.DiscardUnknown(m)
}

var xxx_messageInfo_ReadPoint proto.InternalMessageInfo

func (m *ReadPoint) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ReadPoint) GetRedPoints() map[string]int64 {
	if m != nil {
		return m.RedPoints
	}
	return nil
}

func (*ReadPoint) XXX_MessageName() string {
	return "dao.ReadPoint"
}

type ExpSkip struct {
	RoleId       string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	ResetTime    int64           `protobuf:"varint,2,opt,name=reset_time,json=resetTime,proto3" json:"reset_time,omitempty"`
	UseCount     int64           `protobuf:"varint,3,opt,name=use_count,json=useCount,proto3" json:"use_count,omitempty"`
	RateDuration map[int64]int64 `protobuf:"bytes,4,rep,name=rate_duration,json=rateDuration,proto3" json:"rate_duration,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ExpSkip) Reset()      { *m = ExpSkip{} }
func (*ExpSkip) ProtoMessage() {}
func (*ExpSkip) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{11}
}
func (m *ExpSkip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpSkip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpSkip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpSkip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpSkip.Merge(m, src)
}
func (m *ExpSkip) XXX_Size() int {
	return m.Size()
}
func (m *ExpSkip) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpSkip.DiscardUnknown(m)
}

var xxx_messageInfo_ExpSkip proto.InternalMessageInfo

func (m *ExpSkip) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ExpSkip) GetResetTime() int64 {
	if m != nil {
		return m.ResetTime
	}
	return 0
}

func (m *ExpSkip) GetUseCount() int64 {
	if m != nil {
		return m.UseCount
	}
	return 0
}

func (m *ExpSkip) GetRateDuration() map[int64]int64 {
	if m != nil {
		return m.RateDuration
	}
	return nil
}

func (*ExpSkip) XXX_MessageName() string {
	return "dao.ExpSkip"
}

type CutSceneId struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	CutId  int64  `protobuf:"varint,2,opt,name=cut_id,json=cutId,proto3" json:"cut_id,omitempty"`
	Data   string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CutSceneId) Reset()      { *m = CutSceneId{} }
func (*CutSceneId) ProtoMessage() {}
func (*CutSceneId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{12}
}
func (m *CutSceneId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CutSceneId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CutSceneId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CutSceneId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CutSceneId.Merge(m, src)
}
func (m *CutSceneId) XXX_Size() int {
	return m.Size()
}
func (m *CutSceneId) XXX_DiscardUnknown() {
	xxx_messageInfo_CutSceneId.DiscardUnknown(m)
}

var xxx_messageInfo_CutSceneId proto.InternalMessageInfo

func (m *CutSceneId) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *CutSceneId) GetCutId() int64 {
	if m != nil {
		return m.CutId
	}
	return 0
}

func (m *CutSceneId) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (*CutSceneId) XXX_MessageName() string {
	return "dao.CutSceneId"
}

type ExtraSkillTypCnt struct {
	RoleId string                            `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Data   map[int64]*ExtraSkillTypCntDetail `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ExtraSkillTypCnt) Reset()      { *m = ExtraSkillTypCnt{} }
func (*ExtraSkillTypCnt) ProtoMessage() {}
func (*ExtraSkillTypCnt) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{13}
}
func (m *ExtraSkillTypCnt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraSkillTypCnt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraSkillTypCnt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtraSkillTypCnt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraSkillTypCnt.Merge(m, src)
}
func (m *ExtraSkillTypCnt) XXX_Size() int {
	return m.Size()
}
func (m *ExtraSkillTypCnt) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraSkillTypCnt.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraSkillTypCnt proto.InternalMessageInfo

func (m *ExtraSkillTypCnt) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ExtraSkillTypCnt) GetData() map[int64]*ExtraSkillTypCntDetail {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*ExtraSkillTypCnt) XXX_MessageName() string {
	return "dao.ExtraSkillTypCnt"
}

type ExtraSkillTypCntDetail struct {
	Cnt map[int64]int64 `protobuf:"bytes,1,rep,name=cnt,proto3" json:"cnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ExtraSkillTypCntDetail) Reset()      { *m = ExtraSkillTypCntDetail{} }
func (*ExtraSkillTypCntDetail) ProtoMessage() {}
func (*ExtraSkillTypCntDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{14}
}
func (m *ExtraSkillTypCntDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraSkillTypCntDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraSkillTypCntDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtraSkillTypCntDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraSkillTypCntDetail.Merge(m, src)
}
func (m *ExtraSkillTypCntDetail) XXX_Size() int {
	return m.Size()
}
func (m *ExtraSkillTypCntDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraSkillTypCntDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraSkillTypCntDetail proto.InternalMessageInfo

func (m *ExtraSkillTypCntDetail) GetCnt() map[int64]int64 {
	if m != nil {
		return m.Cnt
	}
	return nil
}

func (*ExtraSkillTypCntDetail) XXX_MessageName() string {
	return "dao.ExtraSkillTypCntDetail"
}

type HangExpTimer struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Timing bool   `protobuf:"varint,2,opt,name=timing,proto3" json:"timing,omitempty"`
	Time   int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Pushed bool   `protobuf:"varint,4,opt,name=pushed,proto3" json:"pushed,omitempty"`
}

func (m *HangExpTimer) Reset()      { *m = HangExpTimer{} }
func (*HangExpTimer) ProtoMessage() {}
func (*HangExpTimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{15}
}
func (m *HangExpTimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HangExpTimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HangExpTimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HangExpTimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HangExpTimer.Merge(m, src)
}
func (m *HangExpTimer) XXX_Size() int {
	return m.Size()
}
func (m *HangExpTimer) XXX_DiscardUnknown() {
	xxx_messageInfo_HangExpTimer.DiscardUnknown(m)
}

var xxx_messageInfo_HangExpTimer proto.InternalMessageInfo

func (m *HangExpTimer) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *HangExpTimer) GetTiming() bool {
	if m != nil {
		return m.Timing
	}
	return false
}

func (m *HangExpTimer) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HangExpTimer) GetPushed() bool {
	if m != nil {
		return m.Pushed
	}
	return false
}

func (*HangExpTimer) XXX_MessageName() string {
	return "dao.HangExpTimer"
}

// 已拥有的头像和头像框
type RoleOwnAvatar struct {
	RoleId    string                   `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	OwnAvatar map[int64]*models.Avatar `protobuf:"bytes,2,rep,name=own_avatar,json=ownAvatar,proto3" json:"own_avatar,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RoleOwnAvatar) Reset()      { *m = RoleOwnAvatar{} }
func (*RoleOwnAvatar) ProtoMessage() {}
func (*RoleOwnAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_b43314d69a65f4bd, []int{16}
}
func (m *RoleOwnAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleOwnAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleOwnAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleOwnAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleOwnAvatar.Merge(m, src)
}
func (m *RoleOwnAvatar) XXX_Size() int {
	return m.Size()
}
func (m *RoleOwnAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleOwnAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_RoleOwnAvatar proto.InternalMessageInfo

func (m *RoleOwnAvatar) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoleOwnAvatar) GetOwnAvatar() map[int64]*models.Avatar {
	if m != nil {
		return m.OwnAvatar
	}
	return nil
}

func (*RoleOwnAvatar) XXX_MessageName() string {
	return "dao.RoleOwnAvatar"
}
func init() {
	proto.RegisterEnum("dao.SyncOp", SyncOp_name, SyncOp_value)
	proto.RegisterType((*User)(nil), "dao.User")
	proto.RegisterType((*Role)(nil), "dao.Role")
	proto.RegisterType((*RecentChatTars)(nil), "dao.RecentChatTars")
	proto.RegisterMapType((map[string]int64)(nil), "dao.RecentChatTars.TarRoleIdsEntry")
	proto.RegisterType((*RoleRank)(nil), "dao.RoleRank")
	proto.RegisterMapType((map[string]int64)(nil), "dao.RoleRank.CurrRankEntry")
	proto.RegisterType((*RoleAttr)(nil), "dao.RoleAttr")
	proto.RegisterType((*RoleSkill)(nil), "dao.RoleSkill")
	proto.RegisterType((*TitleRewards)(nil), "dao.TitleRewards")
	proto.RegisterMapType((map[int64]bool)(nil), "dao.TitleRewards.RewardsEntry")
	proto.RegisterType((*SyncRole)(nil), "dao.SyncRole")
	proto.RegisterType((*Dungeon)(nil), "dao.Dungeon")
	proto.RegisterType((*BattleSetting)(nil), "dao.BattleSetting")
	proto.RegisterType((*ReadPoint)(nil), "dao.ReadPoint")
	proto.RegisterMapType((map[string]int64)(nil), "dao.ReadPoint.RedPointsEntry")
	proto.RegisterType((*ExpSkip)(nil), "dao.ExpSkip")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.ExpSkip.RateDurationEntry")
	proto.RegisterType((*CutSceneId)(nil), "dao.CutSceneId")
	proto.RegisterType((*ExtraSkillTypCnt)(nil), "dao.ExtraSkillTypCnt")
	proto.RegisterMapType((map[int64]*ExtraSkillTypCntDetail)(nil), "dao.ExtraSkillTypCnt.DataEntry")
	proto.RegisterType((*ExtraSkillTypCntDetail)(nil), "dao.ExtraSkillTypCntDetail")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.ExtraSkillTypCntDetail.CntEntry")
	proto.RegisterType((*HangExpTimer)(nil), "dao.HangExpTimer")
	proto.RegisterType((*RoleOwnAvatar)(nil), "dao.RoleOwnAvatar")
	proto.RegisterMapType((map[int64]*models.Avatar)(nil), "dao.RoleOwnAvatar.OwnAvatarEntry")
}

func init() { proto.RegisterFile("proto/dao/user.proto", fileDescriptor_b43314d69a65f4bd) }

var fileDescriptor_b43314d69a65f4bd = []byte{
	// 1490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4f, 0x6f, 0xdb, 0xc6,
	0x12, 0x37, 0x45, 0x5b, 0xa6, 0x46, 0x92, 0xff, 0xf0, 0x39, 0x89, 0xa2, 0x3c, 0xcb, 0x8e, 0x92,
	0x07, 0x18, 0x0f, 0x88, 0xdc, 0x26, 0x45, 0x10, 0xa4, 0x09, 0x5a, 0x5b, 0x76, 0x1a, 0x15, 0x6d,
	0x63, 0xd0, 0x0a, 0x90, 0xf6, 0x42, 0x6c, 0xc8, 0xb5, 0x44, 0x98, 0xe2, 0x12, 0xcb, 0xa5, 0x2d,
	0x17, 0xe8, 0xbd, 0xc7, 0x7e, 0x86, 0x02, 0x05, 0xf2, 0x0d, 0x7a, 0x28, 0x50, 0xf4, 0x54, 0xe4,
	0x98, 0x63, 0x4e, 0x45, 0x6b, 0x5f, 0x7a, 0x28, 0x8a, 0xa2, 0x9f, 0xa0, 0xd8, 0x9d, 0x25, 0x2d,
	0x39, 0x6e, 0x94, 0x9c, 0xb4, 0xf3, 0x9b, 0x3f, 0x3b, 0xf3, 0x9b, 0xe1, 0x90, 0x82, 0xa5, 0x98,
	0x33, 0xc1, 0xd6, 0x7d, 0xc2, 0xd6, 0xd3, 0x84, 0xf2, 0x96, 0x12, 0x6d, 0xd3, 0x27, 0xac, 0xbe,
	0xd4, 0x63, 0x3d, 0x86, 0x6a, 0x79, 0x42, 0x55, 0xfd, 0x12, 0x22, 0x03, 0xe6, 0xd3, 0x30, 0x19,
	0xf1, 0xa9, 0xd7, 0xc6, 0x14, 0x34, 0x4a, 0x07, 0x89, 0xd6, 0x5c, 0x1e, 0xd3, 0x3c, 0x25, 0x42,
	0x84, 0x14, 0x55, 0xcd, 0x3f, 0x0b, 0x30, 0xfd, 0x38, 0xa1, 0xdc, 0x5e, 0x81, 0x59, 0x19, 0xcb,
	0x0d, 0xfc, 0x9a, 0xb1, 0x6a, 0xac, 0x95, 0x36, 0x8b, 0x7f, 0xff, 0xb2, 0x52, 0x88, 0xf7, 0x9d,
	0xa2, 0x84, 0x3b, 0xbe, 0x7d, 0x09, 0x66, 0x39, 0x0b, 0xa9, 0x34, 0x28, 0x48, 0x03, 0xa7, 0x28,
	0xc5, 0x8e, 0x6f, 0x5f, 0x81, 0x92, 0x4f, 0x0f, 0x02, 0x4f, 0xa9, 0x4c, 0xa5, 0xb2, 0x10, 0xe8,
	0xf8, 0xf6, 0x0a, 0x94, 0xf7, 0x38, 0xa5, 0x5f, 0x52, 0x57, 0x04, 0x03, 0x5a, 0x9b, 0x5e, 0x35,
	0xd6, 0x4c, 0x07, 0x10, 0xea, 0x06, 0x03, 0x2a, 0xbd, 0x13, 0xca, 0x0f, 0xf0, 0xe6, 0x19, 0xa5,
	0xb6, 0x10, 0xe8, 0xf8, 0xf6, 0x05, 0x28, 0x0e, 0x48, 0x2c, 0x35, 0xb3, 0x4a, 0x33, 0x33, 0x20,
	0x71, 0xc7, 0xb7, 0xd7, 0x60, 0x01, 0x8b, 0x70, 0x4f, 0x5d, 0x2d, 0x65, 0x30, 0x87, 0xf8, 0x6e,
	0x16, 0xa0, 0x09, 0xd5, 0x3e, 0x89, 0x7a, 0x69, 0xec, 0xea, 0x38, 0x25, 0x65, 0x56, 0x46, 0xf0,
	0xd3, 0x2c, 0x9a, 0xb6, 0xd1, 0x41, 0x03, 0xbf, 0x06, 0x18, 0x0d, 0xf1, 0x4d, 0x05, 0x77, 0x7c,
	0x7b, 0x15, 0x2a, 0xda, 0x32, 0x66, 0x89, 0x3b, 0xac, 0x95, 0x57, 0x8d, 0xb5, 0x82, 0x03, 0x88,
	0xed, 0xb0, 0xe4, 0xc9, 0x19, 0x8b, 0xa3, 0x5a, 0xe5, 0x8c, 0xc5, 0xe7, 0xcd, 0x9f, 0xa7, 0x61,
	0xda, 0x61, 0x21, 0x95, 0x84, 0x67, 0x7c, 0x9e, 0x21, 0x5c, 0xf3, 0x5a, 0x07, 0x2b, 0x0a, 0xbc,
	0xfd, 0x88, 0x0c, 0xa8, 0x66, 0x3c, 0x97, 0xed, 0x25, 0x98, 0x09, 0xe9, 0x01, 0x0d, 0x15, 0xdf,
	0xa6, 0x83, 0x82, 0xe4, 0x92, 0x1c, 0x10, 0x41, 0x14, 0x21, 0x48, 0xb5, 0x85, 0x40, 0xc7, 0xb7,
	0xaf, 0x42, 0x45, 0x2b, 0xf7, 0xb8, 0x0c, 0x89, 0x5c, 0x97, 0x11, 0x7b, 0xc0, 0x75, 0xd4, 0x98,
	0x1d, 0x52, 0x5e, 0x2b, 0x62, 0x54, 0x25, 0x48, 0x54, 0x04, 0x22, 0xa4, 0x59, 0x0f, 0x94, 0x20,
	0x1b, 0xeb, 0xc9, 0xb2, 0xa8, 0xab, 0x12, 0x44, 0xfa, 0x01, 0xa1, 0xcf, 0x64, 0xb0, 0x3a, 0x58,
	0xa1, 0x2c, 0x9b, 0xf4, 0xa8, 0x66, 0x3d, 0x97, 0x55, 0xfa, 0xac, 0x17, 0x44, 0x9a, 0x67, 0x14,
	0xec, 0x8b, 0x50, 0x0c, 0x59, 0x8f, 0xa5, 0x42, 0x11, 0x6b, 0x3a, 0x5a, 0x52, 0x57, 0x71, 0x4a,
	0x84, 0x9e, 0xa1, 0x8a, 0xbe, 0x4a, 0x41, 0x6a, 0x86, 0x96, 0x01, 0xe8, 0x30, 0x76, 0x63, 0xce,
	0xf6, 0x02, 0x51, 0xab, 0x2a, 0x7d, 0x89, 0x0e, 0xe3, 0x1d, 0x05, 0x48, 0x7f, 0xc5, 0x8f, 0x1b,
	0x44, 0x3e, 0x1d, 0xd6, 0xe6, 0xd0, 0x5f, 0x41, 0x1d, 0x89, 0x48, 0x6a, 0xb2, 0x79, 0x8a, 0x29,
	0xf5, 0x6b, 0xf3, 0x48, 0x8d, 0x9e, 0x25, 0x09, 0xd9, 0xd7, 0xa0, 0xda, 0x0f, 0x7a, 0x7d, 0x9a,
	0x08, 0x17, 0x29, 0x5a, 0x50, 0x36, 0x15, 0x0d, 0xee, 0x28, 0xa6, 0x2e, 0x9d, 0x3e, 0x43, 0x8b,
	0xf8, 0x88, 0xe8, 0x67, 0xa7, 0x0e, 0x16, 0xa7, 0x5e, 0x9f, 0xf0, 0x1e, 0xad, 0xd9, 0xc8, 0x45,
	0x26, 0x4b, 0xa7, 0x1e, 0x19, 0xa8, 0x39, 0xf8, 0x0f, 0x96, 0x2d, 0xc5, 0x8e, 0x2f, 0xab, 0x4a,
	0x68, 0x92, 0x04, 0x2c, 0x92, 0xba, 0x25, 0x15, 0xb0, 0xa4, 0x91, 0x8e, 0xdf, 0xfc, 0xde, 0x80,
	0x39, 0x87, 0x7a, 0x34, 0x12, 0xed, 0x3e, 0x11, 0x5d, 0xc2, 0x93, 0xc9, 0x23, 0xb5, 0x0d, 0x15,
	0x39, 0x00, 0xda, 0x28, 0xa9, 0x15, 0x56, 0xcd, 0xb5, 0xf2, 0xcd, 0x6b, 0x2d, 0x9f, 0xb0, 0xd6,
	0x78, 0xac, 0x56, 0x97, 0x70, 0x47, 0x39, 0x25, 0xdb, 0x91, 0xe0, 0x47, 0x0e, 0x88, 0x1c, 0xa8,
	0xdf, 0x87, 0xf9, 0x33, 0x6a, 0x7b, 0x01, 0xcc, 0x7d, 0x7a, 0x84, 0xd7, 0x3a, 0xf2, 0x28, 0x7b,
	0x7c, 0x40, 0xc2, 0x14, 0x67, 0xd7, 0x74, 0x50, 0xb8, 0x5b, 0xb8, 0x63, 0x34, 0xbf, 0x35, 0xc0,
	0x92, 0xce, 0x0e, 0x89, 0xf6, 0x27, 0xe7, 0x7c, 0x07, 0x4a, 0x5e, 0xca, 0xb9, 0xcb, 0x49, 0xb4,
	0xaf, 0x13, 0xbe, 0x82, 0x09, 0xeb, 0x10, 0xad, 0x76, 0xca, 0xb9, 0x3c, 0x60, 0xa2, 0x96, 0xa7,
	0xc5, 0xfa, 0xfb, 0x50, 0x1d, 0x53, 0xbd, 0x55, 0x92, 0xdf, 0x15, 0x30, 0xc9, 0x0d, 0x21, 0xb8,
	0xbd, 0x0e, 0xa6, 0x38, 0x8a, 0x95, 0xe3, 0xdc, 0xcd, 0x0b, 0x2d, 0x5c, 0xa4, 0x2d, 0xa9, 0xda,
	0x64, 0x51, 0x9a, 0x74, 0x8f, 0x62, 0x9a, 0xe7, 0x2d, 0x2d, 0xed, 0x77, 0x00, 0x88, 0x10, 0xdc,
	0xdd, 0x0b, 0x86, 0xd4, 0xd7, 0x59, 0x2f, 0xbe, 0xe2, 0xe7, 0x94, 0xa4, 0xd1, 0x03, 0x69, 0x63,
	0xbf, 0x07, 0x15, 0xe5, 0x11, 0x53, 0x2e, 0xfb, 0x50, 0x33, 0xff, 0xcd, 0xa7, 0x2c, 0xcd, 0x76,
	0xd0, 0xca, 0xbe, 0x0f, 0xf3, 0x7d, 0xca, 0x99, 0x3b, 0x72, 0xd9, 0xb4, 0x72, 0xcc, 0x93, 0x7c,
	0x48, 0x39, 0x3b, 0x75, 0xae, 0xf6, 0xb5, 0x88, 0x97, 0x6e, 0xc0, 0xe2, 0xa9, 0x7b, 0x76, 0xf3,
	0xcc, 0xeb, 0x02, 0xcc, 0x67, 0x01, 0x74, 0x06, 0xcd, 0x8f, 0xa0, 0x24, 0x69, 0xda, 0xdd, 0x0f,
	0xc2, 0x70, 0x72, 0x33, 0x2f, 0x83, 0x95, 0x48, 0x4b, 0x7c, 0x8b, 0x98, 0x6b, 0xa6, 0x33, 0xab,
	0xe4, 0x8e, 0xdf, 0xfc, 0xc1, 0x80, 0x4a, 0x57, 0xae, 0x16, 0x87, 0x1e, 0x12, 0xee, 0xbf, 0xc1,
	0x34, 0xe7, 0x8b, 0xa9, 0x30, 0xba, 0x98, 0xee, 0xc0, 0x2c, 0xc7, 0x08, 0x9a, 0xc3, 0x86, 0x9a,
	0x96, 0xd1, 0xd0, 0x2d, 0xfd, 0x8b, 0x03, 0x93, 0x99, 0xd7, 0xef, 0x42, 0x65, 0x54, 0x31, 0x3a,
	0x2e, 0xe6, 0x39, 0xe3, 0x62, 0x8d, 0x8e, 0xcb, 0x03, 0xb0, 0x76, 0x8f, 0x22, 0x4f, 0x6d, 0xf6,
	0x2b, 0x50, 0x60, 0xd9, 0xb0, 0x94, 0xd5, 0xe5, 0x52, 0xf5, 0x28, 0x76, 0x0a, 0x2c, 0xb6, 0x97,
	0x61, 0x5a, 0xa6, 0xaf, 0x22, 0x94, 0x6f, 0x96, 0x4e, 0x27, 0x59, 0xc1, 0xcd, 0xaf, 0x60, 0x76,
	0x2b, 0x8d, 0x7a, 0x94, 0xc9, 0x75, 0x58, 0xd0, 0xa5, 0x9b, 0x79, 0xe9, 0x85, 0x40, 0x95, 0xed,
	0xb1, 0x34, 0x12, 0x59, 0xd9, 0x4a, 0xb0, 0xff, 0x07, 0x73, 0x5e, 0x9f, 0x84, 0x21, 0x95, 0x2b,
	0x59, 0xed, 0x49, 0x7c, 0x35, 0x54, 0x73, 0x34, 0x5b, 0x95, 0x5e, 0x48, 0x09, 0xa7, 0xbe, 0x4b,
	0x84, 0x7e, 0x47, 0x94, 0x34, 0xb2, 0x21, 0x9a, 0x2e, 0x54, 0x37, 0xf5, 0x1b, 0x54, 0x88, 0x20,
	0xea, 0x4d, 0x6e, 0xc2, 0x0d, 0x98, 0xf6, 0x89, 0x20, 0xba, 0x9e, 0xcb, 0xd9, 0xd4, 0x8c, 0x45,
	0xd9, 0x22, 0x82, 0x38, 0xca, 0xac, 0xf9, 0xcc, 0x80, 0x92, 0x43, 0x89, 0xbf, 0xc3, 0x82, 0x48,
	0x4c, 0x8e, 0x7e, 0x0f, 0x40, 0xa6, 0x1a, 0x4b, 0xeb, 0x6c, 0x5d, 0x2d, 0xeb, 0x75, 0xa5, 0x83,
	0xb4, 0x1c, 0x8a, 0x07, 0xdd, 0xce, 0x12, 0xcf, 0xe4, 0xfa, 0x3d, 0xb9, 0x21, 0x47, 0x95, 0x6f,
	0xb5, 0x01, 0xfe, 0x30, 0x60, 0x76, 0x7b, 0x18, 0xef, 0xee, 0x07, 0xf1, 0xe4, 0x44, 0x97, 0x65,
	0xa2, 0x09, 0x15, 0x48, 0x3d, 0xc6, 0x2a, 0x29, 0x24, 0xfb, 0xca, 0x49, 0x13, 0xea, 0x62, 0xdf,
	0xb0, 0x31, 0x56, 0x9a, 0xd0, 0xb6, 0x6a, 0x5d, 0x1b, 0xaa, 0x5c, 0xbe, 0xdd, 0xfc, 0x94, 0x13,
	0x11, 0xb0, 0x48, 0x3f, 0xc2, 0x38, 0xb7, 0x3a, 0x83, 0x96, 0x43, 0x04, 0xdd, 0xd2, 0x06, 0x58,
	0x68, 0x85, 0x8f, 0x40, 0xf5, 0x0f, 0x60, 0xf1, 0x15, 0x93, 0x49, 0x13, 0x3c, 0x56, 0xee, 0x13,
	0x80, 0x76, 0x2a, 0x76, 0x3d, 0x1a, 0xe1, 0x77, 0xdb, 0x84, 0x82, 0x2f, 0x40, 0xd1, 0x4b, 0x45,
	0xf6, 0x35, 0x28, 0xc7, 0x30, 0x15, 0x1d, 0xdf, 0xb6, 0xf5, 0x38, 0xe0, 0x77, 0x20, 0xf6, 0xfc,
	0x47, 0x03, 0x16, 0xb6, 0x87, 0x82, 0x13, 0xb5, 0x24, 0xba, 0x47, 0x71, 0xfb, 0x4d, 0x5a, 0x7f,
	0x2b, 0x1f, 0x2c, 0x49, 0xc6, 0x8a, 0x26, 0x63, 0x3c, 0x4a, 0x4b, 0x4e, 0x16, 0xb2, 0xa1, 0x8c,
	0xeb, 0x5d, 0x28, 0xe5, 0xd0, 0x39, 0xd5, 0xbf, 0x3b, 0x5a, 0x7d, 0xf6, 0x1e, 0x39, 0x1b, 0x74,
	0x8b, 0x0a, 0x12, 0x84, 0xa3, 0xd4, 0x7c, 0x6d, 0xc0, 0xc5, 0xf3, 0xad, 0xec, 0xdb, 0x60, 0x7a,
	0x91, 0xa8, 0x19, 0x2a, 0xc9, 0xeb, 0xaf, 0x89, 0xd7, 0x6a, 0x47, 0x02, 0x33, 0x95, 0x0e, 0xf5,
	0xdb, 0x60, 0x65, 0xc0, 0x5b, 0x75, 0x29, 0x81, 0xca, 0x43, 0x12, 0xf5, 0xb6, 0x87, 0xb1, 0x9c,
	0x2b, 0x3e, 0x99, 0xc6, 0x8b, 0x50, 0x14, 0xc1, 0x20, 0x88, 0x7a, 0x7a, 0x67, 0x69, 0x49, 0x36,
	0x6a, 0x64, 0x4b, 0xa8, 0xb3, 0xb4, 0x8d, 0xd3, 0xa4, 0x4f, 0xf1, 0xe3, 0xd1, 0x72, 0xb4, 0xd4,
	0xfc, 0xc9, 0x80, 0xaa, 0xdc, 0x51, 0x8f, 0x0e, 0xa3, 0x0d, 0xf5, 0xb9, 0x38, 0xf9, 0xda, 0x0f,
	0x01, 0xd8, 0x61, 0xe4, 0xe2, 0xd7, 0xa5, 0xee, 0xe1, 0xd5, 0x7c, 0xd9, 0xe5, 0x81, 0x5a, 0xf9,
	0x49, 0x3f, 0xbc, 0x2c, 0x93, 0xeb, 0x9f, 0xc0, 0xdc, 0xb8, 0xf2, 0x1c, 0x9e, 0xae, 0x8f, 0xf7,
	0x73, 0x2e, 0x7f, 0x5b, 0x2a, 0xaf, 0x11, 0xde, 0xfe, 0xbf, 0x0a, 0x45, 0x5c, 0xc2, 0x36, 0x40,
	0xb1, 0xed, 0x6c, 0x6f, 0x74, 0xb7, 0x17, 0xa6, 0xe4, 0xf9, 0xf1, 0xce, 0x96, 0x3c, 0x1b, 0x9b,
	0x1f, 0xbf, 0xfc, 0xad, 0x31, 0xf5, 0xec, 0xb8, 0x61, 0x3c, 0x3f, 0x6e, 0x18, 0x2f, 0x8e, 0x1b,
	0xc6, 0xaf, 0xc7, 0x0d, 0xe3, 0xf7, 0xe3, 0xc6, 0xd4, 0x5f, 0xc7, 0x0d, 0xe3, 0x9b, 0x93, 0xc6,
	0xd4, 0xf3, 0x93, 0x86, 0xf1, 0xe2, 0xa4, 0x31, 0xf5, 0xf2, 0xa4, 0x31, 0xf5, 0xc5, 0x7f, 0x3d,
	0x16, 0x44, 0x37, 0xf0, 0xef, 0xc7, 0xba, 0xc7, 0x06, 0x03, 0x16, 0xad, 0xe7, 0xff, 0xe4, 0x9e,
	0x16, 0xd5, 0xf1, 0xd6, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x65, 0x81, 0x5d, 0xdd, 0x0d,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUser.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRole.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRecentChatTars.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleRank.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleAttr.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleSkill.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTitleRewards.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSyncRole.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeon.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBattleSetting.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolReadPoint.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpSkip.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCutSceneId.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExtraSkillTypCnt.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExtraSkillTypCntDetail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHangExpTimer.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRoleOwnAvatar.Get().(proto.Message)
	})
}

var poolUser = &sync.Pool{New: func() interface{} { return &User{} }}

func (m *User) ReleasePool() { m.Reset(); poolUser.Put(m); m = nil }

var poolRole = &sync.Pool{New: func() interface{} { return &Role{} }}

func (m *Role) ReleasePool() { m.Reset(); poolRole.Put(m); m = nil }

var poolRecentChatTars = &sync.Pool{New: func() interface{} { return &RecentChatTars{} }}

func (m *RecentChatTars) ReleasePool() { m.Reset(); poolRecentChatTars.Put(m); m = nil }

var poolRoleRank = &sync.Pool{New: func() interface{} { return &RoleRank{} }}

func (m *RoleRank) ReleasePool() { m.Reset(); poolRoleRank.Put(m); m = nil }

var poolRoleAttr = &sync.Pool{New: func() interface{} { return &RoleAttr{} }}

func (m *RoleAttr) ReleasePool() { m.Reset(); poolRoleAttr.Put(m); m = nil }

var poolRoleSkill = &sync.Pool{New: func() interface{} { return &RoleSkill{} }}

func (m *RoleSkill) ReleasePool() { m.Reset(); poolRoleSkill.Put(m); m = nil }

var poolTitleRewards = &sync.Pool{New: func() interface{} { return &TitleRewards{} }}

func (m *TitleRewards) ReleasePool() { m.Reset(); poolTitleRewards.Put(m); m = nil }

var poolSyncRole = &sync.Pool{New: func() interface{} { return &SyncRole{} }}

func (m *SyncRole) ReleasePool() { m.Reset(); poolSyncRole.Put(m); m = nil }

var poolDungeon = &sync.Pool{New: func() interface{} { return &Dungeon{} }}

func (m *Dungeon) ReleasePool() { m.Reset(); poolDungeon.Put(m); m = nil }

var poolBattleSetting = &sync.Pool{New: func() interface{} { return &BattleSetting{} }}

func (m *BattleSetting) ReleasePool() { m.Reset(); poolBattleSetting.Put(m); m = nil }

var poolReadPoint = &sync.Pool{New: func() interface{} { return &ReadPoint{} }}

func (m *ReadPoint) ReleasePool() { m.Reset(); poolReadPoint.Put(m); m = nil }

var poolExpSkip = &sync.Pool{New: func() interface{} { return &ExpSkip{} }}

func (m *ExpSkip) ReleasePool() { m.Reset(); poolExpSkip.Put(m); m = nil }

var poolCutSceneId = &sync.Pool{New: func() interface{} { return &CutSceneId{} }}

func (m *CutSceneId) ReleasePool() { m.Reset(); poolCutSceneId.Put(m); m = nil }

var poolExtraSkillTypCnt = &sync.Pool{New: func() interface{} { return &ExtraSkillTypCnt{} }}

func (m *ExtraSkillTypCnt) ReleasePool() { m.Reset(); poolExtraSkillTypCnt.Put(m); m = nil }

var poolExtraSkillTypCntDetail = &sync.Pool{New: func() interface{} { return &ExtraSkillTypCntDetail{} }}

func (m *ExtraSkillTypCntDetail) ReleasePool() { m.Reset(); poolExtraSkillTypCntDetail.Put(m); m = nil }

var poolHangExpTimer = &sync.Pool{New: func() interface{} { return &HangExpTimer{} }}

func (m *HangExpTimer) ReleasePool() { m.Reset(); poolHangExpTimer.Put(m); m = nil }

var poolRoleOwnAvatar = &sync.Pool{New: func() interface{} { return &RoleOwnAvatar{} }}

func (m *RoleOwnAvatar) ReleasePool() { m.Reset(); poolRoleOwnAvatar.Put(m); m = nil }

func (m *User) PK() string {
	if m == nil {
		return ""
	}
	return m.UserId
}

func (m *User) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.UserId...)
}

func (m *User) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *User) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *User) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *Role) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Role) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Role) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Role) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Role) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *RecentChatTars) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *RecentChatTars) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *RecentChatTars) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RecentChatTars) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RecentChatTars) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *RoleRank) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *RoleRank) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *RoleRank) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RoleRank) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RoleRank) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *RoleAttr) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.Typ), 10)
}

func (m *RoleAttr) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.Typ), 10)
}

func (m *RoleAttr) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RoleAttr) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RoleAttr) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *RoleSkill) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *RoleSkill) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *RoleSkill) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RoleSkill) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RoleSkill) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *TitleRewards) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *TitleRewards) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *TitleRewards) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *TitleRewards) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *TitleRewards) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *Dungeon) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.Id), 10)
}

func (m *Dungeon) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.Id), 10)
}

func (m *Dungeon) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Dungeon) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Dungeon) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *BattleSetting) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *BattleSetting) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *BattleSetting) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *BattleSetting) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *BattleSetting) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ReadPoint) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *ReadPoint) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *ReadPoint) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ReadPoint) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ReadPoint) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ExpSkip) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *ExpSkip) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *ExpSkip) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ExpSkip) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ExpSkip) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *CutSceneId) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *CutSceneId) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *CutSceneId) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *CutSceneId) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *CutSceneId) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ExtraSkillTypCnt) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *ExtraSkillTypCnt) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *ExtraSkillTypCnt) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ExtraSkillTypCnt) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ExtraSkillTypCnt) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *HangExpTimer) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *HangExpTimer) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *HangExpTimer) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *HangExpTimer) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *HangExpTimer) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *RoleOwnAvatar) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *RoleOwnAvatar) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *RoleOwnAvatar) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RoleOwnAvatar) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RoleOwnAvatar) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (x SyncOp) String() string {
	s, ok := SyncOp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if this.FreezeTime != that1.FreezeTime {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.HangupMapId != that1.HangupMapId {
		return false
	}
	if this.HangupBattleId != that1.HangupBattleId {
		return false
	}
	if this.HangupPosX != that1.HangupPosX {
		return false
	}
	if this.HangupPosY != that1.HangupPosY {
		return false
	}
	return true
}
func (this *Role) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Role)
	if !ok {
		that2, ok := that.(Role)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.ChangeName != that1.ChangeName {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	if this.Login != that1.Login {
		return false
	}
	if this.Logout != that1.Logout {
		return false
	}
	if this.CreateTime != that1.CreateTime {
		return false
	}
	if this.ExpProfit != that1.ExpProfit {
		return false
	}
	if this.LevelIndex != that1.LevelIndex {
		return false
	}
	if this.BattleSpeed != that1.BattleSpeed {
		return false
	}
	if this.HighestPower != that1.HighestPower {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.Recharge != that1.Recharge {
		return false
	}
	if this.GameId != that1.GameId {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *RecentChatTars) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecentChatTars)
	if !ok {
		that2, ok := that.(RecentChatTars)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.TarRoleIds) != len(that1.TarRoleIds) {
		return false
	}
	for i := range this.TarRoleIds {
		if this.TarRoleIds[i] != that1.TarRoleIds[i] {
			return false
		}
	}
	return true
}
func (this *RoleRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleRank)
	if !ok {
		that2, ok := that.(RoleRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.CurrRank) != len(that1.CurrRank) {
		return false
	}
	for i := range this.CurrRank {
		if this.CurrRank[i] != that1.CurrRank[i] {
			return false
		}
	}
	return true
}
func (this *RoleAttr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleAttr)
	if !ok {
		that2, ok := that.(RoleAttr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if len(this.AttrFixed) != len(that1.AttrFixed) {
		return false
	}
	for i := range this.AttrFixed {
		if !this.AttrFixed[i].Equal(that1.AttrFixed[i]) {
			return false
		}
	}
	if len(this.AttrPercent) != len(that1.AttrPercent) {
		return false
	}
	for i := range this.AttrPercent {
		if !this.AttrPercent[i].Equal(that1.AttrPercent[i]) {
			return false
		}
	}
	if len(this.HeroAttrFixed) != len(that1.HeroAttrFixed) {
		return false
	}
	for i := range this.HeroAttrFixed {
		if !this.HeroAttrFixed[i].Equal(that1.HeroAttrFixed[i]) {
			return false
		}
	}
	if len(this.HeroAttrPercent) != len(that1.HeroAttrPercent) {
		return false
	}
	for i := range this.HeroAttrPercent {
		if !this.HeroAttrPercent[i].Equal(that1.HeroAttrPercent[i]) {
			return false
		}
	}
	return true
}
func (this *RoleSkill) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleSkill)
	if !ok {
		that2, ok := that.(RoleSkill)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.SkillId) != len(that1.SkillId) {
		return false
	}
	for i := range this.SkillId {
		if this.SkillId[i] != that1.SkillId[i] {
			return false
		}
	}
	return true
}
func (this *TitleRewards) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TitleRewards)
	if !ok {
		that2, ok := that.(TitleRewards)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *SyncRole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncRole)
	if !ok {
		that2, ok := that.(SyncRole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if !this.Role.Equal(that1.Role) {
		return false
	}
	return true
}
func (this *Dungeon) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dungeon)
	if !ok {
		that2, ok := that.(Dungeon)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.ChallengeTime != that1.ChallengeTime {
		return false
	}
	if this.ClearedAt != that1.ClearedAt {
		return false
	}
	return true
}
func (this *BattleSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleSetting)
	if !ok {
		that2, ok := that.(BattleSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *ReadPoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadPoint)
	if !ok {
		that2, ok := that.(ReadPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.RedPoints) != len(that1.RedPoints) {
		return false
	}
	for i := range this.RedPoints {
		if this.RedPoints[i] != that1.RedPoints[i] {
			return false
		}
	}
	return true
}
func (this *ExpSkip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpSkip)
	if !ok {
		that2, ok := that.(ExpSkip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ResetTime != that1.ResetTime {
		return false
	}
	if this.UseCount != that1.UseCount {
		return false
	}
	if len(this.RateDuration) != len(that1.RateDuration) {
		return false
	}
	for i := range this.RateDuration {
		if this.RateDuration[i] != that1.RateDuration[i] {
			return false
		}
	}
	return true
}
func (this *CutSceneId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CutSceneId)
	if !ok {
		that2, ok := that.(CutSceneId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.CutId != that1.CutId {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *ExtraSkillTypCnt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtraSkillTypCnt)
	if !ok {
		that2, ok := that.(ExtraSkillTypCnt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *ExtraSkillTypCntDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtraSkillTypCntDetail)
	if !ok {
		that2, ok := that.(ExtraSkillTypCntDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cnt) != len(that1.Cnt) {
		return false
	}
	for i := range this.Cnt {
		if this.Cnt[i] != that1.Cnt[i] {
			return false
		}
	}
	return true
}
func (this *HangExpTimer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HangExpTimer)
	if !ok {
		that2, ok := that.(HangExpTimer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Timing != that1.Timing {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Pushed != that1.Pushed {
		return false
	}
	return true
}
func (this *RoleOwnAvatar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoleOwnAvatar)
	if !ok {
		that2, ok := that.(RoleOwnAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.OwnAvatar) != len(that1.OwnAvatar) {
		return false
	}
	for i := range this.OwnAvatar {
		if !this.OwnAvatar[i].Equal(that1.OwnAvatar[i]) {
			return false
		}
	}
	return true
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HangupPosY != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HangupPosY))))
		i--
		dAtA[i] = 0x65
	}
	if m.HangupPosX != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HangupPosX))))
		i--
		dAtA[i] = 0x5d
	}
	if m.HangupBattleId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.HangupBattleId))
		i--
		dAtA[i] = 0x50
	}
	if m.HangupMapId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.HangupMapId))
		i--
		dAtA[i] = 0x48
	}
	if m.BattleServerId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x40
	}
	if m.MapId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x38
	}
	if m.ServerId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x28
	}
	if m.FreezeTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.FreezeTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Role) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.GameId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Recharge != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Recharge))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.HighestPower != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.HighestPower))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.BattleSpeed != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.BattleSpeed))
		i--
		dAtA[i] = 0x78
	}
	if m.LevelIndex != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LevelIndex))
		i--
		dAtA[i] = 0x70
	}
	if m.ExpProfit != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ExpProfit))
		i--
		dAtA[i] = 0x68
	}
	if m.CreateTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x60
	}
	if m.Logout != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Logout))
		i--
		dAtA[i] = 0x58
	}
	if m.Login != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Login))
		i--
		dAtA[i] = 0x50
	}
	if m.Language != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x48
	}
	if m.ChangeName != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ChangeName))
		i--
		dAtA[i] = 0x40
	}
	if m.Title != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x38
	}
	if m.Power != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecentChatTars) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentChatTars) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecentChatTars) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TarRoleIds) > 0 {
		for k := range m.TarRoleIds {
			v := m.TarRoleIds[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUser(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoleRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrRank) > 0 {
		for k := range m.CurrRank {
			v := m.CurrRank[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUser(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoleAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HeroAttrPercent) > 0 {
		for iNdEx := len(m.HeroAttrPercent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HeroAttrPercent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.HeroAttrFixed) > 0 {
		for iNdEx := len(m.HeroAttrFixed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HeroAttrFixed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AttrPercent) > 0 {
		for iNdEx := len(m.AttrPercent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttrPercent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AttrFixed) > 0 {
		for iNdEx := len(m.AttrFixed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttrFixed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Typ != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoleSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleSkill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleSkill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SkillId) > 0 {
		dAtA2 := make([]byte, len(m.SkillId)*10)
		var j1 int
		for _, num1 := range m.SkillId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintUser(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TitleRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TitleRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Title != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Op != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dungeon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dungeon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dungeon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClearedAt != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ClearedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.ChallengeTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ChallengeTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedPoints) > 0 {
		for k := range m.RedPoints {
			v := m.RedPoints[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUser(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExpSkip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpSkip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpSkip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateDuration) > 0 {
		for k := range m.RateDuration {
			v := m.RateDuration[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UseCount != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.UseCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ResetTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ResetTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CutSceneId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CutSceneId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CutSceneId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CutId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CutId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtraSkillTypCnt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraSkillTypCnt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtraSkillTypCnt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintUser(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtraSkillTypCntDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraSkillTypCntDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtraSkillTypCntDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cnt) > 0 {
		for k := range m.Cnt {
			v := m.Cnt[k]
			baseI := i
			i = encodeVarintUser(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HangExpTimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HangExpTimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HangExpTimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pushed {
		i--
		if m.Pushed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Time != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x18
	}
	if m.Timing {
		i--
		if m.Timing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoleOwnAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleOwnAvatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleOwnAvatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnAvatar) > 0 {
		for k := range m.OwnAvatar {
			v := m.OwnAvatar[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintUser(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintUser(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUser(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *User) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.UserId != "" {
		w.RawByte('"')
		w.RawString("user_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UserId)
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.DeviceId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("device_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DeviceId)
		needWriteComma = true
	}
	if m.FreezeTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("freeze_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreezeTime))
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.HangupMapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hangup_map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HangupMapId))
		needWriteComma = true
	}
	if m.HangupBattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hangup_battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HangupBattleId))
		needWriteComma = true
	}
	if math.Abs(float64(m.HangupPosX)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hangup_pos_x")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.HangupPosX))
		needWriteComma = true
	}
	if math.Abs(float64(m.HangupPosY)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hangup_pos_y")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.HangupPosY))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Role) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.ChangeName != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("change_name")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChangeName))
		needWriteComma = true
	}
	if m.Language != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("language")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Language))
		needWriteComma = true
	}
	if m.Login != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("login")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Login))
		needWriteComma = true
	}
	if m.Logout != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("logout")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Logout))
		needWriteComma = true
	}
	if m.CreateTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("create_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreateTime))
		needWriteComma = true
	}
	if m.ExpProfit != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("exp_profit")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpProfit))
		needWriteComma = true
	}
	if m.LevelIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LevelIndex))
		needWriteComma = true
	}
	if m.BattleSpeed != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleSpeed))
		needWriteComma = true
	}
	if m.HighestPower != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("highest_power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HighestPower))
		needWriteComma = true
	}
	if m.UserId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("user_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.UserId)
		needWriteComma = true
	}
	if m.Recharge != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("recharge")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Recharge))
		needWriteComma = true
	}
	if m.GameId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("game_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GameId))
		needWriteComma = true
	}
	if m.SessionId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("session_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SessionId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RecentChatTars) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("tar_role_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.TarRoleIds == nil {
		w.RawString("null")
	} else if len(m.TarRoleIds) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlTarRoleIds := len(m.TarRoleIds)
		for k, v := range m.TarRoleIds {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlTarRoleIds--
			if mlTarRoleIds != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleRank) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("curr_rank")
	w.RawByte('"')
	w.RawByte(':')
	if m.CurrRank == nil {
		w.RawString("null")
	} else if len(m.CurrRank) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCurrRank := len(m.CurrRank)
		for k, v := range m.CurrRank {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCurrRank--
			if mlCurrRank != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleAttr) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr_fixed")
	w.RawByte('"')
	w.RawByte(':')
	if m.AttrFixed == nil {
		w.RawString("null")
	} else if len(m.AttrFixed) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.AttrFixed {
			v.JsonBytes(w)
			if i != len(m.AttrFixed)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr_percent")
	w.RawByte('"')
	w.RawByte(':')
	if m.AttrPercent == nil {
		w.RawString("null")
	} else if len(m.AttrPercent) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.AttrPercent {
			v.JsonBytes(w)
			if i != len(m.AttrPercent)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("hero_attr_fixed")
	w.RawByte('"')
	w.RawByte(':')
	if m.HeroAttrFixed == nil {
		w.RawString("null")
	} else if len(m.HeroAttrFixed) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.HeroAttrFixed {
			v.JsonBytes(w)
			if i != len(m.HeroAttrFixed)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("hero_attr_percent")
	w.RawByte('"')
	w.RawByte(':')
	if m.HeroAttrPercent == nil {
		w.RawString("null")
	} else if len(m.HeroAttrPercent) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.HeroAttrPercent {
			v.JsonBytes(w)
			if i != len(m.HeroAttrPercent)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleSkill) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.SkillId == nil {
		w.RawString("null")
	} else if len(m.SkillId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.SkillId {
			w.Int64(int64(v))
			if i != len(m.SkillId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TitleRewards) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SyncRole) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Op != 0 {
		w.RawByte('"')
		w.RawString("op")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Op))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	m.Role.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Dungeon) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.ChallengeTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("challenge_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChallengeTime))
		needWriteComma = true
	}
	if m.ClearedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cleared_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ClearedAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BattleSetting) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	m.Data.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ReadPoint) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("red_points")
	w.RawByte('"')
	w.RawByte(':')
	if m.RedPoints == nil {
		w.RawString("null")
	} else if len(m.RedPoints) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRedPoints := len(m.RedPoints)
		for k, v := range m.RedPoints {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRedPoints--
			if mlRedPoints != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ExpSkip) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ResetTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("reset_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ResetTime))
		needWriteComma = true
	}
	if m.UseCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("use_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.UseCount))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rate_duration")
	w.RawByte('"')
	w.RawByte(':')
	if m.RateDuration == nil {
		w.RawString("null")
	} else if len(m.RateDuration) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRateDuration := len(m.RateDuration)
		for k, v := range m.RateDuration {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRateDuration--
			if mlRateDuration != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CutSceneId) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.CutId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cut_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CutId))
		needWriteComma = true
	}
	if m.Data != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("data")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Data)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ExtraSkillTypCnt) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	if m.Data == nil {
		w.RawString("null")
	} else if len(m.Data) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlData := len(m.Data)
		for k, v := range m.Data {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlData--
			if mlData != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ExtraSkillTypCntDetail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("cnt")
	w.RawByte('"')
	w.RawByte(':')
	if m.Cnt == nil {
		w.RawString("null")
	} else if len(m.Cnt) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlCnt := len(m.Cnt)
		for k, v := range m.Cnt {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlCnt--
			if mlCnt != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HangExpTimer) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Timing {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("timing")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Timing)
		needWriteComma = true
	}
	if m.Time != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Time))
		needWriteComma = true
	}
	if m.Pushed {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pushed")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Pushed)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RoleOwnAvatar) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("own_avatar")
	w.RawByte('"')
	w.RawByte(':')
	if m.OwnAvatar == nil {
		w.RawString("null")
	} else if len(m.OwnAvatar) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlOwnAvatar := len(m.OwnAvatar)
		for k, v := range m.OwnAvatar {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlOwnAvatar--
			if mlOwnAvatar != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *User) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *User) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *User) GoString() string {
	return m.String()
}

func (m *Role) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Role) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Role) GoString() string {
	return m.String()
}

func (m *RecentChatTars) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RecentChatTars) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RecentChatTars) GoString() string {
	return m.String()
}

func (m *RoleRank) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleRank) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleRank) GoString() string {
	return m.String()
}

func (m *RoleAttr) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleAttr) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleAttr) GoString() string {
	return m.String()
}

func (m *RoleSkill) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleSkill) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleSkill) GoString() string {
	return m.String()
}

func (m *TitleRewards) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TitleRewards) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TitleRewards) GoString() string {
	return m.String()
}

func (m *SyncRole) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SyncRole) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SyncRole) GoString() string {
	return m.String()
}

func (m *Dungeon) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Dungeon) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Dungeon) GoString() string {
	return m.String()
}

func (m *BattleSetting) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BattleSetting) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BattleSetting) GoString() string {
	return m.String()
}

func (m *ReadPoint) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ReadPoint) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ReadPoint) GoString() string {
	return m.String()
}

func (m *ExpSkip) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ExpSkip) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ExpSkip) GoString() string {
	return m.String()
}

func (m *CutSceneId) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CutSceneId) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CutSceneId) GoString() string {
	return m.String()
}

func (m *ExtraSkillTypCnt) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ExtraSkillTypCnt) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ExtraSkillTypCnt) GoString() string {
	return m.String()
}

func (m *ExtraSkillTypCntDetail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ExtraSkillTypCntDetail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ExtraSkillTypCntDetail) GoString() string {
	return m.String()
}

func (m *HangExpTimer) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HangExpTimer) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HangExpTimer) GoString() string {
	return m.String()
}

func (m *RoleOwnAvatar) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RoleOwnAvatar) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RoleOwnAvatar) GoString() string {
	return m.String()
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.FreezeTime != 0 {
		n += 1 + sovUser(uint64(m.FreezeTime))
	}
	if m.ServerId != 0 {
		n += 1 + sovUser(uint64(m.ServerId))
	}
	if m.MapId != 0 {
		n += 1 + sovUser(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovUser(uint64(m.BattleServerId))
	}
	if m.HangupMapId != 0 {
		n += 1 + sovUser(uint64(m.HangupMapId))
	}
	if m.HangupBattleId != 0 {
		n += 1 + sovUser(uint64(m.HangupBattleId))
	}
	if m.HangupPosX != 0 {
		n += 5
	}
	if m.HangupPosY != 0 {
		n += 5
	}
	return n
}

func (m *Role) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	if m.AvatarId != 0 {
		n += 1 + sovUser(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovUser(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovUser(uint64(m.Power))
	}
	if m.Title != 0 {
		n += 1 + sovUser(uint64(m.Title))
	}
	if m.ChangeName != 0 {
		n += 1 + sovUser(uint64(m.ChangeName))
	}
	if m.Language != 0 {
		n += 1 + sovUser(uint64(m.Language))
	}
	if m.Login != 0 {
		n += 1 + sovUser(uint64(m.Login))
	}
	if m.Logout != 0 {
		n += 1 + sovUser(uint64(m.Logout))
	}
	if m.CreateTime != 0 {
		n += 1 + sovUser(uint64(m.CreateTime))
	}
	if m.ExpProfit != 0 {
		n += 1 + sovUser(uint64(m.ExpProfit))
	}
	if m.LevelIndex != 0 {
		n += 1 + sovUser(uint64(m.LevelIndex))
	}
	if m.BattleSpeed != 0 {
		n += 1 + sovUser(uint64(m.BattleSpeed))
	}
	if m.HighestPower != 0 {
		n += 2 + sovUser(uint64(m.HighestPower))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 2 + l + sovUser(uint64(l))
	}
	if m.Recharge != 0 {
		n += 2 + sovUser(uint64(m.Recharge))
	}
	if m.GameId != 0 {
		n += 2 + sovUser(uint64(m.GameId))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 2 + l + sovUser(uint64(l))
	}
	return n
}

func (m *RecentChatTars) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.TarRoleIds) > 0 {
		for k, v := range m.TarRoleIds {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUser(uint64(len(k))) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoleRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.CurrRank) > 0 {
		for k, v := range m.CurrRank {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUser(uint64(len(k))) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoleAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovUser(uint64(m.Typ))
	}
	if len(m.AttrFixed) > 0 {
		for _, e := range m.AttrFixed {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.AttrPercent) > 0 {
		for _, e := range m.AttrPercent {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.HeroAttrFixed) > 0 {
		for _, e := range m.HeroAttrFixed {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.HeroAttrPercent) > 0 {
		for _, e := range m.HeroAttrPercent {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *RoleSkill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.SkillId) > 0 {
		l = 0
		for _, e := range m.SkillId {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	return n
}

func (m *TitleRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Title != 0 {
		n += 1 + sovUser(uint64(m.Title))
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SyncRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovUser(uint64(m.Op))
	}
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *Dungeon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovUser(uint64(m.Count))
	}
	if m.ChallengeTime != 0 {
		n += 1 + sovUser(uint64(m.ChallengeTime))
	}
	if m.ClearedAt != 0 {
		n += 1 + sovUser(uint64(m.ClearedAt))
	}
	return n
}

func (m *BattleSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *ReadPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.RedPoints) > 0 {
		for k, v := range m.RedPoints {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUser(uint64(len(k))) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ExpSkip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.ResetTime != 0 {
		n += 1 + sovUser(uint64(m.ResetTime))
	}
	if m.UseCount != 0 {
		n += 1 + sovUser(uint64(m.UseCount))
	}
	if len(m.RateDuration) > 0 {
		for k, v := range m.RateDuration {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CutSceneId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CutId != 0 {
		n += 1 + sovUser(uint64(m.CutId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *ExtraSkillTypCnt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUser(uint64(l))
			}
			mapEntrySize := 1 + sovUser(uint64(k)) + l
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ExtraSkillTypCntDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cnt) > 0 {
		for k, v := range m.Cnt {
			_ = k
			_ = v
			mapEntrySize := 1 + sovUser(uint64(k)) + 1 + sovUser(uint64(v))
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HangExpTimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Timing {
		n += 2
	}
	if m.Time != 0 {
		n += 1 + sovUser(uint64(m.Time))
	}
	if m.Pushed {
		n += 2
	}
	return n
}

func (m *RoleOwnAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.OwnAvatar) > 0 {
		for k, v := range m.OwnAvatar {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUser(uint64(l))
			}
			mapEntrySize := 1 + sovUser(uint64(k)) + l
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeTime", wireType)
			}
			m.FreezeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreezeTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupMapId", wireType)
			}
			m.HangupMapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HangupMapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupBattleId", wireType)
			}
			m.HangupBattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HangupBattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupPosX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HangupPosX = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HangupPosY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HangupPosY = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeName", wireType)
			}
			m.ChangeName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeName |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			m.Login = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Login |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logout", wireType)
			}
			m.Logout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Logout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpProfit", wireType)
			}
			m.ExpProfit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpProfit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelIndex", wireType)
			}
			m.LevelIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleSpeed", wireType)
			}
			m.BattleSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleSpeed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestPower", wireType)
			}
			m.HighestPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recharge", wireType)
			}
			m.Recharge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Recharge |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecentChatTars) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentChatTars: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentChatTars: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TarRoleIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TarRoleIds == nil {
				m.TarRoleIds = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUser
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUser
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TarRoleIds[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrRank == nil {
				m.CurrRank = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUser
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUser
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CurrRank[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.AttrBonusType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrFixed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrFixed = append(m.AttrFixed, &models.AttrBonus{})
			if err := m.AttrFixed[len(m.AttrFixed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrPercent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrPercent = append(m.AttrPercent, &models.AttrBonus{})
			if err := m.AttrPercent[len(m.AttrPercent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroAttrFixed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroAttrFixed = append(m.HeroAttrFixed, &models.HeroAttrBonus{})
			if err := m.HeroAttrFixed[len(m.HeroAttrFixed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroAttrPercent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroAttrPercent = append(m.HeroAttrPercent, &models.HeroAttrBonus{})
			if err := m.HeroAttrPercent[len(m.HeroAttrPercent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SkillId = append(m.SkillId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SkillId) == 0 {
					m.SkillId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SkillId = append(m.SkillId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= SyncOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dungeon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dungeon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dungeon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTime", wireType)
			}
			m.ChallengeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearedAt", wireType)
			}
			m.ClearedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClearedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &models.BattleSettingData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedPoints == nil {
				m.RedPoints = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUser
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUser
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RedPoints[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpSkip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpSkip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpSkip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetTime", wireType)
			}
			m.ResetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCount", wireType)
			}
			m.UseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateDuration == nil {
				m.RateDuration = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RateDuration[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CutSceneId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CutSceneId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CutSceneId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutId", wireType)
			}
			m.CutId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CutId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtraSkillTypCnt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraSkillTypCnt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraSkillTypCnt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*ExtraSkillTypCntDetail)
			}
			var mapkey int64
			var mapvalue *ExtraSkillTypCntDetail
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUser
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUser
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ExtraSkillTypCntDetail{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtraSkillTypCntDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraSkillTypCntDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraSkillTypCntDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cnt == nil {
				m.Cnt = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Cnt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HangExpTimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HangExpTimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HangExpTimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timing = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pushed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pushed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleOwnAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleOwnAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleOwnAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnAvatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnAvatar == nil {
				m.OwnAvatar = make(map[int64]*models.Avatar)
			}
			var mapkey int64
			var mapvalue *models.Avatar
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUser
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUser
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.Avatar{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OwnAvatar[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
