// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/x_day_goal.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type XDayGoalData struct {
	RoleId       string                         `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	RegisterTime int64                          `protobuf:"varint,2,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`
	Infos        map[int64]*models.XDayGoalInfo `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *XDayGoalData) Reset()      { *m = XDayGoalData{} }
func (*XDayGoalData) ProtoMessage() {}
func (*XDayGoalData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e383627328083512, []int{0}
}
func (m *XDayGoalData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XDayGoalData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XDayGoalData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XDayGoalData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XDayGoalData.Merge(m, src)
}
func (m *XDayGoalData) XXX_Size() int {
	return m.Size()
}
func (m *XDayGoalData) XXX_DiscardUnknown() {
	xxx_messageInfo_XDayGoalData.DiscardUnknown(m)
}

var xxx_messageInfo_XDayGoalData proto.InternalMessageInfo

func (m *XDayGoalData) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *XDayGoalData) GetRegisterTime() int64 {
	if m != nil {
		return m.RegisterTime
	}
	return 0
}

func (m *XDayGoalData) GetInfos() map[int64]*models.XDayGoalInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (*XDayGoalData) XXX_MessageName() string {
	return "dao.XDayGoalData"
}
func init() {
	proto.RegisterType((*XDayGoalData)(nil), "dao.XDayGoalData")
	proto.RegisterMapType((map[int64]*models.XDayGoalInfo)(nil), "dao.XDayGoalData.InfosEntry")
}

func init() { proto.RegisterFile("proto/dao/x_day_goal.proto", fileDescriptor_e383627328083512) }

var fileDescriptor_e383627328083512 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x9b, 0x85, 0x4d, 0xcc, 0x26, 0x48, 0xd8, 0x61, 0x94, 0x99, 0x0d, 0xbd, 0x0c, 0xc1,
	0x16, 0xe6, 0x45, 0x3c, 0x8e, 0x89, 0xcc, 0x83, 0x87, 0xe2, 0x41, 0xbc, 0x94, 0xb8, 0xc4, 0x12,
	0xd6, 0xf6, 0x3f, 0xd2, 0x3a, 0xec, 0xb7, 0xf0, 0x63, 0xf8, 0x51, 0x76, 0xdc, 0x71, 0x27, 0xd1,
	0xf4, 0xe2, 0x51, 0xfc, 0x04, 0xd2, 0x05, 0xa7, 0xe0, 0xed, 0xf1, 0x7b, 0xef, 0xe5, 0x25, 0x21,
	0xee, 0x5c, 0x43, 0x0e, 0xbe, 0xe0, 0xe0, 0x3f, 0x85, 0x82, 0x17, 0x61, 0x04, 0x3c, 0xf6, 0x36,
	0x90, 0x62, 0xc1, 0xc1, 0x6d, 0x47, 0x10, 0x81, 0x0d, 0x55, 0xca, 0x5a, 0xee, 0x81, 0x25, 0x09,
	0x08, 0x19, 0x67, 0xff, 0x9a, 0x87, 0x6b, 0x44, 0x5a, 0xb7, 0x63, 0x5e, 0x5c, 0x02, 0x8f, 0xc7,
	0x3c, 0xe7, 0xb4, 0x47, 0x76, 0x34, 0xc4, 0x32, 0x54, 0xa2, 0x83, 0xfa, 0x68, 0xb0, 0x3b, 0x6a,
	0x7c, 0xbd, 0xf6, 0x6a, 0xf3, 0x59, 0xd0, 0xa8, 0xf0, 0x44, 0xd0, 0x23, 0xb2, 0xa7, 0x65, 0xa4,
	0xb2, 0x5c, 0xea, 0x30, 0x57, 0x89, 0xec, 0xd4, 0xfa, 0x68, 0x80, 0x83, 0xd6, 0x0f, 0xbc, 0x51,
	0x89, 0xa4, 0x43, 0x52, 0x57, 0xe9, 0x03, 0x64, 0x1d, 0xdc, 0xc7, 0x83, 0xe6, 0xb0, 0xeb, 0x09,
	0x0e, 0xde, 0xdf, 0x1d, 0x6f, 0x52, 0xd9, 0x17, 0x69, 0xae, 0x8b, 0xc0, 0x46, 0xdd, 0x6b, 0x42,
	0x7e, 0x21, 0xdd, 0x27, 0x78, 0x26, 0x8b, 0xcd, 0x1d, 0x70, 0x50, 0x49, 0x7a, 0x4c, 0xea, 0x0b,
	0x1e, 0x3f, 0xda, 0xc1, 0xe6, 0xb0, 0xed, 0xd9, 0x37, 0x6d, 0x8f, 0xad, 0xca, 0x81, 0x8d, 0x9c,
	0xd7, 0xce, 0xd0, 0xe8, 0x6a, 0xfd, 0xce, 0x9c, 0x17, 0xc3, 0xd0, 0xd2, 0x30, 0xb4, 0x32, 0x0c,
	0xbd, 0x19, 0x86, 0x3e, 0x0c, 0x73, 0x3e, 0x0d, 0x43, 0xcf, 0x25, 0x73, 0x96, 0x25, 0x43, 0xab,
	0x92, 0x39, 0xeb, 0x92, 0x39, 0x77, 0xdd, 0x29, 0xa8, 0xf4, 0x24, 0x93, 0x7a, 0x21, 0xb5, 0x3f,
	0x85, 0x24, 0x81, 0xd4, 0xdf, 0xfe, 0xf8, 0x7d, 0x63, 0x23, 0x4f, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xf8, 0x98, 0x79, 0xbe, 0x85, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolXDayGoalData.Get().(proto.Message)
	})
}

var poolXDayGoalData = &sync.Pool{New: func() interface{} { return &XDayGoalData{} }}

func (m *XDayGoalData) ReleasePool() { m.Reset(); poolXDayGoalData.Put(m); m = nil }

func (m *XDayGoalData) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *XDayGoalData) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *XDayGoalData) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *XDayGoalData) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *XDayGoalData) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *XDayGoalData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XDayGoalData)
	if !ok {
		that2, ok := that.(XDayGoalData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.RegisterTime != that1.RegisterTime {
		return false
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	return true
}
func (m *XDayGoalData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XDayGoalData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XDayGoalData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for k := range m.Infos {
			v := m.Infos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintXDayGoal(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintXDayGoal(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintXDayGoal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RegisterTime != 0 {
		i = encodeVarintXDayGoal(dAtA, i, uint64(m.RegisterTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintXDayGoal(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintXDayGoal(dAtA []byte, offset int, v uint64) int {
	offset -= sovXDayGoal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *XDayGoalData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.RegisterTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("register_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RegisterTime))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("infos")
	w.RawByte('"')
	w.RawByte(':')
	if m.Infos == nil {
		w.RawString("null")
	} else if len(m.Infos) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlInfos := len(m.Infos)
		for k, v := range m.Infos {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlInfos--
			if mlInfos != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *XDayGoalData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *XDayGoalData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *XDayGoalData) GoString() string {
	return m.String()
}

func (m *XDayGoalData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovXDayGoal(uint64(l))
	}
	if m.RegisterTime != 0 {
		n += 1 + sovXDayGoal(uint64(m.RegisterTime))
	}
	if len(m.Infos) > 0 {
		for k, v := range m.Infos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovXDayGoal(uint64(l))
			}
			mapEntrySize := 1 + sovXDayGoal(uint64(k)) + l
			n += mapEntrySize + 1 + sovXDayGoal(uint64(mapEntrySize))
		}
	}
	return n
}

func sovXDayGoal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozXDayGoal(x uint64) (n int) {
	return sovXDayGoal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XDayGoalData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XDayGoalData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XDayGoalData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterTime", wireType)
			}
			m.RegisterTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXDayGoal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infos == nil {
				m.Infos = make(map[int64]*models.XDayGoalInfo)
			}
			var mapkey int64
			var mapvalue *models.XDayGoalInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXDayGoal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXDayGoal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthXDayGoal
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.XDayGoalInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXDayGoal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthXDayGoal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Infos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXDayGoal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthXDayGoal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXDayGoal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXDayGoal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXDayGoal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthXDayGoal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupXDayGoal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthXDayGoal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthXDayGoal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXDayGoal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupXDayGoal = fmt.Errorf("proto: unexpected end of group")
)
