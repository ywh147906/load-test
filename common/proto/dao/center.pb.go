// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/center.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MapLines struct {
	Lines map[int64]int64 `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *MapLines) Reset()      { *m = MapLines{} }
func (*MapLines) ProtoMessage() {}
func (*MapLines) Descriptor() ([]byte, []int) {
	return fileDescriptor_04396f45f34361de, []int{0}
}
func (m *MapLines) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapLines) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapLines.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapLines) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLines.Merge(m, src)
}
func (m *MapLines) XXX_Size() int {
	return m.Size()
}
func (m *MapLines) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLines.DiscardUnknown(m)
}

var xxx_messageInfo_MapLines proto.InternalMessageInfo

func (m *MapLines) GetLines() map[int64]int64 {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (*MapLines) XXX_MessageName() string {
	return "dao.MapLines"
}

// 动态增加的额外分线
type ExtraLines struct {
	ServerId    int64               `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty" pk`
	AllMapLines map[int64]*MapLines `protobuf:"bytes,2,rep,name=all_map_lines,json=allMapLines,proto3" json:"all_map_lines,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ExtraLines) Reset()      { *m = ExtraLines{} }
func (*ExtraLines) ProtoMessage() {}
func (*ExtraLines) Descriptor() ([]byte, []int) {
	return fileDescriptor_04396f45f34361de, []int{1}
}
func (m *ExtraLines) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraLines) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraLines.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtraLines) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraLines.Merge(m, src)
}
func (m *ExtraLines) XXX_Size() int {
	return m.Size()
}
func (m *ExtraLines) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraLines.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraLines proto.InternalMessageInfo

func (m *ExtraLines) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ExtraLines) GetAllMapLines() map[int64]*MapLines {
	if m != nil {
		return m.AllMapLines
	}
	return nil
}

func (*ExtraLines) XXX_MessageName() string {
	return "dao.ExtraLines"
}
func init() {
	proto.RegisterType((*MapLines)(nil), "dao.MapLines")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.MapLines.LinesEntry")
	proto.RegisterType((*ExtraLines)(nil), "dao.ExtraLines")
	proto.RegisterMapType((map[int64]*MapLines)(nil), "dao.ExtraLines.AllMapLinesEntry")
}

func init() { proto.RegisterFile("proto/dao/center.proto", fileDescriptor_04396f45f34361de) }

var fileDescriptor_04396f45f34361de = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x49, 0xcc, 0xd7, 0x4f, 0x4e, 0xcd, 0x2b, 0x49, 0x2d, 0xd2, 0x03, 0x0b, 0x08,
	0x31, 0xa7, 0x24, 0xe6, 0x4b, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x43, 0x14, 0x80, 0x58, 0x10, 0x29,
	0xa5, 0x12, 0x2e, 0x0e, 0xdf, 0xc4, 0x02, 0x9f, 0xcc, 0xbc, 0xd4, 0x62, 0x21, 0x3d, 0x2e, 0xd6,
	0x1c, 0x10, 0x43, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x42, 0x2f, 0x25, 0x31, 0x5f, 0x0f,
	0x26, 0xab, 0x07, 0x26, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0x20, 0xca, 0xa4, 0x2c, 0xb8, 0xb8,
	0x10, 0x82, 0x42, 0x02, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41,
	0x20, 0xa6, 0x90, 0x08, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x13, 0x58, 0x0c, 0xc2,
	0xb1, 0x62, 0xb2, 0x60, 0x54, 0x3a, 0xc6, 0xc8, 0xc5, 0xe5, 0x5a, 0x51, 0x52, 0x94, 0x08, 0xb1,
	0x58, 0x99, 0x8b, 0xb3, 0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x28, 0x3e, 0x33, 0x05, 0x62, 0x80, 0x13,
	0xdb, 0xa7, 0x7b, 0xf2, 0x4c, 0x05, 0xd9, 0x41, 0x1c, 0x10, 0x09, 0xcf, 0x14, 0x21, 0x17, 0x2e,
	0xde, 0xc4, 0x9c, 0x9c, 0xf8, 0xdc, 0xc4, 0x82, 0x78, 0x88, 0x2b, 0x99, 0xc0, 0xae, 0x54, 0x00,
	0xbb, 0x12, 0x61, 0x98, 0x9e, 0x63, 0x4e, 0x0e, 0xcc, 0xcd, 0x10, 0xd7, 0x72, 0x27, 0x22, 0x44,
	0xa4, 0x7c, 0xb9, 0x04, 0xd0, 0x15, 0x60, 0x71, 0xb9, 0x32, 0xb2, 0xcb, 0xb9, 0x8d, 0x78, 0x51,
	0x42, 0x02, 0xc9, 0x23, 0x4e, 0x5e, 0x37, 0x1e, 0xca, 0x31, 0xac, 0x78, 0x24, 0xc7, 0x78, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0,
	0xe1, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x27, 0x1e, 0xcb, 0x31, 0x5e, 0x78, 0x2c, 0xc7,
	0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x4c, 0x72, 0x7e, 0x66, 0x9e, 0x2e, 0xc4, 0x47, 0xfa, 0xc9,
	0xf9, 0xb9, 0xb9, 0xf9, 0x79, 0xfa, 0xf0, 0x28, 0x4b, 0x62, 0x03, 0x33, 0x8d, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xd0, 0xb5, 0x05, 0x67, 0xc6, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapLines.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExtraLines.Get().(proto.Message)
	})
}

var poolMapLines = &sync.Pool{New: func() interface{} { return &MapLines{} }}

func (m *MapLines) ReleasePool() { m.Reset(); poolMapLines.Put(m); m = nil }

var poolExtraLines = &sync.Pool{New: func() interface{} { return &ExtraLines{} }}

func (m *ExtraLines) ReleasePool() { m.Reset(); poolExtraLines.Put(m); m = nil }

func (m *ExtraLines) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.ServerId), 10)
}

func (m *ExtraLines) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.ServerId), 10)
}

func (m *ExtraLines) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ExtraLines) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ExtraLines) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *MapLines) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapLines)
	if !ok {
		that2, ok := that.(MapLines)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Lines) != len(that1.Lines) {
		return false
	}
	for i := range this.Lines {
		if this.Lines[i] != that1.Lines[i] {
			return false
		}
	}
	return true
}
func (this *ExtraLines) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExtraLines)
	if !ok {
		that2, ok := that.(ExtraLines)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if len(this.AllMapLines) != len(that1.AllMapLines) {
		return false
	}
	for i := range this.AllMapLines {
		if !this.AllMapLines[i].Equal(that1.AllMapLines[i]) {
			return false
		}
	}
	return true
}
func (m *MapLines) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapLines) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapLines) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lines) > 0 {
		for k := range m.Lines {
			v := m.Lines[k]
			baseI := i
			i = encodeVarintCenter(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCenter(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCenter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExtraLines) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraLines) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtraLines) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllMapLines) > 0 {
		for k := range m.AllMapLines {
			v := m.AllMapLines[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCenter(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintCenter(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCenter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ServerId != 0 {
		i = encodeVarintCenter(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCenter(dAtA []byte, offset int, v uint64) int {
	offset -= sovCenter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MapLines) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("lines")
	w.RawByte('"')
	w.RawByte(':')
	if m.Lines == nil {
		w.RawString("null")
	} else if len(m.Lines) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlLines := len(m.Lines)
		for k, v := range m.Lines {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlLines--
			if mlLines != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ExtraLines) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ServerId != 0 {
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("all_map_lines")
	w.RawByte('"')
	w.RawByte(':')
	if m.AllMapLines == nil {
		w.RawString("null")
	} else if len(m.AllMapLines) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAllMapLines := len(m.AllMapLines)
		for k, v := range m.AllMapLines {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlAllMapLines--
			if mlAllMapLines != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapLines) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapLines) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapLines) GoString() string {
	return m.String()
}

func (m *ExtraLines) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ExtraLines) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ExtraLines) GoString() string {
	return m.String()
}

func (m *MapLines) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lines) > 0 {
		for k, v := range m.Lines {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCenter(uint64(k)) + 1 + sovCenter(uint64(v))
			n += mapEntrySize + 1 + sovCenter(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ExtraLines) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerId != 0 {
		n += 1 + sovCenter(uint64(m.ServerId))
	}
	if len(m.AllMapLines) > 0 {
		for k, v := range m.AllMapLines {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCenter(uint64(l))
			}
			mapEntrySize := 1 + sovCenter(uint64(k)) + l
			n += mapEntrySize + 1 + sovCenter(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCenter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCenter(x uint64) (n int) {
	return sovCenter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MapLines) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapLines: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapLines: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lines == nil {
				m.Lines = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCenter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCenter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCenter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Lines[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtraLines) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraLines: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraLines: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllMapLines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCenter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCenter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllMapLines == nil {
				m.AllMapLines = make(map[int64]*MapLines)
			}
			var mapkey int64
			var mapvalue *MapLines
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCenter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCenter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCenter
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCenter
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MapLines{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCenter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCenter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllMapLines[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCenter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCenter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCenter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCenter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCenter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCenter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCenter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCenter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCenter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCenter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCenter = fmt.Errorf("proto: unexpected end of group")
)
