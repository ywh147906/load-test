// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/boss_hall.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BossHallData struct {
	RoleId string               `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Info   *models.BossHallInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *BossHallData) Reset()      { *m = BossHallData{} }
func (*BossHallData) ProtoMessage() {}
func (*BossHallData) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fcdb858f16de92, []int{0}
}
func (m *BossHallData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossHallData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossHallData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossHallData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossHallData.Merge(m, src)
}
func (m *BossHallData) XXX_Size() int {
	return m.Size()
}
func (m *BossHallData) XXX_DiscardUnknown() {
	xxx_messageInfo_BossHallData.DiscardUnknown(m)
}

var xxx_messageInfo_BossHallData proto.InternalMessageInfo

func (m *BossHallData) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *BossHallData) GetInfo() *models.BossHallInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*BossHallData) XXX_MessageName() string {
	return "dao.BossHallData"
}

type BossKillJoinData struct {
	RoleId          string                     `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	JoinInfo        []*models.BossKillJoinInfo `protobuf:"bytes,2,rep,name=join_info,json=joinInfo,proto3" json:"join_info,omitempty"`
	KillInfo        []*models.BossKillJoinInfo `protobuf:"bytes,3,rep,name=kill_info,json=killInfo,proto3" json:"kill_info,omitempty"`
	NextRefreshTime int64                      `protobuf:"varint,4,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
}

func (m *BossKillJoinData) Reset()      { *m = BossKillJoinData{} }
func (*BossKillJoinData) ProtoMessage() {}
func (*BossKillJoinData) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fcdb858f16de92, []int{1}
}
func (m *BossKillJoinData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BossKillJoinData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BossKillJoinData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BossKillJoinData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BossKillJoinData.Merge(m, src)
}
func (m *BossKillJoinData) XXX_Size() int {
	return m.Size()
}
func (m *BossKillJoinData) XXX_DiscardUnknown() {
	xxx_messageInfo_BossKillJoinData.DiscardUnknown(m)
}

var xxx_messageInfo_BossKillJoinData proto.InternalMessageInfo

func (m *BossKillJoinData) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *BossKillJoinData) GetJoinInfo() []*models.BossKillJoinInfo {
	if m != nil {
		return m.JoinInfo
	}
	return nil
}

func (m *BossKillJoinData) GetKillInfo() []*models.BossKillJoinInfo {
	if m != nil {
		return m.KillInfo
	}
	return nil
}

func (m *BossKillJoinData) GetNextRefreshTime() int64 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (*BossKillJoinData) XXX_MessageName() string {
	return "dao.BossKillJoinData"
}
func init() {
	proto.RegisterType((*BossHallData)(nil), "dao.BossHallData")
	proto.RegisterType((*BossKillJoinData)(nil), "dao.BossKillJoinData")
}

func init() { proto.RegisterFile("proto/dao/boss_hall.proto", fileDescriptor_09fcdb858f16de92) }

var fileDescriptor_09fcdb858f16de92 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4e, 0xc2, 0x40,
	0x1c, 0xc6, 0x7b, 0x94, 0xa0, 0x1c, 0x26, 0x2a, 0x61, 0xa8, 0x84, 0x1c, 0x84, 0xa9, 0x31, 0x91,
	0x26, 0x18, 0x5f, 0x80, 0x38, 0x08, 0x6e, 0x8d, 0x8b, 0x2e, 0x4d, 0xa1, 0x57, 0x38, 0xb8, 0xde,
	0x9f, 0xf4, 0x1a, 0xe3, 0x63, 0xf8, 0x18, 0x3e, 0x0a, 0x8b, 0x09, 0x23, 0x93, 0xd1, 0xeb, 0xe2,
	0x68, 0x7c, 0x02, 0x73, 0x3d, 0x30, 0xc6, 0x45, 0xb7, 0x2f, 0xdf, 0xff, 0xfb, 0x7d, 0xdf, 0xf0,
	0xc7, 0x27, 0xcb, 0x14, 0x32, 0xf0, 0xa2, 0x10, 0xbc, 0x31, 0x48, 0x19, 0xcc, 0x42, 0xce, 0x7b,
	0x85, 0x57, 0xb7, 0xa3, 0x10, 0x9a, 0x8d, 0x29, 0x4c, 0xc1, 0x64, 0xb4, 0x32, 0xa7, 0x66, 0xcb,
	0x38, 0x09, 0x44, 0x94, 0xcb, 0xdf, 0x60, 0xf7, 0x16, 0x1f, 0x0c, 0x40, 0xca, 0xab, 0x90, 0xf3,
	0xcb, 0x30, 0x0b, 0xeb, 0x6d, 0xbc, 0x97, 0x02, 0xa7, 0x01, 0x8b, 0x1c, 0xd4, 0x41, 0x6e, 0x75,
	0x50, 0xf9, 0x7c, 0x69, 0x97, 0x96, 0x0b, 0xbf, 0xa2, 0xed, 0x61, 0x54, 0x77, 0x71, 0x99, 0x89,
	0x18, 0x9c, 0x52, 0x07, 0xb9, 0xb5, 0x7e, 0xa3, 0x67, 0x7a, 0x7b, 0xbb, 0x92, 0xa1, 0x88, 0xc1,
	0x2f, 0x12, 0xdd, 0x67, 0x84, 0x8f, 0xb4, 0x7d, 0xcd, 0x38, 0x1f, 0x01, 0x13, 0xff, 0xeb, 0xbf,
	0xc0, 0xd5, 0x39, 0x30, 0x11, 0x6c, 0x47, 0x6c, 0xb7, 0xd6, 0x77, 0x7e, 0x8e, 0xec, 0xda, 0x8a,
	0xa1, 0xfd, 0xf9, 0x56, 0x69, 0x6c, 0xc1, 0x38, 0x37, 0x98, 0xfd, 0x17, 0xa6, 0xa3, 0x05, 0x76,
	0x8a, 0x8f, 0x05, 0x7d, 0xc8, 0x82, 0x94, 0xc6, 0x29, 0x95, 0xb3, 0x20, 0x63, 0x09, 0x75, 0xca,
	0x1d, 0xe4, 0xda, 0xfe, 0xa1, 0x3e, 0xf8, 0xc6, 0xbf, 0x61, 0x09, 0x1d, 0x8c, 0x36, 0x6f, 0xc4,
	0x7a, 0x52, 0x04, 0xad, 0x14, 0x41, 0x6b, 0x45, 0xd0, 0xab, 0x22, 0xe8, 0x5d, 0x11, 0xeb, 0x43,
	0x11, 0xf4, 0x98, 0x13, 0x6b, 0x95, 0x13, 0xb4, 0xce, 0x89, 0xb5, 0xc9, 0x89, 0x75, 0xd7, 0x9a,
	0x00, 0x13, 0x67, 0x92, 0xa6, 0xf7, 0x34, 0xf5, 0x26, 0x90, 0x24, 0x20, 0xbc, 0xef, 0xff, 0x8d,
	0x2b, 0x85, 0x3c, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x84, 0x5c, 0x36, 0x8b, 0xd3, 0x01, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossHallData.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBossKillJoinData.Get().(proto.Message)
	})
}

var poolBossHallData = &sync.Pool{New: func() interface{} { return &BossHallData{} }}

func (m *BossHallData) ReleasePool() { m.Reset(); poolBossHallData.Put(m); m = nil }

var poolBossKillJoinData = &sync.Pool{New: func() interface{} { return &BossKillJoinData{} }}

func (m *BossKillJoinData) ReleasePool() { m.Reset(); poolBossKillJoinData.Put(m); m = nil }

func (m *BossHallData) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *BossHallData) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *BossHallData) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *BossHallData) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *BossHallData) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *BossKillJoinData) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *BossKillJoinData) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *BossKillJoinData) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *BossKillJoinData) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *BossKillJoinData) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *BossHallData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossHallData)
	if !ok {
		that2, ok := that.(BossHallData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *BossKillJoinData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BossKillJoinData)
	if !ok {
		that2, ok := that.(BossKillJoinData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.JoinInfo) != len(that1.JoinInfo) {
		return false
	}
	for i := range this.JoinInfo {
		if !this.JoinInfo[i].Equal(that1.JoinInfo[i]) {
			return false
		}
	}
	if len(this.KillInfo) != len(that1.KillInfo) {
		return false
	}
	for i := range this.KillInfo {
		if !this.KillInfo[i].Equal(that1.KillInfo[i]) {
			return false
		}
	}
	if this.NextRefreshTime != that1.NextRefreshTime {
		return false
	}
	return true
}
func (m *BossHallData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossHallData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossHallData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBossHall(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintBossHall(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BossKillJoinData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BossKillJoinData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BossKillJoinData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextRefreshTime != 0 {
		i = encodeVarintBossHall(dAtA, i, uint64(m.NextRefreshTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.KillInfo) > 0 {
		for iNdEx := len(m.KillInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBossHall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.JoinInfo) > 0 {
		for iNdEx := len(m.JoinInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoinInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBossHall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintBossHall(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBossHall(dAtA []byte, offset int, v uint64) int {
	offset -= sovBossHall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *BossHallData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossKillJoinData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("join_info")
	w.RawByte('"')
	w.RawByte(':')
	if m.JoinInfo == nil {
		w.RawString("null")
	} else if len(m.JoinInfo) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.JoinInfo {
			v.JsonBytes(w)
			if i != len(m.JoinInfo)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("kill_info")
	w.RawByte('"')
	w.RawByte(':')
	if m.KillInfo == nil {
		w.RawString("null")
	} else if len(m.KillInfo) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.KillInfo {
			v.JsonBytes(w)
			if i != len(m.KillInfo)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.NextRefreshTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_refresh_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRefreshTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BossHallData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossHallData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossHallData) GoString() string {
	return m.String()
}

func (m *BossKillJoinData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BossKillJoinData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BossKillJoinData) GoString() string {
	return m.String()
}

func (m *BossHallData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovBossHall(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovBossHall(uint64(l))
	}
	return n
}

func (m *BossKillJoinData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovBossHall(uint64(l))
	}
	if len(m.JoinInfo) > 0 {
		for _, e := range m.JoinInfo {
			l = e.Size()
			n += 1 + l + sovBossHall(uint64(l))
		}
	}
	if len(m.KillInfo) > 0 {
		for _, e := range m.KillInfo {
			l = e.Size()
			n += 1 + l + sovBossHall(uint64(l))
		}
	}
	if m.NextRefreshTime != 0 {
		n += 1 + sovBossHall(uint64(m.NextRefreshTime))
	}
	return n
}

func sovBossHall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBossHall(x uint64) (n int) {
	return sovBossHall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BossHallData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossHallData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossHallData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBossHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBossHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBossHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBossHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.BossHallInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BossKillJoinData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BossKillJoinData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BossKillJoinData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBossHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBossHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBossHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBossHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinInfo = append(m.JoinInfo, &models.BossKillJoinInfo{})
			if err := m.JoinInfo[len(m.JoinInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBossHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBossHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillInfo = append(m.KillInfo, &models.BossKillJoinInfo{})
			if err := m.KillInfo[len(m.KillInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBossHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBossHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBossHall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBossHall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBossHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBossHall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBossHall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBossHall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBossHall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBossHall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBossHall = fmt.Errorf("proto: unexpected end of group")
)
