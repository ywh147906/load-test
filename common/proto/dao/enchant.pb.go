// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/enchant.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Enchant struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	// 这里的hero_id是row_hero表里的OriginID
	HeroId int64 `protobuf:"varint,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	// 以下仅在hero_id>0时有效
	SlotId int64         `protobuf:"varint,3,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	Affix  *models.Affix `protobuf:"bytes,4,opt,name=affix,proto3" json:"affix,omitempty"`
}

func (m *Enchant) Reset()      { *m = Enchant{} }
func (*Enchant) ProtoMessage() {}
func (*Enchant) Descriptor() ([]byte, []int) {
	return fileDescriptor_02664f471e27f7b4, []int{0}
}
func (m *Enchant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enchant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enchant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enchant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enchant.Merge(m, src)
}
func (m *Enchant) XXX_Size() int {
	return m.Size()
}
func (m *Enchant) XXX_DiscardUnknown() {
	xxx_messageInfo_Enchant.DiscardUnknown(m)
}

var xxx_messageInfo_Enchant proto.InternalMessageInfo

func (m *Enchant) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Enchant) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *Enchant) GetSlotId() int64 {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *Enchant) GetAffix() *models.Affix {
	if m != nil {
		return m.Affix
	}
	return nil
}

func (*Enchant) XXX_MessageName() string {
	return "dao.Enchant"
}
func init() {
	proto.RegisterType((*Enchant)(nil), "dao.Enchant")
}

func init() { proto.RegisterFile("proto/dao/enchant.proto", fileDescriptor_02664f471e27f7b4) }

var fileDescriptor_02664f471e27f7b4 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x49, 0xcc, 0xd7, 0x4f, 0xcd, 0x4b, 0xce, 0x48, 0xcc, 0x2b, 0xd1, 0x03, 0x8b,
	0x08, 0x31, 0xa7, 0x24, 0xe6, 0x4b, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x43, 0x54, 0x80, 0x58, 0x10,
	0x29, 0x29, 0x19, 0x88, 0x48, 0x6e, 0x7e, 0x4a, 0x6a, 0x4e, 0xb1, 0x7e, 0x6a, 0x61, 0x69, 0x66,
	0x41, 0x6e, 0x2a, 0x4c, 0xa3, 0x52, 0x23, 0x23, 0x17, 0xbb, 0x2b, 0xc4, 0x28, 0x21, 0x79, 0x2e,
	0xf6, 0xa2, 0xfc, 0x9c, 0xd4, 0xf8, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x4e, 0x27, 0xb6,
	0x4f, 0xf7, 0xe4, 0x99, 0x0a, 0xb2, 0x83, 0xd8, 0x40, 0xc2, 0x9e, 0x29, 0x42, 0xe2, 0x5c, 0xec,
	0x19, 0xa9, 0x45, 0xf9, 0x20, 0x05, 0x4c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x6c, 0x20, 0x2e, 0x44,
	0xa2, 0x38, 0x27, 0xbf, 0x04, 0x24, 0xc1, 0x0c, 0x91, 0x00, 0x71, 0x3d, 0x53, 0x84, 0x94, 0xb9,
	0x58, 0x13, 0xd3, 0xd2, 0x32, 0x2b, 0x24, 0x58, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0x78, 0xf5, 0x20,
	0xce, 0xd0, 0x73, 0x04, 0x09, 0x06, 0x41, 0xe4, 0x9c, 0xbc, 0x6e, 0x3c, 0x94, 0x63, 0x58, 0xf1,
	0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c,
	0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x4e, 0x3c, 0x96, 0x63,
	0xbc, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x99, 0xe4, 0xfc, 0xcc, 0x3c, 0xdd,
	0xe2, 0xd4, 0xa2, 0xb2, 0xd4, 0x22, 0xfd, 0xe4, 0xfc, 0xdc, 0xdc, 0xfc, 0x3c, 0x7d, 0x78, 0xb0,
	0x24, 0xb1, 0x81, 0x99, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xf7, 0xaa, 0x9d, 0x2a,
	0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEnchant.Get().(proto.Message)
	})
}

var poolEnchant = &sync.Pool{New: func() interface{} { return &Enchant{} }}

func (m *Enchant) ReleasePool() { m.Reset(); poolEnchant.Put(m); m = nil }

func (m *Enchant) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Enchant) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Enchant) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Enchant) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Enchant) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Enchant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Enchant)
	if !ok {
		that2, ok := that.(Enchant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.HeroId != that1.HeroId {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	if !this.Affix.Equal(that1.Affix) {
		return false
	}
	return true
}
func (m *Enchant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enchant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enchant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Affix != nil {
		{
			size, err := m.Affix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEnchant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SlotId != 0 {
		i = encodeVarintEnchant(dAtA, i, uint64(m.SlotId))
		i--
		dAtA[i] = 0x18
	}
	if m.HeroId != 0 {
		i = encodeVarintEnchant(dAtA, i, uint64(m.HeroId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintEnchant(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnchant(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnchant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Enchant) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.HeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroId))
		needWriteComma = true
	}
	if m.SlotId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("slot_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SlotId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("affix")
	w.RawByte('"')
	w.RawByte(':')
	m.Affix.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Enchant) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Enchant) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Enchant) GoString() string {
	return m.String()
}

func (m *Enchant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovEnchant(uint64(l))
	}
	if m.HeroId != 0 {
		n += 1 + sovEnchant(uint64(m.HeroId))
	}
	if m.SlotId != 0 {
		n += 1 + sovEnchant(uint64(m.SlotId))
	}
	if m.Affix != nil {
		l = m.Affix.Size()
		n += 1 + l + sovEnchant(uint64(l))
	}
	return n
}

func sovEnchant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnchant(x uint64) (n int) {
	return sovEnchant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Enchant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Enchant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Enchant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnchant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnchant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnchant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Affix == nil {
				m.Affix = &models.Affix{}
			}
			if err := m.Affix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnchant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnchant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnchant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnchant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnchant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnchant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnchant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnchant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnchant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnchant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnchant = fmt.Errorf("proto: unexpected end of group")
)
