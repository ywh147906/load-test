// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/arena.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ArenaData struct {
	RoleId string                      `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Data   map[int32]*models.ArenaData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ArenaData) Reset()      { *m = ArenaData{} }
func (*ArenaData) ProtoMessage() {}
func (*ArenaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{0}
}
func (m *ArenaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaData.Merge(m, src)
}
func (m *ArenaData) XXX_Size() int {
	return m.Size()
}
func (m *ArenaData) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaData.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaData proto.InternalMessageInfo

func (m *ArenaData) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ArenaData) GetData() map[int32]*models.ArenaData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*ArenaData) XXX_MessageName() string {
	return "dao.ArenaData"
}

type ServerData struct {
	Identification  string `protobuf:"bytes,1,opt,name=identification,proto3" json:"identification,omitempty" pk`
	ServerStartTime int64  `protobuf:"varint,2,opt,name=server_start_time,json=serverStartTime,proto3" json:"server_start_time,omitempty"`
}

func (m *ServerData) Reset()      { *m = ServerData{} }
func (*ServerData) ProtoMessage() {}
func (*ServerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{1}
}
func (m *ServerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerData.Merge(m, src)
}
func (m *ServerData) XXX_Size() int {
	return m.Size()
}
func (m *ServerData) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerData.DiscardUnknown(m)
}

var xxx_messageInfo_ServerData proto.InternalMessageInfo

func (m *ServerData) GetIdentification() string {
	if m != nil {
		return m.Identification
	}
	return ""
}

func (m *ServerData) GetServerStartTime() int64 {
	if m != nil {
		return m.ServerStartTime
	}
	return 0
}

func (*ServerData) XXX_MessageName() string {
	return "dao.ServerData"
}

type ArenaRankingTypeInfos struct {
	Type      models.ArenaType               `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty" pk`
	TypeInfos *models.ArenaRanking_TypeInfos `protobuf:"bytes,2,opt,name=type_infos,json=typeInfos,proto3" json:"type_infos,omitempty"`
}

func (m *ArenaRankingTypeInfos) Reset()      { *m = ArenaRankingTypeInfos{} }
func (*ArenaRankingTypeInfos) ProtoMessage() {}
func (*ArenaRankingTypeInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{2}
}
func (m *ArenaRankingTypeInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRankingTypeInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRankingTypeInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRankingTypeInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRankingTypeInfos.Merge(m, src)
}
func (m *ArenaRankingTypeInfos) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRankingTypeInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRankingTypeInfos.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRankingTypeInfos proto.InternalMessageInfo

func (m *ArenaRankingTypeInfos) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaRankingTypeInfos) GetTypeInfos() *models.ArenaRanking_TypeInfos {
	if m != nil {
		return m.TypeInfos
	}
	return nil
}

func (*ArenaRankingTypeInfos) XXX_MessageName() string {
	return "dao.ArenaRankingTypeInfos"
}

type ArenaRankingInfos struct {
	RankingIndex string                     `protobuf:"bytes,1,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty" pk`
	Infos        *models.ArenaRanking_Infos `protobuf:"bytes,2,opt,name=infos,proto3" json:"infos,omitempty"`
}

func (m *ArenaRankingInfos) Reset()      { *m = ArenaRankingInfos{} }
func (*ArenaRankingInfos) ProtoMessage() {}
func (*ArenaRankingInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{3}
}
func (m *ArenaRankingInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRankingInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRankingInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRankingInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRankingInfos.Merge(m, src)
}
func (m *ArenaRankingInfos) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRankingInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRankingInfos.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRankingInfos proto.InternalMessageInfo

func (m *ArenaRankingInfos) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ArenaRankingInfos) GetInfos() *models.ArenaRanking_Infos {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (*ArenaRankingInfos) XXX_MessageName() string {
	return "dao.ArenaRankingInfos"
}

type ArenaRankingRole struct {
	RankingRoleKey string                    `protobuf:"bytes,1,opt,name=ranking_role_key,json=rankingRoleKey,proto3" json:"ranking_role_key,omitempty" pk`
	Info           *models.ArenaRanking_Info `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *ArenaRankingRole) Reset()      { *m = ArenaRankingRole{} }
func (*ArenaRankingRole) ProtoMessage() {}
func (*ArenaRankingRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{4}
}
func (m *ArenaRankingRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRankingRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRankingRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRankingRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRankingRole.Merge(m, src)
}
func (m *ArenaRankingRole) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRankingRole) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRankingRole.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRankingRole proto.InternalMessageInfo

func (m *ArenaRankingRole) GetRankingRoleKey() string {
	if m != nil {
		return m.RankingRoleKey
	}
	return ""
}

func (m *ArenaRankingRole) GetInfo() *models.ArenaRanking_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*ArenaRankingRole) XXX_MessageName() string {
	return "dao.ArenaRankingRole"
}

type ArenaFightLogs struct {
	FightIndex    string                  `protobuf:"bytes,1,opt,name=fight_index,json=fightIndex,proto3" json:"fight_index,omitempty" pk`
	FightDayBegin int64                   `protobuf:"varint,2,opt,name=fight_day_begin,json=fightDayBegin,proto3" json:"fight_day_begin,omitempty"`
	FightLogs     []*models.ArenaFightLog `protobuf:"bytes,3,rep,name=fight_logs,json=fightLogs,proto3" json:"fight_logs,omitempty"`
}

func (m *ArenaFightLogs) Reset()      { *m = ArenaFightLogs{} }
func (*ArenaFightLogs) ProtoMessage() {}
func (*ArenaFightLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{5}
}
func (m *ArenaFightLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaFightLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaFightLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaFightLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaFightLogs.Merge(m, src)
}
func (m *ArenaFightLogs) XXX_Size() int {
	return m.Size()
}
func (m *ArenaFightLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaFightLogs.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaFightLogs proto.InternalMessageInfo

func (m *ArenaFightLogs) GetFightIndex() string {
	if m != nil {
		return m.FightIndex
	}
	return ""
}

func (m *ArenaFightLogs) GetFightDayBegin() int64 {
	if m != nil {
		return m.FightDayBegin
	}
	return 0
}

func (m *ArenaFightLogs) GetFightLogs() []*models.ArenaFightLog {
	if m != nil {
		return m.FightLogs
	}
	return nil
}

func (*ArenaFightLogs) XXX_MessageName() string {
	return "dao.ArenaFightLogs"
}

type ArenaFightTime struct {
	RoleId        string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	LastFightTime map[int32]int64 `protobuf:"bytes,2,rep,name=last_fight_time,json=lastFightTime,proto3" json:"last_fight_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ArenaFightTime) Reset()      { *m = ArenaFightTime{} }
func (*ArenaFightTime) ProtoMessage() {}
func (*ArenaFightTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{6}
}
func (m *ArenaFightTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaFightTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaFightTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaFightTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaFightTime.Merge(m, src)
}
func (m *ArenaFightTime) XXX_Size() int {
	return m.Size()
}
func (m *ArenaFightTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaFightTime.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaFightTime proto.InternalMessageInfo

func (m *ArenaFightTime) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ArenaFightTime) GetLastFightTime() map[int32]int64 {
	if m != nil {
		return m.LastFightTime
	}
	return nil
}

func (*ArenaFightTime) XXX_MessageName() string {
	return "dao.ArenaFightTime"
}

type ArenaDayRewardIndex struct {
	Type models.ArenaType              `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty" pk`
	Info []*models.ArenaSendRewardTime `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *ArenaDayRewardIndex) Reset()      { *m = ArenaDayRewardIndex{} }
func (*ArenaDayRewardIndex) ProtoMessage() {}
func (*ArenaDayRewardIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{7}
}
func (m *ArenaDayRewardIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaDayRewardIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaDayRewardIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaDayRewardIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaDayRewardIndex.Merge(m, src)
}
func (m *ArenaDayRewardIndex) XXX_Size() int {
	return m.Size()
}
func (m *ArenaDayRewardIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaDayRewardIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaDayRewardIndex proto.InternalMessageInfo

func (m *ArenaDayRewardIndex) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaDayRewardIndex) GetInfo() []*models.ArenaSendRewardTime {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*ArenaDayRewardIndex) XXX_MessageName() string {
	return "dao.ArenaDayRewardIndex"
}

type ArenaSeasonRewardIndex struct {
	Type models.ArenaType              `protobuf:"varint,1,opt,name=type,proto3,enum=models.ArenaType" json:"type,omitempty" pk`
	Info []*models.ArenaSendRewardTime `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *ArenaSeasonRewardIndex) Reset()      { *m = ArenaSeasonRewardIndex{} }
func (*ArenaSeasonRewardIndex) ProtoMessage() {}
func (*ArenaSeasonRewardIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{8}
}
func (m *ArenaSeasonRewardIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaSeasonRewardIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaSeasonRewardIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaSeasonRewardIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaSeasonRewardIndex.Merge(m, src)
}
func (m *ArenaSeasonRewardIndex) XXX_Size() int {
	return m.Size()
}
func (m *ArenaSeasonRewardIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaSeasonRewardIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaSeasonRewardIndex proto.InternalMessageInfo

func (m *ArenaSeasonRewardIndex) GetType() models.ArenaType {
	if m != nil {
		return m.Type
	}
	return models.ArenaType_ArenaType_None
}

func (m *ArenaSeasonRewardIndex) GetInfo() []*models.ArenaSendRewardTime {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*ArenaSeasonRewardIndex) XXX_MessageName() string {
	return "dao.ArenaSeasonRewardIndex"
}

type ArenaRoleRankingChangeInfo struct {
	RewardIndex uint64 `protobuf:"varint,1,opt,name=reward_index,json=rewardIndex,proto3" json:"reward_index,omitempty" pk`
	RankingId   int32  `protobuf:"varint,2,opt,name=ranking_id,json=rankingId,proto3" json:"ranking_id,omitempty"`
	ChangeTime  int64  `protobuf:"varint,3,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
}

func (m *ArenaRoleRankingChangeInfo) Reset()      { *m = ArenaRoleRankingChangeInfo{} }
func (*ArenaRoleRankingChangeInfo) ProtoMessage() {}
func (*ArenaRoleRankingChangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{9}
}
func (m *ArenaRoleRankingChangeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRoleRankingChangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRoleRankingChangeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRoleRankingChangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRoleRankingChangeInfo.Merge(m, src)
}
func (m *ArenaRoleRankingChangeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRoleRankingChangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRoleRankingChangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRoleRankingChangeInfo proto.InternalMessageInfo

func (m *ArenaRoleRankingChangeInfo) GetRewardIndex() uint64 {
	if m != nil {
		return m.RewardIndex
	}
	return 0
}

func (m *ArenaRoleRankingChangeInfo) GetRankingId() int32 {
	if m != nil {
		return m.RankingId
	}
	return 0
}

func (m *ArenaRoleRankingChangeInfo) GetChangeTime() int64 {
	if m != nil {
		return m.ChangeTime
	}
	return 0
}

func (*ArenaRoleRankingChangeInfo) XXX_MessageName() string {
	return "dao.ArenaRoleRankingChangeInfo"
}

type ArenaRankingIndex struct {
	RankingIndex string `protobuf:"bytes,1,opt,name=ranking_index,json=rankingIndex,proto3" json:"ranking_index,omitempty" pk`
	CreateTime   int64  `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (m *ArenaRankingIndex) Reset()      { *m = ArenaRankingIndex{} }
func (*ArenaRankingIndex) ProtoMessage() {}
func (*ArenaRankingIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9c4e6b6028bbae8, []int{10}
}
func (m *ArenaRankingIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArenaRankingIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArenaRankingIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArenaRankingIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArenaRankingIndex.Merge(m, src)
}
func (m *ArenaRankingIndex) XXX_Size() int {
	return m.Size()
}
func (m *ArenaRankingIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ArenaRankingIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ArenaRankingIndex proto.InternalMessageInfo

func (m *ArenaRankingIndex) GetRankingIndex() string {
	if m != nil {
		return m.RankingIndex
	}
	return ""
}

func (m *ArenaRankingIndex) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (*ArenaRankingIndex) XXX_MessageName() string {
	return "dao.ArenaRankingIndex"
}
func init() {
	proto.RegisterType((*ArenaData)(nil), "dao.ArenaData")
	proto.RegisterMapType((map[int32]*models.ArenaData)(nil), "dao.ArenaData.DataEntry")
	proto.RegisterType((*ServerData)(nil), "dao.ServerData")
	proto.RegisterType((*ArenaRankingTypeInfos)(nil), "dao.ArenaRankingTypeInfos")
	proto.RegisterType((*ArenaRankingInfos)(nil), "dao.ArenaRankingInfos")
	proto.RegisterType((*ArenaRankingRole)(nil), "dao.ArenaRankingRole")
	proto.RegisterType((*ArenaFightLogs)(nil), "dao.ArenaFightLogs")
	proto.RegisterType((*ArenaFightTime)(nil), "dao.ArenaFightTime")
	proto.RegisterMapType((map[int32]int64)(nil), "dao.ArenaFightTime.LastFightTimeEntry")
	proto.RegisterType((*ArenaDayRewardIndex)(nil), "dao.ArenaDayRewardIndex")
	proto.RegisterType((*ArenaSeasonRewardIndex)(nil), "dao.ArenaSeasonRewardIndex")
	proto.RegisterType((*ArenaRoleRankingChangeInfo)(nil), "dao.ArenaRoleRankingChangeInfo")
	proto.RegisterType((*ArenaRankingIndex)(nil), "dao.ArenaRankingIndex")
}

func init() { proto.RegisterFile("proto/dao/arena.proto", fileDescriptor_c9c4e6b6028bbae8) }

var fileDescriptor_c9c4e6b6028bbae8 = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0xb6, 0x94, 0x5f, 0xfa, 0x96, 0xbf, 0xf3, 0x03, 0xac, 0x55, 0x17, 0xd2, 0x03, 0xe0,
	0x1f, 0xb6, 0x04, 0x3d, 0x18, 0x13, 0x13, 0x45, 0x34, 0x01, 0x89, 0x87, 0x85, 0x93, 0x97, 0xcd,
	0xd0, 0x99, 0x6e, 0x37, 0x6c, 0x67, 0x9a, 0xd9, 0x01, 0xd9, 0x0f, 0x60, 0xbc, 0x7a, 0xf3, 0x1b,
	0x18, 0xbf, 0x87, 0x17, 0x8e, 0x1c, 0x39, 0x19, 0x6d, 0x2f, 0x1e, 0x8d, 0x9f, 0xc0, 0xcc, 0xcc,
	0xee, 0xb2, 0xad, 0x18, 0xc3, 0xc5, 0x0b, 0xcc, 0xbc, 0xcf, 0xfb, 0xbe, 0xcf, 0x33, 0x33, 0xef,
	0xb3, 0x85, 0xf9, 0x9e, 0xe0, 0x92, 0x37, 0x09, 0xe6, 0x4d, 0x2c, 0x28, 0xc3, 0x8e, 0xde, 0xa3,
	0x12, 0xc1, 0xbc, 0x3e, 0xe7, 0x73, 0x9f, 0x1b, 0x5c, 0xad, 0x0c, 0x54, 0xaf, 0x99, 0x48, 0x97,
	0x13, 0x1a, 0x46, 0xf9, 0xa2, 0xfa, 0xb5, 0x21, 0x24, 0xea, 0xf0, 0x5e, 0x02, 0x2c, 0x0c, 0x01,
	0x07, 0xd8, 0x37, 0xf1, 0xc6, 0x47, 0x0b, 0x2a, 0x4f, 0x55, 0x83, 0x2d, 0x2c, 0x31, 0x5a, 0x84,
	0xff, 0x04, 0x0f, 0xa9, 0x17, 0x90, 0x9a, 0xb5, 0x64, 0xad, 0x56, 0x36, 0xc7, 0x7f, 0x7e, 0x59,
	0x2c, 0xf6, 0x0e, 0xdd, 0x71, 0x15, 0xde, 0x26, 0xe8, 0x1e, 0x8c, 0x11, 0x2c, 0x71, 0xad, 0xb8,
	0x54, 0x5a, 0xad, 0x6e, 0xd4, 0x1c, 0x82, 0xb9, 0x93, 0x95, 0x3b, 0xea, 0xcf, 0x73, 0x26, 0x45,
	0xec, 0xea, 0xac, 0xfa, 0x0e, 0x54, 0xb2, 0x10, 0x9a, 0x81, 0xd2, 0x21, 0x8d, 0x75, 0xdf, 0xb2,
	0xab, 0x96, 0x68, 0x05, 0xca, 0xc7, 0x38, 0x3c, 0xa2, 0xb5, 0xe2, 0x92, 0xb5, 0x5a, 0xdd, 0x98,
	0x75, 0x8c, 0xba, 0x8b, 0x86, 0xae, 0xc1, 0x1f, 0x15, 0x1f, 0x5a, 0x8d, 0x0e, 0xc0, 0x1e, 0x15,
	0xc7, 0x54, 0x68, 0xa1, 0x0e, 0x4c, 0x05, 0x84, 0x32, 0x19, 0xb4, 0x83, 0x16, 0x96, 0x01, 0x67,
	0x23, 0x7a, 0x47, 0x50, 0x74, 0x07, 0x66, 0x23, 0x5d, 0xed, 0x45, 0x12, 0x0b, 0xe9, 0xc9, 0xa0,
	0x6b, 0x68, 0x4b, 0xee, 0xb4, 0x01, 0xf6, 0x54, 0x7c, 0x3f, 0xe8, 0xd2, 0xc6, 0x5b, 0x0b, 0xe6,
	0xb5, 0x04, 0x17, 0xb3, 0xc3, 0x80, 0xf9, 0xfb, 0x71, 0x8f, 0x6e, 0xb3, 0x36, 0x8f, 0xd0, 0x1a,
	0x8c, 0xc9, 0xb8, 0x47, 0x35, 0xd7, 0xd4, 0x88, 0x5e, 0x95, 0x95, 0xd1, 0xeb, 0x34, 0xf4, 0x18,
	0x40, 0xfd, 0xf7, 0x02, 0x55, 0x9c, 0x1c, 0xd2, 0x1e, 0x2a, 0x4a, 0x18, 0x9c, 0x8c, 0xc2, 0xad,
	0xc8, 0x74, 0xd9, 0x10, 0x30, 0x9b, 0x4f, 0x32, 0x12, 0xee, 0xc2, 0xa4, 0x30, 0x7b, 0x2f, 0x60,
	0x84, 0x9e, 0x8c, 0x9c, 0x7b, 0x42, 0xa4, 0xc9, 0x84, 0x9e, 0xa0, 0x75, 0x28, 0xe7, 0xb9, 0xeb,
	0x97, 0x72, 0x1b, 0x5e, 0x93, 0xd8, 0x88, 0x60, 0x26, 0x0f, 0xba, 0x3c, 0xa4, 0x68, 0x1d, 0x66,
	0x52, 0x4a, 0x3d, 0x1c, 0xe9, 0x2b, 0xe6, 0x6e, 0x5b, 0x5c, 0xa4, 0xbf, 0xa4, 0xb1, 0xba, 0x27,
	0xd5, 0x2e, 0xa1, 0xbd, 0xfe, 0x47, 0x5a, 0x57, 0xa7, 0x35, 0x3e, 0x58, 0x30, 0xa5, 0xb1, 0x17,
	0x81, 0xdf, 0x91, 0xbb, 0xdc, 0x8f, 0xd0, 0x0a, 0x54, 0xdb, 0x6a, 0x73, 0xe9, 0x21, 0x41, 0x43,
	0xe6, 0x88, 0xcb, 0x30, 0x6d, 0x12, 0x09, 0x8e, 0xbd, 0x03, 0xea, 0x07, 0x2c, 0x79, 0xd6, 0x49,
	0x1d, 0xde, 0xc2, 0xf1, 0xa6, 0x0a, 0xa2, 0x07, 0x60, 0xaa, 0xbc, 0x90, 0xfb, 0x51, 0xad, 0xa4,
	0xc7, 0x77, 0x7e, 0x48, 0x58, 0x4a, 0xee, 0x56, 0xda, 0xa9, 0x8c, 0xc6, 0xe7, 0x21, 0x65, 0x6a,
	0x3a, 0xfe, 0x6e, 0x91, 0x57, 0x30, 0x1d, 0xe2, 0x48, 0x7a, 0x86, 0x2e, 0x19, 0x34, 0x45, 0xb7,
	0x7c, 0xe1, 0x96, 0xac, 0x9d, 0xb3, 0x8b, 0x23, 0x99, 0xed, 0x8c, 0x77, 0x26, 0xc3, 0x7c, 0xac,
	0xfe, 0x04, 0xd0, 0xef, 0x49, 0x97, 0xb8, 0x69, 0x2e, 0xef, 0xa6, 0x52, 0xde, 0x3a, 0x47, 0xf0,
	0x7f, 0x62, 0xa9, 0xd8, 0xa5, 0x6f, 0xb0, 0x20, 0xe6, 0xea, 0xae, 0x38, 0xcd, 0xcd, 0xec, 0x51,
	0xd5, 0x61, 0x6e, 0x0c, 0xa5, 0xef, 0x51, 0x46, 0x4c, 0x6b, 0xa5, 0x30, 0x79, 0xd6, 0x13, 0x58,
	0x48, 0x40, 0x1c, 0x71, 0xf6, 0x2f, 0x99, 0xdf, 0x59, 0x50, 0x37, 0xc3, 0xc6, 0x43, 0x9a, 0x0c,
	0xdc, 0xb3, 0x0e, 0x66, 0xbe, 0x76, 0x16, 0xba, 0x0d, 0x13, 0x42, 0x97, 0xe4, 0xa6, 0x6b, 0x2c,
	0xe3, 0xac, 0x8a, 0x9c, 0xd2, 0x5b, 0x00, 0x99, 0xdd, 0x88, 0xbe, 0xd9, 0xb2, 0x5b, 0x49, 0x3d,
	0x46, 0xd0, 0x22, 0x54, 0x5b, 0xba, 0xaf, 0x79, 0xe7, 0x92, 0xbe, 0x79, 0x30, 0x21, 0xfd, 0x2d,
	0xc1, 0xa3, 0x1e, 0x56, 0x4d, 0xaf, 0xe4, 0x61, 0x45, 0x21, 0x28, 0x96, 0x34, 0xff, 0xcd, 0x02,
	0x13, 0x52, 0x14, 0x9b, 0x3b, 0xe7, 0xdf, 0xec, 0xc2, 0xa7, 0xbe, 0x6d, 0x9d, 0xf6, 0x6d, 0xeb,
	0xac, 0x6f, 0x5b, 0x5f, 0xfb, 0xb6, 0xf5, 0xbd, 0x6f, 0x17, 0x7e, 0xf4, 0x6d, 0xeb, 0xfd, 0xc0,
	0x2e, 0x9c, 0x0e, 0x6c, 0xeb, 0x6c, 0x60, 0x17, 0xce, 0x07, 0x76, 0xe1, 0xf5, 0xcd, 0x16, 0x0f,
	0xd8, 0x9a, 0xf9, 0xe4, 0x35, 0x5b, 0xbc, 0xdb, 0xe5, 0xac, 0x99, 0xfd, 0xfe, 0x1c, 0x8c, 0xeb,
	0xe5, 0xfd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x78, 0xad, 0x91, 0x97, 0x93, 0x06, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaData.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolServerData.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRankingTypeInfos.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRankingInfos.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRankingRole.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaFightLogs.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaFightTime.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaDayRewardIndex.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaSeasonRewardIndex.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRoleRankingChangeInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolArenaRankingIndex.Get().(proto.Message)
	})
}

var poolArenaData = &sync.Pool{New: func() interface{} { return &ArenaData{} }}

func (m *ArenaData) ReleasePool() { m.Reset(); poolArenaData.Put(m); m = nil }

var poolServerData = &sync.Pool{New: func() interface{} { return &ServerData{} }}

func (m *ServerData) ReleasePool() { m.Reset(); poolServerData.Put(m); m = nil }

var poolArenaRankingTypeInfos = &sync.Pool{New: func() interface{} { return &ArenaRankingTypeInfos{} }}

func (m *ArenaRankingTypeInfos) ReleasePool() { m.Reset(); poolArenaRankingTypeInfos.Put(m); m = nil }

var poolArenaRankingInfos = &sync.Pool{New: func() interface{} { return &ArenaRankingInfos{} }}

func (m *ArenaRankingInfos) ReleasePool() { m.Reset(); poolArenaRankingInfos.Put(m); m = nil }

var poolArenaRankingRole = &sync.Pool{New: func() interface{} { return &ArenaRankingRole{} }}

func (m *ArenaRankingRole) ReleasePool() { m.Reset(); poolArenaRankingRole.Put(m); m = nil }

var poolArenaFightLogs = &sync.Pool{New: func() interface{} { return &ArenaFightLogs{} }}

func (m *ArenaFightLogs) ReleasePool() { m.Reset(); poolArenaFightLogs.Put(m); m = nil }

var poolArenaFightTime = &sync.Pool{New: func() interface{} { return &ArenaFightTime{} }}

func (m *ArenaFightTime) ReleasePool() { m.Reset(); poolArenaFightTime.Put(m); m = nil }

var poolArenaDayRewardIndex = &sync.Pool{New: func() interface{} { return &ArenaDayRewardIndex{} }}

func (m *ArenaDayRewardIndex) ReleasePool() { m.Reset(); poolArenaDayRewardIndex.Put(m); m = nil }

var poolArenaSeasonRewardIndex = &sync.Pool{New: func() interface{} { return &ArenaSeasonRewardIndex{} }}

func (m *ArenaSeasonRewardIndex) ReleasePool() { m.Reset(); poolArenaSeasonRewardIndex.Put(m); m = nil }

var poolArenaRoleRankingChangeInfo = &sync.Pool{New: func() interface{} { return &ArenaRoleRankingChangeInfo{} }}

func (m *ArenaRoleRankingChangeInfo) ReleasePool() {
	m.Reset()
	poolArenaRoleRankingChangeInfo.Put(m)
	m = nil
}

var poolArenaRankingIndex = &sync.Pool{New: func() interface{} { return &ArenaRankingIndex{} }}

func (m *ArenaRankingIndex) ReleasePool() { m.Reset(); poolArenaRankingIndex.Put(m); m = nil }

func (m *ArenaData) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *ArenaData) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *ArenaData) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaData) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaData) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ServerData) PK() string {
	if m == nil {
		return ""
	}
	return m.Identification
}

func (m *ServerData) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Identification...)
}

func (m *ServerData) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ServerData) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ServerData) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ArenaRankingTypeInfos) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.Type), 10)
}

func (m *ArenaRankingTypeInfos) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.Type), 10)
}

func (m *ArenaRankingTypeInfos) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaRankingTypeInfos) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaRankingTypeInfos) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ArenaRankingInfos) PK() string {
	if m == nil {
		return ""
	}
	return m.RankingIndex
}

func (m *ArenaRankingInfos) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RankingIndex...)
}

func (m *ArenaRankingInfos) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaRankingInfos) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaRankingInfos) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ArenaRankingRole) PK() string {
	if m == nil {
		return ""
	}
	return m.RankingRoleKey
}

func (m *ArenaRankingRole) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RankingRoleKey...)
}

func (m *ArenaRankingRole) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaRankingRole) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaRankingRole) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ArenaFightLogs) PK() string {
	if m == nil {
		return ""
	}
	return m.FightIndex
}

func (m *ArenaFightLogs) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.FightIndex...)
}

func (m *ArenaFightLogs) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaFightLogs) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaFightLogs) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ArenaFightTime) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *ArenaFightTime) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *ArenaFightTime) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaFightTime) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaFightTime) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ArenaDayRewardIndex) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.Type), 10)
}

func (m *ArenaDayRewardIndex) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.Type), 10)
}

func (m *ArenaDayRewardIndex) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaDayRewardIndex) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaDayRewardIndex) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ArenaSeasonRewardIndex) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.Type), 10)
}

func (m *ArenaSeasonRewardIndex) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.Type), 10)
}

func (m *ArenaSeasonRewardIndex) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaSeasonRewardIndex) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaSeasonRewardIndex) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ArenaRoleRankingChangeInfo) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatUint(uint64(m.RewardIndex), 10)
}

func (m *ArenaRoleRankingChangeInfo) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendUint(d, uint64(m.RewardIndex), 10)
}

func (m *ArenaRoleRankingChangeInfo) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaRoleRankingChangeInfo) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaRoleRankingChangeInfo) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ArenaRankingIndex) PK() string {
	if m == nil {
		return ""
	}
	return m.RankingIndex
}

func (m *ArenaRankingIndex) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RankingIndex...)
}

func (m *ArenaRankingIndex) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ArenaRankingIndex) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ArenaRankingIndex) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *ArenaData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaData)
	if !ok {
		that2, ok := that.(ArenaData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *ServerData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerData)
	if !ok {
		that2, ok := that.(ServerData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Identification != that1.Identification {
		return false
	}
	if this.ServerStartTime != that1.ServerStartTime {
		return false
	}
	return true
}
func (this *ArenaRankingTypeInfos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRankingTypeInfos)
	if !ok {
		that2, ok := that.(ArenaRankingTypeInfos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.TypeInfos.Equal(that1.TypeInfos) {
		return false
	}
	return true
}
func (this *ArenaRankingInfos) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRankingInfos)
	if !ok {
		that2, ok := that.(ArenaRankingInfos)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if !this.Infos.Equal(that1.Infos) {
		return false
	}
	return true
}
func (this *ArenaRankingRole) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRankingRole)
	if !ok {
		that2, ok := that.(ArenaRankingRole)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankingRoleKey != that1.RankingRoleKey {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *ArenaFightLogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaFightLogs)
	if !ok {
		that2, ok := that.(ArenaFightLogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FightIndex != that1.FightIndex {
		return false
	}
	if this.FightDayBegin != that1.FightDayBegin {
		return false
	}
	if len(this.FightLogs) != len(that1.FightLogs) {
		return false
	}
	for i := range this.FightLogs {
		if !this.FightLogs[i].Equal(that1.FightLogs[i]) {
			return false
		}
	}
	return true
}
func (this *ArenaFightTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaFightTime)
	if !ok {
		that2, ok := that.(ArenaFightTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.LastFightTime) != len(that1.LastFightTime) {
		return false
	}
	for i := range this.LastFightTime {
		if this.LastFightTime[i] != that1.LastFightTime[i] {
			return false
		}
	}
	return true
}
func (this *ArenaDayRewardIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaDayRewardIndex)
	if !ok {
		that2, ok := that.(ArenaDayRewardIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *ArenaSeasonRewardIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaSeasonRewardIndex)
	if !ok {
		that2, ok := that.(ArenaSeasonRewardIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *ArenaRoleRankingChangeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRoleRankingChangeInfo)
	if !ok {
		that2, ok := that.(ArenaRoleRankingChangeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardIndex != that1.RewardIndex {
		return false
	}
	if this.RankingId != that1.RankingId {
		return false
	}
	if this.ChangeTime != that1.ChangeTime {
		return false
	}
	return true
}
func (this *ArenaRankingIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArenaRankingIndex)
	if !ok {
		that2, ok := that.(ArenaRankingIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankingIndex != that1.RankingIndex {
		return false
	}
	if this.CreateTime != that1.CreateTime {
		return false
	}
	return true
}
func (m *ArenaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintArena(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintArena(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintArena(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerStartTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.ServerStartTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Identification) > 0 {
		i -= len(m.Identification)
		copy(dAtA[i:], m.Identification)
		i = encodeVarintArena(dAtA, i, uint64(len(m.Identification)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRankingTypeInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRankingTypeInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRankingTypeInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeInfos != nil {
		{
			size, err := m.TypeInfos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRankingInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRankingInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRankingInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Infos != nil {
		{
			size, err := m.Infos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRankingRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRankingRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRankingRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArena(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RankingRoleKey) > 0 {
		i -= len(m.RankingRoleKey)
		copy(dAtA[i:], m.RankingRoleKey)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingRoleKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaFightLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaFightLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaFightLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FightLogs) > 0 {
		for iNdEx := len(m.FightLogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FightLogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.FightDayBegin != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.FightDayBegin))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FightIndex) > 0 {
		i -= len(m.FightIndex)
		copy(dAtA[i:], m.FightIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.FightIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaFightTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaFightTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaFightTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastFightTime) > 0 {
		for k := range m.LastFightTime {
			v := m.LastFightTime[k]
			baseI := i
			i = encodeVarintArena(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintArena(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintArena(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArenaDayRewardIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaDayRewardIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaDayRewardIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaSeasonRewardIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaSeasonRewardIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaSeasonRewardIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArena(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRoleRankingChangeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRoleRankingChangeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRoleRankingChangeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChangeTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.ChangeTime))
		i--
		dAtA[i] = 0x18
	}
	if m.RankingId != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RankingId))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardIndex != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.RewardIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArenaRankingIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRankingIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArenaRankingIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateTime != 0 {
		i = encodeVarintArena(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RankingIndex) > 0 {
		i -= len(m.RankingIndex)
		copy(dAtA[i:], m.RankingIndex)
		i = encodeVarintArena(dAtA, i, uint64(len(m.RankingIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintArena(dAtA []byte, offset int, v uint64) int {
	offset -= sovArena(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *ArenaData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	if m.Data == nil {
		w.RawString("null")
	} else if len(m.Data) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlData := len(m.Data)
		for k, v := range m.Data {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlData--
			if mlData != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ServerData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Identification != "" {
		w.RawByte('"')
		w.RawString("identification")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Identification)
		needWriteComma = true
	}
	if m.ServerStartTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_start_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerStartTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRankingTypeInfos) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("type_infos")
	w.RawByte('"')
	w.RawByte(':')
	m.TypeInfos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRankingInfos) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankingIndex != "" {
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("infos")
	w.RawByte('"')
	w.RawByte(':')
	m.Infos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRankingRole) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankingRoleKey != "" {
		w.RawByte('"')
		w.RawString("ranking_role_key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingRoleKey)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	m.Info.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaFightLogs) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.FightIndex != "" {
		w.RawByte('"')
		w.RawString("fight_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.FightIndex)
		needWriteComma = true
	}
	if m.FightDayBegin != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("fight_day_begin")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FightDayBegin))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("fight_logs")
	w.RawByte('"')
	w.RawByte(':')
	if m.FightLogs == nil {
		w.RawString("null")
	} else if len(m.FightLogs) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.FightLogs {
			v.JsonBytes(w)
			if i != len(m.FightLogs)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaFightTime) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("last_fight_time")
	w.RawByte('"')
	w.RawByte(':')
	if m.LastFightTime == nil {
		w.RawString("null")
	} else if len(m.LastFightTime) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlLastFightTime := len(m.LastFightTime)
		for k, v := range m.LastFightTime {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlLastFightTime--
			if mlLastFightTime != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaDayRewardIndex) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	if m.Info == nil {
		w.RawString("null")
	} else if len(m.Info) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Info {
			v.JsonBytes(w)
			if i != len(m.Info)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaSeasonRewardIndex) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Type != 0 {
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	if m.Info == nil {
		w.RawString("null")
	} else if len(m.Info) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Info {
			v.JsonBytes(w)
			if i != len(m.Info)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRoleRankingChangeInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RewardIndex != 0 {
		w.RawByte('"')
		w.RawString("reward_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Uint64(uint64(m.RewardIndex))
		needWriteComma = true
	}
	if m.RankingId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ranking_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RankingId))
		needWriteComma = true
	}
	if m.ChangeTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("change_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChangeTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaRankingIndex) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankingIndex != "" {
		w.RawByte('"')
		w.RawString("ranking_index")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankingIndex)
		needWriteComma = true
	}
	if m.CreateTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("create_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreateTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ArenaData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaData) GoString() string {
	return m.String()
}

func (m *ServerData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ServerData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ServerData) GoString() string {
	return m.String()
}

func (m *ArenaRankingTypeInfos) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRankingTypeInfos) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRankingTypeInfos) GoString() string {
	return m.String()
}

func (m *ArenaRankingInfos) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRankingInfos) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRankingInfos) GoString() string {
	return m.String()
}

func (m *ArenaRankingRole) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRankingRole) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRankingRole) GoString() string {
	return m.String()
}

func (m *ArenaFightLogs) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaFightLogs) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaFightLogs) GoString() string {
	return m.String()
}

func (m *ArenaFightTime) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaFightTime) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaFightTime) GoString() string {
	return m.String()
}

func (m *ArenaDayRewardIndex) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaDayRewardIndex) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaDayRewardIndex) GoString() string {
	return m.String()
}

func (m *ArenaSeasonRewardIndex) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaSeasonRewardIndex) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaSeasonRewardIndex) GoString() string {
	return m.String()
}

func (m *ArenaRoleRankingChangeInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRoleRankingChangeInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRoleRankingChangeInfo) GoString() string {
	return m.String()
}

func (m *ArenaRankingIndex) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ArenaRankingIndex) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ArenaRankingIndex) GoString() string {
	return m.String()
}

func (m *ArenaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovArena(uint64(l))
			}
			mapEntrySize := 1 + sovArena(uint64(k)) + l
			n += mapEntrySize + 1 + sovArena(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ServerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identification)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.ServerStartTime != 0 {
		n += 1 + sovArena(uint64(m.ServerStartTime))
	}
	return n
}

func (m *ArenaRankingTypeInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if m.TypeInfos != nil {
		l = m.TypeInfos.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRankingInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.Infos != nil {
		l = m.Infos.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaRankingRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankingRoleKey)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *ArenaFightLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FightIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.FightDayBegin != 0 {
		n += 1 + sovArena(uint64(m.FightDayBegin))
	}
	if len(m.FightLogs) > 0 {
		for _, e := range m.FightLogs {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *ArenaFightTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if len(m.LastFightTime) > 0 {
		for k, v := range m.LastFightTime {
			_ = k
			_ = v
			mapEntrySize := 1 + sovArena(uint64(k)) + 1 + sovArena(uint64(v))
			n += mapEntrySize + 1 + sovArena(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ArenaDayRewardIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *ArenaSeasonRewardIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovArena(uint64(m.Type))
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *ArenaRoleRankingChangeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardIndex != 0 {
		n += 1 + sovArena(uint64(m.RewardIndex))
	}
	if m.RankingId != 0 {
		n += 1 + sovArena(uint64(m.RankingId))
	}
	if m.ChangeTime != 0 {
		n += 1 + sovArena(uint64(m.ChangeTime))
	}
	return n
}

func (m *ArenaRankingIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankingIndex)
	if l > 0 {
		n += 1 + l + sovArena(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovArena(uint64(m.CreateTime))
	}
	return n
}

func sovArena(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArena(x uint64) (n int) {
	return sovArena(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArenaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int32]*models.ArenaData)
			}
			var mapkey int32
			var mapvalue *models.ArenaData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowArena
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArena
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArena
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthArena
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthArena
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.ArenaData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipArena(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthArena
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerStartTime", wireType)
			}
			m.ServerStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerStartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRankingTypeInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRankingTypeInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRankingTypeInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeInfos == nil {
				m.TypeInfos = &models.ArenaRanking_TypeInfos{}
			}
			if err := m.TypeInfos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRankingInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRankingInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRankingInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infos == nil {
				m.Infos = &models.ArenaRanking_Infos{}
			}
			if err := m.Infos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRankingRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRankingRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRankingRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingRoleKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingRoleKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &models.ArenaRanking_Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaFightLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaFightLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaFightLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FightIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightDayBegin", wireType)
			}
			m.FightDayBegin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightDayBegin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FightLogs = append(m.FightLogs, &models.ArenaFightLog{})
			if err := m.FightLogs[len(m.FightLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaFightTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaFightTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaFightTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFightTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFightTime == nil {
				m.LastFightTime = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowArena
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArena
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArena
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipArena(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthArena
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastFightTime[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaDayRewardIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaDayRewardIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaDayRewardIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &models.ArenaSendRewardTime{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaSeasonRewardIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaSeasonRewardIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaSeasonRewardIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.ArenaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &models.ArenaSendRewardTime{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRoleRankingChangeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRoleRankingChangeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRoleRankingChangeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIndex", wireType)
			}
			m.RewardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingId", wireType)
			}
			m.RankingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankingId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeTime", wireType)
			}
			m.ChangeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRankingIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRankingIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRankingIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArena
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankingIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArena(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArena
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArena
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArena
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArena
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArena        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArena          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArena = fmt.Errorf("proto: unexpected end of group")
)
