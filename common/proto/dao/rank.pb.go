// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/rank.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Rank struct {
	RankId    string   `protobuf:"bytes,1,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty" pk`
	RecordCnt int64    `protobuf:"zigzag64,2,opt,name=record_cnt,json=recordCnt,proto3" json:"record_cnt,omitempty"`
	Shards    []string `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty"`
}

func (m *Rank) Reset()      { *m = Rank{} }
func (*Rank) ProtoMessage() {}
func (*Rank) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce32bcf8bf0e5aa6, []int{0}
}
func (m *Rank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rank.Merge(m, src)
}
func (m *Rank) XXX_Size() int {
	return m.Size()
}
func (m *Rank) XXX_DiscardUnknown() {
	xxx_messageInfo_Rank.DiscardUnknown(m)
}

var xxx_messageInfo_Rank proto.InternalMessageInfo

func (m *Rank) GetRankId() string {
	if m != nil {
		return m.RankId
	}
	return ""
}

func (m *Rank) GetRecordCnt() int64 {
	if m != nil {
		return m.RecordCnt
	}
	return 0
}

func (m *Rank) GetShards() []string {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (*Rank) XXX_MessageName() string {
	return "dao.Rank"
}

type GenRankRecord struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" pk`
	GenAt  int64  `protobuf:"varint,2,opt,name=gen_at,json=genAt,proto3" json:"gen_at,omitempty"`
	GenNum int64  `protobuf:"varint,3,opt,name=gen_num,json=genNum,proto3" json:"gen_num,omitempty"`
}

func (m *GenRankRecord) Reset()      { *m = GenRankRecord{} }
func (*GenRankRecord) ProtoMessage() {}
func (*GenRankRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce32bcf8bf0e5aa6, []int{1}
}
func (m *GenRankRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenRankRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenRankRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenRankRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenRankRecord.Merge(m, src)
}
func (m *GenRankRecord) XXX_Size() int {
	return m.Size()
}
func (m *GenRankRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_GenRankRecord.DiscardUnknown(m)
}

var xxx_messageInfo_GenRankRecord proto.InternalMessageInfo

func (m *GenRankRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GenRankRecord) GetGenAt() int64 {
	if m != nil {
		return m.GenAt
	}
	return 0
}

func (m *GenRankRecord) GetGenNum() int64 {
	if m != nil {
		return m.GenNum
	}
	return 0
}

func (*GenRankRecord) XXX_MessageName() string {
	return "dao.GenRankRecord"
}
func init() {
	proto.RegisterType((*Rank)(nil), "dao.Rank")
	proto.RegisterType((*GenRankRecord)(nil), "dao.GenRankRecord")
}

func init() { proto.RegisterFile("proto/dao/rank.proto", fileDescriptor_ce32bcf8bf0e5aa6) }

var fileDescriptor_ce32bcf8bf0e5aa6 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xe4, 0xff, 0x53, 0xc5, 0x12, 0x8b, 0x55, 0x4a, 0x84, 0xe0, 0x36, 0xea, 0x94,
	0x05, 0x32, 0xf0, 0x04, 0x94, 0x01, 0xc1, 0xc0, 0xe0, 0x05, 0x89, 0x81, 0xc8, 0xc4, 0x56, 0x88,
	0xa2, 0xf8, 0x56, 0x4e, 0xca, 0x73, 0xf0, 0x18, 0x3c, 0x4a, 0xc7, 0x8e, 0x9d, 0x10, 0x38, 0x0b,
	0x23, 0xe2, 0x09, 0x90, 0x13, 0xc4, 0xc2, 0x76, 0xce, 0x77, 0x8e, 0x7d, 0xa4, 0x4b, 0xa7, 0x2b,
	0x83, 0x1d, 0x66, 0x52, 0x60, 0x66, 0x84, 0xae, 0x4f, 0x07, 0xcb, 0x02, 0x29, 0xf0, 0x70, 0x5a,
	0x62, 0x89, 0x63, 0xec, 0xd4, 0x18, 0x2d, 0xee, 0xe9, 0x3f, 0x2e, 0x74, 0xcd, 0xe6, 0x74, 0xe2,
	0x1e, 0xe4, 0x95, 0x8c, 0x49, 0x42, 0xd2, 0x68, 0x19, 0x7e, 0xbd, 0xce, 0xfd, 0x55, 0xcd, 0x43,
	0x87, 0xaf, 0x24, 0x3b, 0xa6, 0xd4, 0xa8, 0x02, 0x8d, 0xcc, 0x0b, 0xdd, 0xc5, 0x7e, 0x42, 0x52,
	0xc6, 0xa3, 0x91, 0x5c, 0xe8, 0x8e, 0xcd, 0x68, 0xd8, 0x3e, 0x0a, 0x23, 0xdb, 0x38, 0x48, 0x82,
	0x34, 0xe2, 0x3f, 0x6e, 0x71, 0x4b, 0xf7, 0x2e, 0x95, 0x76, 0x13, 0x7c, 0xe8, 0xb2, 0x19, 0xf5,
	0xff, 0x6c, 0xf8, 0x95, 0x64, 0xfb, 0x34, 0x2c, 0x95, 0xce, 0xc5, 0xf8, 0x77, 0xc0, 0xff, 0x97,
	0x4a, 0x9f, 0x77, 0xec, 0x80, 0x4e, 0x1c, 0xd6, 0xeb, 0x26, 0x0e, 0x06, 0xee, 0x5a, 0x37, 0xeb,
	0x66, 0x79, 0xbd, 0x7b, 0x07, 0xef, 0xc5, 0x02, 0xd9, 0x58, 0x20, 0x5b, 0x0b, 0xe4, 0xcd, 0x02,
	0xf9, 0xb0, 0xe0, 0x7d, 0x5a, 0x20, 0xcf, 0x3d, 0x78, 0x9b, 0x1e, 0xc8, 0xb6, 0x07, 0x6f, 0xd7,
	0x83, 0x77, 0x77, 0x54, 0x60, 0xa5, 0x4f, 0x5a, 0x65, 0x9e, 0x94, 0xc9, 0x0a, 0x6c, 0x1a, 0xd4,
	0xd9, 0xef, 0xa9, 0x1e, 0xc2, 0x41, 0x9e, 0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x4c, 0x33,
	0xc9, 0x3e, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRank.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGenRankRecord.Get().(proto.Message)
	})
}

var poolRank = &sync.Pool{New: func() interface{} { return &Rank{} }}

func (m *Rank) ReleasePool() { m.Reset(); poolRank.Put(m); m = nil }

var poolGenRankRecord = &sync.Pool{New: func() interface{} { return &GenRankRecord{} }}

func (m *GenRankRecord) ReleasePool() { m.Reset(); poolGenRankRecord.Put(m); m = nil }

func (m *Rank) PK() string {
	if m == nil {
		return ""
	}
	return m.RankId
}

func (m *Rank) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RankId...)
}

func (m *Rank) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Rank) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Rank) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GenRankRecord) PK() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *GenRankRecord) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Id...)
}

func (m *GenRankRecord) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GenRankRecord) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GenRankRecord) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Rank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rank)
	if !ok {
		that2, ok := that.(Rank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RankId != that1.RankId {
		return false
	}
	if this.RecordCnt != that1.RecordCnt {
		return false
	}
	if len(this.Shards) != len(that1.Shards) {
		return false
	}
	for i := range this.Shards {
		if this.Shards[i] != that1.Shards[i] {
			return false
		}
	}
	return true
}
func (this *GenRankRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenRankRecord)
	if !ok {
		that2, ok := that.(GenRankRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.GenAt != that1.GenAt {
		return false
	}
	if this.GenNum != that1.GenNum {
		return false
	}
	return true
}
func (m *Rank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for iNdEx := len(m.Shards) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Shards[iNdEx])
			copy(dAtA[i:], m.Shards[iNdEx])
			i = encodeVarintRank(dAtA, i, uint64(len(m.Shards[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.RecordCnt != 0 {
		i = encodeVarintRank(dAtA, i, uint64((uint64(m.RecordCnt)<<1)^uint64((m.RecordCnt>>63))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RankId) > 0 {
		i -= len(m.RankId)
		copy(dAtA[i:], m.RankId)
		i = encodeVarintRank(dAtA, i, uint64(len(m.RankId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenRankRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenRankRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenRankRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GenNum != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.GenNum))
		i--
		dAtA[i] = 0x18
	}
	if m.GenAt != 0 {
		i = encodeVarintRank(dAtA, i, uint64(m.GenAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRank(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Rank) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RankId != "" {
		w.RawByte('"')
		w.RawString("rank_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RankId)
		needWriteComma = true
	}
	if m.RecordCnt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("record_cnt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RecordCnt))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("shards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Shards == nil {
		w.RawString("null")
	} else if len(m.Shards) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Shards {
			w.String(v)
			if i != len(m.Shards)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GenRankRecord) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.GenAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("gen_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GenAt))
		needWriteComma = true
	}
	if m.GenNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("gen_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GenNum))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Rank) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Rank) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Rank) GoString() string {
	return m.String()
}

func (m *GenRankRecord) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GenRankRecord) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GenRankRecord) GoString() string {
	return m.String()
}

func (m *Rank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RankId)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.RecordCnt != 0 {
		n += 1 + sozRank(uint64(m.RecordCnt))
	}
	if len(m.Shards) > 0 {
		for _, s := range m.Shards {
			l = len(s)
			n += 1 + l + sovRank(uint64(l))
		}
	}
	return n
}

func (m *GenRankRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.GenAt != 0 {
		n += 1 + sovRank(uint64(m.GenAt))
	}
	if m.GenNum != 0 {
		n += 1 + sovRank(uint64(m.GenNum))
	}
	return n
}

func sovRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRank(x uint64) (n int) {
	return sovRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordCnt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.RecordCnt = int64(v)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenRankRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenRankRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenRankRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenAt", wireType)
			}
			m.GenAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenNum", wireType)
			}
			m.GenNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRank = fmt.Errorf("proto: unexpected end of group")
)
