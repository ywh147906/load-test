// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/loop_task.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoopTask struct {
	RoleId string             `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Tasks  []*models.LoopTask `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Lock   map[int64]int64    `protobuf:"bytes,3,rep,name=lock,proto3" json:"lock,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *LoopTask) Reset()      { *m = LoopTask{} }
func (*LoopTask) ProtoMessage() {}
func (*LoopTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_37ab770d50341ce0, []int{0}
}
func (m *LoopTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoopTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoopTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoopTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoopTask.Merge(m, src)
}
func (m *LoopTask) XXX_Size() int {
	return m.Size()
}
func (m *LoopTask) XXX_DiscardUnknown() {
	xxx_messageInfo_LoopTask.DiscardUnknown(m)
}

var xxx_messageInfo_LoopTask proto.InternalMessageInfo

func (m *LoopTask) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *LoopTask) GetTasks() []*models.LoopTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *LoopTask) GetLock() map[int64]int64 {
	if m != nil {
		return m.Lock
	}
	return nil
}

func (*LoopTask) XXX_MessageName() string {
	return "dao.LoopTask"
}

type TaskStageReward struct {
	RoleId string         `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Daily  map[int64]bool `protobuf:"bytes,2,rep,name=daily,proto3" json:"daily,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Weekly map[int64]bool `protobuf:"bytes,3,rep,name=weekly,proto3" json:"weekly,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *TaskStageReward) Reset()      { *m = TaskStageReward{} }
func (*TaskStageReward) ProtoMessage() {}
func (*TaskStageReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_37ab770d50341ce0, []int{1}
}
func (m *TaskStageReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskStageReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskStageReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskStageReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStageReward.Merge(m, src)
}
func (m *TaskStageReward) XXX_Size() int {
	return m.Size()
}
func (m *TaskStageReward) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStageReward.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStageReward proto.InternalMessageInfo

func (m *TaskStageReward) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *TaskStageReward) GetDaily() map[int64]bool {
	if m != nil {
		return m.Daily
	}
	return nil
}

func (m *TaskStageReward) GetWeekly() map[int64]bool {
	if m != nil {
		return m.Weekly
	}
	return nil
}

func (*TaskStageReward) XXX_MessageName() string {
	return "dao.TaskStageReward"
}

type TaskLogin struct {
	RoleId          string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	DailyNextReset  int64  `protobuf:"varint,2,opt,name=daily_next_reset,json=dailyNextReset,proto3" json:"daily_next_reset,omitempty"`
	DayPass         int64  `protobuf:"varint,3,opt,name=day_pass,json=dayPass,proto3" json:"day_pass,omitempty"`
	WeeklyNextReset int64  `protobuf:"varint,4,opt,name=weekly_next_reset,json=weeklyNextReset,proto3" json:"weekly_next_reset,omitempty"`
}

func (m *TaskLogin) Reset()      { *m = TaskLogin{} }
func (*TaskLogin) ProtoMessage() {}
func (*TaskLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_37ab770d50341ce0, []int{2}
}
func (m *TaskLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskLogin.Merge(m, src)
}
func (m *TaskLogin) XXX_Size() int {
	return m.Size()
}
func (m *TaskLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskLogin.DiscardUnknown(m)
}

var xxx_messageInfo_TaskLogin proto.InternalMessageInfo

func (m *TaskLogin) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *TaskLogin) GetDailyNextReset() int64 {
	if m != nil {
		return m.DailyNextReset
	}
	return 0
}

func (m *TaskLogin) GetDayPass() int64 {
	if m != nil {
		return m.DayPass
	}
	return 0
}

func (m *TaskLogin) GetWeeklyNextReset() int64 {
	if m != nil {
		return m.WeeklyNextReset
	}
	return 0
}

func (*TaskLogin) XXX_MessageName() string {
	return "dao.TaskLogin"
}
func init() {
	proto.RegisterType((*LoopTask)(nil), "dao.LoopTask")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.LoopTask.LockEntry")
	proto.RegisterType((*TaskStageReward)(nil), "dao.TaskStageReward")
	proto.RegisterMapType((map[int64]bool)(nil), "dao.TaskStageReward.DailyEntry")
	proto.RegisterMapType((map[int64]bool)(nil), "dao.TaskStageReward.WeeklyEntry")
	proto.RegisterType((*TaskLogin)(nil), "dao.TaskLogin")
}

func init() { proto.RegisterFile("proto/dao/loop_task.proto", fileDescriptor_37ab770d50341ce0) }

var fileDescriptor_37ab770d50341ce0 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x33, 0xc9, 0xb6, 0xdb, 0xbe, 0x0b, 0x6e, 0x1d, 0x16, 0xcc, 0x86, 0x65, 0x5a, 0x7a,
	0x90, 0xa2, 0x98, 0x80, 0x22, 0x56, 0x8f, 0x8b, 0x1e, 0x94, 0x22, 0x12, 0x05, 0xc1, 0x4b, 0x18,
	0x3b, 0x43, 0x29, 0x49, 0xf3, 0x86, 0x4c, 0xf6, 0x4f, 0xbe, 0x85, 0x47, 0x2f, 0xde, 0xfd, 0x0a,
	0x7e, 0x83, 0x3d, 0xee, 0x71, 0x4f, 0xa2, 0xe9, 0xc5, 0xa3, 0xf8, 0x09, 0x24, 0x33, 0x35, 0xd6,
	0x22, 0x94, 0xbd, 0x4d, 0x9e, 0xe7, 0xf7, 0x3e, 0xf3, 0x3e, 0x03, 0x81, 0xc3, 0x2c, 0xc7, 0x02,
	0x03, 0xc1, 0x31, 0x48, 0x10, 0xb3, 0xa8, 0xe0, 0x2a, 0xf6, 0xb5, 0x46, 0x1d, 0xc1, 0xd1, 0x73,
	0x8d, 0xbf, 0x40, 0x21, 0x13, 0x15, 0xc8, 0xf4, 0x64, 0xa1, 0x8c, 0xed, 0x1d, 0xfd, 0xe3, 0x6c,
	0x0c, 0x7b, 0x07, 0x33, 0x9c, 0xa1, 0x21, 0xea, 0x93, 0x51, 0x87, 0x5f, 0x08, 0x74, 0x26, 0x88,
	0xd9, 0x1b, 0xae, 0x62, 0xda, 0x87, 0xdd, 0x1c, 0x13, 0x19, 0xcd, 0x85, 0x4b, 0x06, 0x64, 0xd4,
	0x3d, 0x6e, 0xff, 0xfa, 0xda, 0xb7, 0xb3, 0x38, 0x6c, 0xd7, 0xf2, 0x73, 0x41, 0x6f, 0x43, 0xab,
	0x4e, 0x54, 0xae, 0x3d, 0x70, 0x46, 0x7b, 0xf7, 0x7b, 0xbe, 0xb9, 0xcb, 0xff, 0x93, 0x10, 0x1a,
	0x9b, 0xde, 0x85, 0x9d, 0x04, 0xa7, 0xb1, 0xeb, 0x68, 0xec, 0x96, 0x2f, 0x38, 0x36, 0x8c, 0x3f,
	0xc1, 0x69, 0xfc, 0x2c, 0x2d, 0xf2, 0x32, 0xd4, 0x90, 0xf7, 0x08, 0xba, 0x8d, 0x44, 0x7b, 0xe0,
	0xc4, 0xb2, 0xd4, 0xd7, 0x3b, 0x61, 0x7d, 0xa4, 0x07, 0xd0, 0x3a, 0xe5, 0xc9, 0x89, 0x74, 0x6d,
	0xad, 0x99, 0x8f, 0x27, 0xf6, 0x98, 0x0c, 0x3f, 0xda, 0xb0, 0x5f, 0x27, 0xbe, 0x2e, 0xf8, 0x4c,
	0x86, 0xf2, 0x8c, 0xe7, 0x62, 0x7b, 0x85, 0x87, 0xd0, 0x12, 0x7c, 0x9e, 0x94, 0xab, 0x0a, 0x7d,
	0xbd, 0xdb, 0x46, 0x8a, 0xff, 0xb4, 0x26, 0xcc, 0x8e, 0x86, 0xa6, 0x63, 0x68, 0x9f, 0x49, 0x19,
	0x27, 0xe5, 0xaa, 0xd3, 0xe0, 0xbf, 0x73, 0x6f, 0x35, 0x62, 0x06, 0x57, 0xbc, 0x37, 0x06, 0xf8,
	0x1b, 0xb7, 0xad, 0x5f, 0x67, 0xad, 0x9f, 0xf7, 0x18, 0xf6, 0xd6, 0x02, 0xaf, 0x33, 0x3a, 0xfc,
	0x44, 0xa0, 0x5b, 0x2f, 0x37, 0xc1, 0xd9, 0x3c, 0xdd, 0xfe, 0x28, 0x23, 0xe8, 0xe9, 0x9a, 0x51,
	0x2a, 0xcf, 0x8b, 0x28, 0x97, 0x4a, 0x16, 0xab, 0xe7, 0xbe, 0xa1, 0xf5, 0x97, 0xf2, 0xbc, 0x08,
	0x6b, 0x95, 0x1e, 0x42, 0x47, 0xf0, 0x32, 0xca, 0xb8, 0x52, 0xae, 0xa3, 0x89, 0x5d, 0xc1, 0xcb,
	0x57, 0x5c, 0x29, 0x7a, 0x07, 0x6e, 0x9a, 0xca, 0xeb, 0x29, 0x3b, 0x9a, 0xd9, 0x37, 0x46, 0x13,
	0x73, 0xfc, 0xe2, 0xea, 0x3b, 0xb3, 0x3e, 0x57, 0x8c, 0x5c, 0x54, 0x8c, 0x5c, 0x56, 0x8c, 0x7c,
	0xab, 0x18, 0xf9, 0x51, 0x31, 0xeb, 0x67, 0xc5, 0xc8, 0x87, 0x25, 0xb3, 0x2e, 0x96, 0x8c, 0x5c,
	0x2e, 0x99, 0x75, 0xb5, 0x64, 0xd6, 0xbb, 0xa3, 0x29, 0xce, 0xd3, 0x7b, 0x4a, 0xe6, 0xa7, 0x32,
	0x0f, 0xa6, 0xb8, 0x58, 0x60, 0x1a, 0x34, 0x7f, 0xc9, 0xfb, 0xb6, 0x3e, 0x3e, 0xf8, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xcf, 0x75, 0xae, 0xca, 0x39, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLoopTask.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTaskStageReward.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTaskLogin.Get().(proto.Message)
	})
}

var poolLoopTask = &sync.Pool{New: func() interface{} { return &LoopTask{} }}

func (m *LoopTask) ReleasePool() { m.Reset(); poolLoopTask.Put(m); m = nil }

var poolTaskStageReward = &sync.Pool{New: func() interface{} { return &TaskStageReward{} }}

func (m *TaskStageReward) ReleasePool() { m.Reset(); poolTaskStageReward.Put(m); m = nil }

var poolTaskLogin = &sync.Pool{New: func() interface{} { return &TaskLogin{} }}

func (m *TaskLogin) ReleasePool() { m.Reset(); poolTaskLogin.Put(m); m = nil }

func (m *LoopTask) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *LoopTask) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *LoopTask) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *LoopTask) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *LoopTask) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *TaskStageReward) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *TaskStageReward) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *TaskStageReward) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *TaskStageReward) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *TaskStageReward) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *TaskLogin) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *TaskLogin) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *TaskLogin) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *TaskLogin) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *TaskLogin) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *LoopTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoopTask)
	if !ok {
		that2, ok := that.(LoopTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	if len(this.Lock) != len(that1.Lock) {
		return false
	}
	for i := range this.Lock {
		if this.Lock[i] != that1.Lock[i] {
			return false
		}
	}
	return true
}
func (this *TaskStageReward) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskStageReward)
	if !ok {
		that2, ok := that.(TaskStageReward)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Daily) != len(that1.Daily) {
		return false
	}
	for i := range this.Daily {
		if this.Daily[i] != that1.Daily[i] {
			return false
		}
	}
	if len(this.Weekly) != len(that1.Weekly) {
		return false
	}
	for i := range this.Weekly {
		if this.Weekly[i] != that1.Weekly[i] {
			return false
		}
	}
	return true
}
func (this *TaskLogin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskLogin)
	if !ok {
		that2, ok := that.(TaskLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.DailyNextReset != that1.DailyNextReset {
		return false
	}
	if this.DayPass != that1.DayPass {
		return false
	}
	if this.WeeklyNextReset != that1.WeeklyNextReset {
		return false
	}
	return true
}
func (m *LoopTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoopTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoopTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lock) > 0 {
		for k := range m.Lock {
			v := m.Lock[k]
			baseI := i
			i = encodeVarintLoopTask(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintLoopTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLoopTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLoopTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintLoopTask(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskStageReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskStageReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskStageReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weekly) > 0 {
		for k := range m.Weekly {
			v := m.Weekly[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintLoopTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLoopTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Daily) > 0 {
		for k := range m.Daily {
			v := m.Daily[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintLoopTask(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLoopTask(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintLoopTask(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WeeklyNextReset != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.WeeklyNextReset))
		i--
		dAtA[i] = 0x20
	}
	if m.DayPass != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.DayPass))
		i--
		dAtA[i] = 0x18
	}
	if m.DailyNextReset != 0 {
		i = encodeVarintLoopTask(dAtA, i, uint64(m.DailyNextReset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintLoopTask(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoopTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoopTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *LoopTask) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("tasks")
	w.RawByte('"')
	w.RawByte(':')
	if m.Tasks == nil {
		w.RawString("null")
	} else if len(m.Tasks) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Tasks {
			v.JsonBytes(w)
			if i != len(m.Tasks)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("lock")
	w.RawByte('"')
	w.RawByte(':')
	if m.Lock == nil {
		w.RawString("null")
	} else if len(m.Lock) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlLock := len(m.Lock)
		for k, v := range m.Lock {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlLock--
			if mlLock != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TaskStageReward) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("daily")
	w.RawByte('"')
	w.RawByte(':')
	if m.Daily == nil {
		w.RawString("null")
	} else if len(m.Daily) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDaily := len(m.Daily)
		for k, v := range m.Daily {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlDaily--
			if mlDaily != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("weekly")
	w.RawByte('"')
	w.RawByte(':')
	if m.Weekly == nil {
		w.RawString("null")
	} else if len(m.Weekly) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlWeekly := len(m.Weekly)
		for k, v := range m.Weekly {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlWeekly--
			if mlWeekly != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TaskLogin) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.DailyNextReset != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("daily_next_reset")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DailyNextReset))
		needWriteComma = true
	}
	if m.DayPass != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("day_pass")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DayPass))
		needWriteComma = true
	}
	if m.WeeklyNextReset != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("weekly_next_reset")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.WeeklyNextReset))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LoopTask) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LoopTask) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LoopTask) GoString() string {
	return m.String()
}

func (m *TaskStageReward) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TaskStageReward) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TaskStageReward) GoString() string {
	return m.String()
}

func (m *TaskLogin) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TaskLogin) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TaskLogin) GoString() string {
	return m.String()
}

func (m *LoopTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovLoopTask(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovLoopTask(uint64(l))
		}
	}
	if len(m.Lock) > 0 {
		for k, v := range m.Lock {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLoopTask(uint64(k)) + 1 + sovLoopTask(uint64(v))
			n += mapEntrySize + 1 + sovLoopTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TaskStageReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovLoopTask(uint64(l))
	}
	if len(m.Daily) > 0 {
		for k, v := range m.Daily {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLoopTask(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovLoopTask(uint64(mapEntrySize))
		}
	}
	if len(m.Weekly) > 0 {
		for k, v := range m.Weekly {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLoopTask(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovLoopTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TaskLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovLoopTask(uint64(l))
	}
	if m.DailyNextReset != 0 {
		n += 1 + sovLoopTask(uint64(m.DailyNextReset))
	}
	if m.DayPass != 0 {
		n += 1 + sovLoopTask(uint64(m.DayPass))
	}
	if m.WeeklyNextReset != 0 {
		n += 1 + sovLoopTask(uint64(m.WeeklyNextReset))
	}
	return n
}

func sovLoopTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoopTask(x uint64) (n int) {
	return sovLoopTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoopTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoopTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoopTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &models.LoopTask{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lock == nil {
				m.Lock = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLoopTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLoopTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLoopTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Lock[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskStageReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskStageReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskStageReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Daily", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Daily == nil {
				m.Daily = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLoopTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLoopTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLoopTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Daily[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weekly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weekly == nil {
				m.Weekly = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLoopTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLoopTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLoopTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLoopTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Weekly[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoopTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoopTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyNextReset", wireType)
			}
			m.DailyNextReset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyNextReset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayPass", wireType)
			}
			m.DayPass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayPass |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeeklyNextReset", wireType)
			}
			m.WeeklyNextReset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeeklyNextReset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLoopTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoopTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoopTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoopTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoopTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoopTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoopTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoopTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoopTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoopTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoopTask = fmt.Errorf("proto: unexpected end of group")
)
