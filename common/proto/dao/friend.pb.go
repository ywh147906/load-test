// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/friend.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecvGiftType int32

const (
	RecvGiftType_neither     RecvGiftType = 0
	RecvGiftType_recv_no_get RecvGiftType = 1
	RecvGiftType_get         RecvGiftType = 2
)

var RecvGiftType_name = map[int32]string{
	0: "neither",
	1: "recv_no_get",
	2: "get",
}

var RecvGiftType_value = map[string]int32{
	"neither":     0,
	"recv_no_get": 1,
	"get":         2,
}

func (RecvGiftType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c7f6a036683ba42, []int{0}
}

type Friend struct {
	RoleId     string                     `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Friends    map[string]*FriendValue    `protobuf:"bytes,2,rep,name=friends,proto3" json:"friends,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Requests   map[string]*RequestValue   `protobuf:"bytes,3,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Blacklist  map[string]*BlackListValue `protobuf:"bytes,4,rep,name=blacklist,proto3" json:"blacklist,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastSendAt int64                      `protobuf:"zigzag64,5,opt,name=last_send_at,json=lastSendAt,proto3" json:"last_send_at,omitempty"`
	TodaySend  int64                      `protobuf:"zigzag64,6,opt,name=today_send,json=todaySend,proto3" json:"today_send,omitempty"`
	LastRecvAt int64                      `protobuf:"zigzag64,7,opt,name=last_recv_at,json=lastRecvAt,proto3" json:"last_recv_at,omitempty"`
	TodayRecv  int64                      `protobuf:"zigzag64,8,opt,name=today_recv,json=todayRecv,proto3" json:"today_recv,omitempty"`
}

func (m *Friend) Reset()      { *m = Friend{} }
func (*Friend) ProtoMessage() {}
func (*Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c7f6a036683ba42, []int{0}
}
func (m *Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend.Merge(m, src)
}
func (m *Friend) XXX_Size() int {
	return m.Size()
}
func (m *Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_Friend proto.InternalMessageInfo

func (m *Friend) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Friend) GetFriends() map[string]*FriendValue {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *Friend) GetRequests() map[string]*RequestValue {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *Friend) GetBlacklist() map[string]*BlackListValue {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

func (m *Friend) GetLastSendAt() int64 {
	if m != nil {
		return m.LastSendAt
	}
	return 0
}

func (m *Friend) GetTodaySend() int64 {
	if m != nil {
		return m.TodaySend
	}
	return 0
}

func (m *Friend) GetLastRecvAt() int64 {
	if m != nil {
		return m.LastRecvAt
	}
	return 0
}

func (m *Friend) GetTodayRecv() int64 {
	if m != nil {
		return m.TodayRecv
	}
	return 0
}

func (*Friend) XXX_MessageName() string {
	return "dao.Friend"
}

type FriendValue struct {
	RoleId   string       `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	CreateAt int64        `protobuf:"zigzag64,2,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	IsRecv   RecvGiftType `protobuf:"varint,3,opt,name=is_recv,json=isRecv,proto3,enum=dao.RecvGiftType" json:"is_recv,omitempty"`
	IsSend   bool         `protobuf:"varint,4,opt,name=is_send,json=isSend,proto3" json:"is_send,omitempty"`
}

func (m *FriendValue) Reset()      { *m = FriendValue{} }
func (*FriendValue) ProtoMessage() {}
func (*FriendValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c7f6a036683ba42, []int{1}
}
func (m *FriendValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendValue.Merge(m, src)
}
func (m *FriendValue) XXX_Size() int {
	return m.Size()
}
func (m *FriendValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendValue.DiscardUnknown(m)
}

var xxx_messageInfo_FriendValue proto.InternalMessageInfo

func (m *FriendValue) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *FriendValue) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *FriendValue) GetIsRecv() RecvGiftType {
	if m != nil {
		return m.IsRecv
	}
	return RecvGiftType_neither
}

func (m *FriendValue) GetIsSend() bool {
	if m != nil {
		return m.IsSend
	}
	return false
}

func (*FriendValue) XXX_MessageName() string {
	return "dao.FriendValue"
}

type RequestValue struct {
	RoleId   string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	CreateAt int64  `protobuf:"zigzag64,2,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (m *RequestValue) Reset()      { *m = RequestValue{} }
func (*RequestValue) ProtoMessage() {}
func (*RequestValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c7f6a036683ba42, []int{2}
}
func (m *RequestValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestValue.Merge(m, src)
}
func (m *RequestValue) XXX_Size() int {
	return m.Size()
}
func (m *RequestValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestValue.DiscardUnknown(m)
}

var xxx_messageInfo_RequestValue proto.InternalMessageInfo

func (m *RequestValue) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RequestValue) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (*RequestValue) XXX_MessageName() string {
	return "dao.RequestValue"
}

type BlackListValue struct {
	RoleId   string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	CreateAt int64  `protobuf:"zigzag64,2,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (m *BlackListValue) Reset()      { *m = BlackListValue{} }
func (*BlackListValue) ProtoMessage() {}
func (*BlackListValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c7f6a036683ba42, []int{3}
}
func (m *BlackListValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlackListValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlackListValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlackListValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlackListValue.Merge(m, src)
}
func (m *BlackListValue) XXX_Size() int {
	return m.Size()
}
func (m *BlackListValue) XXX_DiscardUnknown() {
	xxx_messageInfo_BlackListValue.DiscardUnknown(m)
}

var xxx_messageInfo_BlackListValue proto.InternalMessageInfo

func (m *BlackListValue) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *BlackListValue) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (*BlackListValue) XXX_MessageName() string {
	return "dao.BlackListValue"
}
func init() {
	proto.RegisterEnum("dao.RecvGiftType", RecvGiftType_name, RecvGiftType_value)
	proto.RegisterType((*Friend)(nil), "dao.Friend")
	proto.RegisterMapType((map[string]*BlackListValue)(nil), "dao.Friend.BlacklistEntry")
	proto.RegisterMapType((map[string]*FriendValue)(nil), "dao.Friend.FriendsEntry")
	proto.RegisterMapType((map[string]*RequestValue)(nil), "dao.Friend.RequestsEntry")
	proto.RegisterType((*FriendValue)(nil), "dao.FriendValue")
	proto.RegisterType((*RequestValue)(nil), "dao.RequestValue")
	proto.RegisterType((*BlackListValue)(nil), "dao.BlackListValue")
}

func init() { proto.RegisterFile("proto/dao/friend.proto", fileDescriptor_0c7f6a036683ba42) }

var fileDescriptor_0c7f6a036683ba42 = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x76, 0x6b, 0x27, 0x2f, 0xa1, 0x84, 0x03, 0x81, 0x09, 0x70, 0xb5, 0x32, 0x80,
	0xa9, 0x44, 0x22, 0x05, 0x55, 0xaa, 0xd8, 0x1a, 0x41, 0x11, 0xa8, 0x42, 0xc2, 0x20, 0x06, 0x96,
	0xc8, 0xb5, 0xaf, 0xc1, 0x4a, 0xea, 0x0b, 0xbe, 0xab, 0xa5, 0x7c, 0x03, 0x46, 0x3e, 0x06, 0x5f,
	0x83, 0xad, 0x63, 0xc7, 0x4e, 0x08, 0x9c, 0x85, 0x11, 0xf1, 0x09, 0xd0, 0xdd, 0xa5, 0x8e, 0x43,
	0x3b, 0x75, 0xca, 0xe5, 0xbd, 0xff, 0xff, 0x97, 0xf7, 0xfe, 0x77, 0x0a, 0xdc, 0x9e, 0x66, 0x4c,
	0xb0, 0x5e, 0x1c, 0xb2, 0xde, 0x61, 0x96, 0xd0, 0x34, 0xee, 0xaa, 0x02, 0xb6, 0xe2, 0x90, 0xb5,
	0x6f, 0x8d, 0xd8, 0x88, 0x69, 0x81, 0x3c, 0xe9, 0x56, 0xe7, 0xfb, 0x1a, 0xd8, 0x7b, 0x4a, 0x8b,
	0x37, 0xc1, 0xc9, 0xd8, 0x84, 0x0e, 0x93, 0xd8, 0x45, 0x1e, 0xf2, 0xeb, 0x03, 0xfb, 0xef, 0x8f,
	0x4d, 0x73, 0x3a, 0x0e, 0x6c, 0x59, 0x7e, 0x15, 0xe3, 0x3e, 0x38, 0x1a, 0xcb, 0x5d, 0xd3, 0xb3,
	0xfc, 0x46, 0xdf, 0xed, 0xc6, 0x21, 0xeb, 0x6a, 0xfb, 0xe2, 0x83, 0xbf, 0x48, 0x45, 0x36, 0x0b,
	0xce, 0x85, 0x78, 0x1b, 0x6a, 0x19, 0xfd, 0x7c, 0x4c, 0xb9, 0xe0, 0xae, 0xa5, 0x4c, 0x77, 0xab,
	0xa6, 0x60, 0xd1, 0xd3, 0xae, 0x52, 0x8a, 0x77, 0xa0, 0x7e, 0x30, 0x09, 0xa3, 0xf1, 0x24, 0xe1,
	0xc2, 0x5d, 0x53, 0xbe, 0x76, 0xd5, 0x37, 0x38, 0x6f, 0x6a, 0xe3, 0x52, 0x8c, 0x3d, 0x68, 0x4e,
	0x42, 0x2e, 0x86, 0x9c, 0xa6, 0xf1, 0x30, 0x14, 0xee, 0xba, 0x87, 0x7c, 0x1c, 0x80, 0xac, 0xbd,
	0xa3, 0x69, 0xbc, 0x2b, 0xf0, 0x03, 0x00, 0xc1, 0xe2, 0x70, 0xa6, 0x24, 0xae, 0xad, 0xfa, 0x75,
	0x55, 0x91, 0x82, 0x12, 0x90, 0xd1, 0x28, 0x97, 0x00, 0x67, 0x09, 0x08, 0x68, 0x94, 0x57, 0x01,
	0x52, 0xe2, 0xd6, 0x2a, 0x00, 0x29, 0x68, 0xef, 0x43, 0xb3, 0x9a, 0x05, 0x6e, 0x81, 0x35, 0xa6,
	0x33, 0x9d, 0x69, 0x20, 0x8f, 0xf8, 0x21, 0xac, 0xe7, 0xe1, 0xe4, 0x98, 0xba, 0xa6, 0x87, 0xfc,
	0x46, 0xbf, 0x55, 0xd9, 0xec, 0x83, 0xac, 0x07, 0xba, 0xfd, 0xcc, 0xdc, 0x41, 0xed, 0x37, 0x70,
	0x6d, 0x25, 0xa4, 0x4b, 0x70, 0x8f, 0x56, 0x71, 0x37, 0x14, 0x6e, 0x61, 0xba, 0xc0, 0x7b, 0x0b,
	0x1b, 0xab, 0xe1, 0x5d, 0x02, 0x7c, 0xbc, 0x0a, 0xbc, 0xa9, 0x80, 0xca, 0xb5, 0x9f, 0x5c, 0x44,
	0x76, 0xbe, 0x20, 0x68, 0x54, 0xa6, 0xc7, 0x77, 0xfe, 0x7b, 0x48, 0xe5, 0x03, 0xba, 0x07, 0xf5,
	0x28, 0xa3, 0xa1, 0xa0, 0x32, 0x57, 0x53, 0xe5, 0x56, 0xd3, 0x85, 0x5d, 0x81, 0xb7, 0xc0, 0x49,
	0xb8, 0x8e, 0xd4, 0xf2, 0x90, 0xbf, 0x51, 0xee, 0x11, 0xe5, 0x2f, 0x93, 0x43, 0xf1, 0x7e, 0x36,
	0xa5, 0x81, 0x9d, 0x70, 0xf9, 0x5d, 0xfe, 0x42, 0xc2, 0xf5, 0xfd, 0xad, 0x79, 0xc8, 0xaf, 0xc9,
	0x86, 0xbc, 0xbc, 0xce, 0x73, 0x68, 0x56, 0x17, 0xbf, 0xda, 0x28, 0x9d, 0xbd, 0x45, 0x46, 0xe5,
	0xb6, 0x57, 0xe3, 0x6c, 0x6d, 0xcb, 0x69, 0x96, 0xe3, 0xe3, 0x06, 0x38, 0x29, 0x4d, 0xc4, 0x27,
	0x9a, 0xb5, 0x0c, 0x7c, 0x1d, 0x1a, 0xea, 0x89, 0xa5, 0x6c, 0x38, 0xa2, 0xa2, 0x85, 0xb0, 0x03,
	0x96, 0x3c, 0x98, 0x83, 0xd7, 0x67, 0xbf, 0x88, 0xf1, 0xad, 0x20, 0xe8, 0xa4, 0x20, 0xe8, 0xb4,
	0x20, 0xe8, 0x67, 0x41, 0xd0, 0xef, 0x82, 0x18, 0x7f, 0x0a, 0x82, 0xbe, 0xce, 0x89, 0x71, 0x32,
	0x27, 0xe8, 0x74, 0x4e, 0x8c, 0xb3, 0x39, 0x31, 0x3e, 0xde, 0x8f, 0x58, 0x92, 0x3e, 0xe1, 0x34,
	0xcb, 0x69, 0xd6, 0x8b, 0xd8, 0xd1, 0x11, 0x4b, 0x7b, 0xe5, 0xff, 0xc0, 0x81, 0xad, 0x8e, 0x4f,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x47, 0x29, 0x60, 0xde, 0x1b, 0x04, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriend.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolFriendValue.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRequestValue.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBlackListValue.Get().(proto.Message)
	})
}

var poolFriend = &sync.Pool{New: func() interface{} { return &Friend{} }}

func (m *Friend) ReleasePool() { m.Reset(); poolFriend.Put(m); m = nil }

var poolFriendValue = &sync.Pool{New: func() interface{} { return &FriendValue{} }}

func (m *FriendValue) ReleasePool() { m.Reset(); poolFriendValue.Put(m); m = nil }

var poolRequestValue = &sync.Pool{New: func() interface{} { return &RequestValue{} }}

func (m *RequestValue) ReleasePool() { m.Reset(); poolRequestValue.Put(m); m = nil }

var poolBlackListValue = &sync.Pool{New: func() interface{} { return &BlackListValue{} }}

func (m *BlackListValue) ReleasePool() { m.Reset(); poolBlackListValue.Put(m); m = nil }

func (m *Friend) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Friend) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Friend) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Friend) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Friend) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (x RecvGiftType) String() string {
	s, ok := RecvGiftType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Friend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Friend)
	if !ok {
		that2, ok := that.(Friend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Friends) != len(that1.Friends) {
		return false
	}
	for i := range this.Friends {
		if !this.Friends[i].Equal(that1.Friends[i]) {
			return false
		}
	}
	if len(this.Requests) != len(that1.Requests) {
		return false
	}
	for i := range this.Requests {
		if !this.Requests[i].Equal(that1.Requests[i]) {
			return false
		}
	}
	if len(this.Blacklist) != len(that1.Blacklist) {
		return false
	}
	for i := range this.Blacklist {
		if !this.Blacklist[i].Equal(that1.Blacklist[i]) {
			return false
		}
	}
	if this.LastSendAt != that1.LastSendAt {
		return false
	}
	if this.TodaySend != that1.TodaySend {
		return false
	}
	if this.LastRecvAt != that1.LastRecvAt {
		return false
	}
	if this.TodayRecv != that1.TodayRecv {
		return false
	}
	return true
}
func (this *FriendValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FriendValue)
	if !ok {
		that2, ok := that.(FriendValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.CreateAt != that1.CreateAt {
		return false
	}
	if this.IsRecv != that1.IsRecv {
		return false
	}
	if this.IsSend != that1.IsSend {
		return false
	}
	return true
}
func (this *RequestValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestValue)
	if !ok {
		that2, ok := that.(RequestValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.CreateAt != that1.CreateAt {
		return false
	}
	return true
}
func (this *BlackListValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlackListValue)
	if !ok {
		that2, ok := that.(BlackListValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.CreateAt != that1.CreateAt {
		return false
	}
	return true
}
func (m *Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TodayRecv != 0 {
		i = encodeVarintFriend(dAtA, i, uint64((uint64(m.TodayRecv)<<1)^uint64((m.TodayRecv>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.LastRecvAt != 0 {
		i = encodeVarintFriend(dAtA, i, uint64((uint64(m.LastRecvAt)<<1)^uint64((m.LastRecvAt>>63))))
		i--
		dAtA[i] = 0x38
	}
	if m.TodaySend != 0 {
		i = encodeVarintFriend(dAtA, i, uint64((uint64(m.TodaySend)<<1)^uint64((m.TodaySend>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.LastSendAt != 0 {
		i = encodeVarintFriend(dAtA, i, uint64((uint64(m.LastSendAt)<<1)^uint64((m.LastSendAt>>63))))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Blacklist) > 0 {
		for k := range m.Blacklist {
			v := m.Blacklist[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFriend(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFriend(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFriend(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Requests) > 0 {
		for k := range m.Requests {
			v := m.Requests[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFriend(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFriend(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFriend(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Friends) > 0 {
		for k := range m.Friends {
			v := m.Friends[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFriend(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFriend(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFriend(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSend {
		i--
		if m.IsSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsRecv != 0 {
		i = encodeVarintFriend(dAtA, i, uint64(m.IsRecv))
		i--
		dAtA[i] = 0x18
	}
	if m.CreateAt != 0 {
		i = encodeVarintFriend(dAtA, i, uint64((uint64(m.CreateAt)<<1)^uint64((m.CreateAt>>63))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateAt != 0 {
		i = encodeVarintFriend(dAtA, i, uint64((uint64(m.CreateAt)<<1)^uint64((m.CreateAt>>63))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlackListValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlackListValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlackListValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateAt != 0 {
		i = encodeVarintFriend(dAtA, i, uint64((uint64(m.CreateAt)<<1)^uint64((m.CreateAt>>63))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintFriend(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFriend(dAtA []byte, offset int, v uint64) int {
	offset -= sovFriend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Friend) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("friends")
	w.RawByte('"')
	w.RawByte(':')
	if m.Friends == nil {
		w.RawString("null")
	} else if len(m.Friends) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlFriends := len(m.Friends)
		for k, v := range m.Friends {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlFriends--
			if mlFriends != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("requests")
	w.RawByte('"')
	w.RawByte(':')
	if m.Requests == nil {
		w.RawString("null")
	} else if len(m.Requests) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRequests := len(m.Requests)
		for k, v := range m.Requests {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlRequests--
			if mlRequests != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("blacklist")
	w.RawByte('"')
	w.RawByte(':')
	if m.Blacklist == nil {
		w.RawString("null")
	} else if len(m.Blacklist) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBlacklist := len(m.Blacklist)
		for k, v := range m.Blacklist {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlBlacklist--
			if mlBlacklist != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.LastSendAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_send_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastSendAt))
		needWriteComma = true
	}
	if m.TodaySend != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("today_send")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TodaySend))
		needWriteComma = true
	}
	if m.LastRecvAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_recv_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastRecvAt))
		needWriteComma = true
	}
	if m.TodayRecv != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("today_recv")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TodayRecv))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *FriendValue) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.CreateAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("create_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreateAt))
		needWriteComma = true
	}
	if m.IsRecv != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_recv")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.IsRecv))
		needWriteComma = true
	}
	if m.IsSend {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_send")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSend)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RequestValue) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.CreateAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("create_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreateAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BlackListValue) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.CreateAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("create_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreateAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Friend) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Friend) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Friend) GoString() string {
	return m.String()
}

func (m *FriendValue) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *FriendValue) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *FriendValue) GoString() string {
	return m.String()
}

func (m *RequestValue) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RequestValue) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RequestValue) GoString() string {
	return m.String()
}

func (m *BlackListValue) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BlackListValue) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BlackListValue) GoString() string {
	return m.String()
}

func (m *Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	if len(m.Friends) > 0 {
		for k, v := range m.Friends {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFriend(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFriend(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFriend(uint64(mapEntrySize))
		}
	}
	if len(m.Requests) > 0 {
		for k, v := range m.Requests {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFriend(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFriend(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFriend(uint64(mapEntrySize))
		}
	}
	if len(m.Blacklist) > 0 {
		for k, v := range m.Blacklist {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFriend(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFriend(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFriend(uint64(mapEntrySize))
		}
	}
	if m.LastSendAt != 0 {
		n += 1 + sozFriend(uint64(m.LastSendAt))
	}
	if m.TodaySend != 0 {
		n += 1 + sozFriend(uint64(m.TodaySend))
	}
	if m.LastRecvAt != 0 {
		n += 1 + sozFriend(uint64(m.LastRecvAt))
	}
	if m.TodayRecv != 0 {
		n += 1 + sozFriend(uint64(m.TodayRecv))
	}
	return n
}

func (m *FriendValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sozFriend(uint64(m.CreateAt))
	}
	if m.IsRecv != 0 {
		n += 1 + sovFriend(uint64(m.IsRecv))
	}
	if m.IsSend {
		n += 2
	}
	return n
}

func (m *RequestValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sozFriend(uint64(m.CreateAt))
	}
	return n
}

func (m *BlackListValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sozFriend(uint64(m.CreateAt))
	}
	return n
}

func sovFriend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFriend(x uint64) (n int) {
	return sovFriend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Friends == nil {
				m.Friends = make(map[string]*FriendValue)
			}
			var mapkey string
			var mapvalue *FriendValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFriend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFriend
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFriend
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFriend
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFriend
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FriendValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFriend(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFriend
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Friends[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requests == nil {
				m.Requests = make(map[string]*RequestValue)
			}
			var mapkey string
			var mapvalue *RequestValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFriend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFriend
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFriend
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFriend
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFriend
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RequestValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFriend(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFriend
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Requests[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blacklist == nil {
				m.Blacklist = make(map[string]*BlackListValue)
			}
			var mapkey string
			var mapvalue *BlackListValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFriend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFriend
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFriend
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFriend
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFriend
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BlackListValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFriend(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFriend
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Blacklist[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSendAt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.LastSendAt = int64(v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodaySend", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.TodaySend = int64(v)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRecvAt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.LastRecvAt = int64(v)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayRecv", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.TodayRecv = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.CreateAt = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRecv", wireType)
			}
			m.IsRecv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsRecv |= RecvGiftType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSend = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.CreateAt = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlackListValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlackListValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlackListValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.CreateAt = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFriend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFriend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFriend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFriend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFriend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFriend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFriend = fmt.Errorf("proto: unexpected end of group")
)
