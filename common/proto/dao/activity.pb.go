// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/activity.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ThreeDay struct {
	RoleId        string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	LoginDay      int64           `protobuf:"varint,2,opt,name=login_day,json=loginDay,proto3" json:"login_day,omitempty"`
	LastLoginTime int64           `protobuf:"varint,3,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	Receive       map[int64]int64 `protobuf:"bytes,4,rep,name=receive,proto3" json:"receive,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ReceiveTime   int64           `protobuf:"varint,5,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`
	Recharge      bool            `protobuf:"varint,6,opt,name=recharge,proto3" json:"recharge,omitempty"`
}

func (m *ThreeDay) Reset()      { *m = ThreeDay{} }
func (*ThreeDay) ProtoMessage() {}
func (*ThreeDay) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{0}
}
func (m *ThreeDay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeDay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeDay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeDay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeDay.Merge(m, src)
}
func (m *ThreeDay) XXX_Size() int {
	return m.Size()
}
func (m *ThreeDay) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeDay.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeDay proto.InternalMessageInfo

func (m *ThreeDay) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ThreeDay) GetLoginDay() int64 {
	if m != nil {
		return m.LoginDay
	}
	return 0
}

func (m *ThreeDay) GetLastLoginTime() int64 {
	if m != nil {
		return m.LastLoginTime
	}
	return 0
}

func (m *ThreeDay) GetReceive() map[int64]int64 {
	if m != nil {
		return m.Receive
	}
	return nil
}

func (m *ThreeDay) GetReceiveTime() int64 {
	if m != nil {
		return m.ReceiveTime
	}
	return 0
}

func (m *ThreeDay) GetRecharge() bool {
	if m != nil {
		return m.Recharge
	}
	return false
}

func (*ThreeDay) XXX_MessageName() string {
	return "dao.ThreeDay"
}

type DailySale struct {
	RoleId      string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	BuyTimes    map[int64]int64 `protobuf:"bytes,2,rep,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LastFreshAt int64           `protobuf:"varint,3,opt,name=last_fresh_at,json=lastFreshAt,proto3" json:"last_fresh_at,omitempty"`
	CanBuyIds   []int64         `protobuf:"varint,4,rep,packed,name=can_buy_ids,json=canBuyIds,proto3" json:"can_buy_ids,omitempty"`
}

func (m *DailySale) Reset()      { *m = DailySale{} }
func (*DailySale) ProtoMessage() {}
func (*DailySale) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{1}
}
func (m *DailySale) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DailySale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DailySale.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DailySale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DailySale.Merge(m, src)
}
func (m *DailySale) XXX_Size() int {
	return m.Size()
}
func (m *DailySale) XXX_DiscardUnknown() {
	xxx_messageInfo_DailySale.DiscardUnknown(m)
}

var xxx_messageInfo_DailySale proto.InternalMessageInfo

func (m *DailySale) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *DailySale) GetBuyTimes() map[int64]int64 {
	if m != nil {
		return m.BuyTimes
	}
	return nil
}

func (m *DailySale) GetLastFreshAt() int64 {
	if m != nil {
		return m.LastFreshAt
	}
	return 0
}

func (m *DailySale) GetCanBuyIds() []int64 {
	if m != nil {
		return m.CanBuyIds
	}
	return nil
}

func (*DailySale) XXX_MessageName() string {
	return "dao.DailySale"
}

// 限时弹窗礼包解锁计数
type LimitedTimePackageLocks struct {
	RoleId  string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	ResetAt int64           `protobuf:"varint,2,opt,name=reset_at,json=resetAt,proto3" json:"reset_at,omitempty"`
	Locks   map[int64]int64 `protobuf:"bytes,3,rep,name=locks,proto3" json:"locks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *LimitedTimePackageLocks) Reset()      { *m = LimitedTimePackageLocks{} }
func (*LimitedTimePackageLocks) ProtoMessage() {}
func (*LimitedTimePackageLocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{2}
}
func (m *LimitedTimePackageLocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitedTimePackageLocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitedTimePackageLocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitedTimePackageLocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitedTimePackageLocks.Merge(m, src)
}
func (m *LimitedTimePackageLocks) XXX_Size() int {
	return m.Size()
}
func (m *LimitedTimePackageLocks) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitedTimePackageLocks.DiscardUnknown(m)
}

var xxx_messageInfo_LimitedTimePackageLocks proto.InternalMessageInfo

func (m *LimitedTimePackageLocks) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *LimitedTimePackageLocks) GetResetAt() int64 {
	if m != nil {
		return m.ResetAt
	}
	return 0
}

func (m *LimitedTimePackageLocks) GetLocks() map[int64]int64 {
	if m != nil {
		return m.Locks
	}
	return nil
}

func (*LimitedTimePackageLocks) XXX_MessageName() string {
	return "dao.LimitedTimePackageLocks"
}

// 限时弹窗礼包列表
type LimitedTimePackages struct {
	RoleId       string                               `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Packages     map[int64]*models.LimitedTimePackage `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KeepPackages []*models.LimitedTimePackage         `protobuf:"bytes,3,rep,name=keep_packages,json=keepPackages,proto3" json:"keep_packages,omitempty"`
}

func (m *LimitedTimePackages) Reset()      { *m = LimitedTimePackages{} }
func (*LimitedTimePackages) ProtoMessage() {}
func (*LimitedTimePackages) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{3}
}
func (m *LimitedTimePackages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitedTimePackages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitedTimePackages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitedTimePackages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitedTimePackages.Merge(m, src)
}
func (m *LimitedTimePackages) XXX_Size() int {
	return m.Size()
}
func (m *LimitedTimePackages) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitedTimePackages.DiscardUnknown(m)
}

var xxx_messageInfo_LimitedTimePackages proto.InternalMessageInfo

func (m *LimitedTimePackages) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *LimitedTimePackages) GetPackages() map[int64]*models.LimitedTimePackage {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *LimitedTimePackages) GetKeepPackages() []*models.LimitedTimePackage {
	if m != nil {
		return m.KeepPackages
	}
	return nil
}

func (*LimitedTimePackages) XXX_MessageName() string {
	return "dao.LimitedTimePackages"
}

// 等级成长基金
type LevelGrowthFund struct {
	RoleId string                                `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Buy    bool                                  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Info   map[int64]*models.LevelGrowthFundItem `protobuf:"bytes,3,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *LevelGrowthFund) Reset()      { *m = LevelGrowthFund{} }
func (*LevelGrowthFund) ProtoMessage() {}
func (*LevelGrowthFund) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{4}
}
func (m *LevelGrowthFund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelGrowthFund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelGrowthFund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LevelGrowthFund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelGrowthFund.Merge(m, src)
}
func (m *LevelGrowthFund) XXX_Size() int {
	return m.Size()
}
func (m *LevelGrowthFund) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelGrowthFund.DiscardUnknown(m)
}

var xxx_messageInfo_LevelGrowthFund proto.InternalMessageInfo

func (m *LevelGrowthFund) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *LevelGrowthFund) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

func (m *LevelGrowthFund) GetInfo() map[int64]*models.LevelGrowthFundItem {
	if m != nil {
		return m.Info
	}
	return nil
}

func (*LevelGrowthFund) XXX_MessageName() string {
	return "dao.LevelGrowthFund"
}

// 累计充值
type AccRecharge struct {
	RoleId   string         `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	DrawList map[int64]bool `protobuf:"bytes,2,rep,name=draw_list,json=drawList,proto3" json:"draw_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *AccRecharge) Reset()      { *m = AccRecharge{} }
func (*AccRecharge) ProtoMessage() {}
func (*AccRecharge) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{5}
}
func (m *AccRecharge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccRecharge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccRecharge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccRecharge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccRecharge.Merge(m, src)
}
func (m *AccRecharge) XXX_Size() int {
	return m.Size()
}
func (m *AccRecharge) XXX_DiscardUnknown() {
	xxx_messageInfo_AccRecharge.DiscardUnknown(m)
}

var xxx_messageInfo_AccRecharge proto.InternalMessageInfo

func (m *AccRecharge) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *AccRecharge) GetDrawList() map[int64]bool {
	if m != nil {
		return m.DrawList
	}
	return nil
}

func (*AccRecharge) XXX_MessageName() string {
	return "dao.AccRecharge"
}

// 星钻商会
type StellargemShop struct {
	RoleId string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	BuyCnt map[int64]int64 `protobuf:"bytes,2,rep,name=buy_cnt,json=buyCnt,proto3" json:"buy_cnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *StellargemShop) Reset()      { *m = StellargemShop{} }
func (*StellargemShop) ProtoMessage() {}
func (*StellargemShop) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{6}
}
func (m *StellargemShop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StellargemShop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StellargemShop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StellargemShop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StellargemShop.Merge(m, src)
}
func (m *StellargemShop) XXX_Size() int {
	return m.Size()
}
func (m *StellargemShop) XXX_DiscardUnknown() {
	xxx_messageInfo_StellargemShop.DiscardUnknown(m)
}

var xxx_messageInfo_StellargemShop proto.InternalMessageInfo

func (m *StellargemShop) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *StellargemShop) GetBuyCnt() map[int64]int64 {
	if m != nil {
		return m.BuyCnt
	}
	return nil
}

func (*StellargemShop) XXX_MessageName() string {
	return "dao.StellargemShop"
}

// 周礼包
type WeeklySale struct {
	RoleId      string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	BuyTimes    map[int64]int64 `protobuf:"bytes,2,rep,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LastFreshAt int64           `protobuf:"varint,3,opt,name=last_fresh_at,json=lastFreshAt,proto3" json:"last_fresh_at,omitempty"`
	CanBuyIds   []int64         `protobuf:"varint,4,rep,packed,name=can_buy_ids,json=canBuyIds,proto3" json:"can_buy_ids,omitempty"`
}

func (m *WeeklySale) Reset()      { *m = WeeklySale{} }
func (*WeeklySale) ProtoMessage() {}
func (*WeeklySale) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{7}
}
func (m *WeeklySale) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeeklySale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeeklySale.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeeklySale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeeklySale.Merge(m, src)
}
func (m *WeeklySale) XXX_Size() int {
	return m.Size()
}
func (m *WeeklySale) XXX_DiscardUnknown() {
	xxx_messageInfo_WeeklySale.DiscardUnknown(m)
}

var xxx_messageInfo_WeeklySale proto.InternalMessageInfo

func (m *WeeklySale) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *WeeklySale) GetBuyTimes() map[int64]int64 {
	if m != nil {
		return m.BuyTimes
	}
	return nil
}

func (m *WeeklySale) GetLastFreshAt() int64 {
	if m != nil {
		return m.LastFreshAt
	}
	return 0
}

func (m *WeeklySale) GetCanBuyIds() []int64 {
	if m != nil {
		return m.CanBuyIds
	}
	return nil
}

func (*WeeklySale) XXX_MessageName() string {
	return "dao.WeeklySale"
}

// 通行证重置时间
type PassesReset struct {
	Key        string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" pk`
	ResetAt    int64                  `protobuf:"varint,2,opt,name=reset_at,json=resetAt,proto3" json:"reset_at,omitempty"`
	RewardCfgs []*models.PassesReward `protobuf:"bytes,3,rep,name=reward_cfgs,json=rewardCfgs,proto3" json:"reward_cfgs,omitempty"`
}

func (m *PassesReset) Reset()      { *m = PassesReset{} }
func (*PassesReset) ProtoMessage() {}
func (*PassesReset) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{8}
}
func (m *PassesReset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PassesReset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PassesReset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PassesReset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassesReset.Merge(m, src)
}
func (m *PassesReset) XXX_Size() int {
	return m.Size()
}
func (m *PassesReset) XXX_DiscardUnknown() {
	xxx_messageInfo_PassesReset.DiscardUnknown(m)
}

var xxx_messageInfo_PassesReset proto.InternalMessageInfo

func (m *PassesReset) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PassesReset) GetResetAt() int64 {
	if m != nil {
		return m.ResetAt
	}
	return 0
}

func (m *PassesReset) GetRewardCfgs() []*models.PassesReward {
	if m != nil {
		return m.RewardCfgs
	}
	return nil
}

func (*PassesReset) XXX_MessageName() string {
	return "dao.PassesReset"
}

// 通行证
type Passes struct {
	RoleId string             `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Data   *models.PassesData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	RoleLv int64              `protobuf:"varint,3,opt,name=role_lv,json=roleLv,proto3" json:"role_lv,omitempty"`
}

func (m *Passes) Reset()      { *m = Passes{} }
func (*Passes) ProtoMessage() {}
func (*Passes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{9}
}
func (m *Passes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Passes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Passes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Passes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Passes.Merge(m, src)
}
func (m *Passes) XXX_Size() int {
	return m.Size()
}
func (m *Passes) XXX_DiscardUnknown() {
	xxx_messageInfo_Passes.DiscardUnknown(m)
}

var xxx_messageInfo_Passes proto.InternalMessageInfo

func (m *Passes) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Passes) GetData() *models.PassesData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Passes) GetRoleLv() int64 {
	if m != nil {
		return m.RoleLv
	}
	return 0
}

func (*Passes) XXX_MessageName() string {
	return "dao.Passes"
}

// 零元购
type ZeroBuy struct {
	RoleId  string            `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	EachDay []*models.ZeroBuy `protobuf:"bytes,2,rep,name=each_day,json=eachDay,proto3" json:"each_day,omitempty"`
	StartAt int64             `protobuf:"varint,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	IsEnd   bool              `protobuf:"varint,4,opt,name=is_end,json=isEnd,proto3" json:"is_end,omitempty"`
}

func (m *ZeroBuy) Reset()      { *m = ZeroBuy{} }
func (*ZeroBuy) ProtoMessage() {}
func (*ZeroBuy) Descriptor() ([]byte, []int) {
	return fileDescriptor_6077f87bdb8941bd, []int{10}
}
func (m *ZeroBuy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroBuy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroBuy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroBuy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroBuy.Merge(m, src)
}
func (m *ZeroBuy) XXX_Size() int {
	return m.Size()
}
func (m *ZeroBuy) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroBuy.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroBuy proto.InternalMessageInfo

func (m *ZeroBuy) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ZeroBuy) GetEachDay() []*models.ZeroBuy {
	if m != nil {
		return m.EachDay
	}
	return nil
}

func (m *ZeroBuy) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *ZeroBuy) GetIsEnd() bool {
	if m != nil {
		return m.IsEnd
	}
	return false
}

func (*ZeroBuy) XXX_MessageName() string {
	return "dao.ZeroBuy"
}
func init() {
	proto.RegisterType((*ThreeDay)(nil), "dao.ThreeDay")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.ThreeDay.ReceiveEntry")
	proto.RegisterType((*DailySale)(nil), "dao.DailySale")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.DailySale.BuyTimesEntry")
	proto.RegisterType((*LimitedTimePackageLocks)(nil), "dao.LimitedTimePackageLocks")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.LimitedTimePackageLocks.LocksEntry")
	proto.RegisterType((*LimitedTimePackages)(nil), "dao.LimitedTimePackages")
	proto.RegisterMapType((map[int64]*models.LimitedTimePackage)(nil), "dao.LimitedTimePackages.PackagesEntry")
	proto.RegisterType((*LevelGrowthFund)(nil), "dao.LevelGrowthFund")
	proto.RegisterMapType((map[int64]*models.LevelGrowthFundItem)(nil), "dao.LevelGrowthFund.InfoEntry")
	proto.RegisterType((*AccRecharge)(nil), "dao.AccRecharge")
	proto.RegisterMapType((map[int64]bool)(nil), "dao.AccRecharge.DrawListEntry")
	proto.RegisterType((*StellargemShop)(nil), "dao.StellargemShop")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.StellargemShop.BuyCntEntry")
	proto.RegisterType((*WeeklySale)(nil), "dao.WeeklySale")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.WeeklySale.BuyTimesEntry")
	proto.RegisterType((*PassesReset)(nil), "dao.PassesReset")
	proto.RegisterType((*Passes)(nil), "dao.Passes")
	proto.RegisterType((*ZeroBuy)(nil), "dao.ZeroBuy")
}

func init() { proto.RegisterFile("proto/dao/activity.proto", fileDescriptor_6077f87bdb8941bd) }

var fileDescriptor_6077f87bdb8941bd = []byte{
	// 921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0x4d, 0xd1, 0x96, 0xa8, 0x91, 0x5d, 0x07, 0xac, 0x8b, 0x30, 0x74, 0x4a, 0xbb, 0x3a,
	0xb8, 0x46, 0x81, 0xd2, 0x6d, 0xda, 0x02, 0x8e, 0x83, 0xa2, 0xb0, 0xe2, 0xa4, 0x70, 0xa1, 0x43,
	0x40, 0x1b, 0x08, 0x90, 0x0b, 0xb1, 0x22, 0x57, 0x12, 0x2b, 0x8a, 0x2b, 0xec, 0xae, 0x64, 0xf0,
	0x0d, 0x7a, 0xec, 0xa1, 0x2f, 0xd0, 0x4b, 0x91, 0x47, 0xc9, 0xa9, 0xc8, 0x31, 0xa7, 0xa2, 0x95,
	0x2f, 0x41, 0x4f, 0x45, 0x9f, 0xa0, 0xd8, 0x0f, 0x4a, 0x62, 0xe3, 0x44, 0xf6, 0x2d, 0x17, 0x61,
	0x67, 0x76, 0xf6, 0xb7, 0xf3, 0x9f, 0xe5, 0xec, 0x0a, 0x9c, 0x11, 0x25, 0x9c, 0x1c, 0xc4, 0x88,
	0x1c, 0xa0, 0x88, 0x27, 0x93, 0x84, 0xe7, 0xbe, 0x74, 0xd9, 0x66, 0x8c, 0x88, 0xbb, 0xd5, 0x23,
	0x3d, 0xa2, 0x42, 0xc4, 0x48, 0x4d, 0xb9, 0xdb, 0xca, 0x33, 0x24, 0x31, 0x4e, 0xd9, 0xff, 0xd6,
	0x35, 0x7f, 0xad, 0x80, 0x75, 0xde, 0xa7, 0x18, 0x9f, 0xa0, 0xdc, 0xde, 0x81, 0x1a, 0x25, 0x29,
	0x0e, 0x93, 0xd8, 0x31, 0x76, 0x8d, 0xfd, 0x7a, 0xab, 0xfa, 0xef, 0x1f, 0x3b, 0x95, 0xd1, 0x20,
	0xa8, 0x0a, 0xf7, 0x69, 0x6c, 0x6f, 0x43, 0x3d, 0x25, 0xbd, 0x24, 0x0b, 0x63, 0x94, 0x3b, 0x95,
	0x5d, 0x63, 0xdf, 0x0c, 0x2c, 0xe9, 0x10, 0xab, 0xf7, 0x60, 0x33, 0x45, 0x8c, 0x87, 0x2a, 0x82,
	0x27, 0x43, 0xec, 0x98, 0x32, 0x64, 0x43, 0xb8, 0xdb, 0xc2, 0x7b, 0x9e, 0x0c, 0xb1, 0xfd, 0x35,
	0xd4, 0x28, 0x8e, 0x70, 0x32, 0xc1, 0xce, 0xea, 0xae, 0xb9, 0xdf, 0xb8, 0xe7, 0xfa, 0x31, 0x22,
	0x7e, 0x91, 0x85, 0x1f, 0xa8, 0xc9, 0x47, 0x19, 0xa7, 0x79, 0x50, 0x84, 0xda, 0x9f, 0xc0, 0xba,
	0x1e, 0x2a, 0xf4, 0x9a, 0x44, 0x37, 0xb4, 0x4f, 0x82, 0x5d, 0xb0, 0x28, 0x8e, 0xfa, 0x88, 0xf6,
	0xb0, 0x53, 0xdd, 0x35, 0xf6, 0xad, 0x60, 0x66, 0xbb, 0x47, 0xb0, 0xbe, 0xc8, 0xb5, 0x6f, 0x81,
	0x39, 0xc0, 0xb9, 0x94, 0x69, 0x06, 0x62, 0x68, 0x6f, 0xc1, 0xda, 0x04, 0xa5, 0x63, 0xac, 0x75,
	0x29, 0xe3, 0xa8, 0x72, 0x68, 0x34, 0x5f, 0x1b, 0x50, 0x3f, 0x41, 0x49, 0x9a, 0x9f, 0xa1, 0x14,
	0x2f, 0x2f, 0xd2, 0x7d, 0xa8, 0x77, 0xc6, 0xb9, 0xcc, 0x92, 0x39, 0x15, 0xa9, 0xf0, 0xae, 0x54,
	0x38, 0x63, 0xf8, 0xad, 0x71, 0x2e, 0x32, 0x66, 0x4a, 0xa3, 0xd5, 0xd1, 0xa6, 0xdd, 0x04, 0x59,
	0xab, 0xb0, 0x4b, 0x31, 0xeb, 0x87, 0x88, 0xeb, 0x02, 0x36, 0x84, 0xf3, 0xb1, 0xf0, 0x1d, 0x73,
	0xdb, 0x83, 0x46, 0x84, 0xb2, 0x50, 0x6c, 0x91, 0xc4, 0x4c, 0x96, 0xd0, 0x0c, 0xea, 0x11, 0xca,
	0x5a, 0xe3, 0xfc, 0x34, 0x66, 0xee, 0x03, 0xd8, 0x28, 0xe1, 0x6f, 0x24, 0xf5, 0x77, 0x03, 0x6e,
	0xb7, 0x93, 0x61, 0xc2, 0x71, 0x2c, 0x08, 0x4f, 0x50, 0x34, 0x40, 0x3d, 0xdc, 0x26, 0xd1, 0x80,
	0x2d, 0x17, 0x7e, 0x47, 0xd4, 0x9f, 0x61, 0x2e, 0x12, 0x57, 0xe4, 0x9a, 0xb4, 0x8f, 0xb9, 0xfd,
	0x2d, 0xac, 0xa5, 0x02, 0xe2, 0x98, 0xb2, 0x1e, 0x9f, 0xca, 0x7a, 0xbc, 0x65, 0x23, 0x5f, 0xfe,
	0xaa, 0xd2, 0xa8, 0x55, 0xee, 0x21, 0xc0, 0xdc, 0x79, 0x23, 0x41, 0xbf, 0x54, 0xe0, 0xc3, 0x37,
	0xf7, 0xb9, 0x86, 0x98, 0x16, 0x58, 0x23, 0x1d, 0xac, 0x0f, 0x71, 0xef, 0x2d, 0x49, 0x33, 0xbf,
	0x18, 0xe8, 0xe3, 0x2c, 0xd6, 0xd9, 0xdf, 0xc1, 0xc6, 0x00, 0xe3, 0x51, 0x38, 0x03, 0x99, 0xfa,
	0x7b, 0x57, 0xbd, 0x78, 0x05, 0x2b, 0x58, 0x17, 0x0b, 0x0a, 0x9e, 0xfb, 0x14, 0x36, 0x4a, 0xec,
	0x2b, 0xa4, 0x7f, 0xb1, 0x28, 0xfd, 0xdd, 0xec, 0xf2, 0x39, 0x6f, 0xb6, 0xf1, 0x04, 0xa7, 0xdf,
	0x53, 0x72, 0xc1, 0xfb, 0x8f, 0xc7, 0x59, 0xbc, 0xbc, 0x24, 0xb7, 0xc0, 0xec, 0x8c, 0x55, 0xdf,
	0x5b, 0x81, 0x18, 0xda, 0xf7, 0x60, 0x35, 0xc9, 0xba, 0x44, 0xeb, 0xf2, 0x54, 0x81, 0xca, 0x58,
	0xff, 0x34, 0xeb, 0x12, 0x55, 0x18, 0x19, 0xeb, 0x9e, 0x43, 0x7d, 0xe6, 0xba, 0x42, 0xcf, 0x97,
	0x65, 0x3d, 0xdb, 0x33, 0x3d, 0x65, 0xec, 0x29, 0xc7, 0xc3, 0x45, 0x41, 0xcf, 0x0d, 0x68, 0x1c,
	0x47, 0x51, 0xa0, 0xfb, 0x7d, 0xb9, 0x98, 0x07, 0x50, 0x8f, 0x29, 0xba, 0x08, 0xd3, 0x84, 0x71,
	0x7d, 0xc0, 0x2a, 0xff, 0x05, 0x8a, 0x7f, 0x42, 0xd1, 0x45, 0x3b, 0x61, 0x5c, 0x1f, 0x6c, 0xac,
	0x4d, 0xd1, 0x63, 0xa5, 0xa9, 0x65, 0x9f, 0xa4, 0xb5, 0x98, 0xea, 0x6f, 0x06, 0x7c, 0x70, 0xc6,
	0x71, 0x9a, 0x8a, 0x2d, 0x86, 0x67, 0x7d, 0x32, 0x5a, 0x9e, 0xed, 0x21, 0xd4, 0x44, 0xc3, 0x47,
	0x59, 0x91, 0xeb, 0x8e, 0xcc, 0xb5, 0x8c, 0x11, 0xd7, 0xca, 0xc3, 0x4c, 0x27, 0x5b, 0xed, 0x48,
	0xc3, 0xbd, 0x0f, 0x8d, 0x05, 0xf7, 0x8d, 0x7a, 0xe7, 0x6f, 0x03, 0xe0, 0x29, 0xc6, 0x83, 0xeb,
	0x5e, 0x7c, 0x47, 0x6f, 0x5e, 0x7c, 0x1f, 0xcb, 0x34, 0xe7, 0x90, 0xf7, 0xf7, 0xe6, 0xcb, 0xa1,
	0xf1, 0x04, 0x31, 0x86, 0x59, 0x20, 0xae, 0x2c, 0xdb, 0x99, 0x2f, 0x9d, 0x0b, 0x95, 0x88, 0x77,
	0xdc, 0x72, 0xdf, 0x40, 0x83, 0xe2, 0x0b, 0x44, 0xe3, 0x30, 0xea, 0xf6, 0x8a, 0x6e, 0xdf, 0x2a,
	0xbe, 0xe0, 0x02, 0x2f, 0x02, 0x02, 0x50, 0x81, 0x0f, 0xbb, 0x3d, 0xd6, 0xfc, 0x11, 0xaa, 0x6a,
	0x6e, 0x79, 0x89, 0xf7, 0x60, 0x35, 0x46, 0x1c, 0xe9, 0xe6, 0xb0, 0xcb, 0xe8, 0x13, 0xc4, 0x51,
	0x20, 0xe7, 0xed, 0xdb, 0x1a, 0x94, 0x4e, 0x74, 0x21, 0x25, 0xa0, 0x3d, 0x69, 0xfe, 0x64, 0x40,
	0xed, 0x19, 0xa6, 0xa4, 0x35, 0xbe, 0xc6, 0x73, 0xff, 0x19, 0x58, 0x18, 0x45, 0x7d, 0xfd, 0xda,
	0x0b, 0x31, 0x9b, 0xc5, 0x8e, 0x9a, 0x11, 0xd4, 0x44, 0x80, 0x78, 0xfd, 0xef, 0x80, 0xc5, 0x38,
	0xa2, 0x7c, 0x7e, 0x76, 0x35, 0x69, 0x1f, 0x73, 0xfb, 0x23, 0xa8, 0x26, 0x2c, 0xc4, 0x59, 0xec,
	0xac, 0xaa, 0x5e, 0x48, 0xd8, 0xa3, 0x2c, 0x6e, 0xfd, 0xf0, 0xea, 0x2f, 0x6f, 0xe5, 0xf9, 0xd4,
	0x33, 0x5e, 0x4c, 0x3d, 0xe3, 0xe5, 0xd4, 0x33, 0xfe, 0x9c, 0x7a, 0xc6, 0xeb, 0xa9, 0xb7, 0xf2,
	0xcf, 0xd4, 0x33, 0x7e, 0xbe, 0xf4, 0x56, 0x5e, 0x5c, 0x7a, 0xc6, 0xcb, 0x4b, 0x6f, 0xe5, 0xd5,
	0xa5, 0xb7, 0xf2, 0xec, 0x6e, 0x44, 0x92, 0xec, 0x73, 0x86, 0xe9, 0x04, 0xd3, 0x83, 0x88, 0x0c,
	0x87, 0x24, 0x3b, 0x98, 0xfd, 0x1b, 0xea, 0x54, 0xe5, 0xf0, 0xab, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x91, 0x7f, 0xfc, 0xd0, 0x21, 0x09, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolThreeDay.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDailySale.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLimitedTimePackageLocks.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLimitedTimePackages.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolLevelGrowthFund.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAccRecharge.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStellargemShop.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolWeeklySale.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPassesReset.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPasses.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolZeroBuy.Get().(proto.Message)
	})
}

var poolThreeDay = &sync.Pool{New: func() interface{} { return &ThreeDay{} }}

func (m *ThreeDay) ReleasePool() { m.Reset(); poolThreeDay.Put(m); m = nil }

var poolDailySale = &sync.Pool{New: func() interface{} { return &DailySale{} }}

func (m *DailySale) ReleasePool() { m.Reset(); poolDailySale.Put(m); m = nil }

var poolLimitedTimePackageLocks = &sync.Pool{New: func() interface{} { return &LimitedTimePackageLocks{} }}

func (m *LimitedTimePackageLocks) ReleasePool() {
	m.Reset()
	poolLimitedTimePackageLocks.Put(m)
	m = nil
}

var poolLimitedTimePackages = &sync.Pool{New: func() interface{} { return &LimitedTimePackages{} }}

func (m *LimitedTimePackages) ReleasePool() { m.Reset(); poolLimitedTimePackages.Put(m); m = nil }

var poolLevelGrowthFund = &sync.Pool{New: func() interface{} { return &LevelGrowthFund{} }}

func (m *LevelGrowthFund) ReleasePool() { m.Reset(); poolLevelGrowthFund.Put(m); m = nil }

var poolAccRecharge = &sync.Pool{New: func() interface{} { return &AccRecharge{} }}

func (m *AccRecharge) ReleasePool() { m.Reset(); poolAccRecharge.Put(m); m = nil }

var poolStellargemShop = &sync.Pool{New: func() interface{} { return &StellargemShop{} }}

func (m *StellargemShop) ReleasePool() { m.Reset(); poolStellargemShop.Put(m); m = nil }

var poolWeeklySale = &sync.Pool{New: func() interface{} { return &WeeklySale{} }}

func (m *WeeklySale) ReleasePool() { m.Reset(); poolWeeklySale.Put(m); m = nil }

var poolPassesReset = &sync.Pool{New: func() interface{} { return &PassesReset{} }}

func (m *PassesReset) ReleasePool() { m.Reset(); poolPassesReset.Put(m); m = nil }

var poolPasses = &sync.Pool{New: func() interface{} { return &Passes{} }}

func (m *Passes) ReleasePool() { m.Reset(); poolPasses.Put(m); m = nil }

var poolZeroBuy = &sync.Pool{New: func() interface{} { return &ZeroBuy{} }}

func (m *ZeroBuy) ReleasePool() { m.Reset(); poolZeroBuy.Put(m); m = nil }

func (m *ThreeDay) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *ThreeDay) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *ThreeDay) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ThreeDay) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ThreeDay) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *DailySale) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *DailySale) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *DailySale) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *DailySale) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *DailySale) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *LimitedTimePackageLocks) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *LimitedTimePackageLocks) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *LimitedTimePackageLocks) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *LimitedTimePackageLocks) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *LimitedTimePackageLocks) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *LimitedTimePackages) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *LimitedTimePackages) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *LimitedTimePackages) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *LimitedTimePackages) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *LimitedTimePackages) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *LevelGrowthFund) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *LevelGrowthFund) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *LevelGrowthFund) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *LevelGrowthFund) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *LevelGrowthFund) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *AccRecharge) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *AccRecharge) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *AccRecharge) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *AccRecharge) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *AccRecharge) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *StellargemShop) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *StellargemShop) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *StellargemShop) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *StellargemShop) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *StellargemShop) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *WeeklySale) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *WeeklySale) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *WeeklySale) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *WeeklySale) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *WeeklySale) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *PassesReset) PK() string {
	if m == nil {
		return ""
	}
	return m.Key
}

func (m *PassesReset) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Key...)
}

func (m *PassesReset) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *PassesReset) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *PassesReset) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *Passes) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Passes) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Passes) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Passes) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Passes) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ZeroBuy) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *ZeroBuy) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *ZeroBuy) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ZeroBuy) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ZeroBuy) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *ThreeDay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThreeDay)
	if !ok {
		that2, ok := that.(ThreeDay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.LoginDay != that1.LoginDay {
		return false
	}
	if this.LastLoginTime != that1.LastLoginTime {
		return false
	}
	if len(this.Receive) != len(that1.Receive) {
		return false
	}
	for i := range this.Receive {
		if this.Receive[i] != that1.Receive[i] {
			return false
		}
	}
	if this.ReceiveTime != that1.ReceiveTime {
		return false
	}
	if this.Recharge != that1.Recharge {
		return false
	}
	return true
}
func (this *DailySale) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DailySale)
	if !ok {
		that2, ok := that.(DailySale)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.BuyTimes) != len(that1.BuyTimes) {
		return false
	}
	for i := range this.BuyTimes {
		if this.BuyTimes[i] != that1.BuyTimes[i] {
			return false
		}
	}
	if this.LastFreshAt != that1.LastFreshAt {
		return false
	}
	if len(this.CanBuyIds) != len(that1.CanBuyIds) {
		return false
	}
	for i := range this.CanBuyIds {
		if this.CanBuyIds[i] != that1.CanBuyIds[i] {
			return false
		}
	}
	return true
}
func (this *LimitedTimePackageLocks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LimitedTimePackageLocks)
	if !ok {
		that2, ok := that.(LimitedTimePackageLocks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ResetAt != that1.ResetAt {
		return false
	}
	if len(this.Locks) != len(that1.Locks) {
		return false
	}
	for i := range this.Locks {
		if this.Locks[i] != that1.Locks[i] {
			return false
		}
	}
	return true
}
func (this *LimitedTimePackages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LimitedTimePackages)
	if !ok {
		that2, ok := that.(LimitedTimePackages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Packages) != len(that1.Packages) {
		return false
	}
	for i := range this.Packages {
		if !this.Packages[i].Equal(that1.Packages[i]) {
			return false
		}
	}
	if len(this.KeepPackages) != len(that1.KeepPackages) {
		return false
	}
	for i := range this.KeepPackages {
		if !this.KeepPackages[i].Equal(that1.KeepPackages[i]) {
			return false
		}
	}
	return true
}
func (this *LevelGrowthFund) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LevelGrowthFund)
	if !ok {
		that2, ok := that.(LevelGrowthFund)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Buy != that1.Buy {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	return true
}
func (this *AccRecharge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccRecharge)
	if !ok {
		that2, ok := that.(AccRecharge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.DrawList) != len(that1.DrawList) {
		return false
	}
	for i := range this.DrawList {
		if this.DrawList[i] != that1.DrawList[i] {
			return false
		}
	}
	return true
}
func (this *StellargemShop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StellargemShop)
	if !ok {
		that2, ok := that.(StellargemShop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.BuyCnt) != len(that1.BuyCnt) {
		return false
	}
	for i := range this.BuyCnt {
		if this.BuyCnt[i] != that1.BuyCnt[i] {
			return false
		}
	}
	return true
}
func (this *WeeklySale) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeeklySale)
	if !ok {
		that2, ok := that.(WeeklySale)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.BuyTimes) != len(that1.BuyTimes) {
		return false
	}
	for i := range this.BuyTimes {
		if this.BuyTimes[i] != that1.BuyTimes[i] {
			return false
		}
	}
	if this.LastFreshAt != that1.LastFreshAt {
		return false
	}
	if len(this.CanBuyIds) != len(that1.CanBuyIds) {
		return false
	}
	for i := range this.CanBuyIds {
		if this.CanBuyIds[i] != that1.CanBuyIds[i] {
			return false
		}
	}
	return true
}
func (this *PassesReset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PassesReset)
	if !ok {
		that2, ok := that.(PassesReset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.ResetAt != that1.ResetAt {
		return false
	}
	if len(this.RewardCfgs) != len(that1.RewardCfgs) {
		return false
	}
	for i := range this.RewardCfgs {
		if !this.RewardCfgs[i].Equal(that1.RewardCfgs[i]) {
			return false
		}
	}
	return true
}
func (this *Passes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Passes)
	if !ok {
		that2, ok := that.(Passes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if this.RoleLv != that1.RoleLv {
		return false
	}
	return true
}
func (this *ZeroBuy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZeroBuy)
	if !ok {
		that2, ok := that.(ZeroBuy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.EachDay) != len(that1.EachDay) {
		return false
	}
	for i := range this.EachDay {
		if !this.EachDay[i].Equal(that1.EachDay[i]) {
			return false
		}
	}
	if this.StartAt != that1.StartAt {
		return false
	}
	if this.IsEnd != that1.IsEnd {
		return false
	}
	return true
}
func (m *ThreeDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeDay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeDay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Recharge {
		i--
		if m.Recharge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ReceiveTime != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.ReceiveTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Receive) > 0 {
		for k := range m.Receive {
			v := m.Receive[k]
			baseI := i
			i = encodeVarintActivity(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivity(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LastLoginTime != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.LastLoginTime))
		i--
		dAtA[i] = 0x18
	}
	if m.LoginDay != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.LoginDay))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DailySale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailySale) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DailySale) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CanBuyIds) > 0 {
		dAtA2 := make([]byte, len(m.CanBuyIds)*10)
		var j1 int
		for _, num1 := range m.CanBuyIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintActivity(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.LastFreshAt != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.LastFreshAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BuyTimes) > 0 {
		for k := range m.BuyTimes {
			v := m.BuyTimes[k]
			baseI := i
			i = encodeVarintActivity(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivity(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LimitedTimePackageLocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitedTimePackageLocks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitedTimePackageLocks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for k := range m.Locks {
			v := m.Locks[k]
			baseI := i
			i = encodeVarintActivity(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivity(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ResetAt != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.ResetAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LimitedTimePackages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitedTimePackages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitedTimePackages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeepPackages) > 0 {
		for iNdEx := len(m.KeepPackages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeepPackages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActivity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Packages) > 0 {
		for k := range m.Packages {
			v := m.Packages[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintActivity(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintActivity(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LevelGrowthFund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelGrowthFund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LevelGrowthFund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for k := range m.Info {
			v := m.Info[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintActivity(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintActivity(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Buy {
		i--
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccRecharge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccRecharge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccRecharge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DrawList) > 0 {
		for k := range m.DrawList {
			v := m.DrawList[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivity(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StellargemShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StellargemShop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StellargemShop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyCnt) > 0 {
		for k := range m.BuyCnt {
			v := m.BuyCnt[k]
			baseI := i
			i = encodeVarintActivity(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivity(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WeeklySale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeeklySale) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeeklySale) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CanBuyIds) > 0 {
		dAtA6 := make([]byte, len(m.CanBuyIds)*10)
		var j5 int
		for _, num1 := range m.CanBuyIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintActivity(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x22
	}
	if m.LastFreshAt != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.LastFreshAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BuyTimes) > 0 {
		for k := range m.BuyTimes {
			v := m.BuyTimes[k]
			baseI := i
			i = encodeVarintActivity(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintActivity(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintActivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PassesReset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassesReset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PassesReset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardCfgs) > 0 {
		for iNdEx := len(m.RewardCfgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardCfgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActivity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ResetAt != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.ResetAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Passes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Passes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Passes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoleLv != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.RoleLv))
		i--
		dAtA[i] = 0x18
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZeroBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroBuy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroBuy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnd {
		i--
		if m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.StartAt != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EachDay) > 0 {
		for iNdEx := len(m.EachDay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EachDay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActivity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActivity(dAtA []byte, offset int, v uint64) int {
	offset -= sovActivity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *ThreeDay) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.LoginDay != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("login_day")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LoginDay))
		needWriteComma = true
	}
	if m.LastLoginTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_login_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastLoginTime))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("receive")
	w.RawByte('"')
	w.RawByte(':')
	if m.Receive == nil {
		w.RawString("null")
	} else if len(m.Receive) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlReceive := len(m.Receive)
		for k, v := range m.Receive {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlReceive--
			if mlReceive != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.ReceiveTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("receive_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReceiveTime))
		needWriteComma = true
	}
	if m.Recharge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("recharge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Recharge)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DailySale) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buy_times")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuyTimes == nil {
		w.RawString("null")
	} else if len(m.BuyTimes) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuyTimes := len(m.BuyTimes)
		for k, v := range m.BuyTimes {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlBuyTimes--
			if mlBuyTimes != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.LastFreshAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_fresh_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastFreshAt))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("can_buy_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.CanBuyIds == nil {
		w.RawString("null")
	} else if len(m.CanBuyIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.CanBuyIds {
			w.Int64(int64(v))
			if i != len(m.CanBuyIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LimitedTimePackageLocks) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ResetAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("reset_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ResetAt))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("locks")
	w.RawByte('"')
	w.RawByte(':')
	if m.Locks == nil {
		w.RawString("null")
	} else if len(m.Locks) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlLocks := len(m.Locks)
		for k, v := range m.Locks {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlLocks--
			if mlLocks != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LimitedTimePackages) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("packages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Packages == nil {
		w.RawString("null")
	} else if len(m.Packages) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlPackages := len(m.Packages)
		for k, v := range m.Packages {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlPackages--
			if mlPackages != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("keep_packages")
	w.RawByte('"')
	w.RawByte(':')
	if m.KeepPackages == nil {
		w.RawString("null")
	} else if len(m.KeepPackages) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.KeepPackages {
			v.JsonBytes(w)
			if i != len(m.KeepPackages)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *LevelGrowthFund) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Buy {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("buy")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Buy)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("info")
	w.RawByte('"')
	w.RawByte(':')
	if m.Info == nil {
		w.RawString("null")
	} else if len(m.Info) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlInfo := len(m.Info)
		for k, v := range m.Info {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlInfo--
			if mlInfo != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *AccRecharge) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("draw_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.DrawList == nil {
		w.RawString("null")
	} else if len(m.DrawList) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDrawList := len(m.DrawList)
		for k, v := range m.DrawList {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlDrawList--
			if mlDrawList != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *StellargemShop) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buy_cnt")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuyCnt == nil {
		w.RawString("null")
	} else if len(m.BuyCnt) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuyCnt := len(m.BuyCnt)
		for k, v := range m.BuyCnt {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlBuyCnt--
			if mlBuyCnt != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *WeeklySale) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buy_times")
	w.RawByte('"')
	w.RawByte(':')
	if m.BuyTimes == nil {
		w.RawString("null")
	} else if len(m.BuyTimes) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuyTimes := len(m.BuyTimes)
		for k, v := range m.BuyTimes {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlBuyTimes--
			if mlBuyTimes != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.LastFreshAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_fresh_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastFreshAt))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("can_buy_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.CanBuyIds == nil {
		w.RawString("null")
	} else if len(m.CanBuyIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.CanBuyIds {
			w.Int64(int64(v))
			if i != len(m.CanBuyIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PassesReset) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Key != "" {
		w.RawByte('"')
		w.RawString("key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Key)
		needWriteComma = true
	}
	if m.ResetAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("reset_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ResetAt))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("reward_cfgs")
	w.RawByte('"')
	w.RawByte(':')
	if m.RewardCfgs == nil {
		w.RawString("null")
	} else if len(m.RewardCfgs) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RewardCfgs {
			v.JsonBytes(w)
			if i != len(m.RewardCfgs)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Passes) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	m.Data.JsonBytes(w)
	needWriteComma = true
	if m.RoleLv != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_lv")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoleLv))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ZeroBuy) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("each_day")
	w.RawByte('"')
	w.RawByte(':')
	if m.EachDay == nil {
		w.RawString("null")
	} else if len(m.EachDay) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.EachDay {
			v.JsonBytes(w)
			if i != len(m.EachDay)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.StartAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("start_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StartAt))
		needWriteComma = true
	}
	if m.IsEnd {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_end")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsEnd)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ThreeDay) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ThreeDay) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ThreeDay) GoString() string {
	return m.String()
}

func (m *DailySale) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DailySale) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DailySale) GoString() string {
	return m.String()
}

func (m *LimitedTimePackageLocks) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LimitedTimePackageLocks) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LimitedTimePackageLocks) GoString() string {
	return m.String()
}

func (m *LimitedTimePackages) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LimitedTimePackages) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LimitedTimePackages) GoString() string {
	return m.String()
}

func (m *LevelGrowthFund) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *LevelGrowthFund) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *LevelGrowthFund) GoString() string {
	return m.String()
}

func (m *AccRecharge) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *AccRecharge) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *AccRecharge) GoString() string {
	return m.String()
}

func (m *StellargemShop) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *StellargemShop) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *StellargemShop) GoString() string {
	return m.String()
}

func (m *WeeklySale) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *WeeklySale) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *WeeklySale) GoString() string {
	return m.String()
}

func (m *PassesReset) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PassesReset) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PassesReset) GoString() string {
	return m.String()
}

func (m *Passes) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Passes) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Passes) GoString() string {
	return m.String()
}

func (m *ZeroBuy) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ZeroBuy) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ZeroBuy) GoString() string {
	return m.String()
}

func (m *ThreeDay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.LoginDay != 0 {
		n += 1 + sovActivity(uint64(m.LoginDay))
	}
	if m.LastLoginTime != 0 {
		n += 1 + sovActivity(uint64(m.LastLoginTime))
	}
	if len(m.Receive) > 0 {
		for k, v := range m.Receive {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivity(uint64(k)) + 1 + sovActivity(uint64(v))
			n += mapEntrySize + 1 + sovActivity(uint64(mapEntrySize))
		}
	}
	if m.ReceiveTime != 0 {
		n += 1 + sovActivity(uint64(m.ReceiveTime))
	}
	if m.Recharge {
		n += 2
	}
	return n
}

func (m *DailySale) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if len(m.BuyTimes) > 0 {
		for k, v := range m.BuyTimes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivity(uint64(k)) + 1 + sovActivity(uint64(v))
			n += mapEntrySize + 1 + sovActivity(uint64(mapEntrySize))
		}
	}
	if m.LastFreshAt != 0 {
		n += 1 + sovActivity(uint64(m.LastFreshAt))
	}
	if len(m.CanBuyIds) > 0 {
		l = 0
		for _, e := range m.CanBuyIds {
			l += sovActivity(uint64(e))
		}
		n += 1 + sovActivity(uint64(l)) + l
	}
	return n
}

func (m *LimitedTimePackageLocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.ResetAt != 0 {
		n += 1 + sovActivity(uint64(m.ResetAt))
	}
	if len(m.Locks) > 0 {
		for k, v := range m.Locks {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivity(uint64(k)) + 1 + sovActivity(uint64(v))
			n += mapEntrySize + 1 + sovActivity(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LimitedTimePackages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if len(m.Packages) > 0 {
		for k, v := range m.Packages {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovActivity(uint64(l))
			}
			mapEntrySize := 1 + sovActivity(uint64(k)) + l
			n += mapEntrySize + 1 + sovActivity(uint64(mapEntrySize))
		}
	}
	if len(m.KeepPackages) > 0 {
		for _, e := range m.KeepPackages {
			l = e.Size()
			n += 1 + l + sovActivity(uint64(l))
		}
	}
	return n
}

func (m *LevelGrowthFund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.Buy {
		n += 2
	}
	if len(m.Info) > 0 {
		for k, v := range m.Info {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovActivity(uint64(l))
			}
			mapEntrySize := 1 + sovActivity(uint64(k)) + l
			n += mapEntrySize + 1 + sovActivity(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AccRecharge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if len(m.DrawList) > 0 {
		for k, v := range m.DrawList {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivity(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovActivity(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *StellargemShop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if len(m.BuyCnt) > 0 {
		for k, v := range m.BuyCnt {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivity(uint64(k)) + 1 + sovActivity(uint64(v))
			n += mapEntrySize + 1 + sovActivity(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *WeeklySale) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if len(m.BuyTimes) > 0 {
		for k, v := range m.BuyTimes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovActivity(uint64(k)) + 1 + sovActivity(uint64(v))
			n += mapEntrySize + 1 + sovActivity(uint64(mapEntrySize))
		}
	}
	if m.LastFreshAt != 0 {
		n += 1 + sovActivity(uint64(m.LastFreshAt))
	}
	if len(m.CanBuyIds) > 0 {
		l = 0
		for _, e := range m.CanBuyIds {
			l += sovActivity(uint64(e))
		}
		n += 1 + sovActivity(uint64(l)) + l
	}
	return n
}

func (m *PassesReset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.ResetAt != 0 {
		n += 1 + sovActivity(uint64(m.ResetAt))
	}
	if len(m.RewardCfgs) > 0 {
		for _, e := range m.RewardCfgs {
			l = e.Size()
			n += 1 + l + sovActivity(uint64(l))
		}
	}
	return n
}

func (m *Passes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.RoleLv != 0 {
		n += 1 + sovActivity(uint64(m.RoleLv))
	}
	return n
}

func (m *ZeroBuy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if len(m.EachDay) > 0 {
		for _, e := range m.EachDay {
			l = e.Size()
			n += 1 + l + sovActivity(uint64(l))
		}
	}
	if m.StartAt != 0 {
		n += 1 + sovActivity(uint64(m.StartAt))
	}
	if m.IsEnd {
		n += 2
	}
	return n
}

func sovActivity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActivity(x uint64) (n int) {
	return sovActivity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ThreeDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginDay", wireType)
			}
			m.LoginDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginDay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginTime", wireType)
			}
			m.LastLoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLoginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receive == nil {
				m.Receive = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Receive[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveTime", wireType)
			}
			m.ReceiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recharge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Recharge = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailySale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailySale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailySale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyTimes == nil {
				m.BuyTimes = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuyTimes[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFreshAt", wireType)
			}
			m.LastFreshAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFreshAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CanBuyIds = append(m.CanBuyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivity
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivity
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CanBuyIds) == 0 {
					m.CanBuyIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CanBuyIds = append(m.CanBuyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CanBuyIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitedTimePackageLocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitedTimePackageLocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitedTimePackageLocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetAt", wireType)
			}
			m.ResetAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locks == nil {
				m.Locks = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Locks[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitedTimePackages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitedTimePackages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitedTimePackages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Packages == nil {
				m.Packages = make(map[int64]*models.LimitedTimePackage)
			}
			var mapkey int64
			var mapvalue *models.LimitedTimePackage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthActivity
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthActivity
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.LimitedTimePackage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Packages[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepPackages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeepPackages = append(m.KeepPackages, &models.LimitedTimePackage{})
			if err := m.KeepPackages[len(m.KeepPackages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelGrowthFund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelGrowthFund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelGrowthFund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = make(map[int64]*models.LevelGrowthFundItem)
			}
			var mapkey int64
			var mapvalue *models.LevelGrowthFundItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthActivity
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthActivity
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.LevelGrowthFundItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Info[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccRecharge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccRecharge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccRecharge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrawList == nil {
				m.DrawList = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DrawList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StellargemShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StellargemShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StellargemShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCnt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyCnt == nil {
				m.BuyCnt = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuyCnt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeeklySale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeeklySale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeeklySale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyTimes == nil {
				m.BuyTimes = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuyTimes[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFreshAt", wireType)
			}
			m.LastFreshAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFreshAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CanBuyIds = append(m.CanBuyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActivity
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActivity
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CanBuyIds) == 0 {
					m.CanBuyIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CanBuyIds = append(m.CanBuyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CanBuyIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassesReset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassesReset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassesReset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetAt", wireType)
			}
			m.ResetAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCfgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardCfgs = append(m.RewardCfgs, &models.PassesReward{})
			if err := m.RewardCfgs[len(m.RewardCfgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Passes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Passes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Passes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &models.PassesData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleLv", wireType)
			}
			m.RoleLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleLv |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZeroBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EachDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EachDay = append(m.EachDay, &models.ZeroBuy{})
			if err := m.EachDay[len(m.EachDay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActivity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActivity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActivity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActivity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActivity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActivity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActivity = fmt.Errorf("proto: unexpected end of group")
)
