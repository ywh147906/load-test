// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/talent.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Talent struct {
	RoleId       string               `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	CommonPoints int64                `protobuf:"varint,2,opt,name=common_points,json=commonPoints,proto3" json:"common_points,omitempty"`
	Ht           []*models.HeroTalent `protobuf:"bytes,3,rep,name=ht,proto3" json:"ht,omitempty"`
	LockStoneIds map[int64]bool       `protobuf:"bytes,4,rep,name=lock_stone_ids,json=lockStoneIds,proto3" json:"lock_stone_ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FirstUpdateM map[int64]int64      `protobuf:"bytes,5,rep,name=first_update_m,json=firstUpdateM,proto3" json:"first_update_m,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Talent) Reset()      { *m = Talent{} }
func (*Talent) ProtoMessage() {}
func (*Talent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eb79d0174634e4c, []int{0}
}
func (m *Talent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent.Merge(m, src)
}
func (m *Talent) XXX_Size() int {
	return m.Size()
}
func (m *Talent) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent.DiscardUnknown(m)
}

var xxx_messageInfo_Talent proto.InternalMessageInfo

func (m *Talent) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Talent) GetCommonPoints() int64 {
	if m != nil {
		return m.CommonPoints
	}
	return 0
}

func (m *Talent) GetHt() []*models.HeroTalent {
	if m != nil {
		return m.Ht
	}
	return nil
}

func (m *Talent) GetLockStoneIds() map[int64]bool {
	if m != nil {
		return m.LockStoneIds
	}
	return nil
}

func (m *Talent) GetFirstUpdateM() map[int64]int64 {
	if m != nil {
		return m.FirstUpdateM
	}
	return nil
}

func (*Talent) XXX_MessageName() string {
	return "dao.Talent"
}

type SkillStone struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty" pk`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Expire int64 `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
	Lock   bool  `protobuf:"varint,4,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *SkillStone) Reset()      { *m = SkillStone{} }
func (*SkillStone) ProtoMessage() {}
func (*SkillStone) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eb79d0174634e4c, []int{1}
}
func (m *SkillStone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkillStone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkillStone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkillStone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillStone.Merge(m, src)
}
func (m *SkillStone) XXX_Size() int {
	return m.Size()
}
func (m *SkillStone) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillStone.DiscardUnknown(m)
}

var xxx_messageInfo_SkillStone proto.InternalMessageInfo

func (m *SkillStone) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *SkillStone) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SkillStone) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *SkillStone) GetLock() bool {
	if m != nil {
		return m.Lock
	}
	return false
}

func (*SkillStone) XXX_MessageName() string {
	return "dao.SkillStone"
}

type TalentRune struct {
	RuneId   string `protobuf:"bytes,1,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty" pk`
	TalentId int64  `protobuf:"varint,2,opt,name=talent_id,json=talentId,proto3" json:"talent_id,omitempty"`
	Lvl      int64  `protobuf:"varint,3,opt,name=lvl,proto3" json:"lvl,omitempty"`
	PlateIdx int64  `protobuf:"varint,4,opt,name=plate_idx,json=plateIdx,proto3" json:"plate_idx,omitempty"`
	Loc      int64  `protobuf:"varint,5,opt,name=loc,proto3" json:"loc,omitempty"`
	CurrExp  int64  `protobuf:"varint,6,opt,name=curr_exp,json=currExp,proto3" json:"curr_exp,omitempty"`
	AccExp   int64  `protobuf:"varint,7,opt,name=acc_exp,json=accExp,proto3" json:"acc_exp,omitempty"`
}

func (m *TalentRune) Reset()      { *m = TalentRune{} }
func (*TalentRune) ProtoMessage() {}
func (*TalentRune) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eb79d0174634e4c, []int{2}
}
func (m *TalentRune) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TalentRune) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TalentRune.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TalentRune) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TalentRune.Merge(m, src)
}
func (m *TalentRune) XXX_Size() int {
	return m.Size()
}
func (m *TalentRune) XXX_DiscardUnknown() {
	xxx_messageInfo_TalentRune.DiscardUnknown(m)
}

var xxx_messageInfo_TalentRune proto.InternalMessageInfo

func (m *TalentRune) GetRuneId() string {
	if m != nil {
		return m.RuneId
	}
	return ""
}

func (m *TalentRune) GetTalentId() int64 {
	if m != nil {
		return m.TalentId
	}
	return 0
}

func (m *TalentRune) GetLvl() int64 {
	if m != nil {
		return m.Lvl
	}
	return 0
}

func (m *TalentRune) GetPlateIdx() int64 {
	if m != nil {
		return m.PlateIdx
	}
	return 0
}

func (m *TalentRune) GetLoc() int64 {
	if m != nil {
		return m.Loc
	}
	return 0
}

func (m *TalentRune) GetCurrExp() int64 {
	if m != nil {
		return m.CurrExp
	}
	return 0
}

func (m *TalentRune) GetAccExp() int64 {
	if m != nil {
		return m.AccExp
	}
	return 0
}

func (*TalentRune) XXX_MessageName() string {
	return "dao.TalentRune"
}
func init() {
	proto.RegisterType((*Talent)(nil), "dao.Talent")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.Talent.FirstUpdateMEntry")
	proto.RegisterMapType((map[int64]bool)(nil), "dao.Talent.LockStoneIdsEntry")
	proto.RegisterType((*SkillStone)(nil), "dao.SkillStone")
	proto.RegisterType((*TalentRune)(nil), "dao.TalentRune")
}

func init() { proto.RegisterFile("proto/dao/talent.proto", fileDescriptor_8eb79d0174634e4c) }

var fileDescriptor_8eb79d0174634e4c = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0xeb, 0xa4, 0x4d, 0x3b, 0x33, 0x10, 0x58, 0xd3, 0xc8, 0x0a, 0x78, 0x55, 0xb9, 0xf4,
	0x42, 0x2a, 0xc1, 0x05, 0x71, 0x41, 0x1a, 0x2a, 0xa2, 0x08, 0x24, 0x94, 0xc1, 0x85, 0x4b, 0x14,
	0x6c, 0x6f, 0x8b, 0xea, 0xe6, 0x8b, 0x1c, 0xa7, 0xca, 0xde, 0x82, 0xc7, 0xe0, 0x2d, 0xb8, 0xee,
	0xb8, 0xe3, 0x4e, 0x08, 0xd2, 0x0b, 0x47, 0xc4, 0x03, 0x20, 0x64, 0xbb, 0x83, 0xa2, 0x22, 0xed,
	0xf6, 0x7d, 0x3f, 0xff, 0xf3, 0xff, 0xdb, 0xfe, 0x1c, 0xbc, 0x5b, 0x28, 0xd0, 0x30, 0xe6, 0x29,
	0x8c, 0x75, 0x2a, 0x45, 0xae, 0x23, 0x0b, 0x88, 0xcf, 0x53, 0xe8, 0xef, 0x1c, 0xc3, 0x31, 0x38,
	0x81, 0xa9, 0xdc, 0x52, 0x7f, 0xcf, 0x91, 0x39, 0x70, 0x21, 0xcb, 0x7f, 0xbe, 0x1a, 0xfe, 0xf2,
	0x70, 0xf0, 0xd6, 0x02, 0xb2, 0x8f, 0xbb, 0x0a, 0xa4, 0x48, 0x32, 0x1e, 0xa2, 0x01, 0x1a, 0x6d,
	0x1d, 0x04, 0x3f, 0xbf, 0xec, 0x7b, 0xc5, 0x2c, 0x0e, 0x0c, 0x9e, 0x72, 0x72, 0x1f, 0x5f, 0x67,
	0x30, 0x9f, 0x43, 0x9e, 0x14, 0x90, 0xe5, 0xba, 0x0c, 0xbd, 0x01, 0x1a, 0xf9, 0xf1, 0xb6, 0x83,
	0x6f, 0x2c, 0x23, 0x43, 0xec, 0x9d, 0xe8, 0xd0, 0x1f, 0xf8, 0xa3, 0x6b, 0x0f, 0x49, 0xe4, 0x22,
	0xa3, 0x17, 0x42, 0x81, 0x4b, 0x89, 0xbd, 0x13, 0x4d, 0x9e, 0xe1, 0x1b, 0x12, 0xd8, 0x2c, 0x29,
	0x35, 0xe4, 0x26, 0xaf, 0x0c, 0xdb, 0x56, 0x7f, 0x2f, 0xe2, 0x29, 0x44, 0x4e, 0x18, 0xbd, 0x02,
	0x36, 0x3b, 0x34, 0x82, 0x29, 0x2f, 0x27, 0xb9, 0x56, 0xa7, 0xf1, 0xb6, 0x5c, 0x43, 0xc6, 0xe4,
	0x28, 0x53, 0xa5, 0x4e, 0xaa, 0x82, 0xa7, 0x5a, 0x24, 0xf3, 0xb0, 0xb3, 0x69, 0xf2, 0xdc, 0x28,
	0xde, 0x59, 0xc1, 0xeb, 0x95, 0xc9, 0xd1, 0x1a, 0xea, 0x3f, 0xc5, 0xb7, 0x36, 0x72, 0xc8, 0x4d,
	0xec, 0xcf, 0xc4, 0xa9, 0xbd, 0x04, 0x3f, 0x36, 0x25, 0xd9, 0xc1, 0x9d, 0x45, 0x2a, 0x2b, 0x61,
	0x4f, 0xdc, 0x8b, 0x5d, 0xf3, 0xc4, 0x7b, 0x8c, 0x8c, 0xc1, 0x46, 0xc6, 0x55, 0x06, 0xfe, 0x9a,
	0xc1, 0x10, 0x30, 0x3e, 0x9c, 0x65, 0x52, 0xda, 0x2d, 0x98, 0x19, 0x64, 0x5a, 0xcc, 0x2f, 0x67,
	0xe0, 0xff, 0x9d, 0x81, 0xc1, 0x53, 0x6e, 0x8c, 0x18, 0x54, 0xb9, 0xbe, 0x34, 0xb2, 0x0d, 0xd9,
	0xc5, 0x81, 0xa8, 0x8b, 0x4c, 0x89, 0xd0, 0xb7, 0x78, 0xd5, 0x11, 0x82, 0xdb, 0xe6, 0xce, 0xc2,
	0xb6, 0xdd, 0xb6, 0xad, 0x87, 0x9f, 0x11, 0xc6, 0xab, 0x59, 0x54, 0x2e, 0x51, 0x55, 0xf9, 0x7f,
	0xa7, 0x5e, 0x99, 0x3b, 0x21, 0x77, 0xf0, 0x96, 0x7b, 0x31, 0x46, 0xe2, 0x52, 0x7b, 0x0e, 0x4c,
	0xb9, 0x39, 0xa9, 0x5c, 0xc8, 0x55, 0xaa, 0x29, 0x8d, 0xbc, 0x90, 0x66, 0x1e, 0x19, 0xaf, 0x6d,
	0xae, 0x1f, 0xf7, 0x2c, 0x98, 0xf2, 0xda, 0xca, 0x81, 0x85, 0x9d, 0x95, 0x1c, 0x18, 0xd9, 0xc3,
	0x3d, 0x56, 0x29, 0x95, 0x88, 0xba, 0x08, 0x03, 0x8b, 0xbb, 0xa6, 0x9f, 0xd4, 0x05, 0xb9, 0x8d,
	0xbb, 0x29, 0x63, 0x76, 0xa5, 0xeb, 0x4e, 0x95, 0x32, 0x36, 0xa9, 0x8b, 0x83, 0x97, 0x17, 0xdf,
	0x68, 0xeb, 0x53, 0x43, 0xd1, 0x59, 0x43, 0xd1, 0x79, 0x43, 0xd1, 0xd7, 0x86, 0xa2, 0xef, 0x0d,
	0x6d, 0xfd, 0x68, 0x28, 0xfa, 0xb8, 0xa4, 0xad, 0xb3, 0x25, 0x45, 0xe7, 0x4b, 0xda, 0xba, 0x58,
	0xd2, 0xd6, 0xfb, 0xbb, 0x0c, 0xb2, 0xfc, 0x41, 0x29, 0xd4, 0x42, 0xa8, 0xb1, 0x7b, 0xaa, 0xe3,
	0x3f, 0xbf, 0xd0, 0x87, 0xc0, 0x96, 0x8f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x41, 0xfa, 0xf6,
	0xd7, 0x56, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSkillStone.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTalentRune.Get().(proto.Message)
	})
}

var poolTalent = &sync.Pool{New: func() interface{} { return &Talent{} }}

func (m *Talent) ReleasePool() { m.Reset(); poolTalent.Put(m); m = nil }

var poolSkillStone = &sync.Pool{New: func() interface{} { return &SkillStone{} }}

func (m *SkillStone) ReleasePool() { m.Reset(); poolSkillStone.Put(m); m = nil }

var poolTalentRune = &sync.Pool{New: func() interface{} { return &TalentRune{} }}

func (m *TalentRune) ReleasePool() { m.Reset(); poolTalentRune.Put(m); m = nil }

func (m *Talent) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Talent) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Talent) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Talent) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Talent) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *SkillStone) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.ItemId), 10)
}

func (m *SkillStone) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.ItemId), 10)
}

func (m *SkillStone) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *SkillStone) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *SkillStone) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *TalentRune) PK() string {
	if m == nil {
		return ""
	}
	return m.RuneId
}

func (m *TalentRune) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RuneId...)
}

func (m *TalentRune) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *TalentRune) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *TalentRune) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Talent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Talent)
	if !ok {
		that2, ok := that.(Talent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.CommonPoints != that1.CommonPoints {
		return false
	}
	if len(this.Ht) != len(that1.Ht) {
		return false
	}
	for i := range this.Ht {
		if !this.Ht[i].Equal(that1.Ht[i]) {
			return false
		}
	}
	if len(this.LockStoneIds) != len(that1.LockStoneIds) {
		return false
	}
	for i := range this.LockStoneIds {
		if this.LockStoneIds[i] != that1.LockStoneIds[i] {
			return false
		}
	}
	if len(this.FirstUpdateM) != len(that1.FirstUpdateM) {
		return false
	}
	for i := range this.FirstUpdateM {
		if this.FirstUpdateM[i] != that1.FirstUpdateM[i] {
			return false
		}
	}
	return true
}
func (this *SkillStone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SkillStone)
	if !ok {
		that2, ok := that.(SkillStone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Expire != that1.Expire {
		return false
	}
	if this.Lock != that1.Lock {
		return false
	}
	return true
}
func (this *TalentRune) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TalentRune)
	if !ok {
		that2, ok := that.(TalentRune)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RuneId != that1.RuneId {
		return false
	}
	if this.TalentId != that1.TalentId {
		return false
	}
	if this.Lvl != that1.Lvl {
		return false
	}
	if this.PlateIdx != that1.PlateIdx {
		return false
	}
	if this.Loc != that1.Loc {
		return false
	}
	if this.CurrExp != that1.CurrExp {
		return false
	}
	if this.AccExp != that1.AccExp {
		return false
	}
	return true
}
func (m *Talent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FirstUpdateM) > 0 {
		for k := range m.FirstUpdateM {
			v := m.FirstUpdateM[k]
			baseI := i
			i = encodeVarintTalent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTalent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LockStoneIds) > 0 {
		for k := range m.LockStoneIds {
			v := m.LockStoneIds[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintTalent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Ht) > 0 {
		for iNdEx := len(m.Ht) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ht[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTalent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CommonPoints != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.CommonPoints))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintTalent(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SkillStone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillStone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkillStone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lock {
		i--
		if m.Lock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Expire != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TalentRune) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TalentRune) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TalentRune) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccExp != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.AccExp))
		i--
		dAtA[i] = 0x38
	}
	if m.CurrExp != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.CurrExp))
		i--
		dAtA[i] = 0x30
	}
	if m.Loc != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Loc))
		i--
		dAtA[i] = 0x28
	}
	if m.PlateIdx != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.PlateIdx))
		i--
		dAtA[i] = 0x20
	}
	if m.Lvl != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.Lvl))
		i--
		dAtA[i] = 0x18
	}
	if m.TalentId != 0 {
		i = encodeVarintTalent(dAtA, i, uint64(m.TalentId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RuneId) > 0 {
		i -= len(m.RuneId)
		copy(dAtA[i:], m.RuneId)
		i = encodeVarintTalent(dAtA, i, uint64(len(m.RuneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTalent(dAtA []byte, offset int, v uint64) int {
	offset -= sovTalent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Talent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.CommonPoints != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("common_points")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CommonPoints))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("ht")
	w.RawByte('"')
	w.RawByte(':')
	if m.Ht == nil {
		w.RawString("null")
	} else if len(m.Ht) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Ht {
			v.JsonBytes(w)
			if i != len(m.Ht)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("lock_stone_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.LockStoneIds == nil {
		w.RawString("null")
	} else if len(m.LockStoneIds) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlLockStoneIds := len(m.LockStoneIds)
		for k, v := range m.LockStoneIds {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlLockStoneIds--
			if mlLockStoneIds != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("first_update_m")
	w.RawByte('"')
	w.RawByte(':')
	if m.FirstUpdateM == nil {
		w.RawString("null")
	} else if len(m.FirstUpdateM) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlFirstUpdateM := len(m.FirstUpdateM)
		for k, v := range m.FirstUpdateM {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlFirstUpdateM--
			if mlFirstUpdateM != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SkillStone) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.Expire != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expire")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Expire))
		needWriteComma = true
	}
	if m.Lock {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lock")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Lock)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TalentRune) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RuneId != "" {
		w.RawByte('"')
		w.RawString("rune_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RuneId)
		needWriteComma = true
	}
	if m.TalentId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("talent_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TalentId))
		needWriteComma = true
	}
	if m.Lvl != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lvl")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Lvl))
		needWriteComma = true
	}
	if m.PlateIdx != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("plate_idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PlateIdx))
		needWriteComma = true
	}
	if m.Loc != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("loc")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Loc))
		needWriteComma = true
	}
	if m.CurrExp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("curr_exp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CurrExp))
		needWriteComma = true
	}
	if m.AccExp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("acc_exp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AccExp))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Talent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Talent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Talent) GoString() string {
	return m.String()
}

func (m *SkillStone) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SkillStone) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SkillStone) GoString() string {
	return m.String()
}

func (m *TalentRune) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TalentRune) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TalentRune) GoString() string {
	return m.String()
}

func (m *Talent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovTalent(uint64(l))
	}
	if m.CommonPoints != 0 {
		n += 1 + sovTalent(uint64(m.CommonPoints))
	}
	if len(m.Ht) > 0 {
		for _, e := range m.Ht {
			l = e.Size()
			n += 1 + l + sovTalent(uint64(l))
		}
	}
	if len(m.LockStoneIds) > 0 {
		for k, v := range m.LockStoneIds {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTalent(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovTalent(uint64(mapEntrySize))
		}
	}
	if len(m.FirstUpdateM) > 0 {
		for k, v := range m.FirstUpdateM {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTalent(uint64(k)) + 1 + sovTalent(uint64(v))
			n += mapEntrySize + 1 + sovTalent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SkillStone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovTalent(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovTalent(uint64(m.Count))
	}
	if m.Expire != 0 {
		n += 1 + sovTalent(uint64(m.Expire))
	}
	if m.Lock {
		n += 2
	}
	return n
}

func (m *TalentRune) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuneId)
	if l > 0 {
		n += 1 + l + sovTalent(uint64(l))
	}
	if m.TalentId != 0 {
		n += 1 + sovTalent(uint64(m.TalentId))
	}
	if m.Lvl != 0 {
		n += 1 + sovTalent(uint64(m.Lvl))
	}
	if m.PlateIdx != 0 {
		n += 1 + sovTalent(uint64(m.PlateIdx))
	}
	if m.Loc != 0 {
		n += 1 + sovTalent(uint64(m.Loc))
	}
	if m.CurrExp != 0 {
		n += 1 + sovTalent(uint64(m.CurrExp))
	}
	if m.AccExp != 0 {
		n += 1 + sovTalent(uint64(m.AccExp))
	}
	return n
}

func sovTalent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTalent(x uint64) (n int) {
	return sovTalent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Talent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Talent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Talent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonPoints", wireType)
			}
			m.CommonPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonPoints |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ht", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ht = append(m.Ht, &models.HeroTalent{})
			if err := m.Ht[len(m.Ht)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockStoneIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockStoneIds == nil {
				m.LockStoneIds = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTalent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LockStoneIds[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstUpdateM", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstUpdateM == nil {
				m.FirstUpdateM = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTalent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FirstUpdateM[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillStone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillStone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillStone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TalentRune) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TalentRune: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TalentRune: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentId", wireType)
			}
			m.TalentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lvl", wireType)
			}
			m.Lvl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lvl |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlateIdx", wireType)
			}
			m.PlateIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlateIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			m.Loc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrExp", wireType)
			}
			m.CurrExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrExp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccExp", wireType)
			}
			m.AccExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccExp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTalent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTalent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTalent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTalent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTalent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTalent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTalent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTalent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTalent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTalent = fmt.Errorf("proto: unexpected end of group")
)
