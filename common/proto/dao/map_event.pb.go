// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/map_event.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MapStory struct {
	StoryId int64               `protobuf:"varint,1,opt,name=story_id,json=storyId,proto3" json:"story_id,omitempty" pk`
	Piece   int64               `protobuf:"varint,2,opt,name=piece,proto3" json:"piece,omitempty"`
	Status  models.RewardStatus `protobuf:"varint,3,opt,name=status,proto3,enum=models.RewardStatus" json:"status,omitempty"`
}

func (m *MapStory) Reset()      { *m = MapStory{} }
func (*MapStory) ProtoMessage() {}
func (*MapStory) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a43ceaac9f25b, []int{0}
}
func (m *MapStory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapStory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapStory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapStory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapStory.Merge(m, src)
}
func (m *MapStory) XXX_Size() int {
	return m.Size()
}
func (m *MapStory) XXX_DiscardUnknown() {
	xxx_messageInfo_MapStory.DiscardUnknown(m)
}

var xxx_messageInfo_MapStory proto.InternalMessageInfo

func (m *MapStory) GetStoryId() int64 {
	if m != nil {
		return m.StoryId
	}
	return 0
}

func (m *MapStory) GetPiece() int64 {
	if m != nil {
		return m.Piece
	}
	return 0
}

func (m *MapStory) GetStatus() models.RewardStatus {
	if m != nil {
		return m.Status
	}
	return models.RewardStatus_Locked
}

func (*MapStory) XXX_MessageName() string {
	return "dao.MapStory"
}

type StoryPiece struct {
	RoleId string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Drop   map[int64]int64 `protobuf:"bytes,2,rep,name=drop,proto3" json:"drop,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *StoryPiece) Reset()      { *m = StoryPiece{} }
func (*StoryPiece) ProtoMessage() {}
func (*StoryPiece) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a43ceaac9f25b, []int{1}
}
func (m *StoryPiece) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoryPiece) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoryPiece.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoryPiece) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoryPiece.Merge(m, src)
}
func (m *StoryPiece) XXX_Size() int {
	return m.Size()
}
func (m *StoryPiece) XXX_DiscardUnknown() {
	xxx_messageInfo_StoryPiece.DiscardUnknown(m)
}

var xxx_messageInfo_StoryPiece proto.InternalMessageInfo

func (m *StoryPiece) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *StoryPiece) GetDrop() map[int64]int64 {
	if m != nil {
		return m.Drop
	}
	return nil
}

func (*StoryPiece) XXX_MessageName() string {
	return "dao.StoryPiece"
}

type MapEvent struct {
	RoleId      string             `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Triggered   []*models.MapEvent `protobuf:"bytes,2,rep,name=triggered,proto3" json:"triggered,omitempty"`
	BattleMapId int64              `protobuf:"varint,3,opt,name=battle_map_id,json=battleMapId,proto3" json:"battle_map_id,omitempty"`
}

func (m *MapEvent) Reset()      { *m = MapEvent{} }
func (*MapEvent) ProtoMessage() {}
func (*MapEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a43ceaac9f25b, []int{2}
}
func (m *MapEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEvent.Merge(m, src)
}
func (m *MapEvent) XXX_Size() int {
	return m.Size()
}
func (m *MapEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MapEvent proto.InternalMessageInfo

func (m *MapEvent) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *MapEvent) GetTriggered() []*models.MapEvent {
	if m != nil {
		return m.Triggered
	}
	return nil
}

func (m *MapEvent) GetBattleMapId() int64 {
	if m != nil {
		return m.BattleMapId
	}
	return 0
}

func (*MapEvent) XXX_MessageName() string {
	return "dao.MapEvent"
}

type MapEventRefresh struct {
	RoleId    string                       `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Status    map[int64]models.EventStatus `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=models.EventStatus"`
	Refreshed int64                        `protobuf:"varint,3,opt,name=refreshed,proto3" json:"refreshed,omitempty"`
	Curr      int64                        `protobuf:"varint,4,opt,name=curr,proto3" json:"curr,omitempty"`
}

func (m *MapEventRefresh) Reset()      { *m = MapEventRefresh{} }
func (*MapEventRefresh) ProtoMessage() {}
func (*MapEventRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a43ceaac9f25b, []int{3}
}
func (m *MapEventRefresh) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapEventRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapEventRefresh.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapEventRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapEventRefresh.Merge(m, src)
}
func (m *MapEventRefresh) XXX_Size() int {
	return m.Size()
}
func (m *MapEventRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_MapEventRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_MapEventRefresh proto.InternalMessageInfo

func (m *MapEventRefresh) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *MapEventRefresh) GetStatus() map[int64]models.EventStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MapEventRefresh) GetRefreshed() int64 {
	if m != nil {
		return m.Refreshed
	}
	return 0
}

func (m *MapEventRefresh) GetCurr() int64 {
	if m != nil {
		return m.Curr
	}
	return 0
}

func (*MapEventRefresh) XXX_MessageName() string {
	return "dao.MapEventRefresh"
}

type AppointEvent struct {
	MapId  int64                     `protobuf:"varint,1,opt,name=mapId,proto3" json:"mapId,omitempty" pk`
	Events []*models.AppointMapEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *AppointEvent) Reset()      { *m = AppointEvent{} }
func (*AppointEvent) ProtoMessage() {}
func (*AppointEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a43ceaac9f25b, []int{4}
}
func (m *AppointEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppointEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppointEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppointEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppointEvent.Merge(m, src)
}
func (m *AppointEvent) XXX_Size() int {
	return m.Size()
}
func (m *AppointEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AppointEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AppointEvent proto.InternalMessageInfo

func (m *AppointEvent) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *AppointEvent) GetEvents() []*models.AppointMapEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (*AppointEvent) XXX_MessageName() string {
	return "dao.AppointEvent"
}
func init() {
	proto.RegisterType((*MapStory)(nil), "dao.MapStory")
	proto.RegisterType((*StoryPiece)(nil), "dao.StoryPiece")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.StoryPiece.DropEntry")
	proto.RegisterType((*MapEvent)(nil), "dao.MapEvent")
	proto.RegisterType((*MapEventRefresh)(nil), "dao.MapEventRefresh")
	proto.RegisterMapType((map[int64]models.EventStatus)(nil), "dao.MapEventRefresh.StatusEntry")
	proto.RegisterType((*AppointEvent)(nil), "dao.AppointEvent")
}

func init() { proto.RegisterFile("proto/dao/map_event.proto", fileDescriptor_af3a43ceaac9f25b) }

var fileDescriptor_af3a43ceaac9f25b = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0x66, 0xeb, 0xd6, 0xb7, 0x30, 0x26, 0x53, 0x89, 0xac, 0xaa, 0xbc, 0x92, 0x53,
	0x91, 0x58, 0x22, 0x95, 0x03, 0x13, 0x37, 0x26, 0x76, 0x28, 0xd2, 0x10, 0xca, 0x6e, 0x48, 0xa8,
	0xf2, 0x6a, 0x53, 0xa2, 0x35, 0xb1, 0x71, 0xdc, 0xa2, 0x9e, 0xf8, 0x0a, 0x5c, 0xf8, 0x0e, 0x7c,
	0x94, 0x1d, 0x77, 0xdc, 0x09, 0x41, 0x7a, 0xe1, 0x84, 0x10, 0x9f, 0x00, 0xc5, 0x4e, 0xd2, 0x52,
	0x21, 0xed, 0xf6, 0xe6, 0x79, 0x5e, 0xbf, 0x7f, 0x7e, 0x76, 0xe0, 0x40, 0x2a, 0xa1, 0x45, 0xc0,
	0xa8, 0x08, 0x62, 0x2a, 0x47, 0x7c, 0xce, 0x13, 0xed, 0x1b, 0x0d, 0x3b, 0x8c, 0x8a, 0x4e, 0x7b,
	0x22, 0x26, 0xc2, 0xe6, 0xe4, 0x91, 0xb5, 0x3a, 0xae, 0x55, 0x62, 0xc1, 0xf8, 0x34, 0x0d, 0x78,
	0x32, 0x8b, 0xd3, 0xc2, 0xe9, 0xfe, 0xe3, 0x6c, 0x94, 0xf4, 0x3e, 0xc0, 0xee, 0x19, 0x95, 0xe7,
	0x5a, 0xa8, 0x05, 0x7e, 0x08, 0xbb, 0x69, 0x1e, 0x8c, 0x22, 0xe6, 0xa2, 0x1e, 0xea, 0x3b, 0x27,
	0x8d, 0x3f, 0xdf, 0x0e, 0xeb, 0xf2, 0x32, 0xdc, 0x31, 0xfa, 0x90, 0xe1, 0x36, 0x6c, 0xcb, 0x88,
	0x8f, 0xb9, 0x5b, 0xcf, 0xfd, 0xd0, 0x7e, 0xe0, 0xc7, 0xd0, 0x48, 0x35, 0xd5, 0xb3, 0xd4, 0x75,
	0x7a, 0xa8, 0xbf, 0x37, 0x68, 0xfb, 0xb6, 0x9b, 0x1f, 0xf2, 0x8f, 0x54, 0xb1, 0x73, 0xe3, 0x85,
	0x45, 0x8e, 0xf7, 0x05, 0x01, 0x98, 0x86, 0xaf, 0xcd, 0xe1, 0x43, 0xd8, 0x51, 0x62, 0xca, 0xcb,
	0xa6, 0xcd, 0xaa, 0x69, 0x23, 0x97, 0x87, 0x0c, 0x1f, 0xc1, 0x16, 0x53, 0x42, 0xba, 0xf5, 0x9e,
	0xd3, 0x6f, 0x0d, 0x0e, 0x7c, 0x46, 0x85, 0xbf, 0x3a, 0xef, 0xbf, 0x50, 0x42, 0x9e, 0x26, 0x5a,
	0x2d, 0x42, 0x93, 0xd6, 0x79, 0x0a, 0xcd, 0x4a, 0xc2, 0xfb, 0xe0, 0x5c, 0xf2, 0x85, 0xdd, 0x26,
	0xcc, 0xc3, 0x7c, 0x83, 0x39, 0x9d, 0xce, 0xaa, 0x0d, 0xcc, 0xc7, 0xb3, 0xfa, 0x31, 0xf2, 0x3e,
	0x19, 0x14, 0xa7, 0x39, 0x9c, 0xdb, 0x87, 0xf2, 0xa1, 0xa9, 0x55, 0x34, 0x99, 0x70, 0xc5, 0x59,
	0x31, 0xd9, 0x7e, 0xb9, 0x75, 0x59, 0x25, 0x5c, 0xa5, 0x60, 0x0f, 0xee, 0x5e, 0x50, 0xad, 0xa7,
	0x7c, 0x94, 0xdf, 0x40, 0xc4, 0x0c, 0x29, 0x27, 0x6c, 0x59, 0xf1, 0x8c, 0xca, 0x21, 0xf3, 0x7e,
	0x21, 0xb8, 0x57, 0x9d, 0xe5, 0xef, 0x14, 0x4f, 0xdf, 0xdf, 0x3e, 0xc8, 0x71, 0xc5, 0xde, 0x4e,
	0xd1, 0x33, 0x7c, 0x36, 0xca, 0xf8, 0xf6, 0x0a, 0x2c, 0xa6, 0x22, 0x1f, 0x77, 0xa1, 0xa9, 0xac,
	0xcd, 0xcb, 0x71, 0x56, 0x02, 0xc6, 0xb0, 0x35, 0x9e, 0x29, 0xe5, 0x6e, 0x19, 0xc3, 0xc4, 0x9d,
	0x57, 0xd0, 0x5a, 0x2b, 0xf4, 0x1f, 0xb8, 0x8f, 0xd6, 0xe1, 0xee, 0x0d, 0xee, 0x97, 0x44, 0xcc,
	0x2c, 0xc5, 0x33, 0x58, 0x23, 0xfe, 0x16, 0xee, 0x3c, 0x97, 0x52, 0x44, 0x89, 0xb6, 0xd4, 0xbb,
	0xb0, 0x1d, 0xe7, 0x24, 0x36, 0x5e, 0x9f, 0x15, 0x71, 0x00, 0x0d, 0xf3, 0x72, 0xcb, 0x4d, 0x1f,
	0x94, 0xd5, 0x8b, 0x1a, 0xd5, 0xce, 0x45, 0xda, 0xc9, 0xcb, 0x9b, 0x1f, 0xa4, 0xf6, 0x35, 0x23,
	0xe8, 0x2a, 0x23, 0xe8, 0x3a, 0x23, 0xe8, 0x7b, 0x46, 0xd0, 0xcf, 0x8c, 0xd4, 0x7e, 0x67, 0x04,
	0x7d, 0x5e, 0x92, 0xda, 0xd5, 0x92, 0xa0, 0xeb, 0x25, 0xa9, 0xdd, 0x2c, 0x49, 0xed, 0x4d, 0x77,
	0x2c, 0xa2, 0xe4, 0x28, 0xe5, 0x6a, 0xce, 0x55, 0x30, 0x16, 0x71, 0x2c, 0x92, 0xa0, 0xfa, 0x15,
	0x2f, 0x1a, 0x26, 0x7c, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0x04, 0xdf, 0x16, 0xb0, 0x9e, 0x03,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapStory.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolStoryPiece.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEvent.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMapEventRefresh.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAppointEvent.Get().(proto.Message)
	})
}

var poolMapStory = &sync.Pool{New: func() interface{} { return &MapStory{} }}

func (m *MapStory) ReleasePool() { m.Reset(); poolMapStory.Put(m); m = nil }

var poolStoryPiece = &sync.Pool{New: func() interface{} { return &StoryPiece{} }}

func (m *StoryPiece) ReleasePool() { m.Reset(); poolStoryPiece.Put(m); m = nil }

var poolMapEvent = &sync.Pool{New: func() interface{} { return &MapEvent{} }}

func (m *MapEvent) ReleasePool() { m.Reset(); poolMapEvent.Put(m); m = nil }

var poolMapEventRefresh = &sync.Pool{New: func() interface{} { return &MapEventRefresh{} }}

func (m *MapEventRefresh) ReleasePool() { m.Reset(); poolMapEventRefresh.Put(m); m = nil }

var poolAppointEvent = &sync.Pool{New: func() interface{} { return &AppointEvent{} }}

func (m *AppointEvent) ReleasePool() { m.Reset(); poolAppointEvent.Put(m); m = nil }

func (m *MapStory) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.StoryId), 10)
}

func (m *MapStory) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.StoryId), 10)
}

func (m *MapStory) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *MapStory) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *MapStory) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *StoryPiece) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *StoryPiece) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *StoryPiece) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *StoryPiece) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *StoryPiece) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *MapEvent) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *MapEvent) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *MapEvent) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *MapEvent) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *MapEvent) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *MapEventRefresh) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *MapEventRefresh) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *MapEventRefresh) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *MapEventRefresh) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *MapEventRefresh) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *AppointEvent) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.MapId), 10)
}

func (m *AppointEvent) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.MapId), 10)
}

func (m *AppointEvent) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *AppointEvent) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *AppointEvent) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *MapStory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapStory)
	if !ok {
		that2, ok := that.(MapStory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StoryId != that1.StoryId {
		return false
	}
	if this.Piece != that1.Piece {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *StoryPiece) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StoryPiece)
	if !ok {
		that2, ok := that.(StoryPiece)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Drop) != len(that1.Drop) {
		return false
	}
	for i := range this.Drop {
		if this.Drop[i] != that1.Drop[i] {
			return false
		}
	}
	return true
}
func (this *MapEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEvent)
	if !ok {
		that2, ok := that.(MapEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Triggered) != len(that1.Triggered) {
		return false
	}
	for i := range this.Triggered {
		if !this.Triggered[i].Equal(that1.Triggered[i]) {
			return false
		}
	}
	if this.BattleMapId != that1.BattleMapId {
		return false
	}
	return true
}
func (this *MapEventRefresh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapEventRefresh)
	if !ok {
		that2, ok := that.(MapEventRefresh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if this.Status[i] != that1.Status[i] {
			return false
		}
	}
	if this.Refreshed != that1.Refreshed {
		return false
	}
	if this.Curr != that1.Curr {
		return false
	}
	return true
}
func (this *AppointEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppointEvent)
	if !ok {
		that2, ok := that.(AppointEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	return true
}
func (m *MapStory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapStory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapStory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Piece != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Piece))
		i--
		dAtA[i] = 0x10
	}
	if m.StoryId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.StoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StoryPiece) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoryPiece) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoryPiece) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Drop) > 0 {
		for k := range m.Drop {
			v := m.Drop[k]
			baseI := i
			i = encodeVarintMapEvent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMapEvent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMapEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMapEvent(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleMapId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.BattleMapId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Triggered) > 0 {
		for iNdEx := len(m.Triggered) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Triggered[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMapEvent(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapEventRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEventRefresh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapEventRefresh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Curr != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Curr))
		i--
		dAtA[i] = 0x20
	}
	if m.Refreshed != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.Refreshed))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		for k := range m.Status {
			v := m.Status[k]
			baseI := i
			i = encodeVarintMapEvent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintMapEvent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMapEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMapEvent(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppointEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppointEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppointEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MapId != 0 {
		i = encodeVarintMapEvent(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MapStory) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.StoryId != 0 {
		w.RawByte('"')
		w.RawString("story_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.StoryId))
		needWriteComma = true
	}
	if m.Piece != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("piece")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Piece))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *StoryPiece) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("drop")
	w.RawByte('"')
	w.RawByte(':')
	if m.Drop == nil {
		w.RawString("null")
	} else if len(m.Drop) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDrop := len(m.Drop)
		for k, v := range m.Drop {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlDrop--
			if mlDrop != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("triggered")
	w.RawByte('"')
	w.RawByte(':')
	if m.Triggered == nil {
		w.RawString("null")
	} else if len(m.Triggered) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Triggered {
			v.JsonBytes(w)
			if i != len(m.Triggered)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.BattleMapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleMapId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapEventRefresh) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("status")
	w.RawByte('"')
	w.RawByte(':')
	if m.Status == nil {
		w.RawString("null")
	} else if len(m.Status) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlStatus := len(m.Status)
		for k, v := range m.Status {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlStatus--
			if mlStatus != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Refreshed != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("refreshed")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Refreshed))
		needWriteComma = true
	}
	if m.Curr != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("curr")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Curr))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *AppointEvent) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("mapId")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("events")
	w.RawByte('"')
	w.RawByte(':')
	if m.Events == nil {
		w.RawString("null")
	} else if len(m.Events) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Events {
			v.JsonBytes(w)
			if i != len(m.Events)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MapStory) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapStory) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapStory) GoString() string {
	return m.String()
}

func (m *StoryPiece) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *StoryPiece) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *StoryPiece) GoString() string {
	return m.String()
}

func (m *MapEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEvent) GoString() string {
	return m.String()
}

func (m *MapEventRefresh) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MapEventRefresh) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MapEventRefresh) GoString() string {
	return m.String()
}

func (m *AppointEvent) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *AppointEvent) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *AppointEvent) GoString() string {
	return m.String()
}

func (m *MapStory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoryId != 0 {
		n += 1 + sovMapEvent(uint64(m.StoryId))
	}
	if m.Piece != 0 {
		n += 1 + sovMapEvent(uint64(m.Piece))
	}
	if m.Status != 0 {
		n += 1 + sovMapEvent(uint64(m.Status))
	}
	return n
}

func (m *StoryPiece) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMapEvent(uint64(l))
	}
	if len(m.Drop) > 0 {
		for k, v := range m.Drop {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapEvent(uint64(k)) + 1 + sovMapEvent(uint64(v))
			n += mapEntrySize + 1 + sovMapEvent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MapEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMapEvent(uint64(l))
	}
	if len(m.Triggered) > 0 {
		for _, e := range m.Triggered {
			l = e.Size()
			n += 1 + l + sovMapEvent(uint64(l))
		}
	}
	if m.BattleMapId != 0 {
		n += 1 + sovMapEvent(uint64(m.BattleMapId))
	}
	return n
}

func (m *MapEventRefresh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMapEvent(uint64(l))
	}
	if len(m.Status) > 0 {
		for k, v := range m.Status {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMapEvent(uint64(k)) + 1 + sovMapEvent(uint64(v))
			n += mapEntrySize + 1 + sovMapEvent(uint64(mapEntrySize))
		}
	}
	if m.Refreshed != 0 {
		n += 1 + sovMapEvent(uint64(m.Refreshed))
	}
	if m.Curr != 0 {
		n += 1 + sovMapEvent(uint64(m.Curr))
	}
	return n
}

func (m *AppointEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovMapEvent(uint64(m.MapId))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovMapEvent(uint64(l))
		}
	}
	return n
}

func sovMapEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapEvent(x uint64) (n int) {
	return sovMapEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MapStory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapStory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapStory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoryId", wireType)
			}
			m.StoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Piece", wireType)
			}
			m.Piece = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Piece |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= models.RewardStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoryPiece) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoryPiece: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoryPiece: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Drop == nil {
				m.Drop = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMapEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMapEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Drop[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggered = append(m.Triggered, &models.MapEvent{})
			if err := m.Triggered[len(m.Triggered)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleMapId", wireType)
			}
			m.BattleMapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleMapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEventRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapEventRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapEventRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = make(map[int64]models.EventStatus)
			}
			var mapkey int64
			var mapvalue models.EventStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= models.EventStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMapEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMapEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Status[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refreshed", wireType)
			}
			m.Refreshed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refreshed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curr", wireType)
			}
			m.Curr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curr |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppointEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppointEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppointEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &models.AppointMapEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMapEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapEvent = fmt.Errorf("proto: unexpected end of group")
)
