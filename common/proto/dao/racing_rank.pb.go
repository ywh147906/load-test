// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/racing_rank.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RacingRankStatus struct {
	RoleId      string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Enrolled    bool   `protobuf:"varint,2,opt,name=enrolled,proto3" json:"enrolled,omitempty"`
	NextRefresh int64  `protobuf:"varint,3,opt,name=next_refresh,json=nextRefresh,proto3" json:"next_refresh,omitempty"`
	//  DailyRewardGetInfo info = 4;
	Season       int64   `protobuf:"varint,4,opt,name=season,proto3" json:"season,omitempty"`
	HighestRank  int64   `protobuf:"varint,5,opt,name=highest_rank,json=highestRank,proto3" json:"highest_rank,omitempty"`
	RewardedRank []int64 `protobuf:"varint,6,rep,packed,name=rewarded_rank,json=rewardedRank,proto3" json:"rewarded_rank,omitempty"`
	EnrollTime   int64   `protobuf:"varint,7,opt,name=enroll_time,json=enrollTime,proto3" json:"enroll_time,omitempty"`
	EndTime      int64   `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *RacingRankStatus) Reset()      { *m = RacingRankStatus{} }
func (*RacingRankStatus) ProtoMessage() {}
func (*RacingRankStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_25178026f8ac1441, []int{0}
}
func (m *RacingRankStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRankStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRankStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRankStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRankStatus.Merge(m, src)
}
func (m *RacingRankStatus) XXX_Size() int {
	return m.Size()
}
func (m *RacingRankStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRankStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRankStatus proto.InternalMessageInfo

func (m *RacingRankStatus) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RacingRankStatus) GetEnrolled() bool {
	if m != nil {
		return m.Enrolled
	}
	return false
}

func (m *RacingRankStatus) GetNextRefresh() int64 {
	if m != nil {
		return m.NextRefresh
	}
	return 0
}

func (m *RacingRankStatus) GetSeason() int64 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *RacingRankStatus) GetHighestRank() int64 {
	if m != nil {
		return m.HighestRank
	}
	return 0
}

func (m *RacingRankStatus) GetRewardedRank() []int64 {
	if m != nil {
		return m.RewardedRank
	}
	return nil
}

func (m *RacingRankStatus) GetEnrollTime() int64 {
	if m != nil {
		return m.EnrollTime
	}
	return 0
}

func (m *RacingRankStatus) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (*RacingRankStatus) XXX_MessageName() string {
	return "dao.RacingRankStatus"
}

type RacingRankData struct {
	RoleId string             `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	List   []*models.RankItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	// 是否已经锁榜（锁定后榜单不再更新，后续由玩家触发排名结算）
	// 锁榜的操作只会由racingrank-server触发
	Locked       bool `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
	ForceRefresh bool `protobuf:"varint,4,opt,name=force_refresh,json=forceRefresh,proto3" json:"force_refresh,omitempty"`
}

func (m *RacingRankData) Reset()      { *m = RacingRankData{} }
func (*RacingRankData) ProtoMessage() {}
func (*RacingRankData) Descriptor() ([]byte, []int) {
	return fileDescriptor_25178026f8ac1441, []int{1}
}
func (m *RacingRankData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRankData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRankData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRankData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRankData.Merge(m, src)
}
func (m *RacingRankData) XXX_Size() int {
	return m.Size()
}
func (m *RacingRankData) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRankData.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRankData proto.InternalMessageInfo

func (m *RacingRankData) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RacingRankData) GetList() []*models.RankItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *RacingRankData) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *RacingRankData) GetForceRefresh() bool {
	if m != nil {
		return m.ForceRefresh
	}
	return false
}

func (*RacingRankData) XXX_MessageName() string {
	return "dao.RacingRankData"
}

type RacingRankMatch struct {
	RoleId      string           `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	CombatValue int64            `protobuf:"varint,2,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	Count       int64            `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	EndTime     int64            `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Self        *models.RankItem `protobuf:"bytes,5,opt,name=self,proto3" json:"self,omitempty"`
}

func (m *RacingRankMatch) Reset()      { *m = RacingRankMatch{} }
func (*RacingRankMatch) ProtoMessage() {}
func (*RacingRankMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_25178026f8ac1441, []int{2}
}
func (m *RacingRankMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RacingRankMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RacingRankMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RacingRankMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RacingRankMatch.Merge(m, src)
}
func (m *RacingRankMatch) XXX_Size() int {
	return m.Size()
}
func (m *RacingRankMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_RacingRankMatch.DiscardUnknown(m)
}

var xxx_messageInfo_RacingRankMatch proto.InternalMessageInfo

func (m *RacingRankMatch) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RacingRankMatch) GetCombatValue() int64 {
	if m != nil {
		return m.CombatValue
	}
	return 0
}

func (m *RacingRankMatch) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RacingRankMatch) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *RacingRankMatch) GetSelf() *models.RankItem {
	if m != nil {
		return m.Self
	}
	return nil
}

func (*RacingRankMatch) XXX_MessageName() string {
	return "dao.RacingRankMatch"
}
func init() {
	proto.RegisterType((*RacingRankStatus)(nil), "dao.RacingRankStatus")
	proto.RegisterType((*RacingRankData)(nil), "dao.RacingRankData")
	proto.RegisterType((*RacingRankMatch)(nil), "dao.RacingRankMatch")
}

func init() { proto.RegisterFile("proto/dao/racing_rank.proto", fileDescriptor_25178026f8ac1441) }

var fileDescriptor_25178026f8ac1441 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xb1, 0x8e, 0xd3, 0x30,
	0x18, 0xc7, 0xeb, 0xa6, 0x97, 0x16, 0xb7, 0xc0, 0x29, 0x3a, 0x71, 0xa1, 0x20, 0x37, 0x57, 0x18,
	0xb2, 0xd0, 0x48, 0xf0, 0x06, 0x27, 0x96, 0x43, 0x62, 0x31, 0x88, 0x81, 0x25, 0xf2, 0xc5, 0x5f,
	0xdb, 0xa8, 0x89, 0x7d, 0xb2, 0xdd, 0x83, 0xa7, 0x40, 0x0c, 0x3c, 0x02, 0x03, 0x8f, 0x72, 0xe3,
	0x8d, 0x37, 0x21, 0x48, 0x17, 0x46, 0xc4, 0x13, 0x20, 0xdb, 0xa1, 0x55, 0x11, 0x12, 0x9b, 0xbf,
	0xdf, 0xdf, 0x9f, 0xf3, 0xff, 0xfe, 0x5f, 0xf0, 0x83, 0x0b, 0x25, 0x8d, 0xcc, 0x38, 0x93, 0x99,
	0x62, 0x45, 0x29, 0x16, 0xb9, 0x62, 0x62, 0x35, 0x73, 0x34, 0x0a, 0x38, 0x93, 0xe3, 0xa3, 0x85,
	0x5c, 0x48, 0x7f, 0xcb, 0x9e, 0xbc, 0x34, 0x3e, 0xf6, 0xa4, 0x96, 0x1c, 0x2a, 0x9d, 0xed, 0x7a,
	0xc6, 0xf1, 0x9e, 0x00, 0x62, 0x5d, 0x6b, 0xaf, 0x4c, 0x3f, 0x74, 0xf1, 0x21, 0x75, 0xdf, 0xa0,
	0x4c, 0xac, 0x5e, 0x19, 0x66, 0xd6, 0x3a, 0x9a, 0xe0, 0xbe, 0x92, 0x15, 0xe4, 0x25, 0x8f, 0x51,
	0x82, 0xd2, 0x5b, 0xa7, 0xe1, 0xaf, 0xaf, 0x93, 0xee, 0xc5, 0x8a, 0x86, 0x16, 0x9f, 0xf1, 0x68,
	0x8c, 0x07, 0x20, 0x94, 0xac, 0x2a, 0xe0, 0x71, 0x37, 0x41, 0xe9, 0x80, 0x6e, 0xeb, 0xe8, 0x04,
	0x8f, 0x04, 0xbc, 0x37, 0xb9, 0x82, 0xb9, 0x02, 0xbd, 0x8c, 0x83, 0x04, 0xa5, 0x01, 0x1d, 0x5a,
	0x46, 0x3d, 0x8a, 0xee, 0xe1, 0x50, 0x03, 0xd3, 0x52, 0xc4, 0x3d, 0x27, 0xb6, 0x95, 0x6d, 0x5d,
	0x96, 0x8b, 0x25, 0x68, 0xe3, 0x06, 0x8e, 0x0f, 0x7c, 0x6b, 0xcb, 0xac, 0xc1, 0xe8, 0x11, 0xbe,
	0xad, 0xe0, 0x1d, 0x53, 0x1c, 0xb8, 0xbf, 0x13, 0x26, 0x41, 0x1a, 0xd0, 0xd1, 0x1f, 0xe8, 0x2e,
	0x4d, 0xf0, 0xd0, 0xdb, 0xc9, 0x4d, 0x59, 0x43, 0xdc, 0x77, 0xcf, 0x60, 0x8f, 0x5e, 0x97, 0x35,
	0x44, 0xf7, 0xad, 0x7f, 0xee, 0xd5, 0x81, 0x53, 0xfb, 0x20, 0xb8, 0x95, 0xa6, 0x9f, 0x10, 0xbe,
	0xb3, 0x0b, 0xe4, 0x39, 0x33, 0xec, 0xff, 0x71, 0x3c, 0xc6, 0xbd, 0xaa, 0xd4, 0x26, 0xee, 0x26,
	0x41, 0x3a, 0x7c, 0x7a, 0x38, 0xf3, 0x39, 0xcf, 0xec, 0x03, 0x67, 0x06, 0x6a, 0xea, 0x54, 0x3b,
	0x75, 0x25, 0x8b, 0x15, 0x70, 0x17, 0xc9, 0x80, 0xb6, 0x95, 0x1d, 0x69, 0x2e, 0x55, 0x01, 0xdb,
	0xc4, 0x7a, 0x4e, 0x1e, 0x39, 0xd8, 0x46, 0x36, 0xfd, 0x8c, 0xf0, 0xdd, 0x9d, 0xad, 0x97, 0xcc,
	0x14, 0xcb, 0xe8, 0xf8, 0x2f, 0x5f, 0x5b, 0x3f, 0x27, 0x78, 0x54, 0xc8, 0xfa, 0x9c, 0x99, 0xfc,
	0x92, 0x55, 0x6b, 0x70, 0x2b, 0x0a, 0xe8, 0xd0, 0xb3, 0x37, 0x16, 0x45, 0x47, 0xf8, 0xa0, 0x90,
	0x6b, 0x61, 0xda, 0xf5, 0xf8, 0x62, 0x2f, 0x97, 0xde, 0x5e, 0x2e, 0x76, 0x46, 0x0d, 0xd5, 0xdc,
	0xed, 0xe4, 0x9f, 0x33, 0x5a, 0xf5, 0xf4, 0xc5, 0xcd, 0x77, 0xd2, 0xf9, 0xd2, 0x10, 0x74, 0xd5,
	0x10, 0x74, 0xdd, 0x10, 0xf4, 0xad, 0x21, 0xe8, 0x47, 0x43, 0x3a, 0x3f, 0x1b, 0x82, 0x3e, 0x6e,
	0x48, 0xe7, 0x6a, 0x43, 0xd0, 0xf5, 0x86, 0x74, 0x6e, 0x36, 0xa4, 0xf3, 0xf6, 0x61, 0x21, 0x4b,
	0xf1, 0x44, 0x83, 0xba, 0x04, 0x95, 0x15, 0xb2, 0xae, 0xa5, 0xc8, 0xb6, 0xbf, 0xfe, 0x79, 0xe8,
	0x8e, 0xcf, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x72, 0x83, 0x8c, 0x8e, 0x0e, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRankStatus.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRankData.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolRacingRankMatch.Get().(proto.Message)
	})
}

var poolRacingRankStatus = &sync.Pool{New: func() interface{} { return &RacingRankStatus{} }}

func (m *RacingRankStatus) ReleasePool() { m.Reset(); poolRacingRankStatus.Put(m); m = nil }

var poolRacingRankData = &sync.Pool{New: func() interface{} { return &RacingRankData{} }}

func (m *RacingRankData) ReleasePool() { m.Reset(); poolRacingRankData.Put(m); m = nil }

var poolRacingRankMatch = &sync.Pool{New: func() interface{} { return &RacingRankMatch{} }}

func (m *RacingRankMatch) ReleasePool() { m.Reset(); poolRacingRankMatch.Put(m); m = nil }

func (m *RacingRankStatus) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *RacingRankStatus) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *RacingRankStatus) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RacingRankStatus) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RacingRankStatus) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *RacingRankData) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *RacingRankData) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *RacingRankData) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *RacingRankData) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *RacingRankData) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *RacingRankStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRankStatus)
	if !ok {
		that2, ok := that.(RacingRankStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Enrolled != that1.Enrolled {
		return false
	}
	if this.NextRefresh != that1.NextRefresh {
		return false
	}
	if this.Season != that1.Season {
		return false
	}
	if this.HighestRank != that1.HighestRank {
		return false
	}
	if len(this.RewardedRank) != len(that1.RewardedRank) {
		return false
	}
	for i := range this.RewardedRank {
		if this.RewardedRank[i] != that1.RewardedRank[i] {
			return false
		}
	}
	if this.EnrollTime != that1.EnrollTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	return true
}
func (this *RacingRankData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRankData)
	if !ok {
		that2, ok := that.(RacingRankData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Locked != that1.Locked {
		return false
	}
	if this.ForceRefresh != that1.ForceRefresh {
		return false
	}
	return true
}
func (this *RacingRankMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RacingRankMatch)
	if !ok {
		that2, ok := that.(RacingRankMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.CombatValue != that1.CombatValue {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if !this.Self.Equal(that1.Self) {
		return false
	}
	return true
}
func (m *RacingRankStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRankStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRankStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x40
	}
	if m.EnrollTime != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.EnrollTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.RewardedRank) > 0 {
		dAtA2 := make([]byte, len(m.RewardedRank)*10)
		var j1 int
		for _, num1 := range m.RewardedRank {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRacingRank(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if m.HighestRank != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.HighestRank))
		i--
		dAtA[i] = 0x28
	}
	if m.Season != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.Season))
		i--
		dAtA[i] = 0x20
	}
	if m.NextRefresh != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.NextRefresh))
		i--
		dAtA[i] = 0x18
	}
	if m.Enrolled {
		i--
		if m.Enrolled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintRacingRank(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RacingRankData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRankData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRankData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForceRefresh {
		i--
		if m.ForceRefresh {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Locked {
		i--
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRacingRank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintRacingRank(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RacingRankMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RacingRankMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RacingRankMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Self != nil {
		{
			size, err := m.Self.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRacingRank(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.EndTime != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.CombatValue != 0 {
		i = encodeVarintRacingRank(dAtA, i, uint64(m.CombatValue))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintRacingRank(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRacingRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovRacingRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *RacingRankStatus) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Enrolled {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("enrolled")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Enrolled)
		needWriteComma = true
	}
	if m.NextRefresh != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_refresh")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextRefresh))
		needWriteComma = true
	}
	if m.Season != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("season")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Season))
		needWriteComma = true
	}
	if m.HighestRank != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("highest_rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HighestRank))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("rewarded_rank")
	w.RawByte('"')
	w.RawByte(':')
	if m.RewardedRank == nil {
		w.RawString("null")
	} else if len(m.RewardedRank) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.RewardedRank {
			w.Int64(int64(v))
			if i != len(m.RewardedRank)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.EnrollTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("enroll_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EnrollTime))
		needWriteComma = true
	}
	if m.EndTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RacingRankData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("list")
	w.RawByte('"')
	w.RawByte(':')
	if m.List == nil {
		w.RawString("null")
	} else if len(m.List) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.List {
			v.JsonBytes(w)
			if i != len(m.List)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Locked {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("locked")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Locked)
		needWriteComma = true
	}
	if m.ForceRefresh {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("force_refresh")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.ForceRefresh)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RacingRankMatch) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.CombatValue != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("combat_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValue))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.EndTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("self")
	w.RawByte('"')
	w.RawByte(':')
	m.Self.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *RacingRankStatus) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRankStatus) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRankStatus) GoString() string {
	return m.String()
}

func (m *RacingRankData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRankData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRankData) GoString() string {
	return m.String()
}

func (m *RacingRankMatch) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *RacingRankMatch) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *RacingRankMatch) GoString() string {
	return m.String()
}

func (m *RacingRankStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovRacingRank(uint64(l))
	}
	if m.Enrolled {
		n += 2
	}
	if m.NextRefresh != 0 {
		n += 1 + sovRacingRank(uint64(m.NextRefresh))
	}
	if m.Season != 0 {
		n += 1 + sovRacingRank(uint64(m.Season))
	}
	if m.HighestRank != 0 {
		n += 1 + sovRacingRank(uint64(m.HighestRank))
	}
	if len(m.RewardedRank) > 0 {
		l = 0
		for _, e := range m.RewardedRank {
			l += sovRacingRank(uint64(e))
		}
		n += 1 + sovRacingRank(uint64(l)) + l
	}
	if m.EnrollTime != 0 {
		n += 1 + sovRacingRank(uint64(m.EnrollTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovRacingRank(uint64(m.EndTime))
	}
	return n
}

func (m *RacingRankData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovRacingRank(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRacingRank(uint64(l))
		}
	}
	if m.Locked {
		n += 2
	}
	if m.ForceRefresh {
		n += 2
	}
	return n
}

func (m *RacingRankMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovRacingRank(uint64(l))
	}
	if m.CombatValue != 0 {
		n += 1 + sovRacingRank(uint64(m.CombatValue))
	}
	if m.Count != 0 {
		n += 1 + sovRacingRank(uint64(m.Count))
	}
	if m.EndTime != 0 {
		n += 1 + sovRacingRank(uint64(m.EndTime))
	}
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovRacingRank(uint64(l))
	}
	return n
}

func sovRacingRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRacingRank(x uint64) (n int) {
	return sovRacingRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RacingRankStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RacingRankStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RacingRankStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRacingRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRacingRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enrolled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enrolled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefresh", wireType)
			}
			m.NextRefresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefresh |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestRank", wireType)
			}
			m.HighestRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestRank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRacingRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardedRank = append(m.RewardedRank, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRacingRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRacingRank
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRacingRank
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RewardedRank) == 0 {
					m.RewardedRank = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRacingRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardedRank = append(m.RewardedRank, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardedRank", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnrollTime", wireType)
			}
			m.EnrollTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnrollTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRankData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RacingRankData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RacingRankData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRacingRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRacingRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRacingRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRacingRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &models.RankItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceRefresh", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceRefresh = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RacingRankMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RacingRankMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RacingRankMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRacingRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRacingRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			m.CombatValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRacingRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRacingRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &models.RankItem{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRacingRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRacingRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRacingRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRacingRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRacingRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRacingRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRacingRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRacingRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRacingRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRacingRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRacingRank = fmt.Errorf("proto: unexpected end of group")
)
