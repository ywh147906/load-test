// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/guild_boss.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GuildBossUserInfo struct {
	RoleId     string           `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	AllRewards map[string]int64 `protobuf:"bytes,2,rep,name=all_rewards,json=allRewards,proto3" json:"all_rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GuildBossUserInfo) Reset()      { *m = GuildBossUserInfo{} }
func (*GuildBossUserInfo) ProtoMessage() {}
func (*GuildBossUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb68c44ffcecba0, []int{0}
}
func (m *GuildBossUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBossUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBossUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBossUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBossUserInfo.Merge(m, src)
}
func (m *GuildBossUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildBossUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBossUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBossUserInfo proto.InternalMessageInfo

func (m *GuildBossUserInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildBossUserInfo) GetAllRewards() map[string]int64 {
	if m != nil {
		return m.AllRewards
	}
	return nil
}

func (*GuildBossUserInfo) XXX_MessageName() string {
	return "dao.GuildBossUserInfo"
}

type GuildBossUserFightInfo struct {
	RoleId      string   `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	GuildDayIds []string `protobuf:"bytes,2,rep,name=guild_day_ids,json=guildDayIds,proto3" json:"guild_day_ids,omitempty"`
}

func (m *GuildBossUserFightInfo) Reset()      { *m = GuildBossUserFightInfo{} }
func (*GuildBossUserFightInfo) ProtoMessage() {}
func (*GuildBossUserFightInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb68c44ffcecba0, []int{1}
}
func (m *GuildBossUserFightInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBossUserFightInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBossUserFightInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBossUserFightInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBossUserFightInfo.Merge(m, src)
}
func (m *GuildBossUserFightInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildBossUserFightInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBossUserFightInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBossUserFightInfo proto.InternalMessageInfo

func (m *GuildBossUserFightInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildBossUserFightInfo) GetGuildDayIds() []string {
	if m != nil {
		return m.GuildDayIds
	}
	return nil
}

func (*GuildBossUserFightInfo) XXX_MessageName() string {
	return "dao.GuildBossUserFightInfo"
}

type GuildBossDamageAndFightCount struct {
	Damage int64 `protobuf:"varint,1,opt,name=damage,proto3" json:"damage,omitempty"`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GuildBossDamageAndFightCount) Reset()      { *m = GuildBossDamageAndFightCount{} }
func (*GuildBossDamageAndFightCount) ProtoMessage() {}
func (*GuildBossDamageAndFightCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb68c44ffcecba0, []int{2}
}
func (m *GuildBossDamageAndFightCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBossDamageAndFightCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBossDamageAndFightCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBossDamageAndFightCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBossDamageAndFightCount.Merge(m, src)
}
func (m *GuildBossDamageAndFightCount) XXX_Size() int {
	return m.Size()
}
func (m *GuildBossDamageAndFightCount) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBossDamageAndFightCount.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBossDamageAndFightCount proto.InternalMessageInfo

func (m *GuildBossDamageAndFightCount) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *GuildBossDamageAndFightCount) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*GuildBossDamageAndFightCount) XXX_MessageName() string {
	return "dao.GuildBossDamageAndFightCount"
}

// 只是记录，用于删除过期的GuildBoos
type GuildBossList struct {
	GuildId     string   `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty" pk`
	GuildDayIds []string `protobuf:"bytes,2,rep,name=guild_day_ids,json=guildDayIds,proto3" json:"guild_day_ids,omitempty"`
}

func (m *GuildBossList) Reset()      { *m = GuildBossList{} }
func (*GuildBossList) ProtoMessage() {}
func (*GuildBossList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb68c44ffcecba0, []int{3}
}
func (m *GuildBossList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBossList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBossList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBossList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBossList.Merge(m, src)
}
func (m *GuildBossList) XXX_Size() int {
	return m.Size()
}
func (m *GuildBossList) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBossList.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBossList proto.InternalMessageInfo

func (m *GuildBossList) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildBossList) GetGuildDayIds() []string {
	if m != nil {
		return m.GuildDayIds
	}
	return nil
}

func (*GuildBossList) XXX_MessageName() string {
	return "dao.GuildBossList"
}

type GuildBoss struct {
	GuildDayId  string                                   `protobuf:"bytes,1,opt,name=guild_day_id,json=guildDayId,proto3" json:"guild_day_id,omitempty" pk`
	Damages     map[string]*GuildBossDamageAndFightCount `protobuf:"bytes,2,rep,name=damages,proto3" json:"damages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalDamage int64                                    `protobuf:"varint,3,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	Day         int64                                    `protobuf:"varint,4,opt,name=day,proto3" json:"day,omitempty"`
	IsCheck     bool                                     `protobuf:"varint,5,opt,name=is_check,json=isCheck,proto3" json:"is_check,omitempty"`
}

func (m *GuildBoss) Reset()      { *m = GuildBoss{} }
func (*GuildBoss) ProtoMessage() {}
func (*GuildBoss) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb68c44ffcecba0, []int{4}
}
func (m *GuildBoss) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildBoss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildBoss.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildBoss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildBoss.Merge(m, src)
}
func (m *GuildBoss) XXX_Size() int {
	return m.Size()
}
func (m *GuildBoss) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildBoss.DiscardUnknown(m)
}

var xxx_messageInfo_GuildBoss proto.InternalMessageInfo

func (m *GuildBoss) GetGuildDayId() string {
	if m != nil {
		return m.GuildDayId
	}
	return ""
}

func (m *GuildBoss) GetDamages() map[string]*GuildBossDamageAndFightCount {
	if m != nil {
		return m.Damages
	}
	return nil
}

func (m *GuildBoss) GetTotalDamage() int64 {
	if m != nil {
		return m.TotalDamage
	}
	return 0
}

func (m *GuildBoss) GetDay() int64 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *GuildBoss) GetIsCheck() bool {
	if m != nil {
		return m.IsCheck
	}
	return false
}

func (*GuildBoss) XXX_MessageName() string {
	return "dao.GuildBoss"
}
func init() {
	proto.RegisterType((*GuildBossUserInfo)(nil), "dao.GuildBossUserInfo")
	proto.RegisterMapType((map[string]int64)(nil), "dao.GuildBossUserInfo.AllRewardsEntry")
	proto.RegisterType((*GuildBossUserFightInfo)(nil), "dao.GuildBossUserFightInfo")
	proto.RegisterType((*GuildBossDamageAndFightCount)(nil), "dao.GuildBossDamageAndFightCount")
	proto.RegisterType((*GuildBossList)(nil), "dao.GuildBossList")
	proto.RegisterType((*GuildBoss)(nil), "dao.GuildBoss")
	proto.RegisterMapType((map[string]*GuildBossDamageAndFightCount)(nil), "dao.GuildBoss.DamagesEntry")
}

func init() { proto.RegisterFile("proto/dao/guild_boss.proto", fileDescriptor_5eb68c44ffcecba0) }

var fileDescriptor_5eb68c44ffcecba0 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xf5, 0xd8, 0x34, 0x8f, 0xeb, 0x54, 0xc0, 0xa8, 0xaa, 0x4c, 0xa8, 0xa6, 0x89, 0x17, 0xc8,
	0x1b, 0x1c, 0xa9, 0x08, 0x81, 0x90, 0x58, 0x34, 0x2d, 0x54, 0x41, 0x5d, 0x59, 0x82, 0x05, 0x52,
	0x65, 0x4d, 0x3d, 0xc6, 0xb5, 0xe2, 0x78, 0x2a, 0x8f, 0x53, 0xe4, 0xbf, 0x60, 0xcf, 0x0f, 0xf0,
	0x11, 0x7c, 0x40, 0x97, 0x5d, 0x76, 0x85, 0xc0, 0xd9, 0xb0, 0x44, 0x7c, 0x01, 0xf2, 0x4c, 0x62,
	0x92, 0xb6, 0x8b, 0xec, 0xee, 0x3d, 0xf7, 0x75, 0x8e, 0x8f, 0x07, 0xba, 0xe7, 0x19, 0xcf, 0xf9,
	0x80, 0x51, 0x3e, 0x88, 0xa6, 0x71, 0xc2, 0xfc, 0x53, 0x2e, 0x84, 0x2b, 0x41, 0x6c, 0x30, 0xca,
	0xbb, 0x5b, 0x11, 0x8f, 0xb8, 0x6a, 0xaa, 0x22, 0x55, 0xb2, 0xbf, 0x23, 0x78, 0x78, 0x54, 0xf5,
	0x0f, 0xb9, 0x10, 0xef, 0x45, 0x98, 0x8d, 0xd2, 0x4f, 0x1c, 0xef, 0x42, 0x33, 0xe3, 0x49, 0xe8,
	0xc7, 0xcc, 0x42, 0x3d, 0xe4, 0xb4, 0x87, 0x8d, 0xbf, 0x3f, 0x76, 0xf5, 0xf3, 0xb1, 0xd7, 0xa8,
	0xe0, 0x11, 0xc3, 0x47, 0x60, 0xd2, 0x24, 0xf1, 0xb3, 0xf0, 0x33, 0xcd, 0x98, 0xb0, 0xf4, 0x9e,
	0xe1, 0x98, 0x7b, 0x4f, 0x5c, 0x46, 0xb9, 0x7b, 0x6b, 0x9b, 0xbb, 0x9f, 0x24, 0x9e, 0x6a, 0x7c,
	0x93, 0xe6, 0x59, 0xe1, 0x01, 0xad, 0x81, 0xee, 0x6b, 0xb8, 0x7f, 0xa3, 0x8c, 0x1f, 0x80, 0x31,
	0x0e, 0x0b, 0x75, 0xd8, 0xab, 0x42, 0xbc, 0x05, 0x1b, 0x17, 0x34, 0x99, 0x86, 0x96, 0xde, 0x43,
	0x8e, 0xe1, 0xa9, 0xe4, 0x95, 0xfe, 0x12, 0xd9, 0x27, 0xb0, 0xbd, 0x72, 0xef, 0x6d, 0x1c, 0x9d,
	0xe5, 0xeb, 0x49, 0xb0, 0x61, 0x53, 0x7d, 0x28, 0x46, 0x0b, 0x3f, 0x9e, 0x8b, 0x68, 0x7b, 0xa6,
	0x04, 0x0f, 0x69, 0x31, 0x62, 0xc2, 0x3e, 0x86, 0x9d, 0x7a, 0xfd, 0x21, 0x9d, 0xd0, 0x28, 0xdc,
	0x4f, 0x99, 0xbc, 0x71, 0xc0, 0xa7, 0x69, 0x8e, 0xb7, 0xa1, 0xc1, 0x24, 0x2c, 0x6f, 0x18, 0xde,
	0x3c, 0xab, 0x08, 0x07, 0x55, 0xc3, 0x82, 0xb0, 0x4c, 0xec, 0x0f, 0xb0, 0x59, 0x6f, 0x3b, 0x8e,
	0x45, 0x8e, 0xfb, 0xd0, 0x52, 0x14, 0x6e, 0x91, 0x6c, 0x4a, 0x7c, 0x4d, 0x96, 0x5f, 0x75, 0x68,
	0xd7, 0x8b, 0xb1, 0x03, 0x9d, 0xe5, 0x89, 0x1b, 0x8b, 0xe1, 0xff, 0x20, 0x7e, 0x0e, 0x4d, 0xc5,
	0x77, 0x61, 0xe0, 0xe3, 0x55, 0x03, 0x5d, 0x25, 0x79, 0xee, 0xda, 0xa2, 0x17, 0xf7, 0xa1, 0x93,
	0xf3, 0x9c, 0x26, 0xfe, 0x5c, 0xba, 0x21, 0x35, 0x9a, 0x12, 0x53, 0x13, 0x95, 0x85, 0x8c, 0x16,
	0xd6, 0x3d, 0x59, 0xa9, 0x42, 0xfc, 0x08, 0x5a, 0xb1, 0xf0, 0x83, 0xb3, 0x30, 0x18, 0x5b, 0x1b,
	0x3d, 0xe4, 0xb4, 0xbc, 0x66, 0x2c, 0x0e, 0xaa, 0xb4, 0x7b, 0x02, 0x9d, 0xe5, 0x43, 0x77, 0xf8,
	0xff, 0x62, 0xd9, 0x7f, 0x73, 0xaf, 0xbf, 0x4a, 0xf3, 0x0e, 0x63, 0x96, 0x7e, 0x91, 0xe1, 0xbb,
	0xeb, 0x5f, 0x44, 0xfb, 0x56, 0x12, 0x74, 0x59, 0x12, 0x74, 0x55, 0x12, 0xf4, 0xb3, 0x24, 0xe8,
	0x77, 0x49, 0xb4, 0x3f, 0x25, 0x41, 0x5f, 0x66, 0x44, 0xbb, 0x9c, 0x11, 0x74, 0x35, 0x23, 0xda,
	0xf5, 0x8c, 0x68, 0x1f, 0x77, 0x02, 0x1e, 0xa7, 0x4f, 0x45, 0x98, 0x5d, 0x84, 0xd9, 0x20, 0xe0,
	0x93, 0x09, 0x4f, 0x07, 0xf5, 0xcb, 0x3a, 0x6d, 0xc8, 0xf0, 0xd9, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x23, 0x84, 0x00, 0xb0, 0x6d, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBossUserInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBossUserFightInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBossDamageAndFightCount.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBossList.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildBoss.Get().(proto.Message)
	})
}

var poolGuildBossUserInfo = &sync.Pool{New: func() interface{} { return &GuildBossUserInfo{} }}

func (m *GuildBossUserInfo) ReleasePool() { m.Reset(); poolGuildBossUserInfo.Put(m); m = nil }

var poolGuildBossUserFightInfo = &sync.Pool{New: func() interface{} { return &GuildBossUserFightInfo{} }}

func (m *GuildBossUserFightInfo) ReleasePool() { m.Reset(); poolGuildBossUserFightInfo.Put(m); m = nil }

var poolGuildBossDamageAndFightCount = &sync.Pool{New: func() interface{} { return &GuildBossDamageAndFightCount{} }}

func (m *GuildBossDamageAndFightCount) ReleasePool() {
	m.Reset()
	poolGuildBossDamageAndFightCount.Put(m)
	m = nil
}

var poolGuildBossList = &sync.Pool{New: func() interface{} { return &GuildBossList{} }}

func (m *GuildBossList) ReleasePool() { m.Reset(); poolGuildBossList.Put(m); m = nil }

var poolGuildBoss = &sync.Pool{New: func() interface{} { return &GuildBoss{} }}

func (m *GuildBoss) ReleasePool() { m.Reset(); poolGuildBoss.Put(m); m = nil }

func (m *GuildBossUserInfo) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *GuildBossUserInfo) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *GuildBossUserInfo) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildBossUserInfo) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildBossUserInfo) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GuildBossUserFightInfo) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *GuildBossUserFightInfo) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *GuildBossUserFightInfo) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildBossUserFightInfo) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildBossUserFightInfo) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GuildBossList) PK() string {
	if m == nil {
		return ""
	}
	return m.GuildId
}

func (m *GuildBossList) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.GuildId...)
}

func (m *GuildBossList) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildBossList) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildBossList) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *GuildBoss) PK() string {
	if m == nil {
		return ""
	}
	return m.GuildDayId
}

func (m *GuildBoss) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.GuildDayId...)
}

func (m *GuildBoss) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *GuildBoss) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *GuildBoss) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *GuildBossUserInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBossUserInfo)
	if !ok {
		that2, ok := that.(GuildBossUserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.AllRewards) != len(that1.AllRewards) {
		return false
	}
	for i := range this.AllRewards {
		if this.AllRewards[i] != that1.AllRewards[i] {
			return false
		}
	}
	return true
}
func (this *GuildBossUserFightInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBossUserFightInfo)
	if !ok {
		that2, ok := that.(GuildBossUserFightInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.GuildDayIds) != len(that1.GuildDayIds) {
		return false
	}
	for i := range this.GuildDayIds {
		if this.GuildDayIds[i] != that1.GuildDayIds[i] {
			return false
		}
	}
	return true
}
func (this *GuildBossDamageAndFightCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBossDamageAndFightCount)
	if !ok {
		that2, ok := that.(GuildBossDamageAndFightCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GuildBossList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBossList)
	if !ok {
		that2, ok := that.(GuildBossList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if len(this.GuildDayIds) != len(that1.GuildDayIds) {
		return false
	}
	for i := range this.GuildDayIds {
		if this.GuildDayIds[i] != that1.GuildDayIds[i] {
			return false
		}
	}
	return true
}
func (this *GuildBoss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildBoss)
	if !ok {
		that2, ok := that.(GuildBoss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildDayId != that1.GuildDayId {
		return false
	}
	if len(this.Damages) != len(that1.Damages) {
		return false
	}
	for i := range this.Damages {
		if !this.Damages[i].Equal(that1.Damages[i]) {
			return false
		}
	}
	if this.TotalDamage != that1.TotalDamage {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if this.IsCheck != that1.IsCheck {
		return false
	}
	return true
}
func (m *GuildBossUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBossUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBossUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllRewards) > 0 {
		for k := range m.AllRewards {
			v := m.AllRewards[k]
			baseI := i
			i = encodeVarintGuildBoss(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGuildBoss(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGuildBoss(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildBossUserFightInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBossUserFightInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBossUserFightInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuildDayIds) > 0 {
		for iNdEx := len(m.GuildDayIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GuildDayIds[iNdEx])
			copy(dAtA[i:], m.GuildDayIds[iNdEx])
			i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.GuildDayIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildBossDamageAndFightCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBossDamageAndFightCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBossDamageAndFightCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Damage != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildBossList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBossList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBossList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuildDayIds) > 0 {
		for iNdEx := len(m.GuildDayIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GuildDayIds[iNdEx])
			copy(dAtA[i:], m.GuildDayIds[iNdEx])
			i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.GuildDayIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildBoss) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBoss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildBoss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCheck {
		i--
		if m.IsCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Day != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.Day))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalDamage != 0 {
		i = encodeVarintGuildBoss(dAtA, i, uint64(m.TotalDamage))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Damages) > 0 {
		for k := range m.Damages {
			v := m.Damages[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGuildBoss(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGuildBoss(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGuildBoss(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GuildDayId) > 0 {
		i -= len(m.GuildDayId)
		copy(dAtA[i:], m.GuildDayId)
		i = encodeVarintGuildBoss(dAtA, i, uint64(len(m.GuildDayId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuildBoss(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuildBoss(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *GuildBossUserInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("all_rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.AllRewards == nil {
		w.RawString("null")
	} else if len(m.AllRewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAllRewards := len(m.AllRewards)
		for k, v := range m.AllRewards {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAllRewards--
			if mlAllRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBossUserFightInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("guild_day_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.GuildDayIds == nil {
		w.RawString("null")
	} else if len(m.GuildDayIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.GuildDayIds {
			w.String(v)
			if i != len(m.GuildDayIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBossDamageAndFightCount) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Damage != 0 {
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBossList) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildId != "" {
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("guild_day_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.GuildDayIds == nil {
		w.RawString("null")
	} else if len(m.GuildDayIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.GuildDayIds {
			w.String(v)
			if i != len(m.GuildDayIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBoss) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildDayId != "" {
		w.RawByte('"')
		w.RawString("guild_day_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildDayId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("damages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Damages == nil {
		w.RawString("null")
	} else if len(m.Damages) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDamages := len(m.Damages)
		for k, v := range m.Damages {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlDamages--
			if mlDamages != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.TotalDamage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalDamage))
		needWriteComma = true
	}
	if m.Day != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("day")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Day))
		needWriteComma = true
	}
	if m.IsCheck {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_check")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsCheck)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildBossUserInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBossUserInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBossUserInfo) GoString() string {
	return m.String()
}

func (m *GuildBossUserFightInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBossUserFightInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBossUserFightInfo) GoString() string {
	return m.String()
}

func (m *GuildBossDamageAndFightCount) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBossDamageAndFightCount) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBossDamageAndFightCount) GoString() string {
	return m.String()
}

func (m *GuildBossList) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBossList) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBossList) GoString() string {
	return m.String()
}

func (m *GuildBoss) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildBoss) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildBoss) GoString() string {
	return m.String()
}

func (m *GuildBossUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuildBoss(uint64(l))
	}
	if len(m.AllRewards) > 0 {
		for k, v := range m.AllRewards {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGuildBoss(uint64(len(k))) + 1 + sovGuildBoss(uint64(v))
			n += mapEntrySize + 1 + sovGuildBoss(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GuildBossUserFightInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuildBoss(uint64(l))
	}
	if len(m.GuildDayIds) > 0 {
		for _, s := range m.GuildDayIds {
			l = len(s)
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	return n
}

func (m *GuildBossDamageAndFightCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Damage != 0 {
		n += 1 + sovGuildBoss(uint64(m.Damage))
	}
	if m.Count != 0 {
		n += 1 + sovGuildBoss(uint64(m.Count))
	}
	return n
}

func (m *GuildBossList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuildBoss(uint64(l))
	}
	if len(m.GuildDayIds) > 0 {
		for _, s := range m.GuildDayIds {
			l = len(s)
			n += 1 + l + sovGuildBoss(uint64(l))
		}
	}
	return n
}

func (m *GuildBoss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildDayId)
	if l > 0 {
		n += 1 + l + sovGuildBoss(uint64(l))
	}
	if len(m.Damages) > 0 {
		for k, v := range m.Damages {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGuildBoss(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGuildBoss(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGuildBoss(uint64(mapEntrySize))
		}
	}
	if m.TotalDamage != 0 {
		n += 1 + sovGuildBoss(uint64(m.TotalDamage))
	}
	if m.Day != 0 {
		n += 1 + sovGuildBoss(uint64(m.Day))
	}
	if m.IsCheck {
		n += 2
	}
	return n
}

func sovGuildBoss(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuildBoss(x uint64) (n int) {
	return sovGuildBoss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuildBossUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBossUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBossUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllRewards == nil {
				m.AllRewards = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuildBoss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuildBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGuildBoss
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGuildBoss
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuildBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuildBoss(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGuildBoss
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllRewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBossUserFightInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBossUserFightInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBossUserFightInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildDayIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildDayIds = append(m.GuildDayIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBossDamageAndFightCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBossDamageAndFightCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBossDamageAndFightCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBossList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBossList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBossList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildDayIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildDayIds = append(m.GuildDayIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBoss) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBoss: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBoss: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildDayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildDayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildBoss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Damages == nil {
				m.Damages = make(map[string]*GuildBossDamageAndFightCount)
			}
			var mapkey string
			var mapvalue *GuildBossDamageAndFightCount
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuildBoss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuildBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGuildBoss
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGuildBoss
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuildBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGuildBoss
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGuildBoss
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GuildBossDamageAndFightCount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuildBoss(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGuildBoss
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Damages[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDamage", wireType)
			}
			m.TotalDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDamage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCheck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuildBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuildBoss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuildBoss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuildBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuildBoss
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuildBoss
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuildBoss
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuildBoss        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuildBoss          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuildBoss = fmt.Errorf("proto: unexpected end of group")
)
