// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/atlas.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Atlas struct {
	AtlasType models.AtlasType              `protobuf:"varint,1,opt,name=atlas_type,json=atlasType,proto3,enum=models.AtlasType" json:"atlas_type,omitempty" pk`
	Each      map[int64]models.RewardStatus `protobuf:"bytes,2,rep,name=each,proto3" json:"each,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=models.RewardStatus"`
	Progress  int64                         `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (m *Atlas) Reset()      { *m = Atlas{} }
func (*Atlas) ProtoMessage() {}
func (*Atlas) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c30befa470beef, []int{0}
}
func (m *Atlas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Atlas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Atlas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Atlas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Atlas.Merge(m, src)
}
func (m *Atlas) XXX_Size() int {
	return m.Size()
}
func (m *Atlas) XXX_DiscardUnknown() {
	xxx_messageInfo_Atlas.DiscardUnknown(m)
}

var xxx_messageInfo_Atlas proto.InternalMessageInfo

func (m *Atlas) GetAtlasType() models.AtlasType {
	if m != nil {
		return m.AtlasType
	}
	return models.AtlasType_EquipAtlas
}

func (m *Atlas) GetEach() map[int64]models.RewardStatus {
	if m != nil {
		return m.Each
	}
	return nil
}

func (m *Atlas) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (*Atlas) XXX_MessageName() string {
	return "dao.Atlas"
}
func init() {
	proto.RegisterType((*Atlas)(nil), "dao.Atlas")
	proto.RegisterMapType((map[int64]models.RewardStatus)(nil), "dao.Atlas.EachEntry")
}

func init() { proto.RegisterFile("proto/dao/atlas.proto", fileDescriptor_d9c30befa470beef) }

var fileDescriptor_d9c30befa470beef = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x33, 0xc9, 0xdf, 0xf2, 0x77, 0x04, 0xd1, 0x50, 0x21, 0x04, 0x19, 0x8b, 0xab, 0x20,
	0x98, 0x40, 0xdd, 0x14, 0x77, 0x16, 0xba, 0x11, 0xdc, 0x8c, 0xae, 0xdc, 0xc8, 0x98, 0x0c, 0xad,
	0xb4, 0xc9, 0x0d, 0x33, 0xd3, 0x4a, 0xde, 0xc2, 0xc7, 0xf0, 0x51, 0xba, 0xec, 0x4a, 0xba, 0x12,
	0x9d, 0x6c, 0x5c, 0x8a, 0x4f, 0x20, 0x9d, 0xb1, 0x41, 0xdc, 0x9d, 0x7b, 0xce, 0x77, 0xe0, 0x70,
	0xf1, 0x41, 0x29, 0x40, 0x41, 0x92, 0x31, 0x48, 0x98, 0x9a, 0x31, 0x19, 0x9b, 0xdb, 0xf7, 0x32,
	0x06, 0x61, 0x77, 0x0c, 0x63, 0xb0, 0xf9, 0x46, 0xd9, 0x28, 0x0c, 0xac, 0x93, 0x43, 0xc6, 0x67,
	0xf2, 0x77, 0xe9, 0x4f, 0xc2, 0x8b, 0x79, 0xfe, 0x93, 0x1c, 0xbf, 0x20, 0xdc, 0xba, 0xd8, 0x90,
	0xfe, 0x00, 0x63, 0x53, 0xb9, 0x53, 0x55, 0xc9, 0x03, 0xd4, 0x43, 0xd1, 0x6e, 0x7f, 0x3f, 0xb6,
	0x95, 0xd8, 0x20, 0x37, 0x55, 0xc9, 0x87, 0xed, 0xaf, 0xd7, 0x23, 0xb7, 0x9c, 0xd2, 0x0e, 0xdb,
	0x5a, 0x7e, 0x84, 0xff, 0x71, 0x96, 0x4e, 0x02, 0xb7, 0xe7, 0x45, 0x3b, 0xfd, 0x6e, 0x9c, 0x31,
	0xb0, 0x85, 0x78, 0xc4, 0xd2, 0xc9, 0xa8, 0x50, 0xa2, 0xa2, 0x86, 0xf0, 0x43, 0xfc, 0xbf, 0x14,
	0x30, 0x16, 0x5c, 0xca, 0xc0, 0xeb, 0xa1, 0xc8, 0xa3, 0xcd, 0x1d, 0x5e, 0xe1, 0x4e, 0x83, 0xfb,
	0x7b, 0xd8, 0x9b, 0xf2, 0xca, 0xac, 0xf0, 0xe8, 0x46, 0xfa, 0x27, 0xb8, 0xb5, 0x60, 0xb3, 0x39,
	0x0f, 0x5c, 0xb3, 0xac, 0xbb, 0x5d, 0x46, 0xf9, 0x23, 0x13, 0xd9, 0xb5, 0x62, 0x6a, 0x2e, 0xa9,
	0x45, 0xce, 0xdd, 0x01, 0x1a, 0x5e, 0xae, 0xdf, 0x89, 0xf3, 0xac, 0x09, 0x5a, 0x6a, 0x82, 0x56,
	0x9a, 0xa0, 0x37, 0x4d, 0xd0, 0x87, 0x26, 0xce, 0xa7, 0x26, 0xe8, 0xa9, 0x26, 0xce, 0xb2, 0x26,
	0x68, 0x55, 0x13, 0x67, 0x5d, 0x13, 0xe7, 0xf6, 0x30, 0x85, 0x87, 0xe2, 0x54, 0x72, 0xb1, 0xe0,
	0x22, 0x49, 0x21, 0xcf, 0xa1, 0x48, 0x9a, 0xff, 0xdf, 0xb7, 0x8d, 0x3c, 0xfb, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0x39, 0x3c, 0x34, 0x93, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolAtlas.Get().(proto.Message)
	})
}

var poolAtlas = &sync.Pool{New: func() interface{} { return &Atlas{} }}

func (m *Atlas) ReleasePool() { m.Reset(); poolAtlas.Put(m); m = nil }

func (m *Atlas) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.AtlasType), 10)
}

func (m *Atlas) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.AtlasType), 10)
}

func (m *Atlas) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Atlas) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Atlas) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Atlas) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Atlas)
	if !ok {
		that2, ok := that.(Atlas)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AtlasType != that1.AtlasType {
		return false
	}
	if len(this.Each) != len(that1.Each) {
		return false
	}
	for i := range this.Each {
		if this.Each[i] != that1.Each[i] {
			return false
		}
	}
	if this.Progress != that1.Progress {
		return false
	}
	return true
}
func (m *Atlas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Atlas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Atlas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Progress != 0 {
		i = encodeVarintAtlas(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Each) > 0 {
		for k := range m.Each {
			v := m.Each[k]
			baseI := i
			i = encodeVarintAtlas(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintAtlas(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintAtlas(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AtlasType != 0 {
		i = encodeVarintAtlas(dAtA, i, uint64(m.AtlasType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAtlas(dAtA []byte, offset int, v uint64) int {
	offset -= sovAtlas(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Atlas) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AtlasType != 0 {
		w.RawByte('"')
		w.RawString("atlas_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AtlasType))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("each")
	w.RawByte('"')
	w.RawByte(':')
	if m.Each == nil {
		w.RawString("null")
	} else if len(m.Each) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEach := len(m.Each)
		for k, v := range m.Each {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEach--
			if mlEach != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Progress != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("progress")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Progress))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Atlas) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Atlas) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Atlas) GoString() string {
	return m.String()
}

func (m *Atlas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AtlasType != 0 {
		n += 1 + sovAtlas(uint64(m.AtlasType))
	}
	if len(m.Each) > 0 {
		for k, v := range m.Each {
			_ = k
			_ = v
			mapEntrySize := 1 + sovAtlas(uint64(k)) + 1 + sovAtlas(uint64(v))
			n += mapEntrySize + 1 + sovAtlas(uint64(mapEntrySize))
		}
	}
	if m.Progress != 0 {
		n += 1 + sovAtlas(uint64(m.Progress))
	}
	return n
}

func sovAtlas(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAtlas(x uint64) (n int) {
	return sovAtlas(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Atlas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Atlas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Atlas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtlasType", wireType)
			}
			m.AtlasType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtlasType |= models.AtlasType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Each", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtlas
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAtlas
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Each == nil {
				m.Each = make(map[int64]models.RewardStatus)
			}
			var mapkey int64
			var mapvalue models.RewardStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAtlas
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAtlas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAtlas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= models.RewardStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAtlas(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAtlas
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Each[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAtlas(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAtlas
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAtlas
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAtlas
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAtlas        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAtlas          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAtlas = fmt.Errorf("proto: unexpected end of group")
)
