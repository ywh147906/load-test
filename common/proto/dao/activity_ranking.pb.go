// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/activity_ranking.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ActivityManagerInfo struct {
	ServerId string                                  `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty" pk`
	Infos    map[string]*models.ActivityRanking_Info `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ActivityManagerInfo) Reset()      { *m = ActivityManagerInfo{} }
func (*ActivityManagerInfo) ProtoMessage() {}
func (*ActivityManagerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff896680fe727c0d, []int{0}
}
func (m *ActivityManagerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityManagerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityManagerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityManagerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityManagerInfo.Merge(m, src)
}
func (m *ActivityManagerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActivityManagerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityManagerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityManagerInfo proto.InternalMessageInfo

func (m *ActivityManagerInfo) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *ActivityManagerInfo) GetInfos() map[string]*models.ActivityRanking_Info {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (*ActivityManagerInfo) XXX_MessageName() string {
	return "dao.ActivityManagerInfo"
}

type ActivityRankingData struct {
	RoleId string                       `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Data   *models.ActivityRanking_Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ActivityRankingData) Reset()      { *m = ActivityRankingData{} }
func (*ActivityRankingData) ProtoMessage() {}
func (*ActivityRankingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff896680fe727c0d, []int{1}
}
func (m *ActivityRankingData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityRankingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityRankingData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityRankingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityRankingData.Merge(m, src)
}
func (m *ActivityRankingData) XXX_Size() int {
	return m.Size()
}
func (m *ActivityRankingData) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityRankingData.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityRankingData proto.InternalMessageInfo

func (m *ActivityRankingData) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *ActivityRankingData) GetData() *models.ActivityRanking_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*ActivityRankingData) XXX_MessageName() string {
	return "dao.ActivityRankingData"
}
func init() {
	proto.RegisterType((*ActivityManagerInfo)(nil), "dao.ActivityManagerInfo")
	proto.RegisterMapType((map[string]*models.ActivityRanking_Info)(nil), "dao.ActivityManagerInfo.InfosEntry")
	proto.RegisterType((*ActivityRankingData)(nil), "dao.ActivityRankingData")
}

func init() { proto.RegisterFile("proto/dao/activity_ranking.proto", fileDescriptor_ff896680fe727c0d) }

var fileDescriptor_ff896680fe727c0d = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xbf, 0x4e, 0xc2, 0x40,
	0x18, 0xef, 0x15, 0x41, 0x39, 0x16, 0x73, 0x1a, 0x25, 0x0d, 0x39, 0x1a, 0x58, 0x58, 0x6c, 0x0d,
	0x2e, 0xea, 0x26, 0xd1, 0x01, 0x13, 0x97, 0x0e, 0x0e, 0x2e, 0xe4, 0xe0, 0x8e, 0xd2, 0x00, 0xf7,
	0x91, 0x6b, 0x25, 0xe1, 0x2d, 0x7c, 0x0c, 0x1f, 0x85, 0xc5, 0x84, 0x91, 0xc9, 0x68, 0xbb, 0x38,
	0x1a, 0x9f, 0xc0, 0x94, 0x6b, 0x20, 0x44, 0x8d, 0xcb, 0xe5, 0xcb, 0xef, 0xdf, 0x77, 0xbf, 0xcb,
	0x61, 0x7b, 0xa2, 0x20, 0x02, 0x97, 0x33, 0x70, 0x59, 0x2f, 0x0a, 0xa6, 0x41, 0x34, 0xeb, 0x28,
	0x26, 0x87, 0x81, 0xf4, 0x9d, 0x15, 0x45, 0x72, 0x9c, 0x81, 0x75, 0xe8, 0x83, 0x0f, 0x5a, 0x9a,
	0x4e, 0x9a, 0xb2, 0xea, 0x1a, 0x19, 0x03, 0x17, 0xa3, 0xf0, 0x0f, 0xbf, 0x75, 0xbc, 0x25, 0x0a,
	0x07, 0x30, 0xc9, 0x88, 0xa3, 0x2d, 0xa2, 0xcb, 0x32, 0x43, 0xed, 0x05, 0xe1, 0x83, 0xab, 0x2c,
	0xeb, 0x8e, 0x49, 0xe6, 0x0b, 0xd5, 0x96, 0x7d, 0x20, 0x75, 0x5c, 0x0c, 0x85, 0x9a, 0x0a, 0xd5,
	0x09, 0x78, 0x19, 0xd9, 0xa8, 0x51, 0x6c, 0x15, 0xbe, 0x5e, 0xab, 0xe6, 0x64, 0xe8, 0xed, 0x69,
	0xa2, 0xcd, 0xc9, 0x05, 0xce, 0x07, 0xb2, 0x0f, 0x61, 0xd9, 0xb4, 0x73, 0x8d, 0x52, 0xb3, 0xee,
	0x70, 0x06, 0xce, 0x2f, 0x69, 0x4e, 0x7a, 0x84, 0x37, 0x32, 0x52, 0x33, 0x4f, 0x3b, 0xac, 0x7b,
	0x8c, 0x37, 0x20, 0xd9, 0xc7, 0xb9, 0xa1, 0x98, 0xe9, 0x3d, 0x5e, 0x3a, 0x92, 0x26, 0xce, 0x4f,
	0xd9, 0xe8, 0x51, 0x94, 0x4d, 0x1b, 0x35, 0x4a, 0xcd, 0x8a, 0xa3, 0x6f, 0xbe, 0x4e, 0xf7, 0xb2,
	0xda, 0x69, 0x88, 0xa7, 0xa5, 0x97, 0xe6, 0x39, 0xaa, 0x0d, 0x36, 0x75, 0x32, 0xc9, 0x35, 0x8b,
	0x18, 0xa9, 0xe2, 0x5d, 0x05, 0x23, 0xf1, 0xb3, 0x4c, 0x21, 0x85, 0xdb, 0x9c, 0x9c, 0xe2, 0x1d,
	0xce, 0x22, 0xf6, 0xdf, 0xba, 0x34, 0xcc, 0x5b, 0x29, 0x5b, 0xb7, 0xcb, 0x77, 0x6a, 0x3c, 0xc7,
	0x14, 0xcd, 0x63, 0x8a, 0x16, 0x31, 0x45, 0x6f, 0x31, 0x45, 0x1f, 0x31, 0x35, 0x3e, 0x63, 0x8a,
	0x9e, 0x12, 0x6a, 0xcc, 0x13, 0x8a, 0x16, 0x09, 0x35, 0x96, 0x09, 0x35, 0x1e, 0x2a, 0x3d, 0x08,
	0xe4, 0x89, 0x7e, 0x39, 0xb7, 0x07, 0xe3, 0x31, 0x48, 0x77, 0xfd, 0x1b, 0xba, 0x85, 0xd5, 0x78,
	0xf6, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x9e, 0x03, 0xa5, 0x21, 0x02, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolActivityManagerInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolActivityRankingData.Get().(proto.Message)
	})
}

var poolActivityManagerInfo = &sync.Pool{New: func() interface{} { return &ActivityManagerInfo{} }}

func (m *ActivityManagerInfo) ReleasePool() { m.Reset(); poolActivityManagerInfo.Put(m); m = nil }

var poolActivityRankingData = &sync.Pool{New: func() interface{} { return &ActivityRankingData{} }}

func (m *ActivityRankingData) ReleasePool() { m.Reset(); poolActivityRankingData.Put(m); m = nil }

func (m *ActivityManagerInfo) PK() string {
	if m == nil {
		return ""
	}
	return m.ServerId
}

func (m *ActivityManagerInfo) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.ServerId...)
}

func (m *ActivityManagerInfo) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ActivityManagerInfo) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ActivityManagerInfo) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *ActivityRankingData) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *ActivityRankingData) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *ActivityRankingData) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *ActivityRankingData) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *ActivityRankingData) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *ActivityManagerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityManagerInfo)
	if !ok {
		that2, ok := that.(ActivityManagerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	return true
}
func (this *ActivityRankingData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityRankingData)
	if !ok {
		that2, ok := that.(ActivityRankingData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (m *ActivityManagerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityManagerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityManagerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for k := range m.Infos {
			v := m.Infos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintActivityRanking(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintActivityRanking(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintActivityRanking(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintActivityRanking(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityRankingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityRankingData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityRankingData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivityRanking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintActivityRanking(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActivityRanking(dAtA []byte, offset int, v uint64) int {
	offset -= sovActivityRanking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *ActivityManagerInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ServerId != "" {
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ServerId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("infos")
	w.RawByte('"')
	w.RawByte(':')
	if m.Infos == nil {
		w.RawString("null")
	} else if len(m.Infos) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlInfos := len(m.Infos)
		for k, v := range m.Infos {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlInfos--
			if mlInfos != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ActivityRankingData) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	m.Data.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ActivityManagerInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ActivityManagerInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ActivityManagerInfo) GoString() string {
	return m.String()
}

func (m *ActivityRankingData) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ActivityRankingData) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ActivityRankingData) GoString() string {
	return m.String()
}

func (m *ActivityManagerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovActivityRanking(uint64(l))
	}
	if len(m.Infos) > 0 {
		for k, v := range m.Infos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovActivityRanking(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovActivityRanking(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovActivityRanking(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ActivityRankingData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovActivityRanking(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovActivityRanking(uint64(l))
	}
	return n
}

func sovActivityRanking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActivityRanking(x uint64) (n int) {
	return sovActivityRanking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActivityManagerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityRanking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityManagerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityManagerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityRanking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityRanking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infos == nil {
				m.Infos = make(map[string]*models.ActivityRanking_Info)
			}
			var mapkey string
			var mapvalue *models.ActivityRanking_Info
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivityRanking
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityRanking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthActivityRanking
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthActivityRanking
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivityRanking
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthActivityRanking
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthActivityRanking
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.ActivityRanking_Info{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivityRanking(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthActivityRanking
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Infos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityRanking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityRankingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivityRanking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityRankingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityRankingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivityRanking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivityRanking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &models.ActivityRanking_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivityRanking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthActivityRanking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActivityRanking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActivityRanking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivityRanking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActivityRanking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActivityRanking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActivityRanking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActivityRanking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActivityRanking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActivityRanking = fmt.Errorf("proto: unexpected end of group")
)
