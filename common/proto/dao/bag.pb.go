// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/bag.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	ItemId int64 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty" pk`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Expire int64 `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
	Lock   bool  `protobuf:"varint,4,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *Item) Reset()      { *m = Item{} }
func (*Item) ProtoMessage() {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dcb88cfbe5d5f04, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetItemId() int64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Item) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Item) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Item) GetLock() bool {
	if m != nil {
		return m.Lock
	}
	return false
}

func (*Item) XXX_MessageName() string {
	return "dao.Item"
}

type BagLen struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Length int64  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *BagLen) Reset()      { *m = BagLen{} }
func (*BagLen) ProtoMessage() {}
func (*BagLen) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dcb88cfbe5d5f04, []int{1}
}
func (m *BagLen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BagLen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BagLen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BagLen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BagLen.Merge(m, src)
}
func (m *BagLen) XXX_Size() int {
	return m.Size()
}
func (m *BagLen) XXX_DiscardUnknown() {
	xxx_messageInfo_BagLen.DiscardUnknown(m)
}

var xxx_messageInfo_BagLen proto.InternalMessageInfo

func (m *BagLen) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *BagLen) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (*BagLen) XXX_MessageName() string {
	return "dao.BagLen"
}

type BagConfig struct {
	RoleId string            `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Config *models.BagConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *BagConfig) Reset()      { *m = BagConfig{} }
func (*BagConfig) ProtoMessage() {}
func (*BagConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dcb88cfbe5d5f04, []int{2}
}
func (m *BagConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BagConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BagConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BagConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BagConfig.Merge(m, src)
}
func (m *BagConfig) XXX_Size() int {
	return m.Size()
}
func (m *BagConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BagConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BagConfig proto.InternalMessageInfo

func (m *BagConfig) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *BagConfig) GetConfig() *models.BagConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (*BagConfig) XXX_MessageName() string {
	return "dao.BagConfig"
}

type MedicineInfo struct {
	RoleId   string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	NextTake map[int64]int64 `protobuf:"bytes,2,rep,name=next_take,json=nextTake,proto3" json:"next_take,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Open     map[int64]int64 `protobuf:"bytes,3,rep,name=open,proto3" json:"open,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AutoTake map[int64]int64 `protobuf:"bytes,4,rep,name=auto_take,json=autoTake,proto3" json:"auto_take,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *MedicineInfo) Reset()      { *m = MedicineInfo{} }
func (*MedicineInfo) ProtoMessage() {}
func (*MedicineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dcb88cfbe5d5f04, []int{3}
}
func (m *MedicineInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MedicineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MedicineInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MedicineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedicineInfo.Merge(m, src)
}
func (m *MedicineInfo) XXX_Size() int {
	return m.Size()
}
func (m *MedicineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MedicineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MedicineInfo proto.InternalMessageInfo

func (m *MedicineInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *MedicineInfo) GetNextTake() map[int64]int64 {
	if m != nil {
		return m.NextTake
	}
	return nil
}

func (m *MedicineInfo) GetOpen() map[int64]int64 {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *MedicineInfo) GetAutoTake() map[int64]int64 {
	if m != nil {
		return m.AutoTake
	}
	return nil
}

func (*MedicineInfo) XXX_MessageName() string {
	return "dao.MedicineInfo"
}
func init() {
	proto.RegisterType((*Item)(nil), "dao.Item")
	proto.RegisterType((*BagLen)(nil), "dao.BagLen")
	proto.RegisterType((*BagConfig)(nil), "dao.BagConfig")
	proto.RegisterType((*MedicineInfo)(nil), "dao.MedicineInfo")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.MedicineInfo.AutoTakeEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.MedicineInfo.NextTakeEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.MedicineInfo.OpenEntry")
}

func init() { proto.RegisterFile("proto/dao/bag.proto", fileDescriptor_9dcb88cfbe5d5f04) }

var fileDescriptor_9dcb88cfbe5d5f04 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6b, 0xd4, 0x50,
	0x14, 0xcd, 0x9b, 0xc4, 0xd8, 0xb9, 0xb5, 0xa0, 0xb1, 0x94, 0x30, 0xca, 0x9b, 0x61, 0x56, 0xe3,
	0xc2, 0x04, 0xea, 0x42, 0xb1, 0x6e, 0x3a, 0xe2, 0x62, 0xc4, 0x0f, 0x08, 0x82, 0xe0, 0xa6, 0xbc,
	0x26, 0xb7, 0x31, 0x24, 0x79, 0x37, 0xa4, 0x6f, 0xca, 0xf4, 0x57, 0xe8, 0xcf, 0xf0, 0xa7, 0x74,
	0xd9, 0x65, 0x57, 0xa2, 0x99, 0x8d, 0x4b, 0xf1, 0x17, 0xc8, 0x7b, 0x49, 0xa7, 0x2d, 0x22, 0xa5,
	0xbb, 0x7b, 0xce, 0xbd, 0xe7, 0x9c, 0xfb, 0xb8, 0x3c, 0xb8, 0x5f, 0xd5, 0xa4, 0x28, 0x4c, 0x04,
	0x85, 0xfb, 0x22, 0x0d, 0x0c, 0xf2, 0xec, 0x44, 0xd0, 0x60, 0x33, 0xa5, 0x94, 0xda, 0xae, 0xae,
	0xda, 0xd6, 0x60, 0xab, 0x65, 0x4a, 0x4a, 0xb0, 0x38, 0xbc, 0x90, 0x8c, 0x33, 0x70, 0x66, 0x0a,
	0x4b, 0x6f, 0x08, 0xb7, 0x33, 0x85, 0xe5, 0x5e, 0x96, 0xf8, 0x6c, 0xc4, 0x26, 0xf6, 0xd4, 0xfd,
	0xf3, 0x7d, 0xd8, 0xab, 0xf2, 0xc8, 0xd5, 0xf4, 0x2c, 0xf1, 0x36, 0xe1, 0x56, 0x4c, 0x73, 0xa9,
	0xfc, 0x9e, 0x6e, 0x47, 0x2d, 0xf0, 0xb6, 0xc0, 0xc5, 0x45, 0x95, 0xd5, 0xe8, 0xdb, 0x86, 0xee,
	0x90, 0xe7, 0x81, 0x53, 0x50, 0x9c, 0xfb, 0xce, 0x88, 0x4d, 0xd6, 0x22, 0x53, 0x8f, 0x77, 0xc1,
	0x9d, 0x8a, 0xf4, 0x0d, 0x4a, 0x1d, 0x56, 0x53, 0x81, 0xe7, 0x61, 0xfd, 0x8b, 0x30, 0x4d, 0xcf,
	0x12, 0x6d, 0x5b, 0xa0, 0x4c, 0xd5, 0xe7, 0x2e, 0xad, 0x43, 0xe3, 0x8f, 0xd0, 0x9f, 0x8a, 0xf4,
	0x25, 0xc9, 0x83, 0x2c, 0xbd, 0xde, 0xe5, 0x11, 0xb8, 0xb1, 0x19, 0x35, 0x2e, 0xeb, 0xdb, 0xf7,
	0x82, 0xf6, 0xf9, 0xc1, 0xca, 0x23, 0xea, 0x06, 0xc6, 0x5f, 0x6c, 0xb8, 0xf3, 0x16, 0x93, 0x2c,
	0xce, 0x24, 0xce, 0xe4, 0x01, 0x5d, 0x6f, 0xfe, 0x02, 0xfa, 0x12, 0x17, 0x6a, 0x4f, 0x89, 0x1c,
	0xfd, 0xde, 0xc8, 0x9e, 0xac, 0x6f, 0x0f, 0x83, 0x44, 0x50, 0x70, 0xd9, 0x26, 0x78, 0x87, 0x0b,
	0xf5, 0x41, 0xe4, 0xf8, 0x4a, 0xaa, 0xfa, 0x38, 0x5a, 0x93, 0x1d, 0xf4, 0x42, 0x70, 0xa8, 0x42,
	0xe9, 0xdb, 0x46, 0xf8, 0xe0, 0x5f, 0xe1, 0xfb, 0x0a, 0x65, 0x2b, 0x32, 0x83, 0x3a, 0x4e, 0xcc,
	0x15, 0xb5, 0x71, 0xce, 0xff, 0xe2, 0x76, 0xe7, 0x8a, 0x2e, 0xc5, 0x89, 0x0e, 0x0e, 0x76, 0x60,
	0xe3, 0xca, 0x26, 0xde, 0x5d, 0xb0, 0x73, 0x3c, 0x6e, 0x4f, 0x1d, 0xe9, 0x52, 0xdf, 0xf7, 0x48,
	0x14, 0x73, 0x3c, 0xbf, 0xaf, 0x01, 0xcf, 0x7b, 0xcf, 0xd8, 0xe0, 0x29, 0xf4, 0x57, 0xdb, 0xdc,
	0x48, 0xb8, 0x03, 0x1b, 0x57, 0x16, 0xba, 0x89, 0x78, 0xfa, 0xfa, 0xec, 0x27, 0xb7, 0xbe, 0x35,
	0x9c, 0x9d, 0x34, 0x9c, 0x9d, 0x36, 0x9c, 0xfd, 0x68, 0x38, 0xfb, 0xd5, 0x70, 0xeb, 0x77, 0xc3,
	0xd9, 0xd7, 0x25, 0xb7, 0x4e, 0x96, 0x9c, 0x9d, 0x2e, 0xb9, 0x75, 0xb6, 0xe4, 0xd6, 0xa7, 0x87,
	0x31, 0x65, 0xf2, 0xf1, 0x21, 0xd6, 0x47, 0x58, 0x87, 0x31, 0x95, 0x25, 0xc9, 0x70, 0xf5, 0x43,
	0xf6, 0x5d, 0x53, 0x3e, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x56, 0xab, 0xa2, 0x35, 0x03,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolItem.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBagLen.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolBagConfig.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMedicineInfo.Get().(proto.Message)
	})
}

var poolItem = &sync.Pool{New: func() interface{} { return &Item{} }}

func (m *Item) ReleasePool() { m.Reset(); poolItem.Put(m); m = nil }

var poolBagLen = &sync.Pool{New: func() interface{} { return &BagLen{} }}

func (m *BagLen) ReleasePool() { m.Reset(); poolBagLen.Put(m); m = nil }

var poolBagConfig = &sync.Pool{New: func() interface{} { return &BagConfig{} }}

func (m *BagConfig) ReleasePool() { m.Reset(); poolBagConfig.Put(m); m = nil }

var poolMedicineInfo = &sync.Pool{New: func() interface{} { return &MedicineInfo{} }}

func (m *MedicineInfo) ReleasePool() { m.Reset(); poolMedicineInfo.Put(m); m = nil }

func (m *Item) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.ItemId), 10)
}

func (m *Item) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.ItemId), 10)
}

func (m *Item) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Item) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Item) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *BagLen) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *BagLen) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *BagLen) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *BagLen) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *BagLen) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *BagConfig) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *BagConfig) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *BagConfig) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *BagConfig) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *BagConfig) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *MedicineInfo) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *MedicineInfo) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *MedicineInfo) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *MedicineInfo) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *MedicineInfo) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Item)
	if !ok {
		that2, ok := that.(Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Expire != that1.Expire {
		return false
	}
	if this.Lock != that1.Lock {
		return false
	}
	return true
}
func (this *BagLen) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BagLen)
	if !ok {
		that2, ok := that.(BagLen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	return true
}
func (this *BagConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BagConfig)
	if !ok {
		that2, ok := that.(BagConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *MedicineInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MedicineInfo)
	if !ok {
		that2, ok := that.(MedicineInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.NextTake) != len(that1.NextTake) {
		return false
	}
	for i := range this.NextTake {
		if this.NextTake[i] != that1.NextTake[i] {
			return false
		}
	}
	if len(this.Open) != len(that1.Open) {
		return false
	}
	for i := range this.Open {
		if this.Open[i] != that1.Open[i] {
			return false
		}
	}
	if len(this.AutoTake) != len(that1.AutoTake) {
		return false
	}
	for i := range this.AutoTake {
		if this.AutoTake[i] != that1.AutoTake[i] {
			return false
		}
	}
	return true
}
func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lock {
		i--
		if m.Lock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Expire != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemId != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BagLen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagLen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BagLen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintBag(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintBag(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BagConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BagConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBag(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintBag(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MedicineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MedicineInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MedicineInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AutoTake) > 0 {
		for k := range m.AutoTake {
			v := m.AutoTake[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBag(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Open) > 0 {
		for k := range m.Open {
			v := m.Open[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBag(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NextTake) > 0 {
		for k := range m.NextTake {
			v := m.NextTake[k]
			baseI := i
			i = encodeVarintBag(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBag(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBag(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintBag(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBag(dAtA []byte, offset int, v uint64) int {
	offset -= sovBag(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Item) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ItemId != 0 {
		w.RawByte('"')
		w.RawString("item_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ItemId))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if m.Expire != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expire")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Expire))
		needWriteComma = true
	}
	if m.Lock {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("lock")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Lock)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BagLen) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Length != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("length")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Length))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *BagConfig) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("config")
	w.RawByte('"')
	w.RawByte(':')
	m.Config.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MedicineInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("next_take")
	w.RawByte('"')
	w.RawByte(':')
	if m.NextTake == nil {
		w.RawString("null")
	} else if len(m.NextTake) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlNextTake := len(m.NextTake)
		for k, v := range m.NextTake {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlNextTake--
			if mlNextTake != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("open")
	w.RawByte('"')
	w.RawByte(':')
	if m.Open == nil {
		w.RawString("null")
	} else if len(m.Open) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlOpen := len(m.Open)
		for k, v := range m.Open {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlOpen--
			if mlOpen != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("auto_take")
	w.RawByte('"')
	w.RawByte(':')
	if m.AutoTake == nil {
		w.RawString("null")
	} else if len(m.AutoTake) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAutoTake := len(m.AutoTake)
		for k, v := range m.AutoTake {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAutoTake--
			if mlAutoTake != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Item) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Item) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Item) GoString() string {
	return m.String()
}

func (m *BagLen) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BagLen) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BagLen) GoString() string {
	return m.String()
}

func (m *BagConfig) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *BagConfig) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *BagConfig) GoString() string {
	return m.String()
}

func (m *MedicineInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MedicineInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MedicineInfo) GoString() string {
	return m.String()
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	if m.Expire != 0 {
		n += 1 + sovBag(uint64(m.Expire))
	}
	if m.Lock {
		n += 2
	}
	return n
}

func (m *BagLen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovBag(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovBag(uint64(m.Length))
	}
	return n
}

func (m *BagConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovBag(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovBag(uint64(l))
	}
	return n
}

func (m *MedicineInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovBag(uint64(l))
	}
	if len(m.NextTake) > 0 {
		for k, v := range m.NextTake {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBag(uint64(k)) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	if len(m.Open) > 0 {
		for k, v := range m.Open {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBag(uint64(k)) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	if len(m.AutoTake) > 0 {
		for k, v := range m.AutoTake {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBag(uint64(k)) + 1 + sovBag(uint64(v))
			n += mapEntrySize + 1 + sovBag(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBag(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBag(x uint64) (n int) {
	return sovBag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagLen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagLen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagLen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &models.BagConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedicineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedicineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedicineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextTake == nil {
				m.NextTake = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NextTake[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Open == nil {
				m.Open = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Open[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoTake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBag
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoTake == nil {
				m.AutoTake = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBag(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBag
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AutoTake[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBag
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBag
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBag
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBag        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBag          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBag = fmt.Errorf("proto: unexpected end of group")
)
