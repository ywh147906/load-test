// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/gacha.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Gacha struct {
	GachaId    int64 `protobuf:"varint,1,opt,name=gacha_id,json=gachaId,proto3" json:"gacha_id,omitempty" pk`
	FreeCount  int64 `protobuf:"varint,2,opt,name=free_count,json=freeCount,proto3" json:"free_count,omitempty"`
	DailyCount int64 `protobuf:"varint,3,opt,name=daily_count,json=dailyCount,proto3" json:"daily_count,omitempty"`
	TotalCount int64 `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	RefreshAt  int64 `protobuf:"varint,5,opt,name=refresh_at,json=refreshAt,proto3" json:"refresh_at,omitempty"`
}

func (m *Gacha) Reset()      { *m = Gacha{} }
func (*Gacha) ProtoMessage() {}
func (*Gacha) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9fcbbcf89fa5b7, []int{0}
}
func (m *Gacha) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gacha) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gacha.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gacha) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gacha.Merge(m, src)
}
func (m *Gacha) XXX_Size() int {
	return m.Size()
}
func (m *Gacha) XXX_DiscardUnknown() {
	xxx_messageInfo_Gacha.DiscardUnknown(m)
}

var xxx_messageInfo_Gacha proto.InternalMessageInfo

func (m *Gacha) GetGachaId() int64 {
	if m != nil {
		return m.GachaId
	}
	return 0
}

func (m *Gacha) GetFreeCount() int64 {
	if m != nil {
		return m.FreeCount
	}
	return 0
}

func (m *Gacha) GetDailyCount() int64 {
	if m != nil {
		return m.DailyCount
	}
	return 0
}

func (m *Gacha) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *Gacha) GetRefreshAt() int64 {
	if m != nil {
		return m.RefreshAt
	}
	return 0
}

func (*Gacha) XXX_MessageName() string {
	return "dao.Gacha"
}
func init() {
	proto.RegisterType((*Gacha)(nil), "dao.Gacha")
}

func init() { proto.RegisterFile("proto/dao/gacha.proto", fileDescriptor_9a9fcbbcf89fa5b7) }

var fileDescriptor_9a9fcbbcf89fa5b7 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x49, 0xcc, 0xd7, 0x4f, 0x4f, 0x4c, 0xce, 0x48, 0xd4, 0x03, 0xf3, 0x85, 0x98,
	0x53, 0x12, 0xf3, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0x21, 0xf2, 0x20, 0x16, 0x44, 0x4a, 0x69,
	0x15, 0x23, 0x17, 0xab, 0x3b, 0x48, 0xa9, 0x90, 0x22, 0x17, 0x07, 0x58, 0x4f, 0x7c, 0x66, 0x8a,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb3, 0x13, 0xdb, 0xa7, 0x7b, 0xf2, 0x4c, 0x05, 0xd9, 0x41, 0xec,
	0x60, 0x71, 0xcf, 0x14, 0x21, 0x59, 0x2e, 0xae, 0xb4, 0xa2, 0xd4, 0xd4, 0xf8, 0xe4, 0xfc, 0xd2,
	0xbc, 0x12, 0x09, 0x26, 0x90, 0xa2, 0x20, 0x4e, 0x90, 0x88, 0x33, 0x48, 0x40, 0x48, 0x9e, 0x8b,
	0x3b, 0x25, 0x31, 0x33, 0xa7, 0x12, 0x2a, 0xcf, 0x0c, 0x96, 0xe7, 0x02, 0x0b, 0xc1, 0x15, 0x94,
	0xe4, 0x97, 0x24, 0xe6, 0x40, 0x15, 0xb0, 0x40, 0x14, 0x80, 0x85, 0x20, 0x0a, 0x64, 0xb9, 0xb8,
	0x8a, 0x52, 0xd3, 0x8a, 0x52, 0x8b, 0x33, 0xe2, 0x13, 0x4b, 0x24, 0x58, 0x21, 0x16, 0x40, 0x45,
	0x1c, 0x4b, 0x9c, 0xbc, 0x6e, 0x3c, 0x94, 0x63, 0x58, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c, 0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x4e, 0x3c, 0x96, 0x63, 0xbc, 0xf0, 0x58, 0x8e, 0xe1, 0xc6,
	0x63, 0x39, 0x86, 0x28, 0x99, 0xe4, 0xfc, 0xcc, 0x3c, 0xdd, 0xe2, 0xd4, 0xa2, 0xb2, 0xd4, 0x22,
	0xfd, 0xe4, 0xfc, 0xdc, 0xdc, 0xfc, 0x3c, 0x7d, 0x78, 0xf8, 0x24, 0xb1, 0x81, 0x99, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0x4b, 0xdb, 0x20, 0x33, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGacha.Get().(proto.Message)
	})
}

var poolGacha = &sync.Pool{New: func() interface{} { return &Gacha{} }}

func (m *Gacha) ReleasePool() { m.Reset(); poolGacha.Put(m); m = nil }

func (m *Gacha) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.GachaId), 10)
}

func (m *Gacha) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.GachaId), 10)
}

func (m *Gacha) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Gacha) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Gacha) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Gacha) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gacha)
	if !ok {
		that2, ok := that.(Gacha)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GachaId != that1.GachaId {
		return false
	}
	if this.FreeCount != that1.FreeCount {
		return false
	}
	if this.DailyCount != that1.DailyCount {
		return false
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	if this.RefreshAt != that1.RefreshAt {
		return false
	}
	return true
}
func (m *Gacha) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gacha) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gacha) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefreshAt != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.RefreshAt))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalCount != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x20
	}
	if m.DailyCount != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.DailyCount))
		i--
		dAtA[i] = 0x18
	}
	if m.FreeCount != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.FreeCount))
		i--
		dAtA[i] = 0x10
	}
	if m.GachaId != 0 {
		i = encodeVarintGacha(dAtA, i, uint64(m.GachaId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGacha(dAtA []byte, offset int, v uint64) int {
	offset -= sovGacha(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Gacha) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GachaId != 0 {
		w.RawByte('"')
		w.RawString("gacha_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GachaId))
		needWriteComma = true
	}
	if m.FreeCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("free_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeCount))
		needWriteComma = true
	}
	if m.DailyCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("daily_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DailyCount))
		needWriteComma = true
	}
	if m.TotalCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalCount))
		needWriteComma = true
	}
	if m.RefreshAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("refresh_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RefreshAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Gacha) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Gacha) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Gacha) GoString() string {
	return m.String()
}

func (m *Gacha) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GachaId != 0 {
		n += 1 + sovGacha(uint64(m.GachaId))
	}
	if m.FreeCount != 0 {
		n += 1 + sovGacha(uint64(m.FreeCount))
	}
	if m.DailyCount != 0 {
		n += 1 + sovGacha(uint64(m.DailyCount))
	}
	if m.TotalCount != 0 {
		n += 1 + sovGacha(uint64(m.TotalCount))
	}
	if m.RefreshAt != 0 {
		n += 1 + sovGacha(uint64(m.RefreshAt))
	}
	return n
}

func sovGacha(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGacha(x uint64) (n int) {
	return sovGacha(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Gacha) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gacha: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gacha: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GachaId", wireType)
			}
			m.GachaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GachaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeCount", wireType)
			}
			m.FreeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyCount", wireType)
			}
			m.DailyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshAt", wireType)
			}
			m.RefreshAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGacha(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGacha
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGacha(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGacha
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGacha
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGacha
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGacha
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGacha
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGacha        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGacha          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGacha = fmt.Errorf("proto: unexpected end of group")
)
