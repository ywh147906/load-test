// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/cd_key.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CdKeyBatch struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" pk`
	BatchId int64  `protobuf:"varint,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (m *CdKeyBatch) Reset()      { *m = CdKeyBatch{} }
func (*CdKeyBatch) ProtoMessage() {}
func (*CdKeyBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_df831de60ccbd400, []int{0}
}
func (m *CdKeyBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CdKeyBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CdKeyBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CdKeyBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CdKeyBatch.Merge(m, src)
}
func (m *CdKeyBatch) XXX_Size() int {
	return m.Size()
}
func (m *CdKeyBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CdKeyBatch.DiscardUnknown(m)
}

var xxx_messageInfo_CdKeyBatch proto.InternalMessageInfo

func (m *CdKeyBatch) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CdKeyBatch) GetBatchId() int64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (*CdKeyBatch) XXX_MessageName() string {
	return "dao.CdKeyBatch"
}
func init() {
	proto.RegisterType((*CdKeyBatch)(nil), "dao.CdKeyBatch")
}

func init() { proto.RegisterFile("proto/dao/cd_key.proto", fileDescriptor_df831de60ccbd400) }

var fileDescriptor_df831de60ccbd400 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x49, 0xcc, 0xd7, 0x4f, 0x4e, 0x89, 0xcf, 0x4e, 0xad, 0xd4, 0x03, 0x0b, 0x08,
	0x31, 0xa7, 0x24, 0xe6, 0x4b, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x43, 0x14, 0x80, 0x58, 0x10, 0x29,
	0x25, 0x7b, 0x2e, 0x2e, 0xe7, 0x14, 0xef, 0xd4, 0x4a, 0xa7, 0xc4, 0x92, 0xe4, 0x0c, 0x21, 0x31,
	0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x4e, 0x27, 0xb6, 0x4f, 0xf7, 0xe4, 0x99,
	0x0a, 0xb2, 0x83, 0x98, 0x32, 0x53, 0x84, 0x24, 0xb9, 0x38, 0x92, 0x40, 0x0a, 0xe2, 0x33, 0x53,
	0x24, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0xd8, 0xc1, 0x7c, 0xcf, 0x14, 0x27, 0xaf, 0x1b, 0x0f,
	0xe5, 0x18, 0x56, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07,
	0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x13, 0x8f, 0xe5, 0x18, 0x2f, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x26, 0x39,
	0x3f, 0x33, 0x4f, 0xb7, 0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x48, 0x3f, 0x39, 0x3f, 0x37, 0x37, 0x3f,
	0x4f, 0x1f, 0xee, 0xe8, 0x24, 0x36, 0x30, 0xd3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x51, 0x7c,
	0x4a, 0xd2, 0xc8, 0x00, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCdKeyBatch.Get().(proto.Message)
	})
}

var poolCdKeyBatch = &sync.Pool{New: func() interface{} { return &CdKeyBatch{} }}

func (m *CdKeyBatch) ReleasePool() { m.Reset(); poolCdKeyBatch.Put(m); m = nil }

func (m *CdKeyBatch) PK() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *CdKeyBatch) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Id...)
}

func (m *CdKeyBatch) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *CdKeyBatch) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *CdKeyBatch) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *CdKeyBatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CdKeyBatch)
	if !ok {
		that2, ok := that.(CdKeyBatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.BatchId != that1.BatchId {
		return false
	}
	return true
}
func (m *CdKeyBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CdKeyBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdKeyBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchId != 0 {
		i = encodeVarintCdKey(dAtA, i, uint64(m.BatchId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCdKey(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCdKey(dAtA []byte, offset int, v uint64) int {
	offset -= sovCdKey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *CdKeyBatch) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.BatchId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("batch_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BatchId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CdKeyBatch) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CdKeyBatch) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CdKeyBatch) GoString() string {
	return m.String()
}

func (m *CdKeyBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCdKey(uint64(l))
	}
	if m.BatchId != 0 {
		n += 1 + sovCdKey(uint64(m.BatchId))
	}
	return n
}

func sovCdKey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCdKey(x uint64) (n int) {
	return sovCdKey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CdKeyBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CdKeyBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CdKeyBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			m.BatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCdKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCdKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCdKey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCdKey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCdKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCdKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCdKey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCdKey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCdKey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCdKey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCdKey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCdKey = fmt.Errorf("proto: unexpected end of group")
)
