// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/journey.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Journey struct {
	RoleId           string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	LastOpenFreeTime int64  `protobuf:"varint,2,opt,name=last_open_free_time,json=lastOpenFreeTime,proto3" json:"last_open_free_time,omitempty"`
	TodayAddCoinNum  int64  `protobuf:"varint,3,opt,name=today_add_coin_num,json=todayAddCoinNum,proto3" json:"today_add_coin_num,omitempty"`
	TodayFlushTime   int64  `protobuf:"varint,4,opt,name=today_flush_time,json=todayFlushTime,proto3" json:"today_flush_time,omitempty"`
}

func (m *Journey) Reset()      { *m = Journey{} }
func (*Journey) ProtoMessage() {}
func (*Journey) Descriptor() ([]byte, []int) {
	return fileDescriptor_18af1e07f2ceb777, []int{0}
}
func (m *Journey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Journey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Journey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Journey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Journey.Merge(m, src)
}
func (m *Journey) XXX_Size() int {
	return m.Size()
}
func (m *Journey) XXX_DiscardUnknown() {
	xxx_messageInfo_Journey.DiscardUnknown(m)
}

var xxx_messageInfo_Journey proto.InternalMessageInfo

func (m *Journey) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Journey) GetLastOpenFreeTime() int64 {
	if m != nil {
		return m.LastOpenFreeTime
	}
	return 0
}

func (m *Journey) GetTodayAddCoinNum() int64 {
	if m != nil {
		return m.TodayAddCoinNum
	}
	return 0
}

func (m *Journey) GetTodayFlushTime() int64 {
	if m != nil {
		return m.TodayFlushTime
	}
	return 0
}

func (*Journey) XXX_MessageName() string {
	return "dao.Journey"
}
func init() {
	proto.RegisterType((*Journey)(nil), "dao.Journey")
}

func init() { proto.RegisterFile("proto/dao/journey.proto", fileDescriptor_18af1e07f2ceb777) }

var fileDescriptor_18af1e07f2ceb777 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x33, 0xad, 0xa4, 0x38, 0x0b, 0x2d, 0xa3, 0x60, 0x10, 0x99, 0x16, 0x57, 0x01, 0xa9,
	0x59, 0x78, 0x02, 0x2b, 0x14, 0xec, 0x42, 0xa1, 0xb8, 0x72, 0x33, 0xc4, 0xce, 0x6b, 0x8d, 0x66,
	0xe6, 0x85, 0x49, 0x22, 0xf4, 0x16, 0x1e, 0xc3, 0xa5, 0xc7, 0xe8, 0xb2, 0xcb, 0xae, 0x44, 0x27,
	0x1b, 0x97, 0xe2, 0x09, 0x64, 0x26, 0xe0, 0xee, 0xe7, 0xfb, 0x3f, 0xfe, 0x07, 0x8f, 0x1e, 0x15,
	0x06, 0x2b, 0x4c, 0x64, 0x8a, 0xc9, 0x13, 0xd6, 0x46, 0xc3, 0xea, 0xdc, 0x13, 0xd6, 0x95, 0x29,
	0x1e, 0x1f, 0x2e, 0x71, 0x89, 0xad, 0xe1, 0x52, 0x5b, 0x9d, 0xbe, 0x13, 0xda, 0x9b, 0xb6, 0x32,
	0x1b, 0xd0, 0x9e, 0xc1, 0x1c, 0x44, 0x26, 0x23, 0x32, 0x24, 0xf1, 0xee, 0x38, 0xfc, 0xfd, 0x18,
	0x74, 0x8a, 0xe7, 0x59, 0xe8, 0xf0, 0xb5, 0x64, 0x23, 0x7a, 0x90, 0xa7, 0x65, 0x25, 0xb0, 0x00,
	0x2d, 0x16, 0x06, 0x40, 0x54, 0x99, 0x82, 0xa8, 0x33, 0x24, 0x71, 0x77, 0xd6, 0x77, 0xd5, 0x6d,
	0x01, 0x7a, 0x62, 0x00, 0xee, 0x32, 0x05, 0xec, 0x8c, 0xb2, 0x0a, 0x65, 0xba, 0x12, 0xa9, 0x94,
	0x62, 0x8e, 0x99, 0x16, 0xba, 0x56, 0x51, 0xd7, 0xdb, 0xfb, 0xbe, 0xb9, 0x94, 0xf2, 0x0a, 0x33,
	0x7d, 0x53, 0x2b, 0x16, 0xd3, 0x7e, 0x2b, 0x2f, 0xf2, 0xba, 0x7c, 0x6c, 0x87, 0x77, 0xbc, 0xba,
	0xe7, 0xf9, 0xc4, 0x61, 0x37, 0x3b, 0x9e, 0x6e, 0xbf, 0x78, 0xf0, 0x66, 0x39, 0x59, 0x5b, 0x4e,
	0x36, 0x96, 0x93, 0x4f, 0xcb, 0xc9, 0xb7, 0xe5, 0xc1, 0x8f, 0xe5, 0xe4, 0xb5, 0xe1, 0xc1, 0xba,
	0xe1, 0x64, 0xd3, 0xf0, 0x60, 0xdb, 0xf0, 0xe0, 0xfe, 0xc4, 0x1d, 0x1e, 0x95, 0x60, 0x5e, 0xc0,
	0x24, 0x73, 0x54, 0x0a, 0x75, 0xf2, 0xff, 0xa7, 0x87, 0xd0, 0xc7, 0x8b, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x1a, 0x9d, 0x80, 0x1f, 0x3b, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolJourney.Get().(proto.Message)
	})
}

var poolJourney = &sync.Pool{New: func() interface{} { return &Journey{} }}

func (m *Journey) ReleasePool() { m.Reset(); poolJourney.Put(m); m = nil }

func (m *Journey) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Journey) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Journey) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Journey) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Journey) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Journey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Journey)
	if !ok {
		that2, ok := that.(Journey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.LastOpenFreeTime != that1.LastOpenFreeTime {
		return false
	}
	if this.TodayAddCoinNum != that1.TodayAddCoinNum {
		return false
	}
	if this.TodayFlushTime != that1.TodayFlushTime {
		return false
	}
	return true
}
func (m *Journey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Journey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Journey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TodayFlushTime != 0 {
		i = encodeVarintJourney(dAtA, i, uint64(m.TodayFlushTime))
		i--
		dAtA[i] = 0x20
	}
	if m.TodayAddCoinNum != 0 {
		i = encodeVarintJourney(dAtA, i, uint64(m.TodayAddCoinNum))
		i--
		dAtA[i] = 0x18
	}
	if m.LastOpenFreeTime != 0 {
		i = encodeVarintJourney(dAtA, i, uint64(m.LastOpenFreeTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintJourney(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintJourney(dAtA []byte, offset int, v uint64) int {
	offset -= sovJourney(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Journey) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.LastOpenFreeTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_open_free_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastOpenFreeTime))
		needWriteComma = true
	}
	if m.TodayAddCoinNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("today_add_coin_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TodayAddCoinNum))
		needWriteComma = true
	}
	if m.TodayFlushTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("today_flush_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TodayFlushTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Journey) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Journey) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Journey) GoString() string {
	return m.String()
}

func (m *Journey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovJourney(uint64(l))
	}
	if m.LastOpenFreeTime != 0 {
		n += 1 + sovJourney(uint64(m.LastOpenFreeTime))
	}
	if m.TodayAddCoinNum != 0 {
		n += 1 + sovJourney(uint64(m.TodayAddCoinNum))
	}
	if m.TodayFlushTime != 0 {
		n += 1 + sovJourney(uint64(m.TodayFlushTime))
	}
	return n
}

func sovJourney(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJourney(x uint64) (n int) {
	return sovJourney(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Journey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJourney
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Journey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Journey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJourney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJourney
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJourney
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOpenFreeTime", wireType)
			}
			m.LastOpenFreeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJourney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOpenFreeTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayAddCoinNum", wireType)
			}
			m.TodayAddCoinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJourney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayAddCoinNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayFlushTime", wireType)
			}
			m.TodayFlushTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJourney
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayFlushTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJourney(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJourney
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJourney(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJourney
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJourney
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJourney
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJourney
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJourney
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJourney
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJourney        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJourney          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJourney = fmt.Errorf("proto: unexpected end of group")
)
