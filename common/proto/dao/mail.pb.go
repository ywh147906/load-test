// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/mail.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Mail struct {
	RoleId string      `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Mails  []*MailItem `protobuf:"bytes,2,rep,name=mails,proto3" json:"mails,omitempty"`
}

func (m *Mail) Reset()      { *m = Mail{} }
func (*Mail) ProtoMessage() {}
func (*Mail) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86fb84517fbd245, []int{0}
}
func (m *Mail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail.Merge(m, src)
}
func (m *Mail) XXX_Size() int {
	return m.Size()
}
func (m *Mail) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail.DiscardUnknown(m)
}

var xxx_messageInfo_Mail proto.InternalMessageInfo

func (m *Mail) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Mail) GetMails() []*MailItem {
	if m != nil {
		return m.Mails
	}
	return nil
}

func (*Mail) XXX_MessageName() string {
	return "dao.Mail"
}

type MailItem struct {
	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" pk`
	Type        models.MailType `protobuf:"varint,2,opt,name=type,proto3,enum=models.MailType" json:"type,omitempty"`
	Sender      string          `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	TextId      int64           `protobuf:"varint,4,opt,name=text_id,json=textId,proto3" json:"text_id,omitempty"`
	Title       string          `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Content     string          `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Hi          string          `protobuf:"bytes,7,opt,name=hi,proto3" json:"hi,omitempty"`
	ExpiredAt   int64           `protobuf:"varint,8,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	Args        []string        `protobuf:"bytes,9,rep,name=args,proto3" json:"args,omitempty"`
	Attachment  []*models.Item  `protobuf:"bytes,10,rep,name=attachment,proto3" json:"attachment,omitempty"`
	Read        bool            `protobuf:"varint,11,opt,name=read,proto3" json:"read,omitempty"`
	CreatedAt   int64           `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeletedAt   int64           `protobuf:"varint,13,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	ActivatedAt int64           `protobuf:"varint,14,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`
	// 直到全服邮件过期前是否对发邮件之后注册的玩家生效
	ForAll bool `protobuf:"varint,15,opt,name=for_all,json=forAll,proto3" json:"for_all,omitempty"`
}

func (m *MailItem) Reset()      { *m = MailItem{} }
func (*MailItem) ProtoMessage() {}
func (*MailItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86fb84517fbd245, []int{1}
}
func (m *MailItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailItem.Merge(m, src)
}
func (m *MailItem) XXX_Size() int {
	return m.Size()
}
func (m *MailItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MailItem.DiscardUnknown(m)
}

var xxx_messageInfo_MailItem proto.InternalMessageInfo

func (m *MailItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MailItem) GetType() models.MailType {
	if m != nil {
		return m.Type
	}
	return models.MailType_MailTypeInvalid
}

func (m *MailItem) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MailItem) GetTextId() int64 {
	if m != nil {
		return m.TextId
	}
	return 0
}

func (m *MailItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MailItem) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *MailItem) GetHi() string {
	if m != nil {
		return m.Hi
	}
	return ""
}

func (m *MailItem) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (m *MailItem) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *MailItem) GetAttachment() []*models.Item {
	if m != nil {
		return m.Attachment
	}
	return nil
}

func (m *MailItem) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *MailItem) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *MailItem) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *MailItem) GetActivatedAt() int64 {
	if m != nil {
		return m.ActivatedAt
	}
	return 0
}

func (m *MailItem) GetForAll() bool {
	if m != nil {
		return m.ForAll
	}
	return false
}

func (*MailItem) XXX_MessageName() string {
	return "dao.MailItem"
}

// 全服邮件
type EntireMail struct {
	Key   string      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" pk`
	Mails []*MailItem `protobuf:"bytes,2,rep,name=mails,proto3" json:"mails,omitempty"`
}

func (m *EntireMail) Reset()      { *m = EntireMail{} }
func (*EntireMail) ProtoMessage() {}
func (*EntireMail) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86fb84517fbd245, []int{2}
}
func (m *EntireMail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntireMail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntireMail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntireMail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntireMail.Merge(m, src)
}
func (m *EntireMail) XXX_Size() int {
	return m.Size()
}
func (m *EntireMail) XXX_DiscardUnknown() {
	xxx_messageInfo_EntireMail.DiscardUnknown(m)
}

var xxx_messageInfo_EntireMail proto.InternalMessageInfo

func (m *EntireMail) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *EntireMail) GetMails() []*MailItem {
	if m != nil {
		return m.Mails
	}
	return nil
}

func (*EntireMail) XXX_MessageName() string {
	return "dao.EntireMail"
}

// 更新奖励
type UpdateReward struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty" pk`
}

func (m *UpdateReward) Reset()      { *m = UpdateReward{} }
func (*UpdateReward) ProtoMessage() {}
func (*UpdateReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86fb84517fbd245, []int{3}
}
func (m *UpdateReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReward.Merge(m, src)
}
func (m *UpdateReward) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReward) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReward.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReward proto.InternalMessageInfo

func (m *UpdateReward) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (*UpdateReward) XXX_MessageName() string {
	return "dao.UpdateReward"
}
func init() {
	proto.RegisterType((*Mail)(nil), "dao.Mail")
	proto.RegisterType((*MailItem)(nil), "dao.MailItem")
	proto.RegisterType((*EntireMail)(nil), "dao.EntireMail")
	proto.RegisterType((*UpdateReward)(nil), "dao.UpdateReward")
}

func init() { proto.RegisterFile("proto/dao/mail.proto", fileDescriptor_a86fb84517fbd245) }

var fileDescriptor_a86fb84517fbd245 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x63, 0x3b, 0x75, 0x92, 0x9b, 0x34, 0xdf, 0xa7, 0x51, 0x94, 0x8e, 0x22, 0x70, 0x4d,
	0x60, 0xe1, 0x05, 0x24, 0xa8, 0x3c, 0x41, 0x2a, 0xb1, 0x08, 0x7f, 0x36, 0x16, 0x6c, 0xd8, 0x44,
	0x53, 0xcf, 0x6d, 0x32, 0xaa, 0xed, 0xb1, 0xc6, 0xa3, 0xd0, 0xbc, 0x05, 0x8f, 0xd1, 0x47, 0xe9,
	0xb2, 0xcb, 0xae, 0x10, 0x38, 0x1b, 0x96, 0x88, 0x27, 0x40, 0x33, 0x4e, 0x0a, 0x94, 0x0d, 0xbb,
	0x7b, 0x7e, 0x67, 0xe6, 0xdc, 0xf1, 0xbd, 0x32, 0x0c, 0x0a, 0x25, 0xb5, 0x9c, 0x72, 0x26, 0xa7,
	0x19, 0x13, 0xe9, 0xc4, 0x4a, 0xe2, 0x71, 0x26, 0x47, 0xc3, 0xda, 0xca, 0x24, 0xc7, 0xb4, 0x9c,
	0x9e, 0xb1, 0x65, 0x6d, 0x8e, 0x8e, 0xfe, 0xe0, 0xbf, 0x6e, 0x8d, 0x06, 0x4b, 0xb9, 0x94, 0xb5,
	0x69, 0xaa, 0x9a, 0x8e, 0xdf, 0x40, 0xf3, 0x2d, 0x13, 0x29, 0x39, 0x86, 0x96, 0x92, 0x29, 0x2e,
	0x04, 0xa7, 0x4e, 0xe8, 0x44, 0x9d, 0x53, 0xff, 0xc7, 0xe7, 0x63, 0xb7, 0xb8, 0x88, 0x7d, 0x83,
	0xe7, 0x9c, 0x3c, 0x86, 0x03, 0x13, 0x56, 0x52, 0x37, 0xf4, 0xa2, 0xee, 0xc9, 0xe1, 0x84, 0x33,
	0x39, 0x31, 0x57, 0xe7, 0x1a, 0xb3, 0xb8, 0xf6, 0xc6, 0x57, 0x1e, 0xb4, 0xf7, 0x8c, 0x0c, 0xc1,
	0xfd, 0x2b, 0xcd, 0x15, 0x9c, 0x3c, 0x81, 0xa6, 0xde, 0x14, 0x48, 0xdd, 0xd0, 0x89, 0xfa, 0x27,
	0xff, 0x4f, 0xea, 0xa7, 0xda, 0xac, 0x77, 0x9b, 0x02, 0x63, 0xeb, 0x92, 0x21, 0xf8, 0x25, 0xe6,
	0x1c, 0x15, 0xf5, 0x4c, 0x42, 0xbc, 0x53, 0xe4, 0x08, 0x5a, 0x1a, 0x2f, 0xb5, 0x79, 0x68, 0x33,
	0x74, 0x22, 0x2f, 0xf6, 0x8d, 0x9c, 0x73, 0x32, 0x80, 0x03, 0x2d, 0x74, 0x8a, 0xf4, 0xc0, 0x9e,
	0xaf, 0x05, 0xa1, 0xd0, 0x4a, 0x64, 0xae, 0x31, 0xd7, 0xd4, 0xb7, 0x7c, 0x2f, 0x49, 0x1f, 0xdc,
	0x95, 0xa0, 0x2d, 0x0b, 0xdd, 0x95, 0x20, 0x0f, 0x01, 0xf0, 0xb2, 0x10, 0x0a, 0xf9, 0x82, 0x69,
	0xda, 0xb6, 0xd9, 0x9d, 0x1d, 0x99, 0x69, 0x42, 0xa0, 0xc9, 0xd4, 0xb2, 0xa4, 0x9d, 0xd0, 0x8b,
	0x3a, 0xb1, 0xad, 0xc9, 0x53, 0x00, 0xa6, 0x35, 0x4b, 0x56, 0x99, 0xc9, 0x07, 0x3b, 0x98, 0xde,
	0xfe, 0x7b, 0xec, 0x5c, 0x7e, 0xf3, 0x4d, 0x82, 0x42, 0xc6, 0x69, 0x37, 0x74, 0xa2, 0x76, 0x6c,
	0x6b, 0xd3, 0x34, 0x51, 0xc8, 0x74, 0xdd, 0xb4, 0x57, 0x37, 0xdd, 0x91, 0x99, 0x36, 0x36, 0xc7,
	0x14, 0x77, 0xf6, 0x61, 0x6d, 0xef, 0xc8, 0x4c, 0x93, 0x47, 0xd0, 0x63, 0x89, 0x16, 0xeb, 0xfd,
	0xfd, 0xbe, 0x3d, 0xd0, 0xbd, 0x63, 0x33, 0x6d, 0xc6, 0x75, 0x2e, 0xd5, 0x82, 0xa5, 0x29, 0xfd,
	0xcf, 0xf6, 0xf5, 0xcf, 0xa5, 0x9a, 0xa5, 0xe9, 0xf8, 0x35, 0xc0, 0xcb, 0x5c, 0x0b, 0x85, 0x76,
	0xfd, 0x14, 0xbc, 0x0b, 0xdc, 0xdc, 0x5b, 0x96, 0x41, 0xff, 0xb6, 0xf7, 0xe7, 0xd0, 0x7b, 0x5f,
	0x70, 0xa6, 0x31, 0xc6, 0x8f, 0x4c, 0x71, 0x12, 0x42, 0x6b, 0x8d, 0xaa, 0x14, 0x32, 0xbf, 0x17,
	0xb9, 0xc7, 0xa7, 0xaf, 0x6e, 0xbf, 0x06, 0x8d, 0xab, 0x2a, 0x70, 0xae, 0xab, 0xc0, 0xb9, 0xa9,
	0x02, 0xe7, 0x4b, 0x15, 0x38, 0xdf, 0xaa, 0xa0, 0xf1, 0xbd, 0x0a, 0x9c, 0x4f, 0xdb, 0xa0, 0x71,
	0xbd, 0x0d, 0x9c, 0x9b, 0x6d, 0xd0, 0xb8, 0xdd, 0x06, 0x8d, 0x0f, 0x0f, 0x12, 0x29, 0xf2, 0x67,
	0x25, 0xaa, 0x35, 0xaa, 0x69, 0x22, 0xb3, 0x4c, 0xe6, 0xd3, 0xbb, 0x5f, 0xe3, 0xcc, 0xb7, 0xe5,
	0x8b, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x17, 0xd8, 0xd6, 0x6f, 0x2e, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMailItem.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolEntireMail.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolUpdateReward.Get().(proto.Message)
	})
}

var poolMail = &sync.Pool{New: func() interface{} { return &Mail{} }}

func (m *Mail) ReleasePool() { m.Reset(); poolMail.Put(m); m = nil }

var poolMailItem = &sync.Pool{New: func() interface{} { return &MailItem{} }}

func (m *MailItem) ReleasePool() { m.Reset(); poolMailItem.Put(m); m = nil }

var poolEntireMail = &sync.Pool{New: func() interface{} { return &EntireMail{} }}

func (m *EntireMail) ReleasePool() { m.Reset(); poolEntireMail.Put(m); m = nil }

var poolUpdateReward = &sync.Pool{New: func() interface{} { return &UpdateReward{} }}

func (m *UpdateReward) ReleasePool() { m.Reset(); poolUpdateReward.Put(m); m = nil }

func (m *Mail) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Mail) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Mail) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Mail) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Mail) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *MailItem) PK() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *MailItem) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Id...)
}

func (m *MailItem) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *MailItem) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *MailItem) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *EntireMail) PK() string {
	if m == nil {
		return ""
	}
	return m.Key
}

func (m *EntireMail) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Key...)
}

func (m *EntireMail) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *EntireMail) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *EntireMail) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *UpdateReward) PK() string {
	if m == nil {
		return ""
	}
	return m.Version
}

func (m *UpdateReward) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Version...)
}

func (m *UpdateReward) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *UpdateReward) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *UpdateReward) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Mail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mail)
	if !ok {
		that2, ok := that.(Mail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Mails) != len(that1.Mails) {
		return false
	}
	for i := range this.Mails {
		if !this.Mails[i].Equal(that1.Mails[i]) {
			return false
		}
	}
	return true
}
func (this *MailItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MailItem)
	if !ok {
		that2, ok := that.(MailItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.TextId != that1.TextId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.Hi != that1.Hi {
		return false
	}
	if this.ExpiredAt != that1.ExpiredAt {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if this.Args[i] != that1.Args[i] {
			return false
		}
	}
	if len(this.Attachment) != len(that1.Attachment) {
		return false
	}
	for i := range this.Attachment {
		if !this.Attachment[i].Equal(that1.Attachment[i]) {
			return false
		}
	}
	if this.Read != that1.Read {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.DeletedAt != that1.DeletedAt {
		return false
	}
	if this.ActivatedAt != that1.ActivatedAt {
		return false
	}
	if this.ForAll != that1.ForAll {
		return false
	}
	return true
}
func (this *EntireMail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntireMail)
	if !ok {
		that2, ok := that.(EntireMail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Mails) != len(that1.Mails) {
		return false
	}
	for i := range this.Mails {
		if !this.Mails[i].Equal(that1.Mails[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateReward) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateReward)
	if !ok {
		that2, ok := that.(UpdateReward)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (m *Mail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for iNdEx := len(m.Mails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMail(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMail(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MailItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForAll {
		i--
		if m.ForAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.ActivatedAt != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.ActivatedAt))
		i--
		dAtA[i] = 0x70
	}
	if m.DeletedAt != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x68
	}
	if m.CreatedAt != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x60
	}
	if m.Read {
		i--
		if m.Read {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Attachment) > 0 {
		for iNdEx := len(m.Attachment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMail(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintMail(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.ExpiredAt != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Hi) > 0 {
		i -= len(m.Hi)
		copy(dAtA[i:], m.Hi)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Hi)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TextId != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.TextId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntireMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntireMail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntireMail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for iNdEx := len(m.Mails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMail(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMail(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMail(dAtA []byte, offset int, v uint64) int {
	offset -= sovMail(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Mail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("mails")
	w.RawByte('"')
	w.RawByte(':')
	if m.Mails == nil {
		w.RawString("null")
	} else if len(m.Mails) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Mails {
			v.JsonBytes(w)
			if i != len(m.Mails)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MailItem) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if m.Sender != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sender")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Sender)
		needWriteComma = true
	}
	if m.TextId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("text_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TextId))
		needWriteComma = true
	}
	if m.Title != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Title)
		needWriteComma = true
	}
	if m.Content != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("content")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Content)
		needWriteComma = true
	}
	if m.Hi != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hi")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Hi)
		needWriteComma = true
	}
	if m.ExpiredAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expired_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpiredAt))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("args")
	w.RawByte('"')
	w.RawByte(':')
	if m.Args == nil {
		w.RawString("null")
	} else if len(m.Args) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Args {
			w.String(v)
			if i != len(m.Args)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attachment")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attachment == nil {
		w.RawString("null")
	} else if len(m.Attachment) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Attachment {
			v.JsonBytes(w)
			if i != len(m.Attachment)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Read {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("read")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Read)
		needWriteComma = true
	}
	if m.CreatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("created_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreatedAt))
		needWriteComma = true
	}
	if m.DeletedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("deleted_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DeletedAt))
		needWriteComma = true
	}
	if m.ActivatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("activated_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActivatedAt))
		needWriteComma = true
	}
	if m.ForAll {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("for_all")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.ForAll)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *EntireMail) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Key != "" {
		w.RawByte('"')
		w.RawString("key")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Key)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("mails")
	w.RawByte('"')
	w.RawByte(':')
	if m.Mails == nil {
		w.RawString("null")
	} else if len(m.Mails) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Mails {
			v.JsonBytes(w)
			if i != len(m.Mails)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *UpdateReward) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Version != "" {
		w.RawByte('"')
		w.RawString("version")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Version)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Mail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Mail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Mail) GoString() string {
	return m.String()
}

func (m *MailItem) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MailItem) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MailItem) GoString() string {
	return m.String()
}

func (m *EntireMail) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *EntireMail) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *EntireMail) GoString() string {
	return m.String()
}

func (m *UpdateReward) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *UpdateReward) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *UpdateReward) GoString() string {
	return m.String()
}

func (m *Mail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *MailItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMail(uint64(m.Type))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.TextId != 0 {
		n += 1 + sovMail(uint64(m.TextId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Hi)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovMail(uint64(m.ExpiredAt))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if len(m.Attachment) > 0 {
		for _, e := range m.Attachment {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if m.Read {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovMail(uint64(m.CreatedAt))
	}
	if m.DeletedAt != 0 {
		n += 1 + sovMail(uint64(m.DeletedAt))
	}
	if m.ActivatedAt != 0 {
		n += 1 + sovMail(uint64(m.ActivatedAt))
	}
	if m.ForAll {
		n += 2
	}
	return n
}

func (m *EntireMail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *UpdateReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func sovMail(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMail(x uint64) (n int) {
	return sovMail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &MailItem{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= models.MailType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextId", wireType)
			}
			m.TextId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachment = append(m.Attachment, &models.Item{})
			if err := m.Attachment[len(m.Attachment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Read = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivatedAt", wireType)
			}
			m.ActivatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForAll = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntireMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntireMail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntireMail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &MailItem{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMail
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMail
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMail
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMail        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMail          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMail = fmt.Errorf("proto: unexpected end of group")
)
