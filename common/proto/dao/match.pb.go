// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/match.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MatchConfig struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Opt    int64  `protobuf:"varint,2,opt,name=opt,proto3" json:"opt,omitempty"`
}

func (m *MatchConfig) Reset()      { *m = MatchConfig{} }
func (*MatchConfig) ProtoMessage() {}
func (*MatchConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_95762a03818d416e, []int{0}
}
func (m *MatchConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchConfig.Merge(m, src)
}
func (m *MatchConfig) XXX_Size() int {
	return m.Size()
}
func (m *MatchConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MatchConfig proto.InternalMessageInfo

func (m *MatchConfig) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *MatchConfig) GetOpt() int64 {
	if m != nil {
		return m.Opt
	}
	return 0
}

func (*MatchConfig) XXX_MessageName() string {
	return "dao.MatchConfig"
}

type MatchJoinCnt struct {
	RoleId     string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	TodayJoin  int64  `protobuf:"varint,2,opt,name=today_join,json=todayJoin,proto3" json:"today_join,omitempty"`
	LastJoinAt int64  `protobuf:"varint,3,opt,name=last_join_at,json=lastJoinAt,proto3" json:"last_join_at,omitempty"`
}

func (m *MatchJoinCnt) Reset()      { *m = MatchJoinCnt{} }
func (*MatchJoinCnt) ProtoMessage() {}
func (*MatchJoinCnt) Descriptor() ([]byte, []int) {
	return fileDescriptor_95762a03818d416e, []int{1}
}
func (m *MatchJoinCnt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchJoinCnt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchJoinCnt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchJoinCnt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchJoinCnt.Merge(m, src)
}
func (m *MatchJoinCnt) XXX_Size() int {
	return m.Size()
}
func (m *MatchJoinCnt) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchJoinCnt.DiscardUnknown(m)
}

var xxx_messageInfo_MatchJoinCnt proto.InternalMessageInfo

func (m *MatchJoinCnt) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *MatchJoinCnt) GetTodayJoin() int64 {
	if m != nil {
		return m.TodayJoin
	}
	return 0
}

func (m *MatchJoinCnt) GetLastJoinAt() int64 {
	if m != nil {
		return m.LastJoinAt
	}
	return 0
}

func (*MatchJoinCnt) XXX_MessageName() string {
	return "dao.MatchJoinCnt"
}

type DungeonJoinCnt struct {
	TodayJoin  int64 `protobuf:"varint,1,opt,name=today_join,json=todayJoin,proto3" json:"today_join,omitempty"`
	LastJoinAt int64 `protobuf:"varint,2,opt,name=last_join_at,json=lastJoinAt,proto3" json:"last_join_at,omitempty"`
}

func (m *DungeonJoinCnt) Reset()      { *m = DungeonJoinCnt{} }
func (*DungeonJoinCnt) ProtoMessage() {}
func (*DungeonJoinCnt) Descriptor() ([]byte, []int) {
	return fileDescriptor_95762a03818d416e, []int{2}
}
func (m *DungeonJoinCnt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DungeonJoinCnt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DungeonJoinCnt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DungeonJoinCnt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DungeonJoinCnt.Merge(m, src)
}
func (m *DungeonJoinCnt) XXX_Size() int {
	return m.Size()
}
func (m *DungeonJoinCnt) XXX_DiscardUnknown() {
	xxx_messageInfo_DungeonJoinCnt.DiscardUnknown(m)
}

var xxx_messageInfo_DungeonJoinCnt proto.InternalMessageInfo

func (m *DungeonJoinCnt) GetTodayJoin() int64 {
	if m != nil {
		return m.TodayJoin
	}
	return 0
}

func (m *DungeonJoinCnt) GetLastJoinAt() int64 {
	if m != nil {
		return m.LastJoinAt
	}
	return 0
}

func (*DungeonJoinCnt) XXX_MessageName() string {
	return "dao.DungeonJoinCnt"
}

type MatchInviting struct {
	RoleId    string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	InviterId string `protobuf:"bytes,2,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
}

func (m *MatchInviting) Reset()      { *m = MatchInviting{} }
func (*MatchInviting) ProtoMessage() {}
func (*MatchInviting) Descriptor() ([]byte, []int) {
	return fileDescriptor_95762a03818d416e, []int{3}
}
func (m *MatchInviting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchInviting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchInviting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchInviting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchInviting.Merge(m, src)
}
func (m *MatchInviting) XXX_Size() int {
	return m.Size()
}
func (m *MatchInviting) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchInviting.DiscardUnknown(m)
}

var xxx_messageInfo_MatchInviting proto.InternalMessageInfo

func (m *MatchInviting) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *MatchInviting) GetInviterId() string {
	if m != nil {
		return m.InviterId
	}
	return ""
}

func (*MatchInviting) XXX_MessageName() string {
	return "dao.MatchInviting"
}
func init() {
	proto.RegisterType((*MatchConfig)(nil), "dao.MatchConfig")
	proto.RegisterType((*MatchJoinCnt)(nil), "dao.MatchJoinCnt")
	proto.RegisterType((*DungeonJoinCnt)(nil), "dao.DungeonJoinCnt")
	proto.RegisterType((*MatchInviting)(nil), "dao.MatchInviting")
}

func init() { proto.RegisterFile("proto/dao/match.proto", fileDescriptor_95762a03818d416e) }

var fileDescriptor_95762a03818d416e = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4a, 0xc3, 0x40,
	0x1c, 0xc6, 0x73, 0x09, 0x44, 0x72, 0x56, 0x91, 0xa0, 0x10, 0x44, 0xaf, 0x21, 0x53, 0x17, 0xcd,
	0xe0, 0x0b, 0x68, 0xeb, 0x92, 0x82, 0x88, 0x19, 0x5d, 0xc2, 0x99, 0x8b, 0xf1, 0xb4, 0xb9, 0x7f,
	0x48, 0xcf, 0x82, 0x6f, 0xe1, 0x63, 0xf8, 0x28, 0x1d, 0x3b, 0x76, 0x12, 0xbd, 0x2c, 0x8e, 0xe2,
	0x13, 0xc8, 0x5d, 0xab, 0x20, 0x0e, 0xed, 0xf6, 0xdd, 0xf7, 0x7d, 0xfc, 0x8e, 0x8f, 0x3f, 0xde,
	0xab, 0x1b, 0x90, 0x10, 0x33, 0x0a, 0x71, 0x45, 0x65, 0x7e, 0x77, 0x6c, 0xde, 0xbe, 0xc3, 0x28,
	0xec, 0xef, 0x96, 0x50, 0xc2, 0x22, 0xd7, 0x6a, 0x11, 0x45, 0xa7, 0x78, 0xf3, 0x42, 0x37, 0x07,
	0x20, 0x6e, 0x79, 0xe9, 0x77, 0xf1, 0x46, 0x03, 0xa3, 0x22, 0xe3, 0x2c, 0x40, 0x21, 0xea, 0x79,
	0x7d, 0xf7, 0xeb, 0xb5, 0x6b, 0xd7, 0x0f, 0xa9, 0xab, 0xed, 0x84, 0xf9, 0x3b, 0xd8, 0x81, 0x5a,
	0x06, 0x76, 0x88, 0x7a, 0x4e, 0xaa, 0x65, 0x54, 0xe3, 0x8e, 0x21, 0x0c, 0x81, 0x8b, 0x81, 0x90,
	0xab, 0x11, 0x87, 0x18, 0x4b, 0x60, 0xf4, 0x29, 0xbb, 0x07, 0x2e, 0x96, 0x24, 0xcf, 0x38, 0x1a,
	0xe1, 0x87, 0xb8, 0x33, 0xa2, 0x63, 0x69, 0xd2, 0x8c, 0xca, 0xc0, 0x31, 0x05, 0xac, 0x3d, 0x9d,
	0x9f, 0xc9, 0xe8, 0x0a, 0x6f, 0x9f, 0x3f, 0x8a, 0xb2, 0x00, 0xf1, 0xf3, 0xe7, 0x5f, 0x24, 0x5a,
	0x85, 0xb4, 0xff, 0x21, 0x2f, 0xf1, 0x96, 0x19, 0x91, 0x88, 0x09, 0x97, 0x5c, 0x94, 0x6b, 0xad,
	0xe0, 0xba, 0x5c, 0x34, 0xba, 0xa3, 0x89, 0x5e, 0xea, 0x2d, 0x9d, 0x84, 0xf5, 0x87, 0xf3, 0x77,
	0x62, 0xbd, 0x28, 0x82, 0xa6, 0x8a, 0xa0, 0x99, 0x22, 0xe8, 0x4d, 0x11, 0xf4, 0xa1, 0x88, 0xf5,
	0xa9, 0x08, 0x7a, 0x6e, 0x89, 0x35, 0x6d, 0x09, 0x9a, 0xb5, 0xc4, 0x9a, 0xb7, 0xc4, 0xba, 0x3e,
	0xc8, 0x81, 0x8b, 0xa3, 0x71, 0xd1, 0x4c, 0x8a, 0x26, 0xce, 0xa1, 0xaa, 0x40, 0xc4, 0xbf, 0xa7,
	0xbc, 0x71, 0x8d, 0x3c, 0xf9, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x52, 0xc3, 0xf5, 0x15, 0xde, 0x01,
	0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMatchConfig.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMatchJoinCnt.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolDungeonJoinCnt.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMatchInviting.Get().(proto.Message)
	})
}

var poolMatchConfig = &sync.Pool{New: func() interface{} { return &MatchConfig{} }}

func (m *MatchConfig) ReleasePool() { m.Reset(); poolMatchConfig.Put(m); m = nil }

var poolMatchJoinCnt = &sync.Pool{New: func() interface{} { return &MatchJoinCnt{} }}

func (m *MatchJoinCnt) ReleasePool() { m.Reset(); poolMatchJoinCnt.Put(m); m = nil }

var poolDungeonJoinCnt = &sync.Pool{New: func() interface{} { return &DungeonJoinCnt{} }}

func (m *DungeonJoinCnt) ReleasePool() { m.Reset(); poolDungeonJoinCnt.Put(m); m = nil }

var poolMatchInviting = &sync.Pool{New: func() interface{} { return &MatchInviting{} }}

func (m *MatchInviting) ReleasePool() { m.Reset(); poolMatchInviting.Put(m); m = nil }

func (m *MatchConfig) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *MatchConfig) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *MatchConfig) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *MatchConfig) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *MatchConfig) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *MatchJoinCnt) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *MatchJoinCnt) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *MatchJoinCnt) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *MatchJoinCnt) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *MatchJoinCnt) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *MatchInviting) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *MatchInviting) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *MatchInviting) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *MatchInviting) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *MatchInviting) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *MatchConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchConfig)
	if !ok {
		that2, ok := that.(MatchConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Opt != that1.Opt {
		return false
	}
	return true
}
func (this *MatchJoinCnt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchJoinCnt)
	if !ok {
		that2, ok := that.(MatchJoinCnt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.TodayJoin != that1.TodayJoin {
		return false
	}
	if this.LastJoinAt != that1.LastJoinAt {
		return false
	}
	return true
}
func (this *DungeonJoinCnt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DungeonJoinCnt)
	if !ok {
		that2, ok := that.(DungeonJoinCnt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TodayJoin != that1.TodayJoin {
		return false
	}
	if this.LastJoinAt != that1.LastJoinAt {
		return false
	}
	return true
}
func (this *MatchInviting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchInviting)
	if !ok {
		that2, ok := that.(MatchInviting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.InviterId != that1.InviterId {
		return false
	}
	return true
}
func (m *MatchConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Opt != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.Opt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MatchJoinCnt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchJoinCnt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchJoinCnt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastJoinAt != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.LastJoinAt))
		i--
		dAtA[i] = 0x18
	}
	if m.TodayJoin != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.TodayJoin))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DungeonJoinCnt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DungeonJoinCnt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DungeonJoinCnt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastJoinAt != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.LastJoinAt))
		i--
		dAtA[i] = 0x10
	}
	if m.TodayJoin != 0 {
		i = encodeVarintMatch(dAtA, i, uint64(m.TodayJoin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MatchInviting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchInviting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchInviting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InviterId) > 0 {
		i -= len(m.InviterId)
		copy(dAtA[i:], m.InviterId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.InviterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintMatch(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovMatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *MatchConfig) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Opt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("opt")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Opt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MatchJoinCnt) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.TodayJoin != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("today_join")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TodayJoin))
		needWriteComma = true
	}
	if m.LastJoinAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_join_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastJoinAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *DungeonJoinCnt) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.TodayJoin != 0 {
		w.RawByte('"')
		w.RawString("today_join")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TodayJoin))
		needWriteComma = true
	}
	if m.LastJoinAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_join_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastJoinAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MatchInviting) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.InviterId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("inviter_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.InviterId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MatchConfig) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MatchConfig) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MatchConfig) GoString() string {
	return m.String()
}

func (m *MatchJoinCnt) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MatchJoinCnt) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MatchJoinCnt) GoString() string {
	return m.String()
}

func (m *DungeonJoinCnt) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *DungeonJoinCnt) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *DungeonJoinCnt) GoString() string {
	return m.String()
}

func (m *MatchInviting) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MatchInviting) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MatchInviting) GoString() string {
	return m.String()
}

func (m *MatchConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.Opt != 0 {
		n += 1 + sovMatch(uint64(m.Opt))
	}
	return n
}

func (m *MatchJoinCnt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.TodayJoin != 0 {
		n += 1 + sovMatch(uint64(m.TodayJoin))
	}
	if m.LastJoinAt != 0 {
		n += 1 + sovMatch(uint64(m.LastJoinAt))
	}
	return n
}

func (m *DungeonJoinCnt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TodayJoin != 0 {
		n += 1 + sovMatch(uint64(m.TodayJoin))
	}
	if m.LastJoinAt != 0 {
		n += 1 + sovMatch(uint64(m.LastJoinAt))
	}
	return n
}

func (m *MatchInviting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.InviterId)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func sovMatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMatch(x uint64) (n int) {
	return sovMatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MatchConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			m.Opt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchJoinCnt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchJoinCnt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchJoinCnt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayJoin", wireType)
			}
			m.TodayJoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayJoin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastJoinAt", wireType)
			}
			m.LastJoinAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastJoinAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DungeonJoinCnt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DungeonJoinCnt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DungeonJoinCnt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayJoin", wireType)
			}
			m.TodayJoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayJoin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastJoinAt", wireType)
			}
			m.LastJoinAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastJoinAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchInviting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchInviting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchInviting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMatch = fmt.Errorf("proto: unexpected end of group")
)
