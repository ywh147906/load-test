// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/hero.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Hero struct {
	// 这里的id是row_hero表里的OriginID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" pk`
	//  map<int64,models.HeroSkillItem> skill = 2;
	Skill        map[int64]*SkillLevel           `protobuf:"bytes,2,rep,name=skill,proto3" json:"skill,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attrs        map[int64]*models.HeroAttr      `protobuf:"bytes,3,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EquipSlot    map[int64]*models.HeroEquipSlot `protobuf:"bytes,4,rep,name=equip_slot,json=equipSlot,proto3" json:"equip_slot,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CombatValue  *models.CombatValue             `protobuf:"bytes,5,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	BuildId      int64                           `protobuf:"varint,6,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	Buff         map[int64]*models.HeroBuffItem  `protobuf:"bytes,7,rep,name=buff,proto3" json:"buff,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TalentBuff   []int64                         `protobuf:"varint,8,rep,packed,name=talent_buff,json=talentBuff,proto3" json:"talent_buff,omitempty"`
	SoulContract *models.SoulContract            `protobuf:"bytes,9,opt,name=soul_contract,json=soulContract,proto3" json:"soul_contract,omitempty"`
	// 共鸣状态，key为equip_resonance表id，
	// value 1:达成未激活 2:已激活
	Resonance map[int64]models.ResonanceStatus `protobuf:"bytes,10,rep,name=resonance,proto3" json:"resonance,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=models.ResonanceStatus"`
	Fashion   *models.HeroFashion              `protobuf:"bytes,11,opt,name=fashion,proto3" json:"fashion,omitempty"`
}

func (m *Hero) Reset()      { *m = Hero{} }
func (*Hero) ProtoMessage() {}
func (*Hero) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b7188965c5f683, []int{0}
}
func (m *Hero) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hero) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hero.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hero) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hero.Merge(m, src)
}
func (m *Hero) XXX_Size() int {
	return m.Size()
}
func (m *Hero) XXX_DiscardUnknown() {
	xxx_messageInfo_Hero.DiscardUnknown(m)
}

var xxx_messageInfo_Hero proto.InternalMessageInfo

func (m *Hero) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hero) GetSkill() map[int64]*SkillLevel {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *Hero) GetAttrs() map[int64]*models.HeroAttr {
	if m != nil {
		return m.Attrs
	}
	return nil
}

func (m *Hero) GetEquipSlot() map[int64]*models.HeroEquipSlot {
	if m != nil {
		return m.EquipSlot
	}
	return nil
}

func (m *Hero) GetCombatValue() *models.CombatValue {
	if m != nil {
		return m.CombatValue
	}
	return nil
}

func (m *Hero) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *Hero) GetBuff() map[int64]*models.HeroBuffItem {
	if m != nil {
		return m.Buff
	}
	return nil
}

func (m *Hero) GetTalentBuff() []int64 {
	if m != nil {
		return m.TalentBuff
	}
	return nil
}

func (m *Hero) GetSoulContract() *models.SoulContract {
	if m != nil {
		return m.SoulContract
	}
	return nil
}

func (m *Hero) GetResonance() map[int64]models.ResonanceStatus {
	if m != nil {
		return m.Resonance
	}
	return nil
}

func (m *Hero) GetFashion() *models.HeroFashion {
	if m != nil {
		return m.Fashion
	}
	return nil
}

func (*Hero) XXX_MessageName() string {
	return "dao.Hero"
}

// 英雄传记奖励领取信息
type HeroBiography struct {
	RoleId      string          `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	BiographyId map[int64]int64 `protobuf:"bytes,2,rep,name=biography_id,json=biographyId,proto3" json:"biography_id,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *HeroBiography) Reset()      { *m = HeroBiography{} }
func (*HeroBiography) ProtoMessage() {}
func (*HeroBiography) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b7188965c5f683, []int{1}
}
func (m *HeroBiography) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeroBiography) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeroBiography.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeroBiography) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeroBiography.Merge(m, src)
}
func (m *HeroBiography) XXX_Size() int {
	return m.Size()
}
func (m *HeroBiography) XXX_DiscardUnknown() {
	xxx_messageInfo_HeroBiography.DiscardUnknown(m)
}

var xxx_messageInfo_HeroBiography proto.InternalMessageInfo

func (m *HeroBiography) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *HeroBiography) GetBiographyId() map[int64]int64 {
	if m != nil {
		return m.BiographyId
	}
	return nil
}

func (*HeroBiography) XXX_MessageName() string {
	return "dao.HeroBiography"
}

// 各个系统对英雄技能等级的额外加成
type SkillLevel struct {
	Talent int64           `protobuf:"varint,1,opt,name=talent,proto3" json:"talent,omitempty"`
	Equip  map[int64]int64 `protobuf:"bytes,2,rep,name=equip,proto3" json:"equip,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Role   int64           `protobuf:"varint,3,opt,name=role,proto3" json:"role,omitempty"`
	Stones []int64         `protobuf:"varint,4,rep,packed,name=stones,proto3" json:"stones,omitempty"`
}

func (m *SkillLevel) Reset()      { *m = SkillLevel{} }
func (*SkillLevel) ProtoMessage() {}
func (*SkillLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2b7188965c5f683, []int{2}
}
func (m *SkillLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkillLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkillLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkillLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillLevel.Merge(m, src)
}
func (m *SkillLevel) XXX_Size() int {
	return m.Size()
}
func (m *SkillLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillLevel.DiscardUnknown(m)
}

var xxx_messageInfo_SkillLevel proto.InternalMessageInfo

func (m *SkillLevel) GetTalent() int64 {
	if m != nil {
		return m.Talent
	}
	return 0
}

func (m *SkillLevel) GetEquip() map[int64]int64 {
	if m != nil {
		return m.Equip
	}
	return nil
}

func (m *SkillLevel) GetRole() int64 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *SkillLevel) GetStones() []int64 {
	if m != nil {
		return m.Stones
	}
	return nil
}

func (*SkillLevel) XXX_MessageName() string {
	return "dao.SkillLevel"
}
func init() {
	proto.RegisterType((*Hero)(nil), "dao.Hero")
	proto.RegisterMapType((map[int64]*models.HeroAttr)(nil), "dao.Hero.AttrsEntry")
	proto.RegisterMapType((map[int64]*models.HeroBuffItem)(nil), "dao.Hero.BuffEntry")
	proto.RegisterMapType((map[int64]*models.HeroEquipSlot)(nil), "dao.Hero.EquipSlotEntry")
	proto.RegisterMapType((map[int64]models.ResonanceStatus)(nil), "dao.Hero.ResonanceEntry")
	proto.RegisterMapType((map[int64]*SkillLevel)(nil), "dao.Hero.SkillEntry")
	proto.RegisterType((*HeroBiography)(nil), "dao.HeroBiography")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.HeroBiography.BiographyIdEntry")
	proto.RegisterType((*SkillLevel)(nil), "dao.SkillLevel")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.SkillLevel.EquipEntry")
}

func init() { proto.RegisterFile("proto/dao/hero.proto", fileDescriptor_c2b7188965c5f683) }

var fileDescriptor_c2b7188965c5f683 = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0xe3, 0xfc, 0x34, 0x93, 0xb6, 0x54, 0xdb, 0xd0, 0x2e, 0x16, 0x72, 0xa3, 0x22, 0x20,
	0x2a, 0x6a, 0x82, 0x8a, 0x54, 0x0a, 0x07, 0x24, 0x5a, 0xb5, 0x22, 0x15, 0x5c, 0x1c, 0xc1, 0x81,
	0x4b, 0xe4, 0xd8, 0x9b, 0xd6, 0xaa, 0xe3, 0x0d, 0xde, 0x75, 0xa5, 0xde, 0x78, 0x04, 0x1e, 0x83,
	0x47, 0xe0, 0xc0, 0x03, 0xf4, 0xd8, 0x63, 0x4f, 0x08, 0x92, 0x0b, 0x47, 0xc4, 0x13, 0xa0, 0xdd,
	0x75, 0xfc, 0x13, 0xe5, 0xc2, 0x6d, 0x67, 0xbe, 0x1f, 0xcf, 0xee, 0xcc, 0x18, 0x1a, 0xe3, 0x90,
	0x72, 0xda, 0x71, 0x6d, 0xda, 0x39, 0x27, 0x21, 0x6d, 0xcb, 0x10, 0xe9, 0xae, 0x4d, 0x8d, 0xc6,
	0x19, 0x3d, 0xa3, 0x0a, 0x16, 0x27, 0x05, 0x19, 0x9b, 0x2a, 0x33, 0xa2, 0x2e, 0xf1, 0x59, 0x46,
	0x63, 0xe0, 0x1c, 0x40, 0x82, 0x68, 0xc4, 0x14, 0xb2, 0xfd, 0xb9, 0x0a, 0xa5, 0x37, 0x24, 0xa4,
	0x68, 0x03, 0x8a, 0x9e, 0x8b, 0xb5, 0xa6, 0xd6, 0xd2, 0x0f, 0x2b, 0x7f, 0x7f, 0x6c, 0x15, 0xc7,
	0x17, 0x56, 0xd1, 0x73, 0xd1, 0x0e, 0x94, 0xd9, 0x85, 0xe7, 0xfb, 0xb8, 0xd8, 0xd4, 0x5b, 0xf5,
	0xbd, 0x46, 0xdb, 0xb5, 0x69, 0x5b, 0x28, 0xda, 0x3d, 0x91, 0x3e, 0x0e, 0x78, 0x78, 0x65, 0x29,
	0x8a, 0xe0, 0xda, 0x9c, 0x87, 0x0c, 0xeb, 0xf3, 0xdc, 0xd7, 0x22, 0x1d, 0x73, 0x25, 0x05, 0x3d,
	0x07, 0x20, 0x9f, 0x22, 0x6f, 0xdc, 0x67, 0x3e, 0xe5, 0xb8, 0x24, 0x05, 0x38, 0x15, 0x1c, 0x0b,
	0xac, 0xe7, 0x53, 0xae, 0x44, 0x35, 0x32, 0x8b, 0xd1, 0x3e, 0x2c, 0x3b, 0x74, 0x34, 0xb0, 0x79,
	0xff, 0xd2, 0xf6, 0x23, 0x82, 0xcb, 0x4d, 0xad, 0x55, 0xdf, 0x5b, 0x6f, 0xab, 0xcb, 0xb5, 0x8f,
	0x24, 0xf6, 0x41, 0x40, 0x56, 0xdd, 0x49, 0x03, 0x74, 0x0f, 0x96, 0x06, 0x91, 0xe7, 0xbb, 0x7d,
	0xcf, 0xc5, 0x15, 0x71, 0x4d, 0xab, 0x2a, 0xe3, 0xae, 0x8b, 0x1e, 0x43, 0x69, 0x10, 0x0d, 0x87,
	0xb8, 0x2a, 0xab, 0x58, 0x4f, 0xab, 0x38, 0x8c, 0x86, 0x43, 0x55, 0x80, 0x24, 0xa0, 0x2d, 0xa8,
	0x73, 0xdb, 0x27, 0x01, 0xef, 0x4b, 0xfe, 0x52, 0x53, 0x6f, 0xe9, 0x16, 0xa8, 0x94, 0xe0, 0xa2,
	0x17, 0xb0, 0xc2, 0x68, 0xe4, 0xf7, 0x1d, 0x1a, 0xf0, 0xd0, 0x76, 0x38, 0xae, 0xc9, 0xea, 0x1a,
	0xb3, 0xea, 0x7a, 0x34, 0xf2, 0x8f, 0x62, 0xcc, 0x5a, 0x66, 0x99, 0x08, 0xed, 0x43, 0x2d, 0x24,
	0x8c, 0x06, 0x76, 0xe0, 0x10, 0x0c, 0xf3, 0xef, 0x61, 0xcd, 0xa0, 0xf8, 0x3d, 0x12, 0x2a, 0xda,
	0x85, 0xea, 0xd0, 0x66, 0xe7, 0x1e, 0x0d, 0x70, 0x3d, 0xff, 0x14, 0x42, 0x78, 0xa2, 0x20, 0x6b,
	0xc6, 0x31, 0xba, 0x00, 0x69, 0xe3, 0xd0, 0x1a, 0xe8, 0x17, 0xe4, 0x4a, 0xb5, 0xdd, 0x12, 0x47,
	0xf4, 0x10, 0xca, 0xea, 0x5d, 0x8b, 0xd2, 0xec, 0x8e, 0x2c, 0x41, 0x2a, 0xde, 0x92, 0x4b, 0xe2,
	0x5b, 0x0a, 0x7d, 0x59, 0x3c, 0xd0, 0x8c, 0x53, 0x80, 0xb4, 0xaf, 0x0b, 0xac, 0x1e, 0xe5, 0xad,
	0xd6, 0xb2, 0x75, 0x09, 0x61, 0xd6, 0xab, 0x07, 0xab, 0xf9, 0x96, 0x2f, 0xf0, 0x7b, 0x92, 0xf7,
	0xbb, 0x9b, 0xf5, 0x4b, 0xc4, 0x59, 0xd3, 0x77, 0x50, 0x4b, 0x3a, 0xb8, 0xc0, 0x6f, 0x27, 0xef,
	0xd7, 0xc8, 0xfa, 0x09, 0x5d, 0x97, 0x93, 0x51, 0xd6, 0xee, 0x3d, 0xac, 0xe6, 0xdb, 0xb0, 0xc0,
	0x73, 0x37, 0xeb, 0xb9, 0xba, 0xb7, 0x39, 0xf3, 0x4c, 0x84, 0x3d, 0x6e, 0xf3, 0x88, 0x65, 0x6c,
	0xb7, 0xbf, 0x69, 0xb0, 0x22, 0x3f, 0xe9, 0xd1, 0xb3, 0xd0, 0x1e, 0x9f, 0x5f, 0xa1, 0x2d, 0xa8,
	0x86, 0xd4, 0x27, 0xfd, 0x78, 0x21, 0x6b, 0xc9, 0x42, 0x56, 0x44, 0xba, 0xeb, 0xa2, 0x13, 0x58,
	0x1e, 0xcc, 0xd8, 0x82, 0xa5, 0x76, 0xf3, 0x41, 0x32, 0x2e, 0x89, 0x55, 0x3b, 0x39, 0x75, 0x5d,
	0x35, 0x39, 0xf5, 0x41, 0x9a, 0x31, 0x5e, 0xc1, 0xda, 0x3c, 0x61, 0xc1, 0x9d, 0x1a, 0xd9, 0x3b,
	0xe9, 0xd9, 0xd2, 0xbf, 0x6b, 0xf1, 0x34, 0xc9, 0xd9, 0x40, 0x1b, 0x50, 0x51, 0xbb, 0x10, 0xab,
	0xe3, 0x08, 0x3d, 0x85, 0xb2, 0xdc, 0xdf, 0xb8, 0x4e, 0x63, 0x6e, 0xa6, 0xd4, 0xb2, 0xc7, 0x7f,
	0x07, 0x49, 0x44, 0x08, 0x4a, 0xe2, 0xaa, 0x58, 0x97, 0x3e, 0xf2, 0x2c, 0xdc, 0x19, 0xa7, 0x01,
	0x61, 0xf2, 0x6f, 0xa1, 0x5b, 0x71, 0x64, 0x1c, 0x00, 0xa4, 0x06, 0xff, 0x53, 0xfe, 0xe1, 0xe9,
	0xed, 0x2f, 0xb3, 0xf0, 0x75, 0x62, 0x6a, 0xd7, 0x13, 0x53, 0xbb, 0x99, 0x98, 0xda, 0xcf, 0x89,
	0xa9, 0xfd, 0x9e, 0x98, 0x85, 0x3f, 0x13, 0x53, 0xfb, 0x32, 0x35, 0x0b, 0xd7, 0x53, 0x53, 0xbb,
	0x99, 0x9a, 0x85, 0xdb, 0xa9, 0x59, 0xf8, 0x78, 0xdf, 0xa1, 0x5e, 0xb0, 0xcb, 0x48, 0x78, 0x49,
	0xc2, 0x8e, 0x43, 0x47, 0x23, 0x1a, 0x74, 0x92, 0x3f, 0xf4, 0xa0, 0x22, 0x8f, 0xcf, 0xfe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x31, 0xc6, 0x56, 0x8b, 0xb5, 0x05, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHero.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolHeroBiography.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSkillLevel.Get().(proto.Message)
	})
}

var poolHero = &sync.Pool{New: func() interface{} { return &Hero{} }}

func (m *Hero) ReleasePool() { m.Reset(); poolHero.Put(m); m = nil }

var poolHeroBiography = &sync.Pool{New: func() interface{} { return &HeroBiography{} }}

func (m *HeroBiography) ReleasePool() { m.Reset(); poolHeroBiography.Put(m); m = nil }

var poolSkillLevel = &sync.Pool{New: func() interface{} { return &SkillLevel{} }}

func (m *SkillLevel) ReleasePool() { m.Reset(); poolSkillLevel.Put(m); m = nil }

func (m *Hero) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.Id), 10)
}

func (m *Hero) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.Id), 10)
}

func (m *Hero) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Hero) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Hero) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *HeroBiography) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *HeroBiography) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *HeroBiography) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *HeroBiography) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *HeroBiography) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Hero) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hero)
	if !ok {
		that2, ok := that.(Hero)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Skill) != len(that1.Skill) {
		return false
	}
	for i := range this.Skill {
		if !this.Skill[i].Equal(that1.Skill[i]) {
			return false
		}
	}
	if len(this.Attrs) != len(that1.Attrs) {
		return false
	}
	for i := range this.Attrs {
		if !this.Attrs[i].Equal(that1.Attrs[i]) {
			return false
		}
	}
	if len(this.EquipSlot) != len(that1.EquipSlot) {
		return false
	}
	for i := range this.EquipSlot {
		if !this.EquipSlot[i].Equal(that1.EquipSlot[i]) {
			return false
		}
	}
	if !this.CombatValue.Equal(that1.CombatValue) {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	if len(this.Buff) != len(that1.Buff) {
		return false
	}
	for i := range this.Buff {
		if !this.Buff[i].Equal(that1.Buff[i]) {
			return false
		}
	}
	if len(this.TalentBuff) != len(that1.TalentBuff) {
		return false
	}
	for i := range this.TalentBuff {
		if this.TalentBuff[i] != that1.TalentBuff[i] {
			return false
		}
	}
	if !this.SoulContract.Equal(that1.SoulContract) {
		return false
	}
	if len(this.Resonance) != len(that1.Resonance) {
		return false
	}
	for i := range this.Resonance {
		if this.Resonance[i] != that1.Resonance[i] {
			return false
		}
	}
	if !this.Fashion.Equal(that1.Fashion) {
		return false
	}
	return true
}
func (this *HeroBiography) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeroBiography)
	if !ok {
		that2, ok := that.(HeroBiography)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.BiographyId) != len(that1.BiographyId) {
		return false
	}
	for i := range this.BiographyId {
		if this.BiographyId[i] != that1.BiographyId[i] {
			return false
		}
	}
	return true
}
func (this *SkillLevel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SkillLevel)
	if !ok {
		that2, ok := that.(SkillLevel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Talent != that1.Talent {
		return false
	}
	if len(this.Equip) != len(that1.Equip) {
		return false
	}
	for i := range this.Equip {
		if this.Equip[i] != that1.Equip[i] {
			return false
		}
	}
	if this.Role != that1.Role {
		return false
	}
	if len(this.Stones) != len(that1.Stones) {
		return false
	}
	for i := range this.Stones {
		if this.Stones[i] != that1.Stones[i] {
			return false
		}
	}
	return true
}
func (m *Hero) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hero) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hero) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fashion != nil {
		{
			size, err := m.Fashion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Resonance) > 0 {
		for k := range m.Resonance {
			v := m.Resonance[k]
			baseI := i
			i = encodeVarintHero(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.SoulContract != nil {
		{
			size, err := m.SoulContract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TalentBuff) > 0 {
		dAtA4 := make([]byte, len(m.TalentBuff)*10)
		var j3 int
		for _, num1 := range m.TalentBuff {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintHero(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Buff) > 0 {
		for k := range m.Buff {
			v := m.Buff[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHero(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.BuildId != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x30
	}
	if m.CombatValue != nil {
		{
			size, err := m.CombatValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHero(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EquipSlot) > 0 {
		for k := range m.EquipSlot {
			v := m.EquipSlot[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHero(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Attrs) > 0 {
		for k := range m.Attrs {
			v := m.Attrs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHero(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Skill) > 0 {
		for k := range m.Skill {
			v := m.Skill[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintHero(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeroBiography) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroBiography) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeroBiography) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BiographyId) > 0 {
		for k := range m.BiographyId {
			v := m.BiographyId[k]
			baseI := i
			i = encodeVarintHero(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintHero(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SkillLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkillLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stones) > 0 {
		dAtA11 := make([]byte, len(m.Stones)*10)
		var j10 int
		for _, num1 := range m.Stones {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintHero(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x22
	}
	if m.Role != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Equip) > 0 {
		for k := range m.Equip {
			v := m.Equip[k]
			baseI := i
			i = encodeVarintHero(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintHero(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintHero(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Talent != 0 {
		i = encodeVarintHero(dAtA, i, uint64(m.Talent))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHero(dAtA []byte, offset int, v uint64) int {
	offset -= sovHero(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Hero) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill")
	w.RawByte('"')
	w.RawByte(':')
	if m.Skill == nil {
		w.RawString("null")
	} else if len(m.Skill) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlSkill := len(m.Skill)
		for k, v := range m.Skill {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlSkill--
			if mlSkill != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attrs")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attrs == nil {
		w.RawString("null")
	} else if len(m.Attrs) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttrs := len(m.Attrs)
		for k, v := range m.Attrs {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlAttrs--
			if mlAttrs != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equip_slot")
	w.RawByte('"')
	w.RawByte(':')
	if m.EquipSlot == nil {
		w.RawString("null")
	} else if len(m.EquipSlot) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquipSlot := len(m.EquipSlot)
		for k, v := range m.EquipSlot {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlEquipSlot--
			if mlEquipSlot != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("combat_value")
	w.RawByte('"')
	w.RawByte(':')
	m.CombatValue.JsonBytes(w)
	needWriteComma = true
	if m.BuildId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff")
	w.RawByte('"')
	w.RawByte(':')
	if m.Buff == nil {
		w.RawString("null")
	} else if len(m.Buff) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuff := len(m.Buff)
		for k, v := range m.Buff {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlBuff--
			if mlBuff != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("talent_buff")
	w.RawByte('"')
	w.RawByte(':')
	if m.TalentBuff == nil {
		w.RawString("null")
	} else if len(m.TalentBuff) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.TalentBuff {
			w.Int64(int64(v))
			if i != len(m.TalentBuff)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("soul_contract")
	w.RawByte('"')
	w.RawByte(':')
	m.SoulContract.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("resonance")
	w.RawByte('"')
	w.RawByte(':')
	if m.Resonance == nil {
		w.RawString("null")
	} else if len(m.Resonance) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlResonance := len(m.Resonance)
		for k, v := range m.Resonance {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlResonance--
			if mlResonance != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("fashion")
	w.RawByte('"')
	w.RawByte(':')
	m.Fashion.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *HeroBiography) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("biography_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.BiographyId == nil {
		w.RawString("null")
	} else if len(m.BiographyId) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBiographyId := len(m.BiographyId)
		for k, v := range m.BiographyId {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlBiographyId--
			if mlBiographyId != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SkillLevel) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Talent != 0 {
		w.RawByte('"')
		w.RawString("talent")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Talent))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equip")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equip == nil {
		w.RawString("null")
	} else if len(m.Equip) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquip := len(m.Equip)
		for k, v := range m.Equip {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEquip--
			if mlEquip != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Role != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Role))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("stones")
	w.RawByte('"')
	w.RawByte(':')
	if m.Stones == nil {
		w.RawString("null")
	} else if len(m.Stones) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Stones {
			w.Int64(int64(v))
			if i != len(m.Stones)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Hero) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Hero) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Hero) GoString() string {
	return m.String()
}

func (m *HeroBiography) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *HeroBiography) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *HeroBiography) GoString() string {
	return m.String()
}

func (m *SkillLevel) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SkillLevel) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SkillLevel) GoString() string {
	return m.String()
}

func (m *Hero) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHero(uint64(m.Id))
	}
	if len(m.Skill) > 0 {
		for k, v := range m.Skill {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHero(uint64(l))
			}
			mapEntrySize := 1 + sovHero(uint64(k)) + l
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if len(m.Attrs) > 0 {
		for k, v := range m.Attrs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHero(uint64(l))
			}
			mapEntrySize := 1 + sovHero(uint64(k)) + l
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if len(m.EquipSlot) > 0 {
		for k, v := range m.EquipSlot {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHero(uint64(l))
			}
			mapEntrySize := 1 + sovHero(uint64(k)) + l
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if m.CombatValue != nil {
		l = m.CombatValue.Size()
		n += 1 + l + sovHero(uint64(l))
	}
	if m.BuildId != 0 {
		n += 1 + sovHero(uint64(m.BuildId))
	}
	if len(m.Buff) > 0 {
		for k, v := range m.Buff {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHero(uint64(l))
			}
			mapEntrySize := 1 + sovHero(uint64(k)) + l
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if len(m.TalentBuff) > 0 {
		l = 0
		for _, e := range m.TalentBuff {
			l += sovHero(uint64(e))
		}
		n += 1 + sovHero(uint64(l)) + l
	}
	if m.SoulContract != nil {
		l = m.SoulContract.Size()
		n += 1 + l + sovHero(uint64(l))
	}
	if len(m.Resonance) > 0 {
		for k, v := range m.Resonance {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHero(uint64(k)) + 1 + sovHero(uint64(v))
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if m.Fashion != nil {
		l = m.Fashion.Size()
		n += 1 + l + sovHero(uint64(l))
	}
	return n
}

func (m *HeroBiography) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovHero(uint64(l))
	}
	if len(m.BiographyId) > 0 {
		for k, v := range m.BiographyId {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHero(uint64(k)) + 1 + sovHero(uint64(v))
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SkillLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Talent != 0 {
		n += 1 + sovHero(uint64(m.Talent))
	}
	if len(m.Equip) > 0 {
		for k, v := range m.Equip {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHero(uint64(k)) + 1 + sovHero(uint64(v))
			n += mapEntrySize + 1 + sovHero(uint64(mapEntrySize))
		}
	}
	if m.Role != 0 {
		n += 1 + sovHero(uint64(m.Role))
	}
	if len(m.Stones) > 0 {
		l = 0
		for _, e := range m.Stones {
			l += sovHero(uint64(e))
		}
		n += 1 + sovHero(uint64(l)) + l
	}
	return n
}

func sovHero(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHero(x uint64) (n int) {
	return sovHero(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Hero) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hero: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hero: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skill == nil {
				m.Skill = make(map[int64]*SkillLevel)
			}
			var mapkey int64
			var mapvalue *SkillLevel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHero
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHero
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SkillLevel{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Skill[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = make(map[int64]*models.HeroAttr)
			}
			var mapkey int64
			var mapvalue *models.HeroAttr
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHero
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHero
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.HeroAttr{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attrs[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipSlot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipSlot == nil {
				m.EquipSlot = make(map[int64]*models.HeroEquipSlot)
			}
			var mapkey int64
			var mapvalue *models.HeroEquipSlot
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHero
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHero
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.HeroEquipSlot{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EquipSlot[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CombatValue == nil {
				m.CombatValue = &models.CombatValue{}
			}
			if err := m.CombatValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buff == nil {
				m.Buff = make(map[int64]*models.HeroBuffItem)
			}
			var mapkey int64
			var mapvalue *models.HeroBuffItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHero
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHero
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.HeroBuffItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Buff[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TalentBuff = append(m.TalentBuff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHero
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHero
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TalentBuff) == 0 {
					m.TalentBuff = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TalentBuff = append(m.TalentBuff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentBuff", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoulContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SoulContract == nil {
				m.SoulContract = &models.SoulContract{}
			}
			if err := m.SoulContract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resonance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resonance == nil {
				m.Resonance = make(map[int64]models.ResonanceStatus)
			}
			var mapkey int64
			var mapvalue models.ResonanceStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= models.ResonanceStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resonance[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fashion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fashion == nil {
				m.Fashion = &models.HeroFashion{}
			}
			if err := m.Fashion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroBiography) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroBiography: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroBiography: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiographyId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BiographyId == nil {
				m.BiographyId = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BiographyId[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Talent", wireType)
			}
			m.Talent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Talent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHero
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHero
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equip == nil {
				m.Equip = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHero(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthHero
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Equip[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stones = append(m.Stones, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHero
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHero
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHero
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stones) == 0 {
					m.Stones = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHero
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stones = append(m.Stones, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stones", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHero(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHero
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHero
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHero
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHero
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHero        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHero          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHero = fmt.Errorf("proto: unexpected end of group")
)
