// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/pay.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 支付成功的订单
type Pay struct {
	Sn         string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty" pk`
	PcId       int64  `protobuf:"varint,2,opt,name=pc_id,json=pcId,proto3" json:"pc_id,omitempty"`
	PaidTime   int64  `protobuf:"varint,3,opt,name=paid_time,json=paidTime,proto3" json:"paid_time,omitempty"`
	ExpireTime int64  `protobuf:"varint,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	CreatedAt  int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Pay) Reset()      { *m = Pay{} }
func (*Pay) ProtoMessage() {}
func (*Pay) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bc5e817a3a549b2, []int{0}
}
func (m *Pay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pay.Merge(m, src)
}
func (m *Pay) XXX_Size() int {
	return m.Size()
}
func (m *Pay) XXX_DiscardUnknown() {
	xxx_messageInfo_Pay.DiscardUnknown(m)
}

var xxx_messageInfo_Pay proto.InternalMessageInfo

func (m *Pay) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func (m *Pay) GetPcId() int64 {
	if m != nil {
		return m.PcId
	}
	return 0
}

func (m *Pay) GetPaidTime() int64 {
	if m != nil {
		return m.PaidTime
	}
	return 0
}

func (m *Pay) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *Pay) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (*Pay) XXX_MessageName() string {
	return "dao.Pay"
}

// 支付成功的订单队列（sdk通知过来的）
type PayQueue struct {
	Sn         string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty" pk`
	RoleId     string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ServerId   int64  `protobuf:"varint,3,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	PcId       int64  `protobuf:"varint,4,opt,name=pc_id,json=pcId,proto3" json:"pc_id,omitempty"`
	PaidTime   int64  `protobuf:"varint,5,opt,name=paid_time,json=paidTime,proto3" json:"paid_time,omitempty"`
	ExpireTime int64  `protobuf:"varint,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (m *PayQueue) Reset()      { *m = PayQueue{} }
func (*PayQueue) ProtoMessage() {}
func (*PayQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bc5e817a3a549b2, []int{1}
}
func (m *PayQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayQueue.Merge(m, src)
}
func (m *PayQueue) XXX_Size() int {
	return m.Size()
}
func (m *PayQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_PayQueue.DiscardUnknown(m)
}

var xxx_messageInfo_PayQueue proto.InternalMessageInfo

func (m *PayQueue) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func (m *PayQueue) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *PayQueue) GetServerId() int64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *PayQueue) GetPcId() int64 {
	if m != nil {
		return m.PcId
	}
	return 0
}

func (m *PayQueue) GetPaidTime() int64 {
	if m != nil {
		return m.PaidTime
	}
	return 0
}

func (m *PayQueue) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (*PayQueue) XXX_MessageName() string {
	return "dao.PayQueue"
}
func init() {
	proto.RegisterType((*Pay)(nil), "dao.Pay")
	proto.RegisterType((*PayQueue)(nil), "dao.PayQueue")
}

func init() { proto.RegisterFile("proto/dao/pay.proto", fileDescriptor_4bc5e817a3a549b2) }

var fileDescriptor_4bc5e817a3a549b2 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x3f, 0x4e, 0xc3, 0x30,
	0x18, 0xc5, 0xe3, 0xa4, 0x0d, 0x8d, 0xd9, 0x52, 0x04, 0x11, 0x7f, 0xdc, 0xaa, 0x53, 0x17, 0xc8,
	0xc0, 0x09, 0xe8, 0x56, 0xa6, 0x52, 0x31, 0xb1, 0x44, 0x26, 0xfe, 0x54, 0x59, 0x90, 0xd8, 0x72,
	0x52, 0x44, 0x4e, 0x01, 0xc7, 0x40, 0xe2, 0x22, 0x1d, 0x3b, 0x76, 0x42, 0xe0, 0x2c, 0x8c, 0x88,
	0x13, 0xa0, 0xd8, 0x05, 0x24, 0xa4, 0xb2, 0x7d, 0xef, 0xfd, 0x3c, 0xfc, 0x9e, 0x8c, 0xbb, 0x52,
	0x89, 0x52, 0xc4, 0x8c, 0x8a, 0x58, 0xd2, 0xea, 0xc4, 0xa4, 0xd0, 0x63, 0x54, 0xec, 0xef, 0xcc,
	0xc4, 0x4c, 0x58, 0xda, 0x5c, 0x16, 0x0d, 0x1e, 0x10, 0xf6, 0x26, 0xb4, 0x0a, 0x77, 0xb1, 0x5b,
	0xe4, 0x11, 0xea, 0xa3, 0x61, 0x30, 0xf2, 0x3f, 0x5f, 0x7a, 0xae, 0xbc, 0x99, 0xba, 0x45, 0x1e,
	0x76, 0x71, 0x5b, 0xa6, 0x09, 0x67, 0x91, 0xdb, 0x47, 0x43, 0x6f, 0xda, 0x92, 0xe9, 0x98, 0x85,
	0x07, 0x38, 0x90, 0x94, 0xb3, 0xa4, 0xe4, 0x19, 0x44, 0x9e, 0x01, 0x9d, 0xa6, 0xb8, 0xe4, 0x19,
	0x84, 0x3d, 0xbc, 0x0d, 0xf7, 0x92, 0x2b, 0xb0, 0xb8, 0x65, 0x30, 0xb6, 0x95, 0x79, 0x70, 0x84,
	0x71, 0xaa, 0x80, 0x96, 0xc0, 0x12, 0x5a, 0x46, 0x6d, 0xc3, 0x83, 0x75, 0x73, 0x56, 0x0e, 0x9e,
	0x11, 0xee, 0x4c, 0x68, 0x75, 0x31, 0x87, 0x39, 0x6c, 0xd4, 0xda, 0xc3, 0x5b, 0x4a, 0xdc, 0xc2,
	0xb7, 0x58, 0x30, 0xf5, 0x9b, 0x68, 0xd5, 0x0a, 0x50, 0x77, 0xa0, 0x1a, 0xb4, 0x56, 0xb3, 0xc5,
	0x98, 0xfd, 0x8e, 0x69, 0x6d, 0x1a, 0xd3, 0xfe, 0x7f, 0x8c, 0xff, 0x77, 0xcc, 0xe8, 0x7c, 0xf5,
	0x46, 0x9c, 0x27, 0x4d, 0xd0, 0x42, 0x13, 0xb4, 0xd4, 0x04, 0xbd, 0x6a, 0x82, 0xde, 0x35, 0x71,
	0x3e, 0x34, 0x41, 0x8f, 0x35, 0x71, 0x16, 0x35, 0x41, 0xcb, 0x9a, 0x38, 0xab, 0x9a, 0x38, 0x57,
	0x87, 0xa9, 0xe0, 0xf9, 0xb1, 0xf5, 0x89, 0x53, 0x91, 0x65, 0x22, 0x8f, 0x7f, 0x3e, 0xec, 0xda,
	0x37, 0xe7, 0xe9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0xf9, 0x39, 0x75, 0xc4, 0x01, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPay.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPayQueue.Get().(proto.Message)
	})
}

var poolPay = &sync.Pool{New: func() interface{} { return &Pay{} }}

func (m *Pay) ReleasePool() { m.Reset(); poolPay.Put(m); m = nil }

var poolPayQueue = &sync.Pool{New: func() interface{} { return &PayQueue{} }}

func (m *PayQueue) ReleasePool() { m.Reset(); poolPayQueue.Put(m); m = nil }

func (m *Pay) PK() string {
	if m == nil {
		return ""
	}
	return m.Sn
}

func (m *Pay) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Sn...)
}

func (m *Pay) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Pay) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Pay) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *PayQueue) PK() string {
	if m == nil {
		return ""
	}
	return m.Sn
}

func (m *PayQueue) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.Sn...)
}

func (m *PayQueue) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *PayQueue) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *PayQueue) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Pay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pay)
	if !ok {
		that2, ok := that.(Pay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sn != that1.Sn {
		return false
	}
	if this.PcId != that1.PcId {
		return false
	}
	if this.PaidTime != that1.PaidTime {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	return true
}
func (this *PayQueue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PayQueue)
	if !ok {
		that2, ok := that.(PayQueue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sn != that1.Sn {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ServerId != that1.ServerId {
		return false
	}
	if this.PcId != that1.PcId {
		return false
	}
	if this.PaidTime != that1.PaidTime {
		return false
	}
	if this.ExpireTime != that1.ExpireTime {
		return false
	}
	return true
}
func (m *Pay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintPay(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.ExpireTime != 0 {
		i = encodeVarintPay(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x20
	}
	if m.PaidTime != 0 {
		i = encodeVarintPay(dAtA, i, uint64(m.PaidTime))
		i--
		dAtA[i] = 0x18
	}
	if m.PcId != 0 {
		i = encodeVarintPay(dAtA, i, uint64(m.PcId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sn) > 0 {
		i -= len(m.Sn)
		copy(dAtA[i:], m.Sn)
		i = encodeVarintPay(dAtA, i, uint64(len(m.Sn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpireTime != 0 {
		i = encodeVarintPay(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x30
	}
	if m.PaidTime != 0 {
		i = encodeVarintPay(dAtA, i, uint64(m.PaidTime))
		i--
		dAtA[i] = 0x28
	}
	if m.PcId != 0 {
		i = encodeVarintPay(dAtA, i, uint64(m.PcId))
		i--
		dAtA[i] = 0x20
	}
	if m.ServerId != 0 {
		i = encodeVarintPay(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintPay(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sn) > 0 {
		i -= len(m.Sn)
		copy(dAtA[i:], m.Sn)
		i = encodeVarintPay(dAtA, i, uint64(len(m.Sn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPay(dAtA []byte, offset int, v uint64) int {
	offset -= sovPay(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Pay) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Sn != "" {
		w.RawByte('"')
		w.RawString("sn")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Sn)
		needWriteComma = true
	}
	if m.PcId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pc_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PcId))
		needWriteComma = true
	}
	if m.PaidTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("paid_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PaidTime))
		needWriteComma = true
	}
	if m.ExpireTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expire_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpireTime))
		needWriteComma = true
	}
	if m.CreatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("created_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreatedAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PayQueue) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Sn != "" {
		w.RawByte('"')
		w.RawString("sn")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Sn)
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerId))
		needWriteComma = true
	}
	if m.PcId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("pc_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PcId))
		needWriteComma = true
	}
	if m.PaidTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("paid_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PaidTime))
		needWriteComma = true
	}
	if m.ExpireTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("expire_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExpireTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Pay) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Pay) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Pay) GoString() string {
	return m.String()
}

func (m *PayQueue) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PayQueue) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PayQueue) GoString() string {
	return m.String()
}

func (m *Pay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sn)
	if l > 0 {
		n += 1 + l + sovPay(uint64(l))
	}
	if m.PcId != 0 {
		n += 1 + sovPay(uint64(m.PcId))
	}
	if m.PaidTime != 0 {
		n += 1 + sovPay(uint64(m.PaidTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovPay(uint64(m.ExpireTime))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPay(uint64(m.CreatedAt))
	}
	return n
}

func (m *PayQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sn)
	if l > 0 {
		n += 1 + l + sovPay(uint64(l))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovPay(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovPay(uint64(m.ServerId))
	}
	if m.PcId != 0 {
		n += 1 + sovPay(uint64(m.PcId))
	}
	if m.PaidTime != 0 {
		n += 1 + sovPay(uint64(m.PaidTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovPay(uint64(m.ExpireTime))
	}
	return n
}

func sovPay(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPay(x uint64) (n int) {
	return sovPay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcId", wireType)
			}
			m.PcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PcId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidTime", wireType)
			}
			m.PaidTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaidTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcId", wireType)
			}
			m.PcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PcId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidTime", wireType)
			}
			m.PaidTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaidTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPay
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPay
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPay
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPay        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPay          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPay = fmt.Errorf("proto: unexpected end of group")
)
