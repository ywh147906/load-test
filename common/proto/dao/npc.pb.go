// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/npc.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NpcTalk struct {
	RoleId     string         `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	TalkReward map[int64]bool `protobuf:"bytes,2,rep,name=talk_reward,json=talkReward,proto3" json:"talk_reward,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *NpcTalk) Reset()      { *m = NpcTalk{} }
func (*NpcTalk) ProtoMessage() {}
func (*NpcTalk) Descriptor() ([]byte, []int) {
	return fileDescriptor_92e787c0aeb30166, []int{0}
}
func (m *NpcTalk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NpcTalk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NpcTalk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NpcTalk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NpcTalk.Merge(m, src)
}
func (m *NpcTalk) XXX_Size() int {
	return m.Size()
}
func (m *NpcTalk) XXX_DiscardUnknown() {
	xxx_messageInfo_NpcTalk.DiscardUnknown(m)
}

var xxx_messageInfo_NpcTalk proto.InternalMessageInfo

func (m *NpcTalk) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *NpcTalk) GetTalkReward() map[int64]bool {
	if m != nil {
		return m.TalkReward
	}
	return nil
}

func (*NpcTalk) XXX_MessageName() string {
	return "dao.NpcTalk"
}
func init() {
	proto.RegisterType((*NpcTalk)(nil), "dao.NpcTalk")
	proto.RegisterMapType((map[int64]bool)(nil), "dao.NpcTalk.TalkRewardEntry")
}

func init() { proto.RegisterFile("proto/dao/npc.proto", fileDescriptor_92e787c0aeb30166) }

var fileDescriptor_92e787c0aeb30166 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x49, 0xcc, 0xd7, 0xcf, 0x2b, 0x48, 0xd6, 0x03, 0xf3, 0x84, 0x98, 0x53, 0x12,
	0xf3, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0x21, 0xb2, 0x20, 0x16, 0x44, 0x4a, 0x69, 0x05, 0x23,
	0x17, 0xbb, 0x5f, 0x41, 0x72, 0x48, 0x62, 0x4e, 0xb6, 0x90, 0x3c, 0x17, 0x7b, 0x51, 0x7e, 0x4e,
	0x6a, 0x7c, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xa7, 0x13, 0xdb, 0xa7, 0x7b, 0xf2, 0x4c,
	0x05, 0xd9, 0x41, 0x6c, 0x20, 0x61, 0xcf, 0x14, 0x21, 0x5b, 0x2e, 0xee, 0x92, 0xc4, 0x9c, 0xec,
	0xf8, 0xa2, 0xd4, 0xf2, 0xc4, 0xa2, 0x14, 0x09, 0x26, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x19, 0xbd,
	0x94, 0xc4, 0x7c, 0x3d, 0xa8, 0x19, 0x7a, 0x20, 0x22, 0x08, 0x2c, 0xed, 0x9a, 0x57, 0x52, 0x54,
	0x19, 0xc4, 0x55, 0x02, 0x17, 0x90, 0xb2, 0xe5, 0xe2, 0x47, 0x93, 0x16, 0x12, 0xe0, 0x62, 0xce,
	0x4e, 0xad, 0x04, 0x5b, 0xc7, 0x1c, 0x04, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94,
	0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x04, 0x41, 0x38, 0x56, 0x4c, 0x16, 0x8c, 0x4e, 0x5e,
	0x37, 0x1e, 0xca, 0x31, 0xac, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72,
	0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1, 0x91, 0x1c, 0xe3, 0x84, 0xc7,
	0x72, 0x0c, 0x27, 0x1e, 0xcb, 0x31, 0x5e, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94,
	0x4c, 0x72, 0x7e, 0x66, 0x9e, 0x6e, 0x71, 0x6a, 0x51, 0x59, 0x6a, 0x91, 0x7e, 0x72, 0x7e, 0x6e,
	0x6e, 0x7e, 0x9e, 0x3e, 0x3c, 0x6c, 0x92, 0xd8, 0xc0, 0x4c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa1, 0x82, 0x92, 0xe3, 0x2f, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolNpcTalk.Get().(proto.Message)
	})
}

var poolNpcTalk = &sync.Pool{New: func() interface{} { return &NpcTalk{} }}

func (m *NpcTalk) ReleasePool() { m.Reset(); poolNpcTalk.Put(m); m = nil }

func (m *NpcTalk) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *NpcTalk) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *NpcTalk) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *NpcTalk) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *NpcTalk) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *NpcTalk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NpcTalk)
	if !ok {
		that2, ok := that.(NpcTalk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.TalkReward) != len(that1.TalkReward) {
		return false
	}
	for i := range this.TalkReward {
		if this.TalkReward[i] != that1.TalkReward[i] {
			return false
		}
	}
	return true
}
func (m *NpcTalk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcTalk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NpcTalk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TalkReward) > 0 {
		for k := range m.TalkReward {
			v := m.TalkReward[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintNpc(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintNpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintNpc(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovNpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *NpcTalk) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("talk_reward")
	w.RawByte('"')
	w.RawByte(':')
	if m.TalkReward == nil {
		w.RawString("null")
	} else if len(m.TalkReward) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlTalkReward := len(m.TalkReward)
		for k, v := range m.TalkReward {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Bool(v)
			mlTalkReward--
			if mlTalkReward != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *NpcTalk) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *NpcTalk) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *NpcTalk) GoString() string {
	return m.String()
}

func (m *NpcTalk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovNpc(uint64(l))
	}
	if len(m.TalkReward) > 0 {
		for k, v := range m.TalkReward {
			_ = k
			_ = v
			mapEntrySize := 1 + sovNpc(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovNpc(uint64(mapEntrySize))
		}
	}
	return n
}

func sovNpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNpc(x uint64) (n int) {
	return sovNpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NpcTalk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NpcTalk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NpcTalk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalkReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TalkReward == nil {
				m.TalkReward = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TalkReward[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNpc = fmt.Errorf("proto: unexpected end of group")
)
