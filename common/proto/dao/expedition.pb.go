// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/expedition.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Expedition struct {
	RoleId     string                            `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty" pk`
	Task       map[string]*models.ExpeditionTask `protobuf:"bytes,2,rep,name=task,proto3" json:"task,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Execution  *Execution                        `protobuf:"bytes,3,opt,name=execution,proto3" json:"execution,omitempty"`
	NormalSlot int64                             `protobuf:"varint,4,opt,name=normal_slot,json=normalSlot,proto3" json:"normal_slot,omitempty"`
	ExtraSlot  int64                             `protobuf:"varint,5,opt,name=extra_slot,json=extraSlot,proto3" json:"extra_slot,omitempty"`
	MustCount  int64                             `protobuf:"varint,6,opt,name=must_count,json=mustCount,proto3" json:"must_count,omitempty"`
	Refresh    *ExpeditionRefresh                `protobuf:"bytes,7,opt,name=refresh,proto3" json:"refresh,omitempty"`
}

func (m *Expedition) Reset()      { *m = Expedition{} }
func (*Expedition) ProtoMessage() {}
func (*Expedition) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1ac5600195c9690, []int{0}
}
func (m *Expedition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expedition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expedition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expedition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expedition.Merge(m, src)
}
func (m *Expedition) XXX_Size() int {
	return m.Size()
}
func (m *Expedition) XXX_DiscardUnknown() {
	xxx_messageInfo_Expedition.DiscardUnknown(m)
}

var xxx_messageInfo_Expedition proto.InternalMessageInfo

func (m *Expedition) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *Expedition) GetTask() map[string]*models.ExpeditionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *Expedition) GetExecution() *Execution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *Expedition) GetNormalSlot() int64 {
	if m != nil {
		return m.NormalSlot
	}
	return 0
}

func (m *Expedition) GetExtraSlot() int64 {
	if m != nil {
		return m.ExtraSlot
	}
	return 0
}

func (m *Expedition) GetMustCount() int64 {
	if m != nil {
		return m.MustCount
	}
	return 0
}

func (m *Expedition) GetRefresh() *ExpeditionRefresh {
	if m != nil {
		return m.Refresh
	}
	return nil
}

func (*Expedition) XXX_MessageName() string {
	return "dao.Expedition"
}

// 今日免费刷新已使用次数和重置时间
type ExpeditionRefresh struct {
	FreeCount int64 `protobuf:"varint,1,opt,name=free_count,json=freeCount,proto3" json:"free_count,omitempty"`
	ResetTime int64 `protobuf:"varint,2,opt,name=reset_time,json=resetTime,proto3" json:"reset_time,omitempty"`
}

func (m *ExpeditionRefresh) Reset()      { *m = ExpeditionRefresh{} }
func (*ExpeditionRefresh) ProtoMessage() {}
func (*ExpeditionRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1ac5600195c9690, []int{1}
}
func (m *ExpeditionRefresh) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpeditionRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpeditionRefresh.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpeditionRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpeditionRefresh.Merge(m, src)
}
func (m *ExpeditionRefresh) XXX_Size() int {
	return m.Size()
}
func (m *ExpeditionRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpeditionRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_ExpeditionRefresh proto.InternalMessageInfo

func (m *ExpeditionRefresh) GetFreeCount() int64 {
	if m != nil {
		return m.FreeCount
	}
	return 0
}

func (m *ExpeditionRefresh) GetResetTime() int64 {
	if m != nil {
		return m.ResetTime
	}
	return 0
}

func (*ExpeditionRefresh) XXX_MessageName() string {
	return "dao.ExpeditionRefresh"
}

// 行动力
type Execution struct {
	// 额外的恢复数量（key为系统来源，如VIP等）
	// 这里所有的恢复数量总和+key_value表里ExpeditionCostRecovery恢复数量为最终的恢复值（恢复间隔时间还是key_value表里的）
	ExtraRestoreCount map[int64]int64 `protobuf:"bytes,1,rep,name=extra_restore_count,json=extraRestoreCount,proto3" json:"extra_restore_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LastRecoverTime   int64           `protobuf:"varint,2,opt,name=last_recover_time,json=lastRecoverTime,proto3" json:"last_recover_time,omitempty"`
	LimitBonus        map[int64]int64 `protobuf:"bytes,3,rep,name=limit_bonus,json=limitBonus,proto3" json:"limit_bonus,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Execution) Reset()      { *m = Execution{} }
func (*Execution) ProtoMessage() {}
func (*Execution) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1ac5600195c9690, []int{2}
}
func (m *Execution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Execution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Execution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Execution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Execution.Merge(m, src)
}
func (m *Execution) XXX_Size() int {
	return m.Size()
}
func (m *Execution) XXX_DiscardUnknown() {
	xxx_messageInfo_Execution.DiscardUnknown(m)
}

var xxx_messageInfo_Execution proto.InternalMessageInfo

func (m *Execution) GetExtraRestoreCount() map[int64]int64 {
	if m != nil {
		return m.ExtraRestoreCount
	}
	return nil
}

func (m *Execution) GetLastRecoverTime() int64 {
	if m != nil {
		return m.LastRecoverTime
	}
	return 0
}

func (m *Execution) GetLimitBonus() map[int64]int64 {
	if m != nil {
		return m.LimitBonus
	}
	return nil
}

func (*Execution) XXX_MessageName() string {
	return "dao.Execution"
}
func init() {
	proto.RegisterType((*Expedition)(nil), "dao.Expedition")
	proto.RegisterMapType((map[string]*models.ExpeditionTask)(nil), "dao.Expedition.TaskEntry")
	proto.RegisterType((*ExpeditionRefresh)(nil), "dao.ExpeditionRefresh")
	proto.RegisterType((*Execution)(nil), "dao.Execution")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.Execution.ExtraRestoreCountEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "dao.Execution.LimitBonusEntry")
}

func init() { proto.RegisterFile("proto/dao/expedition.proto", fileDescriptor_f1ac5600195c9690) }

var fileDescriptor_f1ac5600195c9690 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0xbb, 0x6d, 0xca, 0xbe, 0x80, 0x35, 0x63, 0x29, 0xeb, 0x62, 0x26, 0x21, 0x20,
	0x04, 0x69, 0x13, 0xa9, 0x17, 0x11, 0x44, 0x88, 0xe6, 0xa0, 0x08, 0xe2, 0x58, 0x2f, 0x5e, 0x96,
	0x6d, 0xf6, 0xb5, 0x2e, 0xd9, 0xdd, 0x09, 0x33, 0x93, 0x90, 0x7e, 0x0b, 0x3f, 0x86, 0x1f, 0xa5,
	0xc7, 0x1e, 0x3c, 0xf4, 0x24, 0xba, 0xb9, 0x78, 0xf0, 0x20, 0x7e, 0x02, 0x99, 0x9d, 0x34, 0x89,
	0xa9, 0x17, 0x6f, 0xc3, 0xef, 0xff, 0x7f, 0xef, 0xfd, 0xf7, 0x3d, 0x16, 0x82, 0xb1, 0x14, 0x5a,
	0xf4, 0xe2, 0x48, 0xf4, 0x70, 0x36, 0xc6, 0x38, 0xd1, 0x89, 0xc8, 0xbb, 0x25, 0xa4, 0x6e, 0x1c,
	0x89, 0x60, 0xef, 0x4c, 0x9c, 0x09, 0x6b, 0x32, 0x2f, 0x2b, 0x05, 0x0d, 0x4b, 0x32, 0x11, 0x63,
	0xaa, 0x6e, 0x54, 0xb6, 0x7f, 0x3a, 0x00, 0x83, 0x25, 0xa4, 0x4d, 0xd8, 0x91, 0x22, 0xc5, 0x30,
	0x89, 0x7d, 0xd2, 0x22, 0x1d, 0xaf, 0x5f, 0xfd, 0xfd, 0xb5, 0xe9, 0x8c, 0x47, 0xbc, 0x6a, 0xf0,
	0xcb, 0x98, 0x1e, 0xc2, 0x96, 0x8e, 0xd4, 0xc8, 0x77, 0x5a, 0x6e, 0xa7, 0x76, 0x74, 0xb7, 0x1b,
	0x47, 0xa2, 0xbb, 0xaa, 0xef, 0x1e, 0x47, 0x6a, 0x34, 0xc8, 0xb5, 0x3c, 0xe7, 0xa5, 0x8d, 0x1e,
	0x80, 0x87, 0x33, 0x1c, 0x4e, 0x8c, 0xe8, 0xbb, 0x2d, 0xd2, 0xa9, 0x1d, 0xdd, 0x5a, 0xd4, 0x2c,
	0x28, 0x5f, 0x19, 0x68, 0x13, 0x6a, 0xb9, 0x90, 0x59, 0x94, 0x86, 0x2a, 0x15, 0xda, 0xdf, 0x6a,
	0x91, 0x8e, 0xcb, 0xc1, 0xa2, 0x77, 0xa9, 0xd0, 0xb4, 0x01, 0x80, 0x33, 0x2d, 0x23, 0xab, 0x6f,
	0x97, 0xba, 0x57, 0x92, 0x6b, 0x39, 0x9b, 0x28, 0x1d, 0x0e, 0xc5, 0x24, 0xd7, 0x7e, 0xd5, 0xca,
	0x86, 0x3c, 0x37, 0x80, 0x3e, 0x84, 0x1d, 0x89, 0xa7, 0x12, 0xd5, 0x47, 0x7f, 0xa7, 0x8c, 0xb2,
	0xbf, 0x11, 0x9f, 0x5b, 0x95, 0x5f, 0xdb, 0x82, 0x37, 0xe0, 0x2d, 0xbf, 0x88, 0xde, 0x06, 0x77,
	0x84, 0xe7, 0x76, 0x2f, 0xdc, 0x3c, 0xe9, 0x01, 0x6c, 0x4f, 0xa3, 0x74, 0x82, 0xbe, 0xb3, 0x68,
	0x67, 0xb7, 0xbc, 0xd6, 0xd1, 0x54, 0x73, 0x6b, 0x7a, 0xe2, 0x3c, 0x26, 0xed, 0xb7, 0x50, 0xbf,
	0x31, 0xce, 0xc4, 0x3e, 0x95, 0x88, 0x8b, 0xd8, 0xc4, 0xc6, 0x36, 0xc4, 0xc6, 0x6e, 0x00, 0x48,
	0x54, 0xa8, 0x43, 0x9d, 0x64, 0x76, 0x94, 0xcb, 0xbd, 0x92, 0x1c, 0x27, 0x19, 0xb6, 0xbf, 0x38,
	0xe0, 0x2d, 0xb7, 0x49, 0xdf, 0xc3, 0x1d, 0xbb, 0x21, 0x89, 0x4a, 0x0b, 0xb9, 0x6a, 0x6a, 0xce,
	0x75, 0xff, 0xef, 0xd5, 0x77, 0x07, 0xc6, 0xc9, 0xad, 0xb1, 0x9c, 0x65, 0x4f, 0x57, 0xc7, 0x4d,
	0x4e, 0x1f, 0x40, 0x3d, 0x8d, 0x94, 0x0e, 0x25, 0x0e, 0xc5, 0x14, 0xe5, 0x7a, 0x94, 0x5d, 0x23,
	0x70, 0xcb, 0x4d, 0x20, 0xfa, 0x0c, 0x6a, 0x69, 0x92, 0x25, 0x3a, 0x3c, 0x11, 0xf9, 0x44, 0xf9,
	0x6e, 0x39, 0x9a, 0x6d, 0x8c, 0x7e, 0x6d, 0x1c, 0x7d, 0x63, 0xb0, 0x33, 0x21, 0x5d, 0x82, 0xe0,
	0x05, 0xec, 0xff, 0x3b, 0xd9, 0xfa, 0x09, 0x5c, 0x7b, 0x82, 0xbd, 0xf5, 0x13, 0xb8, 0x6b, 0xab,
	0x0e, 0x9e, 0xc2, 0xee, 0xc6, 0x90, 0xff, 0x29, 0xef, 0xbf, 0xba, 0xfa, 0xce, 0x2a, 0x9f, 0x0b,
	0x46, 0x2e, 0x0a, 0x46, 0x2e, 0x0b, 0x46, 0xbe, 0x15, 0x8c, 0xfc, 0x28, 0x58, 0xe5, 0x57, 0xc1,
	0xc8, 0xa7, 0x39, 0xab, 0x5c, 0xcc, 0x19, 0xb9, 0x9c, 0xb3, 0xca, 0xd5, 0x9c, 0x55, 0x3e, 0xdc,
	0x1b, 0x8a, 0x24, 0x3f, 0x54, 0x28, 0xa7, 0x28, 0x7b, 0x43, 0x91, 0x65, 0x22, 0xef, 0x2d, 0xff,
	0xd7, 0x93, 0x6a, 0xf9, 0x7c, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xc1, 0x1c, 0x57, 0xc3,
	0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpedition.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExpeditionRefresh.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolExecution.Get().(proto.Message)
	})
}

var poolExpedition = &sync.Pool{New: func() interface{} { return &Expedition{} }}

func (m *Expedition) ReleasePool() { m.Reset(); poolExpedition.Put(m); m = nil }

var poolExpeditionRefresh = &sync.Pool{New: func() interface{} { return &ExpeditionRefresh{} }}

func (m *ExpeditionRefresh) ReleasePool() { m.Reset(); poolExpeditionRefresh.Put(m); m = nil }

var poolExecution = &sync.Pool{New: func() interface{} { return &Execution{} }}

func (m *Execution) ReleasePool() { m.Reset(); poolExecution.Put(m); m = nil }

func (m *Expedition) PK() string {
	if m == nil {
		return ""
	}
	return m.RoleId
}

func (m *Expedition) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return append(d, m.RoleId...)
}

func (m *Expedition) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *Expedition) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *Expedition) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *Expedition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expedition)
	if !ok {
		that2, ok := that.(Expedition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if len(this.Task) != len(that1.Task) {
		return false
	}
	for i := range this.Task {
		if !this.Task[i].Equal(that1.Task[i]) {
			return false
		}
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if this.NormalSlot != that1.NormalSlot {
		return false
	}
	if this.ExtraSlot != that1.ExtraSlot {
		return false
	}
	if this.MustCount != that1.MustCount {
		return false
	}
	if !this.Refresh.Equal(that1.Refresh) {
		return false
	}
	return true
}
func (this *ExpeditionRefresh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpeditionRefresh)
	if !ok {
		that2, ok := that.(ExpeditionRefresh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FreeCount != that1.FreeCount {
		return false
	}
	if this.ResetTime != that1.ResetTime {
		return false
	}
	return true
}
func (this *Execution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Execution)
	if !ok {
		that2, ok := that.(Execution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExtraRestoreCount) != len(that1.ExtraRestoreCount) {
		return false
	}
	for i := range this.ExtraRestoreCount {
		if this.ExtraRestoreCount[i] != that1.ExtraRestoreCount[i] {
			return false
		}
	}
	if this.LastRecoverTime != that1.LastRecoverTime {
		return false
	}
	if len(this.LimitBonus) != len(that1.LimitBonus) {
		return false
	}
	for i := range this.LimitBonus {
		if this.LimitBonus[i] != that1.LimitBonus[i] {
			return false
		}
	}
	return true
}
func (m *Expedition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expedition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expedition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Refresh != nil {
		{
			size, err := m.Refresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExpedition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.MustCount != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.MustCount))
		i--
		dAtA[i] = 0x30
	}
	if m.ExtraSlot != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.ExtraSlot))
		i--
		dAtA[i] = 0x28
	}
	if m.NormalSlot != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.NormalSlot))
		i--
		dAtA[i] = 0x20
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExpedition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Task) > 0 {
		for k := range m.Task {
			v := m.Task[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintExpedition(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintExpedition(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintExpedition(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintExpedition(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExpeditionRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpeditionRefresh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpeditionRefresh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResetTime != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.ResetTime))
		i--
		dAtA[i] = 0x10
	}
	if m.FreeCount != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.FreeCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Execution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Execution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Execution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LimitBonus) > 0 {
		for k := range m.LimitBonus {
			v := m.LimitBonus[k]
			baseI := i
			i = encodeVarintExpedition(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintExpedition(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintExpedition(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastRecoverTime != 0 {
		i = encodeVarintExpedition(dAtA, i, uint64(m.LastRecoverTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExtraRestoreCount) > 0 {
		for k := range m.ExtraRestoreCount {
			v := m.ExtraRestoreCount[k]
			baseI := i
			i = encodeVarintExpedition(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintExpedition(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintExpedition(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintExpedition(dAtA []byte, offset int, v uint64) int {
	offset -= sovExpedition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *Expedition) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("task")
	w.RawByte('"')
	w.RawByte(':')
	if m.Task == nil {
		w.RawString("null")
	} else if len(m.Task) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlTask := len(m.Task)
		for k, v := range m.Task {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlTask--
			if mlTask != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("execution")
	w.RawByte('"')
	w.RawByte(':')
	m.Execution.JsonBytes(w)
	needWriteComma = true
	if m.NormalSlot != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("normal_slot")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NormalSlot))
		needWriteComma = true
	}
	if m.ExtraSlot != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("extra_slot")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ExtraSlot))
		needWriteComma = true
	}
	if m.MustCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("must_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MustCount))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("refresh")
	w.RawByte('"')
	w.RawByte(':')
	m.Refresh.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ExpeditionRefresh) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.FreeCount != 0 {
		w.RawByte('"')
		w.RawString("free_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FreeCount))
		needWriteComma = true
	}
	if m.ResetTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("reset_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ResetTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Execution) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("extra_restore_count")
	w.RawByte('"')
	w.RawByte(':')
	if m.ExtraRestoreCount == nil {
		w.RawString("null")
	} else if len(m.ExtraRestoreCount) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlExtraRestoreCount := len(m.ExtraRestoreCount)
		for k, v := range m.ExtraRestoreCount {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlExtraRestoreCount--
			if mlExtraRestoreCount != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.LastRecoverTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("last_recover_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.LastRecoverTime))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("limit_bonus")
	w.RawByte('"')
	w.RawByte(':')
	if m.LimitBonus == nil {
		w.RawString("null")
	} else if len(m.LimitBonus) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlLimitBonus := len(m.LimitBonus)
		for k, v := range m.LimitBonus {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlLimitBonus--
			if mlLimitBonus != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *Expedition) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Expedition) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Expedition) GoString() string {
	return m.String()
}

func (m *ExpeditionRefresh) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ExpeditionRefresh) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ExpeditionRefresh) GoString() string {
	return m.String()
}

func (m *Execution) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *Execution) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *Execution) GoString() string {
	return m.String()
}

func (m *Expedition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovExpedition(uint64(l))
	}
	if len(m.Task) > 0 {
		for k, v := range m.Task {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovExpedition(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovExpedition(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovExpedition(uint64(mapEntrySize))
		}
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovExpedition(uint64(l))
	}
	if m.NormalSlot != 0 {
		n += 1 + sovExpedition(uint64(m.NormalSlot))
	}
	if m.ExtraSlot != 0 {
		n += 1 + sovExpedition(uint64(m.ExtraSlot))
	}
	if m.MustCount != 0 {
		n += 1 + sovExpedition(uint64(m.MustCount))
	}
	if m.Refresh != nil {
		l = m.Refresh.Size()
		n += 1 + l + sovExpedition(uint64(l))
	}
	return n
}

func (m *ExpeditionRefresh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FreeCount != 0 {
		n += 1 + sovExpedition(uint64(m.FreeCount))
	}
	if m.ResetTime != 0 {
		n += 1 + sovExpedition(uint64(m.ResetTime))
	}
	return n
}

func (m *Execution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtraRestoreCount) > 0 {
		for k, v := range m.ExtraRestoreCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovExpedition(uint64(k)) + 1 + sovExpedition(uint64(v))
			n += mapEntrySize + 1 + sovExpedition(uint64(mapEntrySize))
		}
	}
	if m.LastRecoverTime != 0 {
		n += 1 + sovExpedition(uint64(m.LastRecoverTime))
	}
	if len(m.LimitBonus) > 0 {
		for k, v := range m.LimitBonus {
			_ = k
			_ = v
			mapEntrySize := 1 + sovExpedition(uint64(k)) + 1 + sovExpedition(uint64(v))
			n += mapEntrySize + 1 + sovExpedition(uint64(mapEntrySize))
		}
	}
	return n
}

func sovExpedition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExpedition(x uint64) (n int) {
	return sovExpedition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Expedition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expedition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expedition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = make(map[string]*models.ExpeditionTask)
			}
			var mapkey string
			var mapvalue *models.ExpeditionTask
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExpedition
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExpedition
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthExpedition
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthExpedition
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthExpedition
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.ExpeditionTask{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExpedition(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExpedition
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Task[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &Execution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalSlot", wireType)
			}
			m.NormalSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NormalSlot |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraSlot", wireType)
			}
			m.ExtraSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraSlot |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MustCount", wireType)
			}
			m.MustCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MustCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Refresh == nil {
				m.Refresh = &ExpeditionRefresh{}
			}
			if err := m.Refresh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpeditionRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpeditionRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpeditionRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeCount", wireType)
			}
			m.FreeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetTime", wireType)
			}
			m.ResetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Execution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Execution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Execution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraRestoreCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraRestoreCount == nil {
				m.ExtraRestoreCount = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExpedition
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExpedition(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExpedition
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraRestoreCount[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRecoverTime", wireType)
			}
			m.LastRecoverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRecoverTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitBonus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpedition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpedition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LimitBonus == nil {
				m.LimitBonus = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExpedition
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExpedition
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExpedition(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthExpedition
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LimitBonus[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpedition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpedition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpedition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpedition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpedition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpedition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExpedition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExpedition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExpedition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpedition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExpedition = fmt.Errorf("proto: unexpected end of group")
)
