// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/dao/top_rank.proto

package dao

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_bytespool "github.com/ywh147906/load-test/common/bytespool"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TopRankLimit struct {
	Title int64 `protobuf:"varint,1,opt,name=title,proto3" json:"title,omitempty" pk`
	Min   int64 `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	Full  bool  `protobuf:"varint,3,opt,name=full,proto3" json:"full,omitempty"`
}

func (m *TopRankLimit) Reset()      { *m = TopRankLimit{} }
func (*TopRankLimit) ProtoMessage() {}
func (*TopRankLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dfa5c8f0bc70d09, []int{0}
}
func (m *TopRankLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopRankLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopRankLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopRankLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopRankLimit.Merge(m, src)
}
func (m *TopRankLimit) XXX_Size() int {
	return m.Size()
}
func (m *TopRankLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_TopRankLimit.DiscardUnknown(m)
}

var xxx_messageInfo_TopRankLimit proto.InternalMessageInfo

func (m *TopRankLimit) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *TopRankLimit) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *TopRankLimit) GetFull() bool {
	if m != nil {
		return m.Full
	}
	return false
}

func (*TopRankLimit) XXX_MessageName() string {
	return "dao.TopRankLimit"
}

type TopRank struct {
	Title int64                   `protobuf:"varint,1,opt,name=title,proto3" json:"title,omitempty" pk`
	Data  map[string]*TopRankItem `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TopRank) Reset()      { *m = TopRank{} }
func (*TopRank) ProtoMessage() {}
func (*TopRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dfa5c8f0bc70d09, []int{1}
}
func (m *TopRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopRank.Merge(m, src)
}
func (m *TopRank) XXX_Size() int {
	return m.Size()
}
func (m *TopRank) XXX_DiscardUnknown() {
	xxx_messageInfo_TopRank.DiscardUnknown(m)
}

var xxx_messageInfo_TopRank proto.InternalMessageInfo

func (m *TopRank) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *TopRank) GetData() map[string]*TopRankItem {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*TopRank) XXX_MessageName() string {
	return "dao.TopRank"
}

type TopRankItem struct {
	CombatValue int64 `protobuf:"varint,2,opt,name=combat_value,json=combatValue,proto3" json:"combat_value,omitempty"`
	CreatedAt   int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *TopRankItem) Reset()      { *m = TopRankItem{} }
func (*TopRankItem) ProtoMessage() {}
func (*TopRankItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dfa5c8f0bc70d09, []int{2}
}
func (m *TopRankItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopRankItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopRankItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopRankItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopRankItem.Merge(m, src)
}
func (m *TopRankItem) XXX_Size() int {
	return m.Size()
}
func (m *TopRankItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TopRankItem.DiscardUnknown(m)
}

var xxx_messageInfo_TopRankItem proto.InternalMessageInfo

func (m *TopRankItem) GetCombatValue() int64 {
	if m != nil {
		return m.CombatValue
	}
	return 0
}

func (m *TopRankItem) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (*TopRankItem) XXX_MessageName() string {
	return "dao.TopRankItem"
}
func init() {
	proto.RegisterType((*TopRankLimit)(nil), "dao.TopRankLimit")
	proto.RegisterType((*TopRank)(nil), "dao.TopRank")
	proto.RegisterMapType((map[string]*TopRankItem)(nil), "dao.TopRank.DataEntry")
	proto.RegisterType((*TopRankItem)(nil), "dao.TopRankItem")
}

func init() { proto.RegisterFile("proto/dao/top_rank.proto", fileDescriptor_2dfa5c8f0bc70d09) }

var fileDescriptor_2dfa5c8f0bc70d09 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0x73, 0x49, 0x5b, 0xed, 0xa5, 0x43, 0x39, 0x44, 0x42, 0xa9, 0x67, 0xed, 0x20, 0x45,
	0x30, 0x81, 0xba, 0x88, 0x9b, 0x45, 0x87, 0x8a, 0x20, 0x1c, 0xe2, 0xe0, 0x52, 0xae, 0xc9, 0x59,
	0x42, 0xfe, 0x5c, 0x88, 0x6f, 0x0b, 0xfd, 0x16, 0x7e, 0x02, 0x67, 0x3f, 0x4a, 0xc7, 0x8e, 0x9d,
	0x44, 0x93, 0xc5, 0x51, 0xfc, 0x04, 0x92, 0x4b, 0xa9, 0xdd, 0xdc, 0x1e, 0x7e, 0xcf, 0x7b, 0x3f,
	0xde, 0xe3, 0xc5, 0x56, 0x92, 0x4a, 0x90, 0x8e, 0xc7, 0xa5, 0x03, 0x32, 0x19, 0xa5, 0x3c, 0x0e,
	0x6c, 0x85, 0x88, 0xe1, 0x71, 0xd9, 0xda, 0x9b, 0xc8, 0x89, 0x2c, 0x47, 0x8a, 0x54, 0x56, 0x5d,
	0x86, 0x1b, 0xf7, 0x32, 0x61, 0x3c, 0x0e, 0x6e, 0xfd, 0xc8, 0x07, 0xd2, 0xc6, 0x55, 0xf0, 0x21,
	0x14, 0x16, 0xea, 0xa0, 0x9e, 0x31, 0xa8, 0xfd, 0xbc, 0x1f, 0xea, 0x49, 0xc0, 0x4a, 0x48, 0x9a,
	0xd8, 0x88, 0xfc, 0xd8, 0xd2, 0x8b, 0x8e, 0x15, 0x91, 0x10, 0x5c, 0x79, 0x9a, 0x86, 0xa1, 0x65,
	0x74, 0x50, 0x6f, 0x97, 0xa9, 0xdc, 0x7d, 0x45, 0x78, 0x67, 0x2d, 0xfd, 0xc7, 0x77, 0x82, 0x2b,
	0x1e, 0x07, 0x6e, 0xe9, 0x1d, 0xa3, 0x67, 0xf6, 0xf7, 0x6d, 0x8f, 0x4b, 0x7b, 0xfd, 0xd2, 0xbe,
	0xe2, 0xc0, 0xaf, 0x63, 0x48, 0xe7, 0x4c, 0xcd, 0xb4, 0x86, 0xb8, 0xbe, 0x41, 0xc5, 0x22, 0x81,
	0x98, 0x2b, 0x69, 0x9d, 0x15, 0x91, 0x1c, 0xe3, 0xea, 0x8c, 0x87, 0x53, 0xa1, 0x96, 0x33, 0xfb,
	0xcd, 0x6d, 0xd7, 0x10, 0x44, 0xc4, 0xca, 0xfa, 0x42, 0x3f, 0x47, 0xdd, 0x3b, 0x6c, 0x6e, 0x35,
	0xe4, 0x08, 0x37, 0x5c, 0x19, 0x8d, 0x39, 0x8c, 0xfe, 0x0c, 0x06, 0x33, 0x4b, 0xf6, 0x50, 0x20,
	0x72, 0x80, 0xb1, 0x9b, 0x0a, 0x0e, 0xc2, 0x1b, 0x71, 0x50, 0x9f, 0x35, 0x58, 0x7d, 0x4d, 0x2e,
	0x61, 0x70, 0xb3, 0xfa, 0xa4, 0xda, 0x5b, 0x46, 0xd1, 0x22, 0xa3, 0x68, 0x99, 0x51, 0xf4, 0x91,
	0x51, 0xf4, 0x95, 0x51, 0xed, 0x3b, 0xa3, 0xe8, 0x25, 0xa7, 0xda, 0x22, 0xa7, 0x68, 0x99, 0x53,
	0x6d, 0x95, 0x53, 0xed, 0xb1, 0xed, 0x4a, 0x3f, 0x3e, 0x7d, 0x16, 0xe9, 0x4c, 0xa4, 0x8e, 0x2b,
	0xa3, 0x48, 0xc6, 0xce, 0xe6, 0x76, 0xe3, 0x9a, 0x8a, 0x67, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x86, 0xbd, 0xc4, 0xf5, 0xcf, 0x01, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTopRankLimit.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTopRank.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolTopRankItem.Get().(proto.Message)
	})
}

var poolTopRankLimit = &sync.Pool{New: func() interface{} { return &TopRankLimit{} }}

func (m *TopRankLimit) ReleasePool() { m.Reset(); poolTopRankLimit.Put(m); m = nil }

var poolTopRank = &sync.Pool{New: func() interface{} { return &TopRank{} }}

func (m *TopRank) ReleasePool() { m.Reset(); poolTopRank.Put(m); m = nil }

var poolTopRankItem = &sync.Pool{New: func() interface{} { return &TopRankItem{} }}

func (m *TopRankItem) ReleasePool() { m.Reset(); poolTopRankItem.Put(m); m = nil }

func (m *TopRankLimit) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.Title), 10)
}

func (m *TopRankLimit) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.Title), 10)
}

func (m *TopRankLimit) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *TopRankLimit) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *TopRankLimit) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (m *TopRank) PK() string {
	if m == nil {
		return ""
	}
	return strconv.FormatInt(int64(m.Title), 10)
}

func (m *TopRank) PKAppendTo(d []byte) []byte {
	if m == nil {
		return d
	}
	return strconv.AppendInt(d, int64(m.Title), 10)
}

func (m *TopRank) ToKVSave() ([]byte, []byte) {
	msgName := m.XXX_MessageName()
	dk := coin_server_common_bytespool.GetSample(64)
	dk = dk[:0]
	dk = append(dk, msgName...)
	dk = append(dk, ':', 'k', ':')
	dk = m.PKAppendTo(dk)
	return dk, m.ToSave()
}

func (m *TopRank) ToSave() []byte {
	msgName := m.XXX_MessageName()
	ml := len(msgName)
	d := coin_server_common_bytespool.GetSample(1 + ml + m.Size())
	d[0] = uint8(ml)
	copy(d[1:], msgName)
	_, _ = m.MarshalToSizedBuffer(d[1+ml:])
	return d
}

func (m *TopRank) KVKey() string {
	return m.XXX_MessageName() + ":k:" + m.PK()
}

func (this *TopRankLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TopRankLimit)
	if !ok {
		that2, ok := that.(TopRankLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Min != that1.Min {
		return false
	}
	if this.Full != that1.Full {
		return false
	}
	return true
}
func (this *TopRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TopRank)
	if !ok {
		that2, ok := that.(TopRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *TopRankItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TopRankItem)
	if !ok {
		that2, ok := that.(TopRankItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CombatValue != that1.CombatValue {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	return true
}
func (m *TopRankLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopRankLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopRankLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Full {
		i--
		if m.Full {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Min != 0 {
		i = encodeVarintTopRank(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x10
	}
	if m.Title != 0 {
		i = encodeVarintTopRank(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTopRank(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTopRank(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTopRank(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Title != 0 {
		i = encodeVarintTopRank(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopRankItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopRankItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopRankItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintTopRank(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x18
	}
	if m.CombatValue != 0 {
		i = encodeVarintTopRank(dAtA, i, uint64(m.CombatValue))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintTopRank(dAtA []byte, offset int, v uint64) int {
	offset -= sovTopRank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *TopRankLimit) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Title != 0 {
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.Min != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("min")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Min))
		needWriteComma = true
	}
	if m.Full {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("full")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Full)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TopRank) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Title != 0 {
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("data")
	w.RawByte('"')
	w.RawByte(':')
	if m.Data == nil {
		w.RawString("null")
	} else if len(m.Data) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlData := len(m.Data)
		for k, v := range m.Data {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlData--
			if mlData != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TopRankItem) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CombatValue != 0 {
		w.RawByte('"')
		w.RawString("combat_value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CombatValue))
		needWriteComma = true
	}
	if m.CreatedAt != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("created_at")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CreatedAt))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *TopRankLimit) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TopRankLimit) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TopRankLimit) GoString() string {
	return m.String()
}

func (m *TopRank) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TopRank) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TopRank) GoString() string {
	return m.String()
}

func (m *TopRankItem) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *TopRankItem) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *TopRankItem) GoString() string {
	return m.String()
}

func (m *TopRankLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != 0 {
		n += 1 + sovTopRank(uint64(m.Title))
	}
	if m.Min != 0 {
		n += 1 + sovTopRank(uint64(m.Min))
	}
	if m.Full {
		n += 2
	}
	return n
}

func (m *TopRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != 0 {
		n += 1 + sovTopRank(uint64(m.Title))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTopRank(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTopRank(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTopRank(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TopRankItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CombatValue != 0 {
		n += 1 + sovTopRank(uint64(m.CombatValue))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTopRank(uint64(m.CreatedAt))
	}
	return n
}

func sovTopRank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTopRank(x uint64) (n int) {
	return sovTopRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TopRankLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopRankLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopRankLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Full", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Full = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTopRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTopRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopRank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopRank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]*TopRankItem)
			}
			var mapkey string
			var mapvalue *TopRankItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTopRank
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTopRank
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTopRank
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTopRank
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TopRankItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTopRank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTopRank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTopRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopRankItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopRankItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopRankItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatValue", wireType)
			}
			m.CombatValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CombatValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTopRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTopRank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTopRank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTopRank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTopRank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopRank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTopRank = fmt.Errorf("proto: unexpected end of group")
)
