// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/gatewaytcp/push_message.proto

package gatewaytcp

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ToClientType int32

const (
	ToClientType_Some ToClientType = 0
	ToClientType_All  ToClientType = 1
)

var ToClientType_name = map[int32]string{
	0: "Some",
	1: "All",
}

var ToClientType_value = map[string]int32{
	"Some": 0,
	"All":  1,
}

func (ToClientType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d537da722c0cf036, []int{0}
}

type GatewayStdTcp struct {
}

func (m *GatewayStdTcp) Reset()      { *m = GatewayStdTcp{} }
func (*GatewayStdTcp) ProtoMessage() {}
func (*GatewayStdTcp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537da722c0cf036, []int{0}
}
func (m *GatewayStdTcp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStdTcp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStdTcp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayStdTcp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStdTcp.Merge(m, src)
}
func (m *GatewayStdTcp) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStdTcp) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStdTcp.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStdTcp proto.InternalMessageInfo

func (*GatewayStdTcp) XXX_MessageName() string {
	return "gatewaytcp.GatewayStdTcp"
}

type GatewayStdTcp_PushToClient struct {
	Roles    []string     `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	Messages []*types.Any `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	Type     ToClientType `protobuf:"varint,3,opt,name=type,proto3,enum=gatewaytcp.ToClientType" json:"type,omitempty"`
}

func (m *GatewayStdTcp_PushToClient) Reset()      { *m = GatewayStdTcp_PushToClient{} }
func (*GatewayStdTcp_PushToClient) ProtoMessage() {}
func (*GatewayStdTcp_PushToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537da722c0cf036, []int{0, 0}
}
func (m *GatewayStdTcp_PushToClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStdTcp_PushToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStdTcp_PushToClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayStdTcp_PushToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStdTcp_PushToClient.Merge(m, src)
}
func (m *GatewayStdTcp_PushToClient) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStdTcp_PushToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStdTcp_PushToClient.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStdTcp_PushToClient proto.InternalMessageInfo

func (m *GatewayStdTcp_PushToClient) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *GatewayStdTcp_PushToClient) GetMessages() []*types.Any {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *GatewayStdTcp_PushToClient) GetType() ToClientType {
	if m != nil {
		return m.Type
	}
	return ToClientType_Some
}

func (*GatewayStdTcp_PushToClient) XXX_MessageName() string {
	return "gatewaytcp.GatewayStdTcp.PushToClient"
}

type GatewayStdTcp_PushManyToClient struct {
	Pcs []*GatewayStdTcp_PushToClient `protobuf:"bytes,1,rep,name=pcs,proto3" json:"pcs,omitempty"`
}

func (m *GatewayStdTcp_PushManyToClient) Reset()      { *m = GatewayStdTcp_PushManyToClient{} }
func (*GatewayStdTcp_PushManyToClient) ProtoMessage() {}
func (*GatewayStdTcp_PushManyToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537da722c0cf036, []int{0, 1}
}
func (m *GatewayStdTcp_PushManyToClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStdTcp_PushManyToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStdTcp_PushManyToClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayStdTcp_PushManyToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStdTcp_PushManyToClient.Merge(m, src)
}
func (m *GatewayStdTcp_PushManyToClient) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStdTcp_PushManyToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStdTcp_PushManyToClient.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStdTcp_PushManyToClient proto.InternalMessageInfo

func (m *GatewayStdTcp_PushManyToClient) GetPcs() []*GatewayStdTcp_PushToClient {
	if m != nil {
		return m.Pcs
	}
	return nil
}

func (*GatewayStdTcp_PushManyToClient) XXX_MessageName() string {
	return "gatewaytcp.GatewayStdTcp.PushManyToClient"
}

type GatewayStdTcp_UserChangeBattleId struct {
	MapId          int64 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64 `protobuf:"varint,2,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
}

func (m *GatewayStdTcp_UserChangeBattleId) Reset()      { *m = GatewayStdTcp_UserChangeBattleId{} }
func (*GatewayStdTcp_UserChangeBattleId) ProtoMessage() {}
func (*GatewayStdTcp_UserChangeBattleId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537da722c0cf036, []int{0, 2}
}
func (m *GatewayStdTcp_UserChangeBattleId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStdTcp_UserChangeBattleId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStdTcp_UserChangeBattleId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayStdTcp_UserChangeBattleId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStdTcp_UserChangeBattleId.Merge(m, src)
}
func (m *GatewayStdTcp_UserChangeBattleId) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStdTcp_UserChangeBattleId) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStdTcp_UserChangeBattleId.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStdTcp_UserChangeBattleId proto.InternalMessageInfo

func (m *GatewayStdTcp_UserChangeBattleId) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *GatewayStdTcp_UserChangeBattleId) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (*GatewayStdTcp_UserChangeBattleId) XXX_MessageName() string {
	return "gatewaytcp.GatewayStdTcp.UserChangeBattleId"
}

type GatewayStdTcp_GetOnlineCountRequest struct {
}

func (m *GatewayStdTcp_GetOnlineCountRequest) Reset()      { *m = GatewayStdTcp_GetOnlineCountRequest{} }
func (*GatewayStdTcp_GetOnlineCountRequest) ProtoMessage() {}
func (*GatewayStdTcp_GetOnlineCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537da722c0cf036, []int{0, 3}
}
func (m *GatewayStdTcp_GetOnlineCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStdTcp_GetOnlineCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStdTcp_GetOnlineCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayStdTcp_GetOnlineCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStdTcp_GetOnlineCountRequest.Merge(m, src)
}
func (m *GatewayStdTcp_GetOnlineCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStdTcp_GetOnlineCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStdTcp_GetOnlineCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStdTcp_GetOnlineCountRequest proto.InternalMessageInfo

func (*GatewayStdTcp_GetOnlineCountRequest) XXX_MessageName() string {
	return "gatewaytcp.GatewayStdTcp.GetOnlineCountRequest"
}

type GatewayStdTcp_GetOnlineCountResponse struct {
	Count         int64           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	LanguageCount map[int64]int64 `protobuf:"bytes,2,rep,name=language_count,json=languageCount,proto3" json:"language_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GatewayStdTcp_GetOnlineCountResponse) Reset()      { *m = GatewayStdTcp_GetOnlineCountResponse{} }
func (*GatewayStdTcp_GetOnlineCountResponse) ProtoMessage() {}
func (*GatewayStdTcp_GetOnlineCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d537da722c0cf036, []int{0, 4}
}
func (m *GatewayStdTcp_GetOnlineCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStdTcp_GetOnlineCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStdTcp_GetOnlineCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayStdTcp_GetOnlineCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStdTcp_GetOnlineCountResponse.Merge(m, src)
}
func (m *GatewayStdTcp_GetOnlineCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStdTcp_GetOnlineCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStdTcp_GetOnlineCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStdTcp_GetOnlineCountResponse proto.InternalMessageInfo

func (m *GatewayStdTcp_GetOnlineCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GatewayStdTcp_GetOnlineCountResponse) GetLanguageCount() map[int64]int64 {
	if m != nil {
		return m.LanguageCount
	}
	return nil
}

func (*GatewayStdTcp_GetOnlineCountResponse) XXX_MessageName() string {
	return "gatewaytcp.GatewayStdTcp.GetOnlineCountResponse"
}
func init() {
	proto.RegisterEnum("gatewaytcp.ToClientType", ToClientType_name, ToClientType_value)
	proto.RegisterType((*GatewayStdTcp)(nil), "gatewaytcp.GatewayStdTcp")
	proto.RegisterType((*GatewayStdTcp_PushToClient)(nil), "gatewaytcp.GatewayStdTcp.PushToClient")
	proto.RegisterType((*GatewayStdTcp_PushManyToClient)(nil), "gatewaytcp.GatewayStdTcp.PushManyToClient")
	proto.RegisterType((*GatewayStdTcp_UserChangeBattleId)(nil), "gatewaytcp.GatewayStdTcp.UserChangeBattleId")
	proto.RegisterType((*GatewayStdTcp_GetOnlineCountRequest)(nil), "gatewaytcp.GatewayStdTcp.GetOnlineCountRequest")
	proto.RegisterType((*GatewayStdTcp_GetOnlineCountResponse)(nil), "gatewaytcp.GatewayStdTcp.GetOnlineCountResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "gatewaytcp.GatewayStdTcp.GetOnlineCountResponse.LanguageCountEntry")
}

func init() {
	proto.RegisterFile("proto/gatewaytcp/push_message.proto", fileDescriptor_d537da722c0cf036)
}

var fileDescriptor_d537da722c0cf036 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0xc6, 0x69, 0x29, 0xd3, 0x36, 0x8a, 0x56, 0x2d, 0x04, 0x1f, 0x56, 0x81, 0x4a, 0x28,
	0x42, 0x60, 0xa3, 0x70, 0xa9, 0x38, 0xd1, 0x46, 0xa8, 0x8a, 0x54, 0x04, 0x38, 0xe9, 0x85, 0x4b,
	0xb4, 0x71, 0x06, 0x27, 0x60, 0xef, 0x1a, 0xef, 0xba, 0xc8, 0x77, 0x3e, 0x80, 0xcf, 0xe0, 0xce,
	0x4f, 0xf4, 0xd8, 0x63, 0x0f, 0x1c, 0xc0, 0xb9, 0x70, 0xe4, 0x13, 0x90, 0xbd, 0x49, 0x1b, 0x0a,
	0xdc, 0x76, 0xde, 0x7b, 0x3b, 0xef, 0xcd, 0xec, 0xc2, 0x5e, 0x92, 0x4a, 0x2d, 0xbd, 0x90, 0x6b,
	0xfc, 0xc8, 0x73, 0x1d, 0x24, 0x5e, 0x92, 0xa9, 0xe9, 0x28, 0x46, 0xa5, 0x78, 0x88, 0x6e, 0xc5,
	0x52, 0xb8, 0xa2, 0x9d, 0x3b, 0xa1, 0x94, 0x61, 0x84, 0x5e, 0xc5, 0x8c, 0xb3, 0xb7, 0x1e, 0x17,
	0xb9, 0x91, 0xdd, 0xfb, 0x5a, 0x87, 0xed, 0x23, 0xa3, 0x1c, 0xe8, 0xc9, 0x30, 0x48, 0x9c, 0x4f,
	0x04, 0xb6, 0x5e, 0x65, 0x6a, 0x3a, 0x94, 0xbd, 0x68, 0x86, 0x42, 0xd3, 0x1d, 0x58, 0x4b, 0x65,
	0x84, 0xaa, 0x45, 0xda, 0x76, 0xe7, 0xa6, 0x6f, 0x0a, 0xfa, 0x18, 0x36, 0x16, 0x86, 0xaa, 0x55,
	0x6b, 0xdb, 0x9d, 0xcd, 0xee, 0x8e, 0x6b, 0x6c, 0xdc, 0xa5, 0x8d, 0x7b, 0x20, 0x72, 0xff, 0x52,
	0x45, 0x1f, 0x42, 0x5d, 0xe7, 0x09, 0xb6, 0xec, 0x36, 0xe9, 0x34, 0xba, 0x2d, 0xf7, 0x2a, 0xa0,
	0xbb, 0xf4, 0x1a, 0xe6, 0x09, 0xfa, 0x95, 0xca, 0x39, 0x86, 0x66, 0x99, 0xe2, 0x05, 0x17, 0xf9,
	0x65, 0x92, 0x7d, 0xb0, 0x93, 0xc0, 0xe4, 0xd8, 0xec, 0xde, 0x5f, 0x6d, 0xf0, 0xc7, 0x08, 0xee,
	0x6a, 0x7c, 0xbf, 0xbc, 0xe2, 0x9c, 0x00, 0x3d, 0x51, 0x98, 0xf6, 0xa6, 0x5c, 0x84, 0x78, 0xc8,
	0xb5, 0x8e, 0xb0, 0x3f, 0xa1, 0xbb, 0xb0, 0x1e, 0xf3, 0x64, 0x34, 0x9b, 0xb4, 0x48, 0x9b, 0x74,
	0x6c, 0x7f, 0x2d, 0xe6, 0x49, 0x7f, 0x42, 0x3b, 0xd0, 0x1c, 0x57, 0x92, 0x91, 0xc2, 0xf4, 0x14,
	0xd3, 0x52, 0x50, 0xab, 0x04, 0x0d, 0x83, 0x0f, 0x2a, 0xb8, 0x3f, 0x71, 0x6e, 0xc3, 0xee, 0x11,
	0xea, 0x97, 0x22, 0x9a, 0x09, 0xec, 0xc9, 0x4c, 0x68, 0x1f, 0x3f, 0x64, 0xa8, 0xb4, 0xf3, 0x8d,
	0xc0, 0xad, 0xeb, 0x8c, 0x4a, 0xa4, 0x50, 0x58, 0xae, 0x33, 0x28, 0x81, 0xa5, 0x67, 0x55, 0xd0,
	0x77, 0xd0, 0x88, 0xb8, 0x08, 0x33, 0x1e, 0xe2, 0xc8, 0xd0, 0x66, 0xa9, 0xbd, 0xff, 0x4f, 0xf9,
	0xef, 0xfe, 0xee, 0xf1, 0xa2, 0x4d, 0x85, 0x3e, 0x17, 0x3a, 0xcd, 0xfd, 0xed, 0x68, 0x15, 0x73,
	0x9e, 0x01, 0xfd, 0x5b, 0x44, 0x9b, 0x60, 0xbf, 0xc7, 0x7c, 0x91, 0xaa, 0x3c, 0x96, 0x49, 0x4f,
	0x79, 0x94, 0xe1, 0x62, 0x78, 0x53, 0x3c, 0xad, 0xed, 0x93, 0x07, 0x77, 0x61, 0x6b, 0xf5, 0xc9,
	0xe8, 0x06, 0xd4, 0x07, 0x32, 0xc6, 0xa6, 0x45, 0x6f, 0x80, 0x7d, 0x10, 0x45, 0x4d, 0x72, 0xf8,
	0xfa, 0xe2, 0x07, 0xb3, 0xbe, 0x14, 0x8c, 0x9c, 0x15, 0x8c, 0x9c, 0x17, 0x8c, 0x7c, 0x2f, 0x18,
	0xf9, 0x59, 0x30, 0xeb, 0x57, 0xc1, 0xc8, 0xe7, 0x39, 0xb3, 0xce, 0xe6, 0x8c, 0x9c, 0xcf, 0x99,
	0x75, 0x31, 0x67, 0xd6, 0x9b, 0xbd, 0x40, 0xce, 0xc4, 0x23, 0xb3, 0x6e, 0x2f, 0x90, 0x71, 0x2c,
	0x85, 0x77, 0xfd, 0x97, 0x8f, 0xd7, 0x2b, 0xe4, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43,
	0x5b, 0xaf, 0x92, 0x00, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGatewayStdTcp.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGatewayStdTcp_PushToClient.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGatewayStdTcp_PushManyToClient.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGatewayStdTcp_UserChangeBattleId.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGatewayStdTcp_GetOnlineCountRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGatewayStdTcp_GetOnlineCountResponse.Get().(proto.Message)
	})
}

var poolGatewayStdTcp = &sync.Pool{New: func() interface{} { return &GatewayStdTcp{} }}

func (m *GatewayStdTcp) ReleasePool() { m.Reset(); poolGatewayStdTcp.Put(m); m = nil }

var poolGatewayStdTcp_PushToClient = &sync.Pool{New: func() interface{} { return &GatewayStdTcp_PushToClient{} }}

func (m *GatewayStdTcp_PushToClient) ReleasePool() {
	m.Reset()
	poolGatewayStdTcp_PushToClient.Put(m)
	m = nil
}

var poolGatewayStdTcp_PushManyToClient = &sync.Pool{New: func() interface{} { return &GatewayStdTcp_PushManyToClient{} }}

func (m *GatewayStdTcp_PushManyToClient) ReleasePool() {
	m.Reset()
	poolGatewayStdTcp_PushManyToClient.Put(m)
	m = nil
}

var poolGatewayStdTcp_UserChangeBattleId = &sync.Pool{New: func() interface{} { return &GatewayStdTcp_UserChangeBattleId{} }}

func (m *GatewayStdTcp_UserChangeBattleId) ReleasePool() {
	m.Reset()
	poolGatewayStdTcp_UserChangeBattleId.Put(m)
	m = nil
}

var poolGatewayStdTcp_GetOnlineCountRequest = &sync.Pool{New: func() interface{} { return &GatewayStdTcp_GetOnlineCountRequest{} }}

func (m *GatewayStdTcp_GetOnlineCountRequest) ReleasePool() {
	m.Reset()
	poolGatewayStdTcp_GetOnlineCountRequest.Put(m)
	m = nil
}

var poolGatewayStdTcp_GetOnlineCountResponse = &sync.Pool{New: func() interface{} { return &GatewayStdTcp_GetOnlineCountResponse{} }}

func (m *GatewayStdTcp_GetOnlineCountResponse) ReleasePool() {
	m.Reset()
	poolGatewayStdTcp_GetOnlineCountResponse.Put(m)
	m = nil
}
func (x ToClientType) String() string {
	s, ok := ToClientType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GatewayStdTcp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStdTcp)
	if !ok {
		that2, ok := that.(GatewayStdTcp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GatewayStdTcp_PushToClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStdTcp_PushToClient)
	if !ok {
		that2, ok := that.(GatewayStdTcp_PushToClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *GatewayStdTcp_PushManyToClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStdTcp_PushManyToClient)
	if !ok {
		that2, ok := that.(GatewayStdTcp_PushManyToClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pcs) != len(that1.Pcs) {
		return false
	}
	for i := range this.Pcs {
		if !this.Pcs[i].Equal(that1.Pcs[i]) {
			return false
		}
	}
	return true
}
func (this *GatewayStdTcp_UserChangeBattleId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStdTcp_UserChangeBattleId)
	if !ok {
		that2, ok := that.(GatewayStdTcp_UserChangeBattleId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	return true
}
func (this *GatewayStdTcp_GetOnlineCountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStdTcp_GetOnlineCountRequest)
	if !ok {
		that2, ok := that.(GatewayStdTcp_GetOnlineCountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GatewayStdTcp_GetOnlineCountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStdTcp_GetOnlineCountResponse)
	if !ok {
		that2, ok := that.(GatewayStdTcp_GetOnlineCountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.LanguageCount) != len(that1.LanguageCount) {
		return false
	}
	for i := range this.LanguageCount {
		if this.LanguageCount[i] != that1.LanguageCount[i] {
			return false
		}
	}
	return true
}
func (m *GatewayStdTcp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStdTcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayStdTcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GatewayStdTcp_PushToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStdTcp_PushToClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayStdTcp_PushToClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintPushMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPushMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintPushMessage(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayStdTcp_PushManyToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStdTcp_PushManyToClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayStdTcp_PushManyToClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pcs) > 0 {
		for iNdEx := len(m.Pcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPushMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayStdTcp_UserChangeBattleId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStdTcp_UserChangeBattleId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayStdTcp_UserChangeBattleId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleServerId != 0 {
		i = encodeVarintPushMessage(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.MapId != 0 {
		i = encodeVarintPushMessage(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayStdTcp_GetOnlineCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStdTcp_GetOnlineCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayStdTcp_GetOnlineCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GatewayStdTcp_GetOnlineCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStdTcp_GetOnlineCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayStdTcp_GetOnlineCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LanguageCount) > 0 {
		for k := range m.LanguageCount {
			v := m.LanguageCount[k]
			baseI := i
			i = encodeVarintPushMessage(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintPushMessage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPushMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintPushMessage(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPushMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovPushMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *GatewayStdTcp) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GatewayStdTcp_PushToClient) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			w.String(v)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("messages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Messages == nil {
		w.RawString("null")
	} else if len(m.Messages) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Messages {
			(*coin_server_common_proto_jsonany.Any)(v).JsonBytes(w)
			if i != len(m.Messages)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GatewayStdTcp_PushManyToClient) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pcs")
	w.RawByte('"')
	w.RawByte(':')
	if m.Pcs == nil {
		w.RawString("null")
	} else if len(m.Pcs) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Pcs {
			v.JsonBytes(w)
			if i != len(m.Pcs)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GatewayStdTcp_UserChangeBattleId) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MapId != 0 {
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GatewayStdTcp_GetOnlineCountRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GatewayStdTcp_GetOnlineCountResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Count != 0 {
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("language_count")
	w.RawByte('"')
	w.RawByte(':')
	if m.LanguageCount == nil {
		w.RawString("null")
	} else if len(m.LanguageCount) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlLanguageCount := len(m.LanguageCount)
		for k, v := range m.LanguageCount {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlLanguageCount--
			if mlLanguageCount != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GatewayStdTcp) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GatewayStdTcp) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GatewayStdTcp) GoString() string {
	return m.String()
}

func (m *GatewayStdTcp_PushToClient) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GatewayStdTcp_PushToClient) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GatewayStdTcp_PushToClient) GoString() string {
	return m.String()
}

func (m *GatewayStdTcp_PushManyToClient) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GatewayStdTcp_PushManyToClient) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GatewayStdTcp_PushManyToClient) GoString() string {
	return m.String()
}

func (m *GatewayStdTcp_UserChangeBattleId) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GatewayStdTcp_UserChangeBattleId) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GatewayStdTcp_UserChangeBattleId) GoString() string {
	return m.String()
}

func (m *GatewayStdTcp_GetOnlineCountRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GatewayStdTcp_GetOnlineCountRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GatewayStdTcp_GetOnlineCountRequest) GoString() string {
	return m.String()
}

func (m *GatewayStdTcp_GetOnlineCountResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GatewayStdTcp_GetOnlineCountResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GatewayStdTcp_GetOnlineCountResponse) GoString() string {
	return m.String()
}

func (m *GatewayStdTcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GatewayStdTcp_PushToClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovPushMessage(uint64(l))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovPushMessage(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovPushMessage(uint64(m.Type))
	}
	return n
}

func (m *GatewayStdTcp_PushManyToClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pcs) > 0 {
		for _, e := range m.Pcs {
			l = e.Size()
			n += 1 + l + sovPushMessage(uint64(l))
		}
	}
	return n
}

func (m *GatewayStdTcp_UserChangeBattleId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovPushMessage(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovPushMessage(uint64(m.BattleServerId))
	}
	return n
}

func (m *GatewayStdTcp_GetOnlineCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GatewayStdTcp_GetOnlineCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovPushMessage(uint64(m.Count))
	}
	if len(m.LanguageCount) > 0 {
		for k, v := range m.LanguageCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPushMessage(uint64(k)) + 1 + sovPushMessage(uint64(v))
			n += mapEntrySize + 1 + sovPushMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPushMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPushMessage(x uint64) (n int) {
	return sovPushMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GatewayStdTcp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStdTcp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStdTcp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPushMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStdTcp_PushToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &types.Any{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ToClientType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPushMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStdTcp_PushManyToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushManyToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushManyToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pcs = append(m.Pcs, &GatewayStdTcp_PushToClient{})
			if err := m.Pcs[len(m.Pcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStdTcp_UserChangeBattleId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserChangeBattleId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserChangeBattleId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPushMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStdTcp_GetOnlineCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOnlineCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOnlineCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPushMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStdTcp_GetOnlineCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOnlineCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOnlineCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguageCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LanguageCount == nil {
				m.LanguageCount = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPushMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPushMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPushMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPushMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPushMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LanguageCount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPushMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPushMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPushMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPushMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPushMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPushMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPushMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPushMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPushMessage = fmt.Errorf("proto: unexpected end of group")
)
