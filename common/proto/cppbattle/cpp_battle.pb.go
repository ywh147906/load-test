// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/cppbattle/cpp_battle.proto

package cppbattle

import (
	coin_server_common_buffer "github.com/ywh147906/load-test/common/buffer"
	coin_server_common_jwriter "github.com/ywh147906/load-test/common/jwriter"
	coin_server_common_msgcreate "github.com/ywh147906/load-test/common/msgcreate"
	coin_server_common_proto_jsonany "github.com/ywh147906/load-test/common/proto/jsonany"
	models "github.com/ywh147906/load-test/common/proto/models"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReviveTyp int32

const (
	ReviveTyp_ReviveTypStay   ReviveTyp = 0
	ReviveTyp_ReviveTypNearby ReviveTyp = 1
)

var ReviveTyp_name = map[int32]string{
	0: "ReviveTypStay",
	1: "ReviveTypNearby",
}

var ReviveTyp_value = map[string]int32{
	"ReviveTypStay":   0,
	"ReviveTypNearby": 1,
}

func (ReviveTyp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0}
}

type CPPBattle struct {
}

func (m *CPPBattle) Reset()      { *m = CPPBattle{} }
func (*CPPBattle) ProtoMessage() {}
func (*CPPBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0}
}
func (m *CPPBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle.Merge(m, src)
}
func (m *CPPBattle) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle proto.InternalMessageInfo

func (*CPPBattle) XXX_MessageName() string {
	return "cppbattle.CPPBattle"
}

type CPPBattle_Vec2 struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *CPPBattle_Vec2) Reset()      { *m = CPPBattle_Vec2{} }
func (*CPPBattle_Vec2) ProtoMessage() {}
func (*CPPBattle_Vec2) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 0}
}
func (m *CPPBattle_Vec2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_Vec2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_Vec2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_Vec2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_Vec2.Merge(m, src)
}
func (m *CPPBattle_Vec2) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_Vec2) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_Vec2.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_Vec2 proto.InternalMessageInfo

func (m *CPPBattle_Vec2) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *CPPBattle_Vec2) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (*CPPBattle_Vec2) XXX_MessageName() string {
	return "cppbattle.CPPBattle.Vec2"
}

type CPPBattle_Ping struct {
	ClientTime int64 `protobuf:"varint,1,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
}

func (m *CPPBattle_Ping) Reset()      { *m = CPPBattle_Ping{} }
func (*CPPBattle_Ping) ProtoMessage() {}
func (*CPPBattle_Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 1}
}
func (m *CPPBattle_Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_Ping.Merge(m, src)
}
func (m *CPPBattle_Ping) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_Ping proto.InternalMessageInfo

func (m *CPPBattle_Ping) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (*CPPBattle_Ping) XXX_MessageName() string {
	return "cppbattle.CPPBattle.Ping"
}

type CPPBattle_Pong struct {
	ClientTime  int64 `protobuf:"varint,1,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
	ServerTime  int64 `protobuf:"varint,2,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	ServerFrame int64 `protobuf:"varint,3,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
	BattleId    int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_Pong) Reset()      { *m = CPPBattle_Pong{} }
func (*CPPBattle_Pong) ProtoMessage() {}
func (*CPPBattle_Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 2}
}
func (m *CPPBattle_Pong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_Pong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_Pong.Merge(m, src)
}
func (m *CPPBattle_Pong) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_Pong proto.InternalMessageInfo

func (m *CPPBattle_Pong) GetClientTime() int64 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *CPPBattle_Pong) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *CPPBattle_Pong) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (m *CPPBattle_Pong) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_Pong) XXX_MessageName() string {
	return "cppbattle.CPPBattle.Pong"
}

type CPPBattle_EnterBattleRequest struct {
	Pos            *CPPBattle_Vec2                `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId          int64                          `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	BattleServerId int64                          `protobuf:"varint,3,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	Role           *models.Role                   `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	Heroes         []*models.HeroForBattle        `protobuf:"bytes,5,rep,name=heroes,proto3" json:"heroes,omitempty"`
	Medicine       map[int64]*models.MedicineInfo `protobuf:"bytes,6,rep,name=medicine,proto3" json:"medicine,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Towards        *CPPBattle_Vec2                `protobuf:"bytes,7,opt,name=towards,proto3" json:"towards,omitempty"`
	AutoSouleSkill int64                          `protobuf:"varint,8,opt,name=auto_soule_skill,json=autoSouleSkill,proto3" json:"auto_soule_skill,omitempty"`
}

func (m *CPPBattle_EnterBattleRequest) Reset()      { *m = CPPBattle_EnterBattleRequest{} }
func (*CPPBattle_EnterBattleRequest) ProtoMessage() {}
func (*CPPBattle_EnterBattleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 3}
}
func (m *CPPBattle_EnterBattleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_EnterBattleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_EnterBattleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_EnterBattleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_EnterBattleRequest.Merge(m, src)
}
func (m *CPPBattle_EnterBattleRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_EnterBattleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_EnterBattleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_EnterBattleRequest proto.InternalMessageInfo

func (m *CPPBattle_EnterBattleRequest) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_EnterBattleRequest) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *CPPBattle_EnterBattleRequest) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *CPPBattle_EnterBattleRequest) GetRole() *models.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *CPPBattle_EnterBattleRequest) GetHeroes() []*models.HeroForBattle {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *CPPBattle_EnterBattleRequest) GetMedicine() map[int64]*models.MedicineInfo {
	if m != nil {
		return m.Medicine
	}
	return nil
}

func (m *CPPBattle_EnterBattleRequest) GetTowards() *CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *CPPBattle_EnterBattleRequest) GetAutoSouleSkill() int64 {
	if m != nil {
		return m.AutoSouleSkill
	}
	return 0
}

func (*CPPBattle_EnterBattleRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.EnterBattleRequest"
}

type CPPBattle_EnterBattleResponse struct {
	Pos            *CPPBattle_Vec2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	MapId          int64           `protobuf:"varint,2,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Ip             string          `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port           int64           `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Token          string          `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	BattleServerId int64           `protobuf:"varint,6,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	BattleId       int64           `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_EnterBattleResponse) Reset()      { *m = CPPBattle_EnterBattleResponse{} }
func (*CPPBattle_EnterBattleResponse) ProtoMessage() {}
func (*CPPBattle_EnterBattleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 4}
}
func (m *CPPBattle_EnterBattleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_EnterBattleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_EnterBattleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_EnterBattleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_EnterBattleResponse.Merge(m, src)
}
func (m *CPPBattle_EnterBattleResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_EnterBattleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_EnterBattleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_EnterBattleResponse proto.InternalMessageInfo

func (m *CPPBattle_EnterBattleResponse) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_EnterBattleResponse) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *CPPBattle_EnterBattleResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CPPBattle_EnterBattleResponse) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CPPBattle_EnterBattleResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CPPBattle_EnterBattleResponse) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *CPPBattle_EnterBattleResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_EnterBattleResponse) XXX_MessageName() string {
	return "cppbattle.CPPBattle.EnterBattleResponse"
}

type CPPBattle_SyncNicknameChangePush struct {
	RoleId   string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
}

func (m *CPPBattle_SyncNicknameChangePush) Reset()      { *m = CPPBattle_SyncNicknameChangePush{} }
func (*CPPBattle_SyncNicknameChangePush) ProtoMessage() {}
func (*CPPBattle_SyncNicknameChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 5}
}
func (m *CPPBattle_SyncNicknameChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_SyncNicknameChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_SyncNicknameChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_SyncNicknameChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_SyncNicknameChangePush.Merge(m, src)
}
func (m *CPPBattle_SyncNicknameChangePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_SyncNicknameChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_SyncNicknameChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_SyncNicknameChangePush proto.InternalMessageInfo

func (m *CPPBattle_SyncNicknameChangePush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *CPPBattle_SyncNicknameChangePush) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (*CPPBattle_SyncNicknameChangePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.SyncNicknameChangePush"
}

type CPPBattle_CanChangeSceneRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *CPPBattle_CanChangeSceneRequest) Reset()      { *m = CPPBattle_CanChangeSceneRequest{} }
func (*CPPBattle_CanChangeSceneRequest) ProtoMessage() {}
func (*CPPBattle_CanChangeSceneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 6}
}
func (m *CPPBattle_CanChangeSceneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_CanChangeSceneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_CanChangeSceneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_CanChangeSceneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_CanChangeSceneRequest.Merge(m, src)
}
func (m *CPPBattle_CanChangeSceneRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_CanChangeSceneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_CanChangeSceneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_CanChangeSceneRequest proto.InternalMessageInfo

func (m *CPPBattle_CanChangeSceneRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*CPPBattle_CanChangeSceneRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.CanChangeSceneRequest"
}

type CPPBattle_CanChangeSceneResponse struct {
	CanStatus int64 `protobuf:"varint,1,opt,name=can_status,json=canStatus,proto3" json:"can_status,omitempty"`
}

func (m *CPPBattle_CanChangeSceneResponse) Reset()      { *m = CPPBattle_CanChangeSceneResponse{} }
func (*CPPBattle_CanChangeSceneResponse) ProtoMessage() {}
func (*CPPBattle_CanChangeSceneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 7}
}
func (m *CPPBattle_CanChangeSceneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_CanChangeSceneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_CanChangeSceneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_CanChangeSceneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_CanChangeSceneResponse.Merge(m, src)
}
func (m *CPPBattle_CanChangeSceneResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_CanChangeSceneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_CanChangeSceneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_CanChangeSceneResponse proto.InternalMessageInfo

func (m *CPPBattle_CanChangeSceneResponse) GetCanStatus() int64 {
	if m != nil {
		return m.CanStatus
	}
	return 0
}

func (*CPPBattle_CanChangeSceneResponse) XXX_MessageName() string {
	return "cppbattle.CPPBattle.CanChangeSceneResponse"
}

type CPPBattle_ManyPushMsg struct {
	Messages []*types.Any `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *CPPBattle_ManyPushMsg) Reset()      { *m = CPPBattle_ManyPushMsg{} }
func (*CPPBattle_ManyPushMsg) ProtoMessage() {}
func (*CPPBattle_ManyPushMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 8}
}
func (m *CPPBattle_ManyPushMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_ManyPushMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_ManyPushMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_ManyPushMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_ManyPushMsg.Merge(m, src)
}
func (m *CPPBattle_ManyPushMsg) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_ManyPushMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_ManyPushMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_ManyPushMsg proto.InternalMessageInfo

func (m *CPPBattle_ManyPushMsg) GetMessages() []*types.Any {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (*CPPBattle_ManyPushMsg) XXX_MessageName() string {
	return "cppbattle.CPPBattle.ManyPushMsg"
}

type CPPBattle_AuthTCPPushToServer struct {
	RoleId   string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ConfigId int64  `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (m *CPPBattle_AuthTCPPushToServer) Reset()      { *m = CPPBattle_AuthTCPPushToServer{} }
func (*CPPBattle_AuthTCPPushToServer) ProtoMessage() {}
func (*CPPBattle_AuthTCPPushToServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 9}
}
func (m *CPPBattle_AuthTCPPushToServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_AuthTCPPushToServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_AuthTCPPushToServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_AuthTCPPushToServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_AuthTCPPushToServer.Merge(m, src)
}
func (m *CPPBattle_AuthTCPPushToServer) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_AuthTCPPushToServer) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_AuthTCPPushToServer.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_AuthTCPPushToServer proto.InternalMessageInfo

func (m *CPPBattle_AuthTCPPushToServer) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *CPPBattle_AuthTCPPushToServer) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CPPBattle_AuthTCPPushToServer) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (*CPPBattle_AuthTCPPushToServer) XXX_MessageName() string {
	return "cppbattle.CPPBattle.AuthTCPPushToServer"
}

type CPPBattle_AuthTCPPushToClient struct {
	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *CPPBattle_AuthTCPPushToClient) Reset()      { *m = CPPBattle_AuthTCPPushToClient{} }
func (*CPPBattle_AuthTCPPushToClient) ProtoMessage() {}
func (*CPPBattle_AuthTCPPushToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 10}
}
func (m *CPPBattle_AuthTCPPushToClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_AuthTCPPushToClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_AuthTCPPushToClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_AuthTCPPushToClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_AuthTCPPushToClient.Merge(m, src)
}
func (m *CPPBattle_AuthTCPPushToClient) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_AuthTCPPushToClient) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_AuthTCPPushToClient.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_AuthTCPPushToClient proto.InternalMessageInfo

func (m *CPPBattle_AuthTCPPushToClient) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (*CPPBattle_AuthTCPPushToClient) XXX_MessageName() string {
	return "cppbattle.CPPBattle.AuthTCPPushToClient"
}

type CPPBattle_ChangeHero struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	// hero表配置id
	ConfigId int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	BattleId int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_ChangeHero) Reset()      { *m = CPPBattle_ChangeHero{} }
func (*CPPBattle_ChangeHero) ProtoMessage() {}
func (*CPPBattle_ChangeHero) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 11}
}
func (m *CPPBattle_ChangeHero) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_ChangeHero) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_ChangeHero.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_ChangeHero) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_ChangeHero.Merge(m, src)
}
func (m *CPPBattle_ChangeHero) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_ChangeHero) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_ChangeHero.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_ChangeHero proto.InternalMessageInfo

func (m *CPPBattle_ChangeHero) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *CPPBattle_ChangeHero) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *CPPBattle_ChangeHero) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_ChangeHero) XXX_MessageName() string {
	return "cppbattle.CPPBattle.ChangeHero"
}

type CPPBattle_ChangeHeroPush struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	// hero表配置id
	ConfigId int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// hero属性(hp mp 等)
	Attr   map[int64]int64 `protobuf:"bytes,3,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Equip  map[int64]int64 `protobuf:"bytes,4,rep,name=equip,proto3" json:"equip,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RoleId string          `protobuf:"bytes,5,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *CPPBattle_ChangeHeroPush) Reset()      { *m = CPPBattle_ChangeHeroPush{} }
func (*CPPBattle_ChangeHeroPush) ProtoMessage() {}
func (*CPPBattle_ChangeHeroPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 12}
}
func (m *CPPBattle_ChangeHeroPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_ChangeHeroPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_ChangeHeroPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_ChangeHeroPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_ChangeHeroPush.Merge(m, src)
}
func (m *CPPBattle_ChangeHeroPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_ChangeHeroPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_ChangeHeroPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_ChangeHeroPush proto.InternalMessageInfo

func (m *CPPBattle_ChangeHeroPush) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *CPPBattle_ChangeHeroPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *CPPBattle_ChangeHeroPush) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *CPPBattle_ChangeHeroPush) GetEquip() map[int64]int64 {
	if m != nil {
		return m.Equip
	}
	return nil
}

func (m *CPPBattle_ChangeHeroPush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*CPPBattle_ChangeHeroPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.ChangeHeroPush"
}

type CPPBattle_ChangeHeroSelfPush struct {
	BattleServerId int64 `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	RemainCd       int64 `protobuf:"varint,2,opt,name=remain_cd,json=remainCd,proto3" json:"remain_cd,omitempty"`
	// hero表配置id
	ConfigId int64 `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (m *CPPBattle_ChangeHeroSelfPush) Reset()      { *m = CPPBattle_ChangeHeroSelfPush{} }
func (*CPPBattle_ChangeHeroSelfPush) ProtoMessage() {}
func (*CPPBattle_ChangeHeroSelfPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 13}
}
func (m *CPPBattle_ChangeHeroSelfPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_ChangeHeroSelfPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_ChangeHeroSelfPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_ChangeHeroSelfPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_ChangeHeroSelfPush.Merge(m, src)
}
func (m *CPPBattle_ChangeHeroSelfPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_ChangeHeroSelfPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_ChangeHeroSelfPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_ChangeHeroSelfPush proto.InternalMessageInfo

func (m *CPPBattle_ChangeHeroSelfPush) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *CPPBattle_ChangeHeroSelfPush) GetRemainCd() int64 {
	if m != nil {
		return m.RemainCd
	}
	return 0
}

func (m *CPPBattle_ChangeHeroSelfPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (*CPPBattle_ChangeHeroSelfPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.ChangeHeroSelfPush"
}

type CPPBattle_HeroAttrUpdatePush struct {
	BattleServerId int64                   `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	ObjId          string                  `protobuf:"bytes,2,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Heroes         []*CPPBattle_HeroUpdate `protobuf:"bytes,3,rep,name=heroes,proto3" json:"heroes,omitempty"`
	Title          int64                   `protobuf:"varint,4,opt,name=title,proto3" json:"title,omitempty"`
	Level          int64                   `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *CPPBattle_HeroAttrUpdatePush) Reset()      { *m = CPPBattle_HeroAttrUpdatePush{} }
func (*CPPBattle_HeroAttrUpdatePush) ProtoMessage() {}
func (*CPPBattle_HeroAttrUpdatePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 14}
}
func (m *CPPBattle_HeroAttrUpdatePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_HeroAttrUpdatePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_HeroAttrUpdatePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_HeroAttrUpdatePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_HeroAttrUpdatePush.Merge(m, src)
}
func (m *CPPBattle_HeroAttrUpdatePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_HeroAttrUpdatePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_HeroAttrUpdatePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_HeroAttrUpdatePush proto.InternalMessageInfo

func (m *CPPBattle_HeroAttrUpdatePush) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *CPPBattle_HeroAttrUpdatePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_HeroAttrUpdatePush) GetHeroes() []*CPPBattle_HeroUpdate {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *CPPBattle_HeroAttrUpdatePush) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (m *CPPBattle_HeroAttrUpdatePush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (*CPPBattle_HeroAttrUpdatePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.HeroAttrUpdatePush"
}

type CPPBattle_HeroFashionPush struct {
	BattleServerId int64  `protobuf:"varint,1,opt,name=battle_server_id,json=battleServerId,proto3" json:"battle_server_id,omitempty"`
	RoleId         string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	HeroConfigId   int64  `protobuf:"varint,3,opt,name=hero_config_id,json=heroConfigId,proto3" json:"hero_config_id,omitempty"`
	Fashion        int64  `protobuf:"varint,4,opt,name=fashion,proto3" json:"fashion,omitempty"`
}

func (m *CPPBattle_HeroFashionPush) Reset()      { *m = CPPBattle_HeroFashionPush{} }
func (*CPPBattle_HeroFashionPush) ProtoMessage() {}
func (*CPPBattle_HeroFashionPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 15}
}
func (m *CPPBattle_HeroFashionPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_HeroFashionPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_HeroFashionPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_HeroFashionPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_HeroFashionPush.Merge(m, src)
}
func (m *CPPBattle_HeroFashionPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_HeroFashionPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_HeroFashionPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_HeroFashionPush proto.InternalMessageInfo

func (m *CPPBattle_HeroFashionPush) GetBattleServerId() int64 {
	if m != nil {
		return m.BattleServerId
	}
	return 0
}

func (m *CPPBattle_HeroFashionPush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *CPPBattle_HeroFashionPush) GetHeroConfigId() int64 {
	if m != nil {
		return m.HeroConfigId
	}
	return 0
}

func (m *CPPBattle_HeroFashionPush) GetFashion() int64 {
	if m != nil {
		return m.Fashion
	}
	return 0
}

func (*CPPBattle_HeroFashionPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.HeroFashionPush"
}

type CPPBattle_PlayerPush struct {
	// 实例id
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 公会名字
	SectName string `protobuf:"bytes,3,opt,name=sect_name,json=sectName,proto3" json:"sect_name,omitempty"`
	// 等级
	Level int64 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	// 英雄信息
	Heroes []*models.HeroForBattle `protobuf:"bytes,5,rep,name=heroes,proto3" json:"heroes,omitempty"`
	// 当前正在使用哪个英雄
	HeroIndex int64 `protobuf:"varint,6,opt,name=hero_index,json=heroIndex,proto3" json:"hero_index,omitempty"`
	// 当前位置
	Pos *CPPBattle_Vec2 `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	// 当前朝向
	Towards   *CPPBattle_Vec2 `protobuf:"bytes,8,opt,name=towards,proto3" json:"towards,omitempty"`
	Speed     float32         `protobuf:"fixed32,9,opt,name=speed,proto3" json:"speed,omitempty"`
	BuffSpeed float32         `protobuf:"fixed32,10,opt,name=buff_speed,json=buffSpeed,proto3" json:"buff_speed,omitempty"`
	BattleId  int64           `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_PlayerPush) Reset()      { *m = CPPBattle_PlayerPush{} }
func (*CPPBattle_PlayerPush) ProtoMessage() {}
func (*CPPBattle_PlayerPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 16}
}
func (m *CPPBattle_PlayerPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_PlayerPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_PlayerPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_PlayerPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_PlayerPush.Merge(m, src)
}
func (m *CPPBattle_PlayerPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_PlayerPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_PlayerPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_PlayerPush proto.InternalMessageInfo

func (m *CPPBattle_PlayerPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_PlayerPush) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CPPBattle_PlayerPush) GetSectName() string {
	if m != nil {
		return m.SectName
	}
	return ""
}

func (m *CPPBattle_PlayerPush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CPPBattle_PlayerPush) GetHeroes() []*models.HeroForBattle {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *CPPBattle_PlayerPush) GetHeroIndex() int64 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *CPPBattle_PlayerPush) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_PlayerPush) GetTowards() *CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *CPPBattle_PlayerPush) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *CPPBattle_PlayerPush) GetBuffSpeed() float32 {
	if m != nil {
		return m.BuffSpeed
	}
	return 0
}

func (m *CPPBattle_PlayerPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_PlayerPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.PlayerPush"
}

type CPPBattle_HeroesChangePush struct {
	Heroes []*models.HeroForBattle `protobuf:"bytes,1,rep,name=heroes,proto3" json:"heroes,omitempty"`
	// 当前正在使用哪个英雄
	HeroIndex  int64   `protobuf:"varint,2,opt,name=hero_index,json=heroIndex,proto3" json:"hero_index,omitempty"`
	Speed      float32 `protobuf:"fixed32,3,opt,name=speed,proto3" json:"speed,omitempty"`
	RoleId     string  `protobuf:"bytes,4,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	ChangeType int64   `protobuf:"varint,5,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	Title      int64   `protobuf:"varint,6,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *CPPBattle_HeroesChangePush) Reset()      { *m = CPPBattle_HeroesChangePush{} }
func (*CPPBattle_HeroesChangePush) ProtoMessage() {}
func (*CPPBattle_HeroesChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 17}
}
func (m *CPPBattle_HeroesChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_HeroesChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_HeroesChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_HeroesChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_HeroesChangePush.Merge(m, src)
}
func (m *CPPBattle_HeroesChangePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_HeroesChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_HeroesChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_HeroesChangePush proto.InternalMessageInfo

func (m *CPPBattle_HeroesChangePush) GetHeroes() []*models.HeroForBattle {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *CPPBattle_HeroesChangePush) GetHeroIndex() int64 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *CPPBattle_HeroesChangePush) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *CPPBattle_HeroesChangePush) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *CPPBattle_HeroesChangePush) GetChangeType() int64 {
	if m != nil {
		return m.ChangeType
	}
	return 0
}

func (m *CPPBattle_HeroesChangePush) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (*CPPBattle_HeroesChangePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.HeroesChangePush"
}

type CPPBattle_ClientMoveRequest struct {
	Typ       int64           `protobuf:"varint,1,opt,name=typ,proto3" json:"typ,omitempty"`
	DestOrDir *CPPBattle_Vec2 `protobuf:"bytes,2,opt,name=dest_or_dir,json=destOrDir,proto3" json:"dest_or_dir,omitempty"`
	IsManual  int64           `protobuf:"varint,3,opt,name=is_manual,json=isManual,proto3" json:"is_manual,omitempty"`
}

func (m *CPPBattle_ClientMoveRequest) Reset()      { *m = CPPBattle_ClientMoveRequest{} }
func (*CPPBattle_ClientMoveRequest) ProtoMessage() {}
func (*CPPBattle_ClientMoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 18}
}
func (m *CPPBattle_ClientMoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_ClientMoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_ClientMoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_ClientMoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_ClientMoveRequest.Merge(m, src)
}
func (m *CPPBattle_ClientMoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_ClientMoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_ClientMoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_ClientMoveRequest proto.InternalMessageInfo

func (m *CPPBattle_ClientMoveRequest) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *CPPBattle_ClientMoveRequest) GetDestOrDir() *CPPBattle_Vec2 {
	if m != nil {
		return m.DestOrDir
	}
	return nil
}

func (m *CPPBattle_ClientMoveRequest) GetIsManual() int64 {
	if m != nil {
		return m.IsManual
	}
	return 0
}

func (*CPPBattle_ClientMoveRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.ClientMoveRequest"
}

type CPPBattle_DamagePush struct {
	// 攻击方Id
	AttackerId string `protobuf:"bytes,1,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	// 防御方Id
	DefenderId string `protobuf:"bytes,2,opt,name=defender_id,json=defenderId,proto3" json:"defender_id,omitempty"`
	// 技能id
	SkillId int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	// 技能view索引
	SkillViewIndex int64 `protobuf:"varint,4,opt,name=skill_view_index,json=skillViewIndex,proto3" json:"skill_view_index,omitempty"`
	// 技能索引
	SkillIndex int64 `protobuf:"varint,5,opt,name=skill_index,json=skillIndex,proto3" json:"skill_index,omitempty"`
	// 伤害
	Damage int64 `protobuf:"varint,6,opt,name=damage,proto3" json:"damage,omitempty"`
	// 只带需要用到的属性(当前血量、魔量)
	Attr        map[int64]int64 `protobuf:"bytes,7,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DamageColor int64           `protobuf:"varint,8,opt,name=damage_color,json=damageColor,proto3" json:"damage_color,omitempty"`
	IsDodge     bool            `protobuf:"varint,9,opt,name=is_dodge,json=isDodge,proto3" json:"is_dodge,omitempty"`
	IsParry     bool            `protobuf:"varint,10,opt,name=is_parry,json=isParry,proto3" json:"is_parry,omitempty"`
	// 攻击方configId
	AttackerConfigId int64 `protobuf:"varint,11,opt,name=attacker_config_id,json=attackerConfigId,proto3" json:"attacker_config_id,omitempty"`
	// 防御方configId
	DefenderConfigId int64 `protobuf:"varint,12,opt,name=defender_config_id,json=defenderConfigId,proto3" json:"defender_config_id,omitempty"`
	BattleId         int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_DamagePush) Reset()      { *m = CPPBattle_DamagePush{} }
func (*CPPBattle_DamagePush) ProtoMessage() {}
func (*CPPBattle_DamagePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 19}
}
func (m *CPPBattle_DamagePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_DamagePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_DamagePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_DamagePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_DamagePush.Merge(m, src)
}
func (m *CPPBattle_DamagePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_DamagePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_DamagePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_DamagePush proto.InternalMessageInfo

func (m *CPPBattle_DamagePush) GetAttackerId() string {
	if m != nil {
		return m.AttackerId
	}
	return ""
}

func (m *CPPBattle_DamagePush) GetDefenderId() string {
	if m != nil {
		return m.DefenderId
	}
	return ""
}

func (m *CPPBattle_DamagePush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *CPPBattle_DamagePush) GetSkillViewIndex() int64 {
	if m != nil {
		return m.SkillViewIndex
	}
	return 0
}

func (m *CPPBattle_DamagePush) GetSkillIndex() int64 {
	if m != nil {
		return m.SkillIndex
	}
	return 0
}

func (m *CPPBattle_DamagePush) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *CPPBattle_DamagePush) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *CPPBattle_DamagePush) GetDamageColor() int64 {
	if m != nil {
		return m.DamageColor
	}
	return 0
}

func (m *CPPBattle_DamagePush) GetIsDodge() bool {
	if m != nil {
		return m.IsDodge
	}
	return false
}

func (m *CPPBattle_DamagePush) GetIsParry() bool {
	if m != nil {
		return m.IsParry
	}
	return false
}

func (m *CPPBattle_DamagePush) GetAttackerConfigId() int64 {
	if m != nil {
		return m.AttackerConfigId
	}
	return 0
}

func (m *CPPBattle_DamagePush) GetDefenderConfigId() int64 {
	if m != nil {
		return m.DefenderConfigId
	}
	return 0
}

func (m *CPPBattle_DamagePush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_DamagePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.DamagePush"
}

type CPPBattle_BuffValuePush struct {
	OwnerId        string          `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CasterId       string          `protobuf:"bytes,2,opt,name=caster_id,json=casterId,proto3" json:"caster_id,omitempty"`
	Value          int64           `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	ValueType      int64           `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	Attr           map[int64]int64 `protobuf:"bytes,5,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DamageColor    int64           `protobuf:"varint,6,opt,name=damage_color,json=damageColor,proto3" json:"damage_color,omitempty"`
	IsDodge        bool            `protobuf:"varint,7,opt,name=is_dodge,json=isDodge,proto3" json:"is_dodge,omitempty"`
	IsParry        bool            `protobuf:"varint,8,opt,name=is_parry,json=isParry,proto3" json:"is_parry,omitempty"`
	CasterConfigId int64           `protobuf:"varint,9,opt,name=caster_config_id,json=casterConfigId,proto3" json:"caster_config_id,omitempty"`
	OwnerConfigId  int64           `protobuf:"varint,10,opt,name=owner_config_id,json=ownerConfigId,proto3" json:"owner_config_id,omitempty"`
	BattleId       int64           `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_BuffValuePush) Reset()      { *m = CPPBattle_BuffValuePush{} }
func (*CPPBattle_BuffValuePush) ProtoMessage() {}
func (*CPPBattle_BuffValuePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 20}
}
func (m *CPPBattle_BuffValuePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_BuffValuePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_BuffValuePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_BuffValuePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_BuffValuePush.Merge(m, src)
}
func (m *CPPBattle_BuffValuePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_BuffValuePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_BuffValuePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_BuffValuePush proto.InternalMessageInfo

func (m *CPPBattle_BuffValuePush) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *CPPBattle_BuffValuePush) GetCasterId() string {
	if m != nil {
		return m.CasterId
	}
	return ""
}

func (m *CPPBattle_BuffValuePush) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CPPBattle_BuffValuePush) GetValueType() int64 {
	if m != nil {
		return m.ValueType
	}
	return 0
}

func (m *CPPBattle_BuffValuePush) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *CPPBattle_BuffValuePush) GetDamageColor() int64 {
	if m != nil {
		return m.DamageColor
	}
	return 0
}

func (m *CPPBattle_BuffValuePush) GetIsDodge() bool {
	if m != nil {
		return m.IsDodge
	}
	return false
}

func (m *CPPBattle_BuffValuePush) GetIsParry() bool {
	if m != nil {
		return m.IsParry
	}
	return false
}

func (m *CPPBattle_BuffValuePush) GetCasterConfigId() int64 {
	if m != nil {
		return m.CasterConfigId
	}
	return 0
}

func (m *CPPBattle_BuffValuePush) GetOwnerConfigId() int64 {
	if m != nil {
		return m.OwnerConfigId
	}
	return 0
}

func (m *CPPBattle_BuffValuePush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_BuffValuePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.BuffValuePush"
}

type CPPBattle_BuffInfo struct {
	Id           int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ConfigId     int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	RemainTime   int64 `protobuf:"varint,3,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`
	OverlayCount int64 `protobuf:"varint,4,opt,name=overlay_count,json=overlayCount,proto3" json:"overlay_count,omitempty"`
}

func (m *CPPBattle_BuffInfo) Reset()      { *m = CPPBattle_BuffInfo{} }
func (*CPPBattle_BuffInfo) ProtoMessage() {}
func (*CPPBattle_BuffInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 21}
}
func (m *CPPBattle_BuffInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_BuffInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_BuffInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_BuffInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_BuffInfo.Merge(m, src)
}
func (m *CPPBattle_BuffInfo) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_BuffInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_BuffInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_BuffInfo proto.InternalMessageInfo

func (m *CPPBattle_BuffInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CPPBattle_BuffInfo) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *CPPBattle_BuffInfo) GetRemainTime() int64 {
	if m != nil {
		return m.RemainTime
	}
	return 0
}

func (m *CPPBattle_BuffInfo) GetOverlayCount() int64 {
	if m != nil {
		return m.OverlayCount
	}
	return 0
}

func (*CPPBattle_BuffInfo) XXX_MessageName() string {
	return "cppbattle.CPPBattle.BuffInfo"
}

type CPPBattle_BuffPush struct {
	// buff拥有者
	ObjectId     string                        `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Buffs        map[int64]*CPPBattle_BuffInfo `protobuf:"bytes,2,rep,name=buffs,proto3" json:"buffs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HeroConfigId int64                         `protobuf:"varint,3,opt,name=hero_config_id,json=heroConfigId,proto3" json:"hero_config_id,omitempty"`
	BattleId     int64                         `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_BuffPush) Reset()      { *m = CPPBattle_BuffPush{} }
func (*CPPBattle_BuffPush) ProtoMessage() {}
func (*CPPBattle_BuffPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 22}
}
func (m *CPPBattle_BuffPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_BuffPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_BuffPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_BuffPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_BuffPush.Merge(m, src)
}
func (m *CPPBattle_BuffPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_BuffPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_BuffPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_BuffPush proto.InternalMessageInfo

func (m *CPPBattle_BuffPush) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *CPPBattle_BuffPush) GetBuffs() map[int64]*CPPBattle_BuffInfo {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *CPPBattle_BuffPush) GetHeroConfigId() int64 {
	if m != nil {
		return m.HeroConfigId
	}
	return 0
}

func (m *CPPBattle_BuffPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_BuffPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.BuffPush"
}

type CPPBattle_SkillPush struct {
	// 攻击方Id
	AttackerId string `protobuf:"bytes,1,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	// 防御方Id
	DefenderId string `protobuf:"bytes,2,opt,name=defender_id,json=defenderId,proto3" json:"defender_id,omitempty"`
	// 技能id
	SkillId        int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	SkillViewIndex int64 `protobuf:"varint,4,opt,name=skill_view_index,json=skillViewIndex,proto3" json:"skill_view_index,omitempty"`
	AttackerHeroId int64 `protobuf:"varint,5,opt,name=attacker_hero_id,json=attackerHeroId,proto3" json:"attacker_hero_id,omitempty"`
	BattleId       int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_SkillPush) Reset()      { *m = CPPBattle_SkillPush{} }
func (*CPPBattle_SkillPush) ProtoMessage() {}
func (*CPPBattle_SkillPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 23}
}
func (m *CPPBattle_SkillPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_SkillPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_SkillPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_SkillPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_SkillPush.Merge(m, src)
}
func (m *CPPBattle_SkillPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_SkillPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_SkillPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_SkillPush proto.InternalMessageInfo

func (m *CPPBattle_SkillPush) GetAttackerId() string {
	if m != nil {
		return m.AttackerId
	}
	return ""
}

func (m *CPPBattle_SkillPush) GetDefenderId() string {
	if m != nil {
		return m.DefenderId
	}
	return ""
}

func (m *CPPBattle_SkillPush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *CPPBattle_SkillPush) GetSkillViewIndex() int64 {
	if m != nil {
		return m.SkillViewIndex
	}
	return 0
}

func (m *CPPBattle_SkillPush) GetAttackerHeroId() int64 {
	if m != nil {
		return m.AttackerHeroId
	}
	return 0
}

func (m *CPPBattle_SkillPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_SkillPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.SkillPush"
}

type CPPBattle_RevivePush struct {
	// 实例id
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 复活类型
	ReviveTyp ReviveTyp `protobuf:"varint,2,opt,name=revive_typ,json=reviveTyp,proto3,enum=cppbattle.ReviveTyp" json:"revive_typ,omitempty"`
	// 如果不是复活到原地，则有目标复活点坐标
	Pos      *CPPBattle_Vec2 `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	BattleId int64           `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_RevivePush) Reset()      { *m = CPPBattle_RevivePush{} }
func (*CPPBattle_RevivePush) ProtoMessage() {}
func (*CPPBattle_RevivePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 24}
}
func (m *CPPBattle_RevivePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_RevivePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_RevivePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_RevivePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_RevivePush.Merge(m, src)
}
func (m *CPPBattle_RevivePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_RevivePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_RevivePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_RevivePush proto.InternalMessageInfo

func (m *CPPBattle_RevivePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_RevivePush) GetReviveTyp() ReviveTyp {
	if m != nil {
		return m.ReviveTyp
	}
	return ReviveTyp_ReviveTypStay
}

func (m *CPPBattle_RevivePush) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_RevivePush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_RevivePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.RevivePush"
}

// 英雄复活推送，由服务器推送，只有客户端会处理
type CPPBattle_ReviveHeroPush struct {
	// 实例id
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// config_id
	ConfigId int64 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	BattleId int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_ReviveHeroPush) Reset()      { *m = CPPBattle_ReviveHeroPush{} }
func (*CPPBattle_ReviveHeroPush) ProtoMessage() {}
func (*CPPBattle_ReviveHeroPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 25}
}
func (m *CPPBattle_ReviveHeroPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_ReviveHeroPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_ReviveHeroPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_ReviveHeroPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_ReviveHeroPush.Merge(m, src)
}
func (m *CPPBattle_ReviveHeroPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_ReviveHeroPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_ReviveHeroPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_ReviveHeroPush proto.InternalMessageInfo

func (m *CPPBattle_ReviveHeroPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_ReviveHeroPush) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *CPPBattle_ReviveHeroPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_ReviveHeroPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.ReviveHeroPush"
}

type CPPBattle_DeadPush struct {
	// 攻击方Id
	AttackerId string `protobuf:"bytes,1,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	// 死亡方Id
	DeadId string `protobuf:"bytes,2,opt,name=dead_id,json=deadId,proto3" json:"dead_id,omitempty"`
	// 技能id
	SkillId int64 `protobuf:"varint,3,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	// 技能view索引
	SkillViewIndex int64 `protobuf:"varint,4,opt,name=skill_view_index,json=skillViewIndex,proto3" json:"skill_view_index,omitempty"`
	// 技能索引
	SkillIndex int64 `protobuf:"varint,5,opt,name=skill_index,json=skillIndex,proto3" json:"skill_index,omitempty"`
	// 伤害
	Damage int64 `protobuf:"varint,6,opt,name=damage,proto3" json:"damage,omitempty"`
	// 掉落
	Drop map[int64]int64 `protobuf:"bytes,7,rep,name=drop,proto3" json:"drop,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 攻击方configId
	AttackerConfigId int64 `protobuf:"varint,8,opt,name=attacker_config_id,json=attackerConfigId,proto3" json:"attacker_config_id,omitempty"`
	// 死亡方configId
	DefenderConfigId int64 `protobuf:"varint,9,opt,name=defender_config_id,json=defenderConfigId,proto3" json:"defender_config_id,omitempty"`
	// 原地复活花费
	ReviveCost int64 `protobuf:"varint,10,opt,name=revive_cost,json=reviveCost,proto3" json:"revive_cost,omitempty"`
	// 就近复活等待时间
	ReviveTime int64 `protobuf:"varint,11,opt,name=revive_time,json=reviveTime,proto3" json:"revive_time,omitempty"`
	BattleId   int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_DeadPush) Reset()      { *m = CPPBattle_DeadPush{} }
func (*CPPBattle_DeadPush) ProtoMessage() {}
func (*CPPBattle_DeadPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 26}
}
func (m *CPPBattle_DeadPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_DeadPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_DeadPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_DeadPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_DeadPush.Merge(m, src)
}
func (m *CPPBattle_DeadPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_DeadPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_DeadPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_DeadPush proto.InternalMessageInfo

func (m *CPPBattle_DeadPush) GetAttackerId() string {
	if m != nil {
		return m.AttackerId
	}
	return ""
}

func (m *CPPBattle_DeadPush) GetDeadId() string {
	if m != nil {
		return m.DeadId
	}
	return ""
}

func (m *CPPBattle_DeadPush) GetSkillId() int64 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *CPPBattle_DeadPush) GetSkillViewIndex() int64 {
	if m != nil {
		return m.SkillViewIndex
	}
	return 0
}

func (m *CPPBattle_DeadPush) GetSkillIndex() int64 {
	if m != nil {
		return m.SkillIndex
	}
	return 0
}

func (m *CPPBattle_DeadPush) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *CPPBattle_DeadPush) GetDrop() map[int64]int64 {
	if m != nil {
		return m.Drop
	}
	return nil
}

func (m *CPPBattle_DeadPush) GetAttackerConfigId() int64 {
	if m != nil {
		return m.AttackerConfigId
	}
	return 0
}

func (m *CPPBattle_DeadPush) GetDefenderConfigId() int64 {
	if m != nil {
		return m.DefenderConfigId
	}
	return 0
}

func (m *CPPBattle_DeadPush) GetReviveCost() int64 {
	if m != nil {
		return m.ReviveCost
	}
	return 0
}

func (m *CPPBattle_DeadPush) GetReviveTime() int64 {
	if m != nil {
		return m.ReviveTime
	}
	return 0
}

func (m *CPPBattle_DeadPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_DeadPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.DeadPush"
}

type CPPBattle_QueryDeadPush struct {
	DeadId string `protobuf:"bytes,1,opt,name=dead_id,json=deadId,proto3" json:"dead_id,omitempty"`
	// 原地复活花费
	ReviveCost int64 `protobuf:"varint,2,opt,name=revive_cost,json=reviveCost,proto3" json:"revive_cost,omitempty"`
	// 就近复活等待时间
	ReviveTime int64 `protobuf:"varint,3,opt,name=revive_time,json=reviveTime,proto3" json:"revive_time,omitempty"`
}

func (m *CPPBattle_QueryDeadPush) Reset()      { *m = CPPBattle_QueryDeadPush{} }
func (*CPPBattle_QueryDeadPush) ProtoMessage() {}
func (*CPPBattle_QueryDeadPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 27}
}
func (m *CPPBattle_QueryDeadPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_QueryDeadPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_QueryDeadPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_QueryDeadPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_QueryDeadPush.Merge(m, src)
}
func (m *CPPBattle_QueryDeadPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_QueryDeadPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_QueryDeadPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_QueryDeadPush proto.InternalMessageInfo

func (m *CPPBattle_QueryDeadPush) GetDeadId() string {
	if m != nil {
		return m.DeadId
	}
	return ""
}

func (m *CPPBattle_QueryDeadPush) GetReviveCost() int64 {
	if m != nil {
		return m.ReviveCost
	}
	return 0
}

func (m *CPPBattle_QueryDeadPush) GetReviveTime() int64 {
	if m != nil {
		return m.ReviveTime
	}
	return 0
}

func (*CPPBattle_QueryDeadPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.QueryDeadPush"
}

type CPPBattle_MonsterPush struct {
	// 实例id
	ObjId     string                  `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Heroes    []*models.HeroForBattle `protobuf:"bytes,2,rep,name=heroes,proto3" json:"heroes,omitempty"`
	HeroIndex int64                   `protobuf:"varint,3,opt,name=hero_index,json=heroIndex,proto3" json:"hero_index,omitempty"`
	// 当前位置
	Pos *CPPBattle_Vec2 `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	// 当前朝向
	Towards   *CPPBattle_Vec2 `protobuf:"bytes,5,opt,name=towards,proto3" json:"towards,omitempty"`
	Speed     float32         `protobuf:"fixed32,6,opt,name=speed,proto3" json:"speed,omitempty"`
	BuffSpeed float32         `protobuf:"fixed32,7,opt,name=buff_speed,json=buffSpeed,proto3" json:"buff_speed,omitempty"`
	BattleId  int64           `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_MonsterPush) Reset()      { *m = CPPBattle_MonsterPush{} }
func (*CPPBattle_MonsterPush) ProtoMessage() {}
func (*CPPBattle_MonsterPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 28}
}
func (m *CPPBattle_MonsterPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MonsterPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MonsterPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MonsterPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MonsterPush.Merge(m, src)
}
func (m *CPPBattle_MonsterPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MonsterPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MonsterPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MonsterPush proto.InternalMessageInfo

func (m *CPPBattle_MonsterPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_MonsterPush) GetHeroes() []*models.HeroForBattle {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *CPPBattle_MonsterPush) GetHeroIndex() int64 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *CPPBattle_MonsterPush) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_MonsterPush) GetTowards() *CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *CPPBattle_MonsterPush) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *CPPBattle_MonsterPush) GetBuffSpeed() float32 {
	if m != nil {
		return m.BuffSpeed
	}
	return 0
}

func (m *CPPBattle_MonsterPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_MonsterPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MonsterPush"
}

type CPPBattle_MoveOutPush struct {
	ObjId    []string `protobuf:"bytes,1,rep,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	BattleId int64    `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_MoveOutPush) Reset()      { *m = CPPBattle_MoveOutPush{} }
func (*CPPBattle_MoveOutPush) ProtoMessage() {}
func (*CPPBattle_MoveOutPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 29}
}
func (m *CPPBattle_MoveOutPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MoveOutPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MoveOutPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MoveOutPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MoveOutPush.Merge(m, src)
}
func (m *CPPBattle_MoveOutPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MoveOutPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MoveOutPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MoveOutPush proto.InternalMessageInfo

func (m *CPPBattle_MoveOutPush) GetObjId() []string {
	if m != nil {
		return m.ObjId
	}
	return nil
}

func (m *CPPBattle_MoveOutPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_MoveOutPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MoveOutPush"
}

type CPPBattle_PosChange struct {
	ObjId    string          `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Pos      *CPPBattle_Vec2 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Towards  *CPPBattle_Vec2 `protobuf:"bytes,3,opt,name=towards,proto3" json:"towards,omitempty"`
	BattleId int64           `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_PosChange) Reset()      { *m = CPPBattle_PosChange{} }
func (*CPPBattle_PosChange) ProtoMessage() {}
func (*CPPBattle_PosChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 30}
}
func (m *CPPBattle_PosChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_PosChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_PosChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_PosChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_PosChange.Merge(m, src)
}
func (m *CPPBattle_PosChange) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_PosChange) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_PosChange.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_PosChange proto.InternalMessageInfo

func (m *CPPBattle_PosChange) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_PosChange) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_PosChange) GetTowards() *CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *CPPBattle_PosChange) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_PosChange) XXX_MessageName() string {
	return "cppbattle.CPPBattle.PosChange"
}

type CPPBattle_MoveInfo struct {
}

func (m *CPPBattle_MoveInfo) Reset()      { *m = CPPBattle_MoveInfo{} }
func (*CPPBattle_MoveInfo) ProtoMessage() {}
func (*CPPBattle_MoveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 31}
}
func (m *CPPBattle_MoveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MoveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MoveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MoveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MoveInfo.Merge(m, src)
}
func (m *CPPBattle_MoveInfo) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MoveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MoveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MoveInfo proto.InternalMessageInfo

func (*CPPBattle_MoveInfo) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MoveInfo"
}

type CPPBattle_MoveInfo1 struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CPPBattle_MoveInfo1) Reset()      { *m = CPPBattle_MoveInfo1{} }
func (*CPPBattle_MoveInfo1) ProtoMessage() {}
func (*CPPBattle_MoveInfo1) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 32}
}
func (m *CPPBattle_MoveInfo1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MoveInfo1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MoveInfo1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MoveInfo1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MoveInfo1.Merge(m, src)
}
func (m *CPPBattle_MoveInfo1) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MoveInfo1) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MoveInfo1.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MoveInfo1 proto.InternalMessageInfo

func (m *CPPBattle_MoveInfo1) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (*CPPBattle_MoveInfo1) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MoveInfo1"
}

type CPPBattle_MovePath struct {
	ObjId string            `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Paths []*CPPBattle_Vec2 `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	Pos   *CPPBattle_Vec2   `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *CPPBattle_MovePath) Reset()      { *m = CPPBattle_MovePath{} }
func (*CPPBattle_MovePath) ProtoMessage() {}
func (*CPPBattle_MovePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 33}
}
func (m *CPPBattle_MovePath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MovePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MovePath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MovePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MovePath.Merge(m, src)
}
func (m *CPPBattle_MovePath) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MovePath) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MovePath.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MovePath proto.InternalMessageInfo

func (m *CPPBattle_MovePath) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_MovePath) GetPaths() []*CPPBattle_Vec2 {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *CPPBattle_MovePath) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (*CPPBattle_MovePath) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MovePath"
}

type CPPBattle_MovePush struct {
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	// 当前位置
	Pos *CPPBattle_Vec2 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	// 当前朝向
	Towards *CPPBattle_Vec2 `protobuf:"bytes,3,opt,name=towards,proto3" json:"towards,omitempty"`
	// 1 开始移动 2移动中，3 停止，4 技能移动
	Type int64 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	// 速度
	Speed       float32 `protobuf:"fixed32,5,opt,name=speed,proto3" json:"speed,omitempty"`
	MoveTime    float32 `protobuf:"fixed32,6,opt,name=move_time,json=moveTime,proto3" json:"move_time,omitempty"`
	BuffSpeed   float32 `protobuf:"fixed32,7,opt,name=buff_speed,json=buffSpeed,proto3" json:"buff_speed,omitempty"`
	BattleId    int64   `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	CustomSpeed float32 `protobuf:"fixed32,101,opt,name=custom_speed,json=customSpeed,proto3" json:"custom_speed,omitempty"`
	CustomTime  float32 `protobuf:"fixed32,102,opt,name=custom_time,json=customTime,proto3" json:"custom_time,omitempty"`
}

func (m *CPPBattle_MovePush) Reset()      { *m = CPPBattle_MovePush{} }
func (*CPPBattle_MovePush) ProtoMessage() {}
func (*CPPBattle_MovePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 34}
}
func (m *CPPBattle_MovePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MovePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MovePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MovePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MovePush.Merge(m, src)
}
func (m *CPPBattle_MovePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MovePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MovePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MovePush proto.InternalMessageInfo

func (m *CPPBattle_MovePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_MovePush) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_MovePush) GetTowards() *CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *CPPBattle_MovePush) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CPPBattle_MovePush) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *CPPBattle_MovePush) GetMoveTime() float32 {
	if m != nil {
		return m.MoveTime
	}
	return 0
}

func (m *CPPBattle_MovePush) GetBuffSpeed() float32 {
	if m != nil {
		return m.BuffSpeed
	}
	return 0
}

func (m *CPPBattle_MovePush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *CPPBattle_MovePush) GetCustomSpeed() float32 {
	if m != nil {
		return m.CustomSpeed
	}
	return 0
}

func (m *CPPBattle_MovePush) GetCustomTime() float32 {
	if m != nil {
		return m.CustomTime
	}
	return 0
}

func (*CPPBattle_MovePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MovePush"
}

type CPPBattle_ControlMovePush struct {
	ObjId    string                    `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Flag     int64                     `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
	Ps       []*CPPBattle_ControlPoint `protobuf:"bytes,3,rep,name=ps,proto3" json:"ps,omitempty"`
	BattleId int64                     `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_ControlMovePush) Reset()      { *m = CPPBattle_ControlMovePush{} }
func (*CPPBattle_ControlMovePush) ProtoMessage() {}
func (*CPPBattle_ControlMovePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 35}
}
func (m *CPPBattle_ControlMovePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_ControlMovePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_ControlMovePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_ControlMovePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_ControlMovePush.Merge(m, src)
}
func (m *CPPBattle_ControlMovePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_ControlMovePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_ControlMovePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_ControlMovePush proto.InternalMessageInfo

func (m *CPPBattle_ControlMovePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_ControlMovePush) GetFlag() int64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *CPPBattle_ControlMovePush) GetPs() []*CPPBattle_ControlPoint {
	if m != nil {
		return m.Ps
	}
	return nil
}

func (m *CPPBattle_ControlMovePush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_ControlMovePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.ControlMovePush"
}

type CPPBattle_ControlPoint struct {
	Pos     *CPPBattle_Vec2 `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	Towards *CPPBattle_Vec2 `protobuf:"bytes,2,opt,name=towards,proto3" json:"towards,omitempty"`
	Time    float32         `protobuf:"fixed32,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *CPPBattle_ControlPoint) Reset()      { *m = CPPBattle_ControlPoint{} }
func (*CPPBattle_ControlPoint) ProtoMessage() {}
func (*CPPBattle_ControlPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 36}
}
func (m *CPPBattle_ControlPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_ControlPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_ControlPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_ControlPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_ControlPoint.Merge(m, src)
}
func (m *CPPBattle_ControlPoint) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_ControlPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_ControlPoint.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_ControlPoint proto.InternalMessageInfo

func (m *CPPBattle_ControlPoint) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_ControlPoint) GetTowards() *CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *CPPBattle_ControlPoint) GetTime() float32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (*CPPBattle_ControlPoint) XXX_MessageName() string {
	return "cppbattle.CPPBattle.ControlPoint"
}

type CPPBattle_LeaveAreaRequest struct {
}

func (m *CPPBattle_LeaveAreaRequest) Reset()      { *m = CPPBattle_LeaveAreaRequest{} }
func (*CPPBattle_LeaveAreaRequest) ProtoMessage() {}
func (*CPPBattle_LeaveAreaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 37}
}
func (m *CPPBattle_LeaveAreaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_LeaveAreaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_LeaveAreaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_LeaveAreaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_LeaveAreaRequest.Merge(m, src)
}
func (m *CPPBattle_LeaveAreaRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_LeaveAreaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_LeaveAreaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_LeaveAreaRequest proto.InternalMessageInfo

func (*CPPBattle_LeaveAreaRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.LeaveAreaRequest"
}

type CPPBattle_LeaveAreaResponse struct {
}

func (m *CPPBattle_LeaveAreaResponse) Reset()      { *m = CPPBattle_LeaveAreaResponse{} }
func (*CPPBattle_LeaveAreaResponse) ProtoMessage() {}
func (*CPPBattle_LeaveAreaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 38}
}
func (m *CPPBattle_LeaveAreaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_LeaveAreaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_LeaveAreaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_LeaveAreaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_LeaveAreaResponse.Merge(m, src)
}
func (m *CPPBattle_LeaveAreaResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_LeaveAreaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_LeaveAreaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_LeaveAreaResponse proto.InternalMessageInfo

func (*CPPBattle_LeaveAreaResponse) XXX_MessageName() string {
	return "cppbattle.CPPBattle.LeaveAreaResponse"
}

type CPPBattle_ExitBattle struct {
}

func (m *CPPBattle_ExitBattle) Reset()      { *m = CPPBattle_ExitBattle{} }
func (*CPPBattle_ExitBattle) ProtoMessage() {}
func (*CPPBattle_ExitBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 39}
}
func (m *CPPBattle_ExitBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_ExitBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_ExitBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_ExitBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_ExitBattle.Merge(m, src)
}
func (m *CPPBattle_ExitBattle) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_ExitBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_ExitBattle.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_ExitBattle proto.InternalMessageInfo

func (*CPPBattle_ExitBattle) XXX_MessageName() string {
	return "cppbattle.CPPBattle.ExitBattle"
}

type CPPBattle_StopMovePush struct {
	ObjId    string          `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Pos      *CPPBattle_Vec2 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Towards  *CPPBattle_Vec2 `protobuf:"bytes,3,opt,name=towards,proto3" json:"towards,omitempty"`
	BattleId int64           `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_StopMovePush) Reset()      { *m = CPPBattle_StopMovePush{} }
func (*CPPBattle_StopMovePush) ProtoMessage() {}
func (*CPPBattle_StopMovePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 40}
}
func (m *CPPBattle_StopMovePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_StopMovePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_StopMovePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_StopMovePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_StopMovePush.Merge(m, src)
}
func (m *CPPBattle_StopMovePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_StopMovePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_StopMovePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_StopMovePush proto.InternalMessageInfo

func (m *CPPBattle_StopMovePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_StopMovePush) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_StopMovePush) GetTowards() *CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (m *CPPBattle_StopMovePush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_StopMovePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.StopMovePush"
}

// 获取临时背包信息
type CPPBattle_GetTempBagRequest struct {
}

func (m *CPPBattle_GetTempBagRequest) Reset()      { *m = CPPBattle_GetTempBagRequest{} }
func (*CPPBattle_GetTempBagRequest) ProtoMessage() {}
func (*CPPBattle_GetTempBagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 41}
}
func (m *CPPBattle_GetTempBagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_GetTempBagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_GetTempBagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_GetTempBagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_GetTempBagRequest.Merge(m, src)
}
func (m *CPPBattle_GetTempBagRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_GetTempBagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_GetTempBagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_GetTempBagRequest proto.InternalMessageInfo

func (*CPPBattle_GetTempBagRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.GetTempBagRequest"
}

type CPPBattle_GetTempBagResponse struct {
	Bag *models.TempBag `protobuf:"bytes,1,opt,name=bag,proto3" json:"bag,omitempty"`
}

func (m *CPPBattle_GetTempBagResponse) Reset()      { *m = CPPBattle_GetTempBagResponse{} }
func (*CPPBattle_GetTempBagResponse) ProtoMessage() {}
func (*CPPBattle_GetTempBagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 42}
}
func (m *CPPBattle_GetTempBagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_GetTempBagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_GetTempBagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_GetTempBagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_GetTempBagResponse.Merge(m, src)
}
func (m *CPPBattle_GetTempBagResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_GetTempBagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_GetTempBagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_GetTempBagResponse proto.InternalMessageInfo

func (m *CPPBattle_GetTempBagResponse) GetBag() *models.TempBag {
	if m != nil {
		return m.Bag
	}
	return nil
}

func (*CPPBattle_GetTempBagResponse) XXX_MessageName() string {
	return "cppbattle.CPPBattle.GetTempBagResponse"
}

// 领取临时背包收益
type CPPBattle_DrawTempBagRequest struct {
}

func (m *CPPBattle_DrawTempBagRequest) Reset()      { *m = CPPBattle_DrawTempBagRequest{} }
func (*CPPBattle_DrawTempBagRequest) ProtoMessage() {}
func (*CPPBattle_DrawTempBagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 43}
}
func (m *CPPBattle_DrawTempBagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_DrawTempBagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_DrawTempBagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_DrawTempBagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_DrawTempBagRequest.Merge(m, src)
}
func (m *CPPBattle_DrawTempBagRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_DrawTempBagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_DrawTempBagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_DrawTempBagRequest proto.InternalMessageInfo

func (*CPPBattle_DrawTempBagRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.DrawTempBagRequest"
}

type CPPBattle_DrawTempBagResponse struct {
	Items map[int64]int64 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *CPPBattle_DrawTempBagResponse) Reset()      { *m = CPPBattle_DrawTempBagResponse{} }
func (*CPPBattle_DrawTempBagResponse) ProtoMessage() {}
func (*CPPBattle_DrawTempBagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 44}
}
func (m *CPPBattle_DrawTempBagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_DrawTempBagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_DrawTempBagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_DrawTempBagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_DrawTempBagResponse.Merge(m, src)
}
func (m *CPPBattle_DrawTempBagResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_DrawTempBagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_DrawTempBagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_DrawTempBagResponse proto.InternalMessageInfo

func (m *CPPBattle_DrawTempBagResponse) GetItems() map[int64]int64 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*CPPBattle_DrawTempBagResponse) XXX_MessageName() string {
	return "cppbattle.CPPBattle.DrawTempBagResponse"
}

//手动吃药
type CPPBattle_TakeMedicineRequest struct {
	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CdTime int64 `protobuf:"varint,2,opt,name=cd_time,json=cdTime,proto3" json:"cd_time,omitempty"`
	Flag   int64 `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *CPPBattle_TakeMedicineRequest) Reset()      { *m = CPPBattle_TakeMedicineRequest{} }
func (*CPPBattle_TakeMedicineRequest) ProtoMessage() {}
func (*CPPBattle_TakeMedicineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 45}
}
func (m *CPPBattle_TakeMedicineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_TakeMedicineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_TakeMedicineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_TakeMedicineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_TakeMedicineRequest.Merge(m, src)
}
func (m *CPPBattle_TakeMedicineRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_TakeMedicineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_TakeMedicineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_TakeMedicineRequest proto.InternalMessageInfo

func (m *CPPBattle_TakeMedicineRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CPPBattle_TakeMedicineRequest) GetCdTime() int64 {
	if m != nil {
		return m.CdTime
	}
	return 0
}

func (m *CPPBattle_TakeMedicineRequest) GetFlag() int64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (*CPPBattle_TakeMedicineRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.TakeMedicineRequest"
}

type CPPBattle_TakeMedicineResponse struct {
}

func (m *CPPBattle_TakeMedicineResponse) Reset()      { *m = CPPBattle_TakeMedicineResponse{} }
func (*CPPBattle_TakeMedicineResponse) ProtoMessage() {}
func (*CPPBattle_TakeMedicineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 46}
}
func (m *CPPBattle_TakeMedicineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_TakeMedicineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_TakeMedicineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_TakeMedicineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_TakeMedicineResponse.Merge(m, src)
}
func (m *CPPBattle_TakeMedicineResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_TakeMedicineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_TakeMedicineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_TakeMedicineResponse proto.InternalMessageInfo

func (*CPPBattle_TakeMedicineResponse) XXX_MessageName() string {
	return "cppbattle.CPPBattle.TakeMedicineResponse"
}

// 关闭和开启吃药
type CPPBattle_MedicineItemsPush struct {
	Medicine map[int64]*models.MedicineInfo `protobuf:"bytes,1,rep,name=medicine,proto3" json:"medicine,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CPPBattle_MedicineItemsPush) Reset()      { *m = CPPBattle_MedicineItemsPush{} }
func (*CPPBattle_MedicineItemsPush) ProtoMessage() {}
func (*CPPBattle_MedicineItemsPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 47}
}
func (m *CPPBattle_MedicineItemsPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MedicineItemsPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MedicineItemsPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MedicineItemsPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MedicineItemsPush.Merge(m, src)
}
func (m *CPPBattle_MedicineItemsPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MedicineItemsPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MedicineItemsPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MedicineItemsPush proto.InternalMessageInfo

func (m *CPPBattle_MedicineItemsPush) GetMedicine() map[int64]*models.MedicineInfo {
	if m != nil {
		return m.Medicine
	}
	return nil
}

func (*CPPBattle_MedicineItemsPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MedicineItemsPush"
}

// 销毁空气墙推送
type CPPBattle_DestroyAirWallPush struct {
	AirWallId int64 `protobuf:"varint,1,opt,name=air_wall_id,json=airWallId,proto3" json:"air_wall_id,omitempty"`
	BattleId  int64 `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_DestroyAirWallPush) Reset()      { *m = CPPBattle_DestroyAirWallPush{} }
func (*CPPBattle_DestroyAirWallPush) ProtoMessage() {}
func (*CPPBattle_DestroyAirWallPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 48}
}
func (m *CPPBattle_DestroyAirWallPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_DestroyAirWallPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_DestroyAirWallPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_DestroyAirWallPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_DestroyAirWallPush.Merge(m, src)
}
func (m *CPPBattle_DestroyAirWallPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_DestroyAirWallPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_DestroyAirWallPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_DestroyAirWallPush proto.InternalMessageInfo

func (m *CPPBattle_DestroyAirWallPush) GetAirWallId() int64 {
	if m != nil {
		return m.AirWallId
	}
	return 0
}

func (m *CPPBattle_DestroyAirWallPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_DestroyAirWallPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.DestroyAirWallPush"
}

// 当前空气墙推送
type CPPBattle_CurAirWallPush struct {
	AirWalls map[int64]int64 `protobuf:"bytes,1,rep,name=air_walls,json=airWalls,proto3" json:"air_walls,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BattleId int64           `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_CurAirWallPush) Reset()      { *m = CPPBattle_CurAirWallPush{} }
func (*CPPBattle_CurAirWallPush) ProtoMessage() {}
func (*CPPBattle_CurAirWallPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 49}
}
func (m *CPPBattle_CurAirWallPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_CurAirWallPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_CurAirWallPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_CurAirWallPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_CurAirWallPush.Merge(m, src)
}
func (m *CPPBattle_CurAirWallPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_CurAirWallPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_CurAirWallPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_CurAirWallPush proto.InternalMessageInfo

func (m *CPPBattle_CurAirWallPush) GetAirWalls() map[int64]int64 {
	if m != nil {
		return m.AirWalls
	}
	return nil
}

func (m *CPPBattle_CurAirWallPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_CurAirWallPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.CurAirWallPush"
}

// 副本伤害统计推送
type CPPBattle_DungeonPlayerDamageStatPush struct {
	DamageStat map[string]int64 `protobuf:"bytes,1,rep,name=damage_stat,json=damageStat,proto3" json:"damage_stat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BattleId   int64            `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_DungeonPlayerDamageStatPush) Reset()      { *m = CPPBattle_DungeonPlayerDamageStatPush{} }
func (*CPPBattle_DungeonPlayerDamageStatPush) ProtoMessage() {}
func (*CPPBattle_DungeonPlayerDamageStatPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 50}
}
func (m *CPPBattle_DungeonPlayerDamageStatPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_DungeonPlayerDamageStatPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_DungeonPlayerDamageStatPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_DungeonPlayerDamageStatPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_DungeonPlayerDamageStatPush.Merge(m, src)
}
func (m *CPPBattle_DungeonPlayerDamageStatPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_DungeonPlayerDamageStatPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_DungeonPlayerDamageStatPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_DungeonPlayerDamageStatPush proto.InternalMessageInfo

func (m *CPPBattle_DungeonPlayerDamageStatPush) GetDamageStat() map[string]int64 {
	if m != nil {
		return m.DamageStat
	}
	return nil
}

func (m *CPPBattle_DungeonPlayerDamageStatPush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_DungeonPlayerDamageStatPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.DungeonPlayerDamageStatPush"
}

// 副本当前阶段和条件
type CPPBattle_DungeonCurStagePush struct {
	EndTime    int64           `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Stage      int64           `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Conditions map[int64]int64 `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	KillCounts map[int64]int64 `protobuf:"bytes,4,rep,name=kill_counts,json=killCounts,proto3" json:"kill_counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BattleId   int64           `protobuf:"varint,100,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
}

func (m *CPPBattle_DungeonCurStagePush) Reset()      { *m = CPPBattle_DungeonCurStagePush{} }
func (*CPPBattle_DungeonCurStagePush) ProtoMessage() {}
func (*CPPBattle_DungeonCurStagePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 51}
}
func (m *CPPBattle_DungeonCurStagePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_DungeonCurStagePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_DungeonCurStagePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_DungeonCurStagePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_DungeonCurStagePush.Merge(m, src)
}
func (m *CPPBattle_DungeonCurStagePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_DungeonCurStagePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_DungeonCurStagePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_DungeonCurStagePush proto.InternalMessageInfo

func (m *CPPBattle_DungeonCurStagePush) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *CPPBattle_DungeonCurStagePush) GetStage() int64 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *CPPBattle_DungeonCurStagePush) GetConditions() map[int64]int64 {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *CPPBattle_DungeonCurStagePush) GetKillCounts() map[int64]int64 {
	if m != nil {
		return m.KillCounts
	}
	return nil
}

func (m *CPPBattle_DungeonCurStagePush) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (*CPPBattle_DungeonCurStagePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.DungeonCurStagePush"
}

// 地图同步信息
type CPPBattle_MapSyncNotice struct {
	ServerFrame int64                    `protobuf:"varint,1,opt,name=server_frame,json=serverFrame,proto3" json:"server_frame,omitempty"`
	PlayerList  []*CPPBattle_PlayerPush  `protobuf:"bytes,2,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"`
	MonsterList []*CPPBattle_MonsterPush `protobuf:"bytes,3,rep,name=monster_list,json=monsterList,proto3" json:"monster_list,omitempty"`
	MoveOutList []*CPPBattle_MoveOutPush `protobuf:"bytes,4,rep,name=move_out_list,json=moveOutList,proto3" json:"move_out_list,omitempty"`
	MoveList    []*CPPBattle_MovePush    `protobuf:"bytes,5,rep,name=move_list,json=moveList,proto3" json:"move_list,omitempty"`
}

func (m *CPPBattle_MapSyncNotice) Reset()      { *m = CPPBattle_MapSyncNotice{} }
func (*CPPBattle_MapSyncNotice) ProtoMessage() {}
func (*CPPBattle_MapSyncNotice) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 52}
}
func (m *CPPBattle_MapSyncNotice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MapSyncNotice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MapSyncNotice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MapSyncNotice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MapSyncNotice.Merge(m, src)
}
func (m *CPPBattle_MapSyncNotice) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MapSyncNotice) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MapSyncNotice.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MapSyncNotice proto.InternalMessageInfo

func (m *CPPBattle_MapSyncNotice) GetServerFrame() int64 {
	if m != nil {
		return m.ServerFrame
	}
	return 0
}

func (m *CPPBattle_MapSyncNotice) GetPlayerList() []*CPPBattle_PlayerPush {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *CPPBattle_MapSyncNotice) GetMonsterList() []*CPPBattle_MonsterPush {
	if m != nil {
		return m.MonsterList
	}
	return nil
}

func (m *CPPBattle_MapSyncNotice) GetMoveOutList() []*CPPBattle_MoveOutPush {
	if m != nil {
		return m.MoveOutList
	}
	return nil
}

func (m *CPPBattle_MapSyncNotice) GetMoveList() []*CPPBattle_MovePush {
	if m != nil {
		return m.MoveList
	}
	return nil
}

func (*CPPBattle_MapSyncNotice) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MapSyncNotice"
}

type CPPBattle_TransFormRequest struct {
	ObjId   string          `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Pos     *CPPBattle_Vec2 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Towards *CPPBattle_Vec2 `protobuf:"bytes,3,opt,name=towards,proto3" json:"towards,omitempty"`
}

func (m *CPPBattle_TransFormRequest) Reset()      { *m = CPPBattle_TransFormRequest{} }
func (*CPPBattle_TransFormRequest) ProtoMessage() {}
func (*CPPBattle_TransFormRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 53}
}
func (m *CPPBattle_TransFormRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_TransFormRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_TransFormRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_TransFormRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_TransFormRequest.Merge(m, src)
}
func (m *CPPBattle_TransFormRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_TransFormRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_TransFormRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_TransFormRequest proto.InternalMessageInfo

func (m *CPPBattle_TransFormRequest) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_TransFormRequest) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_TransFormRequest) GetTowards() *CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (*CPPBattle_TransFormRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.TransFormRequest"
}

type CPPBattle_TransFormNotice struct {
	ObjId   string          `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Pos     *CPPBattle_Vec2 `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Towards *CPPBattle_Vec2 `protobuf:"bytes,3,opt,name=towards,proto3" json:"towards,omitempty"`
}

func (m *CPPBattle_TransFormNotice) Reset()      { *m = CPPBattle_TransFormNotice{} }
func (*CPPBattle_TransFormNotice) ProtoMessage() {}
func (*CPPBattle_TransFormNotice) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 54}
}
func (m *CPPBattle_TransFormNotice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_TransFormNotice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_TransFormNotice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_TransFormNotice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_TransFormNotice.Merge(m, src)
}
func (m *CPPBattle_TransFormNotice) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_TransFormNotice) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_TransFormNotice.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_TransFormNotice proto.InternalMessageInfo

func (m *CPPBattle_TransFormNotice) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_TransFormNotice) GetPos() *CPPBattle_Vec2 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *CPPBattle_TransFormNotice) GetTowards() *CPPBattle_Vec2 {
	if m != nil {
		return m.Towards
	}
	return nil
}

func (*CPPBattle_TransFormNotice) XXX_MessageName() string {
	return "cppbattle.CPPBattle.TransFormNotice"
}

type CPPBattle_HeroUpdate struct {
	// hero表配置id
	ConfigId int64 `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// hero属性(hp mp 等)
	Attr             map[int64]int64             `protobuf:"bytes,2,rep,name=attr,proto3" json:"attr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Equip            map[int64]int64             `protobuf:"bytes,3,rep,name=equip,proto3" json:"equip,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SkillIds         []*models.HeroSkillAndStone `protobuf:"bytes,4,rep,name=skill_ids,json=skillIds,proto3" json:"skill_ids,omitempty"`
	IsSkillChange    bool                        `protobuf:"varint,5,opt,name=is_skill_change,json=isSkillChange,proto3" json:"is_skill_change,omitempty"`
	Buff             []int64                     `protobuf:"varint,6,rep,packed,name=buff,proto3" json:"buff,omitempty"`
	TalentBuff       []int64                     `protobuf:"varint,7,rep,packed,name=talent_buff,json=talentBuff,proto3" json:"talent_buff,omitempty"`
	EquipLightEffect map[int64]int64             `protobuf:"bytes,8,rep,name=equip_light_effect,json=equipLightEffect,proto3" json:"equip_light_effect,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Fashion          int64                       `protobuf:"varint,9,opt,name=fashion,proto3" json:"fashion,omitempty"`
}

func (m *CPPBattle_HeroUpdate) Reset()      { *m = CPPBattle_HeroUpdate{} }
func (*CPPBattle_HeroUpdate) ProtoMessage() {}
func (*CPPBattle_HeroUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 55}
}
func (m *CPPBattle_HeroUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_HeroUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_HeroUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_HeroUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_HeroUpdate.Merge(m, src)
}
func (m *CPPBattle_HeroUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_HeroUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_HeroUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_HeroUpdate proto.InternalMessageInfo

func (m *CPPBattle_HeroUpdate) GetConfigId() int64 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *CPPBattle_HeroUpdate) GetAttr() map[int64]int64 {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *CPPBattle_HeroUpdate) GetEquip() map[int64]int64 {
	if m != nil {
		return m.Equip
	}
	return nil
}

func (m *CPPBattle_HeroUpdate) GetSkillIds() []*models.HeroSkillAndStone {
	if m != nil {
		return m.SkillIds
	}
	return nil
}

func (m *CPPBattle_HeroUpdate) GetIsSkillChange() bool {
	if m != nil {
		return m.IsSkillChange
	}
	return false
}

func (m *CPPBattle_HeroUpdate) GetBuff() []int64 {
	if m != nil {
		return m.Buff
	}
	return nil
}

func (m *CPPBattle_HeroUpdate) GetTalentBuff() []int64 {
	if m != nil {
		return m.TalentBuff
	}
	return nil
}

func (m *CPPBattle_HeroUpdate) GetEquipLightEffect() map[int64]int64 {
	if m != nil {
		return m.EquipLightEffect
	}
	return nil
}

func (m *CPPBattle_HeroUpdate) GetFashion() int64 {
	if m != nil {
		return m.Fashion
	}
	return 0
}

func (*CPPBattle_HeroUpdate) XXX_MessageName() string {
	return "cppbattle.CPPBattle.HeroUpdate"
}

type CPPBattle_CPPChangeFormationRequest struct {
	Role       *models.Role            `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Heroes     []*models.HeroForBattle `protobuf:"bytes,2,rep,name=heroes,proto3" json:"heroes,omitempty"`
	ChangeType int64                   `protobuf:"varint,3,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
}

func (m *CPPBattle_CPPChangeFormationRequest) Reset()      { *m = CPPBattle_CPPChangeFormationRequest{} }
func (*CPPBattle_CPPChangeFormationRequest) ProtoMessage() {}
func (*CPPBattle_CPPChangeFormationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 56}
}
func (m *CPPBattle_CPPChangeFormationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_CPPChangeFormationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_CPPChangeFormationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_CPPChangeFormationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_CPPChangeFormationRequest.Merge(m, src)
}
func (m *CPPBattle_CPPChangeFormationRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_CPPChangeFormationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_CPPChangeFormationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_CPPChangeFormationRequest proto.InternalMessageInfo

func (m *CPPBattle_CPPChangeFormationRequest) GetRole() *models.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *CPPBattle_CPPChangeFormationRequest) GetHeroes() []*models.HeroForBattle {
	if m != nil {
		return m.Heroes
	}
	return nil
}

func (m *CPPBattle_CPPChangeFormationRequest) GetChangeType() int64 {
	if m != nil {
		return m.ChangeType
	}
	return 0
}

func (*CPPBattle_CPPChangeFormationRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.CPPChangeFormationRequest"
}

type CPPBattle_CPPChangeFormationResponse struct {
	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CPPBattle_CPPChangeFormationResponse) Reset()      { *m = CPPBattle_CPPChangeFormationResponse{} }
func (*CPPBattle_CPPChangeFormationResponse) ProtoMessage() {}
func (*CPPBattle_CPPChangeFormationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 57}
}
func (m *CPPBattle_CPPChangeFormationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_CPPChangeFormationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_CPPChangeFormationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_CPPChangeFormationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_CPPChangeFormationResponse.Merge(m, src)
}
func (m *CPPBattle_CPPChangeFormationResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_CPPChangeFormationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_CPPChangeFormationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_CPPChangeFormationResponse proto.InternalMessageInfo

func (m *CPPBattle_CPPChangeFormationResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (*CPPBattle_CPPChangeFormationResponse) XXX_MessageName() string {
	return "cppbattle.CPPBattle.CPPChangeFormationResponse"
}

type CPPBattle_GMAddBuffPush struct {
	BuffId int64 `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
}

func (m *CPPBattle_GMAddBuffPush) Reset()      { *m = CPPBattle_GMAddBuffPush{} }
func (*CPPBattle_GMAddBuffPush) ProtoMessage() {}
func (*CPPBattle_GMAddBuffPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 58}
}
func (m *CPPBattle_GMAddBuffPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_GMAddBuffPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_GMAddBuffPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_GMAddBuffPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_GMAddBuffPush.Merge(m, src)
}
func (m *CPPBattle_GMAddBuffPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_GMAddBuffPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_GMAddBuffPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_GMAddBuffPush proto.InternalMessageInfo

func (m *CPPBattle_GMAddBuffPush) GetBuffId() int64 {
	if m != nil {
		return m.BuffId
	}
	return 0
}

func (*CPPBattle_GMAddBuffPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.GMAddBuffPush"
}

// 屏蔽玩家操作
type CPPBattle_BlockPlayerPush struct {
}

func (m *CPPBattle_BlockPlayerPush) Reset()      { *m = CPPBattle_BlockPlayerPush{} }
func (*CPPBattle_BlockPlayerPush) ProtoMessage() {}
func (*CPPBattle_BlockPlayerPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 59}
}
func (m *CPPBattle_BlockPlayerPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_BlockPlayerPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_BlockPlayerPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_BlockPlayerPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_BlockPlayerPush.Merge(m, src)
}
func (m *CPPBattle_BlockPlayerPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_BlockPlayerPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_BlockPlayerPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_BlockPlayerPush proto.InternalMessageInfo

func (*CPPBattle_BlockPlayerPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.BlockPlayerPush"
}

// 取消屏蔽玩家操作
type CPPBattle_UnblockPlayerPush struct {
}

func (m *CPPBattle_UnblockPlayerPush) Reset()      { *m = CPPBattle_UnblockPlayerPush{} }
func (*CPPBattle_UnblockPlayerPush) ProtoMessage() {}
func (*CPPBattle_UnblockPlayerPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 60}
}
func (m *CPPBattle_UnblockPlayerPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_UnblockPlayerPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_UnblockPlayerPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_UnblockPlayerPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_UnblockPlayerPush.Merge(m, src)
}
func (m *CPPBattle_UnblockPlayerPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_UnblockPlayerPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_UnblockPlayerPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_UnblockPlayerPush proto.InternalMessageInfo

func (*CPPBattle_UnblockPlayerPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.UnblockPlayerPush"
}

// roguelike 副本奖励
type CPPBattle_RoguelikeRewardPush struct {
	OuterReward      int64   `protobuf:"varint,1,opt,name=outer_reward,json=outerReward,proto3" json:"outer_reward,omitempty"`
	OptionalArtifact []int64 `protobuf:"varint,2,rep,packed,name=optional_artifact,json=optionalArtifact,proto3" json:"optional_artifact,omitempty"`
}

func (m *CPPBattle_RoguelikeRewardPush) Reset()      { *m = CPPBattle_RoguelikeRewardPush{} }
func (*CPPBattle_RoguelikeRewardPush) ProtoMessage() {}
func (*CPPBattle_RoguelikeRewardPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 61}
}
func (m *CPPBattle_RoguelikeRewardPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_RoguelikeRewardPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_RoguelikeRewardPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_RoguelikeRewardPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_RoguelikeRewardPush.Merge(m, src)
}
func (m *CPPBattle_RoguelikeRewardPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_RoguelikeRewardPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_RoguelikeRewardPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_RoguelikeRewardPush proto.InternalMessageInfo

func (m *CPPBattle_RoguelikeRewardPush) GetOuterReward() int64 {
	if m != nil {
		return m.OuterReward
	}
	return 0
}

func (m *CPPBattle_RoguelikeRewardPush) GetOptionalArtifact() []int64 {
	if m != nil {
		return m.OptionalArtifact
	}
	return nil
}

func (*CPPBattle_RoguelikeRewardPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.RoguelikeRewardPush"
}

// roguelike 选择道具
type CPPBattle_RoguelikeSelectArtifactRequest struct {
	Idx int64 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
}

func (m *CPPBattle_RoguelikeSelectArtifactRequest) Reset() {
	*m = CPPBattle_RoguelikeSelectArtifactRequest{}
}
func (*CPPBattle_RoguelikeSelectArtifactRequest) ProtoMessage() {}
func (*CPPBattle_RoguelikeSelectArtifactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 62}
}
func (m *CPPBattle_RoguelikeSelectArtifactRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_RoguelikeSelectArtifactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_RoguelikeSelectArtifactRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_RoguelikeSelectArtifactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_RoguelikeSelectArtifactRequest.Merge(m, src)
}
func (m *CPPBattle_RoguelikeSelectArtifactRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_RoguelikeSelectArtifactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_RoguelikeSelectArtifactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_RoguelikeSelectArtifactRequest proto.InternalMessageInfo

func (m *CPPBattle_RoguelikeSelectArtifactRequest) GetIdx() int64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (*CPPBattle_RoguelikeSelectArtifactRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.RoguelikeSelectArtifactRequest"
}

type CPPBattle_RoguelikeSelectArtifactResponse struct {
	ArtifactId int64 `protobuf:"varint,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
}

func (m *CPPBattle_RoguelikeSelectArtifactResponse) Reset() {
	*m = CPPBattle_RoguelikeSelectArtifactResponse{}
}
func (*CPPBattle_RoguelikeSelectArtifactResponse) ProtoMessage() {}
func (*CPPBattle_RoguelikeSelectArtifactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 63}
}
func (m *CPPBattle_RoguelikeSelectArtifactResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_RoguelikeSelectArtifactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_RoguelikeSelectArtifactResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_RoguelikeSelectArtifactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_RoguelikeSelectArtifactResponse.Merge(m, src)
}
func (m *CPPBattle_RoguelikeSelectArtifactResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_RoguelikeSelectArtifactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_RoguelikeSelectArtifactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_RoguelikeSelectArtifactResponse proto.InternalMessageInfo

func (m *CPPBattle_RoguelikeSelectArtifactResponse) GetArtifactId() int64 {
	if m != nil {
		return m.ArtifactId
	}
	return 0
}

func (*CPPBattle_RoguelikeSelectArtifactResponse) XXX_MessageName() string {
	return "cppbattle.CPPBattle.RoguelikeSelectArtifactResponse"
}

type CPPBattle_MonsterBossKillPush struct {
	BossId          string         `protobuf:"bytes,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	BossPos         *models.Vec2   `protobuf:"bytes,2,opt,name=boss_pos,json=bossPos,proto3" json:"boss_pos,omitempty"`
	MonsterConfigId int64          `protobuf:"varint,3,opt,name=monster_config_id,json=monsterConfigId,proto3" json:"monster_config_id,omitempty"`
	KillerId        string         `protobuf:"bytes,4,opt,name=killer_id,json=killerId,proto3" json:"killer_id,omitempty"`
	Items           []*models.Item `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *CPPBattle_MonsterBossKillPush) Reset()      { *m = CPPBattle_MonsterBossKillPush{} }
func (*CPPBattle_MonsterBossKillPush) ProtoMessage() {}
func (*CPPBattle_MonsterBossKillPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 64}
}
func (m *CPPBattle_MonsterBossKillPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MonsterBossKillPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MonsterBossKillPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MonsterBossKillPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MonsterBossKillPush.Merge(m, src)
}
func (m *CPPBattle_MonsterBossKillPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MonsterBossKillPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MonsterBossKillPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MonsterBossKillPush proto.InternalMessageInfo

func (m *CPPBattle_MonsterBossKillPush) GetBossId() string {
	if m != nil {
		return m.BossId
	}
	return ""
}

func (m *CPPBattle_MonsterBossKillPush) GetBossPos() *models.Vec2 {
	if m != nil {
		return m.BossPos
	}
	return nil
}

func (m *CPPBattle_MonsterBossKillPush) GetMonsterConfigId() int64 {
	if m != nil {
		return m.MonsterConfigId
	}
	return 0
}

func (m *CPPBattle_MonsterBossKillPush) GetKillerId() string {
	if m != nil {
		return m.KillerId
	}
	return ""
}

func (m *CPPBattle_MonsterBossKillPush) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*CPPBattle_MonsterBossKillPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MonsterBossKillPush"
}

type CPPBattle_MonsterJoinKillPush struct {
	HasKill   bool           `protobuf:"varint,1,opt,name=has_kill,json=hasKill,proto3" json:"has_kill,omitempty"`
	HasJoin   bool           `protobuf:"varint,2,opt,name=has_join,json=hasJoin,proto3" json:"has_join,omitempty"`
	JoinItems []*models.Item `protobuf:"bytes,3,rep,name=join_items,json=joinItems,proto3" json:"join_items,omitempty"`
	DropPos   *models.Vec2   `protobuf:"bytes,4,opt,name=drop_pos,json=dropPos,proto3" json:"drop_pos,omitempty"`
}

func (m *CPPBattle_MonsterJoinKillPush) Reset()      { *m = CPPBattle_MonsterJoinKillPush{} }
func (*CPPBattle_MonsterJoinKillPush) ProtoMessage() {}
func (*CPPBattle_MonsterJoinKillPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 65}
}
func (m *CPPBattle_MonsterJoinKillPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_MonsterJoinKillPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_MonsterJoinKillPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_MonsterJoinKillPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_MonsterJoinKillPush.Merge(m, src)
}
func (m *CPPBattle_MonsterJoinKillPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_MonsterJoinKillPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_MonsterJoinKillPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_MonsterJoinKillPush proto.InternalMessageInfo

func (m *CPPBattle_MonsterJoinKillPush) GetHasKill() bool {
	if m != nil {
		return m.HasKill
	}
	return false
}

func (m *CPPBattle_MonsterJoinKillPush) GetHasJoin() bool {
	if m != nil {
		return m.HasJoin
	}
	return false
}

func (m *CPPBattle_MonsterJoinKillPush) GetJoinItems() []*models.Item {
	if m != nil {
		return m.JoinItems
	}
	return nil
}

func (m *CPPBattle_MonsterJoinKillPush) GetDropPos() *models.Vec2 {
	if m != nil {
		return m.DropPos
	}
	return nil
}

func (*CPPBattle_MonsterJoinKillPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.MonsterJoinKillPush"
}

type CPPBattle_DropItemPush struct {
	DropPos *models.Vec2   `protobuf:"bytes,1,opt,name=drop_pos,json=dropPos,proto3" json:"drop_pos,omitempty"`
	Items   []*models.Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *CPPBattle_DropItemPush) Reset()      { *m = CPPBattle_DropItemPush{} }
func (*CPPBattle_DropItemPush) ProtoMessage() {}
func (*CPPBattle_DropItemPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 66}
}
func (m *CPPBattle_DropItemPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_DropItemPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_DropItemPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_DropItemPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_DropItemPush.Merge(m, src)
}
func (m *CPPBattle_DropItemPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_DropItemPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_DropItemPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_DropItemPush proto.InternalMessageInfo

func (m *CPPBattle_DropItemPush) GetDropPos() *models.Vec2 {
	if m != nil {
		return m.DropPos
	}
	return nil
}

func (m *CPPBattle_DropItemPush) GetItems() []*models.Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (*CPPBattle_DropItemPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.DropItemPush"
}

type CPPBattle_UserTitleChangePush struct {
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Title int64  `protobuf:"varint,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *CPPBattle_UserTitleChangePush) Reset()      { *m = CPPBattle_UserTitleChangePush{} }
func (*CPPBattle_UserTitleChangePush) ProtoMessage() {}
func (*CPPBattle_UserTitleChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 67}
}
func (m *CPPBattle_UserTitleChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_UserTitleChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_UserTitleChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_UserTitleChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_UserTitleChangePush.Merge(m, src)
}
func (m *CPPBattle_UserTitleChangePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_UserTitleChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_UserTitleChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_UserTitleChangePush proto.InternalMessageInfo

func (m *CPPBattle_UserTitleChangePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_UserTitleChangePush) GetTitle() int64 {
	if m != nil {
		return m.Title
	}
	return 0
}

func (*CPPBattle_UserTitleChangePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.UserTitleChangePush"
}

type CPPBattle_UserLevelChangePush struct {
	ObjId string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Level int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *CPPBattle_UserLevelChangePush) Reset()      { *m = CPPBattle_UserLevelChangePush{} }
func (*CPPBattle_UserLevelChangePush) ProtoMessage() {}
func (*CPPBattle_UserLevelChangePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 68}
}
func (m *CPPBattle_UserLevelChangePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_UserLevelChangePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_UserLevelChangePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_UserLevelChangePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_UserLevelChangePush.Merge(m, src)
}
func (m *CPPBattle_UserLevelChangePush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_UserLevelChangePush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_UserLevelChangePush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_UserLevelChangePush proto.InternalMessageInfo

func (m *CPPBattle_UserLevelChangePush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_UserLevelChangePush) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (*CPPBattle_UserLevelChangePush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.UserLevelChangePush"
}

//进入位面副本
type CPPBattle_EnterPlaneDungeonRequest struct {
	Id          int64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Typ         int64                     `protobuf:"varint,2,opt,name=typ,proto3" json:"typ,omitempty"`
	Sbp         *models.SingleBattleParam `protobuf:"bytes,3,opt,name=sbp,proto3" json:"sbp,omitempty"`
	RewardItems map[int64]int64           `protobuf:"bytes,4,rep,name=reward_items,json=rewardItems,proto3" json:"reward_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TreeName    string                    `protobuf:"bytes,5,opt,name=tree_name,json=treeName,proto3" json:"tree_name,omitempty"`
	MapScenceId int64                     `protobuf:"varint,6,opt,name=map_scence_id,json=mapScenceId,proto3" json:"map_scence_id,omitempty"`
	Duration    int64                     `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *CPPBattle_EnterPlaneDungeonRequest) Reset()      { *m = CPPBattle_EnterPlaneDungeonRequest{} }
func (*CPPBattle_EnterPlaneDungeonRequest) ProtoMessage() {}
func (*CPPBattle_EnterPlaneDungeonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 69}
}
func (m *CPPBattle_EnterPlaneDungeonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_EnterPlaneDungeonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_EnterPlaneDungeonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_EnterPlaneDungeonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_EnterPlaneDungeonRequest.Merge(m, src)
}
func (m *CPPBattle_EnterPlaneDungeonRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_EnterPlaneDungeonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_EnterPlaneDungeonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_EnterPlaneDungeonRequest proto.InternalMessageInfo

func (m *CPPBattle_EnterPlaneDungeonRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CPPBattle_EnterPlaneDungeonRequest) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *CPPBattle_EnterPlaneDungeonRequest) GetSbp() *models.SingleBattleParam {
	if m != nil {
		return m.Sbp
	}
	return nil
}

func (m *CPPBattle_EnterPlaneDungeonRequest) GetRewardItems() map[int64]int64 {
	if m != nil {
		return m.RewardItems
	}
	return nil
}

func (m *CPPBattle_EnterPlaneDungeonRequest) GetTreeName() string {
	if m != nil {
		return m.TreeName
	}
	return ""
}

func (m *CPPBattle_EnterPlaneDungeonRequest) GetMapScenceId() int64 {
	if m != nil {
		return m.MapScenceId
	}
	return 0
}

func (m *CPPBattle_EnterPlaneDungeonRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (*CPPBattle_EnterPlaneDungeonRequest) XXX_MessageName() string {
	return "cppbattle.CPPBattle.EnterPlaneDungeonRequest"
}

type CPPBattle_EnterPlaneDungeonResponse struct {
}

func (m *CPPBattle_EnterPlaneDungeonResponse) Reset()      { *m = CPPBattle_EnterPlaneDungeonResponse{} }
func (*CPPBattle_EnterPlaneDungeonResponse) ProtoMessage() {}
func (*CPPBattle_EnterPlaneDungeonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 70}
}
func (m *CPPBattle_EnterPlaneDungeonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_EnterPlaneDungeonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_EnterPlaneDungeonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_EnterPlaneDungeonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_EnterPlaneDungeonResponse.Merge(m, src)
}
func (m *CPPBattle_EnterPlaneDungeonResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_EnterPlaneDungeonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_EnterPlaneDungeonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_EnterPlaneDungeonResponse proto.InternalMessageInfo

func (*CPPBattle_EnterPlaneDungeonResponse) XXX_MessageName() string {
	return "cppbattle.CPPBattle.EnterPlaneDungeonResponse"
}

type CPPBattle_UserAutoSoulSkillPush struct {
	ObjId          string `protobuf:"bytes,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	AutoSouleSkill int64  `protobuf:"varint,2,opt,name=auto_soule_skill,json=autoSouleSkill,proto3" json:"auto_soule_skill,omitempty"`
}

func (m *CPPBattle_UserAutoSoulSkillPush) Reset()      { *m = CPPBattle_UserAutoSoulSkillPush{} }
func (*CPPBattle_UserAutoSoulSkillPush) ProtoMessage() {}
func (*CPPBattle_UserAutoSoulSkillPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{0, 71}
}
func (m *CPPBattle_UserAutoSoulSkillPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPPBattle_UserAutoSoulSkillPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPPBattle_UserAutoSoulSkillPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPPBattle_UserAutoSoulSkillPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPPBattle_UserAutoSoulSkillPush.Merge(m, src)
}
func (m *CPPBattle_UserAutoSoulSkillPush) XXX_Size() int {
	return m.Size()
}
func (m *CPPBattle_UserAutoSoulSkillPush) XXX_DiscardUnknown() {
	xxx_messageInfo_CPPBattle_UserAutoSoulSkillPush.DiscardUnknown(m)
}

var xxx_messageInfo_CPPBattle_UserAutoSoulSkillPush proto.InternalMessageInfo

func (m *CPPBattle_UserAutoSoulSkillPush) GetObjId() string {
	if m != nil {
		return m.ObjId
	}
	return ""
}

func (m *CPPBattle_UserAutoSoulSkillPush) GetAutoSouleSkill() int64 {
	if m != nil {
		return m.AutoSouleSkill
	}
	return 0
}

func (*CPPBattle_UserAutoSoulSkillPush) XXX_MessageName() string {
	return "cppbattle.CPPBattle.UserAutoSoulSkillPush"
}

type MonsterInfo struct {
	MonsterId int64           `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	Pos       *models.Postion `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *MonsterInfo) Reset()      { *m = MonsterInfo{} }
func (*MonsterInfo) ProtoMessage() {}
func (*MonsterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{1}
}
func (m *MonsterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonsterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonsterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonsterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonsterInfo.Merge(m, src)
}
func (m *MonsterInfo) XXX_Size() int {
	return m.Size()
}
func (m *MonsterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MonsterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MonsterInfo proto.InternalMessageInfo

func (m *MonsterInfo) GetMonsterId() int64 {
	if m != nil {
		return m.MonsterId
	}
	return 0
}

func (m *MonsterInfo) GetPos() *models.Postion {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (*MonsterInfo) XXX_MessageName() string {
	return "cppbattle.MonsterInfo"
}

type ConditionInfo struct {
	ConditionType  int32   `protobuf:"varint,1,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	ConditionValue []int32 `protobuf:"varint,2,rep,packed,name=condition_value,json=conditionValue,proto3" json:"condition_value,omitempty"`
}

func (m *ConditionInfo) Reset()      { *m = ConditionInfo{} }
func (*ConditionInfo) ProtoMessage() {}
func (*ConditionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{2}
}
func (m *ConditionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConditionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConditionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConditionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionInfo.Merge(m, src)
}
func (m *ConditionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConditionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionInfo proto.InternalMessageInfo

func (m *ConditionInfo) GetConditionType() int32 {
	if m != nil {
		return m.ConditionType
	}
	return 0
}

func (m *ConditionInfo) GetConditionValue() []int32 {
	if m != nil {
		return m.ConditionValue
	}
	return nil
}

func (*ConditionInfo) XXX_MessageName() string {
	return "cppbattle.ConditionInfo"
}

type SingleBattleMonsterList struct {
	MonsterInfo []*MonsterInfo `protobuf:"bytes,1,rep,name=monster_info,json=monsterInfo,proto3" json:"monster_info,omitempty"`
}

func (m *SingleBattleMonsterList) Reset()      { *m = SingleBattleMonsterList{} }
func (*SingleBattleMonsterList) ProtoMessage() {}
func (*SingleBattleMonsterList) Descriptor() ([]byte, []int) {
	return fileDescriptor_4eb2e94f3e2f3376, []int{3}
}
func (m *SingleBattleMonsterList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleBattleMonsterList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleBattleMonsterList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleBattleMonsterList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleBattleMonsterList.Merge(m, src)
}
func (m *SingleBattleMonsterList) XXX_Size() int {
	return m.Size()
}
func (m *SingleBattleMonsterList) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleBattleMonsterList.DiscardUnknown(m)
}

var xxx_messageInfo_SingleBattleMonsterList proto.InternalMessageInfo

func (m *SingleBattleMonsterList) GetMonsterInfo() []*MonsterInfo {
	if m != nil {
		return m.MonsterInfo
	}
	return nil
}

func (*SingleBattleMonsterList) XXX_MessageName() string {
	return "cppbattle.SingleBattleMonsterList"
}
func init() {
	proto.RegisterEnum("cppbattle.ReviveTyp", ReviveTyp_name, ReviveTyp_value)
	proto.RegisterType((*CPPBattle)(nil), "cppbattle.CPPBattle")
	proto.RegisterType((*CPPBattle_Vec2)(nil), "cppbattle.CPPBattle.Vec2")
	proto.RegisterType((*CPPBattle_Ping)(nil), "cppbattle.CPPBattle.Ping")
	proto.RegisterType((*CPPBattle_Pong)(nil), "cppbattle.CPPBattle.Pong")
	proto.RegisterType((*CPPBattle_EnterBattleRequest)(nil), "cppbattle.CPPBattle.EnterBattleRequest")
	proto.RegisterMapType((map[int64]*models.MedicineInfo)(nil), "cppbattle.CPPBattle.EnterBattleRequest.MedicineEntry")
	proto.RegisterType((*CPPBattle_EnterBattleResponse)(nil), "cppbattle.CPPBattle.EnterBattleResponse")
	proto.RegisterType((*CPPBattle_SyncNicknameChangePush)(nil), "cppbattle.CPPBattle.SyncNicknameChangePush")
	proto.RegisterType((*CPPBattle_CanChangeSceneRequest)(nil), "cppbattle.CPPBattle.CanChangeSceneRequest")
	proto.RegisterType((*CPPBattle_CanChangeSceneResponse)(nil), "cppbattle.CPPBattle.CanChangeSceneResponse")
	proto.RegisterType((*CPPBattle_ManyPushMsg)(nil), "cppbattle.CPPBattle.ManyPushMsg")
	proto.RegisterType((*CPPBattle_AuthTCPPushToServer)(nil), "cppbattle.CPPBattle.AuthTCPPushToServer")
	proto.RegisterType((*CPPBattle_AuthTCPPushToClient)(nil), "cppbattle.CPPBattle.AuthTCPPushToClient")
	proto.RegisterType((*CPPBattle_ChangeHero)(nil), "cppbattle.CPPBattle.ChangeHero")
	proto.RegisterType((*CPPBattle_ChangeHeroPush)(nil), "cppbattle.CPPBattle.ChangeHeroPush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.ChangeHeroPush.AttrEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.ChangeHeroPush.EquipEntry")
	proto.RegisterType((*CPPBattle_ChangeHeroSelfPush)(nil), "cppbattle.CPPBattle.ChangeHeroSelfPush")
	proto.RegisterType((*CPPBattle_HeroAttrUpdatePush)(nil), "cppbattle.CPPBattle.HeroAttrUpdatePush")
	proto.RegisterType((*CPPBattle_HeroFashionPush)(nil), "cppbattle.CPPBattle.HeroFashionPush")
	proto.RegisterType((*CPPBattle_PlayerPush)(nil), "cppbattle.CPPBattle.PlayerPush")
	proto.RegisterType((*CPPBattle_HeroesChangePush)(nil), "cppbattle.CPPBattle.HeroesChangePush")
	proto.RegisterType((*CPPBattle_ClientMoveRequest)(nil), "cppbattle.CPPBattle.ClientMoveRequest")
	proto.RegisterType((*CPPBattle_DamagePush)(nil), "cppbattle.CPPBattle.DamagePush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.DamagePush.AttrEntry")
	proto.RegisterType((*CPPBattle_BuffValuePush)(nil), "cppbattle.CPPBattle.BuffValuePush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.BuffValuePush.AttrEntry")
	proto.RegisterType((*CPPBattle_BuffInfo)(nil), "cppbattle.CPPBattle.BuffInfo")
	proto.RegisterType((*CPPBattle_BuffPush)(nil), "cppbattle.CPPBattle.BuffPush")
	proto.RegisterMapType((map[int64]*CPPBattle_BuffInfo)(nil), "cppbattle.CPPBattle.BuffPush.BuffsEntry")
	proto.RegisterType((*CPPBattle_SkillPush)(nil), "cppbattle.CPPBattle.SkillPush")
	proto.RegisterType((*CPPBattle_RevivePush)(nil), "cppbattle.CPPBattle.RevivePush")
	proto.RegisterType((*CPPBattle_ReviveHeroPush)(nil), "cppbattle.CPPBattle.ReviveHeroPush")
	proto.RegisterType((*CPPBattle_DeadPush)(nil), "cppbattle.CPPBattle.DeadPush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.DeadPush.DropEntry")
	proto.RegisterType((*CPPBattle_QueryDeadPush)(nil), "cppbattle.CPPBattle.QueryDeadPush")
	proto.RegisterType((*CPPBattle_MonsterPush)(nil), "cppbattle.CPPBattle.MonsterPush")
	proto.RegisterType((*CPPBattle_MoveOutPush)(nil), "cppbattle.CPPBattle.MoveOutPush")
	proto.RegisterType((*CPPBattle_PosChange)(nil), "cppbattle.CPPBattle.PosChange")
	proto.RegisterType((*CPPBattle_MoveInfo)(nil), "cppbattle.CPPBattle.MoveInfo")
	proto.RegisterType((*CPPBattle_MoveInfo1)(nil), "cppbattle.CPPBattle.MoveInfo1")
	proto.RegisterType((*CPPBattle_MovePath)(nil), "cppbattle.CPPBattle.MovePath")
	proto.RegisterType((*CPPBattle_MovePush)(nil), "cppbattle.CPPBattle.MovePush")
	proto.RegisterType((*CPPBattle_ControlMovePush)(nil), "cppbattle.CPPBattle.ControlMovePush")
	proto.RegisterType((*CPPBattle_ControlPoint)(nil), "cppbattle.CPPBattle.ControlPoint")
	proto.RegisterType((*CPPBattle_LeaveAreaRequest)(nil), "cppbattle.CPPBattle.LeaveAreaRequest")
	proto.RegisterType((*CPPBattle_LeaveAreaResponse)(nil), "cppbattle.CPPBattle.LeaveAreaResponse")
	proto.RegisterType((*CPPBattle_ExitBattle)(nil), "cppbattle.CPPBattle.ExitBattle")
	proto.RegisterType((*CPPBattle_StopMovePush)(nil), "cppbattle.CPPBattle.StopMovePush")
	proto.RegisterType((*CPPBattle_GetTempBagRequest)(nil), "cppbattle.CPPBattle.GetTempBagRequest")
	proto.RegisterType((*CPPBattle_GetTempBagResponse)(nil), "cppbattle.CPPBattle.GetTempBagResponse")
	proto.RegisterType((*CPPBattle_DrawTempBagRequest)(nil), "cppbattle.CPPBattle.DrawTempBagRequest")
	proto.RegisterType((*CPPBattle_DrawTempBagResponse)(nil), "cppbattle.CPPBattle.DrawTempBagResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.DrawTempBagResponse.ItemsEntry")
	proto.RegisterType((*CPPBattle_TakeMedicineRequest)(nil), "cppbattle.CPPBattle.TakeMedicineRequest")
	proto.RegisterType((*CPPBattle_TakeMedicineResponse)(nil), "cppbattle.CPPBattle.TakeMedicineResponse")
	proto.RegisterType((*CPPBattle_MedicineItemsPush)(nil), "cppbattle.CPPBattle.MedicineItemsPush")
	proto.RegisterMapType((map[int64]*models.MedicineInfo)(nil), "cppbattle.CPPBattle.MedicineItemsPush.MedicineEntry")
	proto.RegisterType((*CPPBattle_DestroyAirWallPush)(nil), "cppbattle.CPPBattle.DestroyAirWallPush")
	proto.RegisterType((*CPPBattle_CurAirWallPush)(nil), "cppbattle.CPPBattle.CurAirWallPush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.CurAirWallPush.AirWallsEntry")
	proto.RegisterType((*CPPBattle_DungeonPlayerDamageStatPush)(nil), "cppbattle.CPPBattle.DungeonPlayerDamageStatPush")
	proto.RegisterMapType((map[string]int64)(nil), "cppbattle.CPPBattle.DungeonPlayerDamageStatPush.DamageStatEntry")
	proto.RegisterType((*CPPBattle_DungeonCurStagePush)(nil), "cppbattle.CPPBattle.DungeonCurStagePush")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.DungeonCurStagePush.ConditionsEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.DungeonCurStagePush.KillCountsEntry")
	proto.RegisterType((*CPPBattle_MapSyncNotice)(nil), "cppbattle.CPPBattle.MapSyncNotice")
	proto.RegisterType((*CPPBattle_TransFormRequest)(nil), "cppbattle.CPPBattle.TransFormRequest")
	proto.RegisterType((*CPPBattle_TransFormNotice)(nil), "cppbattle.CPPBattle.TransFormNotice")
	proto.RegisterType((*CPPBattle_HeroUpdate)(nil), "cppbattle.CPPBattle.HeroUpdate")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.HeroUpdate.AttrEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.HeroUpdate.EquipEntry")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.HeroUpdate.EquipLightEffectEntry")
	proto.RegisterType((*CPPBattle_CPPChangeFormationRequest)(nil), "cppbattle.CPPBattle.CPPChangeFormationRequest")
	proto.RegisterType((*CPPBattle_CPPChangeFormationResponse)(nil), "cppbattle.CPPBattle.CPPChangeFormationResponse")
	proto.RegisterType((*CPPBattle_GMAddBuffPush)(nil), "cppbattle.CPPBattle.GMAddBuffPush")
	proto.RegisterType((*CPPBattle_BlockPlayerPush)(nil), "cppbattle.CPPBattle.BlockPlayerPush")
	proto.RegisterType((*CPPBattle_UnblockPlayerPush)(nil), "cppbattle.CPPBattle.UnblockPlayerPush")
	proto.RegisterType((*CPPBattle_RoguelikeRewardPush)(nil), "cppbattle.CPPBattle.RoguelikeRewardPush")
	proto.RegisterType((*CPPBattle_RoguelikeSelectArtifactRequest)(nil), "cppbattle.CPPBattle.RoguelikeSelectArtifactRequest")
	proto.RegisterType((*CPPBattle_RoguelikeSelectArtifactResponse)(nil), "cppbattle.CPPBattle.RoguelikeSelectArtifactResponse")
	proto.RegisterType((*CPPBattle_MonsterBossKillPush)(nil), "cppbattle.CPPBattle.MonsterBossKillPush")
	proto.RegisterType((*CPPBattle_MonsterJoinKillPush)(nil), "cppbattle.CPPBattle.MonsterJoinKillPush")
	proto.RegisterType((*CPPBattle_DropItemPush)(nil), "cppbattle.CPPBattle.DropItemPush")
	proto.RegisterType((*CPPBattle_UserTitleChangePush)(nil), "cppbattle.CPPBattle.UserTitleChangePush")
	proto.RegisterType((*CPPBattle_UserLevelChangePush)(nil), "cppbattle.CPPBattle.UserLevelChangePush")
	proto.RegisterType((*CPPBattle_EnterPlaneDungeonRequest)(nil), "cppbattle.CPPBattle.EnterPlaneDungeonRequest")
	proto.RegisterMapType((map[int64]int64)(nil), "cppbattle.CPPBattle.EnterPlaneDungeonRequest.RewardItemsEntry")
	proto.RegisterType((*CPPBattle_EnterPlaneDungeonResponse)(nil), "cppbattle.CPPBattle.EnterPlaneDungeonResponse")
	proto.RegisterType((*CPPBattle_UserAutoSoulSkillPush)(nil), "cppbattle.CPPBattle.UserAutoSoulSkillPush")
	proto.RegisterType((*MonsterInfo)(nil), "cppbattle.MonsterInfo")
	proto.RegisterType((*ConditionInfo)(nil), "cppbattle.ConditionInfo")
	proto.RegisterType((*SingleBattleMonsterList)(nil), "cppbattle.SingleBattleMonsterList")
}

func init() { proto.RegisterFile("proto/cppbattle/cpp_battle.proto", fileDescriptor_4eb2e94f3e2f3376) }

var fileDescriptor_4eb2e94f3e2f3376 = []byte{
	// 3472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3a, 0x4d, 0x8f, 0x1b, 0xc7,
	0xb1, 0x1a, 0x0e, 0xb9, 0x24, 0x8b, 0xfb, 0x39, 0x2b, 0xad, 0xb8, 0xa3, 0xa7, 0x95, 0xb4, 0xef,
	0x3d, 0x4b, 0x4f, 0xb2, 0x28, 0x5b, 0xf2, 0x7b, 0x96, 0x6d, 0xd8, 0x4f, 0xbb, 0x5c, 0xc9, 0x66,
	0xac, 0x95, 0xa9, 0xe1, 0xfa, 0x23, 0xc9, 0x81, 0xe8, 0xe5, 0x34, 0xb9, 0xa3, 0x1d, 0x4e, 0x8f,
	0x67, 0x86, 0x2b, 0xf1, 0x60, 0xe4, 0x90, 0x1c, 0x82, 0x7c, 0x00, 0x39, 0x04, 0x3e, 0xe4, 0xe6,
	0x20, 0x08, 0xf2, 0x13, 0x02, 0xe7, 0x90, 0x4b, 0x10, 0x18, 0x39, 0xf9, 0xe8, 0x04, 0x3e, 0x24,
	0xd2, 0x25, 0x01, 0x72, 0x08, 0x10, 0x20, 0xe7, 0xa0, 0xab, 0xbb, 0x67, 0x86, 0x5c, 0x92, 0xbb,
	0x74, 0x6c, 0x28, 0xb7, 0xe9, 0xea, 0xaa, 0xea, 0xea, 0xaa, 0xea, 0xfa, 0xe8, 0x1e, 0x38, 0xef,
	0x07, 0x2c, 0x62, 0xd7, 0x5a, 0xbe, 0xbf, 0x4b, 0xa2, 0xc8, 0xa5, 0xfc, 0xab, 0x29, 0x3e, 0x2b,
	0x38, 0x65, 0x14, 0xe3, 0x39, 0x73, 0x45, 0x20, 0x77, 0x99, 0x4d, 0xdd, 0xf0, 0xda, 0x2e, 0xe9,
	0x08, 0x14, 0xf3, 0xf4, 0x00, 0xbc, 0x17, 0xd2, 0x40, 0x4e, 0xac, 0x0e, 0x11, 0x24, 0x6c, 0xcd,
	0xff, 0x18, 0x98, 0x6a, 0xb3, 0xa0, 0x4b, 0x22, 0x87, 0x79, 0x72, 0xb6, 0x3c, 0x30, 0x1b, 0xb1,
	0x87, 0x09, 0xcb, 0x0e, 0x63, 0x1d, 0x97, 0x5e, 0xc3, 0xd1, 0x6e, 0xaf, 0x7d, 0x8d, 0x78, 0xfd,
	0x91, 0x62, 0xec, 0xd1, 0x80, 0x89, 0x89, 0xf5, 0xcf, 0xdf, 0x85, 0x62, 0xb5, 0x5e, 0xdf, 0x14,
	0xbb, 0x58, 0x87, 0xec, 0x3b, 0xb4, 0x75, 0xdd, 0x98, 0x05, 0xed, 0x51, 0x59, 0x3b, 0xaf, 0x5d,
	0xca, 0x58, 0xda, 0x23, 0x3e, 0xea, 0x97, 0x33, 0x62, 0xd4, 0x37, 0x2f, 0x42, 0xb6, 0xee, 0x78,
	0x1d, 0xe3, 0x1c, 0x94, 0x5a, 0xae, 0x43, 0xbd, 0xa8, 0x19, 0x39, 0x5d, 0x8a, 0xd8, 0xba, 0x05,
	0x02, 0xb4, 0xe3, 0x74, 0xa9, 0xf9, 0x5d, 0x0d, 0xb2, 0x75, 0x76, 0x0c, 0x4c, 0x8e, 0x10, 0xd2,
	0xe0, 0x80, 0x06, 0x02, 0x21, 0x23, 0x10, 0x04, 0x08, 0x11, 0x2e, 0xc0, 0xac, 0x44, 0x68, 0x07,
	0xa4, 0x4b, 0xcb, 0x3a, 0x62, 0x48, 0xa2, 0x3b, 0x1c, 0x64, 0x9c, 0x81, 0xa2, 0x50, 0x62, 0xd3,
	0xb1, 0xcb, 0x36, 0xce, 0x17, 0x04, 0xa0, 0x66, 0x9b, 0x9f, 0xe9, 0x60, 0xdc, 0xf6, 0x22, 0x1a,
	0x88, 0x7d, 0x5a, 0xf4, 0xfd, 0x1e, 0x0d, 0x23, 0xe3, 0x0a, 0xe8, 0x3e, 0x0b, 0x51, 0xa0, 0xd2,
	0xf5, 0xd5, 0x4a, 0x6c, 0xcd, 0x4a, 0xac, 0x91, 0x0a, 0x57, 0x87, 0xc5, 0xb1, 0x8c, 0x53, 0x30,
	0xd3, 0x25, 0x3e, 0xe7, 0x2e, 0xe4, 0xcb, 0x75, 0x89, 0x5f, 0xb3, 0x8d, 0x4b, 0xb0, 0x28, 0xd7,
	0x95, 0x12, 0x3a, 0xb6, 0x14, 0x6f, 0x5e, 0xc0, 0x1b, 0x08, 0xae, 0xd9, 0xc6, 0x79, 0xc8, 0x06,
	0xcc, 0xa5, 0xe5, 0x2c, 0x2e, 0x37, 0x5b, 0x11, 0xc6, 0xa8, 0x58, 0xcc, 0xa5, 0x16, 0xce, 0x18,
	0x57, 0x61, 0x86, 0x9b, 0x86, 0x86, 0xe5, 0xdc, 0x79, 0xfd, 0x52, 0xe9, 0xfa, 0x29, 0x85, 0xf3,
	0x06, 0x0d, 0xd8, 0x1d, 0xa6, 0xa4, 0x97, 0x48, 0xc6, 0x7d, 0x28, 0x74, 0xa9, 0xed, 0xb4, 0x1c,
	0x8f, 0x96, 0x67, 0x90, 0xe0, 0x7f, 0x47, 0xee, 0xe1, 0xf0, 0xce, 0x2b, 0xdb, 0x92, 0xee, 0xb6,
	0x17, 0x05, 0x7d, 0x2b, 0x66, 0x63, 0xdc, 0x80, 0x7c, 0xc4, 0x1e, 0x92, 0xc0, 0x0e, 0xcb, 0xf9,
	0xa3, 0xb4, 0xa2, 0x30, 0xb9, 0x0a, 0x48, 0x2f, 0x62, 0xcd, 0x90, 0xf5, 0xb8, 0x1a, 0xf6, 0x1d,
	0xd7, 0x2d, 0x17, 0x84, 0x0a, 0x38, 0xbc, 0xc1, 0xc1, 0x0d, 0x0e, 0x35, 0xef, 0xc3, 0xdc, 0xc0,
	0xca, 0xc6, 0x22, 0xe8, 0xfb, 0xb4, 0x2f, 0x5d, 0x82, 0x7f, 0x1a, 0x97, 0x21, 0x77, 0x40, 0xdc,
	0x9e, 0xf0, 0x82, 0xd2, 0xf5, 0x93, 0x4a, 0x05, 0x8a, 0xae, 0xe6, 0xb5, 0x99, 0x25, 0x50, 0x5e,
	0xce, 0xdc, 0xd4, 0xcc, 0x3f, 0x68, 0xb0, 0x3c, 0xb0, 0xc1, 0xd0, 0x67, 0x5e, 0x48, 0xbf, 0x14,
	0xdb, 0xce, 0x43, 0xc6, 0xf1, 0xd1, 0x9a, 0x45, 0x2b, 0xe3, 0xf8, 0x86, 0x01, 0x59, 0x9f, 0x05,
	0x11, 0x5a, 0x50, 0xb7, 0xf0, 0xdb, 0x38, 0x09, 0xb9, 0x88, 0xed, 0x53, 0xaf, 0x9c, 0x43, 0x34,
	0x31, 0x18, 0xe9, 0x15, 0x33, 0x23, 0xbd, 0x62, 0xa2, 0xdf, 0xde, 0x83, 0x95, 0x46, 0xdf, 0x6b,
	0xdd, 0x73, 0x5a, 0xfb, 0x1e, 0xe9, 0xd2, 0xea, 0x1e, 0xf1, 0x3a, 0xb4, 0xde, 0x0b, 0xf7, 0x8c,
	0xd3, 0x90, 0xe7, 0x2e, 0xc3, 0x89, 0x34, 0x5c, 0x78, 0x86, 0x0f, 0x05, 0x3f, 0xcf, 0x69, 0xed,
	0x37, 0x39, 0x3e, 0xee, 0xa6, 0x68, 0x15, 0x38, 0xe0, 0x1e, 0xe9, 0x52, 0xf3, 0x39, 0x38, 0x55,
	0x25, 0x9e, 0x60, 0xd3, 0x68, 0x51, 0x2f, 0x3e, 0x09, 0xe3, 0xd8, 0x99, 0x2f, 0xc2, 0xca, 0x30,
	0x85, 0x54, 0xf0, 0x59, 0x80, 0x16, 0xf1, 0x9a, 0x61, 0x44, 0xa2, 0x5e, 0x28, 0x2d, 0x58, 0x6c,
	0x11, 0xaf, 0x81, 0x00, 0xf3, 0xff, 0xa1, 0xb4, 0x4d, 0xbc, 0x3e, 0x17, 0x76, 0x3b, 0xec, 0x18,
	0xcf, 0x71, 0x5f, 0x0d, 0x43, 0xd2, 0xa1, 0x1c, 0x57, 0x47, 0xcb, 0x8a, 0x70, 0x55, 0x51, 0xe1,
	0xaa, 0xb2, 0xe1, 0xa1, 0x2b, 0x0a, 0x2c, 0x93, 0xc0, 0xf2, 0x46, 0x2f, 0xda, 0xdb, 0xa9, 0xd6,
	0x39, 0x8f, 0x1d, 0x26, 0x34, 0x36, 0x7e, 0xe3, 0xb1, 0x21, 0x32, 0x69, 0x43, 0x9c, 0x81, 0x62,
	0x8b, 0x79, 0x6d, 0xa7, 0x93, 0x9c, 0xcb, 0x82, 0x00, 0xd4, 0x6c, 0xf3, 0xea, 0xd0, 0x12, 0x55,
	0x0c, 0x49, 0xc6, 0x0a, 0xcc, 0x0c, 0xec, 0x4a, 0x8e, 0x4c, 0x1f, 0x40, 0x28, 0x82, 0x1f, 0xc7,
	0x91, 0x26, 0xd6, 0xc6, 0x99, 0x38, 0x91, 0x21, 0x33, 0x28, 0xc3, 0x64, 0xfb, 0xff, 0x35, 0x03,
	0xf3, 0xc9, 0x92, 0x68, 0xf8, 0x2f, 0x69, 0xd9, 0x0d, 0xc8, 0x92, 0x28, 0x0a, 0xca, 0x3a, 0xda,
	0xe2, 0xea, 0xc8, 0xf3, 0x31, 0xb8, 0x72, 0x65, 0x23, 0x8a, 0x02, 0x11, 0x2f, 0x90, 0xd4, 0xd8,
	0x82, 0x1c, 0x7d, 0xbf, 0xe7, 0xf8, 0xe5, 0x2c, 0xf2, 0xa8, 0x1c, 0x87, 0xc7, 0x6d, 0x4e, 0x20,
	0x98, 0x08, 0xe2, 0xb4, 0x3d, 0x73, 0x43, 0x9e, 0x57, 0x8c, 0x57, 0x1c, 0x11, 0x27, 0x4e, 0xa6,
	0xe3, 0x84, 0x9e, 0x8e, 0x08, 0x37, 0x01, 0x92, 0x65, 0xa6, 0xa2, 0x7c, 0x04, 0x46, 0x22, 0x6f,
	0x83, 0xba, 0xed, 0xe9, 0x35, 0x1e, 0xd0, 0x2e, 0x71, 0xbc, 0x66, 0x2b, 0xd6, 0xb8, 0x00, 0x54,
	0xed, 0xc9, 0x9e, 0xf8, 0xb1, 0x06, 0x06, 0x5f, 0x94, 0xef, 0xf8, 0x6d, 0xdf, 0x26, 0x11, 0x9d,
	0x72, 0xe9, 0x53, 0x30, 0xc3, 0x76, 0x1f, 0x28, 0x4b, 0x17, 0xad, 0x1c, 0xdb, 0x7d, 0x50, 0xb3,
	0x8d, 0x17, 0xe3, 0x8c, 0x22, 0x0c, 0x7d, 0x6e, 0xa4, 0x91, 0xf8, 0xca, 0x62, 0xd5, 0x38, 0xb7,
	0xf0, 0xd3, 0xe4, 0x44, 0x32, 0x5b, 0xe9, 0x96, 0x18, 0x70, 0xa8, 0x4b, 0x0f, 0xa8, 0x8b, 0xa6,
	0xd2, 0x2d, 0x31, 0x30, 0x7f, 0xac, 0xc1, 0x02, 0x66, 0x28, 0x12, 0xee, 0x39, 0xcc, 0x9b, 0x52,
	0xf2, 0x94, 0x03, 0x64, 0x06, 0x0e, 0xf4, 0x7f, 0xc1, 0x3c, 0x17, 0xa6, 0x39, 0xac, 0xb5, 0x59,
	0x0e, 0xad, 0x2a, 0x47, 0x2e, 0x43, 0xbe, 0x2d, 0xd6, 0x95, 0xa2, 0xaa, 0x21, 0x3f, 0x3c, 0x50,
	0x77, 0x49, 0x9f, 0x06, 0x28, 0x51, 0xa2, 0x21, 0x2d, 0xad, 0x21, 0x03, 0xb2, 0xa9, 0x50, 0x89,
	0xdf, 0xdc, 0x54, 0x21, 0x6d, 0x45, 0x22, 0x86, 0x8a, 0xf0, 0x5f, 0xe0, 0x00, 0x1e, 0x43, 0x13,
	0x1d, 0x64, 0x53, 0x3a, 0x98, 0x36, 0x75, 0x9f, 0x05, 0xc0, 0xbd, 0x39, 0x9e, 0x4d, 0x1f, 0xc9,
	0xcc, 0x50, 0xe4, 0x90, 0x1a, 0x07, 0xa8, 0xe4, 0x95, 0x3f, 0x56, 0xf2, 0x4a, 0xe5, 0xec, 0xc2,
	0xb1, 0x73, 0xf6, 0x49, 0xc8, 0x85, 0x3e, 0xa5, 0x76, 0xb9, 0x88, 0x75, 0x9d, 0x18, 0x70, 0xb1,
	0x76, 0x7b, 0xed, 0x76, 0x53, 0x4c, 0x01, 0x4e, 0x15, 0x39, 0xa4, 0x81, 0xd3, 0x13, 0x63, 0xd5,
	0x6f, 0x35, 0x58, 0x7c, 0x03, 0x77, 0x97, 0x4a, 0x53, 0x89, 0x5a, 0xb4, 0xe9, 0xd5, 0x92, 0x19,
	0x56, 0x4b, 0x2c, 0xb4, 0x9e, 0x16, 0x3a, 0xe5, 0x40, 0xd9, 0x01, 0x07, 0xe2, 0x75, 0x27, 0x8a,
	0xd2, 0x8c, 0xfa, 0x3e, 0x95, 0x3e, 0x0b, 0x02, 0xb4, 0xd3, 0xf7, 0x69, 0xe2, 0xe4, 0x33, 0x29,
	0x27, 0x37, 0x3f, 0x80, 0x25, 0x91, 0x08, 0xb6, 0xd9, 0x41, 0x9c, 0x20, 0x17, 0x41, 0x8f, 0xfa,
	0xbe, 0x0a, 0x23, 0x51, 0xdf, 0x37, 0x5e, 0x82, 0x92, 0x4d, 0xc3, 0xa8, 0xc9, 0x82, 0xa6, 0xed,
	0x04, 0xb2, 0x5c, 0x99, 0xa0, 0xfa, 0x22, 0xc7, 0x7e, 0x2b, 0xd8, 0x72, 0x02, 0xae, 0x47, 0x27,
	0x6c, 0x76, 0x89, 0xd7, 0x23, 0xae, 0x0a, 0x05, 0x4e, 0xb8, 0x8d, 0x63, 0xf3, 0xc3, 0x2c, 0xc0,
	0x16, 0xe9, 0x12, 0xa9, 0xc1, 0x73, 0x50, 0x22, 0x51, 0x44, 0x5a, 0xfb, 0xc9, 0x19, 0x2a, 0x5a,
	0xa0, 0x40, 0x62, 0x97, 0x36, 0x6d, 0x53, 0xcf, 0x16, 0x08, 0xc2, 0x8f, 0x41, 0x81, 0x6a, 0xb6,
	0xb1, 0x0a, 0x05, 0xac, 0xc9, 0x92, 0x13, 0x94, 0xc7, 0xb1, 0x28, 0x5e, 0xc5, 0xd4, 0x81, 0x43,
	0x1f, 0x4a, 0xad, 0x0b, 0xb7, 0x9e, 0x47, 0xf8, 0x3b, 0x0e, 0x7d, 0x28, 0x54, 0xcf, 0x4b, 0x74,
	0xc1, 0x04, 0x91, 0xa4, 0x2e, 0x05, 0x1f, 0x44, 0x58, 0x81, 0x19, 0x1b, 0xa5, 0x96, 0xca, 0x94,
	0x23, 0xe3, 0x55, 0x99, 0x68, 0xf2, 0x68, 0xff, 0xff, 0x19, 0xa9, 0x9f, 0x64, 0xbb, 0x87, 0x92,
	0xcc, 0x05, 0x98, 0x15, 0x8c, 0x9a, 0x2d, 0xe6, 0xb2, 0x40, 0xd6, 0x95, 0x25, 0x01, 0xab, 0x72,
	0x10, 0xdf, 0x9f, 0x13, 0x36, 0x6d, 0x66, 0x77, 0x28, 0x7a, 0x73, 0xc1, 0xca, 0x3b, 0xe1, 0x16,
	0x1f, 0xca, 0x29, 0x9f, 0x04, 0x41, 0x1f, 0xbd, 0x19, 0xa7, 0xea, 0x7c, 0x68, 0x3c, 0x0b, 0x46,
	0xac, 0xd7, 0x24, 0xc2, 0x94, 0x90, 0xfd, 0xa2, 0x9a, 0x89, 0xa3, 0xcc, 0xb3, 0x60, 0xc4, 0x4a,
	0x4e, 0xb0, 0x67, 0x05, 0xb6, 0x9a, 0xa9, 0x1e, 0x2b, 0xa7, 0x7f, 0xe1, 0xbc, 0xf6, 0x6b, 0x1d,
	0xe6, 0x36, 0x7b, 0xed, 0xf6, 0x3b, 0x1c, 0x82, 0xbe, 0xb1, 0x0a, 0x05, 0xf6, 0xd0, 0x4b, 0x3b,
	0x46, 0x1e, 0xc7, 0x32, 0xf9, 0x93, 0x30, 0x4a, 0xfb, 0x44, 0x41, 0x00, 0x44, 0xa9, 0x24, 0xd6,
	0xd0, 0x53, 0x6b, 0xf0, 0xc3, 0x87, 0x1f, 0xe2, 0xb4, 0x08, 0x37, 0x28, 0x22, 0x04, 0x0f, 0xcb,
	0x2d, 0x69, 0x48, 0x11, 0xdf, 0x9e, 0x1d, 0x69, 0xc8, 0x01, 0xf1, 0x8e, 0xb4, 0xe5, 0xcc, 0x64,
	0x5b, 0xe6, 0xc7, 0xdb, 0xb2, 0x30, 0x68, 0xcb, 0x4b, 0xb0, 0x28, 0x37, 0x9b, 0xd8, 0xa6, 0x28,
	0xdc, 0x58, 0xc0, 0x63, 0xcb, 0x3c, 0x03, 0x0b, 0x42, 0x63, 0x09, 0x22, 0x20, 0xe2, 0x1c, 0x82,
	0xbf, 0x62, 0x0b, 0x7e, 0x00, 0x05, 0xae, 0x21, 0xde, 0xc2, 0x60, 0x6f, 0xa1, 0x52, 0x62, 0xc6,
	0x39, 0xa2, 0x5a, 0x3b, 0x07, 0x25, 0x59, 0x58, 0x60, 0x83, 0x2c, 0xcc, 0x06, 0x02, 0x84, 0x0d,
	0xf2, 0x7f, 0xc2, 0x1c, 0x3b, 0xa0, 0x81, 0x4b, 0xfa, 0xcd, 0x16, 0xeb, 0x79, 0xaa, 0x45, 0x99,
	0x95, 0xc0, 0x2a, 0x87, 0x99, 0xdf, 0xce, 0x88, 0xf5, 0xd1, 0x77, 0xce, 0x40, 0x91, 0xed, 0x3e,
	0xe0, 0x59, 0x2e, 0x76, 0x9e, 0x82, 0x00, 0xd4, 0x6c, 0xe3, 0x35, 0xc8, 0xf1, 0xa8, 0x1f, 0x96,
	0x33, 0x68, 0xec, 0x4b, 0x63, 0x8d, 0x8d, 0x76, 0xe6, 0x1f, 0xa1, 0x2c, 0xea, 0x90, 0xec, 0x98,
	0xa9, 0x7b, 0xa2, 0x92, 0xdf, 0x05, 0x48, 0xf8, 0x8e, 0xd0, 0xf2, 0x8d, 0xc1, 0x3e, 0xf1, 0xec,
	0x58, 0x11, 0x87, 0x1b, 0xc6, 0xdf, 0x6b, 0x50, 0xc4, 0x6e, 0xf4, 0xdf, 0x29, 0xbc, 0xf2, 0x16,
	0x5a, 0x89, 0x21, 0x32, 0xa0, 0x2d, 0x63, 0xec, 0xbc, 0x82, 0xf3, 0x8c, 0x79, 0x94, 0xd2, 0x7e,
	0xaa, 0x01, 0x58, 0xf4, 0xc0, 0x39, 0xa0, 0x93, 0x4a, 0x9e, 0x1b, 0x00, 0x01, 0x22, 0xf1, 0x93,
	0x8e, 0x3b, 0x9a, 0xbf, 0x7e, 0x32, 0xa5, 0x3f, 0xc1, 0x61, 0xa7, 0xef, 0x5b, 0xc5, 0x40, 0x7d,
	0xaa, 0x92, 0x44, 0x3f, 0x56, 0x49, 0x32, 0x51, 0x48, 0x02, 0xf3, 0x62, 0x85, 0xb8, 0xa7, 0x19,
	0x23, 0xe7, 0x17, 0xef, 0x9b, 0xfe, 0xae, 0x43, 0x61, 0x8b, 0x12, 0xfb, 0x78, 0x26, 0x3e, 0x0d,
	0x79, 0x9b, 0x12, 0x3b, 0x55, 0x81, 0xf2, 0xe1, 0x53, 0xcf, 0x9c, 0xaf, 0x40, 0xd6, 0x0e, 0x98,
	0x2f, 0x33, 0xe7, 0xc5, 0xd1, 0x99, 0x53, 0x6e, 0xb2, 0xb2, 0x15, 0x30, 0xd9, 0x57, 0x21, 0xd1,
	0x98, 0xf4, 0x56, 0x98, 0x2a, 0xbd, 0x15, 0xc7, 0xa4, 0x37, 0x8c, 0x46, 0xe8, 0x3f, 0x2d, 0x16,
	0x46, 0x32, 0x80, 0x4a, 0x97, 0xaa, 0xb2, 0x30, 0x4a, 0x21, 0x60, 0xb8, 0x2a, 0xa5, 0x11, 0x30,
	0x5c, 0x1d, 0x15, 0x5e, 0xe3, 0xdd, 0x4c, 0x15, 0x5e, 0x1f, 0xc0, 0xdc, 0xfd, 0x1e, 0x0d, 0xfa,
	0xb1, 0xe5, 0x53, 0x86, 0xd5, 0x06, 0x0c, 0x3b, 0xb4, 0x83, 0xcc, 0x51, 0x3b, 0xd0, 0x87, 0x77,
	0x60, 0xfe, 0x3c, 0x03, 0xa5, 0x6d, 0xe6, 0xf1, 0xe4, 0x32, 0xc9, 0x85, 0x93, 0xfa, 0x37, 0x33,
	0x7d, 0xfd, 0xab, 0x8f, 0x69, 0x0b, 0xb2, 0xd3, 0xb6, 0x05, 0xb9, 0xe9, 0xdb, 0x82, 0x99, 0xf1,
	0x6d, 0x41, 0x7e, 0xaa, 0xb6, 0x60, 0x83, 0xeb, 0xe9, 0x80, 0xbe, 0xd5, 0x8b, 0x0e, 0xe9, 0x49,
	0x1f, 0x38, 0xea, 0xe3, 0x59, 0x7c, 0xa4, 0x41, 0xb1, 0xce, 0x64, 0x5b, 0x31, 0x4e, 0xd3, 0x52,
	0x37, 0x99, 0x69, 0x75, 0xa3, 0x1f, 0x5b, 0x37, 0x13, 0x65, 0x04, 0x28, 0xf0, 0x6d, 0xf2, 0x64,
	0x63, 0x9e, 0x81, 0xa2, 0xfa, 0x7e, 0x7e, 0x38, 0xcf, 0x9b, 0xdf, 0x12, 0x88, 0x75, 0x12, 0x8d,
	0x75, 0x9a, 0x6b, 0x90, 0xf3, 0x49, 0xb4, 0xa7, 0x7c, 0x66, 0x82, 0x6c, 0x02, 0x6f, 0xaa, 0xd8,
	0x6c, 0xfe, 0x2e, 0x23, 0x25, 0x98, 0xe0, 0xb6, 0x5f, 0xbd, 0x32, 0x0d, 0xc8, 0xa6, 0xca, 0x4c,
	0xfc, 0x4e, 0x9c, 0x2f, 0x97, 0x76, 0xbe, 0x33, 0x50, 0xec, 0x32, 0x75, 0x10, 0x85, 0x5b, 0x16,
	0x38, 0x00, 0x03, 0xc9, 0xbf, 0xe0, 0x99, 0xbc, 0x1c, 0x6d, 0xf5, 0xc2, 0x88, 0x75, 0x25, 0x35,
	0x45, 0xea, 0x92, 0x80, 0x09, 0x7a, 0xde, 0x41, 0x0a, 0x14, 0x5c, 0xbd, 0x8d, 0x18, 0x20, 0x40,
	0x18, 0x06, 0x7e, 0xa0, 0xc1, 0x42, 0x95, 0x79, 0x51, 0xc0, 0xdc, 0xa3, 0x74, 0x6a, 0x40, 0xb6,
	0xed, 0x92, 0x8e, 0x0c, 0x36, 0xf8, 0x6d, 0x3c, 0x0f, 0x19, 0x5f, 0x5d, 0xcd, 0x5c, 0x18, 0x7d,
	0x7f, 0x26, 0x98, 0xd7, 0x99, 0xe3, 0x45, 0x56, 0xc6, 0x3f, 0xc2, 0x0b, 0xbf, 0xa3, 0xc1, 0x6c,
	0x9a, 0x62, 0xba, 0x5b, 0xf0, 0x94, 0x21, 0x33, 0x53, 0x19, 0x52, 0x85, 0xc8, 0x8c, 0x85, 0xdf,
	0xa6, 0x01, 0x8b, 0x77, 0x29, 0x39, 0xa0, 0x1b, 0x01, 0x25, 0xb2, 0x81, 0x36, 0x97, 0x61, 0x29,
	0x05, 0x13, 0x77, 0xc8, 0xe6, 0x2c, 0xc0, 0xed, 0x47, 0x4e, 0x24, 0x5f, 0x9f, 0x7e, 0xa6, 0xc1,
	0x6c, 0x23, 0x62, 0xfe, 0xd3, 0xf7, 0xce, 0x89, 0x4a, 0x5e, 0x86, 0xa5, 0xd7, 0x69, 0xb4, 0x43,
	0xbb, 0xfe, 0x26, 0xe9, 0xa8, 0xed, 0xbd, 0x08, 0x46, 0x1a, 0x28, 0xef, 0xc8, 0x2f, 0x80, 0xbe,
	0x4b, 0x3a, 0x52, 0xfd, 0x0b, 0x2a, 0xf6, 0x2b, 0x2c, 0x3e, 0x67, 0x9e, 0x04, 0x63, 0x2b, 0x20,
	0x0f, 0x87, 0xd8, 0xfd, 0x44, 0x83, 0xe5, 0x01, 0xb0, 0x64, 0x58, 0x83, 0x9c, 0x13, 0xd1, 0xae,
	0xba, 0x4e, 0xb9, 0x31, 0xba, 0x28, 0x38, 0x4c, 0x58, 0xa9, 0x71, 0x2a, 0x59, 0xa3, 0x23, 0x07,
	0xf3, 0x26, 0x40, 0x02, 0x9c, 0x2a, 0xcf, 0x5a, 0xb0, 0xbc, 0x43, 0xf6, 0xa9, 0x7a, 0x91, 0x51,
	0x57, 0x24, 0xc3, 0x1d, 0xcd, 0x69, 0xc8, 0xb7, 0xec, 0xf4, 0x8b, 0xde, 0x4c, 0xcb, 0xc6, 0x43,
	0xab, 0x4e, 0x82, 0x9e, 0x9c, 0x04, 0x73, 0x05, 0x4e, 0x0e, 0xf2, 0x94, 0x1e, 0xf2, 0x4b, 0x0d,
	0x96, 0xe2, 0xa7, 0x1f, 0x2e, 0x2e, 0x3a, 0x46, 0x3d, 0xf5, 0xf2, 0x25, 0x34, 0xf1, 0xc2, 0x48,
	0x4d, 0x1c, 0xa2, 0x1c, 0xf7, 0xf0, 0xf5, 0x55, 0xbc, 0x4c, 0xdd, 0x07, 0x63, 0x8b, 0x86, 0x51,
	0xc0, 0xfa, 0x1b, 0x4e, 0xf0, 0x2e, 0x91, 0x0d, 0xc7, 0x1a, 0x94, 0x88, 0x13, 0x34, 0x1f, 0x12,
	0x51, 0x56, 0xca, 0x77, 0x13, 0x22, 0x30, 0x8e, 0xca, 0x84, 0x1f, 0x6b, 0x30, 0x5f, 0xed, 0x05,
	0x69, 0x7e, 0xf7, 0xa0, 0xa8, 0xf8, 0x29, 0xaf, 0x78, 0x7e, 0x74, 0x24, 0x19, 0xa0, 0xab, 0xc8,
	0x6f, 0xe9, 0x13, 0x05, 0x29, 0xc0, 0x11, 0xae, 0xff, 0x0a, 0xcc, 0x0d, 0xd0, 0x4d, 0xe5, 0x36,
	0x9f, 0x6b, 0x70, 0x66, 0xab, 0xe7, 0x75, 0x28, 0xf3, 0xc4, 0xb5, 0xac, 0xb8, 0xf6, 0x69, 0x44,
	0x44, 0x94, 0x06, 0x04, 0xe4, 0x55, 0x00, 0xbe, 0x29, 0xc9, 0xbd, 0xdc, 0x1a, 0xed, 0xe1, 0xe3,
	0xd9, 0x54, 0x92, 0xa1, 0xd8, 0x1a, 0xd8, 0x31, 0x60, 0xf2, 0xe6, 0x5e, 0x85, 0x85, 0x21, 0xda,
	0xf4, 0xf6, 0x8a, 0x47, 0x6d, 0xef, 0x43, 0x1d, 0x96, 0xa5, 0x5c, 0xd5, 0x5e, 0xd0, 0x88, 0xd4,
	0x05, 0xde, 0x2a, 0x14, 0xa8, 0x67, 0xa7, 0x9f, 0xbe, 0xf3, 0xd4, 0x13, 0x07, 0x81, 0x27, 0x3c,
	0x8e, 0xa7, 0x98, 0xe1, 0xc0, 0x78, 0x0f, 0xa0, 0xc5, 0x3c, 0xdb, 0x89, 0x1c, 0xe6, 0xa9, 0xe4,
	0x70, 0x73, 0x92, 0x1a, 0xd2, 0xcb, 0xf1, 0x84, 0x21, 0x49, 0xe5, 0xf6, 0x13, 0x5e, 0xc6, 0xd7,
	0xa1, 0x84, 0x9d, 0x08, 0x5e, 0x11, 0x84, 0xf2, 0xdd, 0xe6, 0xf8, 0xac, 0xdf, 0x74, 0x5c, 0x17,
	0x6f, 0x12, 0x14, 0xeb, 0xfd, 0x18, 0x70, 0xa4, 0x66, 0x87, 0xc4, 0x9a, 0xca, 0x71, 0x5e, 0x85,
	0x85, 0xa1, 0xa5, 0xa7, 0x22, 0xff, 0x55, 0x06, 0xe6, 0xb6, 0x89, 0x8f, 0x0f, 0xa9, 0x2c, 0x72,
	0x5a, 0x87, 0x7f, 0x27, 0xd0, 0x0e, 0xff, 0x4e, 0x70, 0x0b, 0x4a, 0x3e, 0x7a, 0x57, 0xd3, 0x75,
	0xb0, 0x43, 0x18, 0xff, 0x7a, 0x92, 0xbc, 0x31, 0x58, 0x20, 0x68, 0xee, 0x3a, 0x61, 0x64, 0x54,
	0x61, 0xb6, 0x2b, 0x1a, 0x04, 0xc1, 0x42, 0x18, 0xf2, 0xfc, 0xe8, 0x38, 0x95, 0x74, 0x12, 0x56,
	0x49, 0x52, 0x21, 0x93, 0x2d, 0x98, 0xc3, 0xe2, 0x87, 0xf5, 0x22, 0xc1, 0x25, 0x3b, 0x91, 0x4b,
	0x5c, 0x67, 0x73, 0x2e, 0x38, 0x40, 0x2e, 0x2f, 0xcb, 0x12, 0x0a, 0x39, 0x88, 0xfb, 0xbb, 0xb3,
	0x63, 0x39, 0x20, 0x39, 0x56, 0x58, 0x9c, 0xd6, 0xfc, 0xbe, 0x06, 0x8b, 0x3b, 0x01, 0xf1, 0xc2,
	0x3b, 0x2c, 0xe8, 0xaa, 0x50, 0xff, 0xb4, 0x12, 0xb3, 0xf9, 0x3d, 0x0d, 0x16, 0x62, 0x69, 0xa4,
	0x35, 0x9f, 0x9a, 0x30, 0xff, 0xc8, 0x02, 0x24, 0x4f, 0x67, 0x83, 0xd7, 0x15, 0xda, 0xd0, 0x75,
	0x85, 0xba, 0x06, 0xcf, 0x4c, 0xb8, 0x06, 0x4f, 0x78, 0x1d, 0xba, 0x3a, 0xbd, 0xa5, 0xde, 0x5a,
	0x85, 0x17, 0x5d, 0x3e, 0x8a, 0xfe, 0xf0, 0x3b, 0xeb, 0xff, 0x41, 0x51, 0xdd, 0x65, 0xa8, 0x93,
	0xbf, 0x9a, 0x6e, 0x46, 0xf1, 0x4a, 0x6c, 0xc3, 0xb3, 0x1b, 0x11, 0xf3, 0xa8, 0x55, 0x90, 0xf7,
	0x1c, 0xa1, 0xf1, 0x0c, 0x2c, 0x38, 0xa1, 0xf8, 0xa9, 0xa3, 0x29, 0x9e, 0x4e, 0xb0, 0x3c, 0x2f,
	0x58, 0x73, 0x4e, 0x88, 0x34, 0xb2, 0x2d, 0x33, 0x20, 0xcb, 0xeb, 0x6e, 0xfc, 0x11, 0x45, 0xb7,
	0xf0, 0x9b, 0x97, 0xcf, 0x11, 0x71, 0xa9, 0x17, 0x35, 0x71, 0x2a, 0x8f, 0x53, 0x20, 0x40, 0x9b,
	0x1c, 0xa1, 0x05, 0x06, 0x4a, 0xd7, 0x74, 0x9d, 0xce, 0x5e, 0xd4, 0xa4, 0xed, 0x36, 0x6d, 0x45,
	0xe5, 0xc2, 0x84, 0x7f, 0x59, 0x86, 0xf7, 0x78, 0x97, 0x13, 0xde, 0x46, 0x3a, 0xb1, 0xdd, 0x45,
	0x3a, 0x04, 0x4e, 0xbf, 0x10, 0x16, 0x07, 0x5f, 0x08, 0x9f, 0xc2, 0x13, 0x73, 0x15, 0x4e, 0x8d,
	0x94, 0x7b, 0x2a, 0x26, 0x3f, 0xd4, 0x60, 0xb5, 0x5a, 0xaf, 0x0b, 0xcd, 0xdf, 0x51, 0xff, 0x87,
	0xa9, 0xc3, 0xa9, 0xfe, 0x33, 0xd2, 0x8e, 0xf1, 0x9f, 0xd1, 0xb1, 0x6e, 0x25, 0x86, 0xde, 0xd1,
	0xf4, 0xe1, 0x77, 0x34, 0xf3, 0x05, 0x30, 0x47, 0x89, 0x23, 0x6b, 0xd6, 0x15, 0x98, 0x09, 0x68,
	0xd8, 0x73, 0x23, 0xf5, 0x3b, 0x85, 0x18, 0x99, 0x97, 0x60, 0xee, 0xf5, 0xed, 0x0d, 0xdb, 0x8e,
	0xaf, 0xa4, 0x4f, 0x43, 0x1e, 0x9b, 0xb9, 0xf8, 0xf8, 0xcc, 0xf0, 0x61, 0xcd, 0x36, 0x97, 0x60,
	0x61, 0xd3, 0x65, 0xad, 0xfd, 0x24, 0xd2, 0xf2, 0x22, 0xfc, 0x6d, 0x6f, 0x77, 0x08, 0x48, 0x61,
	0xd9, 0x62, 0x9d, 0x1e, 0x75, 0x9d, 0x7d, 0x6a, 0x51, 0x7e, 0x48, 0x91, 0xef, 0x05, 0x98, 0x65,
	0x3d, 0x1e, 0x87, 0x03, 0x84, 0xa9, 0x70, 0x8f, 0x30, 0x81, 0x66, 0x5c, 0x81, 0x25, 0xe6, 0x73,
	0xa9, 0x89, 0xdb, 0x24, 0x41, 0xe4, 0xb4, 0x49, 0x4b, 0x04, 0x7d, 0xdd, 0x5a, 0x54, 0x13, 0x1b,
	0x12, 0x6e, 0x5e, 0x87, 0xb5, 0x78, 0x99, 0x06, 0x75, 0x69, 0x2b, 0x52, 0x53, 0xa9, 0xd7, 0x42,
	0xc7, 0x7e, 0xa4, 0x8c, 0xe9, 0xd8, 0x8f, 0xcc, 0x4d, 0x38, 0x37, 0x96, 0x46, 0xea, 0xe9, 0x1c,
	0x94, 0xd4, 0xd2, 0x89, 0x0a, 0x40, 0x81, 0x6a, 0xb6, 0xf9, 0x1b, 0x0d, 0x96, 0x65, 0xa6, 0xd8,
	0x64, 0x61, 0xf8, 0xa6, 0xba, 0xc3, 0xe6, 0x7a, 0x63, 0x61, 0x98, 0xba, 0xe6, 0xe2, 0xc3, 0x9a,
	0x6d, 0x5c, 0x84, 0x02, 0x4e, 0x24, 0x71, 0x30, 0xf6, 0x06, 0x11, 0xc9, 0xf8, 0x6c, 0x9d, 0x85,
	0xc6, 0x65, 0x58, 0x52, 0xb9, 0x6a, 0xf8, 0xca, 0x7e, 0x41, 0x4e, 0xa4, 0x6f, 0xed, 0xf9, 0xb1,
	0x17, 0x97, 0xa9, 0xe2, 0xc1, 0xb5, 0x20, 0x00, 0x35, 0xdb, 0x58, 0x57, 0xfd, 0x89, 0xc8, 0x32,
	0xf1, 0x72, 0xbc, 0x00, 0x57, 0x8d, 0xc7, 0x47, 0xc9, 0x36, 0xbe, 0xc6, 0x1c, 0x2f, 0xde, 0xc6,
	0x2a, 0x14, 0xf6, 0x48, 0xd8, 0xc4, 0xdf, 0xc7, 0x34, 0xf1, 0xc0, 0xb3, 0x47, 0x70, 0x97, 0x6a,
	0xea, 0x01, 0x73, 0xc4, 0xef, 0x3d, 0x62, 0x8a, 0x53, 0x1b, 0x57, 0x00, 0x38, 0xb8, 0x29, 0x96,
	0xd5, 0x47, 0x2c, 0x5b, 0xe4, 0xf3, 0xd8, 0x01, 0x70, 0x85, 0xd8, 0x01, 0xf3, 0x9b, 0xc9, 0x2d,
	0xda, 0x90, 0x42, 0xf8, 0x6c, 0x9d, 0x85, 0xe6, 0x37, 0x61, 0x76, 0x2b, 0x60, 0x3e, 0xa7, 0x42,
	0xd9, 0xd2, 0x84, 0xda, 0x04, 0xc2, 0x44, 0x01, 0x99, 0xf1, 0x0a, 0xd8, 0x84, 0xe5, 0xb7, 0x43,
	0x1a, 0xec, 0x38, 0x91, 0x9b, 0xfe, 0xa5, 0x6b, 0x4c, 0x1e, 0x8b, 0x1f, 0xa9, 0x33, 0xe9, 0x47,
	0x6a, 0xc9, 0xe3, 0x2e, 0x3d, 0xa0, 0xee, 0xb1, 0x78, 0x88, 0x7f, 0x16, 0x32, 0xe9, 0xff, 0x36,
	0xfe, 0x92, 0x81, 0x32, 0xfe, 0x3a, 0x57, 0x77, 0x89, 0x47, 0x65, 0xc5, 0x37, 0xae, 0x9b, 0x93,
	0x0f, 0xe0, 0x99, 0xe4, 0x01, 0xfc, 0x0a, 0xe8, 0xe1, 0xae, 0x1f, 0xe7, 0x4b, 0xb9, 0xd1, 0x86,
	0xe3, 0x75, 0x5c, 0x2a, 0x22, 0x48, 0x9d, 0x04, 0xa4, 0x6b, 0x71, 0x2c, 0x83, 0xc0, 0xac, 0x38,
	0x7d, 0xd2, 0x50, 0x22, 0x03, 0xbd, 0x36, 0xfe, 0x7f, 0xc5, 0x11, 0x32, 0x55, 0xc4, 0x61, 0x4d,
	0xb5, 0xb2, 0xa5, 0x20, 0x81, 0x70, 0xc7, 0x8c, 0x02, 0x4a, 0xc5, 0x5f, 0x1b, 0xe2, 0x5f, 0xa2,
	0x02, 0x07, 0xe0, 0x5f, 0x1b, 0xeb, 0x30, 0xd7, 0x25, 0x7e, 0x33, 0x6c, 0x51, 0xaf, 0x45, 0x93,
	0xbf, 0xf1, 0x4a, 0x5d, 0xe2, 0x37, 0x10, 0x56, 0xb3, 0x0d, 0x13, 0x0a, 0x76, 0x2f, 0xc0, 0xe0,
	0x85, 0x57, 0x49, 0xba, 0x15, 0x8f, 0xcd, 0xd7, 0x60, 0x71, 0x78, 0xf5, 0xa9, 0x42, 0xf6, 0x19,
	0x58, 0x1d, 0xb1, 0x2d, 0xd9, 0xe4, 0xbe, 0x07, 0xa7, 0xb8, 0x31, 0x37, 0xe4, 0xcf, 0x92, 0xc9,
	0xeb, 0xd4, 0x18, 0x73, 0x8e, 0xfa, 0xe1, 0x32, 0x33, 0xea, 0x87, 0xcb, 0xf5, 0xb7, 0xe2, 0x5b,
	0x6a, 0x7c, 0x74, 0x3c, 0x0b, 0xa0, 0xce, 0x79, 0xd2, 0x7b, 0x4a, 0x08, 0xde, 0x88, 0xa5, 0x4a,
	0xa6, 0xf8, 0xba, 0xa2, 0xce, 0x42, 0x8c, 0xe7, 0x7c, 0x6e, 0xbd, 0x09, 0x73, 0x71, 0x29, 0x8f,
	0x2c, 0xff, 0x1b, 0xe6, 0xe3, 0x0e, 0x43, 0xe4, 0x07, 0xce, 0x36, 0x67, 0xcd, 0xc5, 0x50, 0x7c,
	0x3d, 0xbe, 0x08, 0x0b, 0x09, 0x9a, 0xd2, 0x91, 0x7e, 0x29, 0x67, 0x25, 0xd4, 0xf8, 0x70, 0xbc,
	0xbe, 0x03, 0xa7, 0xd3, 0x2e, 0xb4, 0x9d, 0x2a, 0x86, 0x5f, 0x4a, 0x2a, 0x6a, 0xc7, 0x6b, 0x33,
	0xd9, 0x21, 0xae, 0xa4, 0x7c, 0x28, 0xb5, 0xd7, 0xb8, 0x8e, 0xe6, 0x83, 0xcb, 0x37, 0xa0, 0x18,
	0xbf, 0x6a, 0x19, 0x4b, 0x30, 0x17, 0x0f, 0x1a, 0x11, 0xe9, 0x2f, 0x9e, 0x30, 0x96, 0x61, 0x21,
	0x06, 0xdd, 0xa3, 0x24, 0xd8, 0xed, 0x2f, 0x6a, 0x9b, 0xf5, 0xcf, 0xfe, 0xb4, 0x76, 0xe2, 0x17,
	0x8f, 0xd7, 0xb4, 0x4f, 0x1e, 0xaf, 0x69, 0x9f, 0x3e, 0x5e, 0xd3, 0xfe, 0xf8, 0x78, 0x4d, 0xfb,
	0xf3, 0xe3, 0xb5, 0x13, 0x7f, 0x7b, 0xbc, 0xa6, 0xfd, 0xe8, 0xc9, 0xda, 0x89, 0x4f, 0x9e, 0xac,
	0x69, 0x9f, 0x3e, 0x59, 0x3b, 0xf1, 0xd9, 0x93, 0xb5, 0x13, 0xdf, 0x58, 0x6f, 0x31, 0xc7, 0xbb,
	0x2a, 0x7a, 0x88, 0x6b, 0x2d, 0xd6, 0xed, 0x32, 0xef, 0xda, 0xd0, 0x1f, 0xe4, 0xbb, 0x33, 0x08,
	0xb8, 0xf1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x2c, 0xa9, 0xb0, 0x5b, 0x2e, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_Vec2.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_Ping.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_Pong.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_EnterBattleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_EnterBattleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_SyncNicknameChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_CanChangeSceneRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_CanChangeSceneResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_ManyPushMsg.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_AuthTCPPushToServer.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_AuthTCPPushToClient.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_ChangeHero.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_ChangeHeroPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_ChangeHeroSelfPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_HeroAttrUpdatePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_HeroFashionPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_PlayerPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_HeroesChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_ClientMoveRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_DamagePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_BuffValuePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_BuffInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_BuffPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_SkillPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_RevivePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_ReviveHeroPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_DeadPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_QueryDeadPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MonsterPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MoveOutPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_PosChange.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MoveInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MoveInfo1.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MovePath.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MovePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_ControlMovePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_ControlPoint.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_LeaveAreaRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_LeaveAreaResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_ExitBattle.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_StopMovePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_GetTempBagRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_GetTempBagResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_DrawTempBagRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_DrawTempBagResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_TakeMedicineRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_TakeMedicineResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MedicineItemsPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_DestroyAirWallPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_CurAirWallPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_DungeonPlayerDamageStatPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_DungeonCurStagePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MapSyncNotice.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_TransFormRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_TransFormNotice.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_HeroUpdate.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_CPPChangeFormationRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_CPPChangeFormationResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_GMAddBuffPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_BlockPlayerPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_UnblockPlayerPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_RoguelikeRewardPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_RoguelikeSelectArtifactRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_RoguelikeSelectArtifactResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MonsterBossKillPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_MonsterJoinKillPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_DropItemPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_UserTitleChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_UserLevelChangePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_EnterPlaneDungeonRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_EnterPlaneDungeonResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolCPPBattle_UserAutoSoulSkillPush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolMonsterInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolConditionInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolSingleBattleMonsterList.Get().(proto.Message)
	})
}

var poolCPPBattle = &sync.Pool{New: func() interface{} { return &CPPBattle{} }}

func (m *CPPBattle) ReleasePool() { m.Reset(); poolCPPBattle.Put(m); m = nil }

var poolCPPBattle_Vec2 = &sync.Pool{New: func() interface{} { return &CPPBattle_Vec2{} }}

func (m *CPPBattle_Vec2) ReleasePool() { m.Reset(); poolCPPBattle_Vec2.Put(m); m = nil }

var poolCPPBattle_Ping = &sync.Pool{New: func() interface{} { return &CPPBattle_Ping{} }}

func (m *CPPBattle_Ping) ReleasePool() { m.Reset(); poolCPPBattle_Ping.Put(m); m = nil }

var poolCPPBattle_Pong = &sync.Pool{New: func() interface{} { return &CPPBattle_Pong{} }}

func (m *CPPBattle_Pong) ReleasePool() { m.Reset(); poolCPPBattle_Pong.Put(m); m = nil }

var poolCPPBattle_EnterBattleRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_EnterBattleRequest{} }}

func (m *CPPBattle_EnterBattleRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_EnterBattleRequest.Put(m)
	m = nil
}

var poolCPPBattle_EnterBattleResponse = &sync.Pool{New: func() interface{} { return &CPPBattle_EnterBattleResponse{} }}

func (m *CPPBattle_EnterBattleResponse) ReleasePool() {
	m.Reset()
	poolCPPBattle_EnterBattleResponse.Put(m)
	m = nil
}

var poolCPPBattle_SyncNicknameChangePush = &sync.Pool{New: func() interface{} { return &CPPBattle_SyncNicknameChangePush{} }}

func (m *CPPBattle_SyncNicknameChangePush) ReleasePool() {
	m.Reset()
	poolCPPBattle_SyncNicknameChangePush.Put(m)
	m = nil
}

var poolCPPBattle_CanChangeSceneRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_CanChangeSceneRequest{} }}

func (m *CPPBattle_CanChangeSceneRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_CanChangeSceneRequest.Put(m)
	m = nil
}

var poolCPPBattle_CanChangeSceneResponse = &sync.Pool{New: func() interface{} { return &CPPBattle_CanChangeSceneResponse{} }}

func (m *CPPBattle_CanChangeSceneResponse) ReleasePool() {
	m.Reset()
	poolCPPBattle_CanChangeSceneResponse.Put(m)
	m = nil
}

var poolCPPBattle_ManyPushMsg = &sync.Pool{New: func() interface{} { return &CPPBattle_ManyPushMsg{} }}

func (m *CPPBattle_ManyPushMsg) ReleasePool() { m.Reset(); poolCPPBattle_ManyPushMsg.Put(m); m = nil }

var poolCPPBattle_AuthTCPPushToServer = &sync.Pool{New: func() interface{} { return &CPPBattle_AuthTCPPushToServer{} }}

func (m *CPPBattle_AuthTCPPushToServer) ReleasePool() {
	m.Reset()
	poolCPPBattle_AuthTCPPushToServer.Put(m)
	m = nil
}

var poolCPPBattle_AuthTCPPushToClient = &sync.Pool{New: func() interface{} { return &CPPBattle_AuthTCPPushToClient{} }}

func (m *CPPBattle_AuthTCPPushToClient) ReleasePool() {
	m.Reset()
	poolCPPBattle_AuthTCPPushToClient.Put(m)
	m = nil
}

var poolCPPBattle_ChangeHero = &sync.Pool{New: func() interface{} { return &CPPBattle_ChangeHero{} }}

func (m *CPPBattle_ChangeHero) ReleasePool() { m.Reset(); poolCPPBattle_ChangeHero.Put(m); m = nil }

var poolCPPBattle_ChangeHeroPush = &sync.Pool{New: func() interface{} { return &CPPBattle_ChangeHeroPush{} }}

func (m *CPPBattle_ChangeHeroPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_ChangeHeroPush.Put(m)
	m = nil
}

var poolCPPBattle_ChangeHeroSelfPush = &sync.Pool{New: func() interface{} { return &CPPBattle_ChangeHeroSelfPush{} }}

func (m *CPPBattle_ChangeHeroSelfPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_ChangeHeroSelfPush.Put(m)
	m = nil
}

var poolCPPBattle_HeroAttrUpdatePush = &sync.Pool{New: func() interface{} { return &CPPBattle_HeroAttrUpdatePush{} }}

func (m *CPPBattle_HeroAttrUpdatePush) ReleasePool() {
	m.Reset()
	poolCPPBattle_HeroAttrUpdatePush.Put(m)
	m = nil
}

var poolCPPBattle_HeroFashionPush = &sync.Pool{New: func() interface{} { return &CPPBattle_HeroFashionPush{} }}

func (m *CPPBattle_HeroFashionPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_HeroFashionPush.Put(m)
	m = nil
}

var poolCPPBattle_PlayerPush = &sync.Pool{New: func() interface{} { return &CPPBattle_PlayerPush{} }}

func (m *CPPBattle_PlayerPush) ReleasePool() { m.Reset(); poolCPPBattle_PlayerPush.Put(m); m = nil }

var poolCPPBattle_HeroesChangePush = &sync.Pool{New: func() interface{} { return &CPPBattle_HeroesChangePush{} }}

func (m *CPPBattle_HeroesChangePush) ReleasePool() {
	m.Reset()
	poolCPPBattle_HeroesChangePush.Put(m)
	m = nil
}

var poolCPPBattle_ClientMoveRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_ClientMoveRequest{} }}

func (m *CPPBattle_ClientMoveRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_ClientMoveRequest.Put(m)
	m = nil
}

var poolCPPBattle_DamagePush = &sync.Pool{New: func() interface{} { return &CPPBattle_DamagePush{} }}

func (m *CPPBattle_DamagePush) ReleasePool() { m.Reset(); poolCPPBattle_DamagePush.Put(m); m = nil }

var poolCPPBattle_BuffValuePush = &sync.Pool{New: func() interface{} { return &CPPBattle_BuffValuePush{} }}

func (m *CPPBattle_BuffValuePush) ReleasePool() {
	m.Reset()
	poolCPPBattle_BuffValuePush.Put(m)
	m = nil
}

var poolCPPBattle_BuffInfo = &sync.Pool{New: func() interface{} { return &CPPBattle_BuffInfo{} }}

func (m *CPPBattle_BuffInfo) ReleasePool() { m.Reset(); poolCPPBattle_BuffInfo.Put(m); m = nil }

var poolCPPBattle_BuffPush = &sync.Pool{New: func() interface{} { return &CPPBattle_BuffPush{} }}

func (m *CPPBattle_BuffPush) ReleasePool() { m.Reset(); poolCPPBattle_BuffPush.Put(m); m = nil }

var poolCPPBattle_SkillPush = &sync.Pool{New: func() interface{} { return &CPPBattle_SkillPush{} }}

func (m *CPPBattle_SkillPush) ReleasePool() { m.Reset(); poolCPPBattle_SkillPush.Put(m); m = nil }

var poolCPPBattle_RevivePush = &sync.Pool{New: func() interface{} { return &CPPBattle_RevivePush{} }}

func (m *CPPBattle_RevivePush) ReleasePool() { m.Reset(); poolCPPBattle_RevivePush.Put(m); m = nil }

var poolCPPBattle_ReviveHeroPush = &sync.Pool{New: func() interface{} { return &CPPBattle_ReviveHeroPush{} }}

func (m *CPPBattle_ReviveHeroPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_ReviveHeroPush.Put(m)
	m = nil
}

var poolCPPBattle_DeadPush = &sync.Pool{New: func() interface{} { return &CPPBattle_DeadPush{} }}

func (m *CPPBattle_DeadPush) ReleasePool() { m.Reset(); poolCPPBattle_DeadPush.Put(m); m = nil }

var poolCPPBattle_QueryDeadPush = &sync.Pool{New: func() interface{} { return &CPPBattle_QueryDeadPush{} }}

func (m *CPPBattle_QueryDeadPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_QueryDeadPush.Put(m)
	m = nil
}

var poolCPPBattle_MonsterPush = &sync.Pool{New: func() interface{} { return &CPPBattle_MonsterPush{} }}

func (m *CPPBattle_MonsterPush) ReleasePool() { m.Reset(); poolCPPBattle_MonsterPush.Put(m); m = nil }

var poolCPPBattle_MoveOutPush = &sync.Pool{New: func() interface{} { return &CPPBattle_MoveOutPush{} }}

func (m *CPPBattle_MoveOutPush) ReleasePool() { m.Reset(); poolCPPBattle_MoveOutPush.Put(m); m = nil }

var poolCPPBattle_PosChange = &sync.Pool{New: func() interface{} { return &CPPBattle_PosChange{} }}

func (m *CPPBattle_PosChange) ReleasePool() { m.Reset(); poolCPPBattle_PosChange.Put(m); m = nil }

var poolCPPBattle_MoveInfo = &sync.Pool{New: func() interface{} { return &CPPBattle_MoveInfo{} }}

func (m *CPPBattle_MoveInfo) ReleasePool() { m.Reset(); poolCPPBattle_MoveInfo.Put(m); m = nil }

var poolCPPBattle_MoveInfo1 = &sync.Pool{New: func() interface{} { return &CPPBattle_MoveInfo1{} }}

func (m *CPPBattle_MoveInfo1) ReleasePool() { m.Reset(); poolCPPBattle_MoveInfo1.Put(m); m = nil }

var poolCPPBattle_MovePath = &sync.Pool{New: func() interface{} { return &CPPBattle_MovePath{} }}

func (m *CPPBattle_MovePath) ReleasePool() { m.Reset(); poolCPPBattle_MovePath.Put(m); m = nil }

var poolCPPBattle_MovePush = &sync.Pool{New: func() interface{} { return &CPPBattle_MovePush{} }}

func (m *CPPBattle_MovePush) ReleasePool() { m.Reset(); poolCPPBattle_MovePush.Put(m); m = nil }

var poolCPPBattle_ControlMovePush = &sync.Pool{New: func() interface{} { return &CPPBattle_ControlMovePush{} }}

func (m *CPPBattle_ControlMovePush) ReleasePool() {
	m.Reset()
	poolCPPBattle_ControlMovePush.Put(m)
	m = nil
}

var poolCPPBattle_ControlPoint = &sync.Pool{New: func() interface{} { return &CPPBattle_ControlPoint{} }}

func (m *CPPBattle_ControlPoint) ReleasePool() { m.Reset(); poolCPPBattle_ControlPoint.Put(m); m = nil }

var poolCPPBattle_LeaveAreaRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_LeaveAreaRequest{} }}

func (m *CPPBattle_LeaveAreaRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_LeaveAreaRequest.Put(m)
	m = nil
}

var poolCPPBattle_LeaveAreaResponse = &sync.Pool{New: func() interface{} { return &CPPBattle_LeaveAreaResponse{} }}

func (m *CPPBattle_LeaveAreaResponse) ReleasePool() {
	m.Reset()
	poolCPPBattle_LeaveAreaResponse.Put(m)
	m = nil
}

var poolCPPBattle_ExitBattle = &sync.Pool{New: func() interface{} { return &CPPBattle_ExitBattle{} }}

func (m *CPPBattle_ExitBattle) ReleasePool() { m.Reset(); poolCPPBattle_ExitBattle.Put(m); m = nil }

var poolCPPBattle_StopMovePush = &sync.Pool{New: func() interface{} { return &CPPBattle_StopMovePush{} }}

func (m *CPPBattle_StopMovePush) ReleasePool() { m.Reset(); poolCPPBattle_StopMovePush.Put(m); m = nil }

var poolCPPBattle_GetTempBagRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_GetTempBagRequest{} }}

func (m *CPPBattle_GetTempBagRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_GetTempBagRequest.Put(m)
	m = nil
}

var poolCPPBattle_GetTempBagResponse = &sync.Pool{New: func() interface{} { return &CPPBattle_GetTempBagResponse{} }}

func (m *CPPBattle_GetTempBagResponse) ReleasePool() {
	m.Reset()
	poolCPPBattle_GetTempBagResponse.Put(m)
	m = nil
}

var poolCPPBattle_DrawTempBagRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_DrawTempBagRequest{} }}

func (m *CPPBattle_DrawTempBagRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_DrawTempBagRequest.Put(m)
	m = nil
}

var poolCPPBattle_DrawTempBagResponse = &sync.Pool{New: func() interface{} { return &CPPBattle_DrawTempBagResponse{} }}

func (m *CPPBattle_DrawTempBagResponse) ReleasePool() {
	m.Reset()
	poolCPPBattle_DrawTempBagResponse.Put(m)
	m = nil
}

var poolCPPBattle_TakeMedicineRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_TakeMedicineRequest{} }}

func (m *CPPBattle_TakeMedicineRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_TakeMedicineRequest.Put(m)
	m = nil
}

var poolCPPBattle_TakeMedicineResponse = &sync.Pool{New: func() interface{} { return &CPPBattle_TakeMedicineResponse{} }}

func (m *CPPBattle_TakeMedicineResponse) ReleasePool() {
	m.Reset()
	poolCPPBattle_TakeMedicineResponse.Put(m)
	m = nil
}

var poolCPPBattle_MedicineItemsPush = &sync.Pool{New: func() interface{} { return &CPPBattle_MedicineItemsPush{} }}

func (m *CPPBattle_MedicineItemsPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_MedicineItemsPush.Put(m)
	m = nil
}

var poolCPPBattle_DestroyAirWallPush = &sync.Pool{New: func() interface{} { return &CPPBattle_DestroyAirWallPush{} }}

func (m *CPPBattle_DestroyAirWallPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_DestroyAirWallPush.Put(m)
	m = nil
}

var poolCPPBattle_CurAirWallPush = &sync.Pool{New: func() interface{} { return &CPPBattle_CurAirWallPush{} }}

func (m *CPPBattle_CurAirWallPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_CurAirWallPush.Put(m)
	m = nil
}

var poolCPPBattle_DungeonPlayerDamageStatPush = &sync.Pool{New: func() interface{} { return &CPPBattle_DungeonPlayerDamageStatPush{} }}

func (m *CPPBattle_DungeonPlayerDamageStatPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_DungeonPlayerDamageStatPush.Put(m)
	m = nil
}

var poolCPPBattle_DungeonCurStagePush = &sync.Pool{New: func() interface{} { return &CPPBattle_DungeonCurStagePush{} }}

func (m *CPPBattle_DungeonCurStagePush) ReleasePool() {
	m.Reset()
	poolCPPBattle_DungeonCurStagePush.Put(m)
	m = nil
}

var poolCPPBattle_MapSyncNotice = &sync.Pool{New: func() interface{} { return &CPPBattle_MapSyncNotice{} }}

func (m *CPPBattle_MapSyncNotice) ReleasePool() {
	m.Reset()
	poolCPPBattle_MapSyncNotice.Put(m)
	m = nil
}

var poolCPPBattle_TransFormRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_TransFormRequest{} }}

func (m *CPPBattle_TransFormRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_TransFormRequest.Put(m)
	m = nil
}

var poolCPPBattle_TransFormNotice = &sync.Pool{New: func() interface{} { return &CPPBattle_TransFormNotice{} }}

func (m *CPPBattle_TransFormNotice) ReleasePool() {
	m.Reset()
	poolCPPBattle_TransFormNotice.Put(m)
	m = nil
}

var poolCPPBattle_HeroUpdate = &sync.Pool{New: func() interface{} { return &CPPBattle_HeroUpdate{} }}

func (m *CPPBattle_HeroUpdate) ReleasePool() { m.Reset(); poolCPPBattle_HeroUpdate.Put(m); m = nil }

var poolCPPBattle_CPPChangeFormationRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_CPPChangeFormationRequest{} }}

func (m *CPPBattle_CPPChangeFormationRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_CPPChangeFormationRequest.Put(m)
	m = nil
}

var poolCPPBattle_CPPChangeFormationResponse = &sync.Pool{New: func() interface{} { return &CPPBattle_CPPChangeFormationResponse{} }}

func (m *CPPBattle_CPPChangeFormationResponse) ReleasePool() {
	m.Reset()
	poolCPPBattle_CPPChangeFormationResponse.Put(m)
	m = nil
}

var poolCPPBattle_GMAddBuffPush = &sync.Pool{New: func() interface{} { return &CPPBattle_GMAddBuffPush{} }}

func (m *CPPBattle_GMAddBuffPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_GMAddBuffPush.Put(m)
	m = nil
}

var poolCPPBattle_BlockPlayerPush = &sync.Pool{New: func() interface{} { return &CPPBattle_BlockPlayerPush{} }}

func (m *CPPBattle_BlockPlayerPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_BlockPlayerPush.Put(m)
	m = nil
}

var poolCPPBattle_UnblockPlayerPush = &sync.Pool{New: func() interface{} { return &CPPBattle_UnblockPlayerPush{} }}

func (m *CPPBattle_UnblockPlayerPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_UnblockPlayerPush.Put(m)
	m = nil
}

var poolCPPBattle_RoguelikeRewardPush = &sync.Pool{New: func() interface{} { return &CPPBattle_RoguelikeRewardPush{} }}

func (m *CPPBattle_RoguelikeRewardPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_RoguelikeRewardPush.Put(m)
	m = nil
}

var poolCPPBattle_RoguelikeSelectArtifactRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_RoguelikeSelectArtifactRequest{} }}

func (m *CPPBattle_RoguelikeSelectArtifactRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_RoguelikeSelectArtifactRequest.Put(m)
	m = nil
}

var poolCPPBattle_RoguelikeSelectArtifactResponse = &sync.Pool{New: func() interface{} { return &CPPBattle_RoguelikeSelectArtifactResponse{} }}

func (m *CPPBattle_RoguelikeSelectArtifactResponse) ReleasePool() {
	m.Reset()
	poolCPPBattle_RoguelikeSelectArtifactResponse.Put(m)
	m = nil
}

var poolCPPBattle_MonsterBossKillPush = &sync.Pool{New: func() interface{} { return &CPPBattle_MonsterBossKillPush{} }}

func (m *CPPBattle_MonsterBossKillPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_MonsterBossKillPush.Put(m)
	m = nil
}

var poolCPPBattle_MonsterJoinKillPush = &sync.Pool{New: func() interface{} { return &CPPBattle_MonsterJoinKillPush{} }}

func (m *CPPBattle_MonsterJoinKillPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_MonsterJoinKillPush.Put(m)
	m = nil
}

var poolCPPBattle_DropItemPush = &sync.Pool{New: func() interface{} { return &CPPBattle_DropItemPush{} }}

func (m *CPPBattle_DropItemPush) ReleasePool() { m.Reset(); poolCPPBattle_DropItemPush.Put(m); m = nil }

var poolCPPBattle_UserTitleChangePush = &sync.Pool{New: func() interface{} { return &CPPBattle_UserTitleChangePush{} }}

func (m *CPPBattle_UserTitleChangePush) ReleasePool() {
	m.Reset()
	poolCPPBattle_UserTitleChangePush.Put(m)
	m = nil
}

var poolCPPBattle_UserLevelChangePush = &sync.Pool{New: func() interface{} { return &CPPBattle_UserLevelChangePush{} }}

func (m *CPPBattle_UserLevelChangePush) ReleasePool() {
	m.Reset()
	poolCPPBattle_UserLevelChangePush.Put(m)
	m = nil
}

var poolCPPBattle_EnterPlaneDungeonRequest = &sync.Pool{New: func() interface{} { return &CPPBattle_EnterPlaneDungeonRequest{} }}

func (m *CPPBattle_EnterPlaneDungeonRequest) ReleasePool() {
	m.Reset()
	poolCPPBattle_EnterPlaneDungeonRequest.Put(m)
	m = nil
}

var poolCPPBattle_EnterPlaneDungeonResponse = &sync.Pool{New: func() interface{} { return &CPPBattle_EnterPlaneDungeonResponse{} }}

func (m *CPPBattle_EnterPlaneDungeonResponse) ReleasePool() {
	m.Reset()
	poolCPPBattle_EnterPlaneDungeonResponse.Put(m)
	m = nil
}

var poolCPPBattle_UserAutoSoulSkillPush = &sync.Pool{New: func() interface{} { return &CPPBattle_UserAutoSoulSkillPush{} }}

func (m *CPPBattle_UserAutoSoulSkillPush) ReleasePool() {
	m.Reset()
	poolCPPBattle_UserAutoSoulSkillPush.Put(m)
	m = nil
}

var poolMonsterInfo = &sync.Pool{New: func() interface{} { return &MonsterInfo{} }}

func (m *MonsterInfo) ReleasePool() { m.Reset(); poolMonsterInfo.Put(m); m = nil }

var poolConditionInfo = &sync.Pool{New: func() interface{} { return &ConditionInfo{} }}

func (m *ConditionInfo) ReleasePool() { m.Reset(); poolConditionInfo.Put(m); m = nil }

var poolSingleBattleMonsterList = &sync.Pool{New: func() interface{} { return &SingleBattleMonsterList{} }}

func (m *SingleBattleMonsterList) ReleasePool() {
	m.Reset()
	poolSingleBattleMonsterList.Put(m)
	m = nil
}
func (x ReviveTyp) String() string {
	s, ok := ReviveTyp_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CPPBattle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle)
	if !ok {
		that2, ok := that.(CPPBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_Vec2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_Vec2)
	if !ok {
		that2, ok := that.(CPPBattle_Vec2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *CPPBattle_Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_Ping)
	if !ok {
		that2, ok := that.(CPPBattle_Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientTime != that1.ClientTime {
		return false
	}
	return true
}
func (this *CPPBattle_Pong) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_Pong)
	if !ok {
		that2, ok := that.(CPPBattle_Pong)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientTime != that1.ClientTime {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_EnterBattleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_EnterBattleRequest)
	if !ok {
		that2, ok := that.(CPPBattle_EnterBattleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if !this.Role.Equal(that1.Role) {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if len(this.Medicine) != len(that1.Medicine) {
		return false
	}
	for i := range this.Medicine {
		if !this.Medicine[i].Equal(that1.Medicine[i]) {
			return false
		}
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.AutoSouleSkill != that1.AutoSouleSkill {
		return false
	}
	return true
}
func (this *CPPBattle_EnterBattleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_EnterBattleResponse)
	if !ok {
		that2, ok := that.(CPPBattle_EnterBattleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.MapId != that1.MapId {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_SyncNicknameChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_SyncNicknameChangePush)
	if !ok {
		that2, ok := that.(CPPBattle_SyncNicknameChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	return true
}
func (this *CPPBattle_CanChangeSceneRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_CanChangeSceneRequest)
	if !ok {
		that2, ok := that.(CPPBattle_CanChangeSceneRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *CPPBattle_CanChangeSceneResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_CanChangeSceneResponse)
	if !ok {
		that2, ok := that.(CPPBattle_CanChangeSceneResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CanStatus != that1.CanStatus {
		return false
	}
	return true
}
func (this *CPPBattle_ManyPushMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_ManyPushMsg)
	if !ok {
		that2, ok := that.(CPPBattle_ManyPushMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *CPPBattle_AuthTCPPushToServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_AuthTCPPushToServer)
	if !ok {
		that2, ok := that.(CPPBattle_AuthTCPPushToServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	return true
}
func (this *CPPBattle_AuthTCPPushToClient) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_AuthTCPPushToClient)
	if !ok {
		that2, ok := that.(CPPBattle_AuthTCPPushToClient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *CPPBattle_ChangeHero) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_ChangeHero)
	if !ok {
		that2, ok := that.(CPPBattle_ChangeHero)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_ChangeHeroPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_ChangeHeroPush)
	if !ok {
		that2, ok := that.(CPPBattle_ChangeHeroPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if len(this.Equip) != len(that1.Equip) {
		return false
	}
	for i := range this.Equip {
		if this.Equip[i] != that1.Equip[i] {
			return false
		}
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *CPPBattle_ChangeHeroSelfPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_ChangeHeroSelfPush)
	if !ok {
		that2, ok := that.(CPPBattle_ChangeHeroSelfPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.RemainCd != that1.RemainCd {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	return true
}
func (this *CPPBattle_HeroAttrUpdatePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_HeroAttrUpdatePush)
	if !ok {
		that2, ok := that.(CPPBattle_HeroAttrUpdatePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *CPPBattle_HeroFashionPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_HeroFashionPush)
	if !ok {
		that2, ok := that.(CPPBattle_HeroFashionPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BattleServerId != that1.BattleServerId {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.HeroConfigId != that1.HeroConfigId {
		return false
	}
	if this.Fashion != that1.Fashion {
		return false
	}
	return true
}
func (this *CPPBattle_PlayerPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_PlayerPush)
	if !ok {
		that2, ok := that.(CPPBattle_PlayerPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.SectName != that1.SectName {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.HeroIndex != that1.HeroIndex {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.BuffSpeed != that1.BuffSpeed {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_HeroesChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_HeroesChangePush)
	if !ok {
		that2, ok := that.(CPPBattle_HeroesChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.HeroIndex != that1.HeroIndex {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.ChangeType != that1.ChangeType {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *CPPBattle_ClientMoveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_ClientMoveRequest)
	if !ok {
		that2, ok := that.(CPPBattle_ClientMoveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if !this.DestOrDir.Equal(that1.DestOrDir) {
		return false
	}
	if this.IsManual != that1.IsManual {
		return false
	}
	return true
}
func (this *CPPBattle_DamagePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_DamagePush)
	if !ok {
		that2, ok := that.(CPPBattle_DamagePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackerId != that1.AttackerId {
		return false
	}
	if this.DefenderId != that1.DefenderId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.SkillViewIndex != that1.SkillViewIndex {
		return false
	}
	if this.SkillIndex != that1.SkillIndex {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if this.DamageColor != that1.DamageColor {
		return false
	}
	if this.IsDodge != that1.IsDodge {
		return false
	}
	if this.IsParry != that1.IsParry {
		return false
	}
	if this.AttackerConfigId != that1.AttackerConfigId {
		return false
	}
	if this.DefenderConfigId != that1.DefenderConfigId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_BuffValuePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_BuffValuePush)
	if !ok {
		that2, ok := that.(CPPBattle_BuffValuePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	if this.CasterId != that1.CasterId {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if this.DamageColor != that1.DamageColor {
		return false
	}
	if this.IsDodge != that1.IsDodge {
		return false
	}
	if this.IsParry != that1.IsParry {
		return false
	}
	if this.CasterConfigId != that1.CasterConfigId {
		return false
	}
	if this.OwnerConfigId != that1.OwnerConfigId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_BuffInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_BuffInfo)
	if !ok {
		that2, ok := that.(CPPBattle_BuffInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.RemainTime != that1.RemainTime {
		return false
	}
	if this.OverlayCount != that1.OverlayCount {
		return false
	}
	return true
}
func (this *CPPBattle_BuffPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_BuffPush)
	if !ok {
		that2, ok := that.(CPPBattle_BuffPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectId != that1.ObjectId {
		return false
	}
	if len(this.Buffs) != len(that1.Buffs) {
		return false
	}
	for i := range this.Buffs {
		if !this.Buffs[i].Equal(that1.Buffs[i]) {
			return false
		}
	}
	if this.HeroConfigId != that1.HeroConfigId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_SkillPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_SkillPush)
	if !ok {
		that2, ok := that.(CPPBattle_SkillPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackerId != that1.AttackerId {
		return false
	}
	if this.DefenderId != that1.DefenderId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.SkillViewIndex != that1.SkillViewIndex {
		return false
	}
	if this.AttackerHeroId != that1.AttackerHeroId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_RevivePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_RevivePush)
	if !ok {
		that2, ok := that.(CPPBattle_RevivePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.ReviveTyp != that1.ReviveTyp {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_ReviveHeroPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_ReviveHeroPush)
	if !ok {
		that2, ok := that.(CPPBattle_ReviveHeroPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_DeadPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_DeadPush)
	if !ok {
		that2, ok := that.(CPPBattle_DeadPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AttackerId != that1.AttackerId {
		return false
	}
	if this.DeadId != that1.DeadId {
		return false
	}
	if this.SkillId != that1.SkillId {
		return false
	}
	if this.SkillViewIndex != that1.SkillViewIndex {
		return false
	}
	if this.SkillIndex != that1.SkillIndex {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if len(this.Drop) != len(that1.Drop) {
		return false
	}
	for i := range this.Drop {
		if this.Drop[i] != that1.Drop[i] {
			return false
		}
	}
	if this.AttackerConfigId != that1.AttackerConfigId {
		return false
	}
	if this.DefenderConfigId != that1.DefenderConfigId {
		return false
	}
	if this.ReviveCost != that1.ReviveCost {
		return false
	}
	if this.ReviveTime != that1.ReviveTime {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_QueryDeadPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_QueryDeadPush)
	if !ok {
		that2, ok := that.(CPPBattle_QueryDeadPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeadId != that1.DeadId {
		return false
	}
	if this.ReviveCost != that1.ReviveCost {
		return false
	}
	if this.ReviveTime != that1.ReviveTime {
		return false
	}
	return true
}
func (this *CPPBattle_MonsterPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MonsterPush)
	if !ok {
		that2, ok := that.(CPPBattle_MonsterPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.HeroIndex != that1.HeroIndex {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.BuffSpeed != that1.BuffSpeed {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_MoveOutPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MoveOutPush)
	if !ok {
		that2, ok := that.(CPPBattle_MoveOutPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ObjId) != len(that1.ObjId) {
		return false
	}
	for i := range this.ObjId {
		if this.ObjId[i] != that1.ObjId[i] {
			return false
		}
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_PosChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_PosChange)
	if !ok {
		that2, ok := that.(CPPBattle_PosChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_MoveInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MoveInfo)
	if !ok {
		that2, ok := that.(CPPBattle_MoveInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_MoveInfo1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MoveInfo1)
	if !ok {
		that2, ok := that.(CPPBattle_MoveInfo1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *CPPBattle_MovePath) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MovePath)
	if !ok {
		that2, ok := that.(CPPBattle_MovePath)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if len(this.Paths) != len(that1.Paths) {
		return false
	}
	for i := range this.Paths {
		if !this.Paths[i].Equal(that1.Paths[i]) {
			return false
		}
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	return true
}
func (this *CPPBattle_MovePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MovePush)
	if !ok {
		that2, ok := that.(CPPBattle_MovePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Speed != that1.Speed {
		return false
	}
	if this.MoveTime != that1.MoveTime {
		return false
	}
	if this.BuffSpeed != that1.BuffSpeed {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if this.CustomSpeed != that1.CustomSpeed {
		return false
	}
	if this.CustomTime != that1.CustomTime {
		return false
	}
	return true
}
func (this *CPPBattle_ControlMovePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_ControlMovePush)
	if !ok {
		that2, ok := that.(CPPBattle_ControlMovePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	if len(this.Ps) != len(that1.Ps) {
		return false
	}
	for i := range this.Ps {
		if !this.Ps[i].Equal(that1.Ps[i]) {
			return false
		}
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_ControlPoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_ControlPoint)
	if !ok {
		that2, ok := that.(CPPBattle_ControlPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *CPPBattle_LeaveAreaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_LeaveAreaRequest)
	if !ok {
		that2, ok := that.(CPPBattle_LeaveAreaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_LeaveAreaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_LeaveAreaResponse)
	if !ok {
		that2, ok := that.(CPPBattle_LeaveAreaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_ExitBattle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_ExitBattle)
	if !ok {
		that2, ok := that.(CPPBattle_ExitBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_StopMovePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_StopMovePush)
	if !ok {
		that2, ok := that.(CPPBattle_StopMovePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_GetTempBagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_GetTempBagRequest)
	if !ok {
		that2, ok := that.(CPPBattle_GetTempBagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_GetTempBagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_GetTempBagResponse)
	if !ok {
		that2, ok := that.(CPPBattle_GetTempBagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bag.Equal(that1.Bag) {
		return false
	}
	return true
}
func (this *CPPBattle_DrawTempBagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_DrawTempBagRequest)
	if !ok {
		that2, ok := that.(CPPBattle_DrawTempBagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_DrawTempBagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_DrawTempBagResponse)
	if !ok {
		that2, ok := that.(CPPBattle_DrawTempBagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	return true
}
func (this *CPPBattle_TakeMedicineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_TakeMedicineRequest)
	if !ok {
		that2, ok := that.(CPPBattle_TakeMedicineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CdTime != that1.CdTime {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	return true
}
func (this *CPPBattle_TakeMedicineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_TakeMedicineResponse)
	if !ok {
		that2, ok := that.(CPPBattle_TakeMedicineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_MedicineItemsPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MedicineItemsPush)
	if !ok {
		that2, ok := that.(CPPBattle_MedicineItemsPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Medicine) != len(that1.Medicine) {
		return false
	}
	for i := range this.Medicine {
		if !this.Medicine[i].Equal(that1.Medicine[i]) {
			return false
		}
	}
	return true
}
func (this *CPPBattle_DestroyAirWallPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_DestroyAirWallPush)
	if !ok {
		that2, ok := that.(CPPBattle_DestroyAirWallPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AirWallId != that1.AirWallId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_CurAirWallPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_CurAirWallPush)
	if !ok {
		that2, ok := that.(CPPBattle_CurAirWallPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AirWalls) != len(that1.AirWalls) {
		return false
	}
	for i := range this.AirWalls {
		if this.AirWalls[i] != that1.AirWalls[i] {
			return false
		}
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_DungeonPlayerDamageStatPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_DungeonPlayerDamageStatPush)
	if !ok {
		that2, ok := that.(CPPBattle_DungeonPlayerDamageStatPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DamageStat) != len(that1.DamageStat) {
		return false
	}
	for i := range this.DamageStat {
		if this.DamageStat[i] != that1.DamageStat[i] {
			return false
		}
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_DungeonCurStagePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_DungeonCurStagePush)
	if !ok {
		that2, ok := that.(CPPBattle_DungeonCurStagePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if this.Conditions[i] != that1.Conditions[i] {
			return false
		}
	}
	if len(this.KillCounts) != len(that1.KillCounts) {
		return false
	}
	for i := range this.KillCounts {
		if this.KillCounts[i] != that1.KillCounts[i] {
			return false
		}
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	return true
}
func (this *CPPBattle_MapSyncNotice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MapSyncNotice)
	if !ok {
		that2, ok := that.(CPPBattle_MapSyncNotice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerFrame != that1.ServerFrame {
		return false
	}
	if len(this.PlayerList) != len(that1.PlayerList) {
		return false
	}
	for i := range this.PlayerList {
		if !this.PlayerList[i].Equal(that1.PlayerList[i]) {
			return false
		}
	}
	if len(this.MonsterList) != len(that1.MonsterList) {
		return false
	}
	for i := range this.MonsterList {
		if !this.MonsterList[i].Equal(that1.MonsterList[i]) {
			return false
		}
	}
	if len(this.MoveOutList) != len(that1.MoveOutList) {
		return false
	}
	for i := range this.MoveOutList {
		if !this.MoveOutList[i].Equal(that1.MoveOutList[i]) {
			return false
		}
	}
	if len(this.MoveList) != len(that1.MoveList) {
		return false
	}
	for i := range this.MoveList {
		if !this.MoveList[i].Equal(that1.MoveList[i]) {
			return false
		}
	}
	return true
}
func (this *CPPBattle_TransFormRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_TransFormRequest)
	if !ok {
		that2, ok := that.(CPPBattle_TransFormRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	return true
}
func (this *CPPBattle_TransFormNotice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_TransFormNotice)
	if !ok {
		that2, ok := that.(CPPBattle_TransFormNotice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Towards.Equal(that1.Towards) {
		return false
	}
	return true
}
func (this *CPPBattle_HeroUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_HeroUpdate)
	if !ok {
		that2, ok := that.(CPPBattle_HeroUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if len(this.Attr) != len(that1.Attr) {
		return false
	}
	for i := range this.Attr {
		if this.Attr[i] != that1.Attr[i] {
			return false
		}
	}
	if len(this.Equip) != len(that1.Equip) {
		return false
	}
	for i := range this.Equip {
		if this.Equip[i] != that1.Equip[i] {
			return false
		}
	}
	if len(this.SkillIds) != len(that1.SkillIds) {
		return false
	}
	for i := range this.SkillIds {
		if !this.SkillIds[i].Equal(that1.SkillIds[i]) {
			return false
		}
	}
	if this.IsSkillChange != that1.IsSkillChange {
		return false
	}
	if len(this.Buff) != len(that1.Buff) {
		return false
	}
	for i := range this.Buff {
		if this.Buff[i] != that1.Buff[i] {
			return false
		}
	}
	if len(this.TalentBuff) != len(that1.TalentBuff) {
		return false
	}
	for i := range this.TalentBuff {
		if this.TalentBuff[i] != that1.TalentBuff[i] {
			return false
		}
	}
	if len(this.EquipLightEffect) != len(that1.EquipLightEffect) {
		return false
	}
	for i := range this.EquipLightEffect {
		if this.EquipLightEffect[i] != that1.EquipLightEffect[i] {
			return false
		}
	}
	if this.Fashion != that1.Fashion {
		return false
	}
	return true
}
func (this *CPPBattle_CPPChangeFormationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_CPPChangeFormationRequest)
	if !ok {
		that2, ok := that.(CPPBattle_CPPChangeFormationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Role.Equal(that1.Role) {
		return false
	}
	if len(this.Heroes) != len(that1.Heroes) {
		return false
	}
	for i := range this.Heroes {
		if !this.Heroes[i].Equal(that1.Heroes[i]) {
			return false
		}
	}
	if this.ChangeType != that1.ChangeType {
		return false
	}
	return true
}
func (this *CPPBattle_CPPChangeFormationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_CPPChangeFormationResponse)
	if !ok {
		that2, ok := that.(CPPBattle_CPPChangeFormationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *CPPBattle_GMAddBuffPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_GMAddBuffPush)
	if !ok {
		that2, ok := that.(CPPBattle_GMAddBuffPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BuffId != that1.BuffId {
		return false
	}
	return true
}
func (this *CPPBattle_BlockPlayerPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_BlockPlayerPush)
	if !ok {
		that2, ok := that.(CPPBattle_BlockPlayerPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_UnblockPlayerPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_UnblockPlayerPush)
	if !ok {
		that2, ok := that.(CPPBattle_UnblockPlayerPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_RoguelikeRewardPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_RoguelikeRewardPush)
	if !ok {
		that2, ok := that.(CPPBattle_RoguelikeRewardPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OuterReward != that1.OuterReward {
		return false
	}
	if len(this.OptionalArtifact) != len(that1.OptionalArtifact) {
		return false
	}
	for i := range this.OptionalArtifact {
		if this.OptionalArtifact[i] != that1.OptionalArtifact[i] {
			return false
		}
	}
	return true
}
func (this *CPPBattle_RoguelikeSelectArtifactRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_RoguelikeSelectArtifactRequest)
	if !ok {
		that2, ok := that.(CPPBattle_RoguelikeSelectArtifactRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Idx != that1.Idx {
		return false
	}
	return true
}
func (this *CPPBattle_RoguelikeSelectArtifactResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_RoguelikeSelectArtifactResponse)
	if !ok {
		that2, ok := that.(CPPBattle_RoguelikeSelectArtifactResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ArtifactId != that1.ArtifactId {
		return false
	}
	return true
}
func (this *CPPBattle_MonsterBossKillPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MonsterBossKillPush)
	if !ok {
		that2, ok := that.(CPPBattle_MonsterBossKillPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BossId != that1.BossId {
		return false
	}
	if !this.BossPos.Equal(that1.BossPos) {
		return false
	}
	if this.MonsterConfigId != that1.MonsterConfigId {
		return false
	}
	if this.KillerId != that1.KillerId {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *CPPBattle_MonsterJoinKillPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_MonsterJoinKillPush)
	if !ok {
		that2, ok := that.(CPPBattle_MonsterJoinKillPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HasKill != that1.HasKill {
		return false
	}
	if this.HasJoin != that1.HasJoin {
		return false
	}
	if len(this.JoinItems) != len(that1.JoinItems) {
		return false
	}
	for i := range this.JoinItems {
		if !this.JoinItems[i].Equal(that1.JoinItems[i]) {
			return false
		}
	}
	if !this.DropPos.Equal(that1.DropPos) {
		return false
	}
	return true
}
func (this *CPPBattle_DropItemPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_DropItemPush)
	if !ok {
		that2, ok := that.(CPPBattle_DropItemPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DropPos.Equal(that1.DropPos) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *CPPBattle_UserTitleChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_UserTitleChangePush)
	if !ok {
		that2, ok := that.(CPPBattle_UserTitleChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *CPPBattle_UserLevelChangePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_UserLevelChangePush)
	if !ok {
		that2, ok := that.(CPPBattle_UserLevelChangePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *CPPBattle_EnterPlaneDungeonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_EnterPlaneDungeonRequest)
	if !ok {
		that2, ok := that.(CPPBattle_EnterPlaneDungeonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if !this.Sbp.Equal(that1.Sbp) {
		return false
	}
	if len(this.RewardItems) != len(that1.RewardItems) {
		return false
	}
	for i := range this.RewardItems {
		if this.RewardItems[i] != that1.RewardItems[i] {
			return false
		}
	}
	if this.TreeName != that1.TreeName {
		return false
	}
	if this.MapScenceId != that1.MapScenceId {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *CPPBattle_EnterPlaneDungeonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_EnterPlaneDungeonResponse)
	if !ok {
		that2, ok := that.(CPPBattle_EnterPlaneDungeonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CPPBattle_UserAutoSoulSkillPush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPPBattle_UserAutoSoulSkillPush)
	if !ok {
		that2, ok := that.(CPPBattle_UserAutoSoulSkillPush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjId != that1.ObjId {
		return false
	}
	if this.AutoSouleSkill != that1.AutoSouleSkill {
		return false
	}
	return true
}
func (this *MonsterInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MonsterInfo)
	if !ok {
		that2, ok := that.(MonsterInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MonsterId != that1.MonsterId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	return true
}
func (this *ConditionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConditionInfo)
	if !ok {
		that2, ok := that.(ConditionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConditionType != that1.ConditionType {
		return false
	}
	if len(this.ConditionValue) != len(that1.ConditionValue) {
		return false
	}
	for i := range this.ConditionValue {
		if this.ConditionValue[i] != that1.ConditionValue[i] {
			return false
		}
	}
	return true
}
func (this *SingleBattleMonsterList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleBattleMonsterList)
	if !ok {
		that2, ok := that.(SingleBattleMonsterList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MonsterInfo) != len(that1.MonsterInfo) {
		return false
	}
	for i := range this.MonsterInfo {
		if !this.MonsterInfo[i].Equal(that1.MonsterInfo[i]) {
			return false
		}
	}
	return true
}
func (m *CPPBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_Vec2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_Vec2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_Vec2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientTime != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ClientTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_Pong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_Pong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerTime != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ServerTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ClientTime != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ClientTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_EnterBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_EnterBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_EnterBattleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoSouleSkill != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.AutoSouleSkill))
		i--
		dAtA[i] = 0x40
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Medicine) > 0 {
		for k := range m.Medicine {
			v := m.Medicine[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCppBattle(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x18
	}
	if m.MapId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_EnterBattleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_EnterBattleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_EnterBattleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Port != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MapId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.MapId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_SyncNicknameChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_SyncNicknameChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_SyncNicknameChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_CanChangeSceneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_CanChangeSceneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_CanChangeSceneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_CanChangeSceneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_CanChangeSceneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_CanChangeSceneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanStatus != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.CanStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_ManyPushMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_ManyPushMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_ManyPushMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_AuthTCPPushToServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_AuthTCPPushToServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_AuthTCPPushToServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_AuthTCPPushToClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_AuthTCPPushToClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_AuthTCPPushToClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_ChangeHero) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_ChangeHero) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_ChangeHero) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_ChangeHeroPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_ChangeHeroPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_ChangeHeroPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Equip) > 0 {
		for k := range m.Equip {
			v := m.Equip[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_ChangeHeroSelfPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_ChangeHeroSelfPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_ChangeHeroSelfPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x18
	}
	if m.RemainCd != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.RemainCd))
		i--
		dAtA[i] = 0x10
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_HeroAttrUpdatePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_HeroAttrUpdatePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_HeroAttrUpdatePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x28
	}
	if m.Title != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0x12
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_HeroFashionPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_HeroFashionPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_HeroFashionPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fashion != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Fashion))
		i--
		dAtA[i] = 0x20
	}
	if m.HeroConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.HeroConfigId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if m.BattleServerId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_PlayerPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_PlayerPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_PlayerPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.BuffSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuffSpeed))))
		i--
		dAtA[i] = 0x55
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x4d
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.HeroIndex != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.HeroIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Level != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SectName) > 0 {
		i -= len(m.SectName)
		copy(dAtA[i:], m.SectName)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.SectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_HeroesChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_HeroesChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_HeroesChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Title != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x30
	}
	if m.ChangeType != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ChangeType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x1d
	}
	if m.HeroIndex != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.HeroIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_ClientMoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_ClientMoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_ClientMoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsManual != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.IsManual))
		i--
		dAtA[i] = 0x18
	}
	if m.DestOrDir != nil {
		{
			size, err := m.DestOrDir.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Typ != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_DamagePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_DamagePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_DamagePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.DefenderConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.DefenderConfigId))
		i--
		dAtA[i] = 0x60
	}
	if m.AttackerConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.AttackerConfigId))
		i--
		dAtA[i] = 0x58
	}
	if m.IsParry {
		i--
		if m.IsParry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsDodge {
		i--
		if m.IsDodge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.DamageColor != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.DamageColor))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Damage != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x30
	}
	if m.SkillIndex != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.SkillIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.SkillViewIndex != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.SkillViewIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DefenderId) > 0 {
		i -= len(m.DefenderId)
		copy(dAtA[i:], m.DefenderId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.DefenderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackerId) > 0 {
		i -= len(m.AttackerId)
		copy(dAtA[i:], m.AttackerId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.AttackerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_BuffValuePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_BuffValuePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_BuffValuePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.OwnerConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.OwnerConfigId))
		i--
		dAtA[i] = 0x50
	}
	if m.CasterConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.CasterConfigId))
		i--
		dAtA[i] = 0x48
	}
	if m.IsParry {
		i--
		if m.IsParry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.IsDodge {
		i--
		if m.IsDodge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DamageColor != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.DamageColor))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ValueType != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x20
	}
	if m.Value != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CasterId) > 0 {
		i -= len(m.CasterId)
		copy(dAtA[i:], m.CasterId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.CasterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_BuffInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_BuffInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_BuffInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OverlayCount != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.OverlayCount))
		i--
		dAtA[i] = 0x20
	}
	if m.RemainTime != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.RemainTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_BuffPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_BuffPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_BuffPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.HeroConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.HeroConfigId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Buffs) > 0 {
		for k := range m.Buffs {
			v := m.Buffs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCppBattle(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_SkillPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_SkillPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_SkillPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.AttackerHeroId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.AttackerHeroId))
		i--
		dAtA[i] = 0x28
	}
	if m.SkillViewIndex != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.SkillViewIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DefenderId) > 0 {
		i -= len(m.DefenderId)
		copy(dAtA[i:], m.DefenderId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.DefenderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackerId) > 0 {
		i -= len(m.AttackerId)
		copy(dAtA[i:], m.AttackerId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.AttackerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_RevivePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_RevivePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_RevivePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ReviveTyp != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ReviveTyp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_ReviveHeroPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_ReviveHeroPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_ReviveHeroPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_DeadPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_DeadPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_DeadPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.ReviveTime != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ReviveTime))
		i--
		dAtA[i] = 0x58
	}
	if m.ReviveCost != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ReviveCost))
		i--
		dAtA[i] = 0x50
	}
	if m.DefenderConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.DefenderConfigId))
		i--
		dAtA[i] = 0x48
	}
	if m.AttackerConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.AttackerConfigId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Drop) > 0 {
		for k := range m.Drop {
			v := m.Drop[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Damage != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x30
	}
	if m.SkillIndex != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.SkillIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.SkillViewIndex != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.SkillViewIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.SkillId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.SkillId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeadId) > 0 {
		i -= len(m.DeadId)
		copy(dAtA[i:], m.DeadId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.DeadId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttackerId) > 0 {
		i -= len(m.AttackerId)
		copy(dAtA[i:], m.AttackerId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.AttackerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_QueryDeadPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_QueryDeadPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_QueryDeadPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReviveTime != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ReviveTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ReviveCost != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ReviveCost))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeadId) > 0 {
		i -= len(m.DeadId)
		copy(dAtA[i:], m.DeadId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.DeadId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MonsterPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MonsterPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MonsterPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.BuffSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuffSpeed))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x35
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HeroIndex != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.HeroIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MoveOutPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MoveOutPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MoveOutPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ObjId) > 0 {
		for iNdEx := len(m.ObjId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObjId[iNdEx])
			copy(dAtA[i:], m.ObjId[iNdEx])
			i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_PosChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_PosChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_PosChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MoveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MoveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MoveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MoveInfo1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MoveInfo1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MoveInfo1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MovePath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MovePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MovePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Paths) > 0 {
		for iNdEx := len(m.Paths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Paths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MovePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MovePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MovePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CustomTime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CustomTime))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb5
	}
	if m.CustomSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CustomSpeed))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xad
	}
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.BuffSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuffSpeed))))
		i--
		dAtA[i] = 0x3d
	}
	if m.MoveTime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MoveTime))))
		i--
		dAtA[i] = 0x35
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Type != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_ControlMovePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_ControlMovePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_ControlMovePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Ps) > 0 {
		for iNdEx := len(m.Ps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Flag != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_ControlPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_ControlPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_ControlPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Time))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_LeaveAreaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_LeaveAreaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_LeaveAreaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_LeaveAreaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_LeaveAreaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_LeaveAreaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_ExitBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_ExitBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_ExitBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_StopMovePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_StopMovePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_StopMovePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_GetTempBagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_GetTempBagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_GetTempBagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_GetTempBagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_GetTempBagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_GetTempBagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bag != nil {
		{
			size, err := m.Bag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_DrawTempBagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_DrawTempBagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_DrawTempBagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_DrawTempBagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_DrawTempBagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_DrawTempBagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_TakeMedicineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_TakeMedicineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_TakeMedicineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x18
	}
	if m.CdTime != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.CdTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_TakeMedicineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_TakeMedicineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_TakeMedicineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MedicineItemsPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MedicineItemsPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MedicineItemsPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Medicine) > 0 {
		for k := range m.Medicine {
			v := m.Medicine[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCppBattle(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_DestroyAirWallPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_DestroyAirWallPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_DestroyAirWallPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if m.AirWallId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.AirWallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_CurAirWallPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_CurAirWallPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_CurAirWallPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.AirWalls) > 0 {
		for k := range m.AirWalls {
			v := m.AirWalls[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_DungeonPlayerDamageStatPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_DungeonPlayerDamageStatPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_DungeonPlayerDamageStatPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.DamageStat) > 0 {
		for k := range m.DamageStat {
			v := m.DamageStat[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCppBattle(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_DungeonCurStagePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_DungeonCurStagePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_DungeonCurStagePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa0
	}
	if len(m.KillCounts) > 0 {
		for k := range m.KillCounts {
			v := m.KillCounts[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Conditions) > 0 {
		for k := range m.Conditions {
			v := m.Conditions[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Stage != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x10
	}
	if m.EndTime != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MapSyncNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MapSyncNotice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MapSyncNotice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MoveList) > 0 {
		for iNdEx := len(m.MoveList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MoveList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MoveOutList) > 0 {
		for iNdEx := len(m.MoveOutList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MoveOutList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MonsterList) > 0 {
		for iNdEx := len(m.MonsterList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MonsterList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PlayerList) > 0 {
		for iNdEx := len(m.PlayerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ServerFrame != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ServerFrame))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_TransFormRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_TransFormRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_TransFormRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_TransFormNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_TransFormNotice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_TransFormNotice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Towards != nil {
		{
			size, err := m.Towards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_HeroUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_HeroUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_HeroUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fashion != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Fashion))
		i--
		dAtA[i] = 0x48
	}
	if len(m.EquipLightEffect) > 0 {
		for k := range m.EquipLightEffect {
			v := m.EquipLightEffect[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TalentBuff) > 0 {
		dAtA29 := make([]byte, len(m.TalentBuff)*10)
		var j28 int
		for _, num1 := range m.TalentBuff {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		i -= j28
		copy(dAtA[i:], dAtA29[:j28])
		i = encodeVarintCppBattle(dAtA, i, uint64(j28))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Buff) > 0 {
		dAtA31 := make([]byte, len(m.Buff)*10)
		var j30 int
		for _, num1 := range m.Buff {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		i -= j30
		copy(dAtA[i:], dAtA31[:j30])
		i = encodeVarintCppBattle(dAtA, i, uint64(j30))
		i--
		dAtA[i] = 0x32
	}
	if m.IsSkillChange {
		i--
		if m.IsSkillChange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.SkillIds) > 0 {
		for iNdEx := len(m.SkillIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SkillIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Equip) > 0 {
		for k := range m.Equip {
			v := m.Equip[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Attr) > 0 {
		for k := range m.Attr {
			v := m.Attr[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ConfigId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_CPPChangeFormationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_CPPChangeFormationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_CPPChangeFormationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChangeType != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ChangeType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Heroes) > 0 {
		for iNdEx := len(m.Heroes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Heroes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_CPPChangeFormationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_CPPChangeFormationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_CPPChangeFormationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_GMAddBuffPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_GMAddBuffPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_GMAddBuffPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BuffId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.BuffId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_BlockPlayerPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_BlockPlayerPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_BlockPlayerPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_UnblockPlayerPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_UnblockPlayerPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_UnblockPlayerPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_RoguelikeRewardPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_RoguelikeRewardPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_RoguelikeRewardPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OptionalArtifact) > 0 {
		dAtA34 := make([]byte, len(m.OptionalArtifact)*10)
		var j33 int
		for _, num1 := range m.OptionalArtifact {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		i -= j33
		copy(dAtA[i:], dAtA34[:j33])
		i = encodeVarintCppBattle(dAtA, i, uint64(j33))
		i--
		dAtA[i] = 0x12
	}
	if m.OuterReward != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.OuterReward))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_RoguelikeSelectArtifactRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_RoguelikeSelectArtifactRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_RoguelikeSelectArtifactRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Idx != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Idx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_RoguelikeSelectArtifactResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_RoguelikeSelectArtifactResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_RoguelikeSelectArtifactResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ArtifactId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ArtifactId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MonsterBossKillPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MonsterBossKillPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MonsterBossKillPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.KillerId) > 0 {
		i -= len(m.KillerId)
		copy(dAtA[i:], m.KillerId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.KillerId)))
		i--
		dAtA[i] = 0x22
	}
	if m.MonsterConfigId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.MonsterConfigId))
		i--
		dAtA[i] = 0x18
	}
	if m.BossPos != nil {
		{
			size, err := m.BossPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BossId) > 0 {
		i -= len(m.BossId)
		copy(dAtA[i:], m.BossId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.BossId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_MonsterJoinKillPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_MonsterJoinKillPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_MonsterJoinKillPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DropPos != nil {
		{
			size, err := m.DropPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.JoinItems) > 0 {
		for iNdEx := len(m.JoinItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoinItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HasJoin {
		i--
		if m.HasJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HasKill {
		i--
		if m.HasKill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_DropItemPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_DropItemPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_DropItemPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DropPos != nil {
		{
			size, err := m.DropPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_UserTitleChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_UserTitleChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_UserTitleChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Title != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Title))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_UserLevelChangePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_UserLevelChangePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_UserLevelChangePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_EnterPlaneDungeonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_EnterPlaneDungeonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_EnterPlaneDungeonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x38
	}
	if m.MapScenceId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.MapScenceId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TreeName) > 0 {
		i -= len(m.TreeName)
		copy(dAtA[i:], m.TreeName)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.TreeName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RewardItems) > 0 {
		for k := range m.RewardItems {
			v := m.RewardItems[k]
			baseI := i
			i = encodeVarintCppBattle(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintCppBattle(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintCppBattle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Sbp != nil {
		{
			size, err := m.Sbp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Typ != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPPBattle_EnterPlaneDungeonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_EnterPlaneDungeonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_EnterPlaneDungeonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CPPBattle_UserAutoSoulSkillPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPPBattle_UserAutoSoulSkillPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPPBattle_UserAutoSoulSkillPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoSouleSkill != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.AutoSouleSkill))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ObjId) > 0 {
		i -= len(m.ObjId)
		copy(dAtA[i:], m.ObjId)
		i = encodeVarintCppBattle(dAtA, i, uint64(len(m.ObjId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MonsterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonsterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonsterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCppBattle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MonsterId != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.MonsterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConditionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConditionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConditionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConditionValue) > 0 {
		dAtA41 := make([]byte, len(m.ConditionValue)*10)
		var j40 int
		for _, num1 := range m.ConditionValue {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		i -= j40
		copy(dAtA[i:], dAtA41[:j40])
		i = encodeVarintCppBattle(dAtA, i, uint64(j40))
		i--
		dAtA[i] = 0x12
	}
	if m.ConditionType != 0 {
		i = encodeVarintCppBattle(dAtA, i, uint64(m.ConditionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SingleBattleMonsterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleBattleMonsterList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleBattleMonsterList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MonsterInfo) > 0 {
		for iNdEx := len(m.MonsterInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MonsterInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCppBattle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCppBattle(dAtA []byte, offset int, v uint64) int {
	offset -= sovCppBattle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *CPPBattle) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_Vec2) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if math.Abs(float64(m.X)) > 0.000001 {
		w.RawByte('"')
		w.RawString("x")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.X))
		needWriteComma = true
	}
	if math.Abs(float64(m.Y)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("y")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Y))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_Ping) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ClientTime != 0 {
		w.RawByte('"')
		w.RawString("client_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ClientTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_Pong) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ClientTime != 0 {
		w.RawByte('"')
		w.RawString("client_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ClientTime))
		needWriteComma = true
	}
	if m.ServerTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerTime))
		needWriteComma = true
	}
	if m.ServerFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_EnterBattleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	m.Role.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("medicine")
	w.RawByte('"')
	w.RawByte(':')
	if m.Medicine == nil {
		w.RawString("null")
	} else if len(m.Medicine) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlMedicine := len(m.Medicine)
		for k, v := range m.Medicine {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlMedicine--
			if mlMedicine != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if m.AutoSouleSkill != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("auto_soule_skill")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AutoSouleSkill))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_EnterBattleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.MapId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapId))
		needWriteComma = true
	}
	if m.Ip != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("ip")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Ip)
		needWriteComma = true
	}
	if m.Port != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("port")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Port))
		needWriteComma = true
	}
	if m.Token != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.BattleServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_SyncNicknameChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_CanChangeSceneRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_CanChangeSceneResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.CanStatus != 0 {
		w.RawByte('"')
		w.RawString("can_status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CanStatus))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_ManyPushMsg) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("messages")
	w.RawByte('"')
	w.RawByte(':')
	if m.Messages == nil {
		w.RawString("null")
	} else if len(m.Messages) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Messages {
			(*coin_server_common_proto_jsonany.Any)(v).JsonBytes(w)
			if i != len(m.Messages)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_AuthTCPPushToServer) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Token != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("token")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Token)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_AuthTCPPushToClient) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Status != 0 {
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_ChangeHero) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_ChangeHeroPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equip")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equip == nil {
		w.RawString("null")
	} else if len(m.Equip) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquip := len(m.Equip)
		for k, v := range m.Equip {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEquip--
			if mlEquip != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_ChangeHeroSelfPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.RemainCd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_cd")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainCd))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_HeroAttrUpdatePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.ObjId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_HeroFashionPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BattleServerId != 0 {
		w.RawByte('"')
		w.RawString("battle_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleServerId))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.HeroConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroConfigId))
		needWriteComma = true
	}
	if m.Fashion != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("fashion")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Fashion))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_PlayerPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.SectName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sect_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SectName)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.HeroIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroIndex))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if math.Abs(float64(m.BuffSpeed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("buff_speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.BuffSpeed))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_HeroesChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.HeroIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroIndex))
		needWriteComma = true
	}
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.ChangeType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("change_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChangeType))
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_ClientMoveRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Typ != 0 {
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("dest_or_dir")
	w.RawByte('"')
	w.RawByte(':')
	m.DestOrDir.JsonBytes(w)
	needWriteComma = true
	if m.IsManual != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_manual")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.IsManual))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_DamagePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackerId != "" {
		w.RawByte('"')
		w.RawString("attacker_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerId)
		needWriteComma = true
	}
	if m.DefenderId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DefenderId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.SkillViewIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_view_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillViewIndex))
		needWriteComma = true
	}
	if m.SkillIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillIndex))
		needWriteComma = true
	}
	if m.Damage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.DamageColor != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage_color")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DamageColor))
		needWriteComma = true
	}
	if m.IsDodge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_dodge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsDodge)
		needWriteComma = true
	}
	if m.IsParry {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_parry")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsParry)
		needWriteComma = true
	}
	if m.AttackerConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackerConfigId))
		needWriteComma = true
	}
	if m.DefenderConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DefenderConfigId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_BuffValuePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.OwnerId != "" {
		w.RawByte('"')
		w.RawString("owner_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.OwnerId)
		needWriteComma = true
	}
	if m.CasterId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("caster_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.CasterId)
		needWriteComma = true
	}
	if m.Value != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Value))
		needWriteComma = true
	}
	if m.ValueType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("value_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ValueType))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.DamageColor != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage_color")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DamageColor))
		needWriteComma = true
	}
	if m.IsDodge {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_dodge")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsDodge)
		needWriteComma = true
	}
	if m.IsParry {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_parry")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsParry)
		needWriteComma = true
	}
	if m.CasterConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("caster_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CasterConfigId))
		needWriteComma = true
	}
	if m.OwnerConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("owner_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OwnerConfigId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_BuffInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.RemainTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainTime))
		needWriteComma = true
	}
	if m.OverlayCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("overlay_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OverlayCount))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_BuffPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjectId != "" {
		w.RawByte('"')
		w.RawString("object_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjectId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buffs")
	w.RawByte('"')
	w.RawByte(':')
	if m.Buffs == nil {
		w.RawString("null")
	} else if len(m.Buffs) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlBuffs := len(m.Buffs)
		for k, v := range m.Buffs {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlBuffs--
			if mlBuffs != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.HeroConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroConfigId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_SkillPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackerId != "" {
		w.RawByte('"')
		w.RawString("attacker_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerId)
		needWriteComma = true
	}
	if m.DefenderId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DefenderId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.SkillViewIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_view_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillViewIndex))
		needWriteComma = true
	}
	if m.AttackerHeroId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_hero_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackerHeroId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_RevivePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.ReviveTyp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveTyp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_ReviveHeroPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.ConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_DeadPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AttackerId != "" {
		w.RawByte('"')
		w.RawString("attacker_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.AttackerId)
		needWriteComma = true
	}
	if m.DeadId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("dead_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DeadId)
		needWriteComma = true
	}
	if m.SkillId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillId))
		needWriteComma = true
	}
	if m.SkillViewIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_view_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillViewIndex))
		needWriteComma = true
	}
	if m.SkillIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("skill_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SkillIndex))
		needWriteComma = true
	}
	if m.Damage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("drop")
	w.RawByte('"')
	w.RawByte(':')
	if m.Drop == nil {
		w.RawString("null")
	} else if len(m.Drop) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDrop := len(m.Drop)
		for k, v := range m.Drop {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlDrop--
			if mlDrop != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.AttackerConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("attacker_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AttackerConfigId))
		needWriteComma = true
	}
	if m.DefenderConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("defender_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.DefenderConfigId))
		needWriteComma = true
	}
	if m.ReviveCost != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_cost")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveCost))
		needWriteComma = true
	}
	if m.ReviveTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveTime))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_QueryDeadPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.DeadId != "" {
		w.RawByte('"')
		w.RawString("dead_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.DeadId)
		needWriteComma = true
	}
	if m.ReviveCost != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_cost")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveCost))
		needWriteComma = true
	}
	if m.ReviveTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("revive_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ReviveTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_MonsterPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.HeroIndex != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_index")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroIndex))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if math.Abs(float64(m.BuffSpeed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("buff_speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.BuffSpeed))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_MoveOutPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("obj_id")
	w.RawByte('"')
	w.RawByte(':')
	if m.ObjId == nil {
		w.RawString("null")
	} else if len(m.ObjId) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ObjId {
			w.String(v)
			if i != len(m.ObjId)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_PosChange) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_MoveInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_MoveInfo1) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_MovePath) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("paths")
	w.RawByte('"')
	w.RawByte(':')
	if m.Paths == nil {
		w.RawString("null")
	} else if len(m.Paths) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Paths {
			v.JsonBytes(w)
			if i != len(m.Paths)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_MovePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if m.Type != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Type))
		needWriteComma = true
	}
	if math.Abs(float64(m.Speed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Speed))
		needWriteComma = true
	}
	if math.Abs(float64(m.MoveTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("move_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.MoveTime))
		needWriteComma = true
	}
	if math.Abs(float64(m.BuffSpeed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("buff_speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.BuffSpeed))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if math.Abs(float64(m.CustomSpeed)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("custom_speed")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.CustomSpeed))
		needWriteComma = true
	}
	if math.Abs(float64(m.CustomTime)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("custom_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.CustomTime))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_ControlMovePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.Flag != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("flag")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Flag))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("ps")
	w.RawByte('"')
	w.RawByte(':')
	if m.Ps == nil {
		w.RawString("null")
	} else if len(m.Ps) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Ps {
			v.JsonBytes(w)
			if i != len(m.Ps)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_ControlPoint) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if math.Abs(float64(m.Time)) > 0.000001 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("time")
		w.RawByte('"')
		w.RawByte(':')
		w.Float64(float64(m.Time))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_LeaveAreaRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_LeaveAreaResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_ExitBattle) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_StopMovePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_GetTempBagRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_GetTempBagResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("bag")
	w.RawByte('"')
	w.RawByte(':')
	m.Bag.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_DrawTempBagRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_DrawTempBagResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlItems := len(m.Items)
		for k, v := range m.Items {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlItems--
			if mlItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_TakeMedicineRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.CdTime != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("cd_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CdTime))
		needWriteComma = true
	}
	if m.Flag != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("flag")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Flag))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_TakeMedicineResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_MedicineItemsPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("medicine")
	w.RawByte('"')
	w.RawByte(':')
	if m.Medicine == nil {
		w.RawString("null")
	} else if len(m.Medicine) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlMedicine := len(m.Medicine)
		for k, v := range m.Medicine {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			v.JsonBytes(w)
			mlMedicine--
			if mlMedicine != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_DestroyAirWallPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.AirWallId != 0 {
		w.RawByte('"')
		w.RawString("air_wall_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AirWallId))
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_CurAirWallPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("air_walls")
	w.RawByte('"')
	w.RawByte(':')
	if m.AirWalls == nil {
		w.RawString("null")
	} else if len(m.AirWalls) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAirWalls := len(m.AirWalls)
		for k, v := range m.AirWalls {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAirWalls--
			if mlAirWalls != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_DungeonPlayerDamageStatPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("damage_stat")
	w.RawByte('"')
	w.RawByte(':')
	if m.DamageStat == nil {
		w.RawString("null")
	} else if len(m.DamageStat) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlDamageStat := len(m.DamageStat)
		for k, v := range m.DamageStat {
			w.RawByte('"')
			w.RawString(k)
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlDamageStat--
			if mlDamageStat != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_DungeonCurStagePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.EndTime != 0 {
		w.RawByte('"')
		w.RawString("end_time")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.EndTime))
		needWriteComma = true
	}
	if m.Stage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("stage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Stage))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("conditions")
	w.RawByte('"')
	w.RawByte(':')
	if m.Conditions == nil {
		w.RawString("null")
	} else if len(m.Conditions) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlConditions := len(m.Conditions)
		for k, v := range m.Conditions {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlConditions--
			if mlConditions != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("kill_counts")
	w.RawByte('"')
	w.RawByte(':')
	if m.KillCounts == nil {
		w.RawString("null")
	} else if len(m.KillCounts) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlKillCounts := len(m.KillCounts)
		for k, v := range m.KillCounts {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlKillCounts--
			if mlKillCounts != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_MapSyncNotice) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ServerFrame != 0 {
		w.RawByte('"')
		w.RawString("server_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ServerFrame))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("player_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.PlayerList == nil {
		w.RawString("null")
	} else if len(m.PlayerList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.PlayerList {
			v.JsonBytes(w)
			if i != len(m.PlayerList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("monster_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.MonsterList == nil {
		w.RawString("null")
	} else if len(m.MonsterList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.MonsterList {
			v.JsonBytes(w)
			if i != len(m.MonsterList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("move_out_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.MoveOutList == nil {
		w.RawString("null")
	} else if len(m.MoveOutList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.MoveOutList {
			v.JsonBytes(w)
			if i != len(m.MoveOutList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("move_list")
	w.RawByte('"')
	w.RawByte(':')
	if m.MoveList == nil {
		w.RawString("null")
	} else if len(m.MoveList) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.MoveList {
			v.JsonBytes(w)
			if i != len(m.MoveList)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_TransFormRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_TransFormNotice) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("towards")
	w.RawByte('"')
	w.RawByte(':')
	m.Towards.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_HeroUpdate) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConfigId != 0 {
		w.RawByte('"')
		w.RawString("config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConfigId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("attr")
	w.RawByte('"')
	w.RawByte(':')
	if m.Attr == nil {
		w.RawString("null")
	} else if len(m.Attr) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlAttr := len(m.Attr)
		for k, v := range m.Attr {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlAttr--
			if mlAttr != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equip")
	w.RawByte('"')
	w.RawByte(':')
	if m.Equip == nil {
		w.RawString("null")
	} else if len(m.Equip) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquip := len(m.Equip)
		for k, v := range m.Equip {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEquip--
			if mlEquip != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("skill_ids")
	w.RawByte('"')
	w.RawByte(':')
	if m.SkillIds == nil {
		w.RawString("null")
	} else if len(m.SkillIds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.SkillIds {
			v.JsonBytes(w)
			if i != len(m.SkillIds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.IsSkillChange {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_skill_change")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSkillChange)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("buff")
	w.RawByte('"')
	w.RawByte(':')
	if m.Buff == nil {
		w.RawString("null")
	} else if len(m.Buff) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Buff {
			w.Int64(int64(v))
			if i != len(m.Buff)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("talent_buff")
	w.RawByte('"')
	w.RawByte(':')
	if m.TalentBuff == nil {
		w.RawString("null")
	} else if len(m.TalentBuff) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.TalentBuff {
			w.Int64(int64(v))
			if i != len(m.TalentBuff)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("equip_light_effect")
	w.RawByte('"')
	w.RawByte(':')
	if m.EquipLightEffect == nil {
		w.RawString("null")
	} else if len(m.EquipLightEffect) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlEquipLightEffect := len(m.EquipLightEffect)
		for k, v := range m.EquipLightEffect {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlEquipLightEffect--
			if mlEquipLightEffect != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.Fashion != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("fashion")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Fashion))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_CPPChangeFormationRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("role")
	w.RawByte('"')
	w.RawByte(':')
	m.Role.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("heroes")
	w.RawByte('"')
	w.RawByte(':')
	if m.Heroes == nil {
		w.RawString("null")
	} else if len(m.Heroes) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Heroes {
			v.JsonBytes(w)
			if i != len(m.Heroes)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.ChangeType != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("change_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ChangeType))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_CPPChangeFormationResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Result != 0 {
		w.RawByte('"')
		w.RawString("result")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Result))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_GMAddBuffPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BuffId != 0 {
		w.RawByte('"')
		w.RawString("buff_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuffId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_BlockPlayerPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_UnblockPlayerPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_RoguelikeRewardPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.OuterReward != 0 {
		w.RawByte('"')
		w.RawString("outer_reward")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.OuterReward))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("optional_artifact")
	w.RawByte('"')
	w.RawByte(':')
	if m.OptionalArtifact == nil {
		w.RawString("null")
	} else if len(m.OptionalArtifact) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.OptionalArtifact {
			w.Int64(int64(v))
			if i != len(m.OptionalArtifact)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_RoguelikeSelectArtifactRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Idx != 0 {
		w.RawByte('"')
		w.RawString("idx")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Idx))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_RoguelikeSelectArtifactResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ArtifactId != 0 {
		w.RawByte('"')
		w.RawString("artifact_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ArtifactId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_MonsterBossKillPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BossId != "" {
		w.RawByte('"')
		w.RawString("boss_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.BossId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("boss_pos")
	w.RawByte('"')
	w.RawByte(':')
	m.BossPos.JsonBytes(w)
	needWriteComma = true
	if m.MonsterConfigId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("monster_config_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterConfigId))
		needWriteComma = true
	}
	if m.KillerId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("killer_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.KillerId)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_MonsterJoinKillPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.HasKill {
		w.RawByte('"')
		w.RawString("has_kill")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.HasKill)
		needWriteComma = true
	}
	if m.HasJoin {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("has_join")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.HasJoin)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("join_items")
	w.RawByte('"')
	w.RawByte(':')
	if m.JoinItems == nil {
		w.RawString("null")
	} else if len(m.JoinItems) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.JoinItems {
			v.JsonBytes(w)
			if i != len(m.JoinItems)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("drop_pos")
	w.RawByte('"')
	w.RawByte(':')
	m.DropPos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_DropItemPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("drop_pos")
	w.RawByte('"')
	w.RawByte(':')
	m.DropPos.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("items")
	w.RawByte('"')
	w.RawByte(':')
	if m.Items == nil {
		w.RawString("null")
	} else if len(m.Items) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Items {
			v.JsonBytes(w)
			if i != len(m.Items)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_UserTitleChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.Title != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("title")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Title))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_UserLevelChangePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_EnterPlaneDungeonRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("sbp")
	w.RawByte('"')
	w.RawByte(':')
	m.Sbp.JsonBytes(w)
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("reward_items")
	w.RawByte('"')
	w.RawByte(':')
	if m.RewardItems == nil {
		w.RawString("null")
	} else if len(m.RewardItems) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewardItems := len(m.RewardItems)
		for k, v := range m.RewardItems {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewardItems--
			if mlRewardItems != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	if m.TreeName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("tree_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TreeName)
		needWriteComma = true
	}
	if m.MapScenceId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("map_scence_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MapScenceId))
		needWriteComma = true
	}
	if m.Duration != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("duration")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Duration))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle_EnterPlaneDungeonResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *CPPBattle_UserAutoSoulSkillPush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ObjId != "" {
		w.RawByte('"')
		w.RawString("obj_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.ObjId)
		needWriteComma = true
	}
	if m.AutoSouleSkill != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("auto_soule_skill")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AutoSouleSkill))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *MonsterInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.MonsterId != 0 {
		w.RawByte('"')
		w.RawString("monster_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MonsterId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("pos")
	w.RawByte('"')
	w.RawByte(':')
	m.Pos.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *ConditionInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.ConditionType != 0 {
		w.RawByte('"')
		w.RawString("condition_type")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ConditionType))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("condition_value")
	w.RawByte('"')
	w.RawByte(':')
	if m.ConditionValue == nil {
		w.RawString("null")
	} else if len(m.ConditionValue) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.ConditionValue {
			w.Int64(int64(v))
			if i != len(m.ConditionValue)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *SingleBattleMonsterList) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("monster_info")
	w.RawByte('"')
	w.RawByte(':')
	if m.MonsterInfo == nil {
		w.RawString("null")
	} else if len(m.MonsterInfo) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.MonsterInfo {
			v.JsonBytes(w)
			if i != len(m.MonsterInfo)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *CPPBattle) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle) GoString() string {
	return m.String()
}

func (m *CPPBattle_Vec2) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_Vec2) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_Vec2) GoString() string {
	return m.String()
}

func (m *CPPBattle_Ping) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_Ping) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_Ping) GoString() string {
	return m.String()
}

func (m *CPPBattle_Pong) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_Pong) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_Pong) GoString() string {
	return m.String()
}

func (m *CPPBattle_EnterBattleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_EnterBattleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_EnterBattleRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_EnterBattleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_EnterBattleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_EnterBattleResponse) GoString() string {
	return m.String()
}

func (m *CPPBattle_SyncNicknameChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_SyncNicknameChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_SyncNicknameChangePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_CanChangeSceneRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_CanChangeSceneRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_CanChangeSceneRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_CanChangeSceneResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_CanChangeSceneResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_CanChangeSceneResponse) GoString() string {
	return m.String()
}

func (m *CPPBattle_ManyPushMsg) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_ManyPushMsg) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_ManyPushMsg) GoString() string {
	return m.String()
}

func (m *CPPBattle_AuthTCPPushToServer) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_AuthTCPPushToServer) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_AuthTCPPushToServer) GoString() string {
	return m.String()
}

func (m *CPPBattle_AuthTCPPushToClient) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_AuthTCPPushToClient) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_AuthTCPPushToClient) GoString() string {
	return m.String()
}

func (m *CPPBattle_ChangeHero) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_ChangeHero) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_ChangeHero) GoString() string {
	return m.String()
}

func (m *CPPBattle_ChangeHeroPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_ChangeHeroPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_ChangeHeroPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_ChangeHeroSelfPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_ChangeHeroSelfPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_ChangeHeroSelfPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_HeroAttrUpdatePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_HeroAttrUpdatePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_HeroAttrUpdatePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_HeroFashionPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_HeroFashionPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_HeroFashionPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_PlayerPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_PlayerPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_PlayerPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_HeroesChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_HeroesChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_HeroesChangePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_ClientMoveRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_ClientMoveRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_ClientMoveRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_DamagePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_DamagePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_DamagePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_BuffValuePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_BuffValuePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_BuffValuePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_BuffInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_BuffInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_BuffInfo) GoString() string {
	return m.String()
}

func (m *CPPBattle_BuffPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_BuffPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_BuffPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_SkillPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_SkillPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_SkillPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_RevivePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_RevivePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_RevivePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_ReviveHeroPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_ReviveHeroPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_ReviveHeroPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_DeadPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_DeadPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_DeadPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_QueryDeadPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_QueryDeadPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_QueryDeadPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_MonsterPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MonsterPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MonsterPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_MoveOutPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MoveOutPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MoveOutPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_PosChange) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_PosChange) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_PosChange) GoString() string {
	return m.String()
}

func (m *CPPBattle_MoveInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MoveInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MoveInfo) GoString() string {
	return m.String()
}

func (m *CPPBattle_MoveInfo1) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MoveInfo1) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MoveInfo1) GoString() string {
	return m.String()
}

func (m *CPPBattle_MovePath) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MovePath) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MovePath) GoString() string {
	return m.String()
}

func (m *CPPBattle_MovePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MovePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MovePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_ControlMovePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_ControlMovePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_ControlMovePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_ControlPoint) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_ControlPoint) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_ControlPoint) GoString() string {
	return m.String()
}

func (m *CPPBattle_LeaveAreaRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_LeaveAreaRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_LeaveAreaRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_LeaveAreaResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_LeaveAreaResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_LeaveAreaResponse) GoString() string {
	return m.String()
}

func (m *CPPBattle_ExitBattle) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_ExitBattle) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_ExitBattle) GoString() string {
	return m.String()
}

func (m *CPPBattle_StopMovePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_StopMovePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_StopMovePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_GetTempBagRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_GetTempBagRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_GetTempBagRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_GetTempBagResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_GetTempBagResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_GetTempBagResponse) GoString() string {
	return m.String()
}

func (m *CPPBattle_DrawTempBagRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_DrawTempBagRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_DrawTempBagRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_DrawTempBagResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_DrawTempBagResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_DrawTempBagResponse) GoString() string {
	return m.String()
}

func (m *CPPBattle_TakeMedicineRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_TakeMedicineRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_TakeMedicineRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_TakeMedicineResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_TakeMedicineResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_TakeMedicineResponse) GoString() string {
	return m.String()
}

func (m *CPPBattle_MedicineItemsPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MedicineItemsPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MedicineItemsPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_DestroyAirWallPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_DestroyAirWallPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_DestroyAirWallPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_CurAirWallPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_CurAirWallPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_CurAirWallPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_DungeonPlayerDamageStatPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_DungeonPlayerDamageStatPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_DungeonPlayerDamageStatPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_DungeonCurStagePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_DungeonCurStagePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_DungeonCurStagePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_MapSyncNotice) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MapSyncNotice) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MapSyncNotice) GoString() string {
	return m.String()
}

func (m *CPPBattle_TransFormRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_TransFormRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_TransFormRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_TransFormNotice) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_TransFormNotice) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_TransFormNotice) GoString() string {
	return m.String()
}

func (m *CPPBattle_HeroUpdate) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_HeroUpdate) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_HeroUpdate) GoString() string {
	return m.String()
}

func (m *CPPBattle_CPPChangeFormationRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_CPPChangeFormationRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_CPPChangeFormationRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_CPPChangeFormationResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_CPPChangeFormationResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_CPPChangeFormationResponse) GoString() string {
	return m.String()
}

func (m *CPPBattle_GMAddBuffPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_GMAddBuffPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_GMAddBuffPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_BlockPlayerPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_BlockPlayerPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_BlockPlayerPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_UnblockPlayerPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_UnblockPlayerPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_UnblockPlayerPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_RoguelikeRewardPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_RoguelikeRewardPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_RoguelikeRewardPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_RoguelikeSelectArtifactRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_RoguelikeSelectArtifactRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_RoguelikeSelectArtifactRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_RoguelikeSelectArtifactResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_RoguelikeSelectArtifactResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_RoguelikeSelectArtifactResponse) GoString() string {
	return m.String()
}

func (m *CPPBattle_MonsterBossKillPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MonsterBossKillPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MonsterBossKillPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_MonsterJoinKillPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_MonsterJoinKillPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_MonsterJoinKillPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_DropItemPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_DropItemPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_DropItemPush) GoString() string {
	return m.String()
}

func (m *CPPBattle_UserTitleChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_UserTitleChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_UserTitleChangePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_UserLevelChangePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_UserLevelChangePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_UserLevelChangePush) GoString() string {
	return m.String()
}

func (m *CPPBattle_EnterPlaneDungeonRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_EnterPlaneDungeonRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_EnterPlaneDungeonRequest) GoString() string {
	return m.String()
}

func (m *CPPBattle_EnterPlaneDungeonResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_EnterPlaneDungeonResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_EnterPlaneDungeonResponse) GoString() string {
	return m.String()
}

func (m *CPPBattle_UserAutoSoulSkillPush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *CPPBattle_UserAutoSoulSkillPush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *CPPBattle_UserAutoSoulSkillPush) GoString() string {
	return m.String()
}

func (m *MonsterInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *MonsterInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *MonsterInfo) GoString() string {
	return m.String()
}

func (m *ConditionInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *ConditionInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *ConditionInfo) GoString() string {
	return m.String()
}

func (m *SingleBattleMonsterList) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *SingleBattleMonsterList) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *SingleBattleMonsterList) GoString() string {
	return m.String()
}

func (m *CPPBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_Vec2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	return n
}

func (m *CPPBattle_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientTime != 0 {
		n += 1 + sovCppBattle(uint64(m.ClientTime))
	}
	return n
}

func (m *CPPBattle_Pong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientTime != 0 {
		n += 1 + sovCppBattle(uint64(m.ClientTime))
	}
	if m.ServerTime != 0 {
		n += 1 + sovCppBattle(uint64(m.ServerTime))
	}
	if m.ServerFrame != 0 {
		n += 1 + sovCppBattle(uint64(m.ServerFrame))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_EnterBattleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovCppBattle(uint64(m.MapId))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattle(uint64(m.BattleServerId))
	}
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if len(m.Medicine) > 0 {
		for k, v := range m.Medicine {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCppBattle(uint64(l))
			}
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + l
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.AutoSouleSkill != 0 {
		n += 1 + sovCppBattle(uint64(m.AutoSouleSkill))
	}
	return n
}

func (m *CPPBattle_EnterBattleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.MapId != 0 {
		n += 1 + sovCppBattle(uint64(m.MapId))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovCppBattle(uint64(m.Port))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattle(uint64(m.BattleServerId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_SyncNicknameChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	return n
}

func (m *CPPBattle_CanChangeSceneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	return n
}

func (m *CPPBattle_CanChangeSceneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanStatus != 0 {
		n += 1 + sovCppBattle(uint64(m.CanStatus))
	}
	return n
}

func (m *CPPBattle_ManyPushMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	return n
}

func (m *CPPBattle_AuthTCPPushToServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.ConfigId))
	}
	return n
}

func (m *CPPBattle_AuthTCPPushToClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCppBattle(uint64(m.Status))
	}
	return n
}

func (m *CPPBattle_ChangeHero) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattle(uint64(m.BattleServerId))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.ConfigId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_ChangeHeroPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattle(uint64(m.BattleServerId))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.ConfigId))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if len(m.Equip) > 0 {
		for k, v := range m.Equip {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	return n
}

func (m *CPPBattle_ChangeHeroSelfPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattle(uint64(m.BattleServerId))
	}
	if m.RemainCd != 0 {
		n += 1 + sovCppBattle(uint64(m.RemainCd))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.ConfigId))
	}
	return n
}

func (m *CPPBattle_HeroAttrUpdatePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattle(uint64(m.BattleServerId))
	}
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.Title != 0 {
		n += 1 + sovCppBattle(uint64(m.Title))
	}
	if m.Level != 0 {
		n += 1 + sovCppBattle(uint64(m.Level))
	}
	return n
}

func (m *CPPBattle_HeroFashionPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BattleServerId != 0 {
		n += 1 + sovCppBattle(uint64(m.BattleServerId))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.HeroConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.HeroConfigId))
	}
	if m.Fashion != 0 {
		n += 1 + sovCppBattle(uint64(m.Fashion))
	}
	return n
}

func (m *CPPBattle_PlayerPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	l = len(m.SectName)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovCppBattle(uint64(m.Level))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.HeroIndex != 0 {
		n += 1 + sovCppBattle(uint64(m.HeroIndex))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Speed != 0 {
		n += 5
	}
	if m.BuffSpeed != 0 {
		n += 5
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_HeroesChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.HeroIndex != 0 {
		n += 1 + sovCppBattle(uint64(m.HeroIndex))
	}
	if m.Speed != 0 {
		n += 5
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.ChangeType != 0 {
		n += 1 + sovCppBattle(uint64(m.ChangeType))
	}
	if m.Title != 0 {
		n += 1 + sovCppBattle(uint64(m.Title))
	}
	return n
}

func (m *CPPBattle_ClientMoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovCppBattle(uint64(m.Typ))
	}
	if m.DestOrDir != nil {
		l = m.DestOrDir.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.IsManual != 0 {
		n += 1 + sovCppBattle(uint64(m.IsManual))
	}
	return n
}

func (m *CPPBattle_DamagePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	l = len(m.DefenderId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovCppBattle(uint64(m.SkillId))
	}
	if m.SkillViewIndex != 0 {
		n += 1 + sovCppBattle(uint64(m.SkillViewIndex))
	}
	if m.SkillIndex != 0 {
		n += 1 + sovCppBattle(uint64(m.SkillIndex))
	}
	if m.Damage != 0 {
		n += 1 + sovCppBattle(uint64(m.Damage))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if m.DamageColor != 0 {
		n += 1 + sovCppBattle(uint64(m.DamageColor))
	}
	if m.IsDodge {
		n += 2
	}
	if m.IsParry {
		n += 2
	}
	if m.AttackerConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.AttackerConfigId))
	}
	if m.DefenderConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.DefenderConfigId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_BuffValuePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	l = len(m.CasterId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovCppBattle(uint64(m.Value))
	}
	if m.ValueType != 0 {
		n += 1 + sovCppBattle(uint64(m.ValueType))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if m.DamageColor != 0 {
		n += 1 + sovCppBattle(uint64(m.DamageColor))
	}
	if m.IsDodge {
		n += 2
	}
	if m.IsParry {
		n += 2
	}
	if m.CasterConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.CasterConfigId))
	}
	if m.OwnerConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.OwnerConfigId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_BuffInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCppBattle(uint64(m.Id))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.ConfigId))
	}
	if m.RemainTime != 0 {
		n += 1 + sovCppBattle(uint64(m.RemainTime))
	}
	if m.OverlayCount != 0 {
		n += 1 + sovCppBattle(uint64(m.OverlayCount))
	}
	return n
}

func (m *CPPBattle_BuffPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if len(m.Buffs) > 0 {
		for k, v := range m.Buffs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCppBattle(uint64(l))
			}
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + l
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if m.HeroConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.HeroConfigId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_SkillPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	l = len(m.DefenderId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovCppBattle(uint64(m.SkillId))
	}
	if m.SkillViewIndex != 0 {
		n += 1 + sovCppBattle(uint64(m.SkillViewIndex))
	}
	if m.AttackerHeroId != 0 {
		n += 1 + sovCppBattle(uint64(m.AttackerHeroId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_RevivePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.ReviveTyp != 0 {
		n += 1 + sovCppBattle(uint64(m.ReviveTyp))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_ReviveHeroPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.ConfigId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_DeadPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	l = len(m.DeadId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.SkillId != 0 {
		n += 1 + sovCppBattle(uint64(m.SkillId))
	}
	if m.SkillViewIndex != 0 {
		n += 1 + sovCppBattle(uint64(m.SkillViewIndex))
	}
	if m.SkillIndex != 0 {
		n += 1 + sovCppBattle(uint64(m.SkillIndex))
	}
	if m.Damage != 0 {
		n += 1 + sovCppBattle(uint64(m.Damage))
	}
	if len(m.Drop) > 0 {
		for k, v := range m.Drop {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if m.AttackerConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.AttackerConfigId))
	}
	if m.DefenderConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.DefenderConfigId))
	}
	if m.ReviveCost != 0 {
		n += 1 + sovCppBattle(uint64(m.ReviveCost))
	}
	if m.ReviveTime != 0 {
		n += 1 + sovCppBattle(uint64(m.ReviveTime))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_QueryDeadPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeadId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.ReviveCost != 0 {
		n += 1 + sovCppBattle(uint64(m.ReviveCost))
	}
	if m.ReviveTime != 0 {
		n += 1 + sovCppBattle(uint64(m.ReviveTime))
	}
	return n
}

func (m *CPPBattle_MonsterPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.HeroIndex != 0 {
		n += 1 + sovCppBattle(uint64(m.HeroIndex))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Speed != 0 {
		n += 5
	}
	if m.BuffSpeed != 0 {
		n += 5
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_MoveOutPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ObjId) > 0 {
		for _, s := range m.ObjId {
			l = len(s)
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_PosChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_MoveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_MoveInfo1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCppBattle(uint64(m.Id))
	}
	return n
}

func (m *CPPBattle_MovePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if len(m.Paths) > 0 {
		for _, e := range m.Paths {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	return n
}

func (m *CPPBattle_MovePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCppBattle(uint64(m.Type))
	}
	if m.Speed != 0 {
		n += 5
	}
	if m.MoveTime != 0 {
		n += 5
	}
	if m.BuffSpeed != 0 {
		n += 5
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	if m.CustomSpeed != 0 {
		n += 6
	}
	if m.CustomTime != 0 {
		n += 6
	}
	return n
}

func (m *CPPBattle_ControlMovePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Flag != 0 {
		n += 1 + sovCppBattle(uint64(m.Flag))
	}
	if len(m.Ps) > 0 {
		for _, e := range m.Ps {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_ControlPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Time != 0 {
		n += 5
	}
	return n
}

func (m *CPPBattle_LeaveAreaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_LeaveAreaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_ExitBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_StopMovePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_GetTempBagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_GetTempBagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bag != nil {
		l = m.Bag.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	return n
}

func (m *CPPBattle_DrawTempBagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_DrawTempBagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CPPBattle_TakeMedicineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCppBattle(uint64(m.Id))
	}
	if m.CdTime != 0 {
		n += 1 + sovCppBattle(uint64(m.CdTime))
	}
	if m.Flag != 0 {
		n += 1 + sovCppBattle(uint64(m.Flag))
	}
	return n
}

func (m *CPPBattle_TakeMedicineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_MedicineItemsPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Medicine) > 0 {
		for k, v := range m.Medicine {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCppBattle(uint64(l))
			}
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + l
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CPPBattle_DestroyAirWallPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AirWallId != 0 {
		n += 1 + sovCppBattle(uint64(m.AirWallId))
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_CurAirWallPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AirWalls) > 0 {
		for k, v := range m.AirWalls {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_DungeonPlayerDamageStatPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DamageStat) > 0 {
		for k, v := range m.DamageStat {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCppBattle(uint64(len(k))) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_DungeonCurStagePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndTime != 0 {
		n += 1 + sovCppBattle(uint64(m.EndTime))
	}
	if m.Stage != 0 {
		n += 1 + sovCppBattle(uint64(m.Stage))
	}
	if len(m.Conditions) > 0 {
		for k, v := range m.Conditions {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if len(m.KillCounts) > 0 {
		for k, v := range m.KillCounts {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if m.BattleId != 0 {
		n += 2 + sovCppBattle(uint64(m.BattleId))
	}
	return n
}

func (m *CPPBattle_MapSyncNotice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerFrame != 0 {
		n += 1 + sovCppBattle(uint64(m.ServerFrame))
	}
	if len(m.PlayerList) > 0 {
		for _, e := range m.PlayerList {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if len(m.MonsterList) > 0 {
		for _, e := range m.MonsterList {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if len(m.MoveOutList) > 0 {
		for _, e := range m.MoveOutList {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if len(m.MoveList) > 0 {
		for _, e := range m.MoveList {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	return n
}

func (m *CPPBattle_TransFormRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	return n
}

func (m *CPPBattle_TransFormNotice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Towards != nil {
		l = m.Towards.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	return n
}

func (m *CPPBattle_HeroUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.ConfigId))
	}
	if len(m.Attr) > 0 {
		for k, v := range m.Attr {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if len(m.Equip) > 0 {
		for k, v := range m.Equip {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if len(m.SkillIds) > 0 {
		for _, e := range m.SkillIds {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.IsSkillChange {
		n += 2
	}
	if len(m.Buff) > 0 {
		l = 0
		for _, e := range m.Buff {
			l += sovCppBattle(uint64(e))
		}
		n += 1 + sovCppBattle(uint64(l)) + l
	}
	if len(m.TalentBuff) > 0 {
		l = 0
		for _, e := range m.TalentBuff {
			l += sovCppBattle(uint64(e))
		}
		n += 1 + sovCppBattle(uint64(l)) + l
	}
	if len(m.EquipLightEffect) > 0 {
		for k, v := range m.EquipLightEffect {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	if m.Fashion != 0 {
		n += 1 + sovCppBattle(uint64(m.Fashion))
	}
	return n
}

func (m *CPPBattle_CPPChangeFormationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if len(m.Heroes) > 0 {
		for _, e := range m.Heroes {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.ChangeType != 0 {
		n += 1 + sovCppBattle(uint64(m.ChangeType))
	}
	return n
}

func (m *CPPBattle_CPPChangeFormationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovCppBattle(uint64(m.Result))
	}
	return n
}

func (m *CPPBattle_GMAddBuffPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuffId != 0 {
		n += 1 + sovCppBattle(uint64(m.BuffId))
	}
	return n
}

func (m *CPPBattle_BlockPlayerPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_UnblockPlayerPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_RoguelikeRewardPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OuterReward != 0 {
		n += 1 + sovCppBattle(uint64(m.OuterReward))
	}
	if len(m.OptionalArtifact) > 0 {
		l = 0
		for _, e := range m.OptionalArtifact {
			l += sovCppBattle(uint64(e))
		}
		n += 1 + sovCppBattle(uint64(l)) + l
	}
	return n
}

func (m *CPPBattle_RoguelikeSelectArtifactRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Idx != 0 {
		n += 1 + sovCppBattle(uint64(m.Idx))
	}
	return n
}

func (m *CPPBattle_RoguelikeSelectArtifactResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArtifactId != 0 {
		n += 1 + sovCppBattle(uint64(m.ArtifactId))
	}
	return n
}

func (m *CPPBattle_MonsterBossKillPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BossId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.BossPos != nil {
		l = m.BossPos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.MonsterConfigId != 0 {
		n += 1 + sovCppBattle(uint64(m.MonsterConfigId))
	}
	l = len(m.KillerId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	return n
}

func (m *CPPBattle_MonsterJoinKillPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasKill {
		n += 2
	}
	if m.HasJoin {
		n += 2
	}
	if len(m.JoinItems) > 0 {
		for _, e := range m.JoinItems {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	if m.DropPos != nil {
		l = m.DropPos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	return n
}

func (m *CPPBattle_DropItemPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DropPos != nil {
		l = m.DropPos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	return n
}

func (m *CPPBattle_UserTitleChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Title != 0 {
		n += 1 + sovCppBattle(uint64(m.Title))
	}
	return n
}

func (m *CPPBattle_UserLevelChangePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovCppBattle(uint64(m.Level))
	}
	return n
}

func (m *CPPBattle_EnterPlaneDungeonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCppBattle(uint64(m.Id))
	}
	if m.Typ != 0 {
		n += 1 + sovCppBattle(uint64(m.Typ))
	}
	if m.Sbp != nil {
		l = m.Sbp.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if len(m.RewardItems) > 0 {
		for k, v := range m.RewardItems {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCppBattle(uint64(k)) + 1 + sovCppBattle(uint64(v))
			n += mapEntrySize + 1 + sovCppBattle(uint64(mapEntrySize))
		}
	}
	l = len(m.TreeName)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.MapScenceId != 0 {
		n += 1 + sovCppBattle(uint64(m.MapScenceId))
	}
	if m.Duration != 0 {
		n += 1 + sovCppBattle(uint64(m.Duration))
	}
	return n
}

func (m *CPPBattle_EnterPlaneDungeonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CPPBattle_UserAutoSoulSkillPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjId)
	if l > 0 {
		n += 1 + l + sovCppBattle(uint64(l))
	}
	if m.AutoSouleSkill != 0 {
		n += 1 + sovCppBattle(uint64(m.AutoSouleSkill))
	}
	return n
}

func (m *MonsterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MonsterId != 0 {
		n += 1 + sovCppBattle(uint64(m.MonsterId))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovCppBattle(uint64(l))
	}
	return n
}

func (m *ConditionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConditionType != 0 {
		n += 1 + sovCppBattle(uint64(m.ConditionType))
	}
	if len(m.ConditionValue) > 0 {
		l = 0
		for _, e := range m.ConditionValue {
			l += sovCppBattle(uint64(e))
		}
		n += 1 + sovCppBattle(uint64(l)) + l
	}
	return n
}

func (m *SingleBattleMonsterList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MonsterInfo) > 0 {
		for _, e := range m.MonsterInfo {
			l = e.Size()
			n += 1 + l + sovCppBattle(uint64(l))
		}
	}
	return n
}

func sovCppBattle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCppBattle(x uint64) (n int) {
	return sovCppBattle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CPPBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_Vec2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vec2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vec2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_Pong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_EnterBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &models.Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.HeroForBattle{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medicine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Medicine == nil {
				m.Medicine = make(map[int64]*models.MedicineInfo)
			}
			var mapkey int64
			var mapvalue *models.MedicineInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCppBattle
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCppBattle
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.MedicineInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Medicine[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSouleSkill", wireType)
			}
			m.AutoSouleSkill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoSouleSkill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_EnterBattleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterBattleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterBattleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_SyncNicknameChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncNicknameChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncNicknameChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_CanChangeSceneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanChangeSceneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanChangeSceneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_CanChangeSceneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanChangeSceneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanChangeSceneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanStatus", wireType)
			}
			m.CanStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_ManyPushMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManyPushMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManyPushMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &types.Any{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_AuthTCPPushToServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthTCPPushToServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthTCPPushToServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_AuthTCPPushToClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthTCPPushToClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthTCPPushToClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_ChangeHero) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHero: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHero: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_ChangeHeroPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHeroPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHeroPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equip == nil {
				m.Equip = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Equip[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_ChangeHeroSelfPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHeroSelfPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHeroSelfPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainCd", wireType)
			}
			m.RemainCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainCd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_HeroAttrUpdatePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroAttrUpdatePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroAttrUpdatePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &CPPBattle_HeroUpdate{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_HeroFashionPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroFashionPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroFashionPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleServerId", wireType)
			}
			m.BattleServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroConfigId", wireType)
			}
			m.HeroConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fashion", wireType)
			}
			m.Fashion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fashion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_PlayerPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.HeroForBattle{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuffSpeed = float32(math.Float32frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_HeroesChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroesChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroesChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.HeroForBattle{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			m.ChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_ClientMoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestOrDir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestOrDir == nil {
				m.DestOrDir = &CPPBattle_Vec2{}
			}
			if err := m.DestOrDir.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManual", wireType)
			}
			m.IsManual = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsManual |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_DamagePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DamagePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DamagePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefenderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillViewIndex", wireType)
			}
			m.SkillViewIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillViewIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillIndex", wireType)
			}
			m.SkillIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageColor", wireType)
			}
			m.DamageColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageColor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDodge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDodge = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsParry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsParry = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerConfigId", wireType)
			}
			m.AttackerConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderConfigId", wireType)
			}
			m.DefenderConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenderConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_BuffValuePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffValuePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffValuePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CasterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CasterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageColor", wireType)
			}
			m.DamageColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageColor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDodge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDodge = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsParry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsParry = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CasterConfigId", wireType)
			}
			m.CasterConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CasterConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerConfigId", wireType)
			}
			m.OwnerConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_BuffInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTime", wireType)
			}
			m.RemainTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlayCount", wireType)
			}
			m.OverlayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverlayCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_BuffPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buffs == nil {
				m.Buffs = make(map[int64]*CPPBattle_BuffInfo)
			}
			var mapkey int64
			var mapvalue *CPPBattle_BuffInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCppBattle
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCppBattle
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CPPBattle_BuffInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Buffs[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroConfigId", wireType)
			}
			m.HeroConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_SkillPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefenderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillViewIndex", wireType)
			}
			m.SkillViewIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillViewIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerHeroId", wireType)
			}
			m.AttackerHeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerHeroId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_RevivePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevivePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevivePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveTyp", wireType)
			}
			m.ReviveTyp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveTyp |= ReviveTyp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_ReviveHeroPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReviveHeroPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReviveHeroPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_DeadPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeadPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeadPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillViewIndex", wireType)
			}
			m.SkillViewIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillViewIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillIndex", wireType)
			}
			m.SkillIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Drop == nil {
				m.Drop = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Drop[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerConfigId", wireType)
			}
			m.AttackerConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderConfigId", wireType)
			}
			m.DefenderConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenderConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveCost", wireType)
			}
			m.ReviveCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveTime", wireType)
			}
			m.ReviveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_QueryDeadPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeadPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeadPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveCost", wireType)
			}
			m.ReviveCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviveTime", wireType)
			}
			m.ReviveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReviveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MonsterPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.HeroForBattle{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuffSpeed = float32(math.Float32frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MoveOutPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveOutPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveOutPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = append(m.ObjId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_PosChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PosChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PosChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MoveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MoveInfo1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveInfo1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveInfo1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MovePath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MovePath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MovePath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, &CPPBattle_Vec2{})
			if err := m.Paths[len(m.Paths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MovePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MovePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MovePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MoveTime = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuffSpeed = float32(math.Float32frombits(v))
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CustomSpeed = float32(math.Float32frombits(v))
		case 102:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CustomTime = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_ControlMovePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlMovePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlMovePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ps = append(m.Ps, &CPPBattle_ControlPoint{})
			if err := m.Ps[len(m.Ps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_ControlPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Time = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_LeaveAreaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveAreaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveAreaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_LeaveAreaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveAreaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveAreaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_ExitBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_StopMovePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopMovePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopMovePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_GetTempBagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTempBagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTempBagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_GetTempBagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTempBagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTempBagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bag == nil {
				m.Bag = &models.TempBag{}
			}
			if err := m.Bag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_DrawTempBagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawTempBagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawTempBagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_DrawTempBagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawTempBagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawTempBagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_TakeMedicineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakeMedicineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakeMedicineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdTime", wireType)
			}
			m.CdTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_TakeMedicineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakeMedicineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakeMedicineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MedicineItemsPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedicineItemsPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedicineItemsPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medicine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Medicine == nil {
				m.Medicine = make(map[int64]*models.MedicineInfo)
			}
			var mapkey int64
			var mapvalue *models.MedicineInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCppBattle
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCppBattle
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &models.MedicineInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Medicine[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_DestroyAirWallPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DestroyAirWallPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DestroyAirWallPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirWallId", wireType)
			}
			m.AirWallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirWallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_CurAirWallPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurAirWallPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurAirWallPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirWalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AirWalls == nil {
				m.AirWalls = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AirWalls[mapkey] = mapvalue
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_DungeonPlayerDamageStatPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DungeonPlayerDamageStatPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DungeonPlayerDamageStatPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DamageStat == nil {
				m.DamageStat = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCppBattle
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCppBattle
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DamageStat[mapkey] = mapvalue
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_DungeonCurStagePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DungeonCurStagePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DungeonCurStagePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conditions == nil {
				m.Conditions = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Conditions[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KillCounts == nil {
				m.KillCounts = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.KillCounts[mapkey] = mapvalue
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MapSyncNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapSyncNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapSyncNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFrame", wireType)
			}
			m.ServerFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerList = append(m.PlayerList, &CPPBattle_PlayerPush{})
			if err := m.PlayerList[len(m.PlayerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonsterList = append(m.MonsterList, &CPPBattle_MonsterPush{})
			if err := m.MonsterList[len(m.MonsterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveOutList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoveOutList = append(m.MoveOutList, &CPPBattle_MoveOutPush{})
			if err := m.MoveOutList[len(m.MoveOutList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoveList = append(m.MoveList, &CPPBattle_MovePush{})
			if err := m.MoveList[len(m.MoveList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_TransFormRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransFormRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransFormRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_TransFormNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransFormNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransFormNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &CPPBattle_Vec2{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Towards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Towards == nil {
				m.Towards = &CPPBattle_Vec2{}
			}
			if err := m.Towards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_HeroUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attr == nil {
				m.Attr = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attr[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equip == nil {
				m.Equip = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Equip[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkillIds = append(m.SkillIds, &models.HeroSkillAndStone{})
			if err := m.SkillIds[len(m.SkillIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSkillChange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSkillChange = bool(v != 0)
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Buff = append(m.Buff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattle
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattle
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Buff) == 0 {
					m.Buff = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Buff = append(m.Buff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buff", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TalentBuff = append(m.TalentBuff, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattle
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattle
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TalentBuff) == 0 {
					m.TalentBuff = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TalentBuff = append(m.TalentBuff, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentBuff", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipLightEffect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipLightEffect == nil {
				m.EquipLightEffect = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EquipLightEffect[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fashion", wireType)
			}
			m.Fashion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fashion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_CPPChangeFormationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPChangeFormationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPChangeFormationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &models.Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heroes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heroes = append(m.Heroes, &models.HeroForBattle{})
			if err := m.Heroes[len(m.Heroes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			m.ChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_CPPChangeFormationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPPChangeFormationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPPChangeFormationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_GMAddBuffPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMAddBuffPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMAddBuffPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
			m.BuffId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_BlockPlayerPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPlayerPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPlayerPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_UnblockPlayerPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnblockPlayerPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnblockPlayerPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_RoguelikeRewardPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoguelikeRewardPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoguelikeRewardPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterReward", wireType)
			}
			m.OuterReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OuterReward |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OptionalArtifact = append(m.OptionalArtifact, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattle
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattle
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OptionalArtifact) == 0 {
					m.OptionalArtifact = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OptionalArtifact = append(m.OptionalArtifact, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalArtifact", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_RoguelikeSelectArtifactRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoguelikeSelectArtifactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoguelikeSelectArtifactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_RoguelikeSelectArtifactResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoguelikeSelectArtifactResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoguelikeSelectArtifactResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactId", wireType)
			}
			m.ArtifactId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArtifactId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MonsterBossKillPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterBossKillPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterBossKillPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BossId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossPos == nil {
				m.BossPos = &models.Vec2{}
			}
			if err := m.BossPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterConfigId", wireType)
			}
			m.MonsterConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterConfigId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_MonsterJoinKillPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterJoinKillPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterJoinKillPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasKill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasKill = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasJoin = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinItems = append(m.JoinItems, &models.Item{})
			if err := m.JoinItems[len(m.JoinItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropPos == nil {
				m.DropPos = &models.Vec2{}
			}
			if err := m.DropPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_DropItemPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropItemPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropItemPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropPos == nil {
				m.DropPos = &models.Vec2{}
			}
			if err := m.DropPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &models.Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_UserTitleChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTitleChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTitleChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_UserLevelChangePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLevelChangePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLevelChangePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_EnterPlaneDungeonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterPlaneDungeonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterPlaneDungeonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sbp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sbp == nil {
				m.Sbp = &models.SingleBattleParam{}
			}
			if err := m.Sbp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardItems == nil {
				m.RewardItems = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCppBattle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCppBattle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RewardItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapScenceId", wireType)
			}
			m.MapScenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapScenceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_EnterPlaneDungeonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterPlaneDungeonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterPlaneDungeonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPPBattle_UserAutoSoulSkillPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAutoSoulSkillPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAutoSoulSkillPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSouleSkill", wireType)
			}
			m.AutoSouleSkill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoSouleSkill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonsterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterId", wireType)
			}
			m.MonsterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &models.Postion{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConditionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConditionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConditionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionType", wireType)
			}
			m.ConditionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConditionType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ConditionValue = append(m.ConditionValue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCppBattle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCppBattle
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCppBattle
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ConditionValue) == 0 {
					m.ConditionValue = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCppBattle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ConditionValue = append(m.ConditionValue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionValue", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleBattleMonsterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleBattleMonsterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleBattleMonsterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCppBattle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCppBattle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonsterInfo = append(m.MonsterInfo, &MonsterInfo{})
			if err := m.MonsterInfo[len(m.MonsterInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCppBattle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCppBattle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCppBattle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCppBattle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCppBattle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCppBattle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCppBattle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCppBattle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCppBattle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCppBattle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCppBattle = fmt.Errorf("proto: unexpected end of group")
)
